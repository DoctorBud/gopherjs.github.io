// +build generate

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"text/template"
)

func t(text string) *template.Template {
	return template.Must(template.New("").Parse(text))
}

// Filename -> Template.
var templates = map[string]*template.Template{

	"index.md": t(`---
# generated by generate.go; DO NOT EDIT
layout: index
title: Home
permalink: /
---

{{.HTTPGet "https://raw.githubusercontent.com/gopherjs/gopherjs/master/README.md"}}`),
}

type data struct{}

// HTTPGet fetches the contents at the given url.
func (data) HTTPGet(url string) (string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}
	return string(body), nil
}

func gen() error {
	for filename, t := range templates {
		var buf bytes.Buffer
		err := t.Execute(&buf, data{})
		if err != nil {
			return err
		}
		fmt.Println("writing", filename)
		err = ioutil.WriteFile(filename, buf.Bytes(), 0644)
		if err != nil {
			return err
		}
	}

	return nil
}

func main() {
	err := gen()
	if err != nil {
		log.Fatalln(err)
	}
}
