"use strict";
(function() {

Error.stackTraceLimit = -1;

var go$reservedKeywords = ["abstract", "arguments", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "eval", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "var", "void", "volatile", "while", "with", "yield"];

var go$global;
if (typeof window !== "undefined") {
	go$global = window;
} else if (typeof GLOBAL !== "undefined") {
	go$global = GLOBAL;
}

var go$idCounter = 0;
var go$keys = function(m) { return m ? Object.keys(m) : []; };
var go$min = Math.min;
var go$parseInt = parseInt;
var go$parseFloat = parseFloat;
var go$toString = String;
var go$reflect, go$newStringPtr;
var Go$Array = Array;
var Go$Error = Error;

var go$floatKey = function(f) {
	if (f !== f) {
		go$idCounter++;
		return "NaN$" + go$idCounter;
	}
	return String(f);
};

var go$mapArray = function(array, f) {
	var newArray = new array.constructor(array.length), i;
	for (i = 0; i < array.length; i++) {
		newArray[i] = f(array[i]);
	}
	return newArray;
};

var go$newType = function(size, kind, string, name, pkgPath, constructor) {
	var typ;
	switch(kind) {
	case "Bool":
	case "Int":
	case "Int8":
	case "Int16":
	case "Int32":
	case "Uint":
	case "Uint8" :
	case "Uint16":
	case "Uint32":
	case "Uintptr":
	case "String":
	case "UnsafePointer":
		typ = function(v) { this.go$val = v; };
		typ.prototype.go$key = function() { return string + "$" + this.go$val; };
		break;

	case "Float32":
	case "Float64":
		typ = function(v) { this.go$val = v; };
		typ.prototype.go$key = function() { return string + "$" + go$floatKey(this.go$val); };
		break;

	case "Int64":
		typ = function(high, low) {
			this.high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
			this.low = low >>> 0;
			this.go$val = this;
		};
		typ.prototype.go$key = function() { return string + "$" + this.high + "$" + this.low; };
		break;

	case "Uint64":
		typ = function(high, low) {
			this.high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
			this.low = low >>> 0;
			this.go$val = this;
		};
		typ.prototype.go$key = function() { return string + "$" + this.high + "$" + this.low; };
		break;

	case "Complex64":
	case "Complex128":
		typ = function(real, imag) {
			this.real = real;
			this.imag = imag;
			this.go$val = this;
		};
		typ.prototype.go$key = function() { return string + "$" + this.real + "$" + this.imag; };
		break;

	case "Array":
		typ = function(v) { this.go$val = v; };
		typ.Ptr = go$newType(4, "Ptr", "*" + string, "", "", function(array) {
			this.go$get = function() { return array; };
			this.go$val = array;
		});
		typ.init = function(elem, len) {
			typ.elem = elem;
			typ.len = len;
			typ.prototype.go$key = function() {
				return string + "$" + go$mapArray(this.go$val, function(e) {
					var key = e.go$key ? e.go$key() : String(e);
					return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
				}).join("$");
			};
			typ.extendReflectType = function(rt) {
				rt.arrayType = new go$reflect.arrayType(rt, elem.reflectType(), undefined, len);
			};
			typ.Ptr.init(typ);
		};
		break;

	case "Chan":
		typ = function() { this.go$val = this; };
		typ.prototype.go$key = function() {
			if (this.go$id === undefined) {
				go$idCounter++;
				this.go$id = go$idCounter;
			}
			return String(this.go$id);
		};
		typ.init = function(elem, sendOnly, recvOnly) {
			typ.nil = new typ();
			typ.extendReflectType = function(rt) {
				rt.chanType = new go$reflect.chanType(rt, elem.reflectType(), sendOnly ? go$reflect.SendDir : (recvOnly ? go$reflect.RecvDir : go$reflect.BothDir));
			};
		};
		break;

	case "Func":
		typ = function(v) { this.go$val = v; };
		typ.init = function(params, results, variadic) {
			typ.params = params;
			typ.results = results;
			typ.variadic = variadic;
			typ.extendReflectType = function(rt) {
				var typeSlice = (go$sliceType(go$ptrType(go$reflect.rtype)));
				rt.funcType = new go$reflect.funcType(rt, variadic, new typeSlice(go$mapArray(params, function(p) { return p.reflectType(); })), new typeSlice(go$mapArray(results, function(p) { return p.reflectType(); })));
			};
		};
		break;

	case "Interface":
		typ = { implementedBy: [] };
		typ.init = function(methods) {
			typ.extendReflectType = function(rt) {
				var imethods = go$mapArray(methods, function(m) {
					return new go$reflect.imethod(go$newStringPtr(m[0]), go$newStringPtr(m[1]), m[2].reflectType());
				});
				var methodSlice = (go$sliceType(go$ptrType(go$reflect.imethod)));
				rt.interfaceType = new go$reflect.interfaceType(rt, new methodSlice(imethods));
			};
		};
		break;

	case "Map":
		typ = function(v) { this.go$val = v; };
		typ.init = function(key, elem) {
			typ.key = key;
			typ.elem = elem;
			typ.extendReflectType = function(rt) {
				rt.mapType = new go$reflect.mapType(rt, key.reflectType(), elem.reflectType(), undefined, undefined);
			};
		};
		break;

	case "Ptr":
		typ = constructor || function(getter, setter) {
			this.go$get = getter;
			this.go$set = setter;
			this.go$val = this;
		};
		typ.prototype.go$key = function() {
			if (this.go$id === undefined) {
				go$idCounter++;
				this.go$id = go$idCounter;
			}
			return String(this.go$id);
		};
		typ.init = function(elem) {
			typ.nil = new typ(go$throwNilPointerError, go$throwNilPointerError);
			typ.extendReflectType = function(rt) {
				rt.ptrType = new go$reflect.ptrType(rt, elem.reflectType());
			};
		};
		break;

	case "Slice":
		var nativeArray;
		typ = function(array) {
			if (array.constructor !== nativeArray) {
				array = new nativeArray(array);
			}
			this.array = array;
			this.offset = 0;
			this.length = array.length;
			this.capacity = array.length;
			this.go$val = this;
		};
		typ.make = function(length, capacity, zero) {
			capacity = capacity || length;
			var array = new nativeArray(capacity), i;
			for (i = 0; i < capacity; i++) {
				array[i] = zero();
			}
			var slice = new typ(array);
			slice.length = length;
			return slice;
		};
		typ.init = function(elem) {
			typ.elem = elem;
			nativeArray = go$nativeArray(elem.kind);
			typ.nil = new typ([]);
			typ.extendReflectType = function(rt) {
				rt.sliceType = new go$reflect.sliceType(rt, elem.reflectType());
			};
		};
		break;

	case "Struct":
		typ = function(v) { this.go$val = v; };
		typ.Ptr = go$newType(4, "Ptr", "*" + string, "", "", constructor);
		typ.Ptr.Struct = typ;
		typ.init = function(fields) {
			typ.Ptr.init(typ);
			typ.Ptr.nil = new constructor();
			var i;
			for (i = 0; i < fields.length; i++) {
				var field = fields[i];
				Object.defineProperty(typ.Ptr.nil, field[0], { get: go$throwNilPointerError, set: go$throwNilPointerError });
			}
			typ.prototype.go$key = function() {
				var keys = new Array(fields.length);
				for (i = 0; i < fields.length; i++) {
					var v = this.go$val[go$fieldName(fields, i)];
					var key = v.go$key ? v.go$key() : String(v);
					keys[i] = key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
				}
				return string + "$" + keys.join("$");
			};
			typ.extendReflectType = function(rt) {
				var reflectFields = new Array(fields.length), i;
				for (i = 0; i < fields.length; i++) {
					var field = fields[i];
					reflectFields[i] = new go$reflect.structField(go$newStringPtr(field[0]), go$newStringPtr(field[1]), field[2].reflectType(), go$newStringPtr(field[3]), i);
				}
				rt.structType = new go$reflect.structType(rt, new (go$sliceType(go$reflect.structField))(reflectFields));
			};
		};
		break;

	default:
		throw go$panic(new Go$String("invalid kind: " + kind));
	}

	typ.kind = kind;
	typ.string = string;
	typ.typeName = name;
	typ.pkgPath = pkgPath;
	var rt = null;
	typ.reflectType = function() {
		if (rt === null) {
			rt = new go$reflect.rtype(size, 0, 0, 0, 0, go$reflect.kinds[kind], undefined, undefined, go$newStringPtr(string), undefined, undefined);
			rt.jsType = typ;

			var methods = [];
			if (typ.methods !== undefined) {
				var i;
				for (i = 0; i < typ.methods.length; i++) {
					var m = typ.methods[i];
					methods.push(new go$reflect.method(go$newStringPtr(m[0]), go$newStringPtr(m[1]), go$funcType(m[2], m[3], m[4]).reflectType(), go$funcType([typ].concat(m[2]), m[3], m[4]).reflectType(), undefined, undefined));
				}
			}
			if (name !== "" || methods.length !== 0) {
				var methodSlice = (go$sliceType(go$ptrType(go$reflect.method)));
				rt.uncommonType = new go$reflect.uncommonType(go$newStringPtr(name), go$newStringPtr(pkgPath), new methodSlice(methods));
			}

			if (typ.extendReflectType !== undefined) {
				typ.extendReflectType(rt);
			}
		}
		return rt;
	};
	return typ;
};

var Go$Bool          = go$newType( 1, "Bool",          "bool",           "bool",       "", null);
var Go$Int           = go$newType( 4, "Int",           "int",            "int",        "", null);
var Go$Int8          = go$newType( 1, "Int8",          "int8",           "int8",       "", null);
var Go$Int16         = go$newType( 2, "Int16",         "int16",          "int16",      "", null);
var Go$Int32         = go$newType( 4, "Int32",         "int32",          "int32",      "", null);
var Go$Int64         = go$newType( 8, "Int64",         "int64",          "int64",      "", null);
var Go$Uint          = go$newType( 4, "Uint",          "uint",           "uint",       "", null);
var Go$Uint8         = go$newType( 1, "Uint8",         "uint8",          "uint8",      "", null);
var Go$Uint16        = go$newType( 2, "Uint16",        "uint16",         "uint16",     "", null);
var Go$Uint32        = go$newType( 4, "Uint32",        "uint32",         "uint32",     "", null);
var Go$Uint64        = go$newType( 8, "Uint64",        "uint64",         "uint64",     "", null);
var Go$Uintptr       = go$newType( 4, "Uintptr",       "uintptr",        "uintptr",    "", null);
var Go$Float32       = go$newType( 4, "Float32",       "float32",        "float32",    "", null);
var Go$Float64       = go$newType( 8, "Float64",       "float64",        "float64",    "", null);
var Go$Complex64     = go$newType( 8, "Complex64",     "complex64",      "complex64",  "", null);
var Go$Complex128    = go$newType(16, "Complex128",    "complex128",     "complex128", "", null);
var Go$String        = go$newType( 0, "String",        "string",         "string",     "", null);
var Go$UnsafePointer = go$newType( 4, "UnsafePointer", "unsafe.Pointer", "Pointer",    "", null);

var go$nativeArray = function(elemKind) {
	return ({ Int: Int32Array, Int8: Int8Array, Int16: Int16Array, Int32: Int32Array, Uint: Uint32Array, Uint8: Uint8Array, Uint16: Uint16Array, Uint32: Uint32Array, Uintptr: Uint32Array, Float32: Float32Array, Float64: Float64Array })[elemKind] || Array;
};
var go$toNativeArray = function(elemKind, array) {
	var nativeArray = go$nativeArray(elemKind);
	if (nativeArray === Array) {
		return array;
	}
	return new nativeArray(array);
};
var go$makeNativeArray = function(elemKind, length, zero) {
	var array = new (go$nativeArray(elemKind))(length), i;
	for (i = 0; i < length; i++) {
		array[i] = zero();
	}
	return array;
};
var go$arrayTypes = {};
var go$arrayType = function(elem, len) {
	var string = "[" + len + "]" + elem.string;
	var typ = go$arrayTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Array", string, "", "", null);
		typ.init(elem, len);
		go$arrayTypes[string] = typ;
	}
	return typ;
};

var go$chanType = function(elem, sendOnly, recvOnly) {
	var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
	var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
	var typ = elem[field];
	if (typ === undefined) {
		typ = go$newType(0, "Chan", string, "", "", null);
		typ.init(elem, sendOnly, recvOnly);
		elem[field] = typ;
	}
	return typ;
};

var go$funcTypes = {};
var go$funcType = function(params, results, variadic) {
	var paramTypes = go$mapArray(params, function(p) { return p.string; });
	if (variadic) {
		paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
	}
	var string = "func(" + paramTypes.join(", ") + ")";
	if (results.length === 1) {
		string += " " + results[0].string;
	} else if (results.length > 1) {
		string += " (" + go$mapArray(results, function(r) { return r.string; }).join(", ") + ")";
	}
	var typ = go$funcTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Func", string, "", "", null);
		typ.init(params, results, variadic);
		go$funcTypes[string] = typ;
	}
	return typ;
};

var go$interfaceTypes = {};
var go$interfaceType = function(methods) {
	var string = "interface {}";
	if (methods.length !== 0) {
		string = "interface { " + go$mapArray(methods, function(m) {
			return (m[1] !== "" ? m[1] + "." : "") + m[0] + m[2].string.substr(4);
		}).join("; ") + " }";
	}
	var typ = go$interfaceTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Interface", string, "", "", null);
		typ.init(methods);
		go$interfaceTypes[string] = typ;
	}
	return typ;
};
var go$emptyInterface = go$interfaceType([]);
var go$interfaceNil = { go$key: function() { return "nil"; } };
var go$error = go$newType(8, "Interface", "error", "error", "", null);
go$error.init([["Error", "", go$funcType([], [Go$String], false)]]);

var Go$Map = function() {};
(function() {
	var names = Object.getOwnPropertyNames(Object.prototype), i;
	for (i = 0; i < names.length; i++) {
		Go$Map.prototype[names[i]] = undefined;
	}
})();
var go$mapTypes = {};
var go$mapType = function(key, elem) {
	var string = "map[" + key.string + "]" + elem.string;
	var typ = go$mapTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Map", string, "", "", null);
		typ.init(key, elem);
		go$mapTypes[string] = typ;
	}
	return typ;
};

var go$throwNilPointerError = function() { go$throwRuntimeError("invalid memory address or nil pointer dereference"); };
var go$ptrType = function(elem) {
	var typ = elem.Ptr;
	if (typ === undefined) {
		typ = go$newType(0, "Ptr", "*" + elem.string, "", "", null);
		typ.init(elem);
		elem.Ptr = typ;
	}
	return typ;
};

var go$sliceType = function(elem) {
	var typ = elem.Slice;
	if (typ === undefined) {
		typ = go$newType(0, "Slice", "[]" + elem.string, "", "", null);
		typ.init(elem);
		elem.Slice = typ;
	}
	return typ;
};

var go$fieldName = function(fields, i) {
	var field = fields[i];
	var name = field[0];
	if (name === "") {
		var ntyp = field[2];
		if (ntyp.kind === "Ptr") {
			ntyp = ntyp.elem;
		}
		return ntyp.typeName;
	}
	if (name === "_" || go$reservedKeywords.indexOf(name) != -1) {
		return name + "$" + i;
	}
	return name;
};

var go$structTypes = {};
var go$structType = function(fields) {
	var string = "struct { " + go$mapArray(fields, function(f) {
		return f[0] + " " + f[2].string + (f[3] !== "" ? (' "' + f[3].replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"') : "");
	}).join("; ") + " }";
	var typ = go$structTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Struct", string, "", "", function() {
			this.go$val = this;
			var i;
			for (i = 0; i < fields.length; i++) {
				this[go$fieldName(fields, i)] = arguments[i];
			}
		});
		typ.init(fields);
		var i, j;
		for (i = 0; i < fields.length; i++) {
			var field = fields[i];
			if (field[0] === "" && field[2].prototype !== undefined) {
				var methods = Object.keys(field[2].prototype);
				for (j = 0; j < methods.length; j++) {
					(function(fieldName, methodName, method) {
						typ.prototype[methodName] = function() {
							return method.apply(this.go$val[fieldName], arguments);
						};
						typ.Ptr.prototype[methodName] = function() {
							return method.apply(this[fieldName], arguments);
						};
					})(field[0], methods[j], field[2].prototype[methods[j]]);
				}
			}
		}
		go$structTypes[string] = typ;
	}
	return typ;
};

var go$stringPtrMap = new Go$Map();
go$newStringPtr = function(str) {
	if (str === undefined || str === "") {
		return go$ptrType(Go$String).nil;
	}
	var ptr = go$stringPtrMap[str];
	if (ptr === undefined) {
		ptr = new (go$ptrType(Go$String))(function() { return str; }, function(v) { str = v; });
		go$stringPtrMap[str] = ptr;
	}
	return ptr;
};
var go$newDataPointer = function(data, constructor) {
	return new constructor(function() { return data; }, function(v) { data = v; });
};

var go$ldexp = function(frac, exp) {
	if (frac === 0) { return frac; }
	if (exp >= 1024) { return frac * Math.pow(2, 1023) * Math.pow(2, exp - 1023); }
	if (exp <= -1024) { return frac * Math.pow(2, -1023) * Math.pow(2, exp + 1023); }
	return frac * Math.pow(2, exp);
};
var go$float32bits = function(f) {
	var s, e, r;
	if (f === 0) {
		if (f === 0 && 1 / f === 1 / -0) {
			return 2147483648;
		}
		return 0;
	}
	if (f !== f) {
		return 2143289344;
	}
	s = 0;
	if (f < 0) {
		s = 2147483648;
		f = -f;
	}
	e = 150;
	while (f >= 1.6777216e+07) {
		f = f / 2;
		if (e === 255) {
			break;
		}
		e = e + 1 >>> 0;
	}
	while (f < 8.388608e+06) {
		e = e - 1 >>> 0;
		if (e === 0) {
			break;
		}
		f = f * 2;
	}
	r = f % 2;
	if ((r > 0.5 && r < 1) || r >= 1.5) {
		f++;
	}
	return (((s | (e << 23 >>> 0)) >>> 0) | (((f >> 0) & ~8388608))) >>> 0;
};
var go$float32frombits = function(b) {
	var s, e, m;
	s = 1;
	if (((b & 2147483648) >>> 0) !== 0) {
		s = -1;
	}
	e = (((b >>> 23 >>> 0)) & 255) >>> 0;
	m = (b & 8388607) >>> 0;
	if (e === 255) {
		if (m === 0) {
			return s / 0;
		}
		return 0/0;
	}
	if (e !== 0) {
		m = m + 8388608 >>> 0;
	}
	if (e === 0) {
		e = 1;
	}
	return go$ldexp(m, e - 127 - 23) * s;
};

var go$flatten64 = function(x) {
	return x.high * 4294967296 + x.low;
};
var go$shiftLeft64 = function(x, y) {
	if (y === 0) {
		return x;
	}
	if (y < 32) {
		return new x.constructor(x.high << y | x.low >>> (32 - y), (x.low << y) >>> 0);
	}
	if (y < 64) {
		return new x.constructor(x.low << (y - 32), 0);
	}
	return new x.constructor(0, 0);
};
var go$shiftRightInt64 = function(x, y) {
	if (y === 0) {
		return x;
	}
	if (y < 32) {
		return new x.constructor(x.high >> y, (x.low >>> y | x.high << (32 - y)) >>> 0);
	}
	if (y < 64) {
		return new x.constructor(x.high >> 31, (x.high >> (y - 32)) >>> 0);
	}
	if (x.high < 0) {
		return new x.constructor(-1, 4294967295);
	}
	return new x.constructor(0, 0);
};
var go$shiftRightUint64 = function(x, y) {
	if (y === 0) {
		return x;
	}
	if (y < 32) {
		return new x.constructor(x.high >>> y, (x.low >>> y | x.high << (32 - y)) >>> 0);
	}
	if (y < 64) {
		return new x.constructor(0, x.high >>> (y - 32));
	}
	return new x.constructor(0, 0);
};
var go$mul64 = function(x, y) {
	var high = 0, low = 0, i;
	if ((y.low & 1) !== 0) {
		high = x.high;
		low = x.low;
	}
	for (i = 1; i < 32; i++) {
		if ((y.low & 1<<i) !== 0) {
			high += x.high << i | x.low >>> (32 - i);
			low += (x.low << i) >>> 0;
		}
	}
	for (i = 0; i < 32; i++) {
		if ((y.high & 1<<i) !== 0) {
			high += x.low << i;
		}
	}
	return new x.constructor(high, low);
};
var go$div64 = function(x, y, returnRemainder) {
	if (y.high === 0 && y.low === 0) {
		go$throwRuntimeError("integer divide by zero");
	}

	var s = 1;
	var rs = 1;

	var xHigh = x.high;
	var xLow = x.low;
	if (xHigh < 0) {
		s = -1;
		rs = -1;
		xHigh = -xHigh;
		if (xLow !== 0) {
			xHigh--;
			xLow = 4294967296 - xLow;
		}
	}

	var yHigh = y.high;
	var yLow = y.low;
	if (y.high < 0) {
		s *= -1;
		yHigh = -yHigh;
		if (yLow !== 0) {
			yHigh--;
			yLow = 4294967296 - yLow;
		}
	}

	var high = 0, low = 0, n = 0, i;
	while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
		yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
		yLow = (yLow << 1) >>> 0;
		n++;
	}
	for (i = 0; i <= n; i++) {
		high = high << 1 | low >>> 31;
		low = (low << 1) >>> 0;
		if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
			xHigh = xHigh - yHigh;
			xLow = xLow - yLow;
			if (xLow < 0) {
				xHigh--;
				xLow += 4294967296;
			}
			low++;
			if (low === 4294967296) {
				high++;
				low = 0;
			}
		}
		yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
		yHigh = yHigh >>> 1;
	}

	if (returnRemainder) {
		return new x.constructor(xHigh * rs, xLow * rs);
	}
	return new x.constructor(high * s, low * s);
};

var go$divComplex = function(n, d) {
	var ninf = n.real === 1/0 || n.real === -1/0 || n.imag === 1/0 || n.imag === -1/0;
	var dinf = d.real === 1/0 || d.real === -1/0 || d.imag === 1/0 || d.imag === -1/0;
	var nnan = !ninf && (n.real !== n.real || n.imag !== n.imag);
	var dnan = !dinf && (d.real !== d.real || d.imag !== d.imag);
	if(nnan || dnan) {
		return new n.constructor(0/0, 0/0);
	}
	if (ninf && !dinf) {
		return new n.constructor(1/0, 1/0);
	}
	if (!ninf && dinf) {
		return new n.constructor(0, 0);
	}
	if (d.real === 0 && d.imag === 0) {
		if (n.real === 0 && n.imag === 0) {
			return new n.constructor(0/0, 0/0);
		}
		return new n.constructor(1/0, 1/0);
	}
	var a = Math.abs(d.real);
	var b = Math.abs(d.imag);
	if (a <= b) {
		var ratio = d.real / d.imag;
		var denom = d.real * ratio + d.imag;
		return new n.constructor((n.real * ratio + n.imag) / denom, (n.imag * ratio - n.real) / denom);
	}
	var ratio = d.imag / d.real;
	var denom = d.imag * ratio + d.real;
	return new n.constructor((n.imag * ratio + n.real) / denom, (n.imag - n.real * ratio) / denom);
};

var go$subslice = function(slice, low, high, max) {
	if (low < 0 || high < low || max < high || high > slice.capacity || max > slice.capacity) {
		go$throwRuntimeError("slice bounds out of range");
	}
	var s = new slice.constructor(slice.array);
	s.offset = slice.offset + low;
	s.length = slice.length - low;
	s.capacity = slice.capacity - low;
	if (high !== undefined) {
		s.length = high - low;
	}
	if (max !== undefined) {
		s.capacity = max - low;
	}
	return s;
};

var go$sliceToArray = function(slice) {
	if (slice.length === 0) {
		return [];
	}
	if (slice.array.constructor !== Array) {
		return slice.array.subarray(slice.offset, slice.offset + slice.length);
	}
	return slice.array.slice(slice.offset, slice.offset + slice.length);
};

var go$decodeRune = function(str, pos) {
	var c0 = str.charCodeAt(pos);

	if (c0 < 0x80) {
		return [c0, 1];
	}

	if (c0 !== c0 || c0 < 0xC0) {
		return [0xFFFD, 1];
	}

	var c1 = str.charCodeAt(pos + 1);
	if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
		return [0xFFFD, 1];
	}

	if (c0 < 0xE0) {
		var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
		if (r <= 0x7F) {
			return [0xFFFD, 1];
		}
		return [r, 2];
	}

	var c2 = str.charCodeAt(pos + 2);
	if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
		return [0xFFFD, 1];
	}

	if (c0 < 0xF0) {
		var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
		if (r <= 0x7FF) {
			return [0xFFFD, 1];
		}
		if (0xD800 <= r && r <= 0xDFFF) {
			return [0xFFFD, 1];
		}
		return [r, 3];
	}

	var c3 = str.charCodeAt(pos + 3);
	if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
		return [0xFFFD, 1];
	}

	if (c0 < 0xF8) {
		var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
		if (r <= 0xFFFF || 0x10FFFF < r) {
			return [0xFFFD, 1];
		}
		return [r, 4];
	}

	return [0xFFFD, 1];
};

var go$encodeRune = function(r) {
	if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
		r = 0xFFFD;
	}
	if (r <= 0x7F) {
		return String.fromCharCode(r);
	}
	if (r <= 0x7FF) {
		return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
	}
	if (r <= 0xFFFF) {
		return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
	}
	return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var go$stringToBytes = function(str, terminateWithNull) {
	var array = new Uint8Array(terminateWithNull ? str.length + 1 : str.length), i;
	for (i = 0; i < str.length; i++) {
		array[i] = str.charCodeAt(i);
	}
	if (terminateWithNull) {
		array[str.length] = 0;
	}
	return array;
};

var go$bytesToString = function(slice) {
	if (slice.length === 0) {
		return "";
	}
	var str = "", i;
	for (i = 0; i < slice.length; i += 10000) {
		str += String.fromCharCode.apply(null, slice.array.subarray(slice.offset + i, slice.offset + Math.min(slice.length, i + 10000)));
	}
	return str;
};

var go$stringToRunes = function(str) {
	var array = new Int32Array(str.length);
	var rune, i, j = 0;
	for (i = 0; i < str.length; i += rune[1], j++) {
		rune = go$decodeRune(str, i);
		array[j] = rune[0];
	}
	return array.subarray(0, j);
};

var go$runesToString = function(slice) {
	if (slice.length === 0) {
		return "";
	}
	var str = "", i;
	for (i = 0; i < slice.length; i++) {
		str += go$encodeRune(slice.array[slice.offset + i]);
	}
	return str;
};

var go$needsExternalization = function(t) {
	switch (t.kind) {
		case "Int64":
		case "Uint64":
		case "Array":
		case "Func":
		case "Interface":
		case "Map":
		case "Slice":
		case "String":
			return true;
		default:
			return false;
	}
};

var go$externalize = function(v, t) {
	switch (t.kind) {
	case "Int64":
	case "Uint64":
		return go$flatten64(v);
	case "Array":
		if (go$needsExternalization(t.elem)) {
			return go$mapArray(v, function(e) { return go$externalize(e, t.elem); });
		}
		return v;
	case "Func":
		if (v === go$throwNilPointerError) {
			return null;
		}
		var convert = false;
		var i;
		for (i = 0; i < t.params.length; i++) {
			convert = convert || (t.params[i] !== go$packages["github.com/gopherjs/gopherjs/js"].Object);
		}
		for (i = 0; i < t.results.length; i++) {
			convert = convert || go$needsExternalization(t.results[i]);
		}
		if (!convert) {
			return v;
		}
		return function() {
			var args = [], i;
			for (i = 0; i < t.params.length; i++) {
				if (t.variadic && i === t.params.length - 1) {
					var vt = t.params[i].elem, varargs = [], j;
					for (j = i; j < arguments.length; j++) {
						varargs.push(go$internalize(arguments[j], vt));
					}
					args.push(new (t.params[i])(varargs));
					break;
				}
				args.push(go$internalize(arguments[i], t.params[i]));
			}
			var result = v.apply(undefined, args);
			switch (t.results.length) {
			case 0:
				return;
			case 1:
				return go$externalize(result, t.results[0]);
			default:
				for (i = 0; i < t.results.length; i++) {
					result[i] = go$externalize(result[i], t.results[i]);
				}
				return result;
			}
		};
	case "Interface":
		if (v === null) {
			return null;
		}
		if (v.constructor.kind === undefined) {
			return v; // js.Object
		}
		return go$externalize(v.go$val, v.constructor);
	case "Map":
		var m = {};
		var keys = go$keys(v), i;
		for (i = 0; i < keys.length; i++) {
			var entry = v[keys[i]];
			m[go$externalize(entry.k, t.key)] = go$externalize(entry.v, t.elem);
		}
		return m;
	case "Slice":
		if (go$needsExternalization(t.elem)) {
			return go$mapArray(go$sliceToArray(v), function(e) { return go$externalize(e, t.elem); });
		}
		return go$sliceToArray(v);
	case "String":
		var s = "", r, i, j = 0;
		for (i = 0; i < v.length; i += r[1], j++) {
			r = go$decodeRune(v, i);
			s += String.fromCharCode(r[0]);
		}
		return s;
	case "Struct":
		var timePkg = go$packages["time"];
		if (timePkg && v.constructor === timePkg.Time.Ptr) {
			var milli = go$div64(v.UnixNano(), new Go$Int64(0, 1000000));
			return new Date(go$flatten64(milli));
		}
		return v;
	default:
		return v;
	}
};

var go$internalize = function(v, t, recv) {
	switch (t.kind) {
	case "Bool":
		return !!v;
	case "Int":
		return parseInt(v);
	case "Int8":
		return parseInt(v) << 24 >> 24;
	case "Int16":
		return parseInt(v) << 16 >> 16;
	case "Int32":
		return parseInt(v) >> 0;
	case "Uint":
		return parseInt(v);
	case "Uint8" :
		return parseInt(v) << 24 >>> 24;
	case "Uint16":
		return parseInt(v) << 16 >>> 16;
	case "Uint32":
	case "Uintptr":
		return parseInt(v) >>> 0;
	case "Int64":
	case "Uint64":
		return new t(0, v);
	case "Float32":
	case "Float64":
		return parseFloat(v);
	case "Array":
		if (v.length !== t.len) {
			go$throwRuntimeError("got array with wrong size from JavaScript native");
		}
		return go$mapArray(v, function(e) { return go$internalize(e, t.elem); });
	case "Func":
		return function() {
			var args = [], i;
			for (i = 0; i < t.params.length; i++) {
				if (t.variadic && i === t.params.length - 1) {
					var vt = t.params[i].elem, varargs = arguments[i], j;
					for (j = 0; j < varargs.length; j++) {
						args.push(go$externalize(varargs.array[varargs.offset + j], vt));
					}
					break;
				}
				args.push(go$externalize(arguments[i], t.params[i]));
			}
			var result = v.apply(recv, args);
			switch (t.results.length) {
			case 0:
				return;
			case 1:
				return go$internalize(result, t.results[0]);
			default:
				for (i = 0; i < t.results.length; i++) {
					result[i] = go$internalize(result[i], t.results[i]);
				}
				return result;
			}
		};
	case "Interface":
		if (t === go$packages["github.com/gopherjs/gopherjs/js"].Object) {
			return v;
		}
		switch (v.constructor) {
		case Int8Array:
			return new (go$sliceType(Go$Int8))(v);
		case Int16Array:
			return new (go$sliceType(Go$Int16))(v);
		case Int32Array:
			return new (go$sliceType(Go$Int))(v);
		case Uint8Array:
			return new (go$sliceType(Go$Uint8))(v);
		case Uint16Array:
			return new (go$sliceType(Go$Uint16))(v);
		case Uint32Array:
			return new (go$sliceType(Go$Uint))(v);
		case Float32Array:
			return new (go$sliceType(Go$Float32))(v);
		case Float64Array:
			return new (go$sliceType(Go$Float64))(v);
		case Array:
			return go$internalize(v, go$sliceType(go$emptyInterface));
		case Boolean:
			return new Go$Bool(!!v);
		case Date:
			var timePkg = go$packages["time"];
			if (timePkg) {
				return new timePkg.Time(timePkg.Unix(new Go$Int64(0, 0), new Go$Int64(0, v.getTime() * 1000000)));
			}
		case Function:
			var funcType = go$funcType([go$sliceType(go$emptyInterface)], [go$packages["github.com/gopherjs/gopherjs/js"].Object], true);
			return new funcType(go$internalize(v, funcType));
		case Number:
			return new Go$Float64(parseFloat(v));
		case Object:
			var mapType = go$mapType(Go$String, go$emptyInterface);
			return new mapType(go$internalize(v, mapType));
		case String:
			return new Go$String(go$internalize(v, Go$String));
		}
		return v;
	case "Map":
		var m = new Go$Map();
		var keys = go$keys(v), i;
		for (i = 0; i < keys.length; i++) {
			var key = go$internalize(keys[i], t.key);
			m[key.go$key ? key.go$key() : key] = { k: key, v: go$internalize(v[keys[i]], t.elem) };
		}
		return m;
	case "Slice":
		return new t(go$mapArray(v, function(e) { return go$internalize(e, t.elem); }));
	case "String":
		v = String(v);
		var s = "", i;
		for (i = 0; i < v.length; i++) {
			s += go$encodeRune(v.charCodeAt(i));
		}
		return s;
	default:
		return v;
	}
};

var go$copySlice = function(dst, src) {
	var n = Math.min(src.length, dst.length), i;
	if (dst.array.constructor !== Array && n !== 0) {
		dst.array.set(src.array.subarray(src.offset, src.offset + n), dst.offset);
		return n;
	}
	for (i = 0; i < n; i++) {
		dst.array[dst.offset + i] = src.array[src.offset + i];
	}
	return n;
};

var go$copyString = function(dst, src) {
	var n = Math.min(src.length, dst.length), i;
	for (i = 0; i < n; i++) {
		dst.array[dst.offset + i] = src.charCodeAt(i);
	}
	return n;
};

var go$copyArray = function(dst, src) {
	var i;
	for (i = 0; i < src.length; i++) {
		dst[i] = src[i];
	}
};

var go$growSlice = function(slice, length) {
	var newCapacity = Math.max(length, slice.capacity < 1024 ? slice.capacity * 2 : Math.floor(slice.capacity * 5 / 4));

	var newArray;
	if (slice.array.constructor === Array) {
		newArray = slice.array;
		if (slice.offset !== 0 || newArray.length !== slice.offset + slice.capacity) {
			newArray = newArray.slice(slice.offset);
		}
		newArray.length = newCapacity;
	} else {
		newArray = new slice.array.constructor(newCapacity);
		newArray.set(slice.array.subarray(slice.offset));
	}

	var newSlice = new slice.constructor(newArray);
	newSlice.length = slice.length;
	newSlice.capacity = newCapacity;
	return newSlice;
};

var go$append = function(slice) {
	if (arguments.length === 1) {
		return slice;
	}

	var newLength = slice.length + arguments.length - 1;
	if (newLength > slice.capacity) {
		slice = go$growSlice(slice, newLength);
	}

	var array = slice.array;
	var leftOffset = slice.offset + slice.length - 1, i;
	for (i = 1; i < arguments.length; i++) {
		array[leftOffset + i] = arguments[i];
	}

	var newSlice = new slice.constructor(array);
	newSlice.offset = slice.offset;
	newSlice.length = newLength;
	newSlice.capacity = slice.capacity;
	return newSlice;
};

var go$appendSlice = function(slice, toAppend) {
	if (toAppend.length === 0) {
		return slice;
	}

	var newLength = slice.length + toAppend.length;
	if (newLength > slice.capacity) {
		slice = go$growSlice(slice, newLength);
	}

	var array = slice.array;
	var leftOffset = slice.offset + slice.length, rightOffset = toAppend.offset, i;
	for (i = 0; i < toAppend.length; i++) {
		array[leftOffset + i] = toAppend.array[rightOffset + i];
	}

	var newSlice = new slice.constructor(array);
	newSlice.offset = slice.offset;
	newSlice.length = newLength;
	newSlice.capacity = slice.capacity;
	return newSlice;
};

var go$panic = function(value) {
	var message;
	if (value.constructor === Go$String) {
		message = value.go$val;
	} else if (value.Error !== undefined) {
		message = value.Error();
	} else if (value.String !== undefined) {
		message = value.String();
	} else {
		message = value;
	}
	var err = new Error(message);
	err.go$panicValue = value;
	return err;
};
var go$notSupported = function(feature) {
	var err = new Error("not supported by GopherJS: " + feature + " (hint: the file optional.go.patch contains patches for core packages)");
	err.go$notSupported = feature;
	throw err;
};
var go$throwRuntimeError; // set by package "runtime"

var go$errorStack = [], go$jsErr = null;

var go$pushErr = function(err) {
	if (err.go$panicValue === undefined) {
		var jsPkg = go$packages["github.com/gopherjs/gopherjs/js"];
		if (err.go$notSupported !== undefined || jsPkg === undefined) {
			go$jsErr = err;
			return;
		}
		err.go$panicValue = new jsPkg.Error.Ptr(err);
	}
	go$errorStack.push({ frame: go$getStackDepth(), error: err });
};

var go$callDeferred = function(deferred) {
	if (go$jsErr !== null) {
		throw go$jsErr;
	}
	var i;
	for (i = deferred.length - 1; i >= 0; i--) {
		var call = deferred[i];
		try {
			if (call.recv !== undefined) {
				call.recv[call.method].apply(call.recv, call.args);
				continue;
			}
			call.fun.apply(undefined, call.args);
		} catch (err) {
			go$errorStack.push({ frame: go$getStackDepth(), error: err });
		}
	}
	var err = go$errorStack[go$errorStack.length - 1];
	if (err !== undefined && err.frame === go$getStackDepth()) {
		go$errorStack.pop();
		throw err.error;
	}
};

var go$recover = function() {
	var err = go$errorStack[go$errorStack.length - 1];
	if (err === undefined || err.frame !== go$getStackDepth()) {
		return null;
	}
	go$errorStack.pop();
	return err.error.go$panicValue;
};

var go$getStack = function() {
	return (new Error()).stack.split("\n");
};

var go$getStackDepth = function() {
	var s = go$getStack(), d = 0, i;
	for (i = 0; i < s.length; i++) {
		if (s[i].indexOf("go$") === -1) {
			d++;
		}
	}
	return d;
};

var go$interfaceIsEqual = function(a, b) {
	if (a === null || b === null) {
		return a === null && b === null;
	}
	if (a.constructor !== b.constructor) {
		return false;
	}
	switch (a.constructor.kind) {
	case "Float32":
		return go$float32IsEqual(a.go$val, b.go$val);
	case "Complex64":
		return go$float32IsEqual(a.go$val.real, b.go$val.real) && go$float32IsEqual(a.go$val.imag, b.go$val.imag);
	case "Complex128":
		return a.go$val.real === b.go$val.real && a.go$val.imag === b.go$val.imag;
	case "Int64":
	case "Uint64":
		return a.go$val.high === b.go$val.high && a.go$val.low === b.go$val.low;
	case "Array":
		return go$arrayIsEqual(a.go$val, b.go$val);
	case "Ptr":
		if (a.constructor.Struct) {
			return a === b;
		}
		return go$pointerIsEqual(a, b);
	case "Func":
	case "Map":
	case "Slice":
	case "Struct":
		go$throwRuntimeError("comparing uncomparable type " + a.constructor);
	case undefined: // js.Object
		return a === b;
	default:
		return a.go$val === b.go$val;
	}
};
var go$float32IsEqual = function(a, b) {
	return a === a && b === b && go$float32bits(a) === go$float32bits(b);
}
var go$arrayIsEqual = function(a, b) {
	if (a.length != b.length) {
		return false;
	}
	var i;
	for (i = 0; i < a.length; i++) {
		if (a[i] !== b[i]) {
			return false;
		}
	}
	return true;
};
var go$sliceIsEqual = function(a, ai, b, bi) {
	return a.array === b.array && a.offset + ai === b.offset + bi;
};
var go$pointerIsEqual = function(a, b) {
	if (a === b) {
		return true;
	}
	if (a.go$get === go$throwNilPointerError || b.go$get === go$throwNilPointerError) {
		return a.go$get === go$throwNilPointerError && b.go$get === go$throwNilPointerError;
	}
	var old = a.go$get();
	var dummy = new Object();
	a.go$set(dummy);
	var equal = b.go$get() === dummy;
	a.go$set(old);
	return equal;
};

var go$typeAssertionFailed = function(obj, expected) {
	var got = "";
	if (obj !== null) {
		got = obj.constructor.string;
	}
	throw go$panic(new go$packages["runtime"].TypeAssertionError.Ptr("", got, expected.string, ""));
};

var go$now = function() { var msec = (new Date()).getTime(); return [new Go$Int64(0, Math.floor(msec / 1000)), (msec % 1000) * 1000000]; };

var go$packages = {};
go$packages["runtime"] = (function() {
	var go$pkg = {}, TypeAssertionError, errorString, Caller, SetFinalizer, getgoroot, GOROOT, sizeof_C_MStats;
	TypeAssertionError = go$pkg.TypeAssertionError = go$newType(0, "Struct", "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.go$val = this;
		this.interfaceString = interfaceString_ !== undefined ? interfaceString_ : "";
		this.concreteString = concreteString_ !== undefined ? concreteString_ : "";
		this.assertedString = assertedString_ !== undefined ? assertedString_ : "";
		this.missingMethod = missingMethod_ !== undefined ? missingMethod_ : "";
	});
	errorString = go$pkg.errorString = go$newType(0, "String", "runtime.errorString", "errorString", "runtime", null);
	TypeAssertionError.Ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.go$val.RuntimeError(); };
	TypeAssertionError.Ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.go$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.go$val;
	};
	go$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.go$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.go$val;
		return "runtime error: " + e;
	};
	go$ptrType(errorString).prototype.Error = function() { return new errorString(this.go$get()).Error(); };
	Caller = go$pkg.Caller = function(skip) {
			var line = go$getStack()[skip + 3];
			if (line === undefined) {
				return [0, "", 0, false];
			}
			var parts = line.substring(line.indexOf("(") + 1, line.indexOf(")")).split(":");
			return [0, parts[0], parseInt(parts[1]), true];
		};
	SetFinalizer = go$pkg.SetFinalizer = function() {};
	getgoroot = function() {
			return (typeof process !== 'undefined') ? (process.env["GOROOT"] || "") : "/";
		};
	GOROOT = go$pkg.GOROOT = function() {
		var s;
		s = getgoroot();
		if (!(s === "")) {
			return s;
		}
		return "/usr/local/go";
	};

			go$throwRuntimeError = function(msg) { throw go$panic(new errorString(msg)); };
			go$pkg.init = function() {
		TypeAssertionError.init([["interfaceString", "runtime", Go$String, ""], ["concreteString", "runtime", Go$String, ""], ["assertedString", "runtime", Go$String, ""], ["missingMethod", "runtime", Go$String, ""]]);
		(go$ptrType(TypeAssertionError)).methods = [["Error", "", [], [Go$String], false], ["RuntimeError", "", [], [], false]];
		errorString.methods = [["Error", "", [], [Go$String], false], ["RuntimeError", "", [], [], false]];
		(go$ptrType(errorString)).methods = [["Error", "", [], [Go$String], false], ["RuntimeError", "", [], [], false]];
		sizeof_C_MStats = 3712;
		if (!((sizeof_C_MStats === 3712))) {
			console.log(sizeof_C_MStats, 3712);
			throw go$panic(new Go$String("MStats vs MemStatsType size mismatch"));
		}
	}
	return go$pkg;
})();
go$packages["errors"] = (function() {
	var go$pkg = {}, errorString, New;
	errorString = go$pkg.errorString = go$newType(0, "Struct", "errors.errorString", "errorString", "errors", function(s_) {
		this.go$val = this;
		this.s = s_ !== undefined ? s_ : "";
	});
	New = go$pkg.New = function(text) {
		return new errorString.Ptr(text);
	};
	errorString.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.go$val.Error(); };
	go$pkg.init = function() {
		errorString.init([["s", "errors", Go$String, ""]]);
		(go$ptrType(errorString)).methods = [["Error", "", [], [Go$String], false]];
	}
	return go$pkg;
})();
go$packages["sync/atomic"] = (function() {
	var go$pkg = {}, CompareAndSwapInt32, AddInt32, LoadUint32, StoreInt32, StoreUint32;
	CompareAndSwapInt32 = go$pkg.CompareAndSwapInt32 = function(addr, oldVal, newVal) {
		if (addr.go$get() === oldVal) {
			addr.go$set(newVal);
			return true;
		}
		return false;
	};
	AddInt32 = go$pkg.AddInt32 = function(addr, delta) {
		var value = addr.go$get() + delta;
		addr.go$set(value);
		return value;
	};
	LoadUint32 = go$pkg.LoadUint32 = function(addr) {
		return addr.go$get();
	};
	StoreInt32 = go$pkg.StoreInt32 = function(addr, val) {
		addr.go$set(val);
	};
	StoreUint32 = go$pkg.StoreUint32 = function(addr, val) {
		addr.go$set(val);
	};
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["sync"] = (function() {
	var go$pkg = {}, atomic = go$packages["sync/atomic"], Mutex, Locker, Once, RWMutex, rlocker, runtime_Semacquire, runtime_Semrelease, runtime_Syncsemcheck;
	Mutex = go$pkg.Mutex = go$newType(0, "Struct", "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.go$val = this;
		this.state = state_ !== undefined ? state_ : 0;
		this.sema = sema_ !== undefined ? sema_ : 0;
	});
	Locker = go$pkg.Locker = go$newType(0, "Interface", "sync.Locker", "Locker", "sync", null);
	Once = go$pkg.Once = go$newType(0, "Struct", "sync.Once", "Once", "sync", function(m_, done_) {
		this.go$val = this;
		this.m = m_ !== undefined ? m_ : new Mutex.Ptr();
		this.done = done_ !== undefined ? done_ : 0;
	});
	RWMutex = go$pkg.RWMutex = go$newType(0, "Struct", "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.go$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.Ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	rlocker = go$pkg.rlocker = go$newType(0, "Struct", "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.go$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.Ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	Mutex.Ptr.prototype.Lock = function() {
		var m, v, awoke, old, new$1, v$1, v$2;
		m = this;
		if (atomic.CompareAndSwapInt32(new (go$ptrType(Go$Int32))(function() { return m.state; }, function(v) { m.state = v; }), 0, 1)) {
			return;
		}
		awoke = false;
		while (true) {
			old = m.state;
			new$1 = old | 1;
			if (!(((old & 1) === 0))) {
				new$1 = old + 4 >> 0;
			}
			if (awoke) {
				new$1 = new$1 & ~2;
			}
			if (atomic.CompareAndSwapInt32(new (go$ptrType(Go$Int32))(function() { return m.state; }, function(v$1) { m.state = v$1; }), old, new$1)) {
				if ((old & 1) === 0) {
					break;
				}
				runtime_Semacquire(new (go$ptrType(Go$Uint32))(function() { return m.sema; }, function(v$2) { m.sema = v$2; }));
				awoke = true;
			}
		}
	};
	Mutex.prototype.Lock = function() { return this.go$val.Lock(); };
	Mutex.Ptr.prototype.Unlock = function() {
		var m, v, new$1, old, v$1, v$2;
		m = this;
		new$1 = atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return m.state; }, function(v) { m.state = v; }), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			throw go$panic(new Go$String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		while (true) {
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			if (atomic.CompareAndSwapInt32(new (go$ptrType(Go$Int32))(function() { return m.state; }, function(v$1) { m.state = v$1; }), old, new$1)) {
				runtime_Semrelease(new (go$ptrType(Go$Uint32))(function() { return m.sema; }, function(v$2) { m.sema = v$2; }));
				return;
			}
			old = m.state;
		}
	};
	Mutex.prototype.Unlock = function() { return this.go$val.Unlock(); };
	Once.Ptr.prototype.Do = function(f) {
		var o, v, v$1;
		var go$deferred = [];
		try {
			o = this;
			if (atomic.LoadUint32(new (go$ptrType(Go$Uint32))(function() { return o.done; }, function(v) { o.done = v; })) === 1) {
				return;
			}
			o.m.Lock();
			go$deferred.push({ recv: o.m, method: "Unlock", args: [] });
			if (o.done === 0) {
				f();
				atomic.StoreUint32(new (go$ptrType(Go$Uint32))(function() { return o.done; }, function(v$1) { o.done = v$1; }), 1);
			}
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Once.prototype.Do = function(f) { return this.go$val.Do(f); };
	runtime_Semacquire = function() {
		throw go$panic("Native function not implemented: runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		throw go$panic("Native function not implemented: runtime_Semrelease");
	};
	runtime_Syncsemcheck = function() {};
	RWMutex.Ptr.prototype.RLock = function() {
		var rw, v, v$1;
		rw = this;
		if (atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerCount; }, function(v) { rw.readerCount = v; }), 1) < 0) {
			runtime_Semacquire(new (go$ptrType(Go$Uint32))(function() { return rw.readerSem; }, function(v$1) { rw.readerSem = v$1; }));
		}
	};
	RWMutex.prototype.RLock = function() { return this.go$val.RLock(); };
	RWMutex.Ptr.prototype.RUnlock = function() {
		var rw, v, v$1, v$2;
		rw = this;
		if (atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerCount; }, function(v) { rw.readerCount = v; }), -1) < 0) {
			if (atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerWait; }, function(v$1) { rw.readerWait = v$1; }), -1) === 0) {
				runtime_Semrelease(new (go$ptrType(Go$Uint32))(function() { return rw.writerSem; }, function(v$2) { rw.writerSem = v$2; }));
			}
		}
	};
	RWMutex.prototype.RUnlock = function() { return this.go$val.RUnlock(); };
	RWMutex.Ptr.prototype.Lock = function() {
		var rw, v, r, v$1, v$2;
		rw = this;
		rw.w.Lock();
		r = atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerCount; }, function(v) { rw.readerCount = v; }), -1073741824) + 1073741824 >> 0;
		if (!((r === 0)) && !((atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerWait; }, function(v$1) { rw.readerWait = v$1; }), r) === 0))) {
			runtime_Semacquire(new (go$ptrType(Go$Uint32))(function() { return rw.writerSem; }, function(v$2) { rw.writerSem = v$2; }));
		}
	};
	RWMutex.prototype.Lock = function() { return this.go$val.Lock(); };
	RWMutex.Ptr.prototype.Unlock = function() {
		var rw, v, r, i, v$1;
		rw = this;
		r = atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerCount; }, function(v) { rw.readerCount = v; }), 1073741824);
		i = 0;
		while (i < (r >> 0)) {
			runtime_Semrelease(new (go$ptrType(Go$Uint32))(function() { return rw.readerSem; }, function(v$1) { rw.readerSem = v$1; }));
			i = i + 1 >> 0;
		}
		rw.w.Unlock();
	};
	RWMutex.prototype.Unlock = function() { return this.go$val.Unlock(); };
	RWMutex.Ptr.prototype.RLocker = function() {
		var rw, _struct, _struct$1;
		rw = this;
		return (_struct = rw, new rlocker.Ptr((_struct$1 = _struct.w, new Mutex.Ptr(_struct$1.state, _struct$1.sema)), _struct.writerSem, _struct.readerSem, _struct.readerCount, _struct.readerWait));
	};
	RWMutex.prototype.RLocker = function() { return this.go$val.RLocker(); };
	rlocker.Ptr.prototype.Lock = function() {
		var r, _struct, _struct$1;
		r = this;
		(_struct = r, new RWMutex.Ptr((_struct$1 = _struct.w, new Mutex.Ptr(_struct$1.state, _struct$1.sema)), _struct.writerSem, _struct.readerSem, _struct.readerCount, _struct.readerWait)).RLock();
	};
	rlocker.prototype.Lock = function() { return this.go$val.Lock(); };
	rlocker.Ptr.prototype.Unlock = function() {
		var r, _struct, _struct$1;
		r = this;
		(_struct = r, new RWMutex.Ptr((_struct$1 = _struct.w, new Mutex.Ptr(_struct$1.state, _struct$1.sema)), _struct.writerSem, _struct.readerSem, _struct.readerCount, _struct.readerWait)).RUnlock();
	};
	rlocker.prototype.Unlock = function() { return this.go$val.Unlock(); };
	go$pkg.init = function() {
		Mutex.init([["state", "sync", Go$Int32, ""], ["sema", "sync", Go$Uint32, ""]]);
		(go$ptrType(Mutex)).methods = [["Lock", "", [], [], false], ["Unlock", "", [], [], false]];
		Locker.init([["Lock", "", (go$funcType([], [], false))], ["Unlock", "", (go$funcType([], [], false))]]);
		Once.init([["m", "sync", Mutex, ""], ["done", "sync", Go$Uint32, ""]]);
		(go$ptrType(Once)).methods = [["Do", "", [(go$funcType([], [], false))], [], false]];
		RWMutex.init([["w", "sync", Mutex, ""], ["writerSem", "sync", Go$Uint32, ""], ["readerSem", "sync", Go$Uint32, ""], ["readerCount", "sync", Go$Int32, ""], ["readerWait", "sync", Go$Int32, ""]]);
		(go$ptrType(RWMutex)).methods = [["Lock", "", [], [], false], ["RLock", "", [], [], false], ["RLocker", "", [], [Locker], false], ["RUnlock", "", [], [], false], ["Unlock", "", [], [], false]];
		rlocker.init([["w", "sync", Mutex, ""], ["writerSem", "sync", Go$Uint32, ""], ["readerSem", "sync", Go$Uint32, ""], ["readerCount", "sync", Go$Int32, ""], ["readerWait", "sync", Go$Int32, ""]]);
		(go$ptrType(rlocker)).methods = [["Lock", "", [], [], false], ["Unlock", "", [], [], false]];
		var s;
		s = go$makeNativeArray("Uintptr", 3, function() { return 0; });
		runtime_Syncsemcheck(12);
	}
	return go$pkg;
})();
go$packages["io"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], sync = go$packages["sync"], Reader, Writer, ReadCloser, ReaderFrom, WriterTo, RuneReader, RuneScanner, stringWriter, WriteString, ReadAtLeast, ReadFull, Copy, errWhence, errOffset;
	Reader = go$pkg.Reader = go$newType(0, "Interface", "io.Reader", "Reader", "io", null);
	Writer = go$pkg.Writer = go$newType(0, "Interface", "io.Writer", "Writer", "io", null);
	ReadCloser = go$pkg.ReadCloser = go$newType(0, "Interface", "io.ReadCloser", "ReadCloser", "io", null);
	ReaderFrom = go$pkg.ReaderFrom = go$newType(0, "Interface", "io.ReaderFrom", "ReaderFrom", "io", null);
	WriterTo = go$pkg.WriterTo = go$newType(0, "Interface", "io.WriterTo", "WriterTo", "io", null);
	RuneReader = go$pkg.RuneReader = go$newType(0, "Interface", "io.RuneReader", "RuneReader", "io", null);
	RuneScanner = go$pkg.RuneScanner = go$newType(0, "Interface", "io.RuneScanner", "RuneScanner", "io", null);
	stringWriter = go$pkg.stringWriter = go$newType(0, "Interface", "io.stringWriter", "stringWriter", "io", null);
	WriteString = go$pkg.WriteString = function(w, s) {
		var n, err, ok, _tuple, sw, _tuple$1, _tuple$2;
		n = 0;
		err = null;
		if (_tuple = (w !== null && stringWriter.implementedBy.indexOf(w.constructor) !== -1 ? [w, true] : [null, false]), sw = _tuple[0], ok = _tuple[1], ok) {
			_tuple$1 = sw.WriteString(s), n = _tuple$1[0], err = _tuple$1[1];
			return [n, err];
		}
		_tuple$2 = w.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes(s))), n = _tuple$2[0], err = _tuple$2[1];
		return [n, err];
	};
	ReadAtLeast = go$pkg.ReadAtLeast = function(r, buf, min) {
		var n, err, _tuple, nn, _tuple$1;
		n = 0;
		err = null;
		if (buf.length < min) {
			_tuple = [0, go$pkg.ErrShortBuffer], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		while (n < min && go$interfaceIsEqual(err, null)) {
			nn = 0;
			_tuple$1 = r.Read(go$subslice(buf, n)), nn = _tuple$1[0], err = _tuple$1[1];
			n = n + (nn) >> 0;
		}
		if (n >= min) {
			err = null;
		} else if (n > 0 && go$interfaceIsEqual(err, go$pkg.EOF)) {
			err = go$pkg.ErrUnexpectedEOF;
		}
		return [n, err];
	};
	ReadFull = go$pkg.ReadFull = function(r, buf) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = ReadAtLeast(r, buf, buf.length), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	Copy = go$pkg.Copy = function(dst, src) {
		var written, err, ok, _tuple, wt, _tuple$1, ok$1, _tuple$2, rt, _tuple$3, buf, _tuple$4, nr, er, _tuple$5, nw, ew, x, _tuple$6;
		written = new Go$Int64(0, 0);
		err = null;
		if (_tuple = (src !== null && WriterTo.implementedBy.indexOf(src.constructor) !== -1 ? [src, true] : [null, false]), wt = _tuple[0], ok = _tuple[1], ok) {
			_tuple$1 = wt.WriteTo(dst), written = _tuple$1[0], err = _tuple$1[1];
			return [written, err];
		}
		if (_tuple$2 = (dst !== null && ReaderFrom.implementedBy.indexOf(dst.constructor) !== -1 ? [dst, true] : [null, false]), rt = _tuple$2[0], ok$1 = _tuple$2[1], ok$1) {
			_tuple$3 = rt.ReadFrom(src), written = _tuple$3[0], err = _tuple$3[1];
			return [written, err];
		}
		buf = (go$sliceType(Go$Uint8)).make(32768, 0, function() { return 0; });
		while (true) {
			_tuple$4 = src.Read(buf), nr = _tuple$4[0], er = _tuple$4[1];
			if (nr > 0) {
				_tuple$5 = dst.Write(go$subslice(buf, 0, nr)), nw = _tuple$5[0], ew = _tuple$5[1];
				if (nw > 0) {
					written = (x = new Go$Int64(0, nw), new Go$Int64(written.high + x.high, written.low + x.low));
				}
				if (!(go$interfaceIsEqual(ew, null))) {
					err = ew;
					break;
				}
				if (!((nr === nw))) {
					err = go$pkg.ErrShortWrite;
					break;
				}
			}
			if (go$interfaceIsEqual(er, go$pkg.EOF)) {
				break;
			}
			if (!(go$interfaceIsEqual(er, null))) {
				err = er;
				break;
			}
		}
		_tuple$6 = [written, err], written = _tuple$6[0], err = _tuple$6[1];
		return [written, err];
	};
	go$pkg.init = function() {
		Reader.init([["Read", "", (go$funcType([(go$sliceType(Go$Uint8))], [Go$Int, go$error], false))]]);
		Writer.init([["Write", "", (go$funcType([(go$sliceType(Go$Uint8))], [Go$Int, go$error], false))]]);
		ReadCloser.init([["Close", "", (go$funcType([], [go$error], false))], ["Read", "", (go$funcType([(go$sliceType(Go$Uint8))], [Go$Int, go$error], false))]]);
		ReaderFrom.init([["ReadFrom", "", (go$funcType([Reader], [Go$Int64, go$error], false))]]);
		WriterTo.init([["WriteTo", "", (go$funcType([Writer], [Go$Int64, go$error], false))]]);
		RuneReader.init([["ReadRune", "", (go$funcType([], [Go$Int32, Go$Int, go$error], false))]]);
		RuneScanner.init([["ReadRune", "", (go$funcType([], [Go$Int32, Go$Int, go$error], false))], ["UnreadRune", "", (go$funcType([], [go$error], false))]]);
		stringWriter.init([["WriteString", "", (go$funcType([Go$String], [Go$Int, go$error], false))]]);
		go$pkg.ErrShortWrite = errors.New("short write");
		go$pkg.ErrShortBuffer = errors.New("short buffer");
		go$pkg.EOF = errors.New("EOF");
		go$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		go$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		go$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
	}
	return go$pkg;
})();
go$packages["unicode"] = (function() {
	var go$pkg = {}, RangeTable, Range16, Range32, CaseRange, d, foldPair, IsDigit, IsGraphic, IsPrint, In, IsLetter, IsSpace, is16, is32, Is, isExcludingLatin, IsUpper, to, To, ToUpper, ToLower, SimpleFold, _C, _Cc, _Cf, _Co, _Cs, _L, _Ll, _Lm, _Lo, _Lt, _Lu, _M, _Mc, _Me, _Mn, _N, _Nd, _Nl, _No, _P, _Pc, _Pd, _Pe, _Pf, _Pi, _Po, _Ps, _S, _Sc, _Sk, _Sm, _So, _Z, _Zl, _Zp, _Zs, _Arabic, _Armenian, _Avestan, _Balinese, _Bamum, _Batak, _Bengali, _Bopomofo, _Brahmi, _Braille, _Buginese, _Buhid, _Canadian_Aboriginal, _Carian, _Chakma, _Cham, _Cherokee, _Common, _Coptic, _Cuneiform, _Cypriot, _Cyrillic, _Deseret, _Devanagari, _Egyptian_Hieroglyphs, _Ethiopic, _Georgian, _Glagolitic, _Gothic, _Greek, _Gujarati, _Gurmukhi, _Han, _Hangul, _Hanunoo, _Hebrew, _Hiragana, _Imperial_Aramaic, _Inherited, _Inscriptional_Pahlavi, _Inscriptional_Parthian, _Javanese, _Kaithi, _Kannada, _Katakana, _Kayah_Li, _Kharoshthi, _Khmer, _Lao, _Latin, _Lepcha, _Limbu, _Linear_B, _Lisu, _Lycian, _Lydian, _Malayalam, _Mandaic, _Meetei_Mayek, _Meroitic_Cursive, _Meroitic_Hieroglyphs, _Miao, _Mongolian, _Myanmar, _New_Tai_Lue, _Nko, _Ogham, _Ol_Chiki, _Old_Italic, _Old_Persian, _Old_South_Arabian, _Old_Turkic, _Oriya, _Osmanya, _Phags_Pa, _Phoenician, _Rejang, _Runic, _Samaritan, _Saurashtra, _Sharada, _Shavian, _Sinhala, _Sora_Sompeng, _Sundanese, _Syloti_Nagri, _Syriac, _Tagalog, _Tagbanwa, _Tai_Le, _Tai_Tham, _Tai_Viet, _Takri, _Tamil, _Telugu, _Thaana, _Thai, _Tibetan, _Tifinagh, _Ugaritic, _Vai, _Yi, _White_Space, _CaseRanges, properties, caseOrbit, foldCommon, foldGreek, foldInherited, foldL, foldLl, foldLt, foldLu, foldM, foldMn;
	RangeTable = go$pkg.RangeTable = go$newType(0, "Struct", "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.go$val = this;
		this.R16 = R16_ !== undefined ? R16_ : (go$sliceType(Range16)).nil;
		this.R32 = R32_ !== undefined ? R32_ : (go$sliceType(Range32)).nil;
		this.LatinOffset = LatinOffset_ !== undefined ? LatinOffset_ : 0;
	});
	Range16 = go$pkg.Range16 = go$newType(0, "Struct", "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.go$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	Range32 = go$pkg.Range32 = go$newType(0, "Struct", "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.go$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	CaseRange = go$pkg.CaseRange = go$newType(0, "Struct", "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.go$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Delta = Delta_ !== undefined ? Delta_ : go$makeNativeArray("Int32", 3, function() { return 0; });
	});
	d = go$pkg.d = go$newType(0, "Array", "unicode.d", "d", "unicode", null);
	foldPair = go$pkg.foldPair = go$newType(0, "Struct", "unicode.foldPair", "foldPair", "unicode", function(From_, To_) {
		this.go$val = this;
		this.From = From_ !== undefined ? From_ : 0;
		this.To = To_ !== undefined ? To_ : 0;
	});
	IsDigit = go$pkg.IsDigit = function(r) {
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin(go$pkg.Digit, r);
	};
	IsGraphic = go$pkg.IsGraphic = function(r) {
		if ((r >>> 0) <= 255) {
			return !((((properties[(r << 24 >>> 24)] & 144) >>> 0) === 0));
		}
		return In(r, go$pkg.GraphicRanges);
	};
	IsPrint = go$pkg.IsPrint = function(r) {
		if ((r >>> 0) <= 255) {
			return !((((properties[(r << 24 >>> 24)] & 128) >>> 0) === 0));
		}
		return In(r, go$pkg.PrintRanges);
	};
	In = go$pkg.In = function(r, ranges) {
		var _ref, _i, _slice, _index, inside;
		_ref = ranges;
		_i = 0;
		while (_i < _ref.length) {
			inside = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	IsLetter = go$pkg.IsLetter = function(r) {
		if ((r >>> 0) <= 255) {
			return !((((properties[(r << 24 >>> 24)] & 96) >>> 0) === 0));
		}
		return isExcludingLatin(go$pkg.Letter, r);
	};
	IsSpace = go$pkg.IsSpace = function(r) {
		var _ref;
		if ((r >>> 0) <= 255) {
			_ref = r;
			if (_ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 13 || _ref === 32 || _ref === 133 || _ref === 160) {
				return true;
			}
			return false;
		}
		return isExcludingLatin(go$pkg.White_Space, r);
	};
	is16 = function(ranges, r) {
		var _ref, _i, i, _slice, _index, range_, _r, lo, hi, _q, m, _slice$1, _index$1, range_$1, _r$1;
		if (ranges.length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				range_ = (_slice = ranges, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = (_slice$1 = ranges, _index$1 = m, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _ref, _i, i, _slice, _index, range_, _r, lo, hi, _q, m, _slice$1, _index$1, _struct, range_$1, _r$1;
		if (ranges.length <= 18) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				range_ = (_slice = ranges, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = (_struct = (_slice$1 = ranges, _index$1 = m, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new Range32.Ptr(_struct.Lo, _struct.Hi, _struct.Stride));
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = go$pkg.Is = function(rangeTab, r) {
		var r16, _slice, _index, r32, _slice$1, _index$1;
		r16 = rangeTab.R16;
		if (r16.length > 0 && r <= ((_slice = r16, _index = (r16.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Hi >> 0)) {
			return is16(r16, (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.length > 0 && r >= ((_slice$1 = r32, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var r16, off, _slice, _index, r32, _slice$1, _index$1;
		r16 = rangeTab.R16;
		if (off = rangeTab.LatinOffset, r16.length > off && r <= ((_slice = r16, _index = (r16.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Hi >> 0)) {
			return is16(go$subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.length > 0 && r >= ((_slice$1 = r32, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	IsUpper = go$pkg.IsUpper = function(r) {
		if ((r >>> 0) <= 255) {
			return ((properties[(r << 24 >>> 24)] & 96) >>> 0) === 32;
		}
		return isExcludingLatin(go$pkg.Upper, r);
	};
	to = function(_case, r, caseRange) {
		var lo, hi, _q, m, _slice, _index, _struct, cr, delta;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			cr = (_struct = (_slice = caseRange, _index = m, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new CaseRange.Ptr(_struct.Lo, _struct.Hi, go$mapArray(_struct.Delta, function(entry) { return entry; })));
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = cr.Delta[_case];
				if (delta > 1114111) {
					return (cr.Lo >> 0) + (((((r - (cr.Lo >> 0) >> 0)) & ~1) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	To = go$pkg.To = function(_case, r) {
		return to(_case, r, go$pkg.CaseRanges);
	};
	ToUpper = go$pkg.ToUpper = function(r) {
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - 32 >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	ToLower = go$pkg.ToLower = function(r) {
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + 32 >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	SimpleFold = go$pkg.SimpleFold = function(r) {
		var lo, hi, _q, m, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, l;
		lo = 0;
		hi = caseOrbit.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if (((_slice = caseOrbit, _index = m, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.length && (((_slice$1 = caseOrbit, _index$1 = lo, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).From >> 0) === r)) {
			return ((_slice$2 = caseOrbit, _index$2 = lo, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).To >> 0);
		}
		if (l = ToLower(r), !((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	go$pkg.init = function() {
		RangeTable.init([["R16", "", (go$sliceType(Range16)), ""], ["R32", "", (go$sliceType(Range32)), ""], ["LatinOffset", "", Go$Int, ""]]);
		Range16.init([["Lo", "", Go$Uint16, ""], ["Hi", "", Go$Uint16, ""], ["Stride", "", Go$Uint16, ""]]);
		Range32.init([["Lo", "", Go$Uint32, ""], ["Hi", "", Go$Uint32, ""], ["Stride", "", Go$Uint32, ""]]);
		CaseRange.init([["Lo", "", Go$Uint32, ""], ["Hi", "", Go$Uint32, ""], ["Delta", "", d, ""]]);
		d.init(Go$Int32, 3);
		foldPair.init([["From", "", Go$Uint16, ""], ["To", "", Go$Uint16, ""]]);
		_L = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(97, 122, 1), new Range16.Ptr(170, 181, 11), new Range16.Ptr(186, 192, 6), new Range16.Ptr(193, 214, 1), new Range16.Ptr(216, 246, 1), new Range16.Ptr(248, 705, 1), new Range16.Ptr(710, 721, 1), new Range16.Ptr(736, 740, 1), new Range16.Ptr(748, 750, 2), new Range16.Ptr(880, 884, 1), new Range16.Ptr(886, 887, 1), new Range16.Ptr(890, 893, 1), new Range16.Ptr(902, 904, 2), new Range16.Ptr(905, 906, 1), new Range16.Ptr(908, 910, 2), new Range16.Ptr(911, 929, 1), new Range16.Ptr(931, 1013, 1), new Range16.Ptr(1015, 1153, 1), new Range16.Ptr(1162, 1319, 1), new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(1369, 1377, 8), new Range16.Ptr(1378, 1415, 1), new Range16.Ptr(1488, 1514, 1), new Range16.Ptr(1520, 1522, 1), new Range16.Ptr(1568, 1610, 1), new Range16.Ptr(1646, 1647, 1), new Range16.Ptr(1649, 1747, 1), new Range16.Ptr(1749, 1765, 16), new Range16.Ptr(1766, 1774, 8), new Range16.Ptr(1775, 1786, 11), new Range16.Ptr(1787, 1788, 1), new Range16.Ptr(1791, 1808, 17), new Range16.Ptr(1810, 1839, 1), new Range16.Ptr(1869, 1957, 1), new Range16.Ptr(1969, 1994, 25), new Range16.Ptr(1995, 2026, 1), new Range16.Ptr(2036, 2037, 1), new Range16.Ptr(2042, 2048, 6), new Range16.Ptr(2049, 2069, 1), new Range16.Ptr(2074, 2084, 10), new Range16.Ptr(2088, 2112, 24), new Range16.Ptr(2113, 2136, 1), new Range16.Ptr(2208, 2210, 2), new Range16.Ptr(2211, 2220, 1), new Range16.Ptr(2308, 2361, 1), new Range16.Ptr(2365, 2384, 19), new Range16.Ptr(2392, 2401, 1), new Range16.Ptr(2417, 2423, 1), new Range16.Ptr(2425, 2431, 1), new Range16.Ptr(2437, 2444, 1), new Range16.Ptr(2447, 2448, 1), new Range16.Ptr(2451, 2472, 1), new Range16.Ptr(2474, 2480, 1), new Range16.Ptr(2482, 2486, 4), new Range16.Ptr(2487, 2489, 1), new Range16.Ptr(2493, 2510, 17), new Range16.Ptr(2524, 2525, 1), new Range16.Ptr(2527, 2529, 1), new Range16.Ptr(2544, 2545, 1), new Range16.Ptr(2565, 2570, 1), new Range16.Ptr(2575, 2576, 1), new Range16.Ptr(2579, 2600, 1), new Range16.Ptr(2602, 2608, 1), new Range16.Ptr(2610, 2611, 1), new Range16.Ptr(2613, 2614, 1), new Range16.Ptr(2616, 2617, 1), new Range16.Ptr(2649, 2652, 1), new Range16.Ptr(2654, 2674, 20), new Range16.Ptr(2675, 2676, 1), new Range16.Ptr(2693, 2701, 1), new Range16.Ptr(2703, 2705, 1), new Range16.Ptr(2707, 2728, 1), new Range16.Ptr(2730, 2736, 1), new Range16.Ptr(2738, 2739, 1), new Range16.Ptr(2741, 2745, 1), new Range16.Ptr(2749, 2768, 19), new Range16.Ptr(2784, 2785, 1), new Range16.Ptr(2821, 2828, 1), new Range16.Ptr(2831, 2832, 1), new Range16.Ptr(2835, 2856, 1), new Range16.Ptr(2858, 2864, 1), new Range16.Ptr(2866, 2867, 1), new Range16.Ptr(2869, 2873, 1), new Range16.Ptr(2877, 2908, 31), new Range16.Ptr(2909, 2911, 2), new Range16.Ptr(2912, 2913, 1), new Range16.Ptr(2929, 2947, 18), new Range16.Ptr(2949, 2954, 1), new Range16.Ptr(2958, 2960, 1), new Range16.Ptr(2962, 2965, 1), new Range16.Ptr(2969, 2970, 1), new Range16.Ptr(2972, 2974, 2), new Range16.Ptr(2975, 2979, 4), new Range16.Ptr(2980, 2984, 4), new Range16.Ptr(2985, 2986, 1), new Range16.Ptr(2990, 3001, 1), new Range16.Ptr(3024, 3077, 53), new Range16.Ptr(3078, 3084, 1), new Range16.Ptr(3086, 3088, 1), new Range16.Ptr(3090, 3112, 1), new Range16.Ptr(3114, 3123, 1), new Range16.Ptr(3125, 3129, 1), new Range16.Ptr(3133, 3160, 27), new Range16.Ptr(3161, 3168, 7), new Range16.Ptr(3169, 3205, 36), new Range16.Ptr(3206, 3212, 1), new Range16.Ptr(3214, 3216, 1), new Range16.Ptr(3218, 3240, 1), new Range16.Ptr(3242, 3251, 1), new Range16.Ptr(3253, 3257, 1), new Range16.Ptr(3261, 3294, 33), new Range16.Ptr(3296, 3297, 1), new Range16.Ptr(3313, 3314, 1), new Range16.Ptr(3333, 3340, 1), new Range16.Ptr(3342, 3344, 1), new Range16.Ptr(3346, 3386, 1), new Range16.Ptr(3389, 3406, 17), new Range16.Ptr(3424, 3425, 1), new Range16.Ptr(3450, 3455, 1), new Range16.Ptr(3461, 3478, 1), new Range16.Ptr(3482, 3505, 1), new Range16.Ptr(3507, 3515, 1), new Range16.Ptr(3517, 3520, 3), new Range16.Ptr(3521, 3526, 1), new Range16.Ptr(3585, 3632, 1), new Range16.Ptr(3634, 3635, 1), new Range16.Ptr(3648, 3654, 1), new Range16.Ptr(3713, 3714, 1), new Range16.Ptr(3716, 3719, 3), new Range16.Ptr(3720, 3722, 2), new Range16.Ptr(3725, 3732, 7), new Range16.Ptr(3733, 3735, 1), new Range16.Ptr(3737, 3743, 1), new Range16.Ptr(3745, 3747, 1), new Range16.Ptr(3749, 3751, 2), new Range16.Ptr(3754, 3755, 1), new Range16.Ptr(3757, 3760, 1), new Range16.Ptr(3762, 3763, 1), new Range16.Ptr(3773, 3776, 3), new Range16.Ptr(3777, 3780, 1), new Range16.Ptr(3782, 3804, 22), new Range16.Ptr(3805, 3807, 1), new Range16.Ptr(3840, 3904, 64), new Range16.Ptr(3905, 3911, 1), new Range16.Ptr(3913, 3948, 1), new Range16.Ptr(3976, 3980, 1), new Range16.Ptr(4096, 4138, 1), new Range16.Ptr(4159, 4176, 17), new Range16.Ptr(4177, 4181, 1), new Range16.Ptr(4186, 4189, 1), new Range16.Ptr(4193, 4197, 4), new Range16.Ptr(4198, 4206, 8), new Range16.Ptr(4207, 4208, 1), new Range16.Ptr(4213, 4225, 1), new Range16.Ptr(4238, 4256, 18), new Range16.Ptr(4257, 4293, 1), new Range16.Ptr(4295, 4301, 6), new Range16.Ptr(4304, 4346, 1), new Range16.Ptr(4348, 4680, 1), new Range16.Ptr(4682, 4685, 1), new Range16.Ptr(4688, 4694, 1), new Range16.Ptr(4696, 4698, 2), new Range16.Ptr(4699, 4701, 1), new Range16.Ptr(4704, 4744, 1), new Range16.Ptr(4746, 4749, 1), new Range16.Ptr(4752, 4784, 1), new Range16.Ptr(4786, 4789, 1), new Range16.Ptr(4792, 4798, 1), new Range16.Ptr(4800, 4802, 2), new Range16.Ptr(4803, 4805, 1), new Range16.Ptr(4808, 4822, 1), new Range16.Ptr(4824, 4880, 1), new Range16.Ptr(4882, 4885, 1), new Range16.Ptr(4888, 4954, 1), new Range16.Ptr(4992, 5007, 1), new Range16.Ptr(5024, 5108, 1), new Range16.Ptr(5121, 5740, 1), new Range16.Ptr(5743, 5759, 1), new Range16.Ptr(5761, 5786, 1), new Range16.Ptr(5792, 5866, 1), new Range16.Ptr(5888, 5900, 1), new Range16.Ptr(5902, 5905, 1), new Range16.Ptr(5920, 5937, 1), new Range16.Ptr(5952, 5969, 1), new Range16.Ptr(5984, 5996, 1), new Range16.Ptr(5998, 6000, 1), new Range16.Ptr(6016, 6067, 1), new Range16.Ptr(6103, 6108, 5), new Range16.Ptr(6176, 6263, 1), new Range16.Ptr(6272, 6312, 1), new Range16.Ptr(6314, 6320, 6), new Range16.Ptr(6321, 6389, 1), new Range16.Ptr(6400, 6428, 1), new Range16.Ptr(6480, 6509, 1), new Range16.Ptr(6512, 6516, 1), new Range16.Ptr(6528, 6571, 1), new Range16.Ptr(6593, 6599, 1), new Range16.Ptr(6656, 6678, 1), new Range16.Ptr(6688, 6740, 1), new Range16.Ptr(6823, 6917, 94), new Range16.Ptr(6918, 6963, 1), new Range16.Ptr(6981, 6987, 1), new Range16.Ptr(7043, 7072, 1), new Range16.Ptr(7086, 7087, 1), new Range16.Ptr(7098, 7141, 1), new Range16.Ptr(7168, 7203, 1), new Range16.Ptr(7245, 7247, 1), new Range16.Ptr(7258, 7293, 1), new Range16.Ptr(7401, 7404, 1), new Range16.Ptr(7406, 7409, 1), new Range16.Ptr(7413, 7414, 1), new Range16.Ptr(7424, 7615, 1), new Range16.Ptr(7680, 7957, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7968, 8005, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8016, 8023, 1), new Range16.Ptr(8025, 8031, 2), new Range16.Ptr(8032, 8061, 1), new Range16.Ptr(8064, 8116, 1), new Range16.Ptr(8118, 8124, 1), new Range16.Ptr(8126, 8130, 4), new Range16.Ptr(8131, 8132, 1), new Range16.Ptr(8134, 8140, 1), new Range16.Ptr(8144, 8147, 1), new Range16.Ptr(8150, 8155, 1), new Range16.Ptr(8160, 8172, 1), new Range16.Ptr(8178, 8180, 1), new Range16.Ptr(8182, 8188, 1), new Range16.Ptr(8305, 8319, 14), new Range16.Ptr(8336, 8348, 1), new Range16.Ptr(8450, 8455, 5), new Range16.Ptr(8458, 8467, 1), new Range16.Ptr(8469, 8473, 4), new Range16.Ptr(8474, 8477, 1), new Range16.Ptr(8484, 8490, 2), new Range16.Ptr(8491, 8493, 1), new Range16.Ptr(8495, 8505, 1), new Range16.Ptr(8508, 8511, 1), new Range16.Ptr(8517, 8521, 1), new Range16.Ptr(8526, 8579, 53), new Range16.Ptr(8580, 11264, 2684), new Range16.Ptr(11265, 11310, 1), new Range16.Ptr(11312, 11358, 1), new Range16.Ptr(11360, 11492, 1), new Range16.Ptr(11499, 11502, 1), new Range16.Ptr(11506, 11507, 1), new Range16.Ptr(11520, 11557, 1), new Range16.Ptr(11559, 11565, 6), new Range16.Ptr(11568, 11623, 1), new Range16.Ptr(11631, 11648, 17), new Range16.Ptr(11649, 11670, 1), new Range16.Ptr(11680, 11686, 1), new Range16.Ptr(11688, 11694, 1), new Range16.Ptr(11696, 11702, 1), new Range16.Ptr(11704, 11710, 1), new Range16.Ptr(11712, 11718, 1), new Range16.Ptr(11720, 11726, 1), new Range16.Ptr(11728, 11734, 1), new Range16.Ptr(11736, 11742, 1), new Range16.Ptr(11823, 12293, 470), new Range16.Ptr(12294, 12337, 43), new Range16.Ptr(12338, 12341, 1), new Range16.Ptr(12347, 12348, 1), new Range16.Ptr(12353, 12438, 1), new Range16.Ptr(12445, 12447, 1), new Range16.Ptr(12449, 12538, 1), new Range16.Ptr(12540, 12543, 1), new Range16.Ptr(12549, 12589, 1), new Range16.Ptr(12593, 12686, 1), new Range16.Ptr(12704, 12730, 1), new Range16.Ptr(12784, 12799, 1), new Range16.Ptr(13312, 19893, 1), new Range16.Ptr(19968, 40908, 1), new Range16.Ptr(40960, 42124, 1), new Range16.Ptr(42192, 42237, 1), new Range16.Ptr(42240, 42508, 1), new Range16.Ptr(42512, 42527, 1), new Range16.Ptr(42538, 42539, 1), new Range16.Ptr(42560, 42606, 1), new Range16.Ptr(42623, 42647, 1), new Range16.Ptr(42656, 42725, 1), new Range16.Ptr(42775, 42783, 1), new Range16.Ptr(42786, 42888, 1), new Range16.Ptr(42891, 42894, 1), new Range16.Ptr(42896, 42899, 1), new Range16.Ptr(42912, 42922, 1), new Range16.Ptr(43000, 43009, 1), new Range16.Ptr(43011, 43013, 1), new Range16.Ptr(43015, 43018, 1), new Range16.Ptr(43020, 43042, 1), new Range16.Ptr(43072, 43123, 1), new Range16.Ptr(43138, 43187, 1), new Range16.Ptr(43250, 43255, 1), new Range16.Ptr(43259, 43274, 15), new Range16.Ptr(43275, 43301, 1), new Range16.Ptr(43312, 43334, 1), new Range16.Ptr(43360, 43388, 1), new Range16.Ptr(43396, 43442, 1), new Range16.Ptr(43471, 43520, 49), new Range16.Ptr(43521, 43560, 1), new Range16.Ptr(43584, 43586, 1), new Range16.Ptr(43588, 43595, 1), new Range16.Ptr(43616, 43638, 1), new Range16.Ptr(43642, 43648, 6), new Range16.Ptr(43649, 43695, 1), new Range16.Ptr(43697, 43701, 4), new Range16.Ptr(43702, 43705, 3), new Range16.Ptr(43706, 43709, 1), new Range16.Ptr(43712, 43714, 2), new Range16.Ptr(43739, 43741, 1), new Range16.Ptr(43744, 43754, 1), new Range16.Ptr(43762, 43764, 1), new Range16.Ptr(43777, 43782, 1), new Range16.Ptr(43785, 43790, 1), new Range16.Ptr(43793, 43798, 1), new Range16.Ptr(43808, 43814, 1), new Range16.Ptr(43816, 43822, 1), new Range16.Ptr(43968, 44002, 1), new Range16.Ptr(44032, 55203, 1), new Range16.Ptr(55216, 55238, 1), new Range16.Ptr(55243, 55291, 1), new Range16.Ptr(63744, 64109, 1), new Range16.Ptr(64112, 64217, 1), new Range16.Ptr(64256, 64262, 1), new Range16.Ptr(64275, 64279, 1), new Range16.Ptr(64285, 64287, 2), new Range16.Ptr(64288, 64296, 1), new Range16.Ptr(64298, 64310, 1), new Range16.Ptr(64312, 64316, 1), new Range16.Ptr(64318, 64320, 2), new Range16.Ptr(64321, 64323, 2), new Range16.Ptr(64324, 64326, 2), new Range16.Ptr(64327, 64433, 1), new Range16.Ptr(64467, 64829, 1), new Range16.Ptr(64848, 64911, 1), new Range16.Ptr(64914, 64967, 1), new Range16.Ptr(65008, 65019, 1), new Range16.Ptr(65136, 65140, 1), new Range16.Ptr(65142, 65276, 1), new Range16.Ptr(65313, 65338, 1), new Range16.Ptr(65345, 65370, 1), new Range16.Ptr(65382, 65470, 1), new Range16.Ptr(65474, 65479, 1), new Range16.Ptr(65482, 65487, 1), new Range16.Ptr(65490, 65495, 1), new Range16.Ptr(65498, 65500, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65536, 65547, 1), new Range32.Ptr(65549, 65574, 1), new Range32.Ptr(65576, 65594, 1), new Range32.Ptr(65596, 65597, 1), new Range32.Ptr(65599, 65613, 1), new Range32.Ptr(65616, 65629, 1), new Range32.Ptr(65664, 65786, 1), new Range32.Ptr(66176, 66204, 1), new Range32.Ptr(66208, 66256, 1), new Range32.Ptr(66304, 66334, 1), new Range32.Ptr(66352, 66368, 1), new Range32.Ptr(66370, 66377, 1), new Range32.Ptr(66432, 66461, 1), new Range32.Ptr(66464, 66499, 1), new Range32.Ptr(66504, 66511, 1), new Range32.Ptr(66560, 66717, 1), new Range32.Ptr(67584, 67589, 1), new Range32.Ptr(67592, 67594, 2), new Range32.Ptr(67595, 67637, 1), new Range32.Ptr(67639, 67640, 1), new Range32.Ptr(67644, 67647, 3), new Range32.Ptr(67648, 67669, 1), new Range32.Ptr(67840, 67861, 1), new Range32.Ptr(67872, 67897, 1), new Range32.Ptr(67968, 68023, 1), new Range32.Ptr(68030, 68031, 1), new Range32.Ptr(68096, 68112, 16), new Range32.Ptr(68113, 68115, 1), new Range32.Ptr(68117, 68119, 1), new Range32.Ptr(68121, 68147, 1), new Range32.Ptr(68192, 68220, 1), new Range32.Ptr(68352, 68405, 1), new Range32.Ptr(68416, 68437, 1), new Range32.Ptr(68448, 68466, 1), new Range32.Ptr(68608, 68680, 1), new Range32.Ptr(69635, 69687, 1), new Range32.Ptr(69763, 69807, 1), new Range32.Ptr(69840, 69864, 1), new Range32.Ptr(69891, 69926, 1), new Range32.Ptr(70019, 70066, 1), new Range32.Ptr(70081, 70084, 1), new Range32.Ptr(71296, 71338, 1), new Range32.Ptr(73728, 74606, 1), new Range32.Ptr(77824, 78894, 1), new Range32.Ptr(92160, 92728, 1), new Range32.Ptr(93952, 94020, 1), new Range32.Ptr(94032, 94099, 67), new Range32.Ptr(94100, 94111, 1), new Range32.Ptr(110592, 110593, 1), new Range32.Ptr(119808, 119892, 1), new Range32.Ptr(119894, 119964, 1), new Range32.Ptr(119966, 119967, 1), new Range32.Ptr(119970, 119973, 3), new Range32.Ptr(119974, 119977, 3), new Range32.Ptr(119978, 119980, 1), new Range32.Ptr(119982, 119993, 1), new Range32.Ptr(119995, 119997, 2), new Range32.Ptr(119998, 120003, 1), new Range32.Ptr(120005, 120069, 1), new Range32.Ptr(120071, 120074, 1), new Range32.Ptr(120077, 120084, 1), new Range32.Ptr(120086, 120092, 1), new Range32.Ptr(120094, 120121, 1), new Range32.Ptr(120123, 120126, 1), new Range32.Ptr(120128, 120132, 1), new Range32.Ptr(120134, 120138, 4), new Range32.Ptr(120139, 120144, 1), new Range32.Ptr(120146, 120485, 1), new Range32.Ptr(120488, 120512, 1), new Range32.Ptr(120514, 120538, 1), new Range32.Ptr(120540, 120570, 1), new Range32.Ptr(120572, 120596, 1), new Range32.Ptr(120598, 120628, 1), new Range32.Ptr(120630, 120654, 1), new Range32.Ptr(120656, 120686, 1), new Range32.Ptr(120688, 120712, 1), new Range32.Ptr(120714, 120744, 1), new Range32.Ptr(120746, 120770, 1), new Range32.Ptr(120772, 120779, 1), new Range32.Ptr(126464, 126467, 1), new Range32.Ptr(126469, 126495, 1), new Range32.Ptr(126497, 126498, 1), new Range32.Ptr(126500, 126503, 3), new Range32.Ptr(126505, 126514, 1), new Range32.Ptr(126516, 126519, 1), new Range32.Ptr(126521, 126523, 2), new Range32.Ptr(126530, 126535, 5), new Range32.Ptr(126537, 126541, 2), new Range32.Ptr(126542, 126543, 1), new Range32.Ptr(126545, 126546, 1), new Range32.Ptr(126548, 126551, 3), new Range32.Ptr(126553, 126561, 2), new Range32.Ptr(126562, 126564, 2), new Range32.Ptr(126567, 126570, 1), new Range32.Ptr(126572, 126578, 1), new Range32.Ptr(126580, 126583, 1), new Range32.Ptr(126585, 126588, 1), new Range32.Ptr(126590, 126592, 2), new Range32.Ptr(126593, 126601, 1), new Range32.Ptr(126603, 126619, 1), new Range32.Ptr(126625, 126627, 1), new Range32.Ptr(126629, 126633, 1), new Range32.Ptr(126635, 126651, 1), new Range32.Ptr(131072, 173782, 1), new Range32.Ptr(173824, 177972, 1), new Range32.Ptr(177984, 178205, 1), new Range32.Ptr(194560, 195101, 1)]), 6);
		go$pkg.L = _L;
		_M = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(768, 879, 1), new Range16.Ptr(1155, 1161, 1), new Range16.Ptr(1425, 1469, 1), new Range16.Ptr(1471, 1473, 2), new Range16.Ptr(1474, 1476, 2), new Range16.Ptr(1477, 1479, 2), new Range16.Ptr(1552, 1562, 1), new Range16.Ptr(1611, 1631, 1), new Range16.Ptr(1648, 1750, 102), new Range16.Ptr(1751, 1756, 1), new Range16.Ptr(1759, 1764, 1), new Range16.Ptr(1767, 1768, 1), new Range16.Ptr(1770, 1773, 1), new Range16.Ptr(1809, 1840, 31), new Range16.Ptr(1841, 1866, 1), new Range16.Ptr(1958, 1968, 1), new Range16.Ptr(2027, 2035, 1), new Range16.Ptr(2070, 2073, 1), new Range16.Ptr(2075, 2083, 1), new Range16.Ptr(2085, 2087, 1), new Range16.Ptr(2089, 2093, 1), new Range16.Ptr(2137, 2139, 1), new Range16.Ptr(2276, 2302, 1), new Range16.Ptr(2304, 2307, 1), new Range16.Ptr(2362, 2364, 1), new Range16.Ptr(2366, 2383, 1), new Range16.Ptr(2385, 2391, 1), new Range16.Ptr(2402, 2403, 1), new Range16.Ptr(2433, 2435, 1), new Range16.Ptr(2492, 2494, 2), new Range16.Ptr(2495, 2500, 1), new Range16.Ptr(2503, 2504, 1), new Range16.Ptr(2507, 2509, 1), new Range16.Ptr(2519, 2530, 11), new Range16.Ptr(2531, 2561, 30), new Range16.Ptr(2562, 2563, 1), new Range16.Ptr(2620, 2622, 2), new Range16.Ptr(2623, 2626, 1), new Range16.Ptr(2631, 2632, 1), new Range16.Ptr(2635, 2637, 1), new Range16.Ptr(2641, 2672, 31), new Range16.Ptr(2673, 2677, 4), new Range16.Ptr(2689, 2691, 1), new Range16.Ptr(2748, 2750, 2), new Range16.Ptr(2751, 2757, 1), new Range16.Ptr(2759, 2761, 1), new Range16.Ptr(2763, 2765, 1), new Range16.Ptr(2786, 2787, 1), new Range16.Ptr(2817, 2819, 1), new Range16.Ptr(2876, 2878, 2), new Range16.Ptr(2879, 2884, 1), new Range16.Ptr(2887, 2888, 1), new Range16.Ptr(2891, 2893, 1), new Range16.Ptr(2902, 2903, 1), new Range16.Ptr(2914, 2915, 1), new Range16.Ptr(2946, 3006, 60), new Range16.Ptr(3007, 3010, 1), new Range16.Ptr(3014, 3016, 1), new Range16.Ptr(3018, 3021, 1), new Range16.Ptr(3031, 3073, 42), new Range16.Ptr(3074, 3075, 1), new Range16.Ptr(3134, 3140, 1), new Range16.Ptr(3142, 3144, 1), new Range16.Ptr(3146, 3149, 1), new Range16.Ptr(3157, 3158, 1), new Range16.Ptr(3170, 3171, 1), new Range16.Ptr(3202, 3203, 1), new Range16.Ptr(3260, 3262, 2), new Range16.Ptr(3263, 3268, 1), new Range16.Ptr(3270, 3272, 1), new Range16.Ptr(3274, 3277, 1), new Range16.Ptr(3285, 3286, 1), new Range16.Ptr(3298, 3299, 1), new Range16.Ptr(3330, 3331, 1), new Range16.Ptr(3390, 3396, 1), new Range16.Ptr(3398, 3400, 1), new Range16.Ptr(3402, 3405, 1), new Range16.Ptr(3415, 3426, 11), new Range16.Ptr(3427, 3458, 31), new Range16.Ptr(3459, 3530, 71), new Range16.Ptr(3535, 3540, 1), new Range16.Ptr(3542, 3544, 2), new Range16.Ptr(3545, 3551, 1), new Range16.Ptr(3570, 3571, 1), new Range16.Ptr(3633, 3636, 3), new Range16.Ptr(3637, 3642, 1), new Range16.Ptr(3655, 3662, 1), new Range16.Ptr(3761, 3764, 3), new Range16.Ptr(3765, 3769, 1), new Range16.Ptr(3771, 3772, 1), new Range16.Ptr(3784, 3789, 1), new Range16.Ptr(3864, 3865, 1), new Range16.Ptr(3893, 3897, 2), new Range16.Ptr(3902, 3903, 1), new Range16.Ptr(3953, 3972, 1), new Range16.Ptr(3974, 3975, 1), new Range16.Ptr(3981, 3991, 1), new Range16.Ptr(3993, 4028, 1), new Range16.Ptr(4038, 4139, 101), new Range16.Ptr(4140, 4158, 1), new Range16.Ptr(4182, 4185, 1), new Range16.Ptr(4190, 4192, 1), new Range16.Ptr(4194, 4196, 1), new Range16.Ptr(4199, 4205, 1), new Range16.Ptr(4209, 4212, 1), new Range16.Ptr(4226, 4237, 1), new Range16.Ptr(4239, 4250, 11), new Range16.Ptr(4251, 4253, 1), new Range16.Ptr(4957, 4959, 1), new Range16.Ptr(5906, 5908, 1), new Range16.Ptr(5938, 5940, 1), new Range16.Ptr(5970, 5971, 1), new Range16.Ptr(6002, 6003, 1), new Range16.Ptr(6068, 6099, 1), new Range16.Ptr(6109, 6155, 46), new Range16.Ptr(6156, 6157, 1), new Range16.Ptr(6313, 6432, 119), new Range16.Ptr(6433, 6443, 1), new Range16.Ptr(6448, 6459, 1), new Range16.Ptr(6576, 6592, 1), new Range16.Ptr(6600, 6601, 1), new Range16.Ptr(6679, 6683, 1), new Range16.Ptr(6741, 6750, 1), new Range16.Ptr(6752, 6780, 1), new Range16.Ptr(6783, 6912, 129), new Range16.Ptr(6913, 6916, 1), new Range16.Ptr(6964, 6980, 1), new Range16.Ptr(7019, 7027, 1), new Range16.Ptr(7040, 7042, 1), new Range16.Ptr(7073, 7085, 1), new Range16.Ptr(7142, 7155, 1), new Range16.Ptr(7204, 7223, 1), new Range16.Ptr(7376, 7378, 1), new Range16.Ptr(7380, 7400, 1), new Range16.Ptr(7405, 7410, 5), new Range16.Ptr(7411, 7412, 1), new Range16.Ptr(7616, 7654, 1), new Range16.Ptr(7676, 7679, 1), new Range16.Ptr(8400, 8432, 1), new Range16.Ptr(11503, 11505, 1), new Range16.Ptr(11647, 11744, 97), new Range16.Ptr(11745, 11775, 1), new Range16.Ptr(12330, 12335, 1), new Range16.Ptr(12441, 12442, 1), new Range16.Ptr(42607, 42610, 1), new Range16.Ptr(42612, 42621, 1), new Range16.Ptr(42655, 42736, 81), new Range16.Ptr(42737, 43010, 273), new Range16.Ptr(43014, 43019, 5), new Range16.Ptr(43043, 43047, 1), new Range16.Ptr(43136, 43137, 1), new Range16.Ptr(43188, 43204, 1), new Range16.Ptr(43232, 43249, 1), new Range16.Ptr(43302, 43309, 1), new Range16.Ptr(43335, 43347, 1), new Range16.Ptr(43392, 43395, 1), new Range16.Ptr(43443, 43456, 1), new Range16.Ptr(43561, 43574, 1), new Range16.Ptr(43587, 43596, 9), new Range16.Ptr(43597, 43643, 46), new Range16.Ptr(43696, 43698, 2), new Range16.Ptr(43699, 43700, 1), new Range16.Ptr(43703, 43704, 1), new Range16.Ptr(43710, 43711, 1), new Range16.Ptr(43713, 43755, 42), new Range16.Ptr(43756, 43759, 1), new Range16.Ptr(43765, 43766, 1), new Range16.Ptr(44003, 44010, 1), new Range16.Ptr(44012, 44013, 1), new Range16.Ptr(64286, 65024, 738), new Range16.Ptr(65025, 65039, 1), new Range16.Ptr(65056, 65062, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66045, 68097, 2052), new Range32.Ptr(68098, 68099, 1), new Range32.Ptr(68101, 68102, 1), new Range32.Ptr(68108, 68111, 1), new Range32.Ptr(68152, 68154, 1), new Range32.Ptr(68159, 69632, 1473), new Range32.Ptr(69633, 69634, 1), new Range32.Ptr(69688, 69702, 1), new Range32.Ptr(69760, 69762, 1), new Range32.Ptr(69808, 69818, 1), new Range32.Ptr(69888, 69890, 1), new Range32.Ptr(69927, 69940, 1), new Range32.Ptr(70016, 70018, 1), new Range32.Ptr(70067, 70080, 1), new Range32.Ptr(71339, 71351, 1), new Range32.Ptr(94033, 94078, 1), new Range32.Ptr(94095, 94098, 1), new Range32.Ptr(119141, 119145, 1), new Range32.Ptr(119149, 119154, 1), new Range32.Ptr(119163, 119170, 1), new Range32.Ptr(119173, 119179, 1), new Range32.Ptr(119210, 119213, 1), new Range32.Ptr(119362, 119364, 1), new Range32.Ptr(917760, 917999, 1)]), 0);
		go$pkg.M = _M;
		_N = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(48, 57, 1), new Range16.Ptr(178, 179, 1), new Range16.Ptr(185, 188, 3), new Range16.Ptr(189, 190, 1), new Range16.Ptr(1632, 1641, 1), new Range16.Ptr(1776, 1785, 1), new Range16.Ptr(1984, 1993, 1), new Range16.Ptr(2406, 2415, 1), new Range16.Ptr(2534, 2543, 1), new Range16.Ptr(2548, 2553, 1), new Range16.Ptr(2662, 2671, 1), new Range16.Ptr(2790, 2799, 1), new Range16.Ptr(2918, 2927, 1), new Range16.Ptr(2930, 2935, 1), new Range16.Ptr(3046, 3058, 1), new Range16.Ptr(3174, 3183, 1), new Range16.Ptr(3192, 3198, 1), new Range16.Ptr(3302, 3311, 1), new Range16.Ptr(3430, 3445, 1), new Range16.Ptr(3664, 3673, 1), new Range16.Ptr(3792, 3801, 1), new Range16.Ptr(3872, 3891, 1), new Range16.Ptr(4160, 4169, 1), new Range16.Ptr(4240, 4249, 1), new Range16.Ptr(4969, 4988, 1), new Range16.Ptr(5870, 5872, 1), new Range16.Ptr(6112, 6121, 1), new Range16.Ptr(6128, 6137, 1), new Range16.Ptr(6160, 6169, 1), new Range16.Ptr(6470, 6479, 1), new Range16.Ptr(6608, 6618, 1), new Range16.Ptr(6784, 6793, 1), new Range16.Ptr(6800, 6809, 1), new Range16.Ptr(6992, 7001, 1), new Range16.Ptr(7088, 7097, 1), new Range16.Ptr(7232, 7241, 1), new Range16.Ptr(7248, 7257, 1), new Range16.Ptr(8304, 8308, 4), new Range16.Ptr(8309, 8313, 1), new Range16.Ptr(8320, 8329, 1), new Range16.Ptr(8528, 8578, 1), new Range16.Ptr(8581, 8585, 1), new Range16.Ptr(9312, 9371, 1), new Range16.Ptr(9450, 9471, 1), new Range16.Ptr(10102, 10131, 1), new Range16.Ptr(11517, 12295, 778), new Range16.Ptr(12321, 12329, 1), new Range16.Ptr(12344, 12346, 1), new Range16.Ptr(12690, 12693, 1), new Range16.Ptr(12832, 12841, 1), new Range16.Ptr(12872, 12879, 1), new Range16.Ptr(12881, 12895, 1), new Range16.Ptr(12928, 12937, 1), new Range16.Ptr(12977, 12991, 1), new Range16.Ptr(42528, 42537, 1), new Range16.Ptr(42726, 42735, 1), new Range16.Ptr(43056, 43061, 1), new Range16.Ptr(43216, 43225, 1), new Range16.Ptr(43264, 43273, 1), new Range16.Ptr(43472, 43481, 1), new Range16.Ptr(43600, 43609, 1), new Range16.Ptr(44016, 44025, 1), new Range16.Ptr(65296, 65305, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65799, 65843, 1), new Range32.Ptr(65856, 65912, 1), new Range32.Ptr(65930, 66336, 406), new Range32.Ptr(66337, 66339, 1), new Range32.Ptr(66369, 66378, 9), new Range32.Ptr(66513, 66517, 1), new Range32.Ptr(66720, 66729, 1), new Range32.Ptr(67672, 67679, 1), new Range32.Ptr(67862, 67867, 1), new Range32.Ptr(68160, 68167, 1), new Range32.Ptr(68221, 68222, 1), new Range32.Ptr(68440, 68447, 1), new Range32.Ptr(68472, 68479, 1), new Range32.Ptr(69216, 69246, 1), new Range32.Ptr(69714, 69743, 1), new Range32.Ptr(69872, 69881, 1), new Range32.Ptr(69942, 69951, 1), new Range32.Ptr(70096, 70105, 1), new Range32.Ptr(71360, 71369, 1), new Range32.Ptr(74752, 74850, 1), new Range32.Ptr(119648, 119665, 1), new Range32.Ptr(120782, 120831, 1), new Range32.Ptr(127232, 127242, 1)]), 4);
		go$pkg.N = _N;
		_P = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(33, 35, 1), new Range16.Ptr(37, 42, 1), new Range16.Ptr(44, 47, 1), new Range16.Ptr(58, 59, 1), new Range16.Ptr(63, 64, 1), new Range16.Ptr(91, 93, 1), new Range16.Ptr(95, 123, 28), new Range16.Ptr(125, 161, 36), new Range16.Ptr(167, 171, 4), new Range16.Ptr(182, 183, 1), new Range16.Ptr(187, 191, 4), new Range16.Ptr(894, 903, 9), new Range16.Ptr(1370, 1375, 1), new Range16.Ptr(1417, 1418, 1), new Range16.Ptr(1470, 1472, 2), new Range16.Ptr(1475, 1478, 3), new Range16.Ptr(1523, 1524, 1), new Range16.Ptr(1545, 1546, 1), new Range16.Ptr(1548, 1549, 1), new Range16.Ptr(1563, 1566, 3), new Range16.Ptr(1567, 1642, 75), new Range16.Ptr(1643, 1645, 1), new Range16.Ptr(1748, 1792, 44), new Range16.Ptr(1793, 1805, 1), new Range16.Ptr(2039, 2041, 1), new Range16.Ptr(2096, 2110, 1), new Range16.Ptr(2142, 2404, 262), new Range16.Ptr(2405, 2416, 11), new Range16.Ptr(2800, 3572, 772), new Range16.Ptr(3663, 3674, 11), new Range16.Ptr(3675, 3844, 169), new Range16.Ptr(3845, 3858, 1), new Range16.Ptr(3860, 3898, 38), new Range16.Ptr(3899, 3901, 1), new Range16.Ptr(3973, 4048, 75), new Range16.Ptr(4049, 4052, 1), new Range16.Ptr(4057, 4058, 1), new Range16.Ptr(4170, 4175, 1), new Range16.Ptr(4347, 4960, 613), new Range16.Ptr(4961, 4968, 1), new Range16.Ptr(5120, 5741, 621), new Range16.Ptr(5742, 5787, 45), new Range16.Ptr(5788, 5867, 79), new Range16.Ptr(5868, 5869, 1), new Range16.Ptr(5941, 5942, 1), new Range16.Ptr(6100, 6102, 1), new Range16.Ptr(6104, 6106, 1), new Range16.Ptr(6144, 6154, 1), new Range16.Ptr(6468, 6469, 1), new Range16.Ptr(6686, 6687, 1), new Range16.Ptr(6816, 6822, 1), new Range16.Ptr(6824, 6829, 1), new Range16.Ptr(7002, 7008, 1), new Range16.Ptr(7164, 7167, 1), new Range16.Ptr(7227, 7231, 1), new Range16.Ptr(7294, 7295, 1), new Range16.Ptr(7360, 7367, 1), new Range16.Ptr(7379, 8208, 829), new Range16.Ptr(8209, 8231, 1), new Range16.Ptr(8240, 8259, 1), new Range16.Ptr(8261, 8273, 1), new Range16.Ptr(8275, 8286, 1), new Range16.Ptr(8317, 8318, 1), new Range16.Ptr(8333, 8334, 1), new Range16.Ptr(9001, 9002, 1), new Range16.Ptr(10088, 10101, 1), new Range16.Ptr(10181, 10182, 1), new Range16.Ptr(10214, 10223, 1), new Range16.Ptr(10627, 10648, 1), new Range16.Ptr(10712, 10715, 1), new Range16.Ptr(10748, 10749, 1), new Range16.Ptr(11513, 11516, 1), new Range16.Ptr(11518, 11519, 1), new Range16.Ptr(11632, 11776, 144), new Range16.Ptr(11777, 11822, 1), new Range16.Ptr(11824, 11835, 1), new Range16.Ptr(12289, 12291, 1), new Range16.Ptr(12296, 12305, 1), new Range16.Ptr(12308, 12319, 1), new Range16.Ptr(12336, 12349, 13), new Range16.Ptr(12448, 12539, 91), new Range16.Ptr(42238, 42239, 1), new Range16.Ptr(42509, 42511, 1), new Range16.Ptr(42611, 42622, 11), new Range16.Ptr(42738, 42743, 1), new Range16.Ptr(43124, 43127, 1), new Range16.Ptr(43214, 43215, 1), new Range16.Ptr(43256, 43258, 1), new Range16.Ptr(43310, 43311, 1), new Range16.Ptr(43359, 43457, 98), new Range16.Ptr(43458, 43469, 1), new Range16.Ptr(43486, 43487, 1), new Range16.Ptr(43612, 43615, 1), new Range16.Ptr(43742, 43743, 1), new Range16.Ptr(43760, 43761, 1), new Range16.Ptr(44011, 64830, 20819), new Range16.Ptr(64831, 65040, 209), new Range16.Ptr(65041, 65049, 1), new Range16.Ptr(65072, 65106, 1), new Range16.Ptr(65108, 65121, 1), new Range16.Ptr(65123, 65128, 5), new Range16.Ptr(65130, 65131, 1), new Range16.Ptr(65281, 65283, 1), new Range16.Ptr(65285, 65290, 1), new Range16.Ptr(65292, 65295, 1), new Range16.Ptr(65306, 65307, 1), new Range16.Ptr(65311, 65312, 1), new Range16.Ptr(65339, 65341, 1), new Range16.Ptr(65343, 65371, 28), new Range16.Ptr(65373, 65375, 2), new Range16.Ptr(65376, 65381, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65792, 65794, 1), new Range32.Ptr(66463, 66512, 49), new Range32.Ptr(67671, 67871, 200), new Range32.Ptr(67903, 68176, 273), new Range32.Ptr(68177, 68184, 1), new Range32.Ptr(68223, 68409, 186), new Range32.Ptr(68410, 68415, 1), new Range32.Ptr(69703, 69709, 1), new Range32.Ptr(69819, 69820, 1), new Range32.Ptr(69822, 69825, 1), new Range32.Ptr(69952, 69955, 1), new Range32.Ptr(70085, 70088, 1), new Range32.Ptr(74864, 74867, 1)]), 11);
		go$pkg.P = _P;
		_S = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(36, 43, 7), new Range16.Ptr(60, 62, 1), new Range16.Ptr(94, 96, 2), new Range16.Ptr(124, 126, 2), new Range16.Ptr(162, 166, 1), new Range16.Ptr(168, 169, 1), new Range16.Ptr(172, 174, 2), new Range16.Ptr(175, 177, 1), new Range16.Ptr(180, 184, 4), new Range16.Ptr(215, 247, 32), new Range16.Ptr(706, 709, 1), new Range16.Ptr(722, 735, 1), new Range16.Ptr(741, 747, 1), new Range16.Ptr(749, 751, 2), new Range16.Ptr(752, 767, 1), new Range16.Ptr(885, 900, 15), new Range16.Ptr(901, 1014, 113), new Range16.Ptr(1154, 1423, 269), new Range16.Ptr(1542, 1544, 1), new Range16.Ptr(1547, 1550, 3), new Range16.Ptr(1551, 1758, 207), new Range16.Ptr(1769, 1789, 20), new Range16.Ptr(1790, 2038, 248), new Range16.Ptr(2546, 2547, 1), new Range16.Ptr(2554, 2555, 1), new Range16.Ptr(2801, 2928, 127), new Range16.Ptr(3059, 3066, 1), new Range16.Ptr(3199, 3449, 250), new Range16.Ptr(3647, 3841, 194), new Range16.Ptr(3842, 3843, 1), new Range16.Ptr(3859, 3861, 2), new Range16.Ptr(3862, 3863, 1), new Range16.Ptr(3866, 3871, 1), new Range16.Ptr(3892, 3896, 2), new Range16.Ptr(4030, 4037, 1), new Range16.Ptr(4039, 4044, 1), new Range16.Ptr(4046, 4047, 1), new Range16.Ptr(4053, 4056, 1), new Range16.Ptr(4254, 4255, 1), new Range16.Ptr(5008, 5017, 1), new Range16.Ptr(6107, 6464, 357), new Range16.Ptr(6622, 6655, 1), new Range16.Ptr(7009, 7018, 1), new Range16.Ptr(7028, 7036, 1), new Range16.Ptr(8125, 8127, 2), new Range16.Ptr(8128, 8129, 1), new Range16.Ptr(8141, 8143, 1), new Range16.Ptr(8157, 8159, 1), new Range16.Ptr(8173, 8175, 1), new Range16.Ptr(8189, 8190, 1), new Range16.Ptr(8260, 8274, 14), new Range16.Ptr(8314, 8316, 1), new Range16.Ptr(8330, 8332, 1), new Range16.Ptr(8352, 8378, 1), new Range16.Ptr(8448, 8449, 1), new Range16.Ptr(8451, 8454, 1), new Range16.Ptr(8456, 8457, 1), new Range16.Ptr(8468, 8470, 2), new Range16.Ptr(8471, 8472, 1), new Range16.Ptr(8478, 8483, 1), new Range16.Ptr(8485, 8489, 2), new Range16.Ptr(8494, 8506, 12), new Range16.Ptr(8507, 8512, 5), new Range16.Ptr(8513, 8516, 1), new Range16.Ptr(8522, 8525, 1), new Range16.Ptr(8527, 8592, 65), new Range16.Ptr(8593, 9000, 1), new Range16.Ptr(9003, 9203, 1), new Range16.Ptr(9216, 9254, 1), new Range16.Ptr(9280, 9290, 1), new Range16.Ptr(9372, 9449, 1), new Range16.Ptr(9472, 9983, 1), new Range16.Ptr(9985, 10087, 1), new Range16.Ptr(10132, 10180, 1), new Range16.Ptr(10183, 10213, 1), new Range16.Ptr(10224, 10626, 1), new Range16.Ptr(10649, 10711, 1), new Range16.Ptr(10716, 10747, 1), new Range16.Ptr(10750, 11084, 1), new Range16.Ptr(11088, 11097, 1), new Range16.Ptr(11493, 11498, 1), new Range16.Ptr(11904, 11929, 1), new Range16.Ptr(11931, 12019, 1), new Range16.Ptr(12032, 12245, 1), new Range16.Ptr(12272, 12283, 1), new Range16.Ptr(12292, 12306, 14), new Range16.Ptr(12307, 12320, 13), new Range16.Ptr(12342, 12343, 1), new Range16.Ptr(12350, 12351, 1), new Range16.Ptr(12443, 12444, 1), new Range16.Ptr(12688, 12689, 1), new Range16.Ptr(12694, 12703, 1), new Range16.Ptr(12736, 12771, 1), new Range16.Ptr(12800, 12830, 1), new Range16.Ptr(12842, 12871, 1), new Range16.Ptr(12880, 12896, 16), new Range16.Ptr(12897, 12927, 1), new Range16.Ptr(12938, 12976, 1), new Range16.Ptr(12992, 13054, 1), new Range16.Ptr(13056, 13311, 1), new Range16.Ptr(19904, 19967, 1), new Range16.Ptr(42128, 42182, 1), new Range16.Ptr(42752, 42774, 1), new Range16.Ptr(42784, 42785, 1), new Range16.Ptr(42889, 42890, 1), new Range16.Ptr(43048, 43051, 1), new Range16.Ptr(43062, 43065, 1), new Range16.Ptr(43639, 43641, 1), new Range16.Ptr(64297, 64434, 137), new Range16.Ptr(64435, 64449, 1), new Range16.Ptr(65020, 65021, 1), new Range16.Ptr(65122, 65124, 2), new Range16.Ptr(65125, 65126, 1), new Range16.Ptr(65129, 65284, 155), new Range16.Ptr(65291, 65308, 17), new Range16.Ptr(65309, 65310, 1), new Range16.Ptr(65342, 65344, 2), new Range16.Ptr(65372, 65374, 2), new Range16.Ptr(65504, 65510, 1), new Range16.Ptr(65512, 65518, 1), new Range16.Ptr(65532, 65533, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65847, 65855, 1), new Range32.Ptr(65913, 65929, 1), new Range32.Ptr(65936, 65947, 1), new Range32.Ptr(66000, 66044, 1), new Range32.Ptr(118784, 119029, 1), new Range32.Ptr(119040, 119078, 1), new Range32.Ptr(119081, 119140, 1), new Range32.Ptr(119146, 119148, 1), new Range32.Ptr(119171, 119172, 1), new Range32.Ptr(119180, 119209, 1), new Range32.Ptr(119214, 119261, 1), new Range32.Ptr(119296, 119361, 1), new Range32.Ptr(119365, 119552, 187), new Range32.Ptr(119553, 119638, 1), new Range32.Ptr(120513, 120539, 26), new Range32.Ptr(120571, 120597, 26), new Range32.Ptr(120629, 120655, 26), new Range32.Ptr(120687, 120713, 26), new Range32.Ptr(120745, 120771, 26), new Range32.Ptr(126704, 126705, 1), new Range32.Ptr(126976, 127019, 1), new Range32.Ptr(127024, 127123, 1), new Range32.Ptr(127136, 127150, 1), new Range32.Ptr(127153, 127166, 1), new Range32.Ptr(127169, 127183, 1), new Range32.Ptr(127185, 127199, 1), new Range32.Ptr(127248, 127278, 1), new Range32.Ptr(127280, 127339, 1), new Range32.Ptr(127344, 127386, 1), new Range32.Ptr(127462, 127490, 1), new Range32.Ptr(127504, 127546, 1), new Range32.Ptr(127552, 127560, 1), new Range32.Ptr(127568, 127569, 1), new Range32.Ptr(127744, 127776, 1), new Range32.Ptr(127792, 127797, 1), new Range32.Ptr(127799, 127868, 1), new Range32.Ptr(127872, 127891, 1), new Range32.Ptr(127904, 127940, 1), new Range32.Ptr(127942, 127946, 1), new Range32.Ptr(127968, 127984, 1), new Range32.Ptr(128000, 128062, 1), new Range32.Ptr(128064, 128066, 2), new Range32.Ptr(128067, 128247, 1), new Range32.Ptr(128249, 128252, 1), new Range32.Ptr(128256, 128317, 1), new Range32.Ptr(128320, 128323, 1), new Range32.Ptr(128336, 128359, 1), new Range32.Ptr(128507, 128576, 1), new Range32.Ptr(128581, 128591, 1), new Range32.Ptr(128640, 128709, 1), new Range32.Ptr(128768, 128883, 1)]), 10);
		go$pkg.S = _S;
		_Zs = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(32, 160, 128), new Range16.Ptr(5760, 6158, 398), new Range16.Ptr(8192, 8202, 1), new Range16.Ptr(8239, 8287, 48), new Range16.Ptr(12288, 12288, 1)]), (go$sliceType(Range32)).nil, 1);
		go$pkg.Zs = _Zs;
		go$pkg.GraphicRanges = new (go$sliceType((go$ptrType(RangeTable))))([go$pkg.L, go$pkg.M, go$pkg.N, go$pkg.P, go$pkg.S, go$pkg.Zs]);
		go$pkg.PrintRanges = new (go$sliceType((go$ptrType(RangeTable))))([go$pkg.L, go$pkg.M, go$pkg.N, go$pkg.P, go$pkg.S]);
		_Cc = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1, 31, 1), new Range16.Ptr(127, 159, 1)]), (go$sliceType(Range32)).nil, 2);
		go$pkg.Cc = _Cc;
		_Cf = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(173, 1536, 1363), new Range16.Ptr(1537, 1540, 1), new Range16.Ptr(1757, 1807, 50), new Range16.Ptr(8203, 8207, 1), new Range16.Ptr(8234, 8238, 1), new Range16.Ptr(8288, 8292, 1), new Range16.Ptr(8298, 8303, 1), new Range16.Ptr(65279, 65529, 250), new Range16.Ptr(65530, 65531, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(69821, 119155, 49334), new Range32.Ptr(119156, 119162, 1), new Range32.Ptr(917505, 917536, 31), new Range32.Ptr(917537, 917631, 1)]), 0);
		go$pkg.Cf = _Cf;
		_Co = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(57344, 63743, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(983040, 1048573, 1), new Range32.Ptr(1048576, 1114109, 1)]), 0);
		go$pkg.Co = _Co;
		_Cs = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(55296, 57343, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Cs = _Cs;
		_Nd = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(48, 57, 1), new Range16.Ptr(1632, 1641, 1), new Range16.Ptr(1776, 1785, 1), new Range16.Ptr(1984, 1993, 1), new Range16.Ptr(2406, 2415, 1), new Range16.Ptr(2534, 2543, 1), new Range16.Ptr(2662, 2671, 1), new Range16.Ptr(2790, 2799, 1), new Range16.Ptr(2918, 2927, 1), new Range16.Ptr(3046, 3055, 1), new Range16.Ptr(3174, 3183, 1), new Range16.Ptr(3302, 3311, 1), new Range16.Ptr(3430, 3439, 1), new Range16.Ptr(3664, 3673, 1), new Range16.Ptr(3792, 3801, 1), new Range16.Ptr(3872, 3881, 1), new Range16.Ptr(4160, 4169, 1), new Range16.Ptr(4240, 4249, 1), new Range16.Ptr(6112, 6121, 1), new Range16.Ptr(6160, 6169, 1), new Range16.Ptr(6470, 6479, 1), new Range16.Ptr(6608, 6617, 1), new Range16.Ptr(6784, 6793, 1), new Range16.Ptr(6800, 6809, 1), new Range16.Ptr(6992, 7001, 1), new Range16.Ptr(7088, 7097, 1), new Range16.Ptr(7232, 7241, 1), new Range16.Ptr(7248, 7257, 1), new Range16.Ptr(42528, 42537, 1), new Range16.Ptr(43216, 43225, 1), new Range16.Ptr(43264, 43273, 1), new Range16.Ptr(43472, 43481, 1), new Range16.Ptr(43600, 43609, 1), new Range16.Ptr(44016, 44025, 1), new Range16.Ptr(65296, 65305, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66720, 66729, 1), new Range32.Ptr(69734, 69743, 1), new Range32.Ptr(69872, 69881, 1), new Range32.Ptr(69942, 69951, 1), new Range32.Ptr(70096, 70105, 1), new Range32.Ptr(71360, 71369, 1), new Range32.Ptr(120782, 120831, 1)]), 1);
		go$pkg.Nd = _Nd;
		_Lm = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(688, 705, 1), new Range16.Ptr(710, 721, 1), new Range16.Ptr(736, 740, 1), new Range16.Ptr(748, 750, 2), new Range16.Ptr(884, 890, 6), new Range16.Ptr(1369, 1600, 231), new Range16.Ptr(1765, 1766, 1), new Range16.Ptr(2036, 2037, 1), new Range16.Ptr(2042, 2074, 32), new Range16.Ptr(2084, 2088, 4), new Range16.Ptr(2417, 3654, 1237), new Range16.Ptr(3782, 4348, 566), new Range16.Ptr(6103, 6211, 108), new Range16.Ptr(6823, 7288, 465), new Range16.Ptr(7289, 7293, 1), new Range16.Ptr(7468, 7530, 1), new Range16.Ptr(7544, 7579, 35), new Range16.Ptr(7580, 7615, 1), new Range16.Ptr(8305, 8319, 14), new Range16.Ptr(8336, 8348, 1), new Range16.Ptr(11388, 11389, 1), new Range16.Ptr(11631, 11823, 192), new Range16.Ptr(12293, 12337, 44), new Range16.Ptr(12338, 12341, 1), new Range16.Ptr(12347, 12445, 98), new Range16.Ptr(12446, 12540, 94), new Range16.Ptr(12541, 12542, 1), new Range16.Ptr(40981, 42232, 1251), new Range16.Ptr(42233, 42237, 1), new Range16.Ptr(42508, 42623, 115), new Range16.Ptr(42775, 42783, 1), new Range16.Ptr(42864, 42888, 24), new Range16.Ptr(43000, 43001, 1), new Range16.Ptr(43471, 43632, 161), new Range16.Ptr(43741, 43763, 22), new Range16.Ptr(43764, 65392, 21628), new Range16.Ptr(65438, 65439, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(94099, 94111, 1)]), 0);
		go$pkg.Lm = _Lm;
		_Lo = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(170, 186, 16), new Range16.Ptr(443, 448, 5), new Range16.Ptr(449, 451, 1), new Range16.Ptr(660, 1488, 828), new Range16.Ptr(1489, 1514, 1), new Range16.Ptr(1520, 1522, 1), new Range16.Ptr(1568, 1599, 1), new Range16.Ptr(1601, 1610, 1), new Range16.Ptr(1646, 1647, 1), new Range16.Ptr(1649, 1747, 1), new Range16.Ptr(1749, 1774, 25), new Range16.Ptr(1775, 1786, 11), new Range16.Ptr(1787, 1788, 1), new Range16.Ptr(1791, 1808, 17), new Range16.Ptr(1810, 1839, 1), new Range16.Ptr(1869, 1957, 1), new Range16.Ptr(1969, 1994, 25), new Range16.Ptr(1995, 2026, 1), new Range16.Ptr(2048, 2069, 1), new Range16.Ptr(2112, 2136, 1), new Range16.Ptr(2208, 2210, 2), new Range16.Ptr(2211, 2220, 1), new Range16.Ptr(2308, 2361, 1), new Range16.Ptr(2365, 2384, 19), new Range16.Ptr(2392, 2401, 1), new Range16.Ptr(2418, 2423, 1), new Range16.Ptr(2425, 2431, 1), new Range16.Ptr(2437, 2444, 1), new Range16.Ptr(2447, 2448, 1), new Range16.Ptr(2451, 2472, 1), new Range16.Ptr(2474, 2480, 1), new Range16.Ptr(2482, 2486, 4), new Range16.Ptr(2487, 2489, 1), new Range16.Ptr(2493, 2510, 17), new Range16.Ptr(2524, 2525, 1), new Range16.Ptr(2527, 2529, 1), new Range16.Ptr(2544, 2545, 1), new Range16.Ptr(2565, 2570, 1), new Range16.Ptr(2575, 2576, 1), new Range16.Ptr(2579, 2600, 1), new Range16.Ptr(2602, 2608, 1), new Range16.Ptr(2610, 2611, 1), new Range16.Ptr(2613, 2614, 1), new Range16.Ptr(2616, 2617, 1), new Range16.Ptr(2649, 2652, 1), new Range16.Ptr(2654, 2674, 20), new Range16.Ptr(2675, 2676, 1), new Range16.Ptr(2693, 2701, 1), new Range16.Ptr(2703, 2705, 1), new Range16.Ptr(2707, 2728, 1), new Range16.Ptr(2730, 2736, 1), new Range16.Ptr(2738, 2739, 1), new Range16.Ptr(2741, 2745, 1), new Range16.Ptr(2749, 2768, 19), new Range16.Ptr(2784, 2785, 1), new Range16.Ptr(2821, 2828, 1), new Range16.Ptr(2831, 2832, 1), new Range16.Ptr(2835, 2856, 1), new Range16.Ptr(2858, 2864, 1), new Range16.Ptr(2866, 2867, 1), new Range16.Ptr(2869, 2873, 1), new Range16.Ptr(2877, 2908, 31), new Range16.Ptr(2909, 2911, 2), new Range16.Ptr(2912, 2913, 1), new Range16.Ptr(2929, 2947, 18), new Range16.Ptr(2949, 2954, 1), new Range16.Ptr(2958, 2960, 1), new Range16.Ptr(2962, 2965, 1), new Range16.Ptr(2969, 2970, 1), new Range16.Ptr(2972, 2974, 2), new Range16.Ptr(2975, 2979, 4), new Range16.Ptr(2980, 2984, 4), new Range16.Ptr(2985, 2986, 1), new Range16.Ptr(2990, 3001, 1), new Range16.Ptr(3024, 3077, 53), new Range16.Ptr(3078, 3084, 1), new Range16.Ptr(3086, 3088, 1), new Range16.Ptr(3090, 3112, 1), new Range16.Ptr(3114, 3123, 1), new Range16.Ptr(3125, 3129, 1), new Range16.Ptr(3133, 3160, 27), new Range16.Ptr(3161, 3168, 7), new Range16.Ptr(3169, 3205, 36), new Range16.Ptr(3206, 3212, 1), new Range16.Ptr(3214, 3216, 1), new Range16.Ptr(3218, 3240, 1), new Range16.Ptr(3242, 3251, 1), new Range16.Ptr(3253, 3257, 1), new Range16.Ptr(3261, 3294, 33), new Range16.Ptr(3296, 3297, 1), new Range16.Ptr(3313, 3314, 1), new Range16.Ptr(3333, 3340, 1), new Range16.Ptr(3342, 3344, 1), new Range16.Ptr(3346, 3386, 1), new Range16.Ptr(3389, 3406, 17), new Range16.Ptr(3424, 3425, 1), new Range16.Ptr(3450, 3455, 1), new Range16.Ptr(3461, 3478, 1), new Range16.Ptr(3482, 3505, 1), new Range16.Ptr(3507, 3515, 1), new Range16.Ptr(3517, 3520, 3), new Range16.Ptr(3521, 3526, 1), new Range16.Ptr(3585, 3632, 1), new Range16.Ptr(3634, 3635, 1), new Range16.Ptr(3648, 3653, 1), new Range16.Ptr(3713, 3714, 1), new Range16.Ptr(3716, 3719, 3), new Range16.Ptr(3720, 3722, 2), new Range16.Ptr(3725, 3732, 7), new Range16.Ptr(3733, 3735, 1), new Range16.Ptr(3737, 3743, 1), new Range16.Ptr(3745, 3747, 1), new Range16.Ptr(3749, 3751, 2), new Range16.Ptr(3754, 3755, 1), new Range16.Ptr(3757, 3760, 1), new Range16.Ptr(3762, 3763, 1), new Range16.Ptr(3773, 3776, 3), new Range16.Ptr(3777, 3780, 1), new Range16.Ptr(3804, 3807, 1), new Range16.Ptr(3840, 3904, 64), new Range16.Ptr(3905, 3911, 1), new Range16.Ptr(3913, 3948, 1), new Range16.Ptr(3976, 3980, 1), new Range16.Ptr(4096, 4138, 1), new Range16.Ptr(4159, 4176, 17), new Range16.Ptr(4177, 4181, 1), new Range16.Ptr(4186, 4189, 1), new Range16.Ptr(4193, 4197, 4), new Range16.Ptr(4198, 4206, 8), new Range16.Ptr(4207, 4208, 1), new Range16.Ptr(4213, 4225, 1), new Range16.Ptr(4238, 4304, 66), new Range16.Ptr(4305, 4346, 1), new Range16.Ptr(4349, 4680, 1), new Range16.Ptr(4682, 4685, 1), new Range16.Ptr(4688, 4694, 1), new Range16.Ptr(4696, 4698, 2), new Range16.Ptr(4699, 4701, 1), new Range16.Ptr(4704, 4744, 1), new Range16.Ptr(4746, 4749, 1), new Range16.Ptr(4752, 4784, 1), new Range16.Ptr(4786, 4789, 1), new Range16.Ptr(4792, 4798, 1), new Range16.Ptr(4800, 4802, 2), new Range16.Ptr(4803, 4805, 1), new Range16.Ptr(4808, 4822, 1), new Range16.Ptr(4824, 4880, 1), new Range16.Ptr(4882, 4885, 1), new Range16.Ptr(4888, 4954, 1), new Range16.Ptr(4992, 5007, 1), new Range16.Ptr(5024, 5108, 1), new Range16.Ptr(5121, 5740, 1), new Range16.Ptr(5743, 5759, 1), new Range16.Ptr(5761, 5786, 1), new Range16.Ptr(5792, 5866, 1), new Range16.Ptr(5888, 5900, 1), new Range16.Ptr(5902, 5905, 1), new Range16.Ptr(5920, 5937, 1), new Range16.Ptr(5952, 5969, 1), new Range16.Ptr(5984, 5996, 1), new Range16.Ptr(5998, 6000, 1), new Range16.Ptr(6016, 6067, 1), new Range16.Ptr(6108, 6176, 68), new Range16.Ptr(6177, 6210, 1), new Range16.Ptr(6212, 6263, 1), new Range16.Ptr(6272, 6312, 1), new Range16.Ptr(6314, 6320, 6), new Range16.Ptr(6321, 6389, 1), new Range16.Ptr(6400, 6428, 1), new Range16.Ptr(6480, 6509, 1), new Range16.Ptr(6512, 6516, 1), new Range16.Ptr(6528, 6571, 1), new Range16.Ptr(6593, 6599, 1), new Range16.Ptr(6656, 6678, 1), new Range16.Ptr(6688, 6740, 1), new Range16.Ptr(6917, 6963, 1), new Range16.Ptr(6981, 6987, 1), new Range16.Ptr(7043, 7072, 1), new Range16.Ptr(7086, 7087, 1), new Range16.Ptr(7098, 7141, 1), new Range16.Ptr(7168, 7203, 1), new Range16.Ptr(7245, 7247, 1), new Range16.Ptr(7258, 7287, 1), new Range16.Ptr(7401, 7404, 1), new Range16.Ptr(7406, 7409, 1), new Range16.Ptr(7413, 7414, 1), new Range16.Ptr(8501, 8504, 1), new Range16.Ptr(11568, 11623, 1), new Range16.Ptr(11648, 11670, 1), new Range16.Ptr(11680, 11686, 1), new Range16.Ptr(11688, 11694, 1), new Range16.Ptr(11696, 11702, 1), new Range16.Ptr(11704, 11710, 1), new Range16.Ptr(11712, 11718, 1), new Range16.Ptr(11720, 11726, 1), new Range16.Ptr(11728, 11734, 1), new Range16.Ptr(11736, 11742, 1), new Range16.Ptr(12294, 12348, 54), new Range16.Ptr(12353, 12438, 1), new Range16.Ptr(12447, 12449, 2), new Range16.Ptr(12450, 12538, 1), new Range16.Ptr(12543, 12549, 6), new Range16.Ptr(12550, 12589, 1), new Range16.Ptr(12593, 12686, 1), new Range16.Ptr(12704, 12730, 1), new Range16.Ptr(12784, 12799, 1), new Range16.Ptr(13312, 19893, 1), new Range16.Ptr(19968, 40908, 1), new Range16.Ptr(40960, 40980, 1), new Range16.Ptr(40982, 42124, 1), new Range16.Ptr(42192, 42231, 1), new Range16.Ptr(42240, 42507, 1), new Range16.Ptr(42512, 42527, 1), new Range16.Ptr(42538, 42539, 1), new Range16.Ptr(42606, 42656, 50), new Range16.Ptr(42657, 42725, 1), new Range16.Ptr(43003, 43009, 1), new Range16.Ptr(43011, 43013, 1), new Range16.Ptr(43015, 43018, 1), new Range16.Ptr(43020, 43042, 1), new Range16.Ptr(43072, 43123, 1), new Range16.Ptr(43138, 43187, 1), new Range16.Ptr(43250, 43255, 1), new Range16.Ptr(43259, 43274, 15), new Range16.Ptr(43275, 43301, 1), new Range16.Ptr(43312, 43334, 1), new Range16.Ptr(43360, 43388, 1), new Range16.Ptr(43396, 43442, 1), new Range16.Ptr(43520, 43560, 1), new Range16.Ptr(43584, 43586, 1), new Range16.Ptr(43588, 43595, 1), new Range16.Ptr(43616, 43631, 1), new Range16.Ptr(43633, 43638, 1), new Range16.Ptr(43642, 43648, 6), new Range16.Ptr(43649, 43695, 1), new Range16.Ptr(43697, 43701, 4), new Range16.Ptr(43702, 43705, 3), new Range16.Ptr(43706, 43709, 1), new Range16.Ptr(43712, 43714, 2), new Range16.Ptr(43739, 43740, 1), new Range16.Ptr(43744, 43754, 1), new Range16.Ptr(43762, 43777, 15), new Range16.Ptr(43778, 43782, 1), new Range16.Ptr(43785, 43790, 1), new Range16.Ptr(43793, 43798, 1), new Range16.Ptr(43808, 43814, 1), new Range16.Ptr(43816, 43822, 1), new Range16.Ptr(43968, 44002, 1), new Range16.Ptr(44032, 55203, 1), new Range16.Ptr(55216, 55238, 1), new Range16.Ptr(55243, 55291, 1), new Range16.Ptr(63744, 64109, 1), new Range16.Ptr(64112, 64217, 1), new Range16.Ptr(64285, 64287, 2), new Range16.Ptr(64288, 64296, 1), new Range16.Ptr(64298, 64310, 1), new Range16.Ptr(64312, 64316, 1), new Range16.Ptr(64318, 64320, 2), new Range16.Ptr(64321, 64323, 2), new Range16.Ptr(64324, 64326, 2), new Range16.Ptr(64327, 64433, 1), new Range16.Ptr(64467, 64829, 1), new Range16.Ptr(64848, 64911, 1), new Range16.Ptr(64914, 64967, 1), new Range16.Ptr(65008, 65019, 1), new Range16.Ptr(65136, 65140, 1), new Range16.Ptr(65142, 65276, 1), new Range16.Ptr(65382, 65391, 1), new Range16.Ptr(65393, 65437, 1), new Range16.Ptr(65440, 65470, 1), new Range16.Ptr(65474, 65479, 1), new Range16.Ptr(65482, 65487, 1), new Range16.Ptr(65490, 65495, 1), new Range16.Ptr(65498, 65500, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65536, 65547, 1), new Range32.Ptr(65549, 65574, 1), new Range32.Ptr(65576, 65594, 1), new Range32.Ptr(65596, 65597, 1), new Range32.Ptr(65599, 65613, 1), new Range32.Ptr(65616, 65629, 1), new Range32.Ptr(65664, 65786, 1), new Range32.Ptr(66176, 66204, 1), new Range32.Ptr(66208, 66256, 1), new Range32.Ptr(66304, 66334, 1), new Range32.Ptr(66352, 66368, 1), new Range32.Ptr(66370, 66377, 1), new Range32.Ptr(66432, 66461, 1), new Range32.Ptr(66464, 66499, 1), new Range32.Ptr(66504, 66511, 1), new Range32.Ptr(66640, 66717, 1), new Range32.Ptr(67584, 67589, 1), new Range32.Ptr(67592, 67594, 2), new Range32.Ptr(67595, 67637, 1), new Range32.Ptr(67639, 67640, 1), new Range32.Ptr(67644, 67647, 3), new Range32.Ptr(67648, 67669, 1), new Range32.Ptr(67840, 67861, 1), new Range32.Ptr(67872, 67897, 1), new Range32.Ptr(67968, 68023, 1), new Range32.Ptr(68030, 68031, 1), new Range32.Ptr(68096, 68112, 16), new Range32.Ptr(68113, 68115, 1), new Range32.Ptr(68117, 68119, 1), new Range32.Ptr(68121, 68147, 1), new Range32.Ptr(68192, 68220, 1), new Range32.Ptr(68352, 68405, 1), new Range32.Ptr(68416, 68437, 1), new Range32.Ptr(68448, 68466, 1), new Range32.Ptr(68608, 68680, 1), new Range32.Ptr(69635, 69687, 1), new Range32.Ptr(69763, 69807, 1), new Range32.Ptr(69840, 69864, 1), new Range32.Ptr(69891, 69926, 1), new Range32.Ptr(70019, 70066, 1), new Range32.Ptr(70081, 70084, 1), new Range32.Ptr(71296, 71338, 1), new Range32.Ptr(73728, 74606, 1), new Range32.Ptr(77824, 78894, 1), new Range32.Ptr(92160, 92728, 1), new Range32.Ptr(93952, 94020, 1), new Range32.Ptr(94032, 110592, 16560), new Range32.Ptr(110593, 126464, 15871), new Range32.Ptr(126465, 126467, 1), new Range32.Ptr(126469, 126495, 1), new Range32.Ptr(126497, 126498, 1), new Range32.Ptr(126500, 126503, 3), new Range32.Ptr(126505, 126514, 1), new Range32.Ptr(126516, 126519, 1), new Range32.Ptr(126521, 126523, 2), new Range32.Ptr(126530, 126535, 5), new Range32.Ptr(126537, 126541, 2), new Range32.Ptr(126542, 126543, 1), new Range32.Ptr(126545, 126546, 1), new Range32.Ptr(126548, 126551, 3), new Range32.Ptr(126553, 126561, 2), new Range32.Ptr(126562, 126564, 2), new Range32.Ptr(126567, 126570, 1), new Range32.Ptr(126572, 126578, 1), new Range32.Ptr(126580, 126583, 1), new Range32.Ptr(126585, 126588, 1), new Range32.Ptr(126590, 126592, 2), new Range32.Ptr(126593, 126601, 1), new Range32.Ptr(126603, 126619, 1), new Range32.Ptr(126625, 126627, 1), new Range32.Ptr(126629, 126633, 1), new Range32.Ptr(126635, 126651, 1), new Range32.Ptr(131072, 173782, 1), new Range32.Ptr(173824, 177972, 1), new Range32.Ptr(177984, 178205, 1), new Range32.Ptr(194560, 195101, 1)]), 1);
		go$pkg.Lo = _Lo;
		_Ll = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(97, 122, 1), new Range16.Ptr(181, 223, 42), new Range16.Ptr(224, 246, 1), new Range16.Ptr(248, 255, 1), new Range16.Ptr(257, 311, 2), new Range16.Ptr(312, 328, 2), new Range16.Ptr(329, 375, 2), new Range16.Ptr(378, 382, 2), new Range16.Ptr(383, 384, 1), new Range16.Ptr(387, 389, 2), new Range16.Ptr(392, 396, 4), new Range16.Ptr(397, 402, 5), new Range16.Ptr(405, 409, 4), new Range16.Ptr(410, 411, 1), new Range16.Ptr(414, 417, 3), new Range16.Ptr(419, 421, 2), new Range16.Ptr(424, 426, 2), new Range16.Ptr(427, 429, 2), new Range16.Ptr(432, 436, 4), new Range16.Ptr(438, 441, 3), new Range16.Ptr(442, 445, 3), new Range16.Ptr(446, 447, 1), new Range16.Ptr(454, 460, 3), new Range16.Ptr(462, 476, 2), new Range16.Ptr(477, 495, 2), new Range16.Ptr(496, 499, 3), new Range16.Ptr(501, 505, 4), new Range16.Ptr(507, 563, 2), new Range16.Ptr(564, 569, 1), new Range16.Ptr(572, 575, 3), new Range16.Ptr(576, 578, 2), new Range16.Ptr(583, 591, 2), new Range16.Ptr(592, 659, 1), new Range16.Ptr(661, 687, 1), new Range16.Ptr(881, 883, 2), new Range16.Ptr(887, 891, 4), new Range16.Ptr(892, 893, 1), new Range16.Ptr(912, 940, 28), new Range16.Ptr(941, 974, 1), new Range16.Ptr(976, 977, 1), new Range16.Ptr(981, 983, 1), new Range16.Ptr(985, 1007, 2), new Range16.Ptr(1008, 1011, 1), new Range16.Ptr(1013, 1019, 3), new Range16.Ptr(1020, 1072, 52), new Range16.Ptr(1073, 1119, 1), new Range16.Ptr(1121, 1153, 2), new Range16.Ptr(1163, 1215, 2), new Range16.Ptr(1218, 1230, 2), new Range16.Ptr(1231, 1319, 2), new Range16.Ptr(1377, 1415, 1), new Range16.Ptr(7424, 7467, 1), new Range16.Ptr(7531, 7543, 1), new Range16.Ptr(7545, 7578, 1), new Range16.Ptr(7681, 7829, 2), new Range16.Ptr(7830, 7837, 1), new Range16.Ptr(7839, 7935, 2), new Range16.Ptr(7936, 7943, 1), new Range16.Ptr(7952, 7957, 1), new Range16.Ptr(7968, 7975, 1), new Range16.Ptr(7984, 7991, 1), new Range16.Ptr(8000, 8005, 1), new Range16.Ptr(8016, 8023, 1), new Range16.Ptr(8032, 8039, 1), new Range16.Ptr(8048, 8061, 1), new Range16.Ptr(8064, 8071, 1), new Range16.Ptr(8080, 8087, 1), new Range16.Ptr(8096, 8103, 1), new Range16.Ptr(8112, 8116, 1), new Range16.Ptr(8118, 8119, 1), new Range16.Ptr(8126, 8130, 4), new Range16.Ptr(8131, 8132, 1), new Range16.Ptr(8134, 8135, 1), new Range16.Ptr(8144, 8147, 1), new Range16.Ptr(8150, 8151, 1), new Range16.Ptr(8160, 8167, 1), new Range16.Ptr(8178, 8180, 1), new Range16.Ptr(8182, 8183, 1), new Range16.Ptr(8458, 8462, 4), new Range16.Ptr(8463, 8467, 4), new Range16.Ptr(8495, 8505, 5), new Range16.Ptr(8508, 8509, 1), new Range16.Ptr(8518, 8521, 1), new Range16.Ptr(8526, 8580, 54), new Range16.Ptr(11312, 11358, 1), new Range16.Ptr(11361, 11365, 4), new Range16.Ptr(11366, 11372, 2), new Range16.Ptr(11377, 11379, 2), new Range16.Ptr(11380, 11382, 2), new Range16.Ptr(11383, 11387, 1), new Range16.Ptr(11393, 11491, 2), new Range16.Ptr(11492, 11500, 8), new Range16.Ptr(11502, 11507, 5), new Range16.Ptr(11520, 11557, 1), new Range16.Ptr(11559, 11565, 6), new Range16.Ptr(42561, 42605, 2), new Range16.Ptr(42625, 42647, 2), new Range16.Ptr(42787, 42799, 2), new Range16.Ptr(42800, 42801, 1), new Range16.Ptr(42803, 42865, 2), new Range16.Ptr(42866, 42872, 1), new Range16.Ptr(42874, 42876, 2), new Range16.Ptr(42879, 42887, 2), new Range16.Ptr(42892, 42894, 2), new Range16.Ptr(42897, 42899, 2), new Range16.Ptr(42913, 42921, 2), new Range16.Ptr(43002, 64256, 21254), new Range16.Ptr(64257, 64262, 1), new Range16.Ptr(64275, 64279, 1), new Range16.Ptr(65345, 65370, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66600, 66639, 1), new Range32.Ptr(119834, 119859, 1), new Range32.Ptr(119886, 119892, 1), new Range32.Ptr(119894, 119911, 1), new Range32.Ptr(119938, 119963, 1), new Range32.Ptr(119990, 119993, 1), new Range32.Ptr(119995, 119997, 2), new Range32.Ptr(119998, 120003, 1), new Range32.Ptr(120005, 120015, 1), new Range32.Ptr(120042, 120067, 1), new Range32.Ptr(120094, 120119, 1), new Range32.Ptr(120146, 120171, 1), new Range32.Ptr(120198, 120223, 1), new Range32.Ptr(120250, 120275, 1), new Range32.Ptr(120302, 120327, 1), new Range32.Ptr(120354, 120379, 1), new Range32.Ptr(120406, 120431, 1), new Range32.Ptr(120458, 120485, 1), new Range32.Ptr(120514, 120538, 1), new Range32.Ptr(120540, 120545, 1), new Range32.Ptr(120572, 120596, 1), new Range32.Ptr(120598, 120603, 1), new Range32.Ptr(120630, 120654, 1), new Range32.Ptr(120656, 120661, 1), new Range32.Ptr(120688, 120712, 1), new Range32.Ptr(120714, 120719, 1), new Range32.Ptr(120746, 120770, 1), new Range32.Ptr(120772, 120777, 1), new Range32.Ptr(120779, 120779, 1)]), 4);
		go$pkg.Ll = _Ll;
		_Mc = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(2307, 2363, 56), new Range16.Ptr(2366, 2368, 1), new Range16.Ptr(2377, 2380, 1), new Range16.Ptr(2382, 2383, 1), new Range16.Ptr(2434, 2435, 1), new Range16.Ptr(2494, 2496, 1), new Range16.Ptr(2503, 2504, 1), new Range16.Ptr(2507, 2508, 1), new Range16.Ptr(2519, 2563, 44), new Range16.Ptr(2622, 2624, 1), new Range16.Ptr(2691, 2750, 59), new Range16.Ptr(2751, 2752, 1), new Range16.Ptr(2761, 2763, 2), new Range16.Ptr(2764, 2818, 54), new Range16.Ptr(2819, 2878, 59), new Range16.Ptr(2880, 2887, 7), new Range16.Ptr(2888, 2891, 3), new Range16.Ptr(2892, 2903, 11), new Range16.Ptr(3006, 3007, 1), new Range16.Ptr(3009, 3010, 1), new Range16.Ptr(3014, 3016, 1), new Range16.Ptr(3018, 3020, 1), new Range16.Ptr(3031, 3073, 42), new Range16.Ptr(3074, 3075, 1), new Range16.Ptr(3137, 3140, 1), new Range16.Ptr(3202, 3203, 1), new Range16.Ptr(3262, 3264, 2), new Range16.Ptr(3265, 3268, 1), new Range16.Ptr(3271, 3272, 1), new Range16.Ptr(3274, 3275, 1), new Range16.Ptr(3285, 3286, 1), new Range16.Ptr(3330, 3331, 1), new Range16.Ptr(3390, 3392, 1), new Range16.Ptr(3398, 3400, 1), new Range16.Ptr(3402, 3404, 1), new Range16.Ptr(3415, 3458, 43), new Range16.Ptr(3459, 3535, 76), new Range16.Ptr(3536, 3537, 1), new Range16.Ptr(3544, 3551, 1), new Range16.Ptr(3570, 3571, 1), new Range16.Ptr(3902, 3903, 1), new Range16.Ptr(3967, 4139, 172), new Range16.Ptr(4140, 4145, 5), new Range16.Ptr(4152, 4155, 3), new Range16.Ptr(4156, 4182, 26), new Range16.Ptr(4183, 4194, 11), new Range16.Ptr(4195, 4196, 1), new Range16.Ptr(4199, 4205, 1), new Range16.Ptr(4227, 4228, 1), new Range16.Ptr(4231, 4236, 1), new Range16.Ptr(4239, 4250, 11), new Range16.Ptr(4251, 4252, 1), new Range16.Ptr(6070, 6078, 8), new Range16.Ptr(6079, 6085, 1), new Range16.Ptr(6087, 6088, 1), new Range16.Ptr(6435, 6438, 1), new Range16.Ptr(6441, 6443, 1), new Range16.Ptr(6448, 6449, 1), new Range16.Ptr(6451, 6456, 1), new Range16.Ptr(6576, 6592, 1), new Range16.Ptr(6600, 6601, 1), new Range16.Ptr(6681, 6683, 1), new Range16.Ptr(6741, 6743, 2), new Range16.Ptr(6753, 6755, 2), new Range16.Ptr(6756, 6765, 9), new Range16.Ptr(6766, 6770, 1), new Range16.Ptr(6916, 6965, 49), new Range16.Ptr(6971, 6973, 2), new Range16.Ptr(6974, 6977, 1), new Range16.Ptr(6979, 6980, 1), new Range16.Ptr(7042, 7073, 31), new Range16.Ptr(7078, 7079, 1), new Range16.Ptr(7082, 7084, 2), new Range16.Ptr(7085, 7143, 58), new Range16.Ptr(7146, 7148, 1), new Range16.Ptr(7150, 7154, 4), new Range16.Ptr(7155, 7204, 49), new Range16.Ptr(7205, 7211, 1), new Range16.Ptr(7220, 7221, 1), new Range16.Ptr(7393, 7410, 17), new Range16.Ptr(7411, 12334, 4923), new Range16.Ptr(12335, 43043, 30708), new Range16.Ptr(43044, 43047, 3), new Range16.Ptr(43136, 43137, 1), new Range16.Ptr(43188, 43203, 1), new Range16.Ptr(43346, 43347, 1), new Range16.Ptr(43395, 43444, 49), new Range16.Ptr(43445, 43450, 5), new Range16.Ptr(43451, 43453, 2), new Range16.Ptr(43454, 43456, 1), new Range16.Ptr(43567, 43568, 1), new Range16.Ptr(43571, 43572, 1), new Range16.Ptr(43597, 43643, 46), new Range16.Ptr(43755, 43758, 3), new Range16.Ptr(43759, 43765, 6), new Range16.Ptr(44003, 44004, 1), new Range16.Ptr(44006, 44007, 1), new Range16.Ptr(44009, 44010, 1), new Range16.Ptr(44012, 44012, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(69632, 69632, 1), new Range32.Ptr(69634, 69762, 128), new Range32.Ptr(69808, 69810, 1), new Range32.Ptr(69815, 69816, 1), new Range32.Ptr(69932, 70018, 86), new Range32.Ptr(70067, 70069, 1), new Range32.Ptr(70079, 70080, 1), new Range32.Ptr(71340, 71342, 2), new Range32.Ptr(71343, 71350, 7), new Range32.Ptr(94033, 94078, 1), new Range32.Ptr(119141, 119142, 1), new Range32.Ptr(119149, 119154, 1)]), 0);
		go$pkg.Mc = _Mc;
		_Me = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1160, 1161, 1), new Range16.Ptr(8413, 8416, 1), new Range16.Ptr(8418, 8420, 1), new Range16.Ptr(42608, 42610, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Me = _Me;
		_Mn = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(768, 879, 1), new Range16.Ptr(1155, 1159, 1), new Range16.Ptr(1425, 1469, 1), new Range16.Ptr(1471, 1473, 2), new Range16.Ptr(1474, 1476, 2), new Range16.Ptr(1477, 1479, 2), new Range16.Ptr(1552, 1562, 1), new Range16.Ptr(1611, 1631, 1), new Range16.Ptr(1648, 1750, 102), new Range16.Ptr(1751, 1756, 1), new Range16.Ptr(1759, 1764, 1), new Range16.Ptr(1767, 1768, 1), new Range16.Ptr(1770, 1773, 1), new Range16.Ptr(1809, 1840, 31), new Range16.Ptr(1841, 1866, 1), new Range16.Ptr(1958, 1968, 1), new Range16.Ptr(2027, 2035, 1), new Range16.Ptr(2070, 2073, 1), new Range16.Ptr(2075, 2083, 1), new Range16.Ptr(2085, 2087, 1), new Range16.Ptr(2089, 2093, 1), new Range16.Ptr(2137, 2139, 1), new Range16.Ptr(2276, 2302, 1), new Range16.Ptr(2304, 2306, 1), new Range16.Ptr(2362, 2364, 2), new Range16.Ptr(2369, 2376, 1), new Range16.Ptr(2381, 2385, 4), new Range16.Ptr(2386, 2391, 1), new Range16.Ptr(2402, 2403, 1), new Range16.Ptr(2433, 2492, 59), new Range16.Ptr(2497, 2500, 1), new Range16.Ptr(2509, 2530, 21), new Range16.Ptr(2531, 2561, 30), new Range16.Ptr(2562, 2620, 58), new Range16.Ptr(2625, 2626, 1), new Range16.Ptr(2631, 2632, 1), new Range16.Ptr(2635, 2637, 1), new Range16.Ptr(2641, 2672, 31), new Range16.Ptr(2673, 2677, 4), new Range16.Ptr(2689, 2690, 1), new Range16.Ptr(2748, 2753, 5), new Range16.Ptr(2754, 2757, 1), new Range16.Ptr(2759, 2760, 1), new Range16.Ptr(2765, 2786, 21), new Range16.Ptr(2787, 2817, 30), new Range16.Ptr(2876, 2879, 3), new Range16.Ptr(2881, 2884, 1), new Range16.Ptr(2893, 2902, 9), new Range16.Ptr(2914, 2915, 1), new Range16.Ptr(2946, 3008, 62), new Range16.Ptr(3021, 3134, 113), new Range16.Ptr(3135, 3136, 1), new Range16.Ptr(3142, 3144, 1), new Range16.Ptr(3146, 3149, 1), new Range16.Ptr(3157, 3158, 1), new Range16.Ptr(3170, 3171, 1), new Range16.Ptr(3260, 3263, 3), new Range16.Ptr(3270, 3276, 6), new Range16.Ptr(3277, 3298, 21), new Range16.Ptr(3299, 3393, 94), new Range16.Ptr(3394, 3396, 1), new Range16.Ptr(3405, 3426, 21), new Range16.Ptr(3427, 3530, 103), new Range16.Ptr(3538, 3540, 1), new Range16.Ptr(3542, 3633, 91), new Range16.Ptr(3636, 3642, 1), new Range16.Ptr(3655, 3662, 1), new Range16.Ptr(3761, 3764, 3), new Range16.Ptr(3765, 3769, 1), new Range16.Ptr(3771, 3772, 1), new Range16.Ptr(3784, 3789, 1), new Range16.Ptr(3864, 3865, 1), new Range16.Ptr(3893, 3897, 2), new Range16.Ptr(3953, 3966, 1), new Range16.Ptr(3968, 3972, 1), new Range16.Ptr(3974, 3975, 1), new Range16.Ptr(3981, 3991, 1), new Range16.Ptr(3993, 4028, 1), new Range16.Ptr(4038, 4141, 103), new Range16.Ptr(4142, 4144, 1), new Range16.Ptr(4146, 4151, 1), new Range16.Ptr(4153, 4154, 1), new Range16.Ptr(4157, 4158, 1), new Range16.Ptr(4184, 4185, 1), new Range16.Ptr(4190, 4192, 1), new Range16.Ptr(4209, 4212, 1), new Range16.Ptr(4226, 4229, 3), new Range16.Ptr(4230, 4237, 7), new Range16.Ptr(4253, 4957, 704), new Range16.Ptr(4958, 4959, 1), new Range16.Ptr(5906, 5908, 1), new Range16.Ptr(5938, 5940, 1), new Range16.Ptr(5970, 5971, 1), new Range16.Ptr(6002, 6003, 1), new Range16.Ptr(6068, 6069, 1), new Range16.Ptr(6071, 6077, 1), new Range16.Ptr(6086, 6089, 3), new Range16.Ptr(6090, 6099, 1), new Range16.Ptr(6109, 6155, 46), new Range16.Ptr(6156, 6157, 1), new Range16.Ptr(6313, 6432, 119), new Range16.Ptr(6433, 6434, 1), new Range16.Ptr(6439, 6440, 1), new Range16.Ptr(6450, 6457, 7), new Range16.Ptr(6458, 6459, 1), new Range16.Ptr(6679, 6680, 1), new Range16.Ptr(6742, 6744, 2), new Range16.Ptr(6745, 6750, 1), new Range16.Ptr(6752, 6754, 2), new Range16.Ptr(6757, 6764, 1), new Range16.Ptr(6771, 6780, 1), new Range16.Ptr(6783, 6912, 129), new Range16.Ptr(6913, 6915, 1), new Range16.Ptr(6964, 6966, 2), new Range16.Ptr(6967, 6970, 1), new Range16.Ptr(6972, 6978, 6), new Range16.Ptr(7019, 7027, 1), new Range16.Ptr(7040, 7041, 1), new Range16.Ptr(7074, 7077, 1), new Range16.Ptr(7080, 7081, 1), new Range16.Ptr(7083, 7142, 59), new Range16.Ptr(7144, 7145, 1), new Range16.Ptr(7149, 7151, 2), new Range16.Ptr(7152, 7153, 1), new Range16.Ptr(7212, 7219, 1), new Range16.Ptr(7222, 7223, 1), new Range16.Ptr(7376, 7378, 1), new Range16.Ptr(7380, 7392, 1), new Range16.Ptr(7394, 7400, 1), new Range16.Ptr(7405, 7412, 7), new Range16.Ptr(7616, 7654, 1), new Range16.Ptr(7676, 7679, 1), new Range16.Ptr(8400, 8412, 1), new Range16.Ptr(8417, 8421, 4), new Range16.Ptr(8422, 8432, 1), new Range16.Ptr(11503, 11505, 1), new Range16.Ptr(11647, 11744, 97), new Range16.Ptr(11745, 11775, 1), new Range16.Ptr(12330, 12333, 1), new Range16.Ptr(12441, 12442, 1), new Range16.Ptr(42607, 42612, 5), new Range16.Ptr(42613, 42621, 1), new Range16.Ptr(42655, 42736, 81), new Range16.Ptr(42737, 43010, 273), new Range16.Ptr(43014, 43019, 5), new Range16.Ptr(43045, 43046, 1), new Range16.Ptr(43204, 43232, 28), new Range16.Ptr(43233, 43249, 1), new Range16.Ptr(43302, 43309, 1), new Range16.Ptr(43335, 43345, 1), new Range16.Ptr(43392, 43394, 1), new Range16.Ptr(43443, 43446, 3), new Range16.Ptr(43447, 43449, 1), new Range16.Ptr(43452, 43561, 109), new Range16.Ptr(43562, 43566, 1), new Range16.Ptr(43569, 43570, 1), new Range16.Ptr(43573, 43574, 1), new Range16.Ptr(43587, 43596, 9), new Range16.Ptr(43696, 43698, 2), new Range16.Ptr(43699, 43700, 1), new Range16.Ptr(43703, 43704, 1), new Range16.Ptr(43710, 43711, 1), new Range16.Ptr(43713, 43756, 43), new Range16.Ptr(43757, 43766, 9), new Range16.Ptr(44005, 44008, 3), new Range16.Ptr(44013, 64286, 20273), new Range16.Ptr(65024, 65039, 1), new Range16.Ptr(65056, 65062, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66045, 68097, 2052), new Range32.Ptr(68098, 68099, 1), new Range32.Ptr(68101, 68102, 1), new Range32.Ptr(68108, 68111, 1), new Range32.Ptr(68152, 68154, 1), new Range32.Ptr(68159, 69633, 1474), new Range32.Ptr(69688, 69702, 1), new Range32.Ptr(69760, 69761, 1), new Range32.Ptr(69811, 69814, 1), new Range32.Ptr(69817, 69818, 1), new Range32.Ptr(69888, 69890, 1), new Range32.Ptr(69927, 69931, 1), new Range32.Ptr(69933, 69940, 1), new Range32.Ptr(70016, 70017, 1), new Range32.Ptr(70070, 70078, 1), new Range32.Ptr(71339, 71341, 2), new Range32.Ptr(71344, 71349, 1), new Range32.Ptr(71351, 94095, 22744), new Range32.Ptr(94096, 94098, 1), new Range32.Ptr(119143, 119145, 1), new Range32.Ptr(119163, 119170, 1), new Range32.Ptr(119173, 119179, 1), new Range32.Ptr(119210, 119213, 1), new Range32.Ptr(119362, 119364, 1), new Range32.Ptr(917760, 917999, 1)]), 0);
		go$pkg.Mn = _Mn;
		_Nl = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(5870, 5872, 1), new Range16.Ptr(8544, 8578, 1), new Range16.Ptr(8581, 8584, 1), new Range16.Ptr(12295, 12321, 26), new Range16.Ptr(12322, 12329, 1), new Range16.Ptr(12344, 12346, 1), new Range16.Ptr(42726, 42735, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65856, 65908, 1), new Range32.Ptr(66369, 66378, 9), new Range32.Ptr(66513, 66517, 1), new Range32.Ptr(74752, 74850, 1)]), 0);
		go$pkg.Nl = _Nl;
		_No = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(178, 179, 1), new Range16.Ptr(185, 188, 3), new Range16.Ptr(189, 190, 1), new Range16.Ptr(2548, 2553, 1), new Range16.Ptr(2930, 2935, 1), new Range16.Ptr(3056, 3058, 1), new Range16.Ptr(3192, 3198, 1), new Range16.Ptr(3440, 3445, 1), new Range16.Ptr(3882, 3891, 1), new Range16.Ptr(4969, 4988, 1), new Range16.Ptr(6128, 6137, 1), new Range16.Ptr(6618, 8304, 1686), new Range16.Ptr(8308, 8313, 1), new Range16.Ptr(8320, 8329, 1), new Range16.Ptr(8528, 8543, 1), new Range16.Ptr(8585, 9312, 727), new Range16.Ptr(9313, 9371, 1), new Range16.Ptr(9450, 9471, 1), new Range16.Ptr(10102, 10131, 1), new Range16.Ptr(11517, 12690, 1173), new Range16.Ptr(12691, 12693, 1), new Range16.Ptr(12832, 12841, 1), new Range16.Ptr(12872, 12879, 1), new Range16.Ptr(12881, 12895, 1), new Range16.Ptr(12928, 12937, 1), new Range16.Ptr(12977, 12991, 1), new Range16.Ptr(43056, 43061, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65799, 65843, 1), new Range32.Ptr(65909, 65912, 1), new Range32.Ptr(65930, 66336, 406), new Range32.Ptr(66337, 66339, 1), new Range32.Ptr(67672, 67679, 1), new Range32.Ptr(67862, 67867, 1), new Range32.Ptr(68160, 68167, 1), new Range32.Ptr(68221, 68222, 1), new Range32.Ptr(68440, 68447, 1), new Range32.Ptr(68472, 68479, 1), new Range32.Ptr(69216, 69246, 1), new Range32.Ptr(69714, 69733, 1), new Range32.Ptr(119648, 119665, 1), new Range32.Ptr(127232, 127242, 1)]), 3);
		go$pkg.No = _No;
		_C = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1, 31, 1), new Range16.Ptr(127, 159, 1), new Range16.Ptr(173, 1536, 1363), new Range16.Ptr(1537, 1540, 1), new Range16.Ptr(1757, 1807, 50), new Range16.Ptr(8203, 8207, 1), new Range16.Ptr(8234, 8238, 1), new Range16.Ptr(8288, 8292, 1), new Range16.Ptr(8298, 8303, 1), new Range16.Ptr(55296, 63743, 1), new Range16.Ptr(65279, 65529, 250), new Range16.Ptr(65530, 65531, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(69821, 119155, 49334), new Range32.Ptr(119156, 119162, 1), new Range32.Ptr(917505, 917536, 31), new Range32.Ptr(917537, 917631, 1), new Range32.Ptr(983040, 1048573, 1), new Range32.Ptr(1048576, 1114109, 1)]), 2);
		go$pkg.C = _C;
		_Pc = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(95, 8255, 8160), new Range16.Ptr(8256, 8276, 20), new Range16.Ptr(65075, 65076, 1), new Range16.Ptr(65101, 65103, 1), new Range16.Ptr(65343, 65343, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Pc = _Pc;
		_Pd = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(45, 1418, 1373), new Range16.Ptr(1470, 5120, 3650), new Range16.Ptr(6150, 8208, 2058), new Range16.Ptr(8209, 8213, 1), new Range16.Ptr(11799, 11802, 3), new Range16.Ptr(11834, 11835, 1), new Range16.Ptr(12316, 12336, 20), new Range16.Ptr(12448, 65073, 52625), new Range16.Ptr(65074, 65112, 38), new Range16.Ptr(65123, 65293, 170)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Pd = _Pd;
		_Pe = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(41, 93, 52), new Range16.Ptr(125, 3899, 3774), new Range16.Ptr(3901, 5788, 1887), new Range16.Ptr(8262, 8318, 56), new Range16.Ptr(8334, 9002, 668), new Range16.Ptr(10089, 10101, 2), new Range16.Ptr(10182, 10215, 33), new Range16.Ptr(10217, 10223, 2), new Range16.Ptr(10628, 10648, 2), new Range16.Ptr(10713, 10715, 2), new Range16.Ptr(10749, 11811, 1062), new Range16.Ptr(11813, 11817, 2), new Range16.Ptr(12297, 12305, 2), new Range16.Ptr(12309, 12315, 2), new Range16.Ptr(12318, 12319, 1), new Range16.Ptr(64831, 65048, 217), new Range16.Ptr(65078, 65092, 2), new Range16.Ptr(65096, 65114, 18), new Range16.Ptr(65116, 65118, 2), new Range16.Ptr(65289, 65341, 52), new Range16.Ptr(65373, 65379, 3)]), (go$sliceType(Range32)).nil, 1);
		go$pkg.Pe = _Pe;
		_Pf = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(187, 8217, 8030), new Range16.Ptr(8221, 8250, 29), new Range16.Ptr(11779, 11781, 2), new Range16.Ptr(11786, 11789, 3), new Range16.Ptr(11805, 11809, 4)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Pf = _Pf;
		_Pi = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(171, 8216, 8045), new Range16.Ptr(8219, 8220, 1), new Range16.Ptr(8223, 8249, 26), new Range16.Ptr(11778, 11780, 2), new Range16.Ptr(11785, 11788, 3), new Range16.Ptr(11804, 11808, 4)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Pi = _Pi;
		_Po = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(33, 35, 1), new Range16.Ptr(37, 39, 1), new Range16.Ptr(42, 46, 2), new Range16.Ptr(47, 58, 11), new Range16.Ptr(59, 63, 4), new Range16.Ptr(64, 92, 28), new Range16.Ptr(161, 167, 6), new Range16.Ptr(182, 183, 1), new Range16.Ptr(191, 894, 703), new Range16.Ptr(903, 1370, 467), new Range16.Ptr(1371, 1375, 1), new Range16.Ptr(1417, 1472, 55), new Range16.Ptr(1475, 1478, 3), new Range16.Ptr(1523, 1524, 1), new Range16.Ptr(1545, 1546, 1), new Range16.Ptr(1548, 1549, 1), new Range16.Ptr(1563, 1566, 3), new Range16.Ptr(1567, 1642, 75), new Range16.Ptr(1643, 1645, 1), new Range16.Ptr(1748, 1792, 44), new Range16.Ptr(1793, 1805, 1), new Range16.Ptr(2039, 2041, 1), new Range16.Ptr(2096, 2110, 1), new Range16.Ptr(2142, 2404, 262), new Range16.Ptr(2405, 2416, 11), new Range16.Ptr(2800, 3572, 772), new Range16.Ptr(3663, 3674, 11), new Range16.Ptr(3675, 3844, 169), new Range16.Ptr(3845, 3858, 1), new Range16.Ptr(3860, 3973, 113), new Range16.Ptr(4048, 4052, 1), new Range16.Ptr(4057, 4058, 1), new Range16.Ptr(4170, 4175, 1), new Range16.Ptr(4347, 4960, 613), new Range16.Ptr(4961, 4968, 1), new Range16.Ptr(5741, 5742, 1), new Range16.Ptr(5867, 5869, 1), new Range16.Ptr(5941, 5942, 1), new Range16.Ptr(6100, 6102, 1), new Range16.Ptr(6104, 6106, 1), new Range16.Ptr(6144, 6149, 1), new Range16.Ptr(6151, 6154, 1), new Range16.Ptr(6468, 6469, 1), new Range16.Ptr(6686, 6687, 1), new Range16.Ptr(6816, 6822, 1), new Range16.Ptr(6824, 6829, 1), new Range16.Ptr(7002, 7008, 1), new Range16.Ptr(7164, 7167, 1), new Range16.Ptr(7227, 7231, 1), new Range16.Ptr(7294, 7295, 1), new Range16.Ptr(7360, 7367, 1), new Range16.Ptr(7379, 8214, 835), new Range16.Ptr(8215, 8224, 9), new Range16.Ptr(8225, 8231, 1), new Range16.Ptr(8240, 8248, 1), new Range16.Ptr(8251, 8254, 1), new Range16.Ptr(8257, 8259, 1), new Range16.Ptr(8263, 8273, 1), new Range16.Ptr(8275, 8277, 2), new Range16.Ptr(8278, 8286, 1), new Range16.Ptr(11513, 11516, 1), new Range16.Ptr(11518, 11519, 1), new Range16.Ptr(11632, 11776, 144), new Range16.Ptr(11777, 11782, 5), new Range16.Ptr(11783, 11784, 1), new Range16.Ptr(11787, 11790, 3), new Range16.Ptr(11791, 11798, 1), new Range16.Ptr(11800, 11801, 1), new Range16.Ptr(11803, 11806, 3), new Range16.Ptr(11807, 11818, 11), new Range16.Ptr(11819, 11822, 1), new Range16.Ptr(11824, 11833, 1), new Range16.Ptr(12289, 12291, 1), new Range16.Ptr(12349, 12539, 190), new Range16.Ptr(42238, 42239, 1), new Range16.Ptr(42509, 42511, 1), new Range16.Ptr(42611, 42622, 11), new Range16.Ptr(42738, 42743, 1), new Range16.Ptr(43124, 43127, 1), new Range16.Ptr(43214, 43215, 1), new Range16.Ptr(43256, 43258, 1), new Range16.Ptr(43310, 43311, 1), new Range16.Ptr(43359, 43457, 98), new Range16.Ptr(43458, 43469, 1), new Range16.Ptr(43486, 43487, 1), new Range16.Ptr(43612, 43615, 1), new Range16.Ptr(43742, 43743, 1), new Range16.Ptr(43760, 43761, 1), new Range16.Ptr(44011, 65040, 21029), new Range16.Ptr(65041, 65046, 1), new Range16.Ptr(65049, 65072, 23), new Range16.Ptr(65093, 65094, 1), new Range16.Ptr(65097, 65100, 1), new Range16.Ptr(65104, 65106, 1), new Range16.Ptr(65108, 65111, 1), new Range16.Ptr(65119, 65121, 1), new Range16.Ptr(65128, 65130, 2), new Range16.Ptr(65131, 65281, 150), new Range16.Ptr(65282, 65283, 1), new Range16.Ptr(65285, 65287, 1), new Range16.Ptr(65290, 65294, 2), new Range16.Ptr(65295, 65306, 11), new Range16.Ptr(65307, 65311, 4), new Range16.Ptr(65312, 65340, 28), new Range16.Ptr(65377, 65380, 3), new Range16.Ptr(65381, 65381, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65792, 65792, 1), new Range32.Ptr(65793, 65794, 1), new Range32.Ptr(66463, 66512, 49), new Range32.Ptr(67671, 67871, 200), new Range32.Ptr(67903, 68176, 273), new Range32.Ptr(68177, 68184, 1), new Range32.Ptr(68223, 68409, 186), new Range32.Ptr(68410, 68415, 1), new Range32.Ptr(69703, 69709, 1), new Range32.Ptr(69819, 69820, 1), new Range32.Ptr(69822, 69825, 1), new Range32.Ptr(69952, 69955, 1), new Range32.Ptr(70085, 70088, 1), new Range32.Ptr(74864, 74867, 1)]), 8);
		go$pkg.Po = _Po;
		_Ps = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(40, 91, 51), new Range16.Ptr(123, 3898, 3775), new Range16.Ptr(3900, 5787, 1887), new Range16.Ptr(8218, 8222, 4), new Range16.Ptr(8261, 8317, 56), new Range16.Ptr(8333, 9001, 668), new Range16.Ptr(10088, 10100, 2), new Range16.Ptr(10181, 10214, 33), new Range16.Ptr(10216, 10222, 2), new Range16.Ptr(10627, 10647, 2), new Range16.Ptr(10712, 10714, 2), new Range16.Ptr(10748, 11810, 1062), new Range16.Ptr(11812, 11816, 2), new Range16.Ptr(12296, 12304, 2), new Range16.Ptr(12308, 12314, 2), new Range16.Ptr(12317, 64830, 52513), new Range16.Ptr(65047, 65077, 30), new Range16.Ptr(65079, 65091, 2), new Range16.Ptr(65095, 65113, 18), new Range16.Ptr(65115, 65117, 2), new Range16.Ptr(65288, 65339, 51), new Range16.Ptr(65371, 65375, 4), new Range16.Ptr(65378, 65378, 1)]), (go$sliceType(Range32)).nil, 1);
		go$pkg.Ps = _Ps;
		_Sc = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(36, 162, 126), new Range16.Ptr(163, 165, 1), new Range16.Ptr(1423, 1547, 124), new Range16.Ptr(2546, 2547, 1), new Range16.Ptr(2555, 2801, 246), new Range16.Ptr(3065, 3647, 582), new Range16.Ptr(6107, 8352, 2245), new Range16.Ptr(8353, 8378, 1), new Range16.Ptr(43064, 65020, 21956), new Range16.Ptr(65129, 65284, 155), new Range16.Ptr(65504, 65505, 1), new Range16.Ptr(65509, 65510, 1)]), (go$sliceType(Range32)).nil, 2);
		go$pkg.Sc = _Sc;
		_Sk = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(94, 96, 2), new Range16.Ptr(168, 175, 7), new Range16.Ptr(180, 184, 4), new Range16.Ptr(706, 709, 1), new Range16.Ptr(722, 735, 1), new Range16.Ptr(741, 747, 1), new Range16.Ptr(749, 751, 2), new Range16.Ptr(752, 767, 1), new Range16.Ptr(885, 900, 15), new Range16.Ptr(901, 8125, 7224), new Range16.Ptr(8127, 8129, 1), new Range16.Ptr(8141, 8143, 1), new Range16.Ptr(8157, 8159, 1), new Range16.Ptr(8173, 8175, 1), new Range16.Ptr(8189, 8190, 1), new Range16.Ptr(12443, 12444, 1), new Range16.Ptr(42752, 42774, 1), new Range16.Ptr(42784, 42785, 1), new Range16.Ptr(42889, 42890, 1), new Range16.Ptr(64434, 64449, 1), new Range16.Ptr(65342, 65344, 2), new Range16.Ptr(65507, 65507, 1)]), (go$sliceType(Range32)).nil, 3);
		go$pkg.Sk = _Sk;
		_Sm = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43, 60, 17), new Range16.Ptr(61, 62, 1), new Range16.Ptr(124, 126, 2), new Range16.Ptr(172, 177, 5), new Range16.Ptr(215, 247, 32), new Range16.Ptr(1014, 1542, 528), new Range16.Ptr(1543, 1544, 1), new Range16.Ptr(8260, 8274, 14), new Range16.Ptr(8314, 8316, 1), new Range16.Ptr(8330, 8332, 1), new Range16.Ptr(8472, 8512, 40), new Range16.Ptr(8513, 8516, 1), new Range16.Ptr(8523, 8592, 69), new Range16.Ptr(8593, 8596, 1), new Range16.Ptr(8602, 8603, 1), new Range16.Ptr(8608, 8614, 3), new Range16.Ptr(8622, 8654, 32), new Range16.Ptr(8655, 8658, 3), new Range16.Ptr(8660, 8692, 32), new Range16.Ptr(8693, 8959, 1), new Range16.Ptr(8968, 8971, 1), new Range16.Ptr(8992, 8993, 1), new Range16.Ptr(9084, 9115, 31), new Range16.Ptr(9116, 9139, 1), new Range16.Ptr(9180, 9185, 1), new Range16.Ptr(9655, 9665, 10), new Range16.Ptr(9720, 9727, 1), new Range16.Ptr(9839, 10176, 337), new Range16.Ptr(10177, 10180, 1), new Range16.Ptr(10183, 10213, 1), new Range16.Ptr(10224, 10239, 1), new Range16.Ptr(10496, 10626, 1), new Range16.Ptr(10649, 10711, 1), new Range16.Ptr(10716, 10747, 1), new Range16.Ptr(10750, 11007, 1), new Range16.Ptr(11056, 11076, 1), new Range16.Ptr(11079, 11084, 1), new Range16.Ptr(64297, 65122, 825), new Range16.Ptr(65124, 65126, 1), new Range16.Ptr(65291, 65308, 17), new Range16.Ptr(65309, 65310, 1), new Range16.Ptr(65372, 65374, 2), new Range16.Ptr(65506, 65513, 7), new Range16.Ptr(65514, 65516, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(120513, 120539, 26), new Range32.Ptr(120571, 120597, 26), new Range32.Ptr(120629, 120655, 26), new Range32.Ptr(120687, 120713, 26), new Range32.Ptr(120745, 120771, 26), new Range32.Ptr(126704, 126705, 1)]), 5);
		go$pkg.Sm = _Sm;
		_So = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(166, 169, 3), new Range16.Ptr(174, 176, 2), new Range16.Ptr(1154, 1550, 396), new Range16.Ptr(1551, 1758, 207), new Range16.Ptr(1769, 1789, 20), new Range16.Ptr(1790, 2038, 248), new Range16.Ptr(2554, 2928, 374), new Range16.Ptr(3059, 3064, 1), new Range16.Ptr(3066, 3199, 133), new Range16.Ptr(3449, 3841, 392), new Range16.Ptr(3842, 3843, 1), new Range16.Ptr(3859, 3861, 2), new Range16.Ptr(3862, 3863, 1), new Range16.Ptr(3866, 3871, 1), new Range16.Ptr(3892, 3896, 2), new Range16.Ptr(4030, 4037, 1), new Range16.Ptr(4039, 4044, 1), new Range16.Ptr(4046, 4047, 1), new Range16.Ptr(4053, 4056, 1), new Range16.Ptr(4254, 4255, 1), new Range16.Ptr(5008, 5017, 1), new Range16.Ptr(6464, 6622, 158), new Range16.Ptr(6623, 6655, 1), new Range16.Ptr(7009, 7018, 1), new Range16.Ptr(7028, 7036, 1), new Range16.Ptr(8448, 8449, 1), new Range16.Ptr(8451, 8454, 1), new Range16.Ptr(8456, 8457, 1), new Range16.Ptr(8468, 8470, 2), new Range16.Ptr(8471, 8478, 7), new Range16.Ptr(8479, 8483, 1), new Range16.Ptr(8485, 8489, 2), new Range16.Ptr(8494, 8506, 12), new Range16.Ptr(8507, 8522, 15), new Range16.Ptr(8524, 8525, 1), new Range16.Ptr(8527, 8597, 70), new Range16.Ptr(8598, 8601, 1), new Range16.Ptr(8604, 8607, 1), new Range16.Ptr(8609, 8610, 1), new Range16.Ptr(8612, 8613, 1), new Range16.Ptr(8615, 8621, 1), new Range16.Ptr(8623, 8653, 1), new Range16.Ptr(8656, 8657, 1), new Range16.Ptr(8659, 8661, 2), new Range16.Ptr(8662, 8691, 1), new Range16.Ptr(8960, 8967, 1), new Range16.Ptr(8972, 8991, 1), new Range16.Ptr(8994, 9000, 1), new Range16.Ptr(9003, 9083, 1), new Range16.Ptr(9085, 9114, 1), new Range16.Ptr(9140, 9179, 1), new Range16.Ptr(9186, 9203, 1), new Range16.Ptr(9216, 9254, 1), new Range16.Ptr(9280, 9290, 1), new Range16.Ptr(9372, 9449, 1), new Range16.Ptr(9472, 9654, 1), new Range16.Ptr(9656, 9664, 1), new Range16.Ptr(9666, 9719, 1), new Range16.Ptr(9728, 9838, 1), new Range16.Ptr(9840, 9983, 1), new Range16.Ptr(9985, 10087, 1), new Range16.Ptr(10132, 10175, 1), new Range16.Ptr(10240, 10495, 1), new Range16.Ptr(11008, 11055, 1), new Range16.Ptr(11077, 11078, 1), new Range16.Ptr(11088, 11097, 1), new Range16.Ptr(11493, 11498, 1), new Range16.Ptr(11904, 11929, 1), new Range16.Ptr(11931, 12019, 1), new Range16.Ptr(12032, 12245, 1), new Range16.Ptr(12272, 12283, 1), new Range16.Ptr(12292, 12306, 14), new Range16.Ptr(12307, 12320, 13), new Range16.Ptr(12342, 12343, 1), new Range16.Ptr(12350, 12351, 1), new Range16.Ptr(12688, 12689, 1), new Range16.Ptr(12694, 12703, 1), new Range16.Ptr(12736, 12771, 1), new Range16.Ptr(12800, 12830, 1), new Range16.Ptr(12842, 12871, 1), new Range16.Ptr(12880, 12896, 16), new Range16.Ptr(12897, 12927, 1), new Range16.Ptr(12938, 12976, 1), new Range16.Ptr(12992, 13054, 1), new Range16.Ptr(13056, 13311, 1), new Range16.Ptr(19904, 19967, 1), new Range16.Ptr(42128, 42182, 1), new Range16.Ptr(43048, 43051, 1), new Range16.Ptr(43062, 43063, 1), new Range16.Ptr(43065, 43639, 574), new Range16.Ptr(43640, 43641, 1), new Range16.Ptr(65021, 65508, 487), new Range16.Ptr(65512, 65517, 5), new Range16.Ptr(65518, 65532, 14), new Range16.Ptr(65533, 65533, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65847, 65847, 1), new Range32.Ptr(65848, 65855, 1), new Range32.Ptr(65913, 65929, 1), new Range32.Ptr(65936, 65947, 1), new Range32.Ptr(66000, 66044, 1), new Range32.Ptr(118784, 119029, 1), new Range32.Ptr(119040, 119078, 1), new Range32.Ptr(119081, 119140, 1), new Range32.Ptr(119146, 119148, 1), new Range32.Ptr(119171, 119172, 1), new Range32.Ptr(119180, 119209, 1), new Range32.Ptr(119214, 119261, 1), new Range32.Ptr(119296, 119361, 1), new Range32.Ptr(119365, 119552, 187), new Range32.Ptr(119553, 119638, 1), new Range32.Ptr(126976, 127019, 1), new Range32.Ptr(127024, 127123, 1), new Range32.Ptr(127136, 127150, 1), new Range32.Ptr(127153, 127166, 1), new Range32.Ptr(127169, 127183, 1), new Range32.Ptr(127185, 127199, 1), new Range32.Ptr(127248, 127278, 1), new Range32.Ptr(127280, 127339, 1), new Range32.Ptr(127344, 127386, 1), new Range32.Ptr(127462, 127490, 1), new Range32.Ptr(127504, 127546, 1), new Range32.Ptr(127552, 127560, 1), new Range32.Ptr(127568, 127569, 1), new Range32.Ptr(127744, 127776, 1), new Range32.Ptr(127792, 127797, 1), new Range32.Ptr(127799, 127868, 1), new Range32.Ptr(127872, 127891, 1), new Range32.Ptr(127904, 127940, 1), new Range32.Ptr(127942, 127946, 1), new Range32.Ptr(127968, 127984, 1), new Range32.Ptr(128000, 128062, 1), new Range32.Ptr(128064, 128066, 2), new Range32.Ptr(128067, 128247, 1), new Range32.Ptr(128249, 128252, 1), new Range32.Ptr(128256, 128317, 1), new Range32.Ptr(128320, 128323, 1), new Range32.Ptr(128336, 128359, 1), new Range32.Ptr(128507, 128576, 1), new Range32.Ptr(128581, 128591, 1), new Range32.Ptr(128640, 128709, 1), new Range32.Ptr(128768, 128883, 1)]), 2);
		go$pkg.So = _So;
		_Z = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(32, 160, 128), new Range16.Ptr(5760, 6158, 398), new Range16.Ptr(8192, 8202, 1), new Range16.Ptr(8232, 8233, 1), new Range16.Ptr(8239, 8287, 48), new Range16.Ptr(12288, 12288, 1)]), (go$sliceType(Range32)).nil, 1);
		go$pkg.Z = _Z;
		_Lt = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(453, 459, 3), new Range16.Ptr(498, 8072, 7574), new Range16.Ptr(8073, 8079, 1), new Range16.Ptr(8088, 8095, 1), new Range16.Ptr(8104, 8111, 1), new Range16.Ptr(8124, 8140, 16), new Range16.Ptr(8188, 8188, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Lt = _Lt;
		_Lu = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(192, 214, 1), new Range16.Ptr(216, 222, 1), new Range16.Ptr(256, 310, 2), new Range16.Ptr(313, 327, 2), new Range16.Ptr(330, 376, 2), new Range16.Ptr(377, 381, 2), new Range16.Ptr(385, 386, 1), new Range16.Ptr(388, 390, 2), new Range16.Ptr(391, 393, 2), new Range16.Ptr(394, 395, 1), new Range16.Ptr(398, 401, 1), new Range16.Ptr(403, 404, 1), new Range16.Ptr(406, 408, 1), new Range16.Ptr(412, 413, 1), new Range16.Ptr(415, 416, 1), new Range16.Ptr(418, 422, 2), new Range16.Ptr(423, 425, 2), new Range16.Ptr(428, 430, 2), new Range16.Ptr(431, 433, 2), new Range16.Ptr(434, 435, 1), new Range16.Ptr(437, 439, 2), new Range16.Ptr(440, 444, 4), new Range16.Ptr(452, 461, 3), new Range16.Ptr(463, 475, 2), new Range16.Ptr(478, 494, 2), new Range16.Ptr(497, 500, 3), new Range16.Ptr(502, 504, 1), new Range16.Ptr(506, 562, 2), new Range16.Ptr(570, 571, 1), new Range16.Ptr(573, 574, 1), new Range16.Ptr(577, 579, 2), new Range16.Ptr(580, 582, 1), new Range16.Ptr(584, 590, 2), new Range16.Ptr(880, 882, 2), new Range16.Ptr(886, 902, 16), new Range16.Ptr(904, 906, 1), new Range16.Ptr(908, 910, 2), new Range16.Ptr(911, 913, 2), new Range16.Ptr(914, 929, 1), new Range16.Ptr(931, 939, 1), new Range16.Ptr(975, 978, 3), new Range16.Ptr(979, 980, 1), new Range16.Ptr(984, 1006, 2), new Range16.Ptr(1012, 1015, 3), new Range16.Ptr(1017, 1018, 1), new Range16.Ptr(1021, 1071, 1), new Range16.Ptr(1120, 1152, 2), new Range16.Ptr(1162, 1216, 2), new Range16.Ptr(1217, 1229, 2), new Range16.Ptr(1232, 1318, 2), new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(4256, 4293, 1), new Range16.Ptr(4295, 4301, 6), new Range16.Ptr(7680, 7828, 2), new Range16.Ptr(7838, 7934, 2), new Range16.Ptr(7944, 7951, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7976, 7983, 1), new Range16.Ptr(7992, 7999, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8025, 8031, 2), new Range16.Ptr(8040, 8047, 1), new Range16.Ptr(8120, 8123, 1), new Range16.Ptr(8136, 8139, 1), new Range16.Ptr(8152, 8155, 1), new Range16.Ptr(8168, 8172, 1), new Range16.Ptr(8184, 8187, 1), new Range16.Ptr(8450, 8455, 5), new Range16.Ptr(8459, 8461, 1), new Range16.Ptr(8464, 8466, 1), new Range16.Ptr(8469, 8473, 4), new Range16.Ptr(8474, 8477, 1), new Range16.Ptr(8484, 8490, 2), new Range16.Ptr(8491, 8493, 1), new Range16.Ptr(8496, 8499, 1), new Range16.Ptr(8510, 8511, 1), new Range16.Ptr(8517, 8579, 62), new Range16.Ptr(11264, 11310, 1), new Range16.Ptr(11360, 11362, 2), new Range16.Ptr(11363, 11364, 1), new Range16.Ptr(11367, 11373, 2), new Range16.Ptr(11374, 11376, 1), new Range16.Ptr(11378, 11381, 3), new Range16.Ptr(11390, 11392, 1), new Range16.Ptr(11394, 11490, 2), new Range16.Ptr(11499, 11501, 2), new Range16.Ptr(11506, 42560, 31054), new Range16.Ptr(42562, 42604, 2), new Range16.Ptr(42624, 42646, 2), new Range16.Ptr(42786, 42798, 2), new Range16.Ptr(42802, 42862, 2), new Range16.Ptr(42873, 42877, 2), new Range16.Ptr(42878, 42886, 2), new Range16.Ptr(42891, 42893, 2), new Range16.Ptr(42896, 42898, 2), new Range16.Ptr(42912, 42922, 2), new Range16.Ptr(65313, 65338, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66560, 66599, 1), new Range32.Ptr(119808, 119833, 1), new Range32.Ptr(119860, 119885, 1), new Range32.Ptr(119912, 119937, 1), new Range32.Ptr(119964, 119966, 2), new Range32.Ptr(119967, 119973, 3), new Range32.Ptr(119974, 119977, 3), new Range32.Ptr(119978, 119980, 1), new Range32.Ptr(119982, 119989, 1), new Range32.Ptr(120016, 120041, 1), new Range32.Ptr(120068, 120069, 1), new Range32.Ptr(120071, 120074, 1), new Range32.Ptr(120077, 120084, 1), new Range32.Ptr(120086, 120092, 1), new Range32.Ptr(120120, 120121, 1), new Range32.Ptr(120123, 120126, 1), new Range32.Ptr(120128, 120132, 1), new Range32.Ptr(120134, 120138, 4), new Range32.Ptr(120139, 120144, 1), new Range32.Ptr(120172, 120197, 1), new Range32.Ptr(120224, 120249, 1), new Range32.Ptr(120276, 120301, 1), new Range32.Ptr(120328, 120353, 1), new Range32.Ptr(120380, 120405, 1), new Range32.Ptr(120432, 120457, 1), new Range32.Ptr(120488, 120512, 1), new Range32.Ptr(120546, 120570, 1), new Range32.Ptr(120604, 120628, 1), new Range32.Ptr(120662, 120686, 1), new Range32.Ptr(120720, 120744, 1), new Range32.Ptr(120778, 120778, 1)]), 3);
		go$pkg.Lu = _Lu;
		_Zl = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(8232, 8232, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Zl = _Zl;
		_Zp = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(8233, 8233, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Zp = _Zp;
		var _map, _key;
		go$pkg.Categories = (_map = new Go$Map(), _key = "C", _map[_key] = { k: _key, v: go$pkg.C }, _key = "Cc", _map[_key] = { k: _key, v: go$pkg.Cc }, _key = "Cf", _map[_key] = { k: _key, v: go$pkg.Cf }, _key = "Co", _map[_key] = { k: _key, v: go$pkg.Co }, _key = "Cs", _map[_key] = { k: _key, v: go$pkg.Cs }, _key = "L", _map[_key] = { k: _key, v: go$pkg.L }, _key = "Ll", _map[_key] = { k: _key, v: go$pkg.Ll }, _key = "Lm", _map[_key] = { k: _key, v: go$pkg.Lm }, _key = "Lo", _map[_key] = { k: _key, v: go$pkg.Lo }, _key = "Lt", _map[_key] = { k: _key, v: go$pkg.Lt }, _key = "Lu", _map[_key] = { k: _key, v: go$pkg.Lu }, _key = "M", _map[_key] = { k: _key, v: go$pkg.M }, _key = "Mc", _map[_key] = { k: _key, v: go$pkg.Mc }, _key = "Me", _map[_key] = { k: _key, v: go$pkg.Me }, _key = "Mn", _map[_key] = { k: _key, v: go$pkg.Mn }, _key = "N", _map[_key] = { k: _key, v: go$pkg.N }, _key = "Nd", _map[_key] = { k: _key, v: go$pkg.Nd }, _key = "Nl", _map[_key] = { k: _key, v: go$pkg.Nl }, _key = "No", _map[_key] = { k: _key, v: go$pkg.No }, _key = "P", _map[_key] = { k: _key, v: go$pkg.P }, _key = "Pc", _map[_key] = { k: _key, v: go$pkg.Pc }, _key = "Pd", _map[_key] = { k: _key, v: go$pkg.Pd }, _key = "Pe", _map[_key] = { k: _key, v: go$pkg.Pe }, _key = "Pf", _map[_key] = { k: _key, v: go$pkg.Pf }, _key = "Pi", _map[_key] = { k: _key, v: go$pkg.Pi }, _key = "Po", _map[_key] = { k: _key, v: go$pkg.Po }, _key = "Ps", _map[_key] = { k: _key, v: go$pkg.Ps }, _key = "S", _map[_key] = { k: _key, v: go$pkg.S }, _key = "Sc", _map[_key] = { k: _key, v: go$pkg.Sc }, _key = "Sk", _map[_key] = { k: _key, v: go$pkg.Sk }, _key = "Sm", _map[_key] = { k: _key, v: go$pkg.Sm }, _key = "So", _map[_key] = { k: _key, v: go$pkg.So }, _key = "Z", _map[_key] = { k: _key, v: go$pkg.Z }, _key = "Zl", _map[_key] = { k: _key, v: go$pkg.Zl }, _key = "Zp", _map[_key] = { k: _key, v: go$pkg.Zp }, _key = "Zs", _map[_key] = { k: _key, v: go$pkg.Zs }, _map);
		go$pkg.Digit = _Nd;
		go$pkg.Letter = _L;
		go$pkg.Upper = _Lu;
		_Arabic = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1536, 1540, 1), new Range16.Ptr(1542, 1547, 1), new Range16.Ptr(1549, 1562, 1), new Range16.Ptr(1566, 1566, 1), new Range16.Ptr(1568, 1599, 1), new Range16.Ptr(1601, 1610, 1), new Range16.Ptr(1622, 1631, 1), new Range16.Ptr(1642, 1647, 1), new Range16.Ptr(1649, 1756, 1), new Range16.Ptr(1758, 1791, 1), new Range16.Ptr(1872, 1919, 1), new Range16.Ptr(2208, 2208, 1), new Range16.Ptr(2210, 2220, 1), new Range16.Ptr(2276, 2302, 1), new Range16.Ptr(64336, 64449, 1), new Range16.Ptr(64467, 64829, 1), new Range16.Ptr(64848, 64911, 1), new Range16.Ptr(64914, 64967, 1), new Range16.Ptr(65008, 65020, 1), new Range16.Ptr(65136, 65140, 1), new Range16.Ptr(65142, 65276, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(69216, 69246, 1), new Range32.Ptr(126464, 126467, 1), new Range32.Ptr(126469, 126495, 1), new Range32.Ptr(126497, 126498, 1), new Range32.Ptr(126500, 126500, 1), new Range32.Ptr(126503, 126503, 1), new Range32.Ptr(126505, 126514, 1), new Range32.Ptr(126516, 126519, 1), new Range32.Ptr(126521, 126521, 1), new Range32.Ptr(126523, 126523, 1), new Range32.Ptr(126530, 126530, 1), new Range32.Ptr(126535, 126535, 1), new Range32.Ptr(126537, 126537, 1), new Range32.Ptr(126539, 126539, 1), new Range32.Ptr(126541, 126543, 1), new Range32.Ptr(126545, 126546, 1), new Range32.Ptr(126548, 126548, 1), new Range32.Ptr(126551, 126551, 1), new Range32.Ptr(126553, 126553, 1), new Range32.Ptr(126555, 126555, 1), new Range32.Ptr(126557, 126557, 1), new Range32.Ptr(126559, 126559, 1), new Range32.Ptr(126561, 126562, 1), new Range32.Ptr(126564, 126564, 1), new Range32.Ptr(126567, 126570, 1), new Range32.Ptr(126572, 126578, 1), new Range32.Ptr(126580, 126583, 1), new Range32.Ptr(126585, 126588, 1), new Range32.Ptr(126590, 126590, 1), new Range32.Ptr(126592, 126601, 1), new Range32.Ptr(126603, 126619, 1), new Range32.Ptr(126625, 126627, 1), new Range32.Ptr(126629, 126633, 1), new Range32.Ptr(126635, 126651, 1), new Range32.Ptr(126704, 126705, 1)]), 0);
		go$pkg.Arabic = _Arabic;
		_Armenian = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(1369, 1375, 1), new Range16.Ptr(1377, 1415, 1), new Range16.Ptr(1418, 1418, 1), new Range16.Ptr(1423, 1423, 1), new Range16.Ptr(64275, 64279, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Armenian = _Armenian;
		_Avestan = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(68352, 68405, 1), new Range32.Ptr(68409, 68415, 1)]), 0);
		go$pkg.Avestan = _Avestan;
		_Balinese = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(6912, 6987, 1), new Range16.Ptr(6992, 7036, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Balinese = _Balinese;
		_Bamum = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(42656, 42743, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(92160, 92728, 1)]), 0);
		go$pkg.Bamum = _Bamum;
		_Batak = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(7104, 7155, 1), new Range16.Ptr(7164, 7167, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Batak = _Batak;
		_Bengali = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(2433, 2435, 1), new Range16.Ptr(2437, 2444, 1), new Range16.Ptr(2447, 2448, 1), new Range16.Ptr(2451, 2472, 1), new Range16.Ptr(2474, 2480, 1), new Range16.Ptr(2482, 2482, 1), new Range16.Ptr(2486, 2489, 1), new Range16.Ptr(2492, 2500, 1), new Range16.Ptr(2503, 2504, 1), new Range16.Ptr(2507, 2510, 1), new Range16.Ptr(2519, 2519, 1), new Range16.Ptr(2524, 2525, 1), new Range16.Ptr(2527, 2531, 1), new Range16.Ptr(2534, 2555, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Bengali = _Bengali;
		_Bopomofo = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(746, 747, 1), new Range16.Ptr(12549, 12589, 1), new Range16.Ptr(12704, 12730, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Bopomofo = _Bopomofo;
		_Brahmi = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(69632, 69709, 1), new Range32.Ptr(69714, 69743, 1)]), 0);
		go$pkg.Brahmi = _Brahmi;
		_Braille = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(10240, 10495, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Braille = _Braille;
		_Buginese = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(6656, 6683, 1), new Range16.Ptr(6686, 6687, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Buginese = _Buginese;
		_Buhid = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(5952, 5971, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Buhid = _Buhid;
		_Canadian_Aboriginal = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(5120, 5759, 1), new Range16.Ptr(6320, 6389, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Canadian_Aboriginal = _Canadian_Aboriginal;
		_Carian = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(66208, 66256, 1)]), 0);
		go$pkg.Carian = _Carian;
		_Chakma = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(69888, 69940, 1), new Range32.Ptr(69942, 69955, 1)]), 0);
		go$pkg.Chakma = _Chakma;
		_Cham = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43520, 43574, 1), new Range16.Ptr(43584, 43597, 1), new Range16.Ptr(43600, 43609, 1), new Range16.Ptr(43612, 43615, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Cham = _Cham;
		_Cherokee = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(5024, 5108, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Cherokee = _Cherokee;
		_Common = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(0, 64, 1), new Range16.Ptr(91, 96, 1), new Range16.Ptr(123, 169, 1), new Range16.Ptr(171, 185, 1), new Range16.Ptr(187, 191, 1), new Range16.Ptr(215, 215, 1), new Range16.Ptr(247, 247, 1), new Range16.Ptr(697, 735, 1), new Range16.Ptr(741, 745, 1), new Range16.Ptr(748, 767, 1), new Range16.Ptr(884, 884, 1), new Range16.Ptr(894, 894, 1), new Range16.Ptr(901, 901, 1), new Range16.Ptr(903, 903, 1), new Range16.Ptr(1417, 1417, 1), new Range16.Ptr(1548, 1548, 1), new Range16.Ptr(1563, 1563, 1), new Range16.Ptr(1567, 1567, 1), new Range16.Ptr(1600, 1600, 1), new Range16.Ptr(1632, 1641, 1), new Range16.Ptr(1757, 1757, 1), new Range16.Ptr(2404, 2405, 1), new Range16.Ptr(3647, 3647, 1), new Range16.Ptr(4053, 4056, 1), new Range16.Ptr(4347, 4347, 1), new Range16.Ptr(5867, 5869, 1), new Range16.Ptr(5941, 5942, 1), new Range16.Ptr(6146, 6147, 1), new Range16.Ptr(6149, 6149, 1), new Range16.Ptr(7379, 7379, 1), new Range16.Ptr(7393, 7393, 1), new Range16.Ptr(7401, 7404, 1), new Range16.Ptr(7406, 7411, 1), new Range16.Ptr(7413, 7414, 1), new Range16.Ptr(8192, 8203, 1), new Range16.Ptr(8206, 8292, 1), new Range16.Ptr(8298, 8304, 1), new Range16.Ptr(8308, 8318, 1), new Range16.Ptr(8320, 8334, 1), new Range16.Ptr(8352, 8378, 1), new Range16.Ptr(8448, 8485, 1), new Range16.Ptr(8487, 8489, 1), new Range16.Ptr(8492, 8497, 1), new Range16.Ptr(8499, 8525, 1), new Range16.Ptr(8527, 8543, 1), new Range16.Ptr(8585, 8585, 1), new Range16.Ptr(8592, 9203, 1), new Range16.Ptr(9216, 9254, 1), new Range16.Ptr(9280, 9290, 1), new Range16.Ptr(9312, 9983, 1), new Range16.Ptr(9985, 10239, 1), new Range16.Ptr(10496, 11084, 1), new Range16.Ptr(11088, 11097, 1), new Range16.Ptr(11776, 11835, 1), new Range16.Ptr(12272, 12283, 1), new Range16.Ptr(12288, 12292, 1), new Range16.Ptr(12294, 12294, 1), new Range16.Ptr(12296, 12320, 1), new Range16.Ptr(12336, 12343, 1), new Range16.Ptr(12348, 12351, 1), new Range16.Ptr(12443, 12444, 1), new Range16.Ptr(12448, 12448, 1), new Range16.Ptr(12539, 12540, 1), new Range16.Ptr(12688, 12703, 1), new Range16.Ptr(12736, 12771, 1), new Range16.Ptr(12832, 12895, 1), new Range16.Ptr(12927, 13007, 1), new Range16.Ptr(13144, 13311, 1), new Range16.Ptr(19904, 19967, 1), new Range16.Ptr(42752, 42785, 1), new Range16.Ptr(42888, 42890, 1), new Range16.Ptr(43056, 43065, 1), new Range16.Ptr(64830, 64831, 1), new Range16.Ptr(65021, 65021, 1), new Range16.Ptr(65040, 65049, 1), new Range16.Ptr(65072, 65106, 1), new Range16.Ptr(65108, 65126, 1), new Range16.Ptr(65128, 65131, 1), new Range16.Ptr(65279, 65279, 1), new Range16.Ptr(65281, 65312, 1), new Range16.Ptr(65339, 65344, 1), new Range16.Ptr(65371, 65381, 1), new Range16.Ptr(65392, 65392, 1), new Range16.Ptr(65438, 65439, 1), new Range16.Ptr(65504, 65510, 1), new Range16.Ptr(65512, 65518, 1), new Range16.Ptr(65529, 65533, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65792, 65794, 1), new Range32.Ptr(65799, 65843, 1), new Range32.Ptr(65847, 65855, 1), new Range32.Ptr(65936, 65947, 1), new Range32.Ptr(66000, 66044, 1), new Range32.Ptr(118784, 119029, 1), new Range32.Ptr(119040, 119078, 1), new Range32.Ptr(119081, 119142, 1), new Range32.Ptr(119146, 119162, 1), new Range32.Ptr(119171, 119172, 1), new Range32.Ptr(119180, 119209, 1), new Range32.Ptr(119214, 119261, 1), new Range32.Ptr(119552, 119638, 1), new Range32.Ptr(119648, 119665, 1), new Range32.Ptr(119808, 119892, 1), new Range32.Ptr(119894, 119964, 1), new Range32.Ptr(119966, 119967, 1), new Range32.Ptr(119970, 119970, 1), new Range32.Ptr(119973, 119974, 1), new Range32.Ptr(119977, 119980, 1), new Range32.Ptr(119982, 119993, 1), new Range32.Ptr(119995, 119995, 1), new Range32.Ptr(119997, 120003, 1), new Range32.Ptr(120005, 120069, 1), new Range32.Ptr(120071, 120074, 1), new Range32.Ptr(120077, 120084, 1), new Range32.Ptr(120086, 120092, 1), new Range32.Ptr(120094, 120121, 1), new Range32.Ptr(120123, 120126, 1), new Range32.Ptr(120128, 120132, 1), new Range32.Ptr(120134, 120134, 1), new Range32.Ptr(120138, 120144, 1), new Range32.Ptr(120146, 120485, 1), new Range32.Ptr(120488, 120779, 1), new Range32.Ptr(120782, 120831, 1), new Range32.Ptr(126976, 127019, 1), new Range32.Ptr(127024, 127123, 1), new Range32.Ptr(127136, 127150, 1), new Range32.Ptr(127153, 127166, 1), new Range32.Ptr(127169, 127183, 1), new Range32.Ptr(127185, 127199, 1), new Range32.Ptr(127232, 127242, 1), new Range32.Ptr(127248, 127278, 1), new Range32.Ptr(127280, 127339, 1), new Range32.Ptr(127344, 127386, 1), new Range32.Ptr(127462, 127487, 1), new Range32.Ptr(127489, 127490, 1), new Range32.Ptr(127504, 127546, 1), new Range32.Ptr(127552, 127560, 1), new Range32.Ptr(127568, 127569, 1), new Range32.Ptr(127744, 127776, 1), new Range32.Ptr(127792, 127797, 1), new Range32.Ptr(127799, 127868, 1), new Range32.Ptr(127872, 127891, 1), new Range32.Ptr(127904, 127940, 1), new Range32.Ptr(127942, 127946, 1), new Range32.Ptr(127968, 127984, 1), new Range32.Ptr(128000, 128062, 1), new Range32.Ptr(128064, 128064, 1), new Range32.Ptr(128066, 128247, 1), new Range32.Ptr(128249, 128252, 1), new Range32.Ptr(128256, 128317, 1), new Range32.Ptr(128320, 128323, 1), new Range32.Ptr(128336, 128359, 1), new Range32.Ptr(128507, 128576, 1), new Range32.Ptr(128581, 128591, 1), new Range32.Ptr(128640, 128709, 1), new Range32.Ptr(128768, 128883, 1), new Range32.Ptr(917505, 917505, 1), new Range32.Ptr(917536, 917631, 1)]), 7);
		go$pkg.Common = _Common;
		_Coptic = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(994, 1007, 1), new Range16.Ptr(11392, 11507, 1), new Range16.Ptr(11513, 11519, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Coptic = _Coptic;
		_Cuneiform = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(73728, 74606, 1), new Range32.Ptr(74752, 74850, 1), new Range32.Ptr(74864, 74867, 1)]), 0);
		go$pkg.Cuneiform = _Cuneiform;
		_Cypriot = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(67584, 67589, 1), new Range32.Ptr(67592, 67592, 1), new Range32.Ptr(67594, 67637, 1), new Range32.Ptr(67639, 67640, 1), new Range32.Ptr(67644, 67644, 1), new Range32.Ptr(67647, 67647, 1)]), 0);
		go$pkg.Cypriot = _Cypriot;
		_Cyrillic = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1024, 1156, 1), new Range16.Ptr(1159, 1319, 1), new Range16.Ptr(7467, 7467, 1), new Range16.Ptr(7544, 7544, 1), new Range16.Ptr(11744, 11775, 1), new Range16.Ptr(42560, 42647, 1), new Range16.Ptr(42655, 42655, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Cyrillic = _Cyrillic;
		_Deseret = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(66560, 66639, 1)]), 0);
		go$pkg.Deseret = _Deseret;
		_Devanagari = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(2304, 2384, 1), new Range16.Ptr(2387, 2403, 1), new Range16.Ptr(2406, 2423, 1), new Range16.Ptr(2425, 2431, 1), new Range16.Ptr(43232, 43259, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Devanagari = _Devanagari;
		_Egyptian_Hieroglyphs = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(77824, 78894, 1)]), 0);
		go$pkg.Egyptian_Hieroglyphs = _Egyptian_Hieroglyphs;
		_Ethiopic = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(4608, 4680, 1), new Range16.Ptr(4682, 4685, 1), new Range16.Ptr(4688, 4694, 1), new Range16.Ptr(4696, 4696, 1), new Range16.Ptr(4698, 4701, 1), new Range16.Ptr(4704, 4744, 1), new Range16.Ptr(4746, 4749, 1), new Range16.Ptr(4752, 4784, 1), new Range16.Ptr(4786, 4789, 1), new Range16.Ptr(4792, 4798, 1), new Range16.Ptr(4800, 4800, 1), new Range16.Ptr(4802, 4805, 1), new Range16.Ptr(4808, 4822, 1), new Range16.Ptr(4824, 4880, 1), new Range16.Ptr(4882, 4885, 1), new Range16.Ptr(4888, 4954, 1), new Range16.Ptr(4957, 4988, 1), new Range16.Ptr(4992, 5017, 1), new Range16.Ptr(11648, 11670, 1), new Range16.Ptr(11680, 11686, 1), new Range16.Ptr(11688, 11694, 1), new Range16.Ptr(11696, 11702, 1), new Range16.Ptr(11704, 11710, 1), new Range16.Ptr(11712, 11718, 1), new Range16.Ptr(11720, 11726, 1), new Range16.Ptr(11728, 11734, 1), new Range16.Ptr(11736, 11742, 1), new Range16.Ptr(43777, 43782, 1), new Range16.Ptr(43785, 43790, 1), new Range16.Ptr(43793, 43798, 1), new Range16.Ptr(43808, 43814, 1), new Range16.Ptr(43816, 43822, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Ethiopic = _Ethiopic;
		_Georgian = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(4256, 4293, 1), new Range16.Ptr(4295, 4295, 1), new Range16.Ptr(4301, 4301, 1), new Range16.Ptr(4304, 4346, 1), new Range16.Ptr(4348, 4351, 1), new Range16.Ptr(11520, 11557, 1), new Range16.Ptr(11559, 11559, 1), new Range16.Ptr(11565, 11565, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Georgian = _Georgian;
		_Glagolitic = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(11264, 11310, 1), new Range16.Ptr(11312, 11358, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Glagolitic = _Glagolitic;
		_Gothic = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(66352, 66378, 1)]), 0);
		go$pkg.Gothic = _Gothic;
		_Greek = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(880, 883, 1), new Range16.Ptr(885, 887, 1), new Range16.Ptr(890, 893, 1), new Range16.Ptr(900, 900, 1), new Range16.Ptr(902, 902, 1), new Range16.Ptr(904, 906, 1), new Range16.Ptr(908, 908, 1), new Range16.Ptr(910, 929, 1), new Range16.Ptr(931, 993, 1), new Range16.Ptr(1008, 1023, 1), new Range16.Ptr(7462, 7466, 1), new Range16.Ptr(7517, 7521, 1), new Range16.Ptr(7526, 7530, 1), new Range16.Ptr(7615, 7615, 1), new Range16.Ptr(7936, 7957, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7968, 8005, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8016, 8023, 1), new Range16.Ptr(8025, 8025, 1), new Range16.Ptr(8027, 8027, 1), new Range16.Ptr(8029, 8029, 1), new Range16.Ptr(8031, 8061, 1), new Range16.Ptr(8064, 8116, 1), new Range16.Ptr(8118, 8132, 1), new Range16.Ptr(8134, 8147, 1), new Range16.Ptr(8150, 8155, 1), new Range16.Ptr(8157, 8175, 1), new Range16.Ptr(8178, 8180, 1), new Range16.Ptr(8182, 8190, 1), new Range16.Ptr(8486, 8486, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65856, 65930, 1), new Range32.Ptr(119296, 119365, 1)]), 0);
		go$pkg.Greek = _Greek;
		_Gujarati = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(2689, 2691, 1), new Range16.Ptr(2693, 2701, 1), new Range16.Ptr(2703, 2705, 1), new Range16.Ptr(2707, 2728, 1), new Range16.Ptr(2730, 2736, 1), new Range16.Ptr(2738, 2739, 1), new Range16.Ptr(2741, 2745, 1), new Range16.Ptr(2748, 2757, 1), new Range16.Ptr(2759, 2761, 1), new Range16.Ptr(2763, 2765, 1), new Range16.Ptr(2768, 2768, 1), new Range16.Ptr(2784, 2787, 1), new Range16.Ptr(2790, 2801, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Gujarati = _Gujarati;
		_Gurmukhi = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(2561, 2563, 1), new Range16.Ptr(2565, 2570, 1), new Range16.Ptr(2575, 2576, 1), new Range16.Ptr(2579, 2600, 1), new Range16.Ptr(2602, 2608, 1), new Range16.Ptr(2610, 2611, 1), new Range16.Ptr(2613, 2614, 1), new Range16.Ptr(2616, 2617, 1), new Range16.Ptr(2620, 2620, 1), new Range16.Ptr(2622, 2626, 1), new Range16.Ptr(2631, 2632, 1), new Range16.Ptr(2635, 2637, 1), new Range16.Ptr(2641, 2641, 1), new Range16.Ptr(2649, 2652, 1), new Range16.Ptr(2654, 2654, 1), new Range16.Ptr(2662, 2677, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Gurmukhi = _Gurmukhi;
		_Han = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(11904, 11929, 1), new Range16.Ptr(11931, 12019, 1), new Range16.Ptr(12032, 12245, 1), new Range16.Ptr(12293, 12293, 1), new Range16.Ptr(12295, 12295, 1), new Range16.Ptr(12321, 12329, 1), new Range16.Ptr(12344, 12347, 1), new Range16.Ptr(13312, 19893, 1), new Range16.Ptr(19968, 40908, 1), new Range16.Ptr(63744, 64109, 1), new Range16.Ptr(64112, 64217, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(131072, 173782, 1), new Range32.Ptr(173824, 177972, 1), new Range32.Ptr(177984, 178205, 1), new Range32.Ptr(194560, 195101, 1)]), 0);
		go$pkg.Han = _Han;
		_Hangul = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(4352, 4607, 1), new Range16.Ptr(12334, 12335, 1), new Range16.Ptr(12593, 12686, 1), new Range16.Ptr(12800, 12830, 1), new Range16.Ptr(12896, 12926, 1), new Range16.Ptr(43360, 43388, 1), new Range16.Ptr(44032, 55203, 1), new Range16.Ptr(55216, 55238, 1), new Range16.Ptr(55243, 55291, 1), new Range16.Ptr(65440, 65470, 1), new Range16.Ptr(65474, 65479, 1), new Range16.Ptr(65482, 65487, 1), new Range16.Ptr(65490, 65495, 1), new Range16.Ptr(65498, 65500, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Hangul = _Hangul;
		_Hanunoo = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(5920, 5940, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Hanunoo = _Hanunoo;
		_Hebrew = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1425, 1479, 1), new Range16.Ptr(1488, 1514, 1), new Range16.Ptr(1520, 1524, 1), new Range16.Ptr(64285, 64310, 1), new Range16.Ptr(64312, 64316, 1), new Range16.Ptr(64318, 64318, 1), new Range16.Ptr(64320, 64321, 1), new Range16.Ptr(64323, 64324, 1), new Range16.Ptr(64326, 64335, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Hebrew = _Hebrew;
		_Hiragana = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(12353, 12438, 1), new Range16.Ptr(12445, 12447, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(110593, 110593, 1), new Range32.Ptr(127488, 127488, 1)]), 0);
		go$pkg.Hiragana = _Hiragana;
		_Imperial_Aramaic = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(67648, 67669, 1), new Range32.Ptr(67671, 67679, 1)]), 0);
		go$pkg.Imperial_Aramaic = _Imperial_Aramaic;
		_Inherited = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(768, 879, 1), new Range16.Ptr(1157, 1158, 1), new Range16.Ptr(1611, 1621, 1), new Range16.Ptr(1648, 1648, 1), new Range16.Ptr(2385, 2386, 1), new Range16.Ptr(7376, 7378, 1), new Range16.Ptr(7380, 7392, 1), new Range16.Ptr(7394, 7400, 1), new Range16.Ptr(7405, 7405, 1), new Range16.Ptr(7412, 7412, 1), new Range16.Ptr(7616, 7654, 1), new Range16.Ptr(7676, 7679, 1), new Range16.Ptr(8204, 8205, 1), new Range16.Ptr(8400, 8432, 1), new Range16.Ptr(12330, 12333, 1), new Range16.Ptr(12441, 12442, 1), new Range16.Ptr(65024, 65039, 1), new Range16.Ptr(65056, 65062, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66045, 66045, 1), new Range32.Ptr(119143, 119145, 1), new Range32.Ptr(119163, 119170, 1), new Range32.Ptr(119173, 119179, 1), new Range32.Ptr(119210, 119213, 1), new Range32.Ptr(917760, 917999, 1)]), 0);
		go$pkg.Inherited = _Inherited;
		_Inscriptional_Pahlavi = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(68448, 68466, 1), new Range32.Ptr(68472, 68479, 1)]), 0);
		go$pkg.Inscriptional_Pahlavi = _Inscriptional_Pahlavi;
		_Inscriptional_Parthian = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(68416, 68437, 1), new Range32.Ptr(68440, 68447, 1)]), 0);
		go$pkg.Inscriptional_Parthian = _Inscriptional_Parthian;
		_Javanese = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43392, 43469, 1), new Range16.Ptr(43471, 43481, 1), new Range16.Ptr(43486, 43487, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Javanese = _Javanese;
		_Kaithi = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(69760, 69825, 1)]), 0);
		go$pkg.Kaithi = _Kaithi;
		_Kannada = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(3202, 3203, 1), new Range16.Ptr(3205, 3212, 1), new Range16.Ptr(3214, 3216, 1), new Range16.Ptr(3218, 3240, 1), new Range16.Ptr(3242, 3251, 1), new Range16.Ptr(3253, 3257, 1), new Range16.Ptr(3260, 3268, 1), new Range16.Ptr(3270, 3272, 1), new Range16.Ptr(3274, 3277, 1), new Range16.Ptr(3285, 3286, 1), new Range16.Ptr(3294, 3294, 1), new Range16.Ptr(3296, 3299, 1), new Range16.Ptr(3302, 3311, 1), new Range16.Ptr(3313, 3314, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Kannada = _Kannada;
		_Katakana = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(12449, 12538, 1), new Range16.Ptr(12541, 12543, 1), new Range16.Ptr(12784, 12799, 1), new Range16.Ptr(13008, 13054, 1), new Range16.Ptr(13056, 13143, 1), new Range16.Ptr(65382, 65391, 1), new Range16.Ptr(65393, 65437, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(110592, 110592, 1)]), 0);
		go$pkg.Katakana = _Katakana;
		_Kayah_Li = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43264, 43311, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Kayah_Li = _Kayah_Li;
		_Kharoshthi = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(68096, 68099, 1), new Range32.Ptr(68101, 68102, 1), new Range32.Ptr(68108, 68115, 1), new Range32.Ptr(68117, 68119, 1), new Range32.Ptr(68121, 68147, 1), new Range32.Ptr(68152, 68154, 1), new Range32.Ptr(68159, 68167, 1), new Range32.Ptr(68176, 68184, 1)]), 0);
		go$pkg.Kharoshthi = _Kharoshthi;
		_Khmer = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(6016, 6109, 1), new Range16.Ptr(6112, 6121, 1), new Range16.Ptr(6128, 6137, 1), new Range16.Ptr(6624, 6655, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Khmer = _Khmer;
		_Lao = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(3713, 3714, 1), new Range16.Ptr(3716, 3716, 1), new Range16.Ptr(3719, 3720, 1), new Range16.Ptr(3722, 3722, 1), new Range16.Ptr(3725, 3725, 1), new Range16.Ptr(3732, 3735, 1), new Range16.Ptr(3737, 3743, 1), new Range16.Ptr(3745, 3747, 1), new Range16.Ptr(3749, 3749, 1), new Range16.Ptr(3751, 3751, 1), new Range16.Ptr(3754, 3755, 1), new Range16.Ptr(3757, 3769, 1), new Range16.Ptr(3771, 3773, 1), new Range16.Ptr(3776, 3780, 1), new Range16.Ptr(3782, 3782, 1), new Range16.Ptr(3784, 3789, 1), new Range16.Ptr(3792, 3801, 1), new Range16.Ptr(3804, 3807, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Lao = _Lao;
		_Latin = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(97, 122, 1), new Range16.Ptr(170, 170, 1), new Range16.Ptr(186, 186, 1), new Range16.Ptr(192, 214, 1), new Range16.Ptr(216, 246, 1), new Range16.Ptr(248, 696, 1), new Range16.Ptr(736, 740, 1), new Range16.Ptr(7424, 7461, 1), new Range16.Ptr(7468, 7516, 1), new Range16.Ptr(7522, 7525, 1), new Range16.Ptr(7531, 7543, 1), new Range16.Ptr(7545, 7614, 1), new Range16.Ptr(7680, 7935, 1), new Range16.Ptr(8305, 8305, 1), new Range16.Ptr(8319, 8319, 1), new Range16.Ptr(8336, 8348, 1), new Range16.Ptr(8490, 8491, 1), new Range16.Ptr(8498, 8498, 1), new Range16.Ptr(8526, 8526, 1), new Range16.Ptr(8544, 8584, 1), new Range16.Ptr(11360, 11391, 1), new Range16.Ptr(42786, 42887, 1), new Range16.Ptr(42891, 42894, 1), new Range16.Ptr(42896, 42899, 1), new Range16.Ptr(42912, 42922, 1), new Range16.Ptr(43000, 43007, 1), new Range16.Ptr(64256, 64262, 1), new Range16.Ptr(65313, 65338, 1), new Range16.Ptr(65345, 65370, 1)]), (go$sliceType(Range32)).nil, 6);
		go$pkg.Latin = _Latin;
		_Lepcha = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(7168, 7223, 1), new Range16.Ptr(7227, 7241, 1), new Range16.Ptr(7245, 7247, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Lepcha = _Lepcha;
		_Limbu = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(6400, 6428, 1), new Range16.Ptr(6432, 6443, 1), new Range16.Ptr(6448, 6459, 1), new Range16.Ptr(6464, 6464, 1), new Range16.Ptr(6468, 6479, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Limbu = _Limbu;
		_Linear_B = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(65536, 65547, 1), new Range32.Ptr(65549, 65574, 1), new Range32.Ptr(65576, 65594, 1), new Range32.Ptr(65596, 65597, 1), new Range32.Ptr(65599, 65613, 1), new Range32.Ptr(65616, 65629, 1), new Range32.Ptr(65664, 65786, 1)]), 0);
		go$pkg.Linear_B = _Linear_B;
		_Lisu = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(42192, 42239, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Lisu = _Lisu;
		_Lycian = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(66176, 66204, 1)]), 0);
		go$pkg.Lycian = _Lycian;
		_Lydian = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(67872, 67897, 1), new Range32.Ptr(67903, 67903, 1)]), 0);
		go$pkg.Lydian = _Lydian;
		_Malayalam = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(3330, 3331, 1), new Range16.Ptr(3333, 3340, 1), new Range16.Ptr(3342, 3344, 1), new Range16.Ptr(3346, 3386, 1), new Range16.Ptr(3389, 3396, 1), new Range16.Ptr(3398, 3400, 1), new Range16.Ptr(3402, 3406, 1), new Range16.Ptr(3415, 3415, 1), new Range16.Ptr(3424, 3427, 1), new Range16.Ptr(3430, 3445, 1), new Range16.Ptr(3449, 3455, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Malayalam = _Malayalam;
		_Mandaic = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(2112, 2139, 1), new Range16.Ptr(2142, 2142, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Mandaic = _Mandaic;
		_Meetei_Mayek = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43744, 43766, 1), new Range16.Ptr(43968, 44013, 1), new Range16.Ptr(44016, 44025, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Meetei_Mayek = _Meetei_Mayek;
		_Meroitic_Cursive = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(68000, 68023, 1), new Range32.Ptr(68030, 68031, 1)]), 0);
		go$pkg.Meroitic_Cursive = _Meroitic_Cursive;
		_Meroitic_Hieroglyphs = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(67968, 67999, 1)]), 0);
		go$pkg.Meroitic_Hieroglyphs = _Meroitic_Hieroglyphs;
		_Miao = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(93952, 94020, 1), new Range32.Ptr(94032, 94078, 1), new Range32.Ptr(94095, 94111, 1)]), 0);
		go$pkg.Miao = _Miao;
		_Mongolian = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(6144, 6145, 1), new Range16.Ptr(6148, 6148, 1), new Range16.Ptr(6150, 6158, 1), new Range16.Ptr(6160, 6169, 1), new Range16.Ptr(6176, 6263, 1), new Range16.Ptr(6272, 6314, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Mongolian = _Mongolian;
		_Myanmar = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(4096, 4255, 1), new Range16.Ptr(43616, 43643, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Myanmar = _Myanmar;
		_New_Tai_Lue = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(6528, 6571, 1), new Range16.Ptr(6576, 6601, 1), new Range16.Ptr(6608, 6618, 1), new Range16.Ptr(6622, 6623, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.New_Tai_Lue = _New_Tai_Lue;
		_Nko = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1984, 2042, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Nko = _Nko;
		_Ogham = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(5760, 5788, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Ogham = _Ogham;
		_Ol_Chiki = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(7248, 7295, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Ol_Chiki = _Ol_Chiki;
		_Old_Italic = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(66304, 66334, 1), new Range32.Ptr(66336, 66339, 1)]), 0);
		go$pkg.Old_Italic = _Old_Italic;
		_Old_Persian = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(66464, 66499, 1), new Range32.Ptr(66504, 66517, 1)]), 0);
		go$pkg.Old_Persian = _Old_Persian;
		_Old_South_Arabian = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(68192, 68223, 1)]), 0);
		go$pkg.Old_South_Arabian = _Old_South_Arabian;
		_Old_Turkic = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(68608, 68680, 1)]), 0);
		go$pkg.Old_Turkic = _Old_Turkic;
		_Oriya = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(2817, 2819, 1), new Range16.Ptr(2821, 2828, 1), new Range16.Ptr(2831, 2832, 1), new Range16.Ptr(2835, 2856, 1), new Range16.Ptr(2858, 2864, 1), new Range16.Ptr(2866, 2867, 1), new Range16.Ptr(2869, 2873, 1), new Range16.Ptr(2876, 2884, 1), new Range16.Ptr(2887, 2888, 1), new Range16.Ptr(2891, 2893, 1), new Range16.Ptr(2902, 2903, 1), new Range16.Ptr(2908, 2909, 1), new Range16.Ptr(2911, 2915, 1), new Range16.Ptr(2918, 2935, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Oriya = _Oriya;
		_Osmanya = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(66688, 66717, 1), new Range32.Ptr(66720, 66729, 1)]), 0);
		go$pkg.Osmanya = _Osmanya;
		_Phags_Pa = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43072, 43127, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Phags_Pa = _Phags_Pa;
		_Phoenician = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(67840, 67867, 1), new Range32.Ptr(67871, 67871, 1)]), 0);
		go$pkg.Phoenician = _Phoenician;
		_Rejang = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43312, 43347, 1), new Range16.Ptr(43359, 43359, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Rejang = _Rejang;
		_Runic = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(5792, 5866, 1), new Range16.Ptr(5870, 5872, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Runic = _Runic;
		_Samaritan = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(2048, 2093, 1), new Range16.Ptr(2096, 2110, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Samaritan = _Samaritan;
		_Saurashtra = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43136, 43204, 1), new Range16.Ptr(43214, 43225, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Saurashtra = _Saurashtra;
		_Sharada = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(70016, 70088, 1), new Range32.Ptr(70096, 70105, 1)]), 0);
		go$pkg.Sharada = _Sharada;
		_Shavian = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(66640, 66687, 1)]), 0);
		go$pkg.Shavian = _Shavian;
		_Sinhala = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(3458, 3459, 1), new Range16.Ptr(3461, 3478, 1), new Range16.Ptr(3482, 3505, 1), new Range16.Ptr(3507, 3515, 1), new Range16.Ptr(3517, 3517, 1), new Range16.Ptr(3520, 3526, 1), new Range16.Ptr(3530, 3530, 1), new Range16.Ptr(3535, 3540, 1), new Range16.Ptr(3542, 3542, 1), new Range16.Ptr(3544, 3551, 1), new Range16.Ptr(3570, 3572, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Sinhala = _Sinhala;
		_Sora_Sompeng = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(69840, 69864, 1), new Range32.Ptr(69872, 69881, 1)]), 0);
		go$pkg.Sora_Sompeng = _Sora_Sompeng;
		_Sundanese = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(7040, 7103, 1), new Range16.Ptr(7360, 7367, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Sundanese = _Sundanese;
		_Syloti_Nagri = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43008, 43051, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Syloti_Nagri = _Syloti_Nagri;
		_Syriac = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1792, 1805, 1), new Range16.Ptr(1807, 1866, 1), new Range16.Ptr(1869, 1871, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Syriac = _Syriac;
		_Tagalog = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(5888, 5900, 1), new Range16.Ptr(5902, 5908, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Tagalog = _Tagalog;
		_Tagbanwa = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(5984, 5996, 1), new Range16.Ptr(5998, 6000, 1), new Range16.Ptr(6002, 6003, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Tagbanwa = _Tagbanwa;
		_Tai_Le = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(6480, 6509, 1), new Range16.Ptr(6512, 6516, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Tai_Le = _Tai_Le;
		_Tai_Tham = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(6688, 6750, 1), new Range16.Ptr(6752, 6780, 1), new Range16.Ptr(6783, 6793, 1), new Range16.Ptr(6800, 6809, 1), new Range16.Ptr(6816, 6829, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Tai_Tham = _Tai_Tham;
		_Tai_Viet = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(43648, 43714, 1), new Range16.Ptr(43739, 43743, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Tai_Viet = _Tai_Viet;
		_Takri = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(71296, 71351, 1), new Range32.Ptr(71360, 71369, 1)]), 0);
		go$pkg.Takri = _Takri;
		_Tamil = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(2946, 2947, 1), new Range16.Ptr(2949, 2954, 1), new Range16.Ptr(2958, 2960, 1), new Range16.Ptr(2962, 2965, 1), new Range16.Ptr(2969, 2970, 1), new Range16.Ptr(2972, 2972, 1), new Range16.Ptr(2974, 2975, 1), new Range16.Ptr(2979, 2980, 1), new Range16.Ptr(2984, 2986, 1), new Range16.Ptr(2990, 3001, 1), new Range16.Ptr(3006, 3010, 1), new Range16.Ptr(3014, 3016, 1), new Range16.Ptr(3018, 3021, 1), new Range16.Ptr(3024, 3024, 1), new Range16.Ptr(3031, 3031, 1), new Range16.Ptr(3046, 3066, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Tamil = _Tamil;
		_Telugu = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(3073, 3075, 1), new Range16.Ptr(3077, 3084, 1), new Range16.Ptr(3086, 3088, 1), new Range16.Ptr(3090, 3112, 1), new Range16.Ptr(3114, 3123, 1), new Range16.Ptr(3125, 3129, 1), new Range16.Ptr(3133, 3140, 1), new Range16.Ptr(3142, 3144, 1), new Range16.Ptr(3146, 3149, 1), new Range16.Ptr(3157, 3158, 1), new Range16.Ptr(3160, 3161, 1), new Range16.Ptr(3168, 3171, 1), new Range16.Ptr(3174, 3183, 1), new Range16.Ptr(3192, 3199, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Telugu = _Telugu;
		_Thaana = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(1920, 1969, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Thaana = _Thaana;
		_Thai = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(3585, 3642, 1), new Range16.Ptr(3648, 3675, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Thai = _Thai;
		_Tibetan = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(3840, 3911, 1), new Range16.Ptr(3913, 3948, 1), new Range16.Ptr(3953, 3991, 1), new Range16.Ptr(3993, 4028, 1), new Range16.Ptr(4030, 4044, 1), new Range16.Ptr(4046, 4052, 1), new Range16.Ptr(4057, 4058, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Tibetan = _Tibetan;
		_Tifinagh = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(11568, 11623, 1), new Range16.Ptr(11631, 11632, 1), new Range16.Ptr(11647, 11647, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Tifinagh = _Tifinagh;
		_Ugaritic = new RangeTable.Ptr(new (go$sliceType(Range16))([]), new (go$sliceType(Range32))([new Range32.Ptr(66432, 66461, 1), new Range32.Ptr(66463, 66463, 1)]), 0);
		go$pkg.Ugaritic = _Ugaritic;
		_Vai = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(42240, 42539, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Vai = _Vai;
		_Yi = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(40960, 42124, 1), new Range16.Ptr(42128, 42182, 1)]), (go$sliceType(Range32)).nil, 0);
		go$pkg.Yi = _Yi;
		var _map$1, _key$1;
		go$pkg.Scripts = (_map$1 = new Go$Map(), _key$1 = "Arabic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Arabic }, _key$1 = "Armenian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Armenian }, _key$1 = "Avestan", _map$1[_key$1] = { k: _key$1, v: go$pkg.Avestan }, _key$1 = "Balinese", _map$1[_key$1] = { k: _key$1, v: go$pkg.Balinese }, _key$1 = "Bamum", _map$1[_key$1] = { k: _key$1, v: go$pkg.Bamum }, _key$1 = "Batak", _map$1[_key$1] = { k: _key$1, v: go$pkg.Batak }, _key$1 = "Bengali", _map$1[_key$1] = { k: _key$1, v: go$pkg.Bengali }, _key$1 = "Bopomofo", _map$1[_key$1] = { k: _key$1, v: go$pkg.Bopomofo }, _key$1 = "Brahmi", _map$1[_key$1] = { k: _key$1, v: go$pkg.Brahmi }, _key$1 = "Braille", _map$1[_key$1] = { k: _key$1, v: go$pkg.Braille }, _key$1 = "Buginese", _map$1[_key$1] = { k: _key$1, v: go$pkg.Buginese }, _key$1 = "Buhid", _map$1[_key$1] = { k: _key$1, v: go$pkg.Buhid }, _key$1 = "Canadian_Aboriginal", _map$1[_key$1] = { k: _key$1, v: go$pkg.Canadian_Aboriginal }, _key$1 = "Carian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Carian }, _key$1 = "Chakma", _map$1[_key$1] = { k: _key$1, v: go$pkg.Chakma }, _key$1 = "Cham", _map$1[_key$1] = { k: _key$1, v: go$pkg.Cham }, _key$1 = "Cherokee", _map$1[_key$1] = { k: _key$1, v: go$pkg.Cherokee }, _key$1 = "Common", _map$1[_key$1] = { k: _key$1, v: go$pkg.Common }, _key$1 = "Coptic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Coptic }, _key$1 = "Cuneiform", _map$1[_key$1] = { k: _key$1, v: go$pkg.Cuneiform }, _key$1 = "Cypriot", _map$1[_key$1] = { k: _key$1, v: go$pkg.Cypriot }, _key$1 = "Cyrillic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Cyrillic }, _key$1 = "Deseret", _map$1[_key$1] = { k: _key$1, v: go$pkg.Deseret }, _key$1 = "Devanagari", _map$1[_key$1] = { k: _key$1, v: go$pkg.Devanagari }, _key$1 = "Egyptian_Hieroglyphs", _map$1[_key$1] = { k: _key$1, v: go$pkg.Egyptian_Hieroglyphs }, _key$1 = "Ethiopic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Ethiopic }, _key$1 = "Georgian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Georgian }, _key$1 = "Glagolitic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Glagolitic }, _key$1 = "Gothic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Gothic }, _key$1 = "Greek", _map$1[_key$1] = { k: _key$1, v: go$pkg.Greek }, _key$1 = "Gujarati", _map$1[_key$1] = { k: _key$1, v: go$pkg.Gujarati }, _key$1 = "Gurmukhi", _map$1[_key$1] = { k: _key$1, v: go$pkg.Gurmukhi }, _key$1 = "Han", _map$1[_key$1] = { k: _key$1, v: go$pkg.Han }, _key$1 = "Hangul", _map$1[_key$1] = { k: _key$1, v: go$pkg.Hangul }, _key$1 = "Hanunoo", _map$1[_key$1] = { k: _key$1, v: go$pkg.Hanunoo }, _key$1 = "Hebrew", _map$1[_key$1] = { k: _key$1, v: go$pkg.Hebrew }, _key$1 = "Hiragana", _map$1[_key$1] = { k: _key$1, v: go$pkg.Hiragana }, _key$1 = "Imperial_Aramaic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Imperial_Aramaic }, _key$1 = "Inherited", _map$1[_key$1] = { k: _key$1, v: go$pkg.Inherited }, _key$1 = "Inscriptional_Pahlavi", _map$1[_key$1] = { k: _key$1, v: go$pkg.Inscriptional_Pahlavi }, _key$1 = "Inscriptional_Parthian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Inscriptional_Parthian }, _key$1 = "Javanese", _map$1[_key$1] = { k: _key$1, v: go$pkg.Javanese }, _key$1 = "Kaithi", _map$1[_key$1] = { k: _key$1, v: go$pkg.Kaithi }, _key$1 = "Kannada", _map$1[_key$1] = { k: _key$1, v: go$pkg.Kannada }, _key$1 = "Katakana", _map$1[_key$1] = { k: _key$1, v: go$pkg.Katakana }, _key$1 = "Kayah_Li", _map$1[_key$1] = { k: _key$1, v: go$pkg.Kayah_Li }, _key$1 = "Kharoshthi", _map$1[_key$1] = { k: _key$1, v: go$pkg.Kharoshthi }, _key$1 = "Khmer", _map$1[_key$1] = { k: _key$1, v: go$pkg.Khmer }, _key$1 = "Lao", _map$1[_key$1] = { k: _key$1, v: go$pkg.Lao }, _key$1 = "Latin", _map$1[_key$1] = { k: _key$1, v: go$pkg.Latin }, _key$1 = "Lepcha", _map$1[_key$1] = { k: _key$1, v: go$pkg.Lepcha }, _key$1 = "Limbu", _map$1[_key$1] = { k: _key$1, v: go$pkg.Limbu }, _key$1 = "Linear_B", _map$1[_key$1] = { k: _key$1, v: go$pkg.Linear_B }, _key$1 = "Lisu", _map$1[_key$1] = { k: _key$1, v: go$pkg.Lisu }, _key$1 = "Lycian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Lycian }, _key$1 = "Lydian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Lydian }, _key$1 = "Malayalam", _map$1[_key$1] = { k: _key$1, v: go$pkg.Malayalam }, _key$1 = "Mandaic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Mandaic }, _key$1 = "Meetei_Mayek", _map$1[_key$1] = { k: _key$1, v: go$pkg.Meetei_Mayek }, _key$1 = "Meroitic_Cursive", _map$1[_key$1] = { k: _key$1, v: go$pkg.Meroitic_Cursive }, _key$1 = "Meroitic_Hieroglyphs", _map$1[_key$1] = { k: _key$1, v: go$pkg.Meroitic_Hieroglyphs }, _key$1 = "Miao", _map$1[_key$1] = { k: _key$1, v: go$pkg.Miao }, _key$1 = "Mongolian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Mongolian }, _key$1 = "Myanmar", _map$1[_key$1] = { k: _key$1, v: go$pkg.Myanmar }, _key$1 = "New_Tai_Lue", _map$1[_key$1] = { k: _key$1, v: go$pkg.New_Tai_Lue }, _key$1 = "Nko", _map$1[_key$1] = { k: _key$1, v: go$pkg.Nko }, _key$1 = "Ogham", _map$1[_key$1] = { k: _key$1, v: go$pkg.Ogham }, _key$1 = "Ol_Chiki", _map$1[_key$1] = { k: _key$1, v: go$pkg.Ol_Chiki }, _key$1 = "Old_Italic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Old_Italic }, _key$1 = "Old_Persian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Old_Persian }, _key$1 = "Old_South_Arabian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Old_South_Arabian }, _key$1 = "Old_Turkic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Old_Turkic }, _key$1 = "Oriya", _map$1[_key$1] = { k: _key$1, v: go$pkg.Oriya }, _key$1 = "Osmanya", _map$1[_key$1] = { k: _key$1, v: go$pkg.Osmanya }, _key$1 = "Phags_Pa", _map$1[_key$1] = { k: _key$1, v: go$pkg.Phags_Pa }, _key$1 = "Phoenician", _map$1[_key$1] = { k: _key$1, v: go$pkg.Phoenician }, _key$1 = "Rejang", _map$1[_key$1] = { k: _key$1, v: go$pkg.Rejang }, _key$1 = "Runic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Runic }, _key$1 = "Samaritan", _map$1[_key$1] = { k: _key$1, v: go$pkg.Samaritan }, _key$1 = "Saurashtra", _map$1[_key$1] = { k: _key$1, v: go$pkg.Saurashtra }, _key$1 = "Sharada", _map$1[_key$1] = { k: _key$1, v: go$pkg.Sharada }, _key$1 = "Shavian", _map$1[_key$1] = { k: _key$1, v: go$pkg.Shavian }, _key$1 = "Sinhala", _map$1[_key$1] = { k: _key$1, v: go$pkg.Sinhala }, _key$1 = "Sora_Sompeng", _map$1[_key$1] = { k: _key$1, v: go$pkg.Sora_Sompeng }, _key$1 = "Sundanese", _map$1[_key$1] = { k: _key$1, v: go$pkg.Sundanese }, _key$1 = "Syloti_Nagri", _map$1[_key$1] = { k: _key$1, v: go$pkg.Syloti_Nagri }, _key$1 = "Syriac", _map$1[_key$1] = { k: _key$1, v: go$pkg.Syriac }, _key$1 = "Tagalog", _map$1[_key$1] = { k: _key$1, v: go$pkg.Tagalog }, _key$1 = "Tagbanwa", _map$1[_key$1] = { k: _key$1, v: go$pkg.Tagbanwa }, _key$1 = "Tai_Le", _map$1[_key$1] = { k: _key$1, v: go$pkg.Tai_Le }, _key$1 = "Tai_Tham", _map$1[_key$1] = { k: _key$1, v: go$pkg.Tai_Tham }, _key$1 = "Tai_Viet", _map$1[_key$1] = { k: _key$1, v: go$pkg.Tai_Viet }, _key$1 = "Takri", _map$1[_key$1] = { k: _key$1, v: go$pkg.Takri }, _key$1 = "Tamil", _map$1[_key$1] = { k: _key$1, v: go$pkg.Tamil }, _key$1 = "Telugu", _map$1[_key$1] = { k: _key$1, v: go$pkg.Telugu }, _key$1 = "Thaana", _map$1[_key$1] = { k: _key$1, v: go$pkg.Thaana }, _key$1 = "Thai", _map$1[_key$1] = { k: _key$1, v: go$pkg.Thai }, _key$1 = "Tibetan", _map$1[_key$1] = { k: _key$1, v: go$pkg.Tibetan }, _key$1 = "Tifinagh", _map$1[_key$1] = { k: _key$1, v: go$pkg.Tifinagh }, _key$1 = "Ugaritic", _map$1[_key$1] = { k: _key$1, v: go$pkg.Ugaritic }, _key$1 = "Vai", _map$1[_key$1] = { k: _key$1, v: go$pkg.Vai }, _key$1 = "Yi", _map$1[_key$1] = { k: _key$1, v: go$pkg.Yi }, _map$1);
		_White_Space = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(9, 13, 1), new Range16.Ptr(32, 32, 1), new Range16.Ptr(133, 133, 1), new Range16.Ptr(160, 160, 1), new Range16.Ptr(5760, 5760, 1), new Range16.Ptr(6158, 6158, 1), new Range16.Ptr(8192, 8202, 1), new Range16.Ptr(8232, 8233, 1), new Range16.Ptr(8239, 8239, 1), new Range16.Ptr(8287, 8287, 1), new Range16.Ptr(12288, 12288, 1)]), (go$sliceType(Range32)).nil, 4);
		go$pkg.White_Space = _White_Space;
		_CaseRanges = new (go$sliceType(CaseRange))([new CaseRange.Ptr(65, 90, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(97, 122, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(181, 181, go$toNativeArray("Int32", [743, 0, 743])), new CaseRange.Ptr(192, 214, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(216, 222, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(224, 246, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(248, 254, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(255, 255, go$toNativeArray("Int32", [121, 0, 121])), new CaseRange.Ptr(256, 303, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(304, 304, go$toNativeArray("Int32", [0, -199, 0])), new CaseRange.Ptr(305, 305, go$toNativeArray("Int32", [-232, 0, -232])), new CaseRange.Ptr(306, 311, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(313, 328, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(330, 375, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(376, 376, go$toNativeArray("Int32", [0, -121, 0])), new CaseRange.Ptr(377, 382, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(383, 383, go$toNativeArray("Int32", [-300, 0, -300])), new CaseRange.Ptr(384, 384, go$toNativeArray("Int32", [195, 0, 195])), new CaseRange.Ptr(385, 385, go$toNativeArray("Int32", [0, 210, 0])), new CaseRange.Ptr(386, 389, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(390, 390, go$toNativeArray("Int32", [0, 206, 0])), new CaseRange.Ptr(391, 392, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(393, 394, go$toNativeArray("Int32", [0, 205, 0])), new CaseRange.Ptr(395, 396, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(398, 398, go$toNativeArray("Int32", [0, 79, 0])), new CaseRange.Ptr(399, 399, go$toNativeArray("Int32", [0, 202, 0])), new CaseRange.Ptr(400, 400, go$toNativeArray("Int32", [0, 203, 0])), new CaseRange.Ptr(401, 402, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(403, 403, go$toNativeArray("Int32", [0, 205, 0])), new CaseRange.Ptr(404, 404, go$toNativeArray("Int32", [0, 207, 0])), new CaseRange.Ptr(405, 405, go$toNativeArray("Int32", [97, 0, 97])), new CaseRange.Ptr(406, 406, go$toNativeArray("Int32", [0, 211, 0])), new CaseRange.Ptr(407, 407, go$toNativeArray("Int32", [0, 209, 0])), new CaseRange.Ptr(408, 409, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(410, 410, go$toNativeArray("Int32", [163, 0, 163])), new CaseRange.Ptr(412, 412, go$toNativeArray("Int32", [0, 211, 0])), new CaseRange.Ptr(413, 413, go$toNativeArray("Int32", [0, 213, 0])), new CaseRange.Ptr(414, 414, go$toNativeArray("Int32", [130, 0, 130])), new CaseRange.Ptr(415, 415, go$toNativeArray("Int32", [0, 214, 0])), new CaseRange.Ptr(416, 421, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(422, 422, go$toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(423, 424, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(425, 425, go$toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(428, 429, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(430, 430, go$toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(431, 432, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(433, 434, go$toNativeArray("Int32", [0, 217, 0])), new CaseRange.Ptr(435, 438, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(439, 439, go$toNativeArray("Int32", [0, 219, 0])), new CaseRange.Ptr(440, 441, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(444, 445, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(447, 447, go$toNativeArray("Int32", [56, 0, 56])), new CaseRange.Ptr(452, 452, go$toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(453, 453, go$toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(454, 454, go$toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(455, 455, go$toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(456, 456, go$toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(457, 457, go$toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(458, 458, go$toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(459, 459, go$toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(460, 460, go$toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(461, 476, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(477, 477, go$toNativeArray("Int32", [-79, 0, -79])), new CaseRange.Ptr(478, 495, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(497, 497, go$toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(498, 498, go$toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(499, 499, go$toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(500, 501, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(502, 502, go$toNativeArray("Int32", [0, -97, 0])), new CaseRange.Ptr(503, 503, go$toNativeArray("Int32", [0, -56, 0])), new CaseRange.Ptr(504, 543, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(544, 544, go$toNativeArray("Int32", [0, -130, 0])), new CaseRange.Ptr(546, 563, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(570, 570, go$toNativeArray("Int32", [0, 10795, 0])), new CaseRange.Ptr(571, 572, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(573, 573, go$toNativeArray("Int32", [0, -163, 0])), new CaseRange.Ptr(574, 574, go$toNativeArray("Int32", [0, 10792, 0])), new CaseRange.Ptr(575, 576, go$toNativeArray("Int32", [10815, 0, 10815])), new CaseRange.Ptr(577, 578, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(579, 579, go$toNativeArray("Int32", [0, -195, 0])), new CaseRange.Ptr(580, 580, go$toNativeArray("Int32", [0, 69, 0])), new CaseRange.Ptr(581, 581, go$toNativeArray("Int32", [0, 71, 0])), new CaseRange.Ptr(582, 591, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(592, 592, go$toNativeArray("Int32", [10783, 0, 10783])), new CaseRange.Ptr(593, 593, go$toNativeArray("Int32", [10780, 0, 10780])), new CaseRange.Ptr(594, 594, go$toNativeArray("Int32", [10782, 0, 10782])), new CaseRange.Ptr(595, 595, go$toNativeArray("Int32", [-210, 0, -210])), new CaseRange.Ptr(596, 596, go$toNativeArray("Int32", [-206, 0, -206])), new CaseRange.Ptr(598, 599, go$toNativeArray("Int32", [-205, 0, -205])), new CaseRange.Ptr(601, 601, go$toNativeArray("Int32", [-202, 0, -202])), new CaseRange.Ptr(603, 603, go$toNativeArray("Int32", [-203, 0, -203])), new CaseRange.Ptr(608, 608, go$toNativeArray("Int32", [-205, 0, -205])), new CaseRange.Ptr(611, 611, go$toNativeArray("Int32", [-207, 0, -207])), new CaseRange.Ptr(613, 613, go$toNativeArray("Int32", [42280, 0, 42280])), new CaseRange.Ptr(614, 614, go$toNativeArray("Int32", [42308, 0, 42308])), new CaseRange.Ptr(616, 616, go$toNativeArray("Int32", [-209, 0, -209])), new CaseRange.Ptr(617, 617, go$toNativeArray("Int32", [-211, 0, -211])), new CaseRange.Ptr(619, 619, go$toNativeArray("Int32", [10743, 0, 10743])), new CaseRange.Ptr(623, 623, go$toNativeArray("Int32", [-211, 0, -211])), new CaseRange.Ptr(625, 625, go$toNativeArray("Int32", [10749, 0, 10749])), new CaseRange.Ptr(626, 626, go$toNativeArray("Int32", [-213, 0, -213])), new CaseRange.Ptr(629, 629, go$toNativeArray("Int32", [-214, 0, -214])), new CaseRange.Ptr(637, 637, go$toNativeArray("Int32", [10727, 0, 10727])), new CaseRange.Ptr(640, 640, go$toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(643, 643, go$toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(648, 648, go$toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(649, 649, go$toNativeArray("Int32", [-69, 0, -69])), new CaseRange.Ptr(650, 651, go$toNativeArray("Int32", [-217, 0, -217])), new CaseRange.Ptr(652, 652, go$toNativeArray("Int32", [-71, 0, -71])), new CaseRange.Ptr(658, 658, go$toNativeArray("Int32", [-219, 0, -219])), new CaseRange.Ptr(837, 837, go$toNativeArray("Int32", [84, 0, 84])), new CaseRange.Ptr(880, 883, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(886, 887, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(891, 893, go$toNativeArray("Int32", [130, 0, 130])), new CaseRange.Ptr(902, 902, go$toNativeArray("Int32", [0, 38, 0])), new CaseRange.Ptr(904, 906, go$toNativeArray("Int32", [0, 37, 0])), new CaseRange.Ptr(908, 908, go$toNativeArray("Int32", [0, 64, 0])), new CaseRange.Ptr(910, 911, go$toNativeArray("Int32", [0, 63, 0])), new CaseRange.Ptr(913, 929, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(931, 939, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(940, 940, go$toNativeArray("Int32", [-38, 0, -38])), new CaseRange.Ptr(941, 943, go$toNativeArray("Int32", [-37, 0, -37])), new CaseRange.Ptr(945, 961, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(962, 962, go$toNativeArray("Int32", [-31, 0, -31])), new CaseRange.Ptr(963, 971, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(972, 972, go$toNativeArray("Int32", [-64, 0, -64])), new CaseRange.Ptr(973, 974, go$toNativeArray("Int32", [-63, 0, -63])), new CaseRange.Ptr(975, 975, go$toNativeArray("Int32", [0, 8, 0])), new CaseRange.Ptr(976, 976, go$toNativeArray("Int32", [-62, 0, -62])), new CaseRange.Ptr(977, 977, go$toNativeArray("Int32", [-57, 0, -57])), new CaseRange.Ptr(981, 981, go$toNativeArray("Int32", [-47, 0, -47])), new CaseRange.Ptr(982, 982, go$toNativeArray("Int32", [-54, 0, -54])), new CaseRange.Ptr(983, 983, go$toNativeArray("Int32", [-8, 0, -8])), new CaseRange.Ptr(984, 1007, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1008, 1008, go$toNativeArray("Int32", [-86, 0, -86])), new CaseRange.Ptr(1009, 1009, go$toNativeArray("Int32", [-80, 0, -80])), new CaseRange.Ptr(1010, 1010, go$toNativeArray("Int32", [7, 0, 7])), new CaseRange.Ptr(1012, 1012, go$toNativeArray("Int32", [0, -60, 0])), new CaseRange.Ptr(1013, 1013, go$toNativeArray("Int32", [-96, 0, -96])), new CaseRange.Ptr(1015, 1016, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1017, 1017, go$toNativeArray("Int32", [0, -7, 0])), new CaseRange.Ptr(1018, 1019, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1021, 1023, go$toNativeArray("Int32", [0, -130, 0])), new CaseRange.Ptr(1024, 1039, go$toNativeArray("Int32", [0, 80, 0])), new CaseRange.Ptr(1040, 1071, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(1072, 1103, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(1104, 1119, go$toNativeArray("Int32", [-80, 0, -80])), new CaseRange.Ptr(1120, 1153, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1162, 1215, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1216, 1216, go$toNativeArray("Int32", [0, 15, 0])), new CaseRange.Ptr(1217, 1230, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1231, 1231, go$toNativeArray("Int32", [-15, 0, -15])), new CaseRange.Ptr(1232, 1319, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1329, 1366, go$toNativeArray("Int32", [0, 48, 0])), new CaseRange.Ptr(1377, 1414, go$toNativeArray("Int32", [-48, 0, -48])), new CaseRange.Ptr(4256, 4293, go$toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(4295, 4295, go$toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(4301, 4301, go$toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(7545, 7545, go$toNativeArray("Int32", [35332, 0, 35332])), new CaseRange.Ptr(7549, 7549, go$toNativeArray("Int32", [3814, 0, 3814])), new CaseRange.Ptr(7680, 7829, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(7835, 7835, go$toNativeArray("Int32", [-59, 0, -59])), new CaseRange.Ptr(7838, 7838, go$toNativeArray("Int32", [0, -7615, 0])), new CaseRange.Ptr(7840, 7935, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(7936, 7943, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7944, 7951, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7952, 7957, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7960, 7965, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7968, 7975, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7976, 7983, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7984, 7991, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7992, 7999, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8000, 8005, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8008, 8013, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8017, 8017, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8019, 8019, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8021, 8021, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8023, 8023, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8025, 8025, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8027, 8027, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8029, 8029, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8031, 8031, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8032, 8039, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8040, 8047, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8048, 8049, go$toNativeArray("Int32", [74, 0, 74])), new CaseRange.Ptr(8050, 8053, go$toNativeArray("Int32", [86, 0, 86])), new CaseRange.Ptr(8054, 8055, go$toNativeArray("Int32", [100, 0, 100])), new CaseRange.Ptr(8056, 8057, go$toNativeArray("Int32", [128, 0, 128])), new CaseRange.Ptr(8058, 8059, go$toNativeArray("Int32", [112, 0, 112])), new CaseRange.Ptr(8060, 8061, go$toNativeArray("Int32", [126, 0, 126])), new CaseRange.Ptr(8064, 8071, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8072, 8079, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8080, 8087, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8088, 8095, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8096, 8103, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8104, 8111, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8112, 8113, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8115, 8115, go$toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8120, 8121, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8122, 8123, go$toNativeArray("Int32", [0, -74, 0])), new CaseRange.Ptr(8124, 8124, go$toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8126, 8126, go$toNativeArray("Int32", [-7205, 0, -7205])), new CaseRange.Ptr(8131, 8131, go$toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8136, 8139, go$toNativeArray("Int32", [0, -86, 0])), new CaseRange.Ptr(8140, 8140, go$toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8144, 8145, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8152, 8153, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8154, 8155, go$toNativeArray("Int32", [0, -100, 0])), new CaseRange.Ptr(8160, 8161, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8165, 8165, go$toNativeArray("Int32", [7, 0, 7])), new CaseRange.Ptr(8168, 8169, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8170, 8171, go$toNativeArray("Int32", [0, -112, 0])), new CaseRange.Ptr(8172, 8172, go$toNativeArray("Int32", [0, -7, 0])), new CaseRange.Ptr(8179, 8179, go$toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8184, 8185, go$toNativeArray("Int32", [0, -128, 0])), new CaseRange.Ptr(8186, 8187, go$toNativeArray("Int32", [0, -126, 0])), new CaseRange.Ptr(8188, 8188, go$toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8486, 8486, go$toNativeArray("Int32", [0, -7517, 0])), new CaseRange.Ptr(8490, 8490, go$toNativeArray("Int32", [0, -8383, 0])), new CaseRange.Ptr(8491, 8491, go$toNativeArray("Int32", [0, -8262, 0])), new CaseRange.Ptr(8498, 8498, go$toNativeArray("Int32", [0, 28, 0])), new CaseRange.Ptr(8526, 8526, go$toNativeArray("Int32", [-28, 0, -28])), new CaseRange.Ptr(8544, 8559, go$toNativeArray("Int32", [0, 16, 0])), new CaseRange.Ptr(8560, 8575, go$toNativeArray("Int32", [-16, 0, -16])), new CaseRange.Ptr(8579, 8580, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(9398, 9423, go$toNativeArray("Int32", [0, 26, 0])), new CaseRange.Ptr(9424, 9449, go$toNativeArray("Int32", [-26, 0, -26])), new CaseRange.Ptr(11264, 11310, go$toNativeArray("Int32", [0, 48, 0])), new CaseRange.Ptr(11312, 11358, go$toNativeArray("Int32", [-48, 0, -48])), new CaseRange.Ptr(11360, 11361, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11362, 11362, go$toNativeArray("Int32", [0, -10743, 0])), new CaseRange.Ptr(11363, 11363, go$toNativeArray("Int32", [0, -3814, 0])), new CaseRange.Ptr(11364, 11364, go$toNativeArray("Int32", [0, -10727, 0])), new CaseRange.Ptr(11365, 11365, go$toNativeArray("Int32", [-10795, 0, -10795])), new CaseRange.Ptr(11366, 11366, go$toNativeArray("Int32", [-10792, 0, -10792])), new CaseRange.Ptr(11367, 11372, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11373, 11373, go$toNativeArray("Int32", [0, -10780, 0])), new CaseRange.Ptr(11374, 11374, go$toNativeArray("Int32", [0, -10749, 0])), new CaseRange.Ptr(11375, 11375, go$toNativeArray("Int32", [0, -10783, 0])), new CaseRange.Ptr(11376, 11376, go$toNativeArray("Int32", [0, -10782, 0])), new CaseRange.Ptr(11378, 11379, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11381, 11382, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11390, 11391, go$toNativeArray("Int32", [0, -10815, 0])), new CaseRange.Ptr(11392, 11491, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11499, 11502, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11506, 11507, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11520, 11557, go$toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(11559, 11559, go$toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(11565, 11565, go$toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(42560, 42605, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42624, 42647, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42786, 42799, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42802, 42863, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42873, 42876, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42877, 42877, go$toNativeArray("Int32", [0, -35332, 0])), new CaseRange.Ptr(42878, 42887, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42891, 42892, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42893, 42893, go$toNativeArray("Int32", [0, -42280, 0])), new CaseRange.Ptr(42896, 42899, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42912, 42921, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42922, 42922, go$toNativeArray("Int32", [0, -42308, 0])), new CaseRange.Ptr(65313, 65338, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(65345, 65370, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(66560, 66599, go$toNativeArray("Int32", [0, 40, 0])), new CaseRange.Ptr(66600, 66639, go$toNativeArray("Int32", [-40, 0, -40]))]);
		go$pkg.CaseRanges = _CaseRanges;
		properties = go$toNativeArray("Uint8", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		caseOrbit = new (go$sliceType(foldPair))([new foldPair.Ptr(75, 107), new foldPair.Ptr(83, 115), new foldPair.Ptr(107, 8490), new foldPair.Ptr(115, 383), new foldPair.Ptr(181, 924), new foldPair.Ptr(197, 229), new foldPair.Ptr(223, 7838), new foldPair.Ptr(229, 8491), new foldPair.Ptr(304, 304), new foldPair.Ptr(305, 305), new foldPair.Ptr(383, 83), new foldPair.Ptr(452, 453), new foldPair.Ptr(453, 454), new foldPair.Ptr(454, 452), new foldPair.Ptr(455, 456), new foldPair.Ptr(456, 457), new foldPair.Ptr(457, 455), new foldPair.Ptr(458, 459), new foldPair.Ptr(459, 460), new foldPair.Ptr(460, 458), new foldPair.Ptr(497, 498), new foldPair.Ptr(498, 499), new foldPair.Ptr(499, 497), new foldPair.Ptr(837, 921), new foldPair.Ptr(914, 946), new foldPair.Ptr(917, 949), new foldPair.Ptr(920, 952), new foldPair.Ptr(921, 953), new foldPair.Ptr(922, 954), new foldPair.Ptr(924, 956), new foldPair.Ptr(928, 960), new foldPair.Ptr(929, 961), new foldPair.Ptr(931, 962), new foldPair.Ptr(934, 966), new foldPair.Ptr(937, 969), new foldPair.Ptr(946, 976), new foldPair.Ptr(949, 1013), new foldPair.Ptr(952, 977), new foldPair.Ptr(953, 8126), new foldPair.Ptr(954, 1008), new foldPair.Ptr(956, 181), new foldPair.Ptr(960, 982), new foldPair.Ptr(961, 1009), new foldPair.Ptr(962, 963), new foldPair.Ptr(963, 931), new foldPair.Ptr(966, 981), new foldPair.Ptr(969, 8486), new foldPair.Ptr(976, 914), new foldPair.Ptr(977, 1012), new foldPair.Ptr(981, 934), new foldPair.Ptr(982, 928), new foldPair.Ptr(1008, 922), new foldPair.Ptr(1009, 929), new foldPair.Ptr(1012, 920), new foldPair.Ptr(1013, 917), new foldPair.Ptr(7776, 7777), new foldPair.Ptr(7777, 7835), new foldPair.Ptr(7835, 7776), new foldPair.Ptr(7838, 223), new foldPair.Ptr(8126, 837), new foldPair.Ptr(8486, 937), new foldPair.Ptr(8490, 75), new foldPair.Ptr(8491, 197)]);
		foldCommon = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(924, 956, 32)]), (go$sliceType(Range32)).nil, 0);
		foldGreek = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(181, 837, 656)]), (go$sliceType(Range32)).nil, 0);
		foldInherited = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(921, 953, 32), new Range16.Ptr(8126, 8126, 1)]), (go$sliceType(Range32)).nil, 0);
		foldL = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(837, 837, 1)]), (go$sliceType(Range32)).nil, 0);
		foldLl = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(192, 214, 1), new Range16.Ptr(216, 222, 1), new Range16.Ptr(256, 302, 2), new Range16.Ptr(306, 310, 2), new Range16.Ptr(313, 327, 2), new Range16.Ptr(330, 376, 2), new Range16.Ptr(377, 381, 2), new Range16.Ptr(385, 386, 1), new Range16.Ptr(388, 390, 2), new Range16.Ptr(391, 393, 2), new Range16.Ptr(394, 395, 1), new Range16.Ptr(398, 401, 1), new Range16.Ptr(403, 404, 1), new Range16.Ptr(406, 408, 1), new Range16.Ptr(412, 413, 1), new Range16.Ptr(415, 416, 1), new Range16.Ptr(418, 422, 2), new Range16.Ptr(423, 425, 2), new Range16.Ptr(428, 430, 2), new Range16.Ptr(431, 433, 2), new Range16.Ptr(434, 435, 1), new Range16.Ptr(437, 439, 2), new Range16.Ptr(440, 444, 4), new Range16.Ptr(452, 453, 1), new Range16.Ptr(455, 456, 1), new Range16.Ptr(458, 459, 1), new Range16.Ptr(461, 475, 2), new Range16.Ptr(478, 494, 2), new Range16.Ptr(497, 498, 1), new Range16.Ptr(500, 502, 2), new Range16.Ptr(503, 504, 1), new Range16.Ptr(506, 562, 2), new Range16.Ptr(570, 571, 1), new Range16.Ptr(573, 574, 1), new Range16.Ptr(577, 579, 2), new Range16.Ptr(580, 582, 1), new Range16.Ptr(584, 590, 2), new Range16.Ptr(837, 880, 43), new Range16.Ptr(882, 886, 4), new Range16.Ptr(902, 904, 2), new Range16.Ptr(905, 906, 1), new Range16.Ptr(908, 910, 2), new Range16.Ptr(911, 913, 2), new Range16.Ptr(914, 929, 1), new Range16.Ptr(931, 939, 1), new Range16.Ptr(975, 984, 9), new Range16.Ptr(986, 1006, 2), new Range16.Ptr(1012, 1015, 3), new Range16.Ptr(1017, 1018, 1), new Range16.Ptr(1021, 1071, 1), new Range16.Ptr(1120, 1152, 2), new Range16.Ptr(1162, 1216, 2), new Range16.Ptr(1217, 1229, 2), new Range16.Ptr(1232, 1318, 2), new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(4256, 4293, 1), new Range16.Ptr(4295, 4301, 6), new Range16.Ptr(7680, 7828, 2), new Range16.Ptr(7838, 7934, 2), new Range16.Ptr(7944, 7951, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7976, 7983, 1), new Range16.Ptr(7992, 7999, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8025, 8031, 2), new Range16.Ptr(8040, 8047, 1), new Range16.Ptr(8072, 8079, 1), new Range16.Ptr(8088, 8095, 1), new Range16.Ptr(8104, 8111, 1), new Range16.Ptr(8120, 8124, 1), new Range16.Ptr(8136, 8140, 1), new Range16.Ptr(8152, 8155, 1), new Range16.Ptr(8168, 8172, 1), new Range16.Ptr(8184, 8188, 1), new Range16.Ptr(8486, 8490, 4), new Range16.Ptr(8491, 8498, 7), new Range16.Ptr(8579, 11264, 2685), new Range16.Ptr(11265, 11310, 1), new Range16.Ptr(11360, 11362, 2), new Range16.Ptr(11363, 11364, 1), new Range16.Ptr(11367, 11373, 2), new Range16.Ptr(11374, 11376, 1), new Range16.Ptr(11378, 11381, 3), new Range16.Ptr(11390, 11392, 1), new Range16.Ptr(11394, 11490, 2), new Range16.Ptr(11499, 11501, 2), new Range16.Ptr(11506, 42560, 31054), new Range16.Ptr(42562, 42604, 2), new Range16.Ptr(42624, 42646, 2), new Range16.Ptr(42786, 42798, 2), new Range16.Ptr(42802, 42862, 2), new Range16.Ptr(42873, 42877, 2), new Range16.Ptr(42878, 42886, 2), new Range16.Ptr(42891, 42893, 2), new Range16.Ptr(42896, 42898, 2), new Range16.Ptr(42912, 42922, 2), new Range16.Ptr(65313, 65338, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66560, 66599, 1)]), 3);
		foldLt = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(452, 454, 2), new Range16.Ptr(455, 457, 2), new Range16.Ptr(458, 460, 2), new Range16.Ptr(497, 499, 2), new Range16.Ptr(8064, 8071, 1), new Range16.Ptr(8080, 8087, 1), new Range16.Ptr(8096, 8103, 1), new Range16.Ptr(8115, 8131, 16), new Range16.Ptr(8179, 8179, 1)]), (go$sliceType(Range32)).nil, 0);
		foldLu = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(97, 122, 1), new Range16.Ptr(181, 223, 42), new Range16.Ptr(224, 246, 1), new Range16.Ptr(248, 255, 1), new Range16.Ptr(257, 303, 2), new Range16.Ptr(307, 311, 2), new Range16.Ptr(314, 328, 2), new Range16.Ptr(331, 375, 2), new Range16.Ptr(378, 382, 2), new Range16.Ptr(383, 384, 1), new Range16.Ptr(387, 389, 2), new Range16.Ptr(392, 396, 4), new Range16.Ptr(402, 405, 3), new Range16.Ptr(409, 410, 1), new Range16.Ptr(414, 417, 3), new Range16.Ptr(419, 421, 2), new Range16.Ptr(424, 429, 5), new Range16.Ptr(432, 436, 4), new Range16.Ptr(438, 441, 3), new Range16.Ptr(445, 447, 2), new Range16.Ptr(453, 454, 1), new Range16.Ptr(456, 457, 1), new Range16.Ptr(459, 460, 1), new Range16.Ptr(462, 476, 2), new Range16.Ptr(477, 495, 2), new Range16.Ptr(498, 499, 1), new Range16.Ptr(501, 505, 4), new Range16.Ptr(507, 543, 2), new Range16.Ptr(547, 563, 2), new Range16.Ptr(572, 575, 3), new Range16.Ptr(576, 578, 2), new Range16.Ptr(583, 591, 2), new Range16.Ptr(592, 596, 1), new Range16.Ptr(598, 599, 1), new Range16.Ptr(601, 603, 2), new Range16.Ptr(608, 611, 3), new Range16.Ptr(613, 614, 1), new Range16.Ptr(616, 617, 1), new Range16.Ptr(619, 623, 4), new Range16.Ptr(625, 626, 1), new Range16.Ptr(629, 637, 8), new Range16.Ptr(640, 643, 3), new Range16.Ptr(648, 652, 1), new Range16.Ptr(658, 837, 179), new Range16.Ptr(881, 883, 2), new Range16.Ptr(887, 891, 4), new Range16.Ptr(892, 893, 1), new Range16.Ptr(940, 943, 1), new Range16.Ptr(945, 974, 1), new Range16.Ptr(976, 977, 1), new Range16.Ptr(981, 983, 1), new Range16.Ptr(985, 1007, 2), new Range16.Ptr(1008, 1010, 1), new Range16.Ptr(1013, 1019, 3), new Range16.Ptr(1072, 1119, 1), new Range16.Ptr(1121, 1153, 2), new Range16.Ptr(1163, 1215, 2), new Range16.Ptr(1218, 1230, 2), new Range16.Ptr(1231, 1319, 2), new Range16.Ptr(1377, 1414, 1), new Range16.Ptr(7545, 7549, 4), new Range16.Ptr(7681, 7829, 2), new Range16.Ptr(7835, 7841, 6), new Range16.Ptr(7843, 7935, 2), new Range16.Ptr(7936, 7943, 1), new Range16.Ptr(7952, 7957, 1), new Range16.Ptr(7968, 7975, 1), new Range16.Ptr(7984, 7991, 1), new Range16.Ptr(8000, 8005, 1), new Range16.Ptr(8017, 8023, 2), new Range16.Ptr(8032, 8039, 1), new Range16.Ptr(8048, 8061, 1), new Range16.Ptr(8112, 8113, 1), new Range16.Ptr(8126, 8144, 18), new Range16.Ptr(8145, 8160, 15), new Range16.Ptr(8161, 8165, 4), new Range16.Ptr(8526, 8580, 54), new Range16.Ptr(11312, 11358, 1), new Range16.Ptr(11361, 11365, 4), new Range16.Ptr(11366, 11372, 2), new Range16.Ptr(11379, 11382, 3), new Range16.Ptr(11393, 11491, 2), new Range16.Ptr(11500, 11502, 2), new Range16.Ptr(11507, 11520, 13), new Range16.Ptr(11521, 11557, 1), new Range16.Ptr(11559, 11565, 6), new Range16.Ptr(42561, 42605, 2), new Range16.Ptr(42625, 42647, 2), new Range16.Ptr(42787, 42799, 2), new Range16.Ptr(42803, 42863, 2), new Range16.Ptr(42874, 42876, 2), new Range16.Ptr(42879, 42887, 2), new Range16.Ptr(42892, 42897, 5), new Range16.Ptr(42899, 42913, 14), new Range16.Ptr(42915, 42921, 2), new Range16.Ptr(65345, 65370, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66600, 66639, 1)]), 4);
		foldM = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(921, 953, 32), new Range16.Ptr(8126, 8126, 1)]), (go$sliceType(Range32)).nil, 0);
		foldMn = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(921, 953, 32), new Range16.Ptr(8126, 8126, 1)]), (go$sliceType(Range32)).nil, 0);
		var _map$3, _key$3;
		go$pkg.FoldCategory = (_map$3 = new Go$Map(), _key$3 = "Common", _map$3[_key$3] = { k: _key$3, v: foldCommon }, _key$3 = "Greek", _map$3[_key$3] = { k: _key$3, v: foldGreek }, _key$3 = "Inherited", _map$3[_key$3] = { k: _key$3, v: foldInherited }, _key$3 = "L", _map$3[_key$3] = { k: _key$3, v: foldL }, _key$3 = "Ll", _map$3[_key$3] = { k: _key$3, v: foldLl }, _key$3 = "Lt", _map$3[_key$3] = { k: _key$3, v: foldLt }, _key$3 = "Lu", _map$3[_key$3] = { k: _key$3, v: foldLu }, _key$3 = "M", _map$3[_key$3] = { k: _key$3, v: foldM }, _key$3 = "Mn", _map$3[_key$3] = { k: _key$3, v: foldMn }, _map$3);
		var _map$4, _key$4;
		go$pkg.FoldScript = (_map$4 = new Go$Map(), _map$4);
	}
	return go$pkg;
})();
go$packages["unicode/utf8"] = (function() {
	var go$pkg = {}, decodeRuneInternal, decodeRuneInStringInternal, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart;
	decodeRuneInternal = function(p) {
		var r, size, short$1, n, _tuple, _slice, _index, c0, _tuple$1, _tuple$2, _tuple$3, _slice$1, _index$1, c1, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _slice$2, _index$2, c2, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _slice$3, _index$3, c3, _tuple$13, _tuple$14, _tuple$15, _tuple$16;
		r = 0;
		size = 0;
		short$1 = false;
		n = p.length;
		if (n < 1) {
			_tuple = [65533, 0, true], r = _tuple[0], size = _tuple[1], short$1 = _tuple[2];
			return [r, size, short$1];
		}
		c0 = (_slice = p, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (c0 < 128) {
			_tuple$1 = [(c0 >> 0), 1, false], r = _tuple$1[0], size = _tuple$1[1], short$1 = _tuple$1[2];
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tuple$2 = [65533, 1, false], r = _tuple$2[0], size = _tuple$2[1], short$1 = _tuple$2[2];
			return [r, size, short$1];
		}
		if (n < 2) {
			_tuple$3 = [65533, 1, true], r = _tuple$3[0], size = _tuple$3[1], short$1 = _tuple$3[2];
			return [r, size, short$1];
		}
		c1 = (_slice$1 = p, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		if (c1 < 128 || 192 <= c1) {
			_tuple$4 = [65533, 1, false], r = _tuple$4[0], size = _tuple$4[1], short$1 = _tuple$4[2];
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tuple$5 = [65533, 1, false], r = _tuple$5[0], size = _tuple$5[1], short$1 = _tuple$5[2];
				return [r, size, short$1];
			}
			_tuple$6 = [r, 2, false], r = _tuple$6[0], size = _tuple$6[1], short$1 = _tuple$6[2];
			return [r, size, short$1];
		}
		if (n < 3) {
			_tuple$7 = [65533, 1, true], r = _tuple$7[0], size = _tuple$7[1], short$1 = _tuple$7[2];
			return [r, size, short$1];
		}
		c2 = (_slice$2 = p, _index$2 = 2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
		if (c2 < 128 || 192 <= c2) {
			_tuple$8 = [65533, 1, false], r = _tuple$8[0], size = _tuple$8[1], short$1 = _tuple$8[2];
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tuple$9 = [65533, 1, false], r = _tuple$9[0], size = _tuple$9[1], short$1 = _tuple$9[2];
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tuple$10 = [65533, 1, false], r = _tuple$10[0], size = _tuple$10[1], short$1 = _tuple$10[2];
				return [r, size, short$1];
			}
			_tuple$11 = [r, 3, false], r = _tuple$11[0], size = _tuple$11[1], short$1 = _tuple$11[2];
			return [r, size, short$1];
		}
		if (n < 4) {
			_tuple$12 = [65533, 1, true], r = _tuple$12[0], size = _tuple$12[1], short$1 = _tuple$12[2];
			return [r, size, short$1];
		}
		c3 = (_slice$3 = p, _index$3 = 3, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
		if (c3 < 128 || 192 <= c3) {
			_tuple$13 = [65533, 1, false], r = _tuple$13[0], size = _tuple$13[1], short$1 = _tuple$13[2];
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tuple$14 = [65533, 1, false], r = _tuple$14[0], size = _tuple$14[1], short$1 = _tuple$14[2];
				return [r, size, short$1];
			}
			_tuple$15 = [r, 4, false], r = _tuple$15[0], size = _tuple$15[1], short$1 = _tuple$15[2];
			return [r, size, short$1];
		}
		_tuple$16 = [65533, 1, false], r = _tuple$16[0], size = _tuple$16[1], short$1 = _tuple$16[2];
		return [r, size, short$1];
	};
	decodeRuneInStringInternal = function(s) {
		var r, size, short$1, n, _tuple, c0, _tuple$1, _tuple$2, _tuple$3, c1, _tuple$4, _tuple$5, _tuple$6, _tuple$7, c2, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, c3, _tuple$13, _tuple$14, _tuple$15, _tuple$16;
		r = 0;
		size = 0;
		short$1 = false;
		n = s.length;
		if (n < 1) {
			_tuple = [65533, 0, true], r = _tuple[0], size = _tuple[1], short$1 = _tuple[2];
			return [r, size, short$1];
		}
		c0 = s.charCodeAt(0);
		if (c0 < 128) {
			_tuple$1 = [(c0 >> 0), 1, false], r = _tuple$1[0], size = _tuple$1[1], short$1 = _tuple$1[2];
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tuple$2 = [65533, 1, false], r = _tuple$2[0], size = _tuple$2[1], short$1 = _tuple$2[2];
			return [r, size, short$1];
		}
		if (n < 2) {
			_tuple$3 = [65533, 1, true], r = _tuple$3[0], size = _tuple$3[1], short$1 = _tuple$3[2];
			return [r, size, short$1];
		}
		c1 = s.charCodeAt(1);
		if (c1 < 128 || 192 <= c1) {
			_tuple$4 = [65533, 1, false], r = _tuple$4[0], size = _tuple$4[1], short$1 = _tuple$4[2];
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tuple$5 = [65533, 1, false], r = _tuple$5[0], size = _tuple$5[1], short$1 = _tuple$5[2];
				return [r, size, short$1];
			}
			_tuple$6 = [r, 2, false], r = _tuple$6[0], size = _tuple$6[1], short$1 = _tuple$6[2];
			return [r, size, short$1];
		}
		if (n < 3) {
			_tuple$7 = [65533, 1, true], r = _tuple$7[0], size = _tuple$7[1], short$1 = _tuple$7[2];
			return [r, size, short$1];
		}
		c2 = s.charCodeAt(2);
		if (c2 < 128 || 192 <= c2) {
			_tuple$8 = [65533, 1, false], r = _tuple$8[0], size = _tuple$8[1], short$1 = _tuple$8[2];
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tuple$9 = [65533, 1, false], r = _tuple$9[0], size = _tuple$9[1], short$1 = _tuple$9[2];
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tuple$10 = [65533, 1, false], r = _tuple$10[0], size = _tuple$10[1], short$1 = _tuple$10[2];
				return [r, size, short$1];
			}
			_tuple$11 = [r, 3, false], r = _tuple$11[0], size = _tuple$11[1], short$1 = _tuple$11[2];
			return [r, size, short$1];
		}
		if (n < 4) {
			_tuple$12 = [65533, 1, true], r = _tuple$12[0], size = _tuple$12[1], short$1 = _tuple$12[2];
			return [r, size, short$1];
		}
		c3 = s.charCodeAt(3);
		if (c3 < 128 || 192 <= c3) {
			_tuple$13 = [65533, 1, false], r = _tuple$13[0], size = _tuple$13[1], short$1 = _tuple$13[2];
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tuple$14 = [65533, 1, false], r = _tuple$14[0], size = _tuple$14[1], short$1 = _tuple$14[2];
				return [r, size, short$1];
			}
			_tuple$15 = [r, 4, false], r = _tuple$15[0], size = _tuple$15[1], short$1 = _tuple$15[2];
			return [r, size, short$1];
		}
		_tuple$16 = [65533, 1, false], r = _tuple$16[0], size = _tuple$16[1], short$1 = _tuple$16[2];
		return [r, size, short$1];
	};
	FullRune = go$pkg.FullRune = function(p) {
		var _tuple, short$1;
		_tuple = decodeRuneInternal(p), short$1 = _tuple[2];
		return !short$1;
	};
	DecodeRune = go$pkg.DecodeRune = function(p) {
		var r, size, _tuple;
		r = 0;
		size = 0;
		_tuple = decodeRuneInternal(p), r = _tuple[0], size = _tuple[1];
		return [r, size];
	};
	DecodeRuneInString = go$pkg.DecodeRuneInString = function(s) {
		var r, size, _tuple;
		r = 0;
		size = 0;
		_tuple = decodeRuneInStringInternal(s), r = _tuple[0], size = _tuple[1];
		return [r, size];
	};
	DecodeLastRune = go$pkg.DecodeLastRune = function(p) {
		var r, size, end, _tuple, start, _slice, _index, _tuple$1, lim, _slice$1, _index$1, _tuple$2, _tuple$3, _tuple$4;
		r = 0;
		size = 0;
		end = p.length;
		if (end === 0) {
			_tuple = [65533, 0], r = _tuple[0], size = _tuple[1];
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((_slice = p, _index = start, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0);
		if (r < 128) {
			_tuple$1 = [r, 1], r = _tuple$1[0], size = _tuple$1[1];
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - 1 >> 0;
		while (start >= lim) {
			if (RuneStart((_slice$1 = p, _index$1 = start, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))) {
				break;
			}
			start = start - 1 >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple$2 = DecodeRune(go$subslice(p, start, end)), r = _tuple$2[0], size = _tuple$2[1];
		if (!(((start + size >> 0) === end))) {
			_tuple$3 = [65533, 1], r = _tuple$3[0], size = _tuple$3[1];
			return [r, size];
		}
		_tuple$4 = [r, size], r = _tuple$4[0], size = _tuple$4[1];
		return [r, size];
	};
	DecodeLastRuneInString = go$pkg.DecodeLastRuneInString = function(s) {
		var r, size, end, _tuple, start, _tuple$1, lim, _tuple$2, _tuple$3, _tuple$4;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tuple = [65533, 0], r = _tuple[0], size = _tuple[1];
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tuple$1 = [r, 1], r = _tuple$1[0], size = _tuple$1[1];
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - 1 >> 0;
		while (start >= lim) {
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - 1 >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple$2 = DecodeRuneInString(s.substring(start, end)), r = _tuple$2[0], size = _tuple$2[1];
		if (!(((start + size >> 0) === end))) {
			_tuple$3 = [65533, 1], r = _tuple$3[0], size = _tuple$3[1];
			return [r, size];
		}
		_tuple$4 = [r, size], r = _tuple$4[0], size = _tuple$4[1];
		return [r, size];
	};
	RuneLen = go$pkg.RuneLen = function(r) {
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	EncodeRune = go$pkg.EncodeRune = function(p, r) {
		var _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9;
		if ((r >>> 0) <= 127) {
			_slice = p, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = (r << 24 >>> 24)) : go$throwRuntimeError("index out of range");
			return 1;
		}
		if ((r >>> 0) <= 2047) {
			_slice$1 = p, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
			_slice$2 = p, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
			return 2;
		}
		if ((r >>> 0) > 1114111) {
			r = 65533;
		}
		if (55296 <= r && r <= 57343) {
			r = 65533;
		}
		if ((r >>> 0) <= 65535) {
			_slice$3 = p, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
			_slice$4 = p, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
			_slice$5 = p, _index$5 = 2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
			return 3;
		}
		_slice$6 = p, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = (240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
		_slice$7 = p, _index$7 = 1, (_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = (128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
		_slice$8 = p, _index$8 = 2, (_index$8 >= 0 && _index$8 < _slice$8.length) ? (_slice$8.array[_slice$8.offset + _index$8] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
		_slice$9 = p, _index$9 = 3, (_index$9 >= 0 && _index$9 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$9] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
		return 4;
	};
	RuneCount = go$pkg.RuneCount = function(p) {
		var i, n, _slice, _index, _tuple, size;
		i = 0;
		n = 0;
		n = 0;
		while (i < p.length) {
			if ((_slice = p, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < 128) {
				i = i + 1 >> 0;
			} else {
				_tuple = DecodeRune(go$subslice(p, i)), size = _tuple[1];
				i = i + (size) >> 0;
			}
			n = n + 1 >> 0;
		}
		return n;
	};
	RuneCountInString = go$pkg.RuneCountInString = function(s) {
		var n, _ref, _i, _rune;
		n = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			n = n + 1 >> 0;
			_i += _rune[1];
		}
		return n;
	};
	RuneStart = go$pkg.RuneStart = function(b) {
		return !((((b & 192) >>> 0) === 128));
	};
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["bytes"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], io = go$packages["io"], utf8 = go$packages["unicode/utf8"], unicode = go$packages["unicode"], Buffer, readOp, Reader, makeSlice, NewBuffer, Index, LastIndex, HasPrefix, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, TrimSpace, IndexByte, Equal, NewReader;
	Buffer = go$pkg.Buffer = go$newType(0, "Struct", "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.go$val = this;
		this.buf = buf_ !== undefined ? buf_ : (go$sliceType(Go$Uint8)).nil;
		this.off = off_ !== undefined ? off_ : 0;
		this.runeBytes = runeBytes_ !== undefined ? runeBytes_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.bootstrap = bootstrap_ !== undefined ? bootstrap_ : go$makeNativeArray("Uint8", 64, function() { return 0; });
		this.lastRead = lastRead_ !== undefined ? lastRead_ : 0;
	});
	readOp = go$pkg.readOp = go$newType(4, "Int", "bytes.readOp", "readOp", "bytes", null);
	Reader = go$pkg.Reader = go$newType(0, "Struct", "bytes.Reader", "Reader", "bytes", function(s_, i_, prevRune_) {
		this.go$val = this;
		this.s = s_ !== undefined ? s_ : (go$sliceType(Go$Uint8)).nil;
		this.i = i_ !== undefined ? i_ : 0;
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
	});
	Buffer.Ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return go$subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.go$val.Bytes(); };
	Buffer.Ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === (go$ptrType(Buffer)).nil) {
			return "<nil>";
		}
		return go$bytesToString(go$subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.go$val.String(); };
	Buffer.Ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.go$val.Len(); };
	Buffer.Ptr.prototype.Truncate = function(n) {
		var b;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			throw go$panic(new Go$String("bytes.Buffer: truncation out of range"));
		} else if (n === 0) {
			b.off = 0;
		}
		b.buf = go$subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.go$val.Truncate(n); };
	Buffer.Ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.go$val.Reset(); };
	Buffer.Ptr.prototype.grow = function(n) {
		var b, m, buf, _q, x, x$1;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.length + n >> 0) > b.buf.capacity) {
			buf = (go$sliceType(Go$Uint8)).nil;
			if (b.buf === (go$sliceType(Go$Uint8)).nil && n <= 64) {
				buf = go$subslice(new (go$sliceType(Go$Uint8))(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"))) {
				go$copySlice(b.buf, go$subslice(b.buf, b.off));
				buf = go$subslice(b.buf, 0, m);
			} else {
				buf = makeSlice((x = 2, x$1 = b.buf.capacity, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0) + n >> 0);
				go$copySlice(buf, go$subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = go$subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.go$val.grow(n); };
	Buffer.Ptr.prototype.Grow = function(n) {
		var b, m;
		b = this;
		if (n < 0) {
			throw go$panic(new Go$String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = go$subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.go$val.Grow(n); };
	Buffer.Ptr.prototype.Write = function(p) {
		var n, err, b, m, _tuple;
		n = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.length);
		_tuple = [go$copySlice(go$subslice(b.buf, m), p), null], n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.go$val.Write(p); };
	Buffer.Ptr.prototype.WriteString = function(s) {
		var n, err, b, m, _tuple;
		n = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tuple = [go$copyString(go$subslice(b.buf, m), s), null], n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.go$val.WriteString(s); };
	Buffer.Ptr.prototype.ReadFrom = function(r) {
		var n, err, b, free, newBuf, x, x$1, _tuple, m, e, x$2, _tuple$1, _tuple$2;
		n = new Go$Int64(0, 0);
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
		}
		while (true) {
			if (free = b.buf.capacity - b.buf.length >> 0, free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice((x = 2, x$1 = b.buf.capacity, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0) + 512 >> 0);
				}
				go$copySlice(newBuf, go$subslice(b.buf, b.off));
				b.buf = go$subslice(newBuf, 0, (b.buf.length - b.off >> 0));
				b.off = 0;
			}
			_tuple = r.Read(go$subslice(b.buf, b.buf.length, b.buf.capacity)), m = _tuple[0], e = _tuple[1];
			b.buf = go$subslice(b.buf, 0, (b.buf.length + m >> 0));
			n = (x$2 = new Go$Int64(0, m), new Go$Int64(n.high + x$2.high, n.low + x$2.low));
			if (go$interfaceIsEqual(e, io.EOF)) {
				break;
			}
			if (!(go$interfaceIsEqual(e, null))) {
				_tuple$1 = [n, e], n = _tuple$1[0], err = _tuple$1[1];
				return [n, err];
			}
		}
		_tuple$2 = [n, null], n = _tuple$2[0], err = _tuple$2[1];
		return [n, err];
	};
	Buffer.prototype.ReadFrom = function(r) { return this.go$val.ReadFrom(r); };
	makeSlice = function(n) {
		var go$deferred = [];
		try {
			go$deferred.push({ fun: (function() {
				if (!(go$interfaceIsEqual(go$recover(), null))) {
					throw go$panic(go$pkg.ErrTooLarge);
				}
			}), args: [] });
			return (go$sliceType(Go$Uint8)).make(n, 0, function() { return 0; });
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$sliceType(Go$Uint8)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Buffer.Ptr.prototype.WriteTo = function(w) {
		var n, err, b, nBytes, _tuple, m, e, _tuple$1, _tuple$2;
		n = new Go$Int64(0, 0);
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off < b.buf.length) {
			nBytes = b.Len();
			_tuple = w.Write(go$subslice(b.buf, b.off)), m = _tuple[0], e = _tuple[1];
			if (m > nBytes) {
				throw go$panic(new Go$String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new Go$Int64(0, m);
			if (!(go$interfaceIsEqual(e, null))) {
				_tuple$1 = [n, e], n = _tuple$1[0], err = _tuple$1[1];
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tuple$2 = [n, io.ErrShortWrite], n = _tuple$2[0], err = _tuple$2[1];
				return [n, err];
			}
		}
		b.Truncate(0);
		return [n, err];
	};
	Buffer.prototype.WriteTo = function(w) { return this.go$val.WriteTo(w); };
	Buffer.Ptr.prototype.WriteByte = function(c) {
		var b, m, _slice, _index;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		_slice = b.buf, _index = m, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = c) : go$throwRuntimeError("index out of range");
		return null;
	};
	Buffer.prototype.WriteByte = function(c) { return this.go$val.WriteByte(c); };
	Buffer.Ptr.prototype.WriteRune = function(r) {
		var n, err, b, _tuple, _tuple$1;
		n = 0;
		err = null;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tuple = [1, null], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		n = utf8.EncodeRune(go$subslice(new (go$sliceType(Go$Uint8))(b.runeBytes), 0), r);
		b.Write(go$subslice(new (go$sliceType(Go$Uint8))(b.runeBytes), 0, n));
		_tuple$1 = [n, null], n = _tuple$1[0], err = _tuple$1[1];
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.go$val.WriteRune(r); };
	Buffer.Ptr.prototype.Read = function(p) {
		var n, err, b, _tuple;
		n = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
			if (p.length === 0) {
				return [n, err];
			}
			_tuple = [0, io.EOF], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		n = go$copySlice(p, go$subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.go$val.Read(p); };
	Buffer.Ptr.prototype.Next = function(n) {
		var b, m, data;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = go$subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.go$val.Next(n); };
	Buffer.Ptr.prototype.ReadByte = function() {
		var c, err, b, _tuple, _slice, _index, _tuple$1;
		c = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
			_tuple = [0, io.EOF], c = _tuple[0], err = _tuple[1];
			return [c, err];
		}
		c = (_slice = b.buf, _index = b.off, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		b.off = b.off + 1 >> 0;
		b.lastRead = 2;
		_tuple$1 = [c, null], c = _tuple$1[0], err = _tuple$1[1];
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.go$val.ReadByte(); };
	Buffer.Ptr.prototype.ReadRune = function() {
		var r, size, err, b, _tuple, _slice, _index, c, _tuple$1, _tuple$2, n, _tuple$3;
		r = 0;
		size = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
			_tuple = [0, 0, io.EOF], r = _tuple[0], size = _tuple[1], err = _tuple[2];
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (_slice = b.buf, _index = b.off, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (c < 128) {
			b.off = b.off + 1 >> 0;
			_tuple$1 = [(c >> 0), 1, null], r = _tuple$1[0], size = _tuple$1[1], err = _tuple$1[2];
			return [r, size, err];
		}
		_tuple$2 = utf8.DecodeRune(go$subslice(b.buf, b.off)), r = _tuple$2[0], n = _tuple$2[1];
		b.off = b.off + (n) >> 0;
		_tuple$3 = [r, n, null], r = _tuple$3[0], size = _tuple$3[1], err = _tuple$3[2];
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.go$val.ReadRune(); };
	Buffer.Ptr.prototype.UnreadRune = function() {
		var b, _tuple, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune(go$subslice(b.buf, 0, b.off)), n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return null;
	};
	Buffer.prototype.UnreadRune = function() { return this.go$val.UnreadRune(); };
	Buffer.Ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - 1 >> 0;
		}
		return null;
	};
	Buffer.prototype.UnreadByte = function() { return this.go$val.UnreadByte(); };
	Buffer.Ptr.prototype.ReadBytes = function(delim) {
		var line, err, b, _tuple, slice;
		line = (go$sliceType(Go$Uint8)).nil;
		err = null;
		b = this;
		_tuple = b.readSlice(delim), slice = _tuple[0], err = _tuple[1];
		line = go$appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.go$val.ReadBytes(delim); };
	Buffer.Ptr.prototype.readSlice = function(delim) {
		var line, err, b, i, end, _tuple;
		line = (go$sliceType(Go$Uint8)).nil;
		err = null;
		b = this;
		i = IndexByte(go$subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.length;
			err = io.EOF;
		}
		line = go$subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tuple = [line, err], line = _tuple[0], err = _tuple[1];
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.go$val.readSlice(delim); };
	Buffer.Ptr.prototype.ReadString = function(delim) {
		var line, err, b, _tuple, slice, _tuple$1;
		line = "";
		err = null;
		b = this;
		_tuple = b.readSlice(delim), slice = _tuple[0], err = _tuple[1];
		_tuple$1 = [go$bytesToString(slice), err], line = _tuple$1[0], err = _tuple$1[1];
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.go$val.ReadString(delim); };
	NewBuffer = go$pkg.NewBuffer = function(buf) {
		return new Buffer.Ptr(buf, 0, go$makeNativeArray("Uint8", 4, function() { return 0; }), go$makeNativeArray("Uint8", 64, function() { return 0; }), 0);
	};
	Index = go$pkg.Index = function(s, sep) {
		var n, _slice, _index, c, i, t, _slice$1, _index$1, o;
		n = sep.length;
		if (n === 0) {
			return 0;
		}
		if (n > s.length) {
			return -1;
		}
		c = (_slice = sep, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = go$subslice(s, 0, ((s.length - n >> 0) + 1 >> 0));
		while (i < t.length) {
			if (!(((_slice$1 = t, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === c))) {
				o = IndexByte(go$subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal(go$subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + 1 >> 0;
		}
		return -1;
	};
	LastIndex = go$pkg.LastIndex = function(s, sep) {
		var n, _slice, _index, c, i, _slice$1, _index$1;
		n = sep.length;
		if (n === 0) {
			return s.length;
		}
		c = (_slice = sep, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		i = s.length - n >> 0;
		while (i >= 0) {
			if (((_slice$1 = s, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === c) && ((n === 1) || Equal(go$subslice(s, i, (i + n >> 0)), sep))) {
				return i;
			}
			i = i - 1 >> 0;
		}
		return -1;
	};
	HasPrefix = go$pkg.HasPrefix = function(s, prefix) {
		return s.length >= prefix.length && Equal(go$subslice(s, 0, prefix.length), prefix);
	};
	TrimLeftFunc = go$pkg.TrimLeftFunc = function(s, f) {
		var i;
		i = indexFunc(s, f, false);
		if (i === -1) {
			return (go$sliceType(Go$Uint8)).nil;
		}
		return go$subslice(s, i);
	};
	TrimRightFunc = go$pkg.TrimRightFunc = function(s, f) {
		var i, _slice, _index, _tuple, wid;
		i = lastIndexFunc(s, f, false);
		if (i >= 0 && (_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >= 128) {
			_tuple = utf8.DecodeRune(go$subslice(s, i)), wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + 1 >> 0;
		}
		return go$subslice(s, 0, i);
	};
	TrimFunc = go$pkg.TrimFunc = function(s, f) {
		return TrimRightFunc(TrimLeftFunc(s, f), f);
	};
	indexFunc = function(s, f, truth) {
		var start, wid, _slice, _index, r, _tuple;
		start = 0;
		while (start < s.length) {
			wid = 1;
			r = ((_slice = s, _index = start, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune(go$subslice(s, start)), r = _tuple[0], wid = _tuple[1];
			}
			if (f(r) === truth) {
				return start;
			}
			start = start + (wid) >> 0;
		}
		return -1;
	};
	lastIndexFunc = function(s, f, truth) {
		var i, _slice, _index, _tuple, r, size, _tuple$1;
		i = s.length;
		while (i > 0) {
			_tuple = [((_slice = s, _index = (i - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0), 1], r = _tuple[0], size = _tuple[1];
			if (r >= 128) {
				_tuple$1 = utf8.DecodeLastRune(go$subslice(s, 0, i)), r = _tuple$1[0], size = _tuple$1[1];
			}
			i = i - (size) >> 0;
			if (f(r) === truth) {
				return i;
			}
		}
		return -1;
	};
	TrimSpace = go$pkg.TrimSpace = function(s) {
		return TrimFunc(s, unicode.IsSpace);
	};
	IndexByte = go$pkg.IndexByte = function(s, c) {
			var i;
			for (i = 0; i < s.length; i++) {
				if (s.array[s.offset + i] === c) {
					return i;
				}
			}
			return -1;
		};
	Equal = go$pkg.Equal = function(a, b) {
			if (a.length !== b.length) {
				return false;
			}
			var i;
			for (i = 0; i < a.length; i++) {
				if (a.array[a.offset + i] !== b.array[b.offset + i]) {
					return false;
				}
			}
			return true;
		};
	Reader.Ptr.prototype.Len = function() {
		var r;
		r = this;
		if (r.i >= r.s.length) {
			return 0;
		}
		return r.s.length - r.i >> 0;
	};
	Reader.prototype.Len = function() { return this.go$val.Len(); };
	Reader.Ptr.prototype.Read = function(b) {
		var n, err, r, _tuple, _tuple$1;
		n = 0;
		err = null;
		r = this;
		if (b.length === 0) {
			_tuple = [0, null], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		if (r.i >= r.s.length) {
			_tuple$1 = [0, io.EOF], n = _tuple$1[0], err = _tuple$1[1];
			return [n, err];
		}
		n = go$copySlice(b, go$subslice(r.s, r.i));
		r.i = r.i + (n) >> 0;
		r.prevRune = -1;
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.go$val.Read(b); };
	Reader.Ptr.prototype.ReadAt = function(b, off) {
		var n, err, r, _tuple, x, _tuple$1;
		n = 0;
		err = null;
		r = this;
		if ((off.high < 0 || (off.high === 0 && off.low < 0))) {
			_tuple = [0, errors.New("bytes: invalid offset")], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		if ((x = new Go$Int64(0, r.s.length), (off.high > x.high || (off.high === x.high && off.low >= x.low)))) {
			_tuple$1 = [0, io.EOF], n = _tuple$1[0], err = _tuple$1[1];
			return [n, err];
		}
		n = go$copySlice(b, go$subslice(r.s, ((off.low + ((off.high >> 31) * 4294967296)) >> 0)));
		if (n < b.length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.go$val.ReadAt(b, off); };
	Reader.Ptr.prototype.ReadByte = function() {
		var b, err, r, _tuple, _slice, _index;
		b = 0;
		err = null;
		r = this;
		if (r.i >= r.s.length) {
			_tuple = [0, io.EOF], b = _tuple[0], err = _tuple[1];
			return [b, err];
		}
		b = (_slice = r.s, _index = r.i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		r.i = r.i + 1 >> 0;
		r.prevRune = -1;
		return [b, err];
	};
	Reader.prototype.ReadByte = function() { return this.go$val.ReadByte(); };
	Reader.Ptr.prototype.UnreadByte = function() {
		var r;
		r = this;
		if (r.i <= 0) {
			return errors.New("bytes.Reader: at beginning of slice");
		}
		r.i = r.i - 1 >> 0;
		r.prevRune = -1;
		return null;
	};
	Reader.prototype.UnreadByte = function() { return this.go$val.UnreadByte(); };
	Reader.Ptr.prototype.ReadRune = function() {
		var ch, size, err, r, _tuple, c, _slice, _index, _tuple$1, _tuple$2;
		ch = 0;
		size = 0;
		err = null;
		r = this;
		if (r.i >= r.s.length) {
			_tuple = [0, 0, io.EOF], ch = _tuple[0], size = _tuple[1], err = _tuple[2];
			return [ch, size, err];
		}
		r.prevRune = r.i;
		if (c = (_slice = r.s, _index = r.i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), c < 128) {
			r.i = r.i + 1 >> 0;
			_tuple$1 = [(c >> 0), 1, null], ch = _tuple$1[0], size = _tuple$1[1], err = _tuple$1[2];
			return [ch, size, err];
		}
		_tuple$2 = utf8.DecodeRune(go$subslice(r.s, r.i)), ch = _tuple$2[0], size = _tuple$2[1];
		r.i = r.i + (size) >> 0;
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.go$val.ReadRune(); };
	Reader.Ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader: previous operation was not ReadRune");
		}
		r.i = r.prevRune;
		r.prevRune = -1;
		return null;
	};
	Reader.prototype.UnreadRune = function() { return this.go$val.UnreadRune(); };
	Reader.Ptr.prototype.Seek = function(offset, whence) {
		var r, abs, _ref, x, x$1;
		r = this;
		abs = new Go$Int64(0, 0);
		_ref = whence;
		if (_ref === 0) {
			abs = offset;
		} else if (_ref === 1) {
			abs = (x = new Go$Int64(0, r.i), new Go$Int64(x.high + offset.high, x.low + offset.low));
		} else if (_ref === 2) {
			abs = (x$1 = new Go$Int64(0, r.s.length), new Go$Int64(x$1.high + offset.high, x$1.low + offset.low));
		} else {
			return [new Go$Int64(0, 0), errors.New("bytes: invalid whence")];
		}
		if ((abs.high < 0 || (abs.high === 0 && abs.low < 0))) {
			return [new Go$Int64(0, 0), errors.New("bytes: negative position")];
		}
		if ((abs.high > 0 || (abs.high === 0 && abs.low >= 2147483648))) {
			return [new Go$Int64(0, 0), errors.New("bytes: position out of range")];
		}
		r.i = ((abs.low + ((abs.high >> 31) * 4294967296)) >> 0);
		return [abs, null];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.go$val.Seek(offset, whence); };
	Reader.Ptr.prototype.WriteTo = function(w) {
		var n, err, r, _tuple, b, _tuple$1, m;
		n = new Go$Int64(0, 0);
		err = null;
		r = this;
		r.prevRune = -1;
		if (r.i >= r.s.length) {
			_tuple = [new Go$Int64(0, 0), null], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		b = go$subslice(r.s, r.i);
		_tuple$1 = w.Write(b), m = _tuple$1[0], err = _tuple$1[1];
		if (m > b.length) {
			throw go$panic(new Go$String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = r.i + (m) >> 0;
		n = new Go$Int64(0, m);
		if (!((m === b.length)) && go$interfaceIsEqual(err, null)) {
			err = io.ErrShortWrite;
		}
		return [n, err];
	};
	Reader.prototype.WriteTo = function(w) { return this.go$val.WriteTo(w); };
	NewReader = go$pkg.NewReader = function(b) {
		return new Reader.Ptr(b, 0, -1);
	};
	go$pkg.init = function() {
		Buffer.init([["buf", "bytes", (go$sliceType(Go$Uint8)), ""], ["off", "bytes", Go$Int, ""], ["runeBytes", "bytes", (go$arrayType(Go$Uint8, 4)), ""], ["bootstrap", "bytes", (go$arrayType(Go$Uint8, 64)), ""], ["lastRead", "bytes", readOp, ""]]);
		(go$ptrType(Buffer)).methods = [["Bytes", "", [], [(go$sliceType(Go$Uint8))], false], ["Grow", "", [Go$Int], [], false], ["Len", "", [], [Go$Int], false], ["Next", "", [Go$Int], [(go$sliceType(Go$Uint8))], false], ["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["ReadByte", "", [], [Go$Uint8, go$error], false], ["ReadBytes", "", [Go$Uint8], [(go$sliceType(Go$Uint8)), go$error], false], ["ReadFrom", "", [io.Reader], [Go$Int64, go$error], false], ["ReadRune", "", [], [Go$Int32, Go$Int, go$error], false], ["ReadString", "", [Go$Uint8], [Go$String, go$error], false], ["Reset", "", [], [], false], ["String", "", [], [Go$String], false], ["Truncate", "", [Go$Int], [], false], ["UnreadByte", "", [], [go$error], false], ["UnreadRune", "", [], [go$error], false], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["WriteByte", "", [Go$Uint8], [go$error], false], ["WriteRune", "", [Go$Int32], [Go$Int, go$error], false], ["WriteString", "", [Go$String], [Go$Int, go$error], false], ["WriteTo", "", [io.Writer], [Go$Int64, go$error], false], ["grow", "bytes", [Go$Int], [Go$Int], false], ["readSlice", "bytes", [Go$Uint8], [(go$sliceType(Go$Uint8)), go$error], false]];
		Reader.init([["s", "bytes", (go$sliceType(Go$Uint8)), ""], ["i", "bytes", Go$Int, ""], ["prevRune", "bytes", Go$Int, ""]]);
		(go$ptrType(Reader)).methods = [["Len", "", [], [Go$Int], false], ["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["ReadAt", "", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false], ["ReadByte", "", [], [Go$Uint8, go$error], false], ["ReadRune", "", [], [Go$Int32, Go$Int, go$error], false], ["Seek", "", [Go$Int64, Go$Int], [Go$Int64, go$error], false], ["UnreadByte", "", [], [go$error], false], ["UnreadRune", "", [], [go$error], false], ["WriteTo", "", [io.Writer], [Go$Int64, go$error], false]];
		go$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
	}
	return go$pkg;
})();
go$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var go$pkg = {}, Object, Error;
	Object = go$pkg.Object = go$newType(0, "Interface", "js.Object", "Object", "github.com/gopherjs/gopherjs/js", null);
	Error = go$pkg.Error = go$newType(0, "Struct", "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.go$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
	Error.prototype.Bool = function() { return this.go$val.Bool(); };
	Error.Ptr.prototype.Bool = function() { return this.Object.Bool(); };
	Error.prototype.Call = function(name, args) { return this.go$val.Call(name, args); };
	Error.Ptr.prototype.Call = function(name, args) { return this.Object.Call(name, args); };
	Error.prototype.Float = function() { return this.go$val.Float(); };
	Error.Ptr.prototype.Float = function() { return this.Object.Float(); };
	Error.prototype.Get = function(name) { return this.go$val.Get(name); };
	Error.Ptr.prototype.Get = function(name) { return this.Object.Get(name); };
	Error.prototype.Index = function(i) { return this.go$val.Index(i); };
	Error.Ptr.prototype.Index = function(i) { return this.Object.Index(i); };
	Error.prototype.Int = function() { return this.go$val.Int(); };
	Error.Ptr.prototype.Int = function() { return this.Object.Int(); };
	Error.prototype.Interface = function() { return this.go$val.Interface(); };
	Error.Ptr.prototype.Interface = function() { return this.Object.Interface(); };
	Error.prototype.Invoke = function(args) { return this.go$val.Invoke(args); };
	Error.Ptr.prototype.Invoke = function(args) { return this.Object.Invoke(args); };
	Error.prototype.IsNull = function() { return this.go$val.IsNull(); };
	Error.Ptr.prototype.IsNull = function() { return this.Object.IsNull(); };
	Error.prototype.IsUndefined = function() { return this.go$val.IsUndefined(); };
	Error.Ptr.prototype.IsUndefined = function() { return this.Object.IsUndefined(); };
	Error.prototype.Length = function() { return this.go$val.Length(); };
	Error.Ptr.prototype.Length = function() { return this.Object.Length(); };
	Error.prototype.New = function(args) { return this.go$val.New(args); };
	Error.Ptr.prototype.New = function(args) { return this.Object.New(args); };
	Error.prototype.Set = function(name, value) { return this.go$val.Set(name, value); };
	Error.Ptr.prototype.Set = function(name, value) { return this.Object.Set(name, value); };
	Error.prototype.SetIndex = function(i, value) { return this.go$val.SetIndex(i, value); };
	Error.Ptr.prototype.SetIndex = function(i, value) { return this.Object.SetIndex(i, value); };
	Error.prototype.String = function() { return this.go$val.String(); };
	Error.Ptr.prototype.String = function() { return this.Object.String(); };
	Error.Ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + go$internalize(err.Object.message, Go$String);
	};
	Error.prototype.Error = function() { return this.go$val.Error(); };
	go$pkg.init = function() {
		Object.init([["Bool", "", (go$funcType([], [Go$Bool], false))], ["Call", "", (go$funcType([Go$String, (go$sliceType(go$emptyInterface))], [Object], true))], ["Float", "", (go$funcType([], [Go$Float64], false))], ["Get", "", (go$funcType([Go$String], [Object], false))], ["Index", "", (go$funcType([Go$Int], [Object], false))], ["Int", "", (go$funcType([], [Go$Int], false))], ["Interface", "", (go$funcType([], [go$emptyInterface], false))], ["Invoke", "", (go$funcType([(go$sliceType(go$emptyInterface))], [Object], true))], ["IsNull", "", (go$funcType([], [Go$Bool], false))], ["IsUndefined", "", (go$funcType([], [Go$Bool], false))], ["Length", "", (go$funcType([], [Go$Int], false))], ["New", "", (go$funcType([(go$sliceType(go$emptyInterface))], [Object], true))], ["Set", "", (go$funcType([Go$String, go$emptyInterface], [], false))], ["SetIndex", "", (go$funcType([Go$Int, go$emptyInterface], [], false))], ["String", "", (go$funcType([], [Go$String], false))]]);
		Error.init([["", "", Object, ""]]);
		Error.methods = [["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [Object], true], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [Object], false], ["Index", "", [Go$Int], [Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [Object], true], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["String", "", [], [Go$String], false]];
		(go$ptrType(Error)).methods = [["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [Object], true], ["Error", "", [], [Go$String], false], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [Object], false], ["Index", "", [Go$Int], [Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [Object], true], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["String", "", [], [Go$String], false]];
	}
	return go$pkg;
})();
go$packages["github.com/gopherjs/go-angularjs"] = (function() {
	var go$pkg = {}, js = go$packages["github.com/gopherjs/gopherjs/js"], Module, Scope, JQueryElement, Event, HttpService, NewModule, ElementById, Service;
	Module = go$pkg.Module = go$newType(0, "Struct", "angularjs.Module", "Module", "github.com/gopherjs/go-angularjs", function(Object_) {
		this.go$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
	Module.prototype.Bool = function() { return this.go$val.Bool(); };
	Module.Ptr.prototype.Bool = function() { return this.Object.Bool(); };
	Module.prototype.Call = function(name, args) { return this.go$val.Call(name, args); };
	Module.Ptr.prototype.Call = function(name, args) { return this.Object.Call(name, args); };
	Module.prototype.Float = function() { return this.go$val.Float(); };
	Module.Ptr.prototype.Float = function() { return this.Object.Float(); };
	Module.prototype.Get = function(name) { return this.go$val.Get(name); };
	Module.Ptr.prototype.Get = function(name) { return this.Object.Get(name); };
	Module.prototype.Index = function(i) { return this.go$val.Index(i); };
	Module.Ptr.prototype.Index = function(i) { return this.Object.Index(i); };
	Module.prototype.Int = function() { return this.go$val.Int(); };
	Module.Ptr.prototype.Int = function() { return this.Object.Int(); };
	Module.prototype.Interface = function() { return this.go$val.Interface(); };
	Module.Ptr.prototype.Interface = function() { return this.Object.Interface(); };
	Module.prototype.Invoke = function(args) { return this.go$val.Invoke(args); };
	Module.Ptr.prototype.Invoke = function(args) { return this.Object.Invoke(args); };
	Module.prototype.IsNull = function() { return this.go$val.IsNull(); };
	Module.Ptr.prototype.IsNull = function() { return this.Object.IsNull(); };
	Module.prototype.IsUndefined = function() { return this.go$val.IsUndefined(); };
	Module.Ptr.prototype.IsUndefined = function() { return this.Object.IsUndefined(); };
	Module.prototype.Length = function() { return this.go$val.Length(); };
	Module.Ptr.prototype.Length = function() { return this.Object.Length(); };
	Module.prototype.New = function(args) { return this.go$val.New(args); };
	Module.Ptr.prototype.New = function(args) { return this.Object.New(args); };
	Module.prototype.Set = function(name, value) { return this.go$val.Set(name, value); };
	Module.Ptr.prototype.Set = function(name, value) { return this.Object.Set(name, value); };
	Module.prototype.SetIndex = function(i, value) { return this.go$val.SetIndex(i, value); };
	Module.Ptr.prototype.SetIndex = function(i, value) { return this.Object.SetIndex(i, value); };
	Module.prototype.String = function() { return this.go$val.String(); };
	Module.Ptr.prototype.String = function() { return this.Object.String(); };
	Scope = go$pkg.Scope = go$newType(0, "Struct", "angularjs.Scope", "Scope", "github.com/gopherjs/go-angularjs", function(Object_) {
		this.go$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
	Scope.prototype.Bool = function() { return this.go$val.Bool(); };
	Scope.Ptr.prototype.Bool = function() { return this.Object.Bool(); };
	Scope.prototype.Call = function(name, args) { return this.go$val.Call(name, args); };
	Scope.Ptr.prototype.Call = function(name, args) { return this.Object.Call(name, args); };
	Scope.prototype.Float = function() { return this.go$val.Float(); };
	Scope.Ptr.prototype.Float = function() { return this.Object.Float(); };
	Scope.prototype.Get = function(name) { return this.go$val.Get(name); };
	Scope.Ptr.prototype.Get = function(name) { return this.Object.Get(name); };
	Scope.prototype.Index = function(i) { return this.go$val.Index(i); };
	Scope.Ptr.prototype.Index = function(i) { return this.Object.Index(i); };
	Scope.prototype.Int = function() { return this.go$val.Int(); };
	Scope.Ptr.prototype.Int = function() { return this.Object.Int(); };
	Scope.prototype.Interface = function() { return this.go$val.Interface(); };
	Scope.Ptr.prototype.Interface = function() { return this.Object.Interface(); };
	Scope.prototype.Invoke = function(args) { return this.go$val.Invoke(args); };
	Scope.Ptr.prototype.Invoke = function(args) { return this.Object.Invoke(args); };
	Scope.prototype.IsNull = function() { return this.go$val.IsNull(); };
	Scope.Ptr.prototype.IsNull = function() { return this.Object.IsNull(); };
	Scope.prototype.IsUndefined = function() { return this.go$val.IsUndefined(); };
	Scope.Ptr.prototype.IsUndefined = function() { return this.Object.IsUndefined(); };
	Scope.prototype.Length = function() { return this.go$val.Length(); };
	Scope.Ptr.prototype.Length = function() { return this.Object.Length(); };
	Scope.prototype.New = function(args) { return this.go$val.New(args); };
	Scope.Ptr.prototype.New = function(args) { return this.Object.New(args); };
	Scope.prototype.Set = function(name, value) { return this.go$val.Set(name, value); };
	Scope.Ptr.prototype.Set = function(name, value) { return this.Object.Set(name, value); };
	Scope.prototype.SetIndex = function(i, value) { return this.go$val.SetIndex(i, value); };
	Scope.Ptr.prototype.SetIndex = function(i, value) { return this.Object.SetIndex(i, value); };
	Scope.prototype.String = function() { return this.go$val.String(); };
	Scope.Ptr.prototype.String = function() { return this.Object.String(); };
	JQueryElement = go$pkg.JQueryElement = go$newType(0, "Struct", "angularjs.JQueryElement", "JQueryElement", "github.com/gopherjs/go-angularjs", function(Object_) {
		this.go$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
	JQueryElement.prototype.Bool = function() { return this.go$val.Bool(); };
	JQueryElement.Ptr.prototype.Bool = function() { return this.Object.Bool(); };
	JQueryElement.prototype.Call = function(name, args) { return this.go$val.Call(name, args); };
	JQueryElement.Ptr.prototype.Call = function(name, args) { return this.Object.Call(name, args); };
	JQueryElement.prototype.Float = function() { return this.go$val.Float(); };
	JQueryElement.Ptr.prototype.Float = function() { return this.Object.Float(); };
	JQueryElement.prototype.Get = function(name) { return this.go$val.Get(name); };
	JQueryElement.Ptr.prototype.Get = function(name) { return this.Object.Get(name); };
	JQueryElement.prototype.Index = function(i) { return this.go$val.Index(i); };
	JQueryElement.Ptr.prototype.Index = function(i) { return this.Object.Index(i); };
	JQueryElement.prototype.Int = function() { return this.go$val.Int(); };
	JQueryElement.Ptr.prototype.Int = function() { return this.Object.Int(); };
	JQueryElement.prototype.Interface = function() { return this.go$val.Interface(); };
	JQueryElement.Ptr.prototype.Interface = function() { return this.Object.Interface(); };
	JQueryElement.prototype.Invoke = function(args) { return this.go$val.Invoke(args); };
	JQueryElement.Ptr.prototype.Invoke = function(args) { return this.Object.Invoke(args); };
	JQueryElement.prototype.IsNull = function() { return this.go$val.IsNull(); };
	JQueryElement.Ptr.prototype.IsNull = function() { return this.Object.IsNull(); };
	JQueryElement.prototype.IsUndefined = function() { return this.go$val.IsUndefined(); };
	JQueryElement.Ptr.prototype.IsUndefined = function() { return this.Object.IsUndefined(); };
	JQueryElement.prototype.Length = function() { return this.go$val.Length(); };
	JQueryElement.Ptr.prototype.Length = function() { return this.Object.Length(); };
	JQueryElement.prototype.New = function(args) { return this.go$val.New(args); };
	JQueryElement.Ptr.prototype.New = function(args) { return this.Object.New(args); };
	JQueryElement.prototype.Set = function(name, value) { return this.go$val.Set(name, value); };
	JQueryElement.Ptr.prototype.Set = function(name, value) { return this.Object.Set(name, value); };
	JQueryElement.prototype.SetIndex = function(i, value) { return this.go$val.SetIndex(i, value); };
	JQueryElement.Ptr.prototype.SetIndex = function(i, value) { return this.Object.SetIndex(i, value); };
	JQueryElement.prototype.String = function() { return this.go$val.String(); };
	JQueryElement.Ptr.prototype.String = function() { return this.Object.String(); };
	Event = go$pkg.Event = go$newType(0, "Struct", "angularjs.Event", "Event", "github.com/gopherjs/go-angularjs", function(Object_, KeyCode_) {
		this.go$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
		this.KeyCode = KeyCode_ !== undefined ? KeyCode_ : 0;
	});
	Event.prototype.Bool = function() { return this.go$val.Bool(); };
	Event.Ptr.prototype.Bool = function() { return this.Object.Bool(); };
	Event.prototype.Call = function(name, args) { return this.go$val.Call(name, args); };
	Event.Ptr.prototype.Call = function(name, args) { return this.Object.Call(name, args); };
	Event.prototype.Float = function() { return this.go$val.Float(); };
	Event.Ptr.prototype.Float = function() { return this.Object.Float(); };
	Event.prototype.Get = function(name) { return this.go$val.Get(name); };
	Event.Ptr.prototype.Get = function(name) { return this.Object.Get(name); };
	Event.prototype.Index = function(i) { return this.go$val.Index(i); };
	Event.Ptr.prototype.Index = function(i) { return this.Object.Index(i); };
	Event.prototype.Int = function() { return this.go$val.Int(); };
	Event.Ptr.prototype.Int = function() { return this.Object.Int(); };
	Event.prototype.Interface = function() { return this.go$val.Interface(); };
	Event.Ptr.prototype.Interface = function() { return this.Object.Interface(); };
	Event.prototype.Invoke = function(args) { return this.go$val.Invoke(args); };
	Event.Ptr.prototype.Invoke = function(args) { return this.Object.Invoke(args); };
	Event.prototype.IsNull = function() { return this.go$val.IsNull(); };
	Event.Ptr.prototype.IsNull = function() { return this.Object.IsNull(); };
	Event.prototype.IsUndefined = function() { return this.go$val.IsUndefined(); };
	Event.Ptr.prototype.IsUndefined = function() { return this.Object.IsUndefined(); };
	Event.prototype.Length = function() { return this.go$val.Length(); };
	Event.Ptr.prototype.Length = function() { return this.Object.Length(); };
	Event.prototype.New = function(args) { return this.go$val.New(args); };
	Event.Ptr.prototype.New = function(args) { return this.Object.New(args); };
	Event.prototype.Set = function(name, value) { return this.go$val.Set(name, value); };
	Event.Ptr.prototype.Set = function(name, value) { return this.Object.Set(name, value); };
	Event.prototype.SetIndex = function(i, value) { return this.go$val.SetIndex(i, value); };
	Event.Ptr.prototype.SetIndex = function(i, value) { return this.Object.SetIndex(i, value); };
	Event.prototype.String = function() { return this.go$val.String(); };
	Event.Ptr.prototype.String = function() { return this.Object.String(); };
	HttpService = go$pkg.HttpService = go$newType(0, "Struct", "angularjs.HttpService", "HttpService", "github.com/gopherjs/go-angularjs", function() {
		this.go$val = this;
	});
	Module.Ptr.prototype.NewController = function(name, constructor) {
		var m;
		m = this;
		m.Object.controller(go$externalize(name, Go$String), go$externalize((function($scope) {
			constructor(new Scope.Ptr($scope));
		}), (go$funcType([js.Object], [], false))));
	};
	Module.prototype.NewController = function(name, constructor) { return this.go$val.NewController(name, constructor); };
	Scope.Ptr.prototype.Apply = function(f) {
		var s;
		s = this;
		s.Object.$apply(go$externalize(f, (go$funcType([], [], false))));
	};
	Scope.prototype.Apply = function(f) { return this.go$val.Apply(f); };
	Scope.Ptr.prototype.EvalAsync = function(f) {
		var s;
		s = this;
		s.Object.$evalAsync(go$externalize(f, (go$funcType([], [], false))));
	};
	Scope.prototype.EvalAsync = function(f) { return this.go$val.EvalAsync(f); };
	JQueryElement.Ptr.prototype.Prop = function(name) {
		var e;
		e = this;
		return e.Object.prop(go$externalize(name, Go$String));
	};
	JQueryElement.prototype.Prop = function(name) { return this.go$val.Prop(name); };
	JQueryElement.Ptr.prototype.SetProp = function(name, value) {
		var e;
		e = this;
		e.Object.prop(go$externalize(name, go$emptyInterface), go$externalize(value, go$emptyInterface));
	};
	JQueryElement.prototype.SetProp = function(name, value) { return this.go$val.SetProp(name, value); };
	JQueryElement.Ptr.prototype.On = function(events, handler) {
		var e;
		e = this;
		e.Object.on(go$externalize(events, Go$String), go$externalize((function(e$1) {
			handler(new Event.Ptr(e$1, 0));
		}), (go$funcType([js.Object], [], false))));
	};
	JQueryElement.prototype.On = function(events, handler) { return this.go$val.On(events, handler); };
	JQueryElement.Ptr.prototype.Val = function() {
		var e;
		e = this;
		return e.Object.val();
	};
	JQueryElement.prototype.Val = function() { return this.go$val.Val(); };
	JQueryElement.Ptr.prototype.SetVal = function(value) {
		var e;
		e = this;
		e.Object.val(go$externalize(value, go$emptyInterface));
	};
	JQueryElement.prototype.SetVal = function(value) { return this.go$val.SetVal(value); };
	Event.Ptr.prototype.PreventDefault = function() {
		var e;
		e = this;
		e.Object.preventDefault();
	};
	Event.prototype.PreventDefault = function() { return this.go$val.PreventDefault(); };
	NewModule = go$pkg.NewModule = function(name, requires, configFn) {
		return new Module.Ptr(go$global.angular.module(go$externalize(name, Go$String), go$externalize(requires, (go$sliceType(Go$String))), go$externalize(configFn, (go$funcType([], [], false)))));
	};
	ElementById = go$pkg.ElementById = function(id) {
		return new JQueryElement.Ptr(go$global.angular.element(go$global.document.getElementById(go$externalize(id, Go$String))));
	};
	Service = go$pkg.Service = function(name) {
		return go$global.angular.element(go$global.document).injector().get(go$externalize(name, Go$String));
	};
	HttpService.Ptr.prototype.Get = function(url, callback) {
		var s, future;
		s = this;
		future = Service("$http").get(go$externalize(url, Go$String));
		future.success(go$externalize((function(data, status, headers, config) {
			callback(data, status);
		}), (go$funcType([Go$String, Go$Int, js.Object, js.Object], [], false))));
		future.error(go$externalize((function(data, status, headers, config) {
			callback(data, status);
		}), (go$funcType([Go$String, Go$Int, js.Object, js.Object], [], false))));
	};
	HttpService.prototype.Get = function(url, callback) { return this.go$val.Get(url, callback); };
	go$pkg.init = function() {
		Module.init([["", "", js.Object, ""]]);
		Module.methods = [["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [js.Object], false], ["Index", "", [Go$Int], [js.Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["String", "", [], [Go$String], false]];
		(go$ptrType(Module)).methods = [["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [js.Object], false], ["Index", "", [Go$Int], [js.Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["NewController", "", [Go$String, (go$funcType([(go$ptrType(Scope))], [], false))], [], false], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["String", "", [], [Go$String], false]];
		Scope.init([["", "", js.Object, ""]]);
		Scope.methods = [["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [js.Object], false], ["Index", "", [Go$Int], [js.Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["String", "", [], [Go$String], false]];
		(go$ptrType(Scope)).methods = [["Apply", "", [(go$funcType([], [], false))], [], false], ["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true], ["EvalAsync", "", [(go$funcType([], [], false))], [], false], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [js.Object], false], ["Index", "", [Go$Int], [js.Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["String", "", [], [Go$String], false]];
		JQueryElement.init([["", "", js.Object, ""]]);
		JQueryElement.methods = [["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [js.Object], false], ["Index", "", [Go$Int], [js.Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["String", "", [], [Go$String], false]];
		(go$ptrType(JQueryElement)).methods = [["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [js.Object], false], ["Index", "", [Go$Int], [js.Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["On", "", [Go$String, (go$funcType([(go$ptrType(Event))], [], false))], [], false], ["Prop", "", [Go$String], [js.Object], false], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["SetProp", "", [go$emptyInterface, go$emptyInterface], [], false], ["SetVal", "", [go$emptyInterface], [], false], ["String", "", [], [Go$String], false], ["Val", "", [], [js.Object], false]];
		Event.init([["", "", js.Object, ""], ["KeyCode", "", Go$Int, "js:\"keyCode\""]]);
		Event.methods = [["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [js.Object], false], ["Index", "", [Go$Int], [js.Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["String", "", [], [Go$String], false]];
		(go$ptrType(Event)).methods = [["Bool", "", [], [Go$Bool], false], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true], ["Float", "", [], [Go$Float64], false], ["Get", "", [Go$String], [js.Object], false], ["Index", "", [Go$Int], [js.Object], false], ["Int", "", [], [Go$Int], false], ["Interface", "", [], [go$emptyInterface], false], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["IsNull", "", [], [Go$Bool], false], ["IsUndefined", "", [], [Go$Bool], false], ["Length", "", [], [Go$Int], false], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true], ["PreventDefault", "", [], [], false], ["Set", "", [Go$String, go$emptyInterface], [], false], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false], ["String", "", [], [Go$String], false]];
		HttpService.init([]);
		(go$ptrType(HttpService)).methods = [["Get", "", [Go$String, (go$funcType([Go$String, Go$Int], [], false))], [], false]];
		go$pkg.HTTP = new HttpService.Ptr();
	}
	return go$pkg;
})();
go$packages["math"] = (function() {
	var go$pkg = {}, Abs, Inf, NaN, IsNaN, IsInf, normalize, Exp, expm1, Frexp, frexp, hypot, Ldexp, Log, log10, Log2, log2, log1p, Mod, remainder, Sqrt, Float32bits, Float64bits, Float64frombits, pow10tab;
	Abs = go$pkg.Abs = Math.abs;
	Inf = go$pkg.Inf = function(sign) { return sign >= 0 ? 1/0 : -1/0; };
	NaN = go$pkg.NaN = function() { return 0/0; };
	IsNaN = go$pkg.IsNaN = function(f) { return f !== f; };
	IsInf = go$pkg.IsInf = function(f, sign) { if (f === -1/0) { return sign <= 0; } if (f === 1/0) { return sign >= 0; } return false; };
	normalize = function(x) {
		var y, exp$1, _tuple, _tuple$1;
		y = 0;
		exp$1 = 0;
		if (Abs(x) < 2.2250738585072014e-308) {
			_tuple = [x * 4.503599627370496e+15, -52], y = _tuple[0], exp$1 = _tuple[1];
			return [y, exp$1];
		}
		_tuple$1 = [x, 0], y = _tuple$1[0], exp$1 = _tuple$1[1];
		return [y, exp$1];
	};
	Exp = go$pkg.Exp = Math.exp;
	expm1 = function(x) {
		var absx, sign, c, k, _tuple, hi, lo, t, hfx, hxs, r1, t$1, e, y, x$1, x$2, x$3, t$2, y$1, x$4, x$5, t$3, y$2, x$6, x$7;
		if (IsInf(x, 1) || IsNaN(x)) {
			return x;
		} else if (IsInf(x, -1)) {
			return -1;
		}
		absx = x;
		sign = false;
		if (x < 0) {
			absx = -absx;
			sign = true;
		}
		if (absx >= 38.816242111356935) {
			if (absx >= 709.782712893384) {
				return Inf(1);
			}
			if (sign) {
				return -1;
			}
		}
		c = 0;
		k = 0;
		if (absx > 0.34657359027997264) {
			_tuple = [0, 0], hi = _tuple[0], lo = _tuple[1];
			if (absx < 1.0397207708399179) {
				if (!sign) {
					hi = x - 0.6931471803691238;
					lo = 1.9082149292705877e-10;
					k = 1;
				} else {
					hi = x + 0.6931471803691238;
					lo = -1.9082149292705877e-10;
					k = -1;
				}
			} else {
				if (!sign) {
					k = (1.4426950408889634 * x + 0.5 >> 0);
				} else {
					k = (1.4426950408889634 * x - 0.5 >> 0);
				}
				t = k;
				hi = x - t * 0.6931471803691238;
				lo = t * 1.9082149292705877e-10;
			}
			x = hi - lo;
			c = (hi - x) - lo;
		} else if (absx < 5.551115123125783e-17) {
			return x;
		} else {
			k = 0;
		}
		hfx = 0.5 * x;
		hxs = x * hfx;
		r1 = 1 + hxs * (-0.03333333333333313 + hxs * (0.0015873015872548146 + hxs * (-7.93650757867488e-05 + hxs * (4.008217827329362e-06 + hxs * -2.0109921818362437e-07))));
		t$1 = 3 - r1 * hfx;
		e = hxs * ((r1 - t$1) / (6 - x * t$1));
		if (!((k === 0))) {
			e = x * (e - c) - c;
			e = e - (hxs);
			if (k === -1) {
				return 0.5 * (x - e) - 0.5;
			} else if (k === 1) {
				if (x < -0.25) {
					return -2 * (e - (x + 0.5));
				}
				return 1 + 2 * (x - e);
			} else if (k <= -2 || k > 56) {
				y = 1 - (e - x);
				y = Float64frombits((x$1 = Float64bits(y), x$2 = go$shiftLeft64(new Go$Uint64(0, k), 52), new Go$Uint64(x$1.high + x$2.high, x$1.low + x$2.low)));
				return y - 1;
			}
			if (k < 20) {
				t$2 = Float64frombits((x$3 = go$shiftRightUint64(new Go$Uint64(2097152, 0), (k >>> 0)), new Go$Uint64(1072693248 - x$3.high, 0 - x$3.low)));
				y$1 = t$2 - (e - x);
				y$1 = Float64frombits((x$4 = Float64bits(y$1), x$5 = go$shiftLeft64(new Go$Uint64(0, k), 52), new Go$Uint64(x$4.high + x$5.high, x$4.low + x$5.low)));
				return y$1;
			}
			t$3 = Float64frombits(new Go$Uint64(0, (((1023 - k >> 0)) << 52 >> 0)));
			y$2 = x - (e + t$3);
			y$2 = y$2 + 1;
			y$2 = Float64frombits((x$6 = Float64bits(y$2), x$7 = go$shiftLeft64(new Go$Uint64(0, k), 52), new Go$Uint64(x$6.high + x$7.high, x$6.low + x$7.low)));
			return y$2;
		}
		return x - (x * e - hxs);
	};
	Frexp = go$pkg.Frexp = function(f) { return frexp(f); };
	frexp = function(f) {
		var frac, exp$1, _tuple, _tuple$1, _tuple$2, x, x$1;
		frac = 0;
		exp$1 = 0;
		if (f === 0) {
			_tuple = [f, 0], frac = _tuple[0], exp$1 = _tuple[1];
			return [frac, exp$1];
		} else if (IsInf(f, 0) || IsNaN(f)) {
			_tuple$1 = [f, 0], frac = _tuple$1[0], exp$1 = _tuple$1[1];
			return [frac, exp$1];
		}
		_tuple$2 = normalize(f), f = _tuple$2[0], exp$1 = _tuple$2[1];
		x = Float64bits(f);
		exp$1 = exp$1 + (((((x$1 = go$shiftRightUint64(x, 52), new Go$Uint64(x$1.high & 0, (x$1.low & 2047) >>> 0)).low >> 0) - 1023 >> 0) + 1 >> 0)) >> 0;
		x = new Go$Uint64(x.high &~ 2146435072, (x.low &~ 0) >>> 0);
		x = new Go$Uint64(x.high | 1071644672, (x.low | 0) >>> 0);
		frac = Float64frombits(x);
		return [frac, exp$1];
	};
	hypot = function(p, q) {
		var _tuple;
		if (IsInf(p, 0) || IsInf(q, 0)) {
			return Inf(1);
		} else if (IsNaN(p) || IsNaN(q)) {
			return NaN();
		}
		if (p < 0) {
			p = -p;
		}
		if (q < 0) {
			q = -q;
		}
		if (p < q) {
			_tuple = [q, p], p = _tuple[0], q = _tuple[1];
		}
		if (p === 0) {
			return 0;
		}
		q = q / p;
		return p * Sqrt(1 + q * q);
	};
	Ldexp = go$pkg.Ldexp = go$ldexp;
	Log = go$pkg.Log = Math.log;
	log10 = function(x) {
		return Log(x) * 0.4342944819032518;
	};
	Log2 = go$pkg.Log2 = function(x) { return log2(x); };
	log2 = function(x) {
		var _tuple, frac, exp$1;
		_tuple = Frexp(x), frac = _tuple[0], exp$1 = _tuple[1];
		return Log(frac) * 1.4426950408889634 + exp$1;
	};
	log1p = function(x) {
		var absx, f, iu, k, c, u, x$1, x$2, hfsq, _tuple, s, R, z;
		if (x < -1 || IsNaN(x)) {
			return NaN();
		} else if (x === -1) {
			return Inf(-1);
		} else if (IsInf(x, 1)) {
			return Inf(1);
		}
		absx = x;
		if (absx < 0) {
			absx = -absx;
		}
		f = 0;
		iu = new Go$Uint64(0, 0);
		k = 1;
		if (absx < 0.41421356237309503) {
			if (absx < 1.862645149230957e-09) {
				if (absx < 5.551115123125783e-17) {
					return x;
				}
				return x - x * x * 0.5;
			}
			if (x > -0.2928932188134525) {
				k = 0;
				f = x;
				iu = new Go$Uint64(0, 1);
			}
		}
		c = 0;
		if (!((k === 0))) {
			u = 0;
			if (absx < 9.007199254740992e+15) {
				u = 1 + x;
				iu = Float64bits(u);
				k = ((x$1 = go$shiftRightUint64(iu, 52), new Go$Uint64(x$1.high - 0, x$1.low - 1023)).low >> 0);
				if (k > 0) {
					c = 1 - (u - x);
				} else {
					c = x - (u - 1);
					c = c / (u);
				}
			} else {
				u = x;
				iu = Float64bits(u);
				k = ((x$2 = go$shiftRightUint64(iu, 52), new Go$Uint64(x$2.high - 0, x$2.low - 1023)).low >> 0);
				c = 0;
			}
			iu = new Go$Uint64(iu.high & 1048575, (iu.low & 4294967295) >>> 0);
			if ((iu.high < 434334 || (iu.high === 434334 && iu.low < 1719614413))) {
				u = Float64frombits(new Go$Uint64(iu.high | 1072693248, (iu.low | 0) >>> 0));
			} else {
				k = k + 1 >> 0;
				u = Float64frombits(new Go$Uint64(iu.high | 1071644672, (iu.low | 0) >>> 0));
				iu = go$shiftRightUint64((new Go$Uint64(1048576 - iu.high, 0 - iu.low)), 2);
			}
			f = u - 1;
		}
		hfsq = 0.5 * f * f;
		_tuple = [0, 0, 0], s = _tuple[0], R = _tuple[1], z = _tuple[2];
		if ((iu.high === 0 && iu.low === 0)) {
			if (f === 0) {
				if (k === 0) {
					return 0;
				} else {
					c = c + (k * 1.9082149292705877e-10);
					return k * 0.6931471803691238 + c;
				}
			}
			R = hfsq * (1 - 0.6666666666666666 * f);
			if (k === 0) {
				return f - R;
			}
			return k * 0.6931471803691238 - ((R - (k * 1.9082149292705877e-10 + c)) - f);
		}
		s = f / (2 + f);
		z = s * s;
		R = z * (0.6666666666666735 + z * (0.3999999999940942 + z * (0.2857142874366239 + z * (0.22222198432149784 + z * (0.1818357216161805 + z * (0.15313837699209373 + z * 0.14798198605116586))))));
		if (k === 0) {
			return f - (hfsq - s * (hfsq + R));
		}
		return k * 0.6931471803691238 - ((hfsq - (s * (hfsq + R) + (k * 1.9082149292705877e-10 + c))) - f);
	};
	Mod = go$pkg.Mod = function(x, y) { return x % y; };
	remainder = function(x, y) {
		var sign, yHalf;
		if (IsNaN(x) || IsNaN(y) || IsInf(x, 0) || (y === 0)) {
			return NaN();
		} else if (IsInf(y, 0)) {
			return x;
		}
		sign = false;
		if (x < 0) {
			x = -x;
			sign = true;
		}
		if (y < 0) {
			y = -y;
		}
		if (x === y) {
			return 0;
		}
		if (y <= 8.988465674311579e+307) {
			x = Mod(x, y + y);
		}
		if (y < 4.450147717014403e-308) {
			if (x + x > y) {
				x = x - (y);
				if (x + x >= y) {
					x = x - (y);
				}
			}
		} else {
			yHalf = 0.5 * y;
			if (x > yHalf) {
				x = x - (y);
				if (x >= yHalf) {
					x = x - (y);
				}
			}
		}
		if (sign) {
			x = -x;
		}
		return x;
	};
	Sqrt = go$pkg.Sqrt = Math.sqrt;
	Float32bits = go$pkg.Float32bits = go$float32bits;
	Float64bits = go$pkg.Float64bits = function(f) {
			var s, e, x, x$1, x$2, x$3;
			if (f === 0) {
				if (f === 0 && 1 / f === 1 / -0) {
					return new Go$Uint64(2147483648, 0);
				}
				return new Go$Uint64(0, 0);
			}
			if (f !== f) {
				return new Go$Uint64(2146959360, 1);
			}
			s = new Go$Uint64(0, 0);
			if (f < 0) {
				s = new Go$Uint64(2147483648, 0);
				f = -f;
			}
			e = 1075;
			while (f >= 9.007199254740992e+15) {
				f = f / 2;
				if (e === 2047) {
					break;
				}
				e = e + 1 >>> 0;
			}
			while (f < 4.503599627370496e+15) {
				e = e - 1 >>> 0;
				if (e === 0) {
					break;
				}
				f = f * 2;
			}
			return (x = (x$1 = go$shiftLeft64(new Go$Uint64(0, e), 52), new Go$Uint64(s.high | x$1.high, (s.low | x$1.low) >>> 0)), x$2 = (x$3 = new Go$Uint64(0, f), new Go$Uint64(x$3.high &~ 1048576, (x$3.low &~ 0) >>> 0)), new Go$Uint64(x.high | x$2.high, (x.low | x$2.low) >>> 0));
		};
	Float64frombits = go$pkg.Float64frombits = function(b) {
			var s, x, x$1, e, m;
			s = 1;
			if (!((x = new Go$Uint64(b.high & 2147483648, (b.low & 0) >>> 0), (x.high === 0 && x.low === 0)))) {
				s = -1;
			}
			e = (x$1 = go$shiftRightUint64(b, 52), new Go$Uint64(x$1.high & 0, (x$1.low & 2047) >>> 0));
			m = new Go$Uint64(b.high & 1048575, (b.low & 4294967295) >>> 0);
			if ((e.high === 0 && e.low === 2047)) {
				if ((m.high === 0 && m.low === 0)) {
					return s / 0;
				}
				return 0/0;
			}
			if (!((e.high === 0 && e.low === 0))) {
				m = new Go$Uint64(m.high + 1048576, m.low + 0);
			}
			if ((e.high === 0 && e.low === 0)) {
				e = new Go$Uint64(0, 1);
			}
			return go$ldexp(go$flatten64(m), ((e.low >> 0) - 1023 >> 0) - 52 >> 0) * s;
		};
	go$pkg.init = function() {
		pow10tab = go$makeNativeArray("Float64", 70, function() { return 0; });
		var i, _q, m;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (i < 70) {
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
			pow10tab[i] = pow10tab[m] * pow10tab[(i - m >> 0)];
			i = i + 1 >> 0;
		}
	}
	return go$pkg;
})();
go$packages["syscall"] = (function() {
	var go$pkg = {}, sync = go$packages["sync"], runtime = go$packages["runtime"], errors$1 = go$packages["errors"], attrList, mmapper, Errno, Timespec, Stat_t, Dirent, copyenv, Getenv, CloseOnExec, itoa, ByteSliceFromString, BytePtrFromString, ReadDirent, Getwd, ParseDirent, getAttrList, Syscall9, Syscall, Syscall6, RawSyscall, RawSyscall6, Read, Write, fcntl, Close, Exit, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Lstat, Open, Pread, Pwrite, read, Readlink, Seek, Stat, write, mmap, munmap, envOnce, envLock, env, envs, mapper, errors;
	attrList = go$pkg.attrList = go$newType(0, "Struct", "syscall.attrList", "attrList", "syscall", function(bitmapCount_, _$1_, CommonAttr_, VolAttr_, DirAttr_, FileAttr_, Forkattr_) {
		this.go$val = this;
		this.bitmapCount = bitmapCount_ !== undefined ? bitmapCount_ : 0;
		this._$1 = _$1_ !== undefined ? _$1_ : 0;
		this.CommonAttr = CommonAttr_ !== undefined ? CommonAttr_ : 0;
		this.VolAttr = VolAttr_ !== undefined ? VolAttr_ : 0;
		this.DirAttr = DirAttr_ !== undefined ? DirAttr_ : 0;
		this.FileAttr = FileAttr_ !== undefined ? FileAttr_ : 0;
		this.Forkattr = Forkattr_ !== undefined ? Forkattr_ : 0;
	});
	mmapper = go$pkg.mmapper = go$newType(0, "Struct", "syscall.mmapper", "mmapper", "syscall", function(Mutex_, active_, mmap_, munmap_) {
		this.go$val = this;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new sync.Mutex.Ptr();
		this.active = active_ !== undefined ? active_ : false;
		this.mmap = mmap_ !== undefined ? mmap_ : go$throwNilPointerError;
		this.munmap = munmap_ !== undefined ? munmap_ : go$throwNilPointerError;
	});
	mmapper.prototype.Lock = function() { return this.go$val.Lock(); };
	mmapper.Ptr.prototype.Lock = function() { return this.Mutex.Lock(); };
	mmapper.prototype.Unlock = function() { return this.go$val.Unlock(); };
	mmapper.Ptr.prototype.Unlock = function() { return this.Mutex.Unlock(); };
	Errno = go$pkg.Errno = go$newType(4, "Uintptr", "syscall.Errno", "Errno", "syscall", null);
	Timespec = go$pkg.Timespec = go$newType(0, "Struct", "syscall.Timespec", "Timespec", "syscall", function(Sec_, Nsec_) {
		this.go$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : new Go$Int64(0, 0);
		this.Nsec = Nsec_ !== undefined ? Nsec_ : new Go$Int64(0, 0);
	});
	Stat_t = go$pkg.Stat_t = go$newType(0, "Struct", "syscall.Stat_t", "Stat_t", "syscall", function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.go$val = this;
		this.Dev = Dev_ !== undefined ? Dev_ : 0;
		this.Mode = Mode_ !== undefined ? Mode_ : 0;
		this.Nlink = Nlink_ !== undefined ? Nlink_ : 0;
		this.Ino = Ino_ !== undefined ? Ino_ : new Go$Uint64(0, 0);
		this.Uid = Uid_ !== undefined ? Uid_ : 0;
		this.Gid = Gid_ !== undefined ? Gid_ : 0;
		this.Rdev = Rdev_ !== undefined ? Rdev_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.Atimespec = Atimespec_ !== undefined ? Atimespec_ : new Timespec.Ptr();
		this.Mtimespec = Mtimespec_ !== undefined ? Mtimespec_ : new Timespec.Ptr();
		this.Ctimespec = Ctimespec_ !== undefined ? Ctimespec_ : new Timespec.Ptr();
		this.Birthtimespec = Birthtimespec_ !== undefined ? Birthtimespec_ : new Timespec.Ptr();
		this.Size = Size_ !== undefined ? Size_ : new Go$Int64(0, 0);
		this.Blocks = Blocks_ !== undefined ? Blocks_ : new Go$Int64(0, 0);
		this.Blksize = Blksize_ !== undefined ? Blksize_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Gen = Gen_ !== undefined ? Gen_ : 0;
		this.Lspare = Lspare_ !== undefined ? Lspare_ : 0;
		this.Qspare = Qspare_ !== undefined ? Qspare_ : go$makeNativeArray("Int64", 2, function() { return new Go$Int64(0, 0); });
	});
	Dirent = go$pkg.Dirent = go$newType(0, "Struct", "syscall.Dirent", "Dirent", "syscall", function(Ino_, Seekoff_, Reclen_, Namlen_, Type_, Name_, Pad_cgo_0_) {
		this.go$val = this;
		this.Ino = Ino_ !== undefined ? Ino_ : new Go$Uint64(0, 0);
		this.Seekoff = Seekoff_ !== undefined ? Seekoff_ : new Go$Uint64(0, 0);
		this.Reclen = Reclen_ !== undefined ? Reclen_ : 0;
		this.Namlen = Namlen_ !== undefined ? Namlen_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Name = Name_ !== undefined ? Name_ : go$makeNativeArray("Int8", 1024, function() { return 0; });
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 3, function() { return 0; });
	});
	copyenv = function() {
		var _ref, _i, _slice, _index, s, i, j, key, ok, _tuple, _entry, _key;
		env = new Go$Map();
		_ref = envs;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			j = 0;
			while (j < s.length) {
				if (s.charCodeAt(j) === 61) {
					key = s.substring(0, j);
					if (_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]), ok = _tuple[1], !ok) {
						_key = key, (env || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: i };
					}
					break;
				}
				j = j + 1 >> 0;
			}
			_i++;
		}
	};
	Getenv = go$pkg.Getenv = function(key) {
		var value, found, _tuple, _tuple$1, _entry, i, ok, _tuple$2, _slice, _index, s, i$1, _tuple$3, _tuple$4;
		value = "";
		found = false;
		var go$deferred = [];
		try {
			envOnce.Do(copyenv);
			if (key.length === 0) {
				_tuple = ["", false], value = _tuple[0], found = _tuple[1];
				return [value, found];
			}
			envLock.RLock();
			go$deferred.push({ recv: envLock, method: "RUnlock", args: [] });
			_tuple$1 = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]), i = _tuple$1[0], ok = _tuple$1[1];
			if (!ok) {
				_tuple$2 = ["", false], value = _tuple$2[0], found = _tuple$2[1];
				return [value, found];
			}
			s = (_slice = envs, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i$1 = 0;
			while (i$1 < s.length) {
				if (s.charCodeAt(i$1) === 61) {
					_tuple$3 = [s.substring((i$1 + 1 >> 0)), true], value = _tuple$3[0], found = _tuple$3[1];
					return [value, found];
				}
				i$1 = i$1 + 1 >> 0;
			}
			_tuple$4 = ["", false], value = _tuple$4[0], found = _tuple$4[1];
			return [value, found];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [value, found];
		}
	};
	CloseOnExec = go$pkg.CloseOnExec = function(fd) {
		fcntl(fd, 2, 1);
	};
	itoa = function(val) {
		var buf, i, _r, _q;
		if (val < 0) {
			return "-" + itoa(-val);
		}
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		i = 31;
		while (val >= 10) {
			buf[i] = (((_r = val % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			i = i - 1 >> 0;
			val = (_q = val / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		buf[i] = ((val + 48 >> 0) << 24 >>> 24);
		return go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(buf), i));
	};
	ByteSliceFromString = go$pkg.ByteSliceFromString = function(s) {
		var i, a;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === 0) {
				return [(go$sliceType(Go$Uint8)).nil, new Errno(22)];
			}
			i = i + 1 >> 0;
		}
		a = (go$sliceType(Go$Uint8)).make(s.length + 1 >> 0, 0, function() { return 0; });
		go$copyString(a, s);
		return [a, null];
	};
	BytePtrFromString = go$pkg.BytePtrFromString = function(s) {
		var _tuple, a, err, v, _slice, _index, _slice$1, _index$1;
		_tuple = ByteSliceFromString(s), a = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Go$Uint8)).nil, err];
		}
		return [new (go$ptrType(Go$Uint8))(function() { return (_slice = a, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = a, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); }), null];
	};
	Timespec.Ptr.prototype.Unix = function() {
		var sec, nsec, ts, _tuple;
		sec = new Go$Int64(0, 0);
		nsec = new Go$Int64(0, 0);
		ts = this;
		_tuple = [ts.Sec, ts.Nsec], sec = _tuple[0], nsec = _tuple[1];
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.go$val.Unix(); };
	Timespec.Ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = go$mul64(ts.Sec, new Go$Int64(0, 1000000000)), x$1 = ts.Nsec, new Go$Int64(x.high + x$1.high, x.low + x$1.low));
	};
	Timespec.prototype.Nano = function() { return this.go$val.Nano(); };
	ReadDirent = go$pkg.ReadDirent = function(fd, buf) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = Getdirentries(fd, buf, new Uint8Array(8)), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	Getwd = go$pkg.Getwd = function() {
		var buf, _tuple, attrs, err, _slice, _index, _slice$1, _index$1, wd;
		buf = (go$sliceType(Go$Uint8)).make(2048, 0, function() { return 0; });
		_tuple = getAttrList(".", new attrList.Ptr(0, 0, 134217728, 0, 0, 0, 0), buf, 0), attrs = _tuple[0], err = _tuple[1];
		if (go$interfaceIsEqual(err, null) && (attrs.length === 1) && (_slice = attrs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).length >= 2) {
			wd = go$bytesToString((_slice$1 = attrs, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
			if ((wd.charCodeAt(0) === 47) && (wd.charCodeAt((wd.length - 1 >> 0)) === 0)) {
				return [wd.substring(0, (wd.length - 1 >> 0)), null];
			}
		}
		return ["", new Errno(45)];
	};
	ParseDirent = go$pkg.ParseDirent = function(buf, max, names) {
		var consumed, count, newnames, origlen, dirent, _array, _struct, _view, x, bytes, name, _tuple;
		consumed = 0;
		count = 0;
		newnames = (go$sliceType(Go$String)).nil;
		origlen = buf.length;
		while (!((max === 0)) && buf.length > 0) {
			dirent = [undefined];
			dirent[0] = (_array = go$sliceToArray(buf), _struct = new Dirent.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new Go$Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Seekoff = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Namlen = _view.getUint16(18, true), _struct.Type = _view.getUint8(20, true), _struct.Name = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 21, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 1045, _array.buffer.byteLength)), _struct);
			if (dirent[0].Reclen === 0) {
				buf = (go$sliceType(Go$Uint8)).nil;
				break;
			}
			buf = go$subslice(buf, dirent[0].Reclen);
			if ((x = dirent[0].Ino, (x.high === 0 && x.low === 0))) {
				continue;
			}
			bytes = go$sliceToArray(new (go$sliceType(Go$Uint8))(dirent[0].Name));
			name = go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(bytes), 0, dirent[0].Namlen));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - 1 >> 0;
			count = count + 1 >> 0;
			names = go$append(names, name);
		}
		_tuple = [origlen - buf.length >> 0, count, names], consumed = _tuple[0], count = _tuple[1], newnames = _tuple[2];
		return [consumed, count, newnames];
	};
	getAttrList = function(path, attrList$1, attrBuf, options) {
		var attrs, err, _tuple, _p0, _tuple$1, _tuple$2, _tuple$3, _array, _struct, _view, e1, _tuple$4, _slice, _index, size, dat, i, header, _tuple$5, _slice$1, _index$1, datOff, _slice$2, _index$2, attrLen, _tuple$6, end, r, _r;
		attrs = (go$sliceType((go$sliceType(Go$Uint8)))).nil;
		err = null;
		if (attrBuf.length < 4) {
			_tuple = [(go$sliceType((go$sliceType(Go$Uint8)))).nil, errors$1.New("attrBuf too small")], attrs = _tuple[0], err = _tuple[1];
			return [attrs, err];
		}
		attrList$1.bitmapCount = 5;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple$1 = BytePtrFromString(path), _p0 = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$2 = [(go$sliceType((go$sliceType(Go$Uint8)))).nil, err], attrs = _tuple$2[0], err = _tuple$2[1];
			return [attrs, err];
		}
		_array = new Uint8Array(24);
		_tuple$3 = Syscall6(220, _p0, _array, go$sliceToArray(attrBuf), (attrBuf.length >>> 0), (options >>> 0), 0), e1 = _tuple$3[2];
		_struct = attrList$1, _view = new DataView(_array.buffer, _array.byteOffset), _struct.bitmapCount = _view.getUint16(0, true), _struct._$1 = _view.getUint16(2, true), _struct.CommonAttr = _view.getUint32(4, true), _struct.VolAttr = _view.getUint32(8, true), _struct.DirAttr = _view.getUint32(12, true), _struct.FileAttr = _view.getUint32(16, true), _struct.Forkattr = _view.getUint32(20, true);
		if (!((e1 === 0))) {
			_tuple$4 = [(go$sliceType((go$sliceType(Go$Uint8)))).nil, new Errno(e1)], attrs = _tuple$4[0], err = _tuple$4[1];
			return [attrs, err];
		}
		size = (_slice = attrBuf, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		dat = attrBuf;
		if ((size >> 0) < attrBuf.length) {
			dat = go$subslice(dat, 0, size);
		}
		dat = go$subslice(dat, 4);
		i = 0;
		while ((i >> 0) < dat.length) {
			header = [undefined];
			header[0] = go$subslice(dat, i);
			if (header[0].length < 8) {
				_tuple$5 = [attrs, errors$1.New("truncated attribute header")], attrs = _tuple$5[0], err = _tuple$5[1];
				return [attrs, err];
			}
			datOff = (_slice$1 = header[0], _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			attrLen = (_slice$2 = header[0], _index$2 = 4, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			if (datOff < 0 || ((datOff >>> 0) + attrLen >>> 0) > (dat.length >>> 0)) {
				_tuple$6 = [attrs, errors$1.New("truncated results; attrBuf too small")], attrs = _tuple$6[0], err = _tuple$6[1];
				return [attrs, err];
			}
			end = (datOff >>> 0) + attrLen >>> 0;
			attrs = go$append(attrs, go$subslice(dat, datOff, end));
			i = end;
			if (r = (_r = i % 4, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")), !((r === 0))) {
				i = i + (((4 - r >>> 0))) >>> 0;
			}
		}
		return [attrs, err];
	};
	Syscall9 = go$pkg.Syscall9 = function() {
		throw go$panic("Native function not implemented: Syscall9");
	};
	Syscall = go$pkg.Syscall = function() {
		throw go$panic("Native function not implemented: Syscall");
	};
	Syscall6 = go$pkg.Syscall6 = function() {
		throw go$panic("Native function not implemented: Syscall6");
	};
	RawSyscall = go$pkg.RawSyscall = function() {
		throw go$panic("Native function not implemented: RawSyscall");
	};
	RawSyscall6 = go$pkg.RawSyscall6 = function() {
		throw go$panic("Native function not implemented: RawSyscall6");
	};
	mmapper.Ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var data, err, m, _tuple, _tuple$1, addr, errno, _tuple$2, sl, b, v, _slice, _index, _slice$1, _index$1, p, _key, _tuple$3;
		data = (go$sliceType(Go$Uint8)).nil;
		err = null;
		var go$deferred = [];
		try {
			m = this;
			if (length <= 0) {
				_tuple = [(go$sliceType(Go$Uint8)).nil, new Errno(22)], data = _tuple[0], err = _tuple[1];
				return [data, err];
			}
			_tuple$1 = m.mmap(0, (length >>> 0), prot, flags, fd, offset), addr = _tuple$1[0], errno = _tuple$1[1];
			if (!(go$interfaceIsEqual(errno, null))) {
				_tuple$2 = [(go$sliceType(Go$Uint8)).nil, errno], data = _tuple$2[0], err = _tuple$2[1];
				return [data, err];
			}
			sl = new (go$structType([["addr", "syscall", Go$Uintptr, ""], ["len", "syscall", Go$Int, ""], ["cap", "syscall", Go$Int, ""]])).Ptr(addr, length, length);
			b = sl;
			p = new (go$ptrType(Go$Uint8))(function() { return (_slice = b, _index = (b.capacity - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = b, _index$1 = b.capacity - 1 >> 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); });
			m.Mutex.Lock();
			go$deferred.push({ recv: m, method: "Unlock", args: [] });
			_key = p, (m.active || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: b };
			_tuple$3 = [b, null], data = _tuple$3[0], err = _tuple$3[1];
			return [data, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [data, err];
		}
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.go$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.Ptr.prototype.Munmap = function(data) {
		var err, m, v, _slice, _index, _slice$1, _index$1, p, _entry, b, errno;
		err = null;
		var go$deferred = [];
		try {
			m = this;
			if ((data.length === 0) || !((data.length === data.capacity))) {
				err = new Errno(22);
				return err;
			}
			p = new (go$ptrType(Go$Uint8))(function() { return (_slice = data, _index = (data.capacity - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = data, _index$1 = data.capacity - 1 >> 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); });
			m.Mutex.Lock();
			go$deferred.push({ recv: m, method: "Unlock", args: [] });
			b = (_entry = m.active[p.go$key()], _entry !== undefined ? _entry.v : (go$sliceType(Go$Uint8)).nil);
			if (b === (go$sliceType(Go$Uint8)).nil || !(go$sliceIsEqual(b, 0, data, 0))) {
				err = new Errno(22);
				return err;
			}
			if (errno = m.munmap(go$sliceToArray(b), (b.length >>> 0)), !(go$interfaceIsEqual(errno, null))) {
				err = errno;
				return err;
			}
			delete m.active[p.go$key()];
			err = null;
			return err;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return err;
		}
	};
	mmapper.prototype.Munmap = function(data) { return this.go$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.go$val;
		if (0 <= (e >> 0) && (e >> 0) < 106) {
			s = errors[e];
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	go$ptrType(Errno).prototype.Error = function() { return new Errno(this.go$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.go$val;
		return (e === 4) || (e === 24) || (new Errno(e)).Timeout();
	};
	go$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.go$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.go$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	go$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.go$get()).Timeout(); };
	Read = go$pkg.Read = function(fd, p) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = read(fd, p), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	Write = go$pkg.Write = function(fd, p) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = write(fd, p), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	fcntl = function(fd, cmd, arg) {
		var val, err, _tuple, r0, e1;
		val = 0;
		err = null;
		_tuple = Syscall(92, (fd >>> 0), (cmd >>> 0), (arg >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [val, err];
	};
	Close = go$pkg.Close = function(fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(6, (fd >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Exit = go$pkg.Exit = function(code) {
		Syscall(1, (code >>> 0), 0, 0);
		return;
	};
	Fchdir = go$pkg.Fchdir = function(fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(13, (fd >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fchmod = go$pkg.Fchmod = function(fd, mode) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(124, (fd >>> 0), (mode >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fchown = go$pkg.Fchown = function(fd, uid, gid) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(123, (fd >>> 0), (uid >>> 0), (gid >>> 0)), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fstat = go$pkg.Fstat = function(fd, stat) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, (fd >>> 0), _array, 0), e1 = _tuple[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new Go$Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new Go$Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new Go$Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new Go$Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new Go$Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new Go$Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new Go$Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new Go$Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new Go$Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new Go$Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new (go$nativeArray("Int64"))(_array.buffer, go$min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fsync = go$pkg.Fsync = function(fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(95, (fd >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Ftruncate = go$pkg.Ftruncate = function(fd, length) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(201, (fd >>> 0), (length.low >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Getdirentries = go$pkg.Getdirentries = function(fd, buf, basep) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (buf.length > 0) {
			_p0 = go$sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(344, (fd >>> 0), _p0, (buf.length >>> 0), basep, 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Lstat = go$pkg.Lstat = function(path, stat) {
		var err, _p0, _tuple, _tuple$1, _array, _struct, _view, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, _p0, _array, 0), e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new Go$Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new Go$Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new Go$Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new Go$Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new Go$Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new Go$Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new Go$Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new Go$Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new Go$Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new Go$Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new (go$nativeArray("Int64"))(_array.buffer, go$min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Open = go$pkg.Open = function(path, mode, perm) {
		var fd, err, _p0, _tuple, _tuple$1, r0, e1;
		fd = 0;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [fd, err];
		}
		_tuple$1 = Syscall(5, _p0, (mode >>> 0), (perm >>> 0)), r0 = _tuple$1[0], e1 = _tuple$1[2];
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	Pread = go$pkg.Pread = function(fd, p, offset) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = go$sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(153, (fd >>> 0), _p0, (p.length >>> 0), (offset.low >>> 0), 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Pwrite = go$pkg.Pwrite = function(fd, p, offset) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = go$sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(154, (fd >>> 0), _p0, (p.length >>> 0), (offset.low >>> 0), 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	read = function(fd, p) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = go$sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(3, (fd >>> 0), _p0, (p.length >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Readlink = go$pkg.Readlink = function(path, buf) {
		var n, err, _p0, _tuple, _p1, _tuple$1, r0, e1;
		n = 0;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [n, err];
		}
		_p1 = 0;
		if (buf.length > 0) {
			_p1 = go$sliceToArray(buf);
		} else {
			_p1 = new Uint8Array(0);
		}
		_tuple$1 = Syscall(58, _p0, _p1, (buf.length >>> 0)), r0 = _tuple$1[0], e1 = _tuple$1[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Seek = go$pkg.Seek = function(fd, offset, whence) {
		var newoffset, err, _tuple, r0, e1;
		newoffset = new Go$Int64(0, 0);
		err = null;
		_tuple = Syscall(199, (fd >>> 0), (offset.low >>> 0), (whence >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		newoffset = new Go$Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [newoffset, err];
	};
	Stat = go$pkg.Stat = function(path, stat) {
		var err, _p0, _tuple, _tuple$1, _array, _struct, _view, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(338, _p0, _array, 0), e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new Go$Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new Go$Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new Go$Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new Go$Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new Go$Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new Go$Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new Go$Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new Go$Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new Go$Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new Go$Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new (go$nativeArray("Int64"))(_array.buffer, go$min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	write = function(fd, p) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = go$sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(4, (fd >>> 0), _p0, (p.length >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var ret, err, _tuple, r0, e1;
		ret = 0;
		err = null;
		_tuple = Syscall6(197, addr, length, (prot >>> 0), (flag >>> 0), (fd >>> 0), (pos.low >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		ret = r0;
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(73, addr, length, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};

			if (go$pkg.Syscall15 !== undefined) { // windows
				Syscall = Syscall6 = Syscall9 = Syscall12 = Syscall15 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.Syscall9 = go$pkg.Syscall12 = go$pkg.Syscall15 = loadlibrary = getprocaddress = function() { throw new Error("Syscalls not available."); };
				getStdHandle = GetCommandLine = go$pkg.GetCommandLine = function() {};
				CommandLineToArgv = go$pkg.CommandLineToArgv = function() { return [null, {}]; };
				Getenv = go$pkg.Getenv = function(key) { return ["", false]; };
				GetTimeZoneInformation = go$pkg.GetTimeZoneInformation = function() { return [undefined, true]; };
			} else if (typeof process === "undefined") {
				var syscall = function() { throw new Error("Syscalls not available."); };
				if (typeof go$syscall !== "undefined") {
					syscall = go$syscall;
				}
				Syscall = Syscall6 = RawSyscall = RawSyscall6 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.RawSyscall = go$pkg.RawSyscall6 = syscall;
				envs = new (go$sliceType(Go$String))(new Array(0));
			} else {
				try {
					var syscall = require("syscall");
					Syscall = go$pkg.Syscall = syscall.Syscall;
					Syscall6 = go$pkg.Syscall6 = syscall.Syscall6;
					RawSyscall = go$pkg.RawSyscall = syscall.Syscall;
					RawSyscall6 = go$pkg.RawSyscall6 = syscall.Syscall6;
				} catch (e) {
					Syscall = Syscall6 = RawSyscall = RawSyscall6 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.RawSyscall = go$pkg.RawSyscall6 = function() { throw e; };
				}
				BytePtrFromString = go$pkg.BytePtrFromString = function(s) { return [go$stringToBytes(s, true), null]; };

				var envkeys = Object.keys(process.env);
				envs = new (go$sliceType(Go$String))(new Array(envkeys.length));
				var i;
				for(i = 0; i < envkeys.length; i++) {
					envs.array[i] = envkeys[i] + "=" + process.env[envkeys[i]];
				}
			}
			go$pkg.init = function() {
		attrList.init([["bitmapCount", "syscall", Go$Uint16, ""], ["_", "syscall", Go$Uint16, ""], ["CommonAttr", "", Go$Uint32, ""], ["VolAttr", "", Go$Uint32, ""], ["DirAttr", "", Go$Uint32, ""], ["FileAttr", "", Go$Uint32, ""], ["Forkattr", "", Go$Uint32, ""]]);
		mmapper.init([["", "", sync.Mutex, ""], ["active", "syscall", (go$mapType((go$ptrType(Go$Uint8)), (go$sliceType(Go$Uint8)))), ""], ["mmap", "syscall", (go$funcType([Go$Uintptr, Go$Uintptr, Go$Int, Go$Int, Go$Int, Go$Int64], [Go$Uintptr, go$error], false)), ""], ["munmap", "syscall", (go$funcType([Go$Uintptr, Go$Uintptr], [go$error], false)), ""]]);
		(go$ptrType(mmapper)).methods = [["Lock", "", [], [], false], ["Mmap", "", [Go$Int, Go$Int64, Go$Int, Go$Int, Go$Int], [(go$sliceType(Go$Uint8)), go$error], false], ["Munmap", "", [(go$sliceType(Go$Uint8))], [go$error], false], ["Unlock", "", [], [], false]];
		Errno.methods = [["Error", "", [], [Go$String], false], ["Temporary", "", [], [Go$Bool], false], ["Timeout", "", [], [Go$Bool], false]];
		(go$ptrType(Errno)).methods = [["Error", "", [], [Go$String], false], ["Temporary", "", [], [Go$Bool], false], ["Timeout", "", [], [Go$Bool], false]];
		Timespec.init([["Sec", "", Go$Int64, ""], ["Nsec", "", Go$Int64, ""]]);
		(go$ptrType(Timespec)).methods = [["Nano", "", [], [Go$Int64], false], ["Unix", "", [], [Go$Int64, Go$Int64], false]];
		Stat_t.init([["Dev", "", Go$Int32, ""], ["Mode", "", Go$Uint16, ""], ["Nlink", "", Go$Uint16, ""], ["Ino", "", Go$Uint64, ""], ["Uid", "", Go$Uint32, ""], ["Gid", "", Go$Uint32, ""], ["Rdev", "", Go$Int32, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 4)), ""], ["Atimespec", "", Timespec, ""], ["Mtimespec", "", Timespec, ""], ["Ctimespec", "", Timespec, ""], ["Birthtimespec", "", Timespec, ""], ["Size", "", Go$Int64, ""], ["Blocks", "", Go$Int64, ""], ["Blksize", "", Go$Int32, ""], ["Flags", "", Go$Uint32, ""], ["Gen", "", Go$Uint32, ""], ["Lspare", "", Go$Int32, ""], ["Qspare", "", (go$arrayType(Go$Int64, 2)), ""]]);
		Dirent.init([["Ino", "", Go$Uint64, ""], ["Seekoff", "", Go$Uint64, ""], ["Reclen", "", Go$Uint16, ""], ["Namlen", "", Go$Uint16, ""], ["Type", "", Go$Uint8, ""], ["Name", "", (go$arrayType(Go$Int8, 1024)), ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 3)), ""]]);
		envOnce = new sync.Once.Ptr();
		envLock = new sync.RWMutex.Ptr();
		env = false;
		envs = (go$sliceType(Go$String)).nil;
		mapper = new mmapper.Ptr(new sync.Mutex.Ptr(), new Go$Map(), mmap, munmap);
		go$pkg.Stdin = 0;
		go$pkg.Stdout = 1;
		go$pkg.Stderr = 2;
		errors = go$toNativeArray("String", ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
	}
	return go$pkg;
})();
go$packages["time"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], syscall = go$packages["syscall"], sync = go$packages["sync"], runtime = go$packages["runtime"], ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, data, startsWithLowerCase, nextStdChunk, match, lookup, appendUint, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, AfterFunc, readFile, open, closefd, preadn, absWeekday, absClock, fmtFrac, fmtInt, absDate, now, Now, Unix, isLeap, norm, Date, div, FixedZone, byteString, loadZoneData, loadZoneFile, get4, get2, loadZoneZip, initLocal, loadLocation, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, localLoc, localOnce, zoneinfo, badData, zoneDirs;
	ParseError = go$pkg.ParseError = go$newType(0, "Struct", "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.go$val = this;
		this.Layout = Layout_ !== undefined ? Layout_ : "";
		this.Value = Value_ !== undefined ? Value_ : "";
		this.LayoutElem = LayoutElem_ !== undefined ? LayoutElem_ : "";
		this.ValueElem = ValueElem_ !== undefined ? ValueElem_ : "";
		this.Message = Message_ !== undefined ? Message_ : "";
	});
	Time = go$pkg.Time = go$newType(0, "Struct", "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.go$val = this;
		this.sec = sec_ !== undefined ? sec_ : new Go$Int64(0, 0);
		this.nsec = nsec_ !== undefined ? nsec_ : 0;
		this.loc = loc_ !== undefined ? loc_ : (go$ptrType(Location)).nil;
	});
	Month = go$pkg.Month = go$newType(4, "Int", "time.Month", "Month", "time", null);
	Weekday = go$pkg.Weekday = go$newType(4, "Int", "time.Weekday", "Weekday", "time", null);
	Duration = go$pkg.Duration = go$newType(8, "Int64", "time.Duration", "Duration", "time", null);
	Location = go$pkg.Location = go$newType(0, "Struct", "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.zone = zone_ !== undefined ? zone_ : (go$sliceType(zone)).nil;
		this.tx = tx_ !== undefined ? tx_ : (go$sliceType(zoneTrans)).nil;
		this.cacheStart = cacheStart_ !== undefined ? cacheStart_ : new Go$Int64(0, 0);
		this.cacheEnd = cacheEnd_ !== undefined ? cacheEnd_ : new Go$Int64(0, 0);
		this.cacheZone = cacheZone_ !== undefined ? cacheZone_ : (go$ptrType(zone)).nil;
	});
	zone = go$pkg.zone = go$newType(0, "Struct", "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.offset = offset_ !== undefined ? offset_ : 0;
		this.isDST = isDST_ !== undefined ? isDST_ : false;
	});
	zoneTrans = go$pkg.zoneTrans = go$newType(0, "Struct", "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.go$val = this;
		this.when = when_ !== undefined ? when_ : new Go$Int64(0, 0);
		this.index = index_ !== undefined ? index_ : 0;
		this.isstd = isstd_ !== undefined ? isstd_ : false;
		this.isutc = isutc_ !== undefined ? isutc_ : false;
	});
	data = go$pkg.data = go$newType(0, "Struct", "time.data", "data", "time", function(p_, error_) {
		this.go$val = this;
		this.p = p_ !== undefined ? p_ : (go$sliceType(Go$Uint8)).nil;
		this.error = error_ !== undefined ? error_ : false;
	});
	startsWithLowerCase = function(str) {
		var c;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var prefix, std, suffix, i, c, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, ch, j, std$1, _tuple$25, _tuple$26;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (i < layout.length) {
			c = (layout.charCodeAt(i) >> 0);
			_ref = c;
			if (_ref === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tuple = [layout.substring(0, i), 257, layout.substring((i + 7 >> 0))], prefix = _tuple[0], std = _tuple[1], suffix = _tuple[2];
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tuple$1 = [layout.substring(0, i), 258, layout.substring((i + 3 >> 0))], prefix = _tuple$1[0], std = _tuple$1[1], suffix = _tuple$1[2];
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tuple$2 = [layout.substring(0, i), 261, layout.substring((i + 6 >> 0))], prefix = _tuple$2[0], std = _tuple$2[1], suffix = _tuple$2[2];
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tuple$3 = [layout.substring(0, i), 262, layout.substring((i + 3 >> 0))], prefix = _tuple$3[0], std = _tuple$3[1], suffix = _tuple$3[2];
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tuple$4 = [layout.substring(0, i), 21, layout.substring((i + 3 >> 0))], prefix = _tuple$4[0], std = _tuple$4[1], suffix = _tuple$4[2];
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tuple$5 = [layout.substring(0, i), std0x[(layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24)], layout.substring((i + 2 >> 0))], prefix = _tuple$5[0], std = _tuple$5[1], suffix = _tuple$5[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tuple$6 = [layout.substring(0, i), 522, layout.substring((i + 2 >> 0))], prefix = _tuple$6[0], std = _tuple$6[1], suffix = _tuple$6[2];
					return [prefix, std, suffix];
				}
				_tuple$7 = [layout.substring(0, i), 259, layout.substring((i + 1 >> 0))], prefix = _tuple$7[0], std = _tuple$7[1], suffix = _tuple$7[2];
				return [prefix, std, suffix];
			} else if (_ref === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tuple$8 = [layout.substring(0, i), 273, layout.substring((i + 4 >> 0))], prefix = _tuple$8[0], std = _tuple$8[1], suffix = _tuple$8[2];
					return [prefix, std, suffix];
				}
				_tuple$9 = [layout.substring(0, i), 263, layout.substring((i + 1 >> 0))], prefix = _tuple$9[0], std = _tuple$9[1], suffix = _tuple$9[2];
				return [prefix, std, suffix];
			} else if (_ref === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					_tuple$10 = [layout.substring(0, i), 264, layout.substring((i + 2 >> 0))], prefix = _tuple$10[0], std = _tuple$10[1], suffix = _tuple$10[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 51) {
				_tuple$11 = [layout.substring(0, i), 523, layout.substring((i + 1 >> 0))], prefix = _tuple$11[0], std = _tuple$11[1], suffix = _tuple$11[2];
				return [prefix, std, suffix];
			} else if (_ref === 52) {
				_tuple$12 = [layout.substring(0, i), 525, layout.substring((i + 1 >> 0))], prefix = _tuple$12[0], std = _tuple$12[1], suffix = _tuple$12[2];
				return [prefix, std, suffix];
			} else if (_ref === 53) {
				_tuple$13 = [layout.substring(0, i), 527, layout.substring((i + 1 >> 0))], prefix = _tuple$13[0], std = _tuple$13[1], suffix = _tuple$13[2];
				return [prefix, std, suffix];
			} else if (_ref === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tuple$14 = [layout.substring(0, i), 531, layout.substring((i + 2 >> 0))], prefix = _tuple$14[0], std = _tuple$14[1], suffix = _tuple$14[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tuple$15 = [layout.substring(0, i), 532, layout.substring((i + 2 >> 0))], prefix = _tuple$15[0], std = _tuple$15[1], suffix = _tuple$15[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tuple$16 = [layout.substring(0, i), 27, layout.substring((i + 7 >> 0))], prefix = _tuple$16[0], std = _tuple$16[1], suffix = _tuple$16[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tuple$17 = [layout.substring(0, i), 30, layout.substring((i + 9 >> 0))], prefix = _tuple$17[0], std = _tuple$17[1], suffix = _tuple$17[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tuple$18 = [layout.substring(0, i), 26, layout.substring((i + 5 >> 0))], prefix = _tuple$18[0], std = _tuple$18[1], suffix = _tuple$18[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tuple$19 = [layout.substring(0, i), 29, layout.substring((i + 6 >> 0))], prefix = _tuple$19[0], std = _tuple$19[1], suffix = _tuple$19[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tuple$20 = [layout.substring(0, i), 28, layout.substring((i + 3 >> 0))], prefix = _tuple$20[0], std = _tuple$20[1], suffix = _tuple$20[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tuple$21 = [layout.substring(0, i), 23, layout.substring((i + 7 >> 0))], prefix = _tuple$21[0], std = _tuple$21[1], suffix = _tuple$21[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tuple$22 = [layout.substring(0, i), 25, layout.substring((i + 9 >> 0))], prefix = _tuple$22[0], std = _tuple$22[1], suffix = _tuple$22[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tuple$23 = [layout.substring(0, i), 22, layout.substring((i + 5 >> 0))], prefix = _tuple$23[0], std = _tuple$23[1], suffix = _tuple$23[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tuple$24 = [layout.substring(0, i), 24, layout.substring((i + 6 >> 0))], prefix = _tuple$24[0], std = _tuple$24[1], suffix = _tuple$24[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (j < layout.length && (layout.charCodeAt(j) === ch)) {
						j = j + 1 >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 31;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 32;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tuple$25 = [layout.substring(0, i), std$1, layout.substring(j)], prefix = _tuple$25[0], std = _tuple$25[1], suffix = _tuple$25[2];
						return [prefix, std, suffix];
					}
				}
			}
			i = i + 1 >> 0;
		}
		_tuple$26 = [layout, 0, ""], prefix = _tuple$26[0], std = _tuple$26[1], suffix = _tuple$26[2];
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var i, c1, c2;
		i = 0;
		while (i < s1.length) {
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | 32) >>> 0;
				c2 = (c2 | 32) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _ref, _i, _slice, _index, v, i;
		_ref = tab;
		_i = 0;
		while (_i < _ref.length) {
			v = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), null];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendUint = function(b, x, pad) {
		var _q, _r, buf, n, _r$1, _q$1;
		if (x < 10) {
			if (!((pad === 0))) {
				b = go$append(b, pad);
			}
			return go$append(b, ((48 + x >>> 0) << 24 >>> 24));
		}
		if (x < 100) {
			b = go$append(b, ((48 + (_q = x / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			b = go$append(b, ((48 + (_r = x % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			return b;
		}
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		n = 32;
		if (x === 0) {
			return go$append(b, 48);
		}
		while (x >= 10) {
			n = n - 1 >> 0;
			buf[n] = (((_r$1 = x % 10, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			x = (_q$1 = x / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		n = n - 1 >> 0;
		buf[n] = ((x + 48 >>> 0) << 24 >>> 24);
		return go$appendSlice(b, go$subslice(new (go$sliceType(Go$Uint8))(buf), n));
	};
	atoi = function(s) {
		var x, err, neg, _tuple, q, rem, _tuple$1, _tuple$2;
		x = 0;
		err = null;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple = leadingInt(s), q = _tuple[0], rem = _tuple[1], err = _tuple[2];
		x = ((q.low + ((q.high >> 31) * 4294967296)) >> 0);
		if (!(go$interfaceIsEqual(err, null)) || !(rem === "")) {
			_tuple$1 = [0, atoiError], x = _tuple$1[0], err = _tuple$1[1];
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tuple$2 = [x, null], x = _tuple$2[0], err = _tuple$2[1];
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var u, buf, start, _r, _q;
		u = nanosec;
		buf = go$makeNativeArray("Uint8", 9, function() { return 0; });
		start = 9;
		while (start > 0) {
			start = start - 1 >> 0;
			buf[start] = (((_r = u % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			u = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (n > 0 && (buf[(n - 1 >> 0)] === 48)) {
				n = n - 1 >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = go$append(b, 46);
		return go$appendSlice(b, go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, n));
	};
	Time.Ptr.prototype.String = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return t.Format("2006-01-02 15:04:05.999999999 -0700 MST");
	};
	Time.prototype.String = function() { return this.go$val.String(); };
	Time.Ptr.prototype.Format = function(layout) {
		var _struct, t, _tuple, name, offset, abs, year, month, day, hour, min, sec, b, buf, max, _tuple$1, prefix, std, suffix, _tuple$2, _tuple$3, _ref, y, _r, y$1, m, s, _r$1, hr, _r$2, hr$1, _q, zone$1, absoffset, _q$1, _r$3, _r$4, _q$2, zone$2, _q$3, _r$5;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.locabs(), name = _tuple[0], offset = _tuple[1], abs = _tuple[2], year = -1, month = 0, day = 0, hour = -1, min = 0, sec = 0, b = (go$sliceType(Go$Uint8)).nil, buf = go$makeNativeArray("Uint8", 64, function() { return 0; });
		max = layout.length + 10 >> 0;
		if (max <= 64) {
			b = go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, 0);
		} else {
			b = (go$sliceType(Go$Uint8)).make(0, max, function() { return 0; });
		}
		while (!(layout === "")) {
			_tuple$1 = nextStdChunk(layout), prefix = _tuple$1[0], std = _tuple$1[1], suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(prefix)));
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true), year = _tuple$2[0], month = _tuple$2[1], day = _tuple$2[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs), hour = _tuple$3[0], min = _tuple$3[1], sec = _tuple$3[2];
			}
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				y = year;
				if (y < 0) {
					y = -y;
				}
				b = appendUint(b, ((_r = y % 100, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 273) {
				y$1 = year;
				if (year <= -1000) {
					b = go$append(b, 45);
					y$1 = -y$1;
				} else if (year <= -100) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("-0")));
					y$1 = -y$1;
				} else if (year <= -10) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("-00")));
					y$1 = -y$1;
				} else if (year < 0) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("-000")));
					y$1 = -y$1;
				} else if (year < 10) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("000")));
				} else if (year < 100) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("00")));
				} else if (year < 1000) {
					b = go$append(b, 48);
				}
				b = appendUint(b, (y$1 >>> 0), 0);
			} else if (_ref === 258) {
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes((new Month(month)).String().substring(0, 3))));
			} else if (_ref === 257) {
				m = (new Month(month)).String();
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(m)));
			} else if (_ref === 259) {
				b = appendUint(b, (month >>> 0), 0);
			} else if (_ref === 260) {
				b = appendUint(b, (month >>> 0), 48);
			} else if (_ref === 262) {
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes((new Weekday(absWeekday(abs))).String().substring(0, 3))));
			} else if (_ref === 261) {
				s = (new Weekday(absWeekday(abs))).String();
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
			} else if (_ref === 263) {
				b = appendUint(b, (day >>> 0), 0);
			} else if (_ref === 264) {
				b = appendUint(b, (day >>> 0), 32);
			} else if (_ref === 265) {
				b = appendUint(b, (day >>> 0), 48);
			} else if (_ref === 522) {
				b = appendUint(b, (hour >>> 0), 48);
			} else if (_ref === 523) {
				hr = (_r$1 = hour % 12, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero"));
				if (hr === 0) {
					hr = 12;
				}
				b = appendUint(b, (hr >>> 0), 0);
			} else if (_ref === 524) {
				hr$1 = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : go$throwRuntimeError("integer divide by zero"));
				if (hr$1 === 0) {
					hr$1 = 12;
				}
				b = appendUint(b, (hr$1 >>> 0), 48);
			} else if (_ref === 525) {
				b = appendUint(b, (min >>> 0), 0);
			} else if (_ref === 526) {
				b = appendUint(b, (min >>> 0), 48);
			} else if (_ref === 527) {
				b = appendUint(b, (sec >>> 0), 0);
			} else if (_ref === 528) {
				b = appendUint(b, (sec >>> 0), 48);
			} else if (_ref === 531) {
				if (hour >= 12) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("PM")));
				} else {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("AM")));
				}
			} else if (_ref === 532) {
				if (hour >= 12) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("pm")));
				} else {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("am")));
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {
				if ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {
					b = go$append(b, 90);
					break;
				}
				zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
				absoffset = offset;
				if (zone$1 < 0) {
					b = go$append(b, 45);
					zone$1 = -zone$1;
					absoffset = -absoffset;
				} else {
					b = go$append(b, 43);
				}
				b = appendUint(b, ((_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 24) || (std === 29)) {
					b = go$append(b, 58);
				}
				b = appendUint(b, ((_r$3 = zone$1 % 60, _r$3 === _r$3 ? _r$3 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {
					if ((std === 30) || (std === 25)) {
						b = go$append(b, 58);
					}
					b = appendUint(b, ((_r$4 = absoffset % 60, _r$4 === _r$4 ? _r$4 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
				}
			} else if (_ref === 21) {
				if (!(name === "")) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(name)));
					break;
				}
				zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : go$throwRuntimeError("integer divide by zero"));
				if (zone$2 < 0) {
					b = go$append(b, 45);
					zone$2 = -zone$2;
				} else {
					b = go$append(b, 43);
				}
				b = appendUint(b, ((_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
				b = appendUint(b, ((_r$5 = zone$2 % 60, _r$5 === _r$5 ? _r$5 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 31 || _ref === 32) {
				b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);
			} }
		}
		return go$bytesToString(b);
	};
	Time.prototype.Format = function(layout) { return this.go$val.Format(layout); };
	quote = function(s) {
		return "\"" + s + "\"";
	};
	ParseError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.go$val.Error(); };
	isDigit = function(s, i) {
		var c;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var x, x$1;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), null];
		}
		return [(x = ((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), x$1 = 10, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), null];
	};
	cutspace = function(s) {
		while (s.length > 0 && (s.charCodeAt(0) === 32)) {
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		while (prefix.length > 0) {
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, null];
	};
	Parse = go$pkg.Parse = function(layout, value) {
		return parse(layout, value, go$pkg.UTC, go$pkg.Local);
	};
	parse = function(layout, value, defaultLocation, local) {
		var _tuple, alayout, avalue, rangeErrString, amSet, pmSet, year, month, day, hour, min, sec, nsec, z, zoneOffset, zoneName, err, _tuple$1, prefix, std, suffix, stdstr, _tuple$2, p, _ref, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, n, _tuple$18, _tuple$19, _ref$1, _tuple$20, _ref$2, _tuple$21, sign, hour$1, min$1, seconds, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, hr, mm, ss, _tuple$28, _tuple$29, _tuple$30, x, x$1, x$2, _ref$3, _tuple$31, n$1, ok, _tuple$32, ndigit, _tuple$33, i, _tuple$34, _struct, _struct$1, t, x$3, x$4, _tuple$35, x$5, name, offset, _struct$2, _struct$3, _struct$4, t$1, _tuple$36, x$6, offset$1, ok$1, x$7, x$8, _struct$5, _tuple$37, x$9, _struct$6, _struct$7;
		_tuple = [layout, value], alayout = _tuple[0], avalue = _tuple[1];
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0, month = 1, day = 1, hour = 0, min = 0, sec = 0, nsec = 0, z = (go$ptrType(Location)).nil, zoneOffset = -1, zoneName = "";
		while (true) {
			err = null;
			_tuple$1 = nextStdChunk(layout), prefix = _tuple$1[0], std = _tuple$1[1], suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix), value = _tuple$2[0], err = _tuple$2[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [new Time.Ptr(new Go$Int64(0, 0), 0, (go$ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.Ptr(new Go$Int64(0, 0), 0, (go$ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tuple$3 = [value.substring(0, 2), value.substring(2)], p = _tuple$3[0], value = _tuple$3[1];
				_tuple$4 = atoi(p), year = _tuple$4[0], err = _tuple$4[1];
				if (year >= 69) {
					year = year + 1900 >> 0;
				} else {
					year = year + 2000 >> 0;
				}
			} else if (_ref === 273) {
				if (value.length < 4 || !isDigit(value, 0)) {
					err = errBad;
					break;
				}
				_tuple$5 = [value.substring(0, 4), value.substring(4)], p = _tuple$5[0], value = _tuple$5[1];
				_tuple$6 = atoi(p), year = _tuple$6[0], err = _tuple$6[1];
			} else if (_ref === 258) {
				_tuple$7 = lookup(shortMonthNames, value), month = _tuple$7[0], value = _tuple$7[1], err = _tuple$7[2];
			} else if (_ref === 257) {
				_tuple$8 = lookup(longMonthNames, value), month = _tuple$8[0], value = _tuple$8[1], err = _tuple$8[2];
			} else if (_ref === 259 || _ref === 260) {
				_tuple$9 = getnum(value, std === 260), month = _tuple$9[0], value = _tuple$9[1], err = _tuple$9[2];
				if (month <= 0 || 12 < month) {
					rangeErrString = "month";
				}
			} else if (_ref === 262) {
				_tuple$10 = lookup(shortDayNames, value), value = _tuple$10[1], err = _tuple$10[2];
			} else if (_ref === 261) {
				_tuple$11 = lookup(longDayNames, value), value = _tuple$11[1], err = _tuple$11[2];
			} else if (_ref === 263 || _ref === 264 || _ref === 265) {
				if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
					value = value.substring(1);
				}
				_tuple$12 = getnum(value, std === 265), day = _tuple$12[0], value = _tuple$12[1], err = _tuple$12[2];
				if (day < 0 || 31 < day) {
					rangeErrString = "day";
				}
			} else if (_ref === 522) {
				_tuple$13 = getnum(value, false), hour = _tuple$13[0], value = _tuple$13[1], err = _tuple$13[2];
				if (hour < 0 || 24 <= hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 523 || _ref === 524) {
				_tuple$14 = getnum(value, std === 524), hour = _tuple$14[0], value = _tuple$14[1], err = _tuple$14[2];
				if (hour < 0 || 12 < hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 525 || _ref === 526) {
				_tuple$15 = getnum(value, std === 526), min = _tuple$15[0], value = _tuple$15[1], err = _tuple$15[2];
				if (min < 0 || 60 <= min) {
					rangeErrString = "minute";
				}
			} else if (_ref === 527 || _ref === 528) {
				_tuple$16 = getnum(value, std === 528), sec = _tuple$16[0], value = _tuple$16[1], err = _tuple$16[2];
				if (sec < 0 || 60 <= sec) {
					rangeErrString = "second";
				}
				if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
					_tuple$17 = nextStdChunk(layout), std = _tuple$17[1];
					std = std & 65535;
					if ((std === 31) || (std === 32)) {
						break;
					}
					n = 2;
					while (n < value.length && isDigit(value, n)) {
						n = n + 1 >> 0;
					}
					_tuple$18 = parseNanoseconds(value, n), nsec = _tuple$18[0], rangeErrString = _tuple$18[1], err = _tuple$18[2];
					value = value.substring(n);
				}
			} else if (_ref === 531) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tuple$19 = [value.substring(0, 2), value.substring(2)], p = _tuple$19[0], value = _tuple$19[1];
				_ref$1 = p;
				if (_ref$1 === "PM") {
					pmSet = true;
				} else if (_ref$1 === "AM") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 532) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tuple$20 = [value.substring(0, 2), value.substring(2)], p = _tuple$20[0], value = _tuple$20[1];
				_ref$2 = p;
				if (_ref$2 === "pm") {
					pmSet = true;
				} else if (_ref$2 === "am") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {
				if (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
					value = value.substring(1);
					z = go$pkg.UTC;
					break;
				}
				_tuple$21 = ["", "", "", ""], sign = _tuple$21[0], hour$1 = _tuple$21[1], min$1 = _tuple$21[2], seconds = _tuple$21[3];
				if ((std === 24) || (std === 29)) {
					if (value.length < 6) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58))) {
						err = errBad;
						break;
					}
					_tuple$22 = [value.substring(0, 1), value.substring(1, 3), value.substring(4, 6), "00", value.substring(6)], sign = _tuple$22[0], hour$1 = _tuple$22[1], min$1 = _tuple$22[2], seconds = _tuple$22[3], value = _tuple$22[4];
				} else if (std === 28) {
					if (value.length < 3) {
						err = errBad;
						break;
					}
					_tuple$23 = [value.substring(0, 1), value.substring(1, 3), "00", "00", value.substring(3)], sign = _tuple$23[0], hour$1 = _tuple$23[1], min$1 = _tuple$23[2], seconds = _tuple$23[3], value = _tuple$23[4];
				} else if ((std === 25) || (std === 30)) {
					if (value.length < 9) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
						err = errBad;
						break;
					}
					_tuple$24 = [value.substring(0, 1), value.substring(1, 3), value.substring(4, 6), value.substring(7, 9), value.substring(9)], sign = _tuple$24[0], hour$1 = _tuple$24[1], min$1 = _tuple$24[2], seconds = _tuple$24[3], value = _tuple$24[4];
				} else if ((std === 23) || (std === 27)) {
					if (value.length < 7) {
						err = errBad;
						break;
					}
					_tuple$25 = [value.substring(0, 1), value.substring(1, 3), value.substring(3, 5), value.substring(5, 7), value.substring(7)], sign = _tuple$25[0], hour$1 = _tuple$25[1], min$1 = _tuple$25[2], seconds = _tuple$25[3], value = _tuple$25[4];
				} else {
					if (value.length < 5) {
						err = errBad;
						break;
					}
					_tuple$26 = [value.substring(0, 1), value.substring(1, 3), value.substring(3, 5), "00", value.substring(5)], sign = _tuple$26[0], hour$1 = _tuple$26[1], min$1 = _tuple$26[2], seconds = _tuple$26[3], value = _tuple$26[4];
				}
				_tuple$27 = [0, 0, 0], hr = _tuple$27[0], mm = _tuple$27[1], ss = _tuple$27[2];
				_tuple$28 = atoi(hour$1), hr = _tuple$28[0], err = _tuple$28[1];
				if (go$interfaceIsEqual(err, null)) {
					_tuple$29 = atoi(min$1), mm = _tuple$29[0], err = _tuple$29[1];
				}
				if (go$interfaceIsEqual(err, null)) {
					_tuple$30 = atoi(seconds), ss = _tuple$30[0], err = _tuple$30[1];
				}
				zoneOffset = (x = ((x$1 = 60, (((hr >>> 16 << 16) * x$1 >> 0) + (hr << 16 >>> 16) * x$1) >> 0) + mm >> 0), x$2 = 60, (((x >>> 16 << 16) * x$2 >> 0) + (x << 16 >>> 16) * x$2) >> 0) + ss >> 0;
				_ref$3 = sign.charCodeAt(0);
				if (_ref$3 === 43) {
				} else if (_ref$3 === 45) {
					zoneOffset = -zoneOffset;
				} else {
					err = errBad;
				}
			} else if (_ref === 21) {
				if (value.length >= 3 && value.substring(0, 3) === "UTC") {
					z = go$pkg.UTC;
					value = value.substring(3);
					break;
				}
				_tuple$31 = parseTimeZone(value), n$1 = _tuple$31[0], ok = _tuple$31[1];
				if (!ok) {
					err = errBad;
					break;
				}
				_tuple$32 = [value.substring(0, n$1), value.substring(n$1)], zoneName = _tuple$32[0], value = _tuple$32[1];
			} else if (_ref === 31) {
				ndigit = 1 + ((std >> 16 >> 0)) >> 0;
				if (value.length < ndigit) {
					err = errBad;
					break;
				}
				_tuple$33 = parseNanoseconds(value, ndigit), nsec = _tuple$33[0], rangeErrString = _tuple$33[1], err = _tuple$33[2];
				value = value.substring(ndigit);
			} else if (_ref === 32) {
				if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
					break;
				}
				i = 0;
				while (i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57) {
					i = i + 1 >> 0;
				}
				_tuple$34 = parseNanoseconds(value, 1 + i >> 0), nsec = _tuple$34[0], rangeErrString = _tuple$34[1], err = _tuple$34[2];
				value = value.substring((1 + i >> 0));
			} }
			if (!(rangeErrString === "")) {
				return [new Time.Ptr(new Go$Int64(0, 0), 0, (go$ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!(go$interfaceIsEqual(err, null))) {
				return [new Time.Ptr(new Go$Int64(0, 0), 0, (go$ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + 12 >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (!(z === (go$ptrType(Location)).nil)) {
			return [(_struct = Date(year, (month >> 0), day, hour, min, sec, nsec, z), new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc)), null];
		}
		if (!((zoneOffset === -1))) {
			t = (_struct$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, go$pkg.UTC), new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
			t.sec = (x$3 = t.sec, x$4 = new Go$Int64(0, zoneOffset), new Go$Int64(x$3.high - x$4.high, x$3.low - x$4.low));
			_tuple$35 = local.lookup((x$5 = t.sec, new Go$Int64(x$5.high + -15, x$5.low + 2288912640))), name = _tuple$35[0], offset = _tuple$35[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [(_struct$2 = t, new Time.Ptr(_struct$2.sec, _struct$2.nsec, _struct$2.loc)), null];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [(_struct$3 = t, new Time.Ptr(_struct$3.sec, _struct$3.nsec, _struct$3.loc)), null];
		}
		if (!(zoneName === "")) {
			t$1 = (_struct$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, go$pkg.UTC), new Time.Ptr(_struct$4.sec, _struct$4.nsec, _struct$4.loc));
			_tuple$36 = local.lookupName(zoneName, (x$6 = t$1.sec, new Go$Int64(x$6.high + -15, x$6.low + 2288912640))), offset$1 = _tuple$36[0], ok$1 = _tuple$36[2];
			if (ok$1) {
				t$1.sec = (x$7 = t$1.sec, x$8 = new Go$Int64(0, offset$1), new Go$Int64(x$7.high - x$8.high, x$7.low - x$8.low));
				t$1.loc = local;
				return [(_struct$5 = t$1, new Time.Ptr(_struct$5.sec, _struct$5.nsec, _struct$5.loc)), null];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$37 = atoi(zoneName.substring(3)), offset$1 = _tuple$37[0];
				offset$1 = (x$9 = 3600, (((offset$1 >>> 16 << 16) * x$9 >> 0) + (offset$1 << 16 >>> 16) * x$9) >> 0);
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [(_struct$6 = t$1, new Time.Ptr(_struct$6.sec, _struct$6.nsec, _struct$6.loc)), null];
		}
		return [(_struct$7 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation), new Time.Ptr(_struct$7.sec, _struct$7.nsec, _struct$7.loc)), null];
	};
	parseTimeZone = function(value) {
		var length, ok, _tuple, _tuple$1, _tuple$2, nUpper, c, _ref, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tuple = [0, false], length = _tuple[0], ok = _tuple[1];
			return [length, ok];
		}
		if (value.length >= 4 && value.substring(0, 4) === "ChST") {
			_tuple$1 = [4, true], length = _tuple$1[0], ok = _tuple$1[1];
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tuple$2 = [length, true], length = _tuple$2[0], ok = _tuple$2[1];
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (nUpper < 6) {
			if (nUpper >= value.length) {
				break;
			}
			if (c = value.charCodeAt(nUpper), c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + 1 >> 0;
		}
		_ref = nUpper;
		if (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {
			_tuple$3 = [0, false], length = _tuple$3[0], ok = _tuple$3[1];
			return [length, ok];
		} else if (_ref === 5) {
			if (value.charCodeAt(4) === 84) {
				_tuple$4 = [5, true], length = _tuple$4[0], ok = _tuple$4[1];
				return [length, ok];
			}
		} else if (_ref === 4) {
			if (value.charCodeAt(3) === 84) {
				_tuple$5 = [4, true], length = _tuple$5[0], ok = _tuple$5[1];
				return [length, ok];
			}
		} else if (_ref === 3) {
			_tuple$6 = [3, true], length = _tuple$6[0], ok = _tuple$6[1];
			return [length, ok];
		}
		_tuple$7 = [0, false], length = _tuple$7[0], ok = _tuple$7[1];
		return [length, ok];
	};
	parseGMT = function(value) {
		var sign, _tuple, x, rem, err;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple = leadingInt(value.substring(1)), x = _tuple[0], rem = _tuple[1], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			return 3;
		}
		if (sign === 45) {
			x = new Go$Int64(-x.high, -x.low);
		}
		if ((x.high === 0 && x.low === 0) || (x.high < -1 || (x.high === -1 && x.low < 4294967282)) || (0 < x.high || (0 === x.high && 12 < x.low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var ns, rangeErrString, err, _tuple, scaleDigits, i, x;
		ns = 0;
		rangeErrString = "";
		err = null;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		if (_tuple = atoi(value.substring(1, nbytes)), ns = _tuple[0], err = _tuple[1], !(go$interfaceIsEqual(err, null))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (i < scaleDigits) {
			ns = (x = 10, (((ns >>> 16 << 16) * x >> 0) + (ns << 16 >>> 16) * x) >> 0);
			i = i + 1 >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var x, rem, err, i, c, _tuple, x$1, x$2, x$3, _tuple$1;
		x = new Go$Int64(0, 0);
		rem = "";
		err = null;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.high > 214748364 || (x.high === 214748364 && x.low >= 3435973835))) {
				_tuple = [new Go$Int64(0, 0), "", errLeadingInt], x = _tuple[0], rem = _tuple[1], err = _tuple[2];
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = go$mul64(x, new Go$Int64(0, 10)), x$3 = new Go$Int64(0, c), new Go$Int64(x$2.high + x$3.high, x$2.low + x$3.low)), new Go$Int64(x$1.high - 0, x$1.low - 48));
			i = i + 1 >> 0;
		}
		_tuple$1 = [x, s.substring(i), null], x = _tuple$1[0], rem = _tuple$1[1], err = _tuple$1[2];
		return [x, rem, err];
	};
	AfterFunc = go$pkg.AfterFunc = function(d, f) {
			setTimeout(f, go$div64(d, new Duration(0, 1000000)).low);
			return null;
		};
	readFile = function(name) {
		var _tuple, f, err, buf, ret, n, _tuple$1;
		var go$deferred = [];
		try {
			_tuple = syscall.Open(name, 0, 0), f = _tuple[0], err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$sliceType(Go$Uint8)).nil, err];
			}
			go$deferred.push({ recv: syscall, method: "Close", args: [f] });
			buf = go$makeNativeArray("Uint8", 4096, function() { return 0; }), ret = (go$sliceType(Go$Uint8)).nil, n = 0;
			while (true) {
				_tuple$1 = syscall.Read(f, new (go$sliceType(Go$Uint8))(buf)), n = _tuple$1[0], err = _tuple$1[1];
				if (n > 0) {
					ret = go$appendSlice(ret, go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, n));
				}
				if ((n === 0) || !(go$interfaceIsEqual(err, null))) {
					break;
				}
			}
			return [ret, err];
		} catch(go$err) {
			go$pushErr(go$err);
			return [(go$sliceType(Go$Uint8)).nil, null];
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	open = function(name) {
		var _tuple, fd, err;
		_tuple = syscall.Open(name, 0, 0), fd = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [0, err];
		}
		return [(fd >>> 0), null];
	};
	closefd = function(fd) {
		syscall.Close((fd >> 0));
	};
	preadn = function(fd, buf, off) {
		var whence, err, _tuple, _tuple$1, m, err$1;
		whence = 0;
		if (off < 0) {
			whence = 2;
		}
		if (_tuple = syscall.Seek((fd >> 0), new Go$Int64(0, off), whence), err = _tuple[1], !(go$interfaceIsEqual(err, null))) {
			return err;
		}
		while (buf.length > 0) {
			_tuple$1 = syscall.Read((fd >> 0), buf), m = _tuple$1[0], err$1 = _tuple$1[1];
			if (m <= 0) {
				if (go$interfaceIsEqual(err$1, null)) {
					return errors.New("short read");
				}
				return err$1;
			}
			buf = go$subslice(buf, m);
		}
		return null;
	};
	Time.Ptr.prototype.After = function(u) {
		var _struct, t, x, x$1, x$2, x$3;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, x$1 = u.sec, (x.high > x$1.high || (x.high === x$1.high && x.low > x$1.low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.high === x$3.high && x$2.low === x$3.low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.go$val.After(u); };
	Time.Ptr.prototype.Before = function(u) {
		var _struct, t, x, x$1, x$2, x$3;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, x$1 = u.sec, (x.high < x$1.high || (x.high === x$1.high && x.low < x$1.low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.high === x$3.high && x$2.low === x$3.low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.go$val.Before(u); };
	Time.Ptr.prototype.Equal = function(u) {
		var _struct, t, x, x$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, x$1 = u.sec, (x.high === x$1.high && x.low === x$1.low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.go$val.Equal(u); };
	Month.prototype.String = function() {
		var m;
		m = this.go$val;
		return months[(m - 1 >> 0)];
	};
	go$ptrType(Month).prototype.String = function() { return new Month(this.go$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.go$val;
		return days[d];
	};
	go$ptrType(Weekday).prototype.String = function() { return new Weekday(this.go$get()).String(); };
	Time.Ptr.prototype.IsZero = function() {
		var _struct, t, x;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, (x.high === 0 && x.low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.go$val.IsZero(); };
	Time.Ptr.prototype.abs = function() {
		var _struct, t, l, x, sec, x$1, x$2, x$3, _tuple, offset, x$4, x$5;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		l = t.loc;
		if (l === (go$ptrType(Location)).nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new Go$Int64(x.high + -15, x.low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === (go$ptrType(zone)).nil) && (x$1 = l.cacheStart, (x$1.high < sec.high || (x$1.high === sec.high && x$1.low <= sec.low))) && (x$2 = l.cacheEnd, (sec.high < x$2.high || (sec.high === x$2.high && sec.low < x$2.low)))) {
				sec = (x$3 = new Go$Int64(0, l.cacheZone.offset), new Go$Int64(sec.high + x$3.high, sec.low + x$3.low));
			} else {
				_tuple = l.lookup(sec), offset = _tuple[1];
				sec = (x$4 = new Go$Int64(0, offset), new Go$Int64(sec.high + x$4.high, sec.low + x$4.low));
			}
		}
		return (x$5 = new Go$Int64(sec.high + 2147483646, sec.low + 450480384), new Go$Uint64(x$5.high, x$5.low));
	};
	Time.prototype.abs = function() { return this.go$val.abs(); };
	Time.Ptr.prototype.locabs = function() {
		var name, offset, abs, _struct, t, l, x, sec, x$1, x$2, _tuple, x$3, x$4;
		name = "";
		offset = 0;
		abs = new Go$Uint64(0, 0);
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		l = t.loc;
		if (l === (go$ptrType(Location)).nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new Go$Int64(x.high + -15, x.low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === (go$ptrType(zone)).nil) && (x$1 = l.cacheStart, (x$1.high < sec.high || (x$1.high === sec.high && x$1.low <= sec.low))) && (x$2 = l.cacheEnd, (sec.high < x$2.high || (sec.high === x$2.high && sec.low < x$2.low)))) {
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
			} else {
				_tuple = l.lookup(sec), name = _tuple[0], offset = _tuple[1];
			}
			sec = (x$3 = new Go$Int64(0, offset), new Go$Int64(sec.high + x$3.high, sec.low + x$3.low));
		} else {
			name = "UTC";
		}
		abs = (x$4 = new Go$Int64(sec.high + 2147483646, sec.low + 450480384), new Go$Uint64(x$4.high, x$4.low));
		return [name, offset, abs];
	};
	Time.prototype.locabs = function() { return this.go$val.locabs(); };
	Time.Ptr.prototype.Date = function() {
		var year, month, day, _struct, t, _tuple;
		year = 0;
		month = 0;
		day = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(true), year = _tuple[0], month = _tuple[1], day = _tuple[2];
		return [year, month, day];
	};
	Time.prototype.Date = function() { return this.go$val.Date(); };
	Time.Ptr.prototype.Year = function() {
		var _struct, t, _tuple, year;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(false), year = _tuple[0];
		return year;
	};
	Time.prototype.Year = function() { return this.go$val.Year(); };
	Time.Ptr.prototype.Month = function() {
		var _struct, t, _tuple, month;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(true), month = _tuple[1];
		return month;
	};
	Time.prototype.Month = function() { return this.go$val.Month(); };
	Time.Ptr.prototype.Day = function() {
		var _struct, t, _tuple, day;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(true), day = _tuple[2];
		return day;
	};
	Time.prototype.Day = function() { return this.go$val.Day(); };
	Time.Ptr.prototype.Weekday = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return absWeekday(t.abs());
	};
	Time.prototype.Weekday = function() { return this.go$val.Weekday(); };
	absWeekday = function(abs) {
		var sec, _q;
		sec = go$div64((new Go$Uint64(abs.high + 0, abs.low + 86400)), new Go$Uint64(0, 604800), true);
		return ((_q = (sec.low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.Ptr.prototype.ISOWeek = function() {
		var year, week, _struct, t, _tuple, month, day, yday, _r, wday, _q, _r$1, jan1wday, dec31wday, _r$2;
		year = 0;
		week = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(true), year = _tuple[0], month = _tuple[1], day = _tuple[2], yday = _tuple[3];
		wday = (_r = ((t.Weekday() + 6 >> 0) >> 0) % 7, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$1 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + 1 >> 0;
		}
		if (week === 0) {
			year = year - 1 >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + 1 >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			if (dec31wday = (_r$2 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$2 === _r$2 ? _r$2 : go$throwRuntimeError("integer divide by zero")), 0 <= dec31wday && dec31wday <= 2) {
				year = year + 1 >> 0;
				week = 1;
			}
		}
		return [year, week];
	};
	Time.prototype.ISOWeek = function() { return this.go$val.ISOWeek(); };
	Time.Ptr.prototype.Clock = function() {
		var hour, min, sec, _struct, t, _tuple;
		hour = 0;
		min = 0;
		sec = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = absClock(t.abs()), hour = _tuple[0], min = _tuple[1], sec = _tuple[2];
		return [hour, min, sec];
	};
	Time.prototype.Clock = function() { return this.go$val.Clock(); };
	absClock = function(abs) {
		var hour, min, sec, _q, _q$1;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (go$div64(abs, new Go$Uint64(0, 86400), true).low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		sec = sec - (((((hour >>> 16 << 16) * 3600 >> 0) + (hour << 16 >>> 16) * 3600) >> 0)) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
		sec = sec - (((((min >>> 16 << 16) * 60 >> 0) + (min << 16 >>> 16) * 60) >> 0)) >> 0;
		return [hour, min, sec];
	};
	Time.Ptr.prototype.Hour = function() {
		var _struct, t, _q;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (_q = (go$div64(t.abs(), new Go$Uint64(0, 86400), true).low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Hour = function() { return this.go$val.Hour(); };
	Time.Ptr.prototype.Minute = function() {
		var _struct, t, _q;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (_q = (go$div64(t.abs(), new Go$Uint64(0, 3600), true).low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Minute = function() { return this.go$val.Minute(); };
	Time.Ptr.prototype.Second = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (go$div64(t.abs(), new Go$Uint64(0, 60), true).low >> 0);
	};
	Time.prototype.Second = function() { return this.go$val.Second(); };
	Time.Ptr.prototype.Nanosecond = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.go$val.Nanosecond(); };
	Time.Ptr.prototype.YearDay = function() {
		var _struct, t, _tuple, yday;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(false), yday = _tuple[3];
		return yday + 1 >> 0;
	};
	Time.prototype.YearDay = function() { return this.go$val.YearDay(); };
	Duration.prototype.String = function() {
		var d, buf, w, u, neg, prec, unit, _tuple, _tuple$1;
		d = this;
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		w = 32;
		u = new Go$Uint64(d.high, d.low);
		neg = (d.high < 0 || (d.high === 0 && d.low < 0));
		if (neg) {
			u = new Go$Uint64(-u.high, -u.low);
		}
		if ((u.high < 0 || (u.high === 0 && u.low < 1000000000))) {
			prec = 0, unit = 0;
			if ((u.high === 0 && u.low === 0)) {
				return "0";
			} else if ((u.high < 0 || (u.high === 0 && u.low < 1000))) {
				prec = 0;
				unit = 110;
			} else if ((u.high < 0 || (u.high === 0 && u.low < 1000000))) {
				prec = 3;
				unit = 117;
			} else {
				prec = 6;
				unit = 109;
			}
			w = w - 2 >> 0;
			buf[w] = unit;
			buf[w + 1 >> 0] = 115;
			_tuple = fmtFrac(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), u, prec), w = _tuple[0], u = _tuple[1];
			w = fmtInt(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), u);
		} else {
			w = w - 1 >> 0;
			buf[w] = 115;
			_tuple$1 = fmtFrac(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), u, 9), w = _tuple$1[0], u = _tuple$1[1];
			w = fmtInt(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), go$div64(u, new Go$Uint64(0, 60), true));
			u = go$div64(u, new Go$Uint64(0, 60), false);
			if ((u.high > 0 || (u.high === 0 && u.low > 0))) {
				w = w - 1 >> 0;
				buf[w] = 109;
				w = fmtInt(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), go$div64(u, new Go$Uint64(0, 60), true));
				u = go$div64(u, new Go$Uint64(0, 60), false);
				if ((u.high > 0 || (u.high === 0 && u.low > 0))) {
					w = w - 1 >> 0;
					buf[w] = 104;
					w = fmtInt(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - 1 >> 0;
			buf[w] = 45;
		}
		return go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(buf), w));
	};
	go$ptrType(Duration).prototype.String = function() { return this.go$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var nw, nv, w, print, i, digit, _slice, _index, _slice$1, _index$1, _tuple;
		nw = 0;
		nv = new Go$Uint64(0, 0);
		w = buf.length;
		print = false;
		i = 0;
		while (i < prec) {
			digit = go$div64(v, new Go$Uint64(0, 10), true);
			print = print || !((digit.high === 0 && digit.low === 0));
			if (print) {
				w = w - 1 >> 0;
				_slice = buf, _index = w, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = (digit.low << 24 >>> 24) + 48 << 24 >>> 24) : go$throwRuntimeError("index out of range");
			}
			v = go$div64(v, new Go$Uint64(0, 10), false);
			i = i + 1 >> 0;
		}
		if (print) {
			w = w - 1 >> 0;
			_slice$1 = buf, _index$1 = w, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 46) : go$throwRuntimeError("index out of range");
		}
		_tuple = [w, v], nw = _tuple[0], nv = _tuple[1];
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var w, _slice, _index, _slice$1, _index$1;
		w = buf.length;
		if ((v.high === 0 && v.low === 0)) {
			w = w - 1 >> 0;
			_slice = buf, _index = w, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 48) : go$throwRuntimeError("index out of range");
		} else {
			while ((v.high > 0 || (v.high === 0 && v.low > 0))) {
				w = w - 1 >> 0;
				_slice$1 = buf, _index$1 = w, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (go$div64(v, new Go$Uint64(0, 10), true).low << 24 >>> 24) + 48 << 24 >>> 24) : go$throwRuntimeError("index out of range");
				v = go$div64(v, new Go$Uint64(0, 10), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return new Go$Int64(d.high, d.low);
	};
	go$ptrType(Duration).prototype.Nanoseconds = function() { return this.go$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, sec, nsec;
		d = this;
		sec = go$div64(d, new Duration(0, 1000000000), false);
		nsec = go$div64(d, new Duration(0, 1000000000), true);
		return go$flatten64(sec) + go$flatten64(nsec) * 1e-09;
	};
	go$ptrType(Duration).prototype.Seconds = function() { return this.go$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = go$div64(d, new Duration(13, 4165425152), false);
		nsec = go$div64(d, new Duration(13, 4165425152), true);
		return go$flatten64(min) + go$flatten64(nsec) * 1.6666666666666667e-11;
	};
	go$ptrType(Duration).prototype.Minutes = function() { return this.go$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = go$div64(d, new Duration(838, 817405952), false);
		nsec = go$div64(d, new Duration(838, 817405952), true);
		return go$flatten64(hour) + go$flatten64(nsec) * 2.777777777777778e-13;
	};
	go$ptrType(Duration).prototype.Hours = function() { return this.go$get().Hours(); };
	Time.Ptr.prototype.Add = function(d) {
		var _struct, t, x, x$1, x$2, x$3, nsec, x$4, x$5, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		t.sec = (x = t.sec, x$1 = (x$2 = go$div64(d, new Duration(0, 1000000000), false), new Go$Int64(x$2.high, x$2.low)), new Go$Int64(x.high + x$1.high, x.low + x$1.low));
		nsec = (t.nsec >> 0) + ((x$3 = go$div64(d, new Duration(0, 1000000000), true), x$3.low + ((x$3.high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, new Go$Int64(x$4.high + 0, x$4.low + 1));
			nsec = nsec - 1000000000 >> 0;
		} else if (nsec < 0) {
			t.sec = (x$5 = t.sec, new Go$Int64(x$5.high - 0, x$5.low - 1));
			nsec = nsec + 1000000000 >> 0;
		}
		t.nsec = (nsec >>> 0);
		return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.Add = function(d) { return this.go$val.Add(d); };
	Time.Ptr.prototype.Sub = function(u) {
		var _struct, t, x, x$1, x$2, x$3, x$4, d, _struct$1, _struct$2;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		d = (x = go$mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new Go$Int64(x$2.high - x$3.high, x$2.low - x$3.low)), new Duration(x$1.high, x$1.low)), new Duration(0, 1000000000)), x$4 = new Duration(0, ((t.nsec >> 0) - (u.nsec >> 0) >> 0)), new Duration(x.high + x$4.high, x.low + x$4.low));
		if (u.Add(d).Equal((_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc)))) {
			return d;
		} else if (t.Before((_struct$2 = u, new Time.Ptr(_struct$2.sec, _struct$2.nsec, _struct$2.loc)))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.go$val.Sub(u); };
	Time.Ptr.prototype.AddDate = function(years, months$1, days$1) {
		var _struct, t, _tuple, year, month, day, _tuple$1, hour, min, sec, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.Date(), year = _tuple[0], month = _tuple[1], day = _tuple[2];
		_tuple$1 = t.Clock(), hour = _tuple$1[0], min = _tuple$1[1], sec = _tuple$1[2];
		return (_struct$1 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc), new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.go$val.AddDate(years, months$1, days$1); };
	Time.Ptr.prototype.date = function(full) {
		var year, month, day, yday, _struct, t, _tuple;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = absDate(t.abs(), full), year = _tuple[0], month = _tuple[1], day = _tuple[2], yday = _tuple[3];
		return [year, month, day, yday];
	};
	Time.prototype.date = function(full) { return this.go$val.date(full); };
	absDate = function(abs, full) {
		var year, month, day, yday, d, n, y, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, _q, end, begin;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = go$div64(abs, new Go$Uint64(0, 86400), false);
		n = go$div64(d, new Go$Uint64(0, 146097), false);
		y = go$mul64(new Go$Uint64(0, 400), n);
		d = (x = go$mul64(new Go$Uint64(0, 146097), n), new Go$Uint64(d.high - x.high, d.low - x.low));
		n = go$div64(d, new Go$Uint64(0, 36524), false);
		n = (x$1 = go$shiftRightUint64(n, 2), new Go$Uint64(n.high - x$1.high, n.low - x$1.low));
		y = (x$2 = go$mul64(new Go$Uint64(0, 100), n), new Go$Uint64(y.high + x$2.high, y.low + x$2.low));
		d = (x$3 = go$mul64(new Go$Uint64(0, 36524), n), new Go$Uint64(d.high - x$3.high, d.low - x$3.low));
		n = go$div64(d, new Go$Uint64(0, 1461), false);
		y = (x$4 = go$mul64(new Go$Uint64(0, 4), n), new Go$Uint64(y.high + x$4.high, y.low + x$4.low));
		d = (x$5 = go$mul64(new Go$Uint64(0, 1461), n), new Go$Uint64(d.high - x$5.high, d.low - x$5.low));
		n = go$div64(d, new Go$Uint64(0, 365), false);
		n = (x$6 = go$shiftRightUint64(n, 2), new Go$Uint64(n.high - x$6.high, n.low - x$6.low));
		y = (x$7 = n, new Go$Uint64(y.high + x$7.high, y.low + x$7.low));
		d = (x$8 = go$mul64(new Go$Uint64(0, 365), n), new Go$Uint64(d.high - x$8.high, d.low - x$8.low));
		year = ((x$9 = (x$10 = new Go$Int64(y.high, y.low), new Go$Int64(x$10.high + -69, x$10.low + 4075721025)), x$9.low + ((x$9.high >> 31) * 4294967296)) >> 0);
		yday = (d.low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - 1 >> 0;
			} else if (day === 59) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0);
		end = (daysBefore[(month + 1 >> 0)] >> 0);
		begin = 0;
		if (day >= end) {
			month = month + 1 >> 0;
			begin = end;
		} else {
			begin = (daysBefore[month] >> 0);
		}
		month = month + 1 >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	now = go$now;
	Now = go$pkg.Now = function() {
		var _tuple, sec, nsec;
		_tuple = now(), sec = _tuple[0], nsec = _tuple[1];
		return new Time.Ptr(new Go$Int64(sec.high + 14, sec.low + 2006054656), (nsec >>> 0), go$pkg.Local);
	};
	Time.Ptr.prototype.UTC = function() {
		var _struct, t, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		t.loc = go$pkg.UTC;
		return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.UTC = function() { return this.go$val.UTC(); };
	Time.Ptr.prototype.Local = function() {
		var _struct, t, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		t.loc = go$pkg.Local;
		return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.Local = function() { return this.go$val.Local(); };
	Time.Ptr.prototype.In = function(loc) {
		var _struct, t, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		if (loc === (go$ptrType(Location)).nil) {
			throw go$panic(new Go$String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.In = function(loc) { return this.go$val.In(loc); };
	Time.Ptr.prototype.Location = function() {
		var _struct, t, l;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		l = t.loc;
		if (l === (go$ptrType(Location)).nil) {
			l = go$pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.go$val.Location(); };
	Time.Ptr.prototype.Zone = function() {
		var name, offset, _struct, t, _tuple, x;
		name = "";
		offset = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.loc.lookup((x = t.sec, new Go$Int64(x.high + -15, x.low + 2288912640))), name = _tuple[0], offset = _tuple[1];
		return [name, offset];
	};
	Time.prototype.Zone = function() { return this.go$val.Zone(); };
	Time.Ptr.prototype.Unix = function() {
		var _struct, t, x;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, new Go$Int64(x.high + -15, x.low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.go$val.Unix(); };
	Time.Ptr.prototype.UnixNano = function() {
		var _struct, t, x, x$1, x$2, x$3;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = go$mul64(((x$1 = t.sec, new Go$Int64(x$1.high + -15, x$1.low + 2288912640))), new Go$Int64(0, 1000000000)), x$2 = (x$3 = t.nsec, new Go$Int64(0, x$3.constructor === Number ? x$3 : 1)), new Go$Int64(x.high + x$2.high, x.low + x$2.low));
	};
	Time.prototype.UnixNano = function() { return this.go$val.UnixNano(); };
	Time.Ptr.prototype.MarshalBinary = function() {
		var _struct, t, offsetMin, _tuple, offset, _r, _q, enc;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		offsetMin = 0;
		if (t.Location() === utcLoc) {
			offsetMin = -1;
		} else {
			_tuple = t.Zone(), offset = _tuple[1];
			if (!(((_r = offset % 60, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0))) {
				return [(go$sliceType(Go$Uint8)).nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [(go$sliceType(Go$Uint8)).nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		}
		enc = new (go$sliceType(Go$Uint8))([1, (go$shiftRightInt64(t.sec, 56).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 48).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 40).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 32).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 24).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 16).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 8).low << 24 >>> 24), (t.sec.low << 24 >>> 24), ((t.nsec >>> 24 >>> 0) << 24 >>> 24), ((t.nsec >>> 16 >>> 0) << 24 >>> 24), ((t.nsec >>> 8 >>> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, null];
	};
	Time.prototype.MarshalBinary = function() { return this.go$val.MarshalBinary(); };
	Time.Ptr.prototype.UnmarshalBinary = function(data$1) {
		var t, buf, _slice, _index, x, x$1, x$2, x$3, x$4, x$5, x$6, _slice$1, _index$1, x$7, _slice$2, _index$2, x$8, _slice$3, _index$3, x$9, _slice$4, _index$4, x$10, _slice$5, _index$5, x$11, _slice$6, _index$6, x$12, _slice$7, _index$7, x$13, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _slice$11, _index$11, _slice$12, _index$12, x$14, _slice$13, _index$13, _slice$14, _index$14, x$15, offset, localoff, _tuple, x$16;
		t = this;
		buf = data$1;
		if (buf.length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((_slice = buf, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = go$subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new Go$Int64(0, (_slice$1 = buf, _index$1 = 7, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))), x$7 = go$shiftLeft64(new Go$Int64(0, (_slice$2 = buf, _index$2 = 6, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))), 8), new Go$Int64(x$6.high | x$7.high, (x$6.low | x$7.low) >>> 0)), x$8 = go$shiftLeft64(new Go$Int64(0, (_slice$3 = buf, _index$3 = 5, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))), 16), new Go$Int64(x$5.high | x$8.high, (x$5.low | x$8.low) >>> 0)), x$9 = go$shiftLeft64(new Go$Int64(0, (_slice$4 = buf, _index$4 = 4, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"))), 24), new Go$Int64(x$4.high | x$9.high, (x$4.low | x$9.low) >>> 0)), x$10 = go$shiftLeft64(new Go$Int64(0, (_slice$5 = buf, _index$5 = 3, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"))), 32), new Go$Int64(x$3.high | x$10.high, (x$3.low | x$10.low) >>> 0)), x$11 = go$shiftLeft64(new Go$Int64(0, (_slice$6 = buf, _index$6 = 2, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"))), 40), new Go$Int64(x$2.high | x$11.high, (x$2.low | x$11.low) >>> 0)), x$12 = go$shiftLeft64(new Go$Int64(0, (_slice$7 = buf, _index$7 = 1, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"))), 48), new Go$Int64(x$1.high | x$12.high, (x$1.low | x$12.low) >>> 0)), x$13 = go$shiftLeft64(new Go$Int64(0, (_slice$8 = buf, _index$8 = 0, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"))), 56), new Go$Int64(x.high | x$13.high, (x.low | x$13.low) >>> 0));
		buf = go$subslice(buf, 8);
		t.nsec = ((((((_slice$9 = buf, _index$9 = 3, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")) >> 0) | (((_slice$10 = buf, _index$10 = 2, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")) >> 0) << 8 >> 0)) | (((_slice$11 = buf, _index$11 = 1, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")) >> 0) << 16 >> 0)) | (((_slice$12 = buf, _index$12 = 0, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")) >> 0) << 24 >> 0)) >>> 0);
		buf = go$subslice(buf, 4);
		offset = (x$14 = ((((_slice$13 = buf, _index$13 = 1, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")) << 16 >> 16) | (((_slice$14 = buf, _index$14 = 0, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range")) << 16 >> 16) << 8 << 16 >> 16)) >> 0), x$15 = 60, (((x$14 >>> 16 << 16) * x$15 >> 0) + (x$14 << 16 >>> 16) * x$15) >> 0);
		if (offset === -60) {
			t.loc = utcLoc;
		} else if (_tuple = go$pkg.Local.lookup((x$16 = t.sec, new Go$Int64(x$16.high + -15, x$16.low + 2288912640))), localoff = _tuple[1], offset === localoff) {
			t.loc = go$pkg.Local;
		} else {
			t.loc = FixedZone("", offset);
		}
		return null;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.go$val.UnmarshalBinary(data$1); };
	Time.Ptr.prototype.GobEncode = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return t.MarshalBinary();
	};
	Time.prototype.GobEncode = function() { return this.go$val.GobEncode(); };
	Time.Ptr.prototype.GobDecode = function(data$1) {
		var t;
		t = this;
		return t.UnmarshalBinary(data$1);
	};
	Time.prototype.GobDecode = function(data$1) { return this.go$val.GobDecode(data$1); };
	Time.Ptr.prototype.MarshalJSON = function() {
		var _struct, t, y;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		if (y = t.Year(), y < 0 || y >= 10000) {
			return [(go$sliceType(Go$Uint8)).nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		return [new (go$sliceType(Go$Uint8))(go$stringToBytes(t.Format("\"2006-01-02T15:04:05.999999999Z07:00\""))), null];
	};
	Time.prototype.MarshalJSON = function() { return this.go$val.MarshalJSON(); };
	Time.Ptr.prototype.UnmarshalJSON = function(data$1) {
		var err, t, _tuple, _struct, l, r;
		err = null;
		t = this;
		_tuple = Parse("\"2006-01-02T15:04:05Z07:00\"", go$bytesToString(data$1)), l = t, r = (_struct = _tuple[0], new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc)), l.sec = r.sec, l.nsec = r.nsec, l.loc = r.loc, err = _tuple[1];
		return err;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.go$val.UnmarshalJSON(data$1); };
	Time.Ptr.prototype.MarshalText = function() {
		var _struct, t, y;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		if (y = t.Year(), y < 0 || y >= 10000) {
			return [(go$sliceType(Go$Uint8)).nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		return [new (go$sliceType(Go$Uint8))(go$stringToBytes(t.Format("2006-01-02T15:04:05.999999999Z07:00"))), null];
	};
	Time.prototype.MarshalText = function() { return this.go$val.MarshalText(); };
	Time.Ptr.prototype.UnmarshalText = function(data$1) {
		var err, t, _tuple, _struct, l, r;
		err = null;
		t = this;
		_tuple = Parse("2006-01-02T15:04:05Z07:00", go$bytesToString(data$1)), l = t, r = (_struct = _tuple[0], new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc)), l.sec = r.sec, l.nsec = r.nsec, l.loc = r.loc, err = _tuple[1];
		return err;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.go$val.UnmarshalText(data$1); };
	Unix = go$pkg.Unix = function(sec, nsec) {
		var n, x, x$1;
		if ((nsec.high < 0 || (nsec.high === 0 && nsec.low < 0)) || (nsec.high > 0 || (nsec.high === 0 && nsec.low >= 1000000000))) {
			n = go$div64(nsec, new Go$Int64(0, 1000000000), false);
			sec = (x = n, new Go$Int64(sec.high + x.high, sec.low + x.low));
			nsec = (x$1 = go$mul64(n, new Go$Int64(0, 1000000000)), new Go$Int64(nsec.high - x$1.high, nsec.low - x$1.low));
			if ((nsec.high < 0 || (nsec.high === 0 && nsec.low < 0))) {
				nsec = new Go$Int64(nsec.high + 0, nsec.low + 1000000000);
				sec = new Go$Int64(sec.high - 0, sec.low - 1);
			}
		}
		return new Time.Ptr(new Go$Int64(sec.high + 14, sec.low + 2006054656), (nsec.low >>> 0), go$pkg.Local);
	};
	isLeap = function(year) {
		var _r, _r$1, _r$2;
		return ((_r = year % 4, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : go$throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var nhi, nlo, _q, n, _q$1, n$1, _tuple;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (((((n >>> 16 << 16) * base >> 0) + (n << 16 >>> 16) * base) >> 0)) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (((((n$1 >>> 16 << 16) * base >> 0) + (n$1 << 16 >>> 16) * base) >> 0)) >> 0;
		}
		_tuple = [hi, lo], nhi = _tuple[0], nlo = _tuple[1];
		return [nhi, nlo];
	};
	Date = go$pkg.Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var m, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, x, x$1, y, n, x$2, d, x$3, x$4, x$5, x$6, x$7, x$8, x$9, abs, x$10, x$11, unix, _tuple$5, offset, start, end, x$12, utc, _tuple$6, _tuple$7, x$13;
		if (loc === (go$ptrType(Location)).nil) {
			throw go$panic(new Go$String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple = norm(year, m, 12), year = _tuple[0], m = _tuple[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000), sec = _tuple$1[0], nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60), min = _tuple$2[0], sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60), hour = _tuple$3[0], min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24), day = _tuple$4[0], hour = _tuple$4[1];
		y = (x = (x$1 = new Go$Int64(0, year), new Go$Int64(x$1.high - -69, x$1.low - 4075721025)), new Go$Uint64(x.high, x.low));
		n = go$div64(y, new Go$Uint64(0, 400), false);
		y = (x$2 = go$mul64(new Go$Uint64(0, 400), n), new Go$Uint64(y.high - x$2.high, y.low - x$2.low));
		d = go$mul64(new Go$Uint64(0, 146097), n);
		n = go$div64(y, new Go$Uint64(0, 100), false);
		y = (x$3 = go$mul64(new Go$Uint64(0, 100), n), new Go$Uint64(y.high - x$3.high, y.low - x$3.low));
		d = (x$4 = go$mul64(new Go$Uint64(0, 36524), n), new Go$Uint64(d.high + x$4.high, d.low + x$4.low));
		n = go$div64(y, new Go$Uint64(0, 4), false);
		y = (x$5 = go$mul64(new Go$Uint64(0, 4), n), new Go$Uint64(y.high - x$5.high, y.low - x$5.low));
		d = (x$6 = go$mul64(new Go$Uint64(0, 1461), n), new Go$Uint64(d.high + x$6.high, d.low + x$6.low));
		n = y;
		d = (x$7 = go$mul64(new Go$Uint64(0, 365), n), new Go$Uint64(d.high + x$7.high, d.low + x$7.low));
		d = (x$8 = new Go$Uint64(0, daysBefore[(month - 1 >> 0)]), new Go$Uint64(d.high + x$8.high, d.low + x$8.low));
		if (isLeap(year) && month >= 3) {
			d = new Go$Uint64(d.high + 0, d.low + 1);
		}
		d = (x$9 = new Go$Uint64(0, (day - 1 >> 0)), new Go$Uint64(d.high + x$9.high, d.low + x$9.low));
		abs = go$mul64(d, new Go$Uint64(0, 86400));
		abs = (x$10 = new Go$Uint64(0, ((((((hour >>> 16 << 16) * 3600 >> 0) + (hour << 16 >>> 16) * 3600) >> 0) + ((((min >>> 16 << 16) * 60 >> 0) + (min << 16 >>> 16) * 60) >> 0) >> 0) + sec >> 0)), new Go$Uint64(abs.high + x$10.high, abs.low + x$10.low));
		unix = (x$11 = new Go$Int64(abs.high, abs.low), new Go$Int64(x$11.high + -2147483647, x$11.low + 3844486912));
		_tuple$5 = loc.lookup(unix), offset = _tuple$5[1], start = _tuple$5[3], end = _tuple$5[4];
		if (!((offset === 0))) {
			utc = (x$12 = new Go$Int64(0, offset), new Go$Int64(unix.high - x$12.high, unix.low - x$12.low));
			if ((utc.high < start.high || (utc.high === start.high && utc.low < start.low))) {
				_tuple$6 = loc.lookup(new Go$Int64(start.high - 0, start.low - 1)), offset = _tuple$6[1];
			} else if ((utc.high > end.high || (utc.high === end.high && utc.low >= end.low))) {
				_tuple$7 = loc.lookup(end), offset = _tuple$7[1];
			}
			unix = (x$13 = new Go$Int64(0, offset), new Go$Int64(unix.high - x$13.high, unix.low - x$13.low));
		}
		return new Time.Ptr(new Go$Int64(unix.high + 14, unix.low + 2006054656), (nsec >>> 0), loc);
	};
	Time.Ptr.prototype.Truncate = function(d) {
		var _struct, t, _struct$1, _tuple, _struct$2, r, _struct$3;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		if ((d.high < 0 || (d.high === 0 && d.low <= 0))) {
			return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
		}
		_tuple = div((_struct$2 = t, new Time.Ptr(_struct$2.sec, _struct$2.nsec, _struct$2.loc)), d), r = _tuple[1];
		return (_struct$3 = t.Add(new Duration(-r.high, -r.low)), new Time.Ptr(_struct$3.sec, _struct$3.nsec, _struct$3.loc));
	};
	Time.prototype.Truncate = function(d) { return this.go$val.Truncate(d); };
	Time.Ptr.prototype.Round = function(d) {
		var _struct, t, _struct$1, _tuple, _struct$2, r, x, _struct$3, _struct$4;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		if ((d.high < 0 || (d.high === 0 && d.low <= 0))) {
			return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
		}
		_tuple = div((_struct$2 = t, new Time.Ptr(_struct$2.sec, _struct$2.nsec, _struct$2.loc)), d), r = _tuple[1];
		if ((x = new Duration(r.high + r.high, r.low + r.low), (x.high < d.high || (x.high === d.high && x.low < d.low)))) {
			return (_struct$3 = t.Add(new Duration(-r.high, -r.low)), new Time.Ptr(_struct$3.sec, _struct$3.nsec, _struct$3.loc));
		}
		return (_struct$4 = t.Add(new Duration(d.high - r.high, d.low - r.low)), new Time.Ptr(_struct$4.sec, _struct$4.nsec, _struct$4.loc));
	};
	Time.prototype.Round = function(d) { return this.go$val.Round(d); };
	div = function(t, d) {
		var qmod2, r, neg, nsec, x, x$1, x$2, x$3, x$4, _q, _r, x$5, d1, x$6, x$7, x$8, x$9, x$10, sec, tmp, u1, u0, _tuple, u0x, x$11, _tuple$1, d1$1, x$12, d0, _tuple$2, x$13, x$14, x$15;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = (t.nsec >> 0);
		if ((x = t.sec, (x.high < 0 || (x.high === 0 && x.low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new Go$Int64(-x$1.high, -x$1.low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + 1000000000 >> 0;
				t.sec = (x$2 = t.sec, new Go$Int64(x$2.high - 0, x$2.low - 1));
			}
		}
		if ((d.high < 0 || (d.high === 0 && d.low < 1000000000)) && (x$3 = go$div64(new Duration(0, 1000000000), (new Duration(d.high + d.high, d.low + d.low)), true), (x$3.high === 0 && x$3.low === 0))) {
			qmod2 = ((_q = nsec / ((d.low + ((d.high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r = nsec % ((d.low + ((d.high >> 31) * 4294967296)) >> 0), _r === _r ? _r : go$throwRuntimeError("integer divide by zero")));
		} else if ((x$4 = go$div64(d, new Duration(0, 1000000000), true), (x$4.high === 0 && x$4.low === 0))) {
			d1 = (x$5 = go$div64(d, new Duration(0, 1000000000), false), new Go$Int64(x$5.high, x$5.low));
			qmod2 = ((x$6 = go$div64(t.sec, d1, false), x$6.low + ((x$6.high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$7 = go$mul64((x$8 = go$div64(t.sec, d1, true), new Duration(x$8.high, x$8.low)), new Duration(0, 1000000000)), x$9 = new Duration(0, nsec), new Duration(x$7.high + x$9.high, x$7.low + x$9.low));
		} else {
			sec = (x$10 = t.sec, new Go$Uint64(x$10.high, x$10.low));
			tmp = go$mul64((go$shiftRightUint64(sec, 32)), new Go$Uint64(0, 1000000000));
			u1 = go$shiftRightUint64(tmp, 32);
			u0 = go$shiftLeft64(tmp, 32);
			tmp = go$mul64(new Go$Uint64(sec.high & 0, (sec.low & 4294967295) >>> 0), new Go$Uint64(0, 1000000000));
			_tuple = [u0, new Go$Uint64(u0.high + tmp.high, u0.low + tmp.low)], u0x = _tuple[0], u0 = _tuple[1];
			if ((u0.high < u0x.high || (u0.high === u0x.high && u0.low < u0x.low))) {
				u1 = new Go$Uint64(u1.high + 0, u1.low + 1);
			}
			_tuple$1 = [u0, (x$11 = new Go$Uint64(0, nsec), new Go$Uint64(u0.high + x$11.high, u0.low + x$11.low))], u0x = _tuple$1[0], u0 = _tuple$1[1];
			if ((u0.high < u0x.high || (u0.high === u0x.high && u0.low < u0x.low))) {
				u1 = new Go$Uint64(u1.high + 0, u1.low + 1);
			}
			d1$1 = new Go$Uint64(d.high, d.low);
			while (!((x$12 = go$shiftRightUint64(d1$1, 63), (x$12.high === 0 && x$12.low === 1)))) {
				d1$1 = go$shiftLeft64(d1$1, 1);
			}
			d0 = new Go$Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.high > d1$1.high || (u1.high === d1$1.high && u1.low > d1$1.low)) || (u1.high === d1$1.high && u1.low === d1$1.low) && (u0.high > d0.high || (u0.high === d0.high && u0.low >= d0.low))) {
					qmod2 = 1;
					_tuple$2 = [u0, new Go$Uint64(u0.high - d0.high, u0.low - d0.low)], u0x = _tuple$2[0], u0 = _tuple$2[1];
					if ((u0.high > u0x.high || (u0.high === u0x.high && u0.low > u0x.low))) {
						u1 = new Go$Uint64(u1.high - 0, u1.low - 1);
					}
					u1 = (x$13 = d1$1, new Go$Uint64(u1.high - x$13.high, u1.low - x$13.low));
				}
				if ((d1$1.high === 0 && d1$1.low === 0) && (x$14 = new Go$Uint64(d.high, d.low), (d0.high === x$14.high && d0.low === x$14.low))) {
					break;
				}
				d0 = go$shiftRightUint64(d0, 1);
				d0 = (x$15 = go$shiftLeft64((new Go$Uint64(d1$1.high & 0, (d1$1.low & 1) >>> 0)), 63), new Go$Uint64(d0.high | x$15.high, (d0.low | x$15.low) >>> 0));
				d1$1 = go$shiftRightUint64(d1$1, 1);
			}
			r = new Duration(u0.high, u0.low);
		}
		if (neg && !((r.high === 0 && r.low === 0))) {
			qmod2 = (qmod2 ^ 1) >> 0;
			r = new Duration(d.high - r.high, d.low - r.low);
		}
		return [qmod2, r];
	};
	Location.Ptr.prototype.get = function() {
		var l;
		l = this;
		if (l === (go$ptrType(Location)).nil) {
			return utcLoc;
		}
		if (l === localLoc) {
			localOnce.Do(initLocal);
		}
		return l;
	};
	Location.prototype.get = function() { return this.go$val.get(); };
	Location.Ptr.prototype.String = function() {
		var l;
		l = this;
		return l.get().name;
	};
	Location.prototype.String = function() { return this.go$val.String(); };
	FixedZone = go$pkg.FixedZone = function(name, offset) {
		var l, _slice, _index;
		l = new Location.Ptr(name, new (go$sliceType(zone))([new zone.Ptr(name, offset, false)]), new (go$sliceType(zoneTrans))([new zoneTrans.Ptr(new Go$Int64(-2147483648, 0), 0, false, false)]), new Go$Int64(-2147483648, 0), new Go$Int64(2147483647, 4294967295), (go$ptrType(zone)).nil);
		l.cacheZone = (_slice = l.zone, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		return l;
	};
	Location.Ptr.prototype.lookup = function(sec) {
		var name, offset, isDST, start, end, l, zone$1, x, x$1, tx, lo, hi, _q, m, _slice, _index, lim, _slice$1, _index$1, _slice$2, _index$2, zone$2, _slice$3, _index$3;
		name = "";
		offset = 0;
		isDST = false;
		start = new Go$Int64(0, 0);
		end = new Go$Int64(0, 0);
		l = this;
		l = l.get();
		if (l.tx.length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new Go$Int64(-2147483648, 0);
			end = new Go$Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		if (zone$1 = l.cacheZone, !(zone$1 === (go$ptrType(zone)).nil) && (x = l.cacheStart, (x.high < sec.high || (x.high === sec.high && x.low <= sec.low))) && (x$1 = l.cacheEnd, (sec.high < x$1.high || (sec.high === x$1.high && sec.low < x$1.low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new Go$Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.length;
		while ((hi - lo >> 0) > 1) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			lim = (_slice = tx, _index = m, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).when;
			if ((sec.high < lim.high || (sec.high === lim.high && sec.low < lim.low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$2 = (_slice$1 = l.zone, _index$1 = (_slice$2 = tx, _index$2 = lo, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).index, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		name = zone$2.name;
		offset = zone$2.offset;
		isDST = zone$2.isDST;
		start = (_slice$3 = tx, _index$3 = lo, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).when;
		return [name, offset, isDST, start, end];
	};
	Location.prototype.lookup = function(sec) { return this.go$val.lookup(sec); };
	Location.Ptr.prototype.lookupName = function(name, unix) {
		var offset, isDST, ok, l, _ref, _i, i, _slice, _index, zone$1, _tuple, x, nam, offset$1, isDST$1, _tuple$1, _ref$1, _i$1, i$1, _slice$1, _index$1, zone$2, _tuple$2;
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		l = l.get();
		_ref = l.zone;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			zone$1 = (_slice = l.zone, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (zone$1.name === name) {
				_tuple = l.lookup((x = new Go$Int64(0, zone$1.offset), new Go$Int64(unix.high - x.high, unix.low - x.low))), nam = _tuple[0], offset$1 = _tuple[1], isDST$1 = _tuple[2];
				if (nam === zone$1.name) {
					_tuple$1 = [offset$1, isDST$1, true], offset = _tuple$1[0], isDST = _tuple$1[1], ok = _tuple$1[2];
					return [offset, isDST, ok];
				}
			}
			_i++;
		}
		_ref$1 = l.zone;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			i$1 = _i$1;
			zone$2 = (_slice$1 = l.zone, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (zone$2.name === name) {
				_tuple$2 = [zone$2.offset, zone$2.isDST, true], offset = _tuple$2[0], isDST = _tuple$2[1], ok = _tuple$2[2];
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
	};
	Location.prototype.lookupName = function(name, unix) { return this.go$val.lookupName(name, unix); };
	data.Ptr.prototype.read = function(n) {
		var d, p;
		d = this;
		if (d.p.length < n) {
			d.p = (go$sliceType(Go$Uint8)).nil;
			d.error = true;
			return (go$sliceType(Go$Uint8)).nil;
		}
		p = go$subslice(d.p, 0, n);
		d.p = go$subslice(d.p, n);
		return p;
	};
	data.prototype.read = function(n) { return this.go$val.read(n); };
	data.Ptr.prototype.big4 = function() {
		var n, ok, d, p, _tuple, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _tuple$1;
		n = 0;
		ok = false;
		d = this;
		p = d.read(4);
		if (p.length < 4) {
			d.error = true;
			_tuple = [0, false], n = _tuple[0], ok = _tuple[1];
			return [n, ok];
		}
		_tuple$1 = [((((((((_slice = p, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >>> 0) << 24 >>> 0) | (((_slice$1 = p, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) >>> 0) << 16 >>> 0)) >>> 0) | (((_slice$2 = p, _index$2 = 2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) >>> 0) << 8 >>> 0)) >>> 0) | ((_slice$3 = p, _index$3 = 3, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) >>> 0)) >>> 0, true], n = _tuple$1[0], ok = _tuple$1[1];
		return [n, ok];
	};
	data.prototype.big4 = function() { return this.go$val.big4(); };
	data.Ptr.prototype.byte$ = function() {
		var n, ok, d, p, _tuple, _slice, _index, _tuple$1;
		n = 0;
		ok = false;
		d = this;
		p = d.read(1);
		if (p.length < 1) {
			d.error = true;
			_tuple = [0, false], n = _tuple[0], ok = _tuple[1];
			return [n, ok];
		}
		_tuple$1 = [(_slice = p, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), true], n = _tuple$1[0], ok = _tuple$1[1];
		return [n, ok];
	};
	data.prototype.byte$ = function() { return this.go$val.byte$(); };
	byteString = function(p) {
		var i, _slice, _index;
		i = 0;
		while (i < p.length) {
			if ((_slice = p, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 0) {
				return go$bytesToString(go$subslice(p, 0, i));
			}
			i = i + 1 >> 0;
		}
		return go$bytesToString(p);
	};
	loadZoneData = function(bytes) {
		var l, err, d, magic, _tuple, p, _slice, _index, _slice$1, _index$1, _tuple$1, n, i, _tuple$2, nn, ok, _tuple$3, x, x$1, txtimes, txzones, x$2, x$3, zonedata, abbrev, x$4, x$5, isstd, isutc, _tuple$4, zone$1, _ref, _i, i$1, ok$1, n$1, _tuple$5, _tuple$6, _slice$2, _index$2, b, _tuple$7, _tuple$8, _slice$3, _index$3, _tuple$9, _tuple$10, _slice$4, _index$4, tx, _ref$1, _i$1, i$2, ok$2, n$2, _tuple$11, _tuple$12, _slice$5, _index$5, _slice$6, _index$6, _tuple$13, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _slice$11, _index$11, _slice$12, _index$12, _tuple$14, sec, _ref$2, _i$2, i$3, x$6, _slice$13, _index$13, x$7, _slice$14, _index$14, _slice$15, _index$15, _slice$16, _index$16, _slice$17, _index$17, _slice$18, _index$18, _tuple$15;
		l = (go$ptrType(Location)).nil;
		err = null;
		d = new data.Ptr(bytes, false);
		if (magic = d.read(4), !(go$bytesToString(magic) === "TZif")) {
			_tuple = [(go$ptrType(Location)).nil, badData], l = _tuple[0], err = _tuple[1];
			return [l, err];
		}
		p = (go$sliceType(Go$Uint8)).nil;
		if (p = d.read(16), !((p.length === 16)) || !(((_slice = p, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 0)) && !(((_slice$1 = p, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 50))) {
			_tuple$1 = [(go$ptrType(Location)).nil, badData], l = _tuple$1[0], err = _tuple$1[1];
			return [l, err];
		}
		n = go$makeNativeArray("Int", 6, function() { return 0; });
		i = 0;
		while (i < 6) {
			_tuple$2 = d.big4(), nn = _tuple$2[0], ok = _tuple$2[1];
			if (!ok) {
				_tuple$3 = [(go$ptrType(Location)).nil, badData], l = _tuple$3[0], err = _tuple$3[1];
				return [l, err];
			}
			n[i] = (nn >> 0);
			i = i + 1 >> 0;
		}
		txtimes = new data.Ptr(d.read((x = n[3], x$1 = 4, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0)), false);
		txzones = d.read(n[3]);
		zonedata = new data.Ptr(d.read((x$2 = n[4], x$3 = 6, (((x$2 >>> 16 << 16) * x$3 >> 0) + (x$2 << 16 >>> 16) * x$3) >> 0)), false);
		abbrev = d.read(n[5]);
		d.read((x$4 = n[2], x$5 = 8, (((x$4 >>> 16 << 16) * x$5 >> 0) + (x$4 << 16 >>> 16) * x$5) >> 0));
		isstd = d.read(n[1]);
		isutc = d.read(n[0]);
		if (d.error) {
			_tuple$4 = [(go$ptrType(Location)).nil, badData], l = _tuple$4[0], err = _tuple$4[1];
			return [l, err];
		}
		zone$1 = (go$sliceType(zone)).make(n[4], 0, function() { return new zone.Ptr(); });
		_ref = zone$1;
		_i = 0;
		while (_i < _ref.length) {
			i$1 = _i;
			ok$1 = false;
			n$1 = 0;
			if (_tuple$5 = zonedata.big4(), n$1 = _tuple$5[0], ok$1 = _tuple$5[1], !ok$1) {
				_tuple$6 = [(go$ptrType(Location)).nil, badData], l = _tuple$6[0], err = _tuple$6[1];
				return [l, err];
			}
			(_slice$2 = zone$1, _index$2 = i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).offset = ((n$1 >> 0) >> 0);
			b = 0;
			if (_tuple$7 = zonedata.byte$(), b = _tuple$7[0], ok$1 = _tuple$7[1], !ok$1) {
				_tuple$8 = [(go$ptrType(Location)).nil, badData], l = _tuple$8[0], err = _tuple$8[1];
				return [l, err];
			}
			(_slice$3 = zone$1, _index$3 = i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).isDST = !((b === 0));
			if (_tuple$9 = zonedata.byte$(), b = _tuple$9[0], ok$1 = _tuple$9[1], !ok$1 || (b >> 0) >= abbrev.length) {
				_tuple$10 = [(go$ptrType(Location)).nil, badData], l = _tuple$10[0], err = _tuple$10[1];
				return [l, err];
			}
			(_slice$4 = zone$1, _index$4 = i$1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).name = byteString(go$subslice(abbrev, b));
			_i++;
		}
		tx = (go$sliceType(zoneTrans)).make(n[3], 0, function() { return new zoneTrans.Ptr(); });
		_ref$1 = tx;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			i$2 = _i$1;
			ok$2 = false;
			n$2 = 0;
			if (_tuple$11 = txtimes.big4(), n$2 = _tuple$11[0], ok$2 = _tuple$11[1], !ok$2) {
				_tuple$12 = [(go$ptrType(Location)).nil, badData], l = _tuple$12[0], err = _tuple$12[1];
				return [l, err];
			}
			(_slice$5 = tx, _index$5 = i$2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")).when = new Go$Int64(0, (n$2 >> 0));
			if (((_slice$6 = txzones, _index$6 = i$2, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")) >> 0) >= zone$1.length) {
				_tuple$13 = [(go$ptrType(Location)).nil, badData], l = _tuple$13[0], err = _tuple$13[1];
				return [l, err];
			}
			(_slice$8 = tx, _index$8 = i$2, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")).index = (_slice$7 = txzones, _index$7 = i$2, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"));
			if (i$2 < isstd.length) {
				(_slice$10 = tx, _index$10 = i$2, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")).isstd = !(((_slice$9 = isstd, _index$9 = i$2, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")) === 0));
			}
			if (i$2 < isutc.length) {
				(_slice$12 = tx, _index$12 = i$2, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")).isutc = !(((_slice$11 = isutc, _index$11 = i$2, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")) === 0));
			}
			_i$1++;
		}
		if (tx.length === 0) {
			tx = go$append(tx, new zoneTrans.Ptr(new Go$Int64(-2147483648, 0), 0, false, false));
		}
		l = new Location.Ptr("", zone$1, tx, new Go$Int64(0, 0), new Go$Int64(0, 0), (go$ptrType(zone)).nil);
		_tuple$14 = now(), sec = _tuple$14[0];
		_ref$2 = tx;
		_i$2 = 0;
		while (_i$2 < _ref$2.length) {
			i$3 = _i$2;
			if ((x$6 = (_slice$13 = tx, _index$13 = i$3, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")).when, (x$6.high < sec.high || (x$6.high === sec.high && x$6.low <= sec.low))) && (((i$3 + 1 >> 0) === tx.length) || (x$7 = (_slice$14 = tx, _index$14 = (i$3 + 1 >> 0), (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range")).when, (sec.high < x$7.high || (sec.high === x$7.high && sec.low < x$7.low))))) {
				l.cacheStart = (_slice$15 = tx, _index$15 = i$3, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range")).when;
				l.cacheEnd = new Go$Int64(2147483647, 4294967295);
				if ((i$3 + 1 >> 0) < tx.length) {
					l.cacheEnd = (_slice$16 = tx, _index$16 = (i$3 + 1 >> 0), (_index$16 >= 0 && _index$16 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$16] : go$throwRuntimeError("index out of range")).when;
				}
				l.cacheZone = (_slice$17 = l.zone, _index$17 = (_slice$18 = tx, _index$18 = i$3, (_index$18 >= 0 && _index$18 < _slice$18.length) ? _slice$18.array[_slice$18.offset + _index$18] : go$throwRuntimeError("index out of range")).index, (_index$17 >= 0 && _index$17 < _slice$17.length) ? _slice$17.array[_slice$17.offset + _index$17] : go$throwRuntimeError("index out of range"));
			}
			_i$2++;
		}
		_tuple$15 = [l, null], l = _tuple$15[0], err = _tuple$15[1];
		return [l, err];
	};
	loadZoneFile = function(dir, name) {
		var l, err, _tuple, _tuple$1, buf, _tuple$2;
		l = (go$ptrType(Location)).nil;
		err = null;
		if (dir.length > 4 && dir.substring((dir.length - 4 >> 0)) === ".zip") {
			_tuple = loadZoneZip(dir, name), l = _tuple[0], err = _tuple[1];
			return [l, err];
		}
		if (!(dir === "")) {
			name = dir + "/" + name;
		}
		_tuple$1 = readFile(name), buf = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [l, err];
		}
		_tuple$2 = loadZoneData(buf), l = _tuple$2[0], err = _tuple$2[1];
		return [l, err];
	};
	get4 = function(b) {
		var _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3;
		if (b.length < 4) {
			return 0;
		}
		return ((((_slice = b, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0) | (((_slice$1 = b, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) >> 0) << 8 >> 0)) | (((_slice$2 = b, _index$2 = 2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) >> 0) << 16 >> 0)) | (((_slice$3 = b, _index$3 = 3, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) >> 0) << 24 >> 0);
	};
	get2 = function(b) {
		var _slice, _index, _slice$1, _index$1;
		if (b.length < 2) {
			return 0;
		}
		return ((_slice = b, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0) | (((_slice$1 = b, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) >> 0) << 8 >> 0);
	};
	loadZoneZip = function(zipfile, name) {
		var l, err, _tuple, fd, _tuple$1, buf, err$1, _tuple$2, n, size, off, err$2, _tuple$3, i, meth, size$1, namelen, xlen, fclen, off$1, zname, _tuple$4, err$3, _tuple$5, err$4, _tuple$6, _tuple$7, _tuple$8;
		l = (go$ptrType(Location)).nil;
		err = null;
		var go$deferred = [];
		try {
			_tuple = open(zipfile), fd = _tuple[0], err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				_tuple$1 = [(go$ptrType(Location)).nil, errors.New("open " + zipfile + ": " + err.Error())], l = _tuple$1[0], err = _tuple$1[1];
				return [l, err];
			}
			go$deferred.push({ fun: closefd, args: [fd] });
			buf = (go$sliceType(Go$Uint8)).make(22, 0, function() { return 0; });
			if (err$1 = preadn(fd, buf, -22), !(go$interfaceIsEqual(err$1, null)) || !((get4(buf) === 101010256))) {
				_tuple$2 = [(go$ptrType(Location)).nil, errors.New("corrupt zip file " + zipfile)], l = _tuple$2[0], err = _tuple$2[1];
				return [l, err];
			}
			n = get2(go$subslice(buf, 10));
			size = get4(go$subslice(buf, 12));
			off = get4(go$subslice(buf, 16));
			buf = (go$sliceType(Go$Uint8)).make(size, 0, function() { return 0; });
			if (err$2 = preadn(fd, buf, off), !(go$interfaceIsEqual(err$2, null))) {
				_tuple$3 = [(go$ptrType(Location)).nil, errors.New("corrupt zip file " + zipfile)], l = _tuple$3[0], err = _tuple$3[1];
				return [l, err];
			}
			i = 0;
			while (i < n) {
				if (!((get4(buf) === 33639248))) {
					break;
				}
				meth = get2(go$subslice(buf, 10));
				size$1 = get4(go$subslice(buf, 24));
				namelen = get2(go$subslice(buf, 28));
				xlen = get2(go$subslice(buf, 30));
				fclen = get2(go$subslice(buf, 32));
				off$1 = get4(go$subslice(buf, 42));
				zname = go$subslice(buf, 46, (46 + namelen >> 0));
				buf = go$subslice(buf, (((46 + namelen >> 0) + xlen >> 0) + fclen >> 0));
				if (!(go$bytesToString(zname) === name)) {
					i = i + 1 >> 0;
					continue;
				}
				if (!((meth === 0))) {
					_tuple$4 = [(go$ptrType(Location)).nil, errors.New("unsupported compression for " + name + " in " + zipfile)], l = _tuple$4[0], err = _tuple$4[1];
					return [l, err];
				}
				buf = (go$sliceType(Go$Uint8)).make(30 + namelen >> 0, 0, function() { return 0; });
				if (err$3 = preadn(fd, buf, off$1), !(go$interfaceIsEqual(err$3, null)) || !((get4(buf) === 67324752)) || !((get2(go$subslice(buf, 8)) === meth)) || !((get2(go$subslice(buf, 26)) === namelen)) || !(go$bytesToString(go$subslice(buf, 30, (30 + namelen >> 0))) === name)) {
					_tuple$5 = [(go$ptrType(Location)).nil, errors.New("corrupt zip file " + zipfile)], l = _tuple$5[0], err = _tuple$5[1];
					return [l, err];
				}
				xlen = get2(go$subslice(buf, 28));
				buf = (go$sliceType(Go$Uint8)).make(size$1, 0, function() { return 0; });
				if (err$4 = preadn(fd, buf, ((off$1 + 30 >> 0) + namelen >> 0) + xlen >> 0), !(go$interfaceIsEqual(err$4, null))) {
					_tuple$6 = [(go$ptrType(Location)).nil, errors.New("corrupt zip file " + zipfile)], l = _tuple$6[0], err = _tuple$6[1];
					return [l, err];
				}
				_tuple$7 = loadZoneData(buf), l = _tuple$7[0], err = _tuple$7[1];
				return [l, err];
			}
			_tuple$8 = [(go$ptrType(Location)).nil, errors.New("cannot find " + name + " in zip file " + zipfile)], l = _tuple$8[0], err = _tuple$8[1];
			return [l, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [l, err];
		}
	};
	initLocal = function() {
		var _tuple, tz, ok, _tuple$1, z, err, _struct, err$1, _tuple$2, z$1, _struct$1;
		_tuple = syscall.Getenv("TZ"), tz = _tuple[0], ok = _tuple[1];
		if (!ok) {
			_tuple$1 = loadZoneFile("", "/etc/localtime"), z = _tuple$1[0], err = _tuple$1[1];
			if (go$interfaceIsEqual(err, null)) {
				localLoc = (_struct = z, new Location.Ptr(_struct.name, _struct.zone, _struct.tx, _struct.cacheStart, _struct.cacheEnd, _struct.cacheZone));
				localLoc.name = "Local";
				return;
			}
		} else if (!(tz === "") && !(tz === "UTC")) {
			if (_tuple$2 = loadLocation(tz), z$1 = _tuple$2[0], err$1 = _tuple$2[1], go$interfaceIsEqual(err$1, null)) {
				localLoc = (_struct$1 = z$1, new Location.Ptr(_struct$1.name, _struct$1.zone, _struct$1.tx, _struct$1.cacheStart, _struct$1.cacheEnd, _struct$1.cacheZone));
				return;
			}
		}
		localLoc.name = "UTC";
	};
	loadLocation = function(name) {
		var _ref, _i, _slice, _index, zoneDir, err, _tuple, z;
		_ref = zoneDirs;
		_i = 0;
		while (_i < _ref.length) {
			zoneDir = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (_tuple = loadZoneFile(zoneDir, name), z = _tuple[0], err = _tuple[1], go$interfaceIsEqual(err, null)) {
				z.name = name;
				return [z, null];
			}
			_i++;
		}
		return [(go$ptrType(Location)).nil, errors.New("unknown time zone " + name)];
	};
	go$pkg.init = function() {
		ParseError.init([["Layout", "", Go$String, ""], ["Value", "", Go$String, ""], ["LayoutElem", "", Go$String, ""], ["ValueElem", "", Go$String, ""], ["Message", "", Go$String, ""]]);
		(go$ptrType(ParseError)).methods = [["Error", "", [], [Go$String], false]];
		Time.init([["sec", "time", Go$Int64, ""], ["nsec", "time", Go$Uintptr, ""], ["loc", "time", (go$ptrType(Location)), ""]]);
		Time.methods = [["Add", "", [Duration], [Time], false], ["AddDate", "", [Go$Int, Go$Int, Go$Int], [Time], false], ["After", "", [Time], [Go$Bool], false], ["Before", "", [Time], [Go$Bool], false], ["Clock", "", [], [Go$Int, Go$Int, Go$Int], false], ["Date", "", [], [Go$Int, Month, Go$Int], false], ["Day", "", [], [Go$Int], false], ["Equal", "", [Time], [Go$Bool], false], ["Format", "", [Go$String], [Go$String], false], ["GobEncode", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["Hour", "", [], [Go$Int], false], ["ISOWeek", "", [], [Go$Int, Go$Int], false], ["In", "", [(go$ptrType(Location))], [Time], false], ["IsZero", "", [], [Go$Bool], false], ["Local", "", [], [Time], false], ["Location", "", [], [(go$ptrType(Location))], false], ["MarshalBinary", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["MarshalJSON", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["MarshalText", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["Minute", "", [], [Go$Int], false], ["Month", "", [], [Month], false], ["Nanosecond", "", [], [Go$Int], false], ["Round", "", [Duration], [Time], false], ["Second", "", [], [Go$Int], false], ["String", "", [], [Go$String], false], ["Sub", "", [Time], [Duration], false], ["Truncate", "", [Duration], [Time], false], ["UTC", "", [], [Time], false], ["Unix", "", [], [Go$Int64], false], ["UnixNano", "", [], [Go$Int64], false], ["Weekday", "", [], [Weekday], false], ["Year", "", [], [Go$Int], false], ["YearDay", "", [], [Go$Int], false], ["Zone", "", [], [Go$String, Go$Int], false], ["abs", "time", [], [Go$Uint64], false], ["date", "time", [Go$Bool], [Go$Int, Month, Go$Int, Go$Int], false], ["locabs", "time", [], [Go$String, Go$Int, Go$Uint64], false]];
		(go$ptrType(Time)).methods = [["Add", "", [Duration], [Time], false], ["AddDate", "", [Go$Int, Go$Int, Go$Int], [Time], false], ["After", "", [Time], [Go$Bool], false], ["Before", "", [Time], [Go$Bool], false], ["Clock", "", [], [Go$Int, Go$Int, Go$Int], false], ["Date", "", [], [Go$Int, Month, Go$Int], false], ["Day", "", [], [Go$Int], false], ["Equal", "", [Time], [Go$Bool], false], ["Format", "", [Go$String], [Go$String], false], ["GobDecode", "", [(go$sliceType(Go$Uint8))], [go$error], false], ["GobEncode", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["Hour", "", [], [Go$Int], false], ["ISOWeek", "", [], [Go$Int, Go$Int], false], ["In", "", [(go$ptrType(Location))], [Time], false], ["IsZero", "", [], [Go$Bool], false], ["Local", "", [], [Time], false], ["Location", "", [], [(go$ptrType(Location))], false], ["MarshalBinary", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["MarshalJSON", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["MarshalText", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["Minute", "", [], [Go$Int], false], ["Month", "", [], [Month], false], ["Nanosecond", "", [], [Go$Int], false], ["Round", "", [Duration], [Time], false], ["Second", "", [], [Go$Int], false], ["String", "", [], [Go$String], false], ["Sub", "", [Time], [Duration], false], ["Truncate", "", [Duration], [Time], false], ["UTC", "", [], [Time], false], ["Unix", "", [], [Go$Int64], false], ["UnixNano", "", [], [Go$Int64], false], ["UnmarshalBinary", "", [(go$sliceType(Go$Uint8))], [go$error], false], ["UnmarshalJSON", "", [(go$sliceType(Go$Uint8))], [go$error], false], ["UnmarshalText", "", [(go$sliceType(Go$Uint8))], [go$error], false], ["Weekday", "", [], [Weekday], false], ["Year", "", [], [Go$Int], false], ["YearDay", "", [], [Go$Int], false], ["Zone", "", [], [Go$String, Go$Int], false], ["abs", "time", [], [Go$Uint64], false], ["date", "time", [Go$Bool], [Go$Int, Month, Go$Int, Go$Int], false], ["locabs", "time", [], [Go$String, Go$Int, Go$Uint64], false]];
		Month.methods = [["String", "", [], [Go$String], false]];
		(go$ptrType(Month)).methods = [["String", "", [], [Go$String], false]];
		Weekday.methods = [["String", "", [], [Go$String], false]];
		(go$ptrType(Weekday)).methods = [["String", "", [], [Go$String], false]];
		Duration.methods = [["Hours", "", [], [Go$Float64], false], ["Minutes", "", [], [Go$Float64], false], ["Nanoseconds", "", [], [Go$Int64], false], ["Seconds", "", [], [Go$Float64], false], ["String", "", [], [Go$String], false]];
		(go$ptrType(Duration)).methods = [["Hours", "", [], [Go$Float64], false], ["Minutes", "", [], [Go$Float64], false], ["Nanoseconds", "", [], [Go$Int64], false], ["Seconds", "", [], [Go$Float64], false], ["String", "", [], [Go$String], false]];
		Location.init([["name", "time", Go$String, ""], ["zone", "time", (go$sliceType(zone)), ""], ["tx", "time", (go$sliceType(zoneTrans)), ""], ["cacheStart", "time", Go$Int64, ""], ["cacheEnd", "time", Go$Int64, ""], ["cacheZone", "time", (go$ptrType(zone)), ""]]);
		(go$ptrType(Location)).methods = [["String", "", [], [Go$String], false], ["get", "time", [], [(go$ptrType(Location))], false], ["lookup", "time", [Go$Int64], [Go$String, Go$Int, Go$Bool, Go$Int64, Go$Int64], false], ["lookupName", "time", [Go$String, Go$Int64], [Go$Int, Go$Bool, Go$Bool], false]];
		zone.init([["name", "time", Go$String, ""], ["offset", "time", Go$Int, ""], ["isDST", "time", Go$Bool, ""]]);
		zoneTrans.init([["when", "time", Go$Int64, ""], ["index", "time", Go$Uint8, ""], ["isstd", "time", Go$Bool, ""], ["isutc", "time", Go$Bool, ""]]);
		data.init([["p", "time", (go$sliceType(Go$Uint8)), ""], ["error", "time", Go$Bool, ""]]);
		(go$ptrType(data)).methods = [["big4", "time", [], [Go$Uint32, Go$Bool], false], ["byte", "time", [], [Go$Uint8, Go$Bool], false], ["read", "time", [Go$Int], [(go$sliceType(Go$Uint8))], false]];
		localLoc = new Location.Ptr();
		localOnce = new sync.Once.Ptr();
		std0x = go$toNativeArray("Int", [260, 265, 524, 526, 528, 274]);
		longDayNames = new (go$sliceType(Go$String))(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new (go$sliceType(Go$String))(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new (go$sliceType(Go$String))(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new (go$sliceType(Go$String))(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = go$toNativeArray("String", ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = go$toNativeArray("String", ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = go$toNativeArray("Int32", [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.Ptr("UTC", (go$sliceType(zone)).nil, (go$sliceType(zoneTrans)).nil, new Go$Int64(0, 0), new Go$Int64(0, 0), (go$ptrType(zone)).nil);
		go$pkg.UTC = utcLoc;
		go$pkg.Local = localLoc;
		var _tuple;
		_tuple = syscall.Getenv("ZONEINFO"), zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		zoneDirs = new (go$sliceType(Go$String))(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
	}
	return go$pkg;
})();
go$packages["os"] = (function() {
	var go$pkg = {}, io = go$packages["io"], syscall = go$packages["syscall"], time = go$packages["time"], errors = go$packages["errors"], runtime = go$packages["runtime"], atomic = go$packages["sync/atomic"], sync = go$packages["sync"], PathError, SyscallError, File, file, dirInfo, FileInfo, FileMode, fileStat, Getenv, NewSyscallError, Open, sigpipe, Readlink, syscallMode, NewFile, epipecheck, OpenFile, Stat, Lstat, basename, Getwd, useSyscallwdDarwin, IsPathSeparator, Exit, sameFile, fileInfoFromStat, timespecToTime, SameFile, lstat, getwdCache, useSyscallwd;
	PathError = go$pkg.PathError = go$newType(0, "Struct", "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.go$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Path = Path_ !== undefined ? Path_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	SyscallError = go$pkg.SyscallError = go$newType(0, "Struct", "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.go$val = this;
		this.Syscall = Syscall_ !== undefined ? Syscall_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	File = go$pkg.File = go$newType(0, "Struct", "os.File", "File", "os", function(file_) {
		this.go$val = this;
		this.file = file_ !== undefined ? file_ : (go$ptrType(file)).nil;
	});
	File.prototype.close = function() { return this.go$val.close(); };
	File.Ptr.prototype.close = function() { return this.file.close(); };
	file = go$pkg.file = go$newType(0, "Struct", "os.file", "file", "os", function(fd_, name_, dirinfo_, nepipe_) {
		this.go$val = this;
		this.fd = fd_ !== undefined ? fd_ : 0;
		this.name = name_ !== undefined ? name_ : "";
		this.dirinfo = dirinfo_ !== undefined ? dirinfo_ : (go$ptrType(dirInfo)).nil;
		this.nepipe = nepipe_ !== undefined ? nepipe_ : 0;
	});
	dirInfo = go$pkg.dirInfo = go$newType(0, "Struct", "os.dirInfo", "dirInfo", "os", function(buf_, nbuf_, bufp_) {
		this.go$val = this;
		this.buf = buf_ !== undefined ? buf_ : (go$sliceType(Go$Uint8)).nil;
		this.nbuf = nbuf_ !== undefined ? nbuf_ : 0;
		this.bufp = bufp_ !== undefined ? bufp_ : 0;
	});
	FileInfo = go$pkg.FileInfo = go$newType(0, "Interface", "os.FileInfo", "FileInfo", "os", null);
	FileMode = go$pkg.FileMode = go$newType(4, "Uint32", "os.FileMode", "FileMode", "os", null);
	fileStat = go$pkg.fileStat = go$newType(0, "Struct", "os.fileStat", "fileStat", "os", function(name_, size_, mode_, modTime_, sys_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.size = size_ !== undefined ? size_ : new Go$Int64(0, 0);
		this.mode = mode_ !== undefined ? mode_ : 0;
		this.modTime = modTime_ !== undefined ? modTime_ : new time.Time.Ptr();
		this.sys = sys_ !== undefined ? sys_ : null;
	});
	File.Ptr.prototype.readdirnames = function(n) {
		var names, err, f, d, size, errno, _tuple, _tuple$1, _tuple$2, nb, nc, _tuple$3, _tuple$4, _tuple$5;
		names = (go$sliceType(Go$String)).nil;
		err = null;
		f = this;
		if (f.file.dirinfo === (go$ptrType(dirInfo)).nil) {
			f.file.dirinfo = new dirInfo.Ptr();
			f.file.dirinfo.buf = (go$sliceType(Go$Uint8)).make(4096, 0, function() { return 0; });
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = (go$sliceType(Go$String)).make(0, size, function() { return ""; });
		while (!((n === 0))) {
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = null;
				_tuple = syscall.ReadDirent(f.file.fd, d.buf), d.nbuf = _tuple[0], errno = _tuple[1];
				if (!(go$interfaceIsEqual(errno, null))) {
					_tuple$1 = [names, NewSyscallError("readdirent", errno)], names = _tuple$1[0], err = _tuple$1[1];
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tuple$2 = [0, 0], nb = _tuple$2[0], nc = _tuple$2[1];
			_tuple$3 = syscall.ParseDirent(go$subslice(d.buf, d.bufp, d.nbuf), n, names), nb = _tuple$3[0], nc = _tuple$3[1], names = _tuple$3[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.length === 0)) {
			_tuple$4 = [names, io.EOF], names = _tuple$4[0], err = _tuple$4[1];
			return [names, err];
		}
		_tuple$5 = [names, null], names = _tuple$5[0], err = _tuple$5[1];
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.go$val.readdirnames(n); };
	File.Ptr.prototype.Readdir = function(n) {
		var fi, err, f, _tuple, _tuple$1;
		fi = (go$sliceType(FileInfo)).nil;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [(go$sliceType(FileInfo)).nil, go$pkg.ErrInvalid], fi = _tuple[0], err = _tuple[1];
			return [fi, err];
		}
		_tuple$1 = f.readdir(n), fi = _tuple$1[0], err = _tuple$1[1];
		return [fi, err];
	};
	File.prototype.Readdir = function(n) { return this.go$val.Readdir(n); };
	File.Ptr.prototype.Readdirnames = function(n) {
		var names, err, f, _tuple, _tuple$1;
		names = (go$sliceType(Go$String)).nil;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [(go$sliceType(Go$String)).nil, go$pkg.ErrInvalid], names = _tuple[0], err = _tuple[1];
			return [names, err];
		}
		_tuple$1 = f.readdirnames(n), names = _tuple$1[0], err = _tuple$1[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.go$val.Readdirnames(n); };
	Getenv = go$pkg.Getenv = function(key) {
		var _tuple, v;
		_tuple = syscall.Getenv(key), v = _tuple[0];
		return v;
	};
	PathError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.Path + ": " + e.Err.Error();
	};
	PathError.prototype.Error = function() { return this.go$val.Error(); };
	SyscallError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Syscall + ": " + e.Err.Error();
	};
	SyscallError.prototype.Error = function() { return this.go$val.Error(); };
	NewSyscallError = go$pkg.NewSyscallError = function(syscall$1, err) {
		if (go$interfaceIsEqual(err, null)) {
			return null;
		}
		return new SyscallError.Ptr(syscall$1, err);
	};
	File.Ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.go$val.Name(); };
	File.Ptr.prototype.Read = function(b) {
		var n, err, f, _tuple, _tuple$1, e, _tuple$2, _tuple$3;
		n = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		_tuple$1 = f.read(b), n = _tuple$1[0], e = _tuple$1[1];
		if (n < 0) {
			n = 0;
		}
		if ((n === 0) && b.length > 0 && go$interfaceIsEqual(e, null)) {
			_tuple$2 = [0, io.EOF], n = _tuple$2[0], err = _tuple$2[1];
			return [n, err];
		}
		if (!(go$interfaceIsEqual(e, null))) {
			err = new PathError.Ptr("read", f.file.name, e);
		}
		_tuple$3 = [n, err], n = _tuple$3[0], err = _tuple$3[1];
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.go$val.Read(b); };
	File.Ptr.prototype.ReadAt = function(b, off) {
		var n, err, f, _tuple, _tuple$1, m, e, _tuple$2, x;
		n = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		while (b.length > 0) {
			_tuple$1 = f.pread(b, off), m = _tuple$1[0], e = _tuple$1[1];
			if ((m === 0) && go$interfaceIsEqual(e, null)) {
				_tuple$2 = [n, io.EOF], n = _tuple$2[0], err = _tuple$2[1];
				return [n, err];
			}
			if (!(go$interfaceIsEqual(e, null))) {
				err = new PathError.Ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = go$subslice(b, m);
			off = (x = new Go$Int64(0, m), new Go$Int64(off.high + x.high, off.low + x.low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.go$val.ReadAt(b, off); };
	File.Ptr.prototype.Write = function(b) {
		var n, err, f, _tuple, _tuple$1, e, _tuple$2;
		n = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		_tuple$1 = f.write(b), n = _tuple$1[0], e = _tuple$1[1];
		if (n < 0) {
			n = 0;
		}
		epipecheck(f, e);
		if (!(go$interfaceIsEqual(e, null))) {
			err = new PathError.Ptr("write", f.file.name, e);
		}
		_tuple$2 = [n, err], n = _tuple$2[0], err = _tuple$2[1];
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.go$val.Write(b); };
	File.Ptr.prototype.WriteAt = function(b, off) {
		var n, err, f, _tuple, _tuple$1, m, e, x;
		n = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		while (b.length > 0) {
			_tuple$1 = f.pwrite(b, off), m = _tuple$1[0], e = _tuple$1[1];
			if (!(go$interfaceIsEqual(e, null))) {
				err = new PathError.Ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = go$subslice(b, m);
			off = (x = new Go$Int64(0, m), new Go$Int64(off.high + x.high, off.low + x.low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.go$val.WriteAt(b, off); };
	File.Ptr.prototype.Seek = function(offset, whence) {
		var ret, err, f, _tuple, _tuple$1, r, e, _tuple$2, _tuple$3;
		ret = new Go$Int64(0, 0);
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [new Go$Int64(0, 0), go$pkg.ErrInvalid], ret = _tuple[0], err = _tuple[1];
			return [ret, err];
		}
		_tuple$1 = f.seek(offset, whence), r = _tuple$1[0], e = _tuple$1[1];
		if (go$interfaceIsEqual(e, null) && !(f.file.dirinfo === (go$ptrType(dirInfo)).nil) && !((r.high === 0 && r.low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$2 = [new Go$Int64(0, 0), new PathError.Ptr("seek", f.file.name, e)], ret = _tuple$2[0], err = _tuple$2[1];
			return [ret, err];
		}
		_tuple$3 = [r, null], ret = _tuple$3[0], err = _tuple$3[1];
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.go$val.Seek(offset, whence); };
	File.Ptr.prototype.WriteString = function(s) {
		var ret, err, f, _tuple, _tuple$1;
		ret = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid], ret = _tuple[0], err = _tuple[1];
			return [ret, err];
		}
		_tuple$1 = f.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes(s))), ret = _tuple$1[0], err = _tuple$1[1];
		return [ret, err];
	};
	File.prototype.WriteString = function(s) { return this.go$val.WriteString(s); };
	File.Ptr.prototype.Chdir = function() {
		var f, e;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		if (e = syscall.Fchdir(f.file.fd), !(go$interfaceIsEqual(e, null))) {
			return new PathError.Ptr("chdir", f.file.name, e);
		}
		return null;
	};
	File.prototype.Chdir = function() { return this.go$val.Chdir(); };
	Open = go$pkg.Open = function(name) {
		var file$1, err, _tuple;
		file$1 = (go$ptrType(File)).nil;
		err = null;
		_tuple = OpenFile(name, 0, 0), file$1 = _tuple[0], err = _tuple[1];
		return [file$1, err];
	};
	sigpipe = function() {
		throw go$panic("Native function not implemented: sigpipe");
	};
	Readlink = go$pkg.Readlink = function(name) {
		var len, x, b, _tuple, n, e;
		len = 128;
		while (true) {
			b = (go$sliceType(Go$Uint8)).make(len, 0, function() { return 0; });
			_tuple = syscall.Readlink(name, b), n = _tuple[0], e = _tuple[1];
			if (!(go$interfaceIsEqual(e, null))) {
				return ["", new PathError.Ptr("readlink", name, e)];
			}
			if (n < len) {
				return [go$bytesToString(go$subslice(b, 0, n)), null];
			}
			len = (x = 2, (((len >>> 16 << 16) * x >> 0) + (len << 16 >>> 16) * x) >> 0);
		}
	};
	syscallMode = function(i) {
		var o;
		o = 0;
		o = (o | (((new FileMode(i)).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | 2048) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | 1024) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | 512) >>> 0;
		}
		return o;
	};
	File.Ptr.prototype.Chmod = function(mode) {
		var f, e;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		if (e = syscall.Fchmod(f.file.fd, syscallMode(mode)), !(go$interfaceIsEqual(e, null))) {
			return new PathError.Ptr("chmod", f.file.name, e);
		}
		return null;
	};
	File.prototype.Chmod = function(mode) { return this.go$val.Chmod(mode); };
	File.Ptr.prototype.Chown = function(uid, gid) {
		var f, e;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		if (e = syscall.Fchown(f.file.fd, uid, gid), !(go$interfaceIsEqual(e, null))) {
			return new PathError.Ptr("chown", f.file.name, e);
		}
		return null;
	};
	File.prototype.Chown = function(uid, gid) { return this.go$val.Chown(uid, gid); };
	File.Ptr.prototype.Truncate = function(size) {
		var f, e;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		if (e = syscall.Ftruncate(f.file.fd, size), !(go$interfaceIsEqual(e, null))) {
			return new PathError.Ptr("truncate", f.file.name, e);
		}
		return null;
	};
	File.prototype.Truncate = function(size) { return this.go$val.Truncate(size); };
	File.Ptr.prototype.Sync = function() {
		var err, f, e;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			err = new syscall.Errno(22);
			return err;
		}
		if (e = syscall.Fsync(f.file.fd), !(go$interfaceIsEqual(e, null))) {
			err = NewSyscallError("fsync", e);
			return err;
		}
		err = null;
		return err;
	};
	File.prototype.Sync = function() { return this.go$val.Sync(); };
	File.Ptr.prototype.Fd = function() {
		var f;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.go$val.Fd(); };
	NewFile = go$pkg.NewFile = function(fd, name) {
		var fdi, f;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return (go$ptrType(File)).nil;
		}
		f = new File.Ptr(new file.Ptr(fdi, name, (go$ptrType(dirInfo)).nil, 0));
		runtime.SetFinalizer(f.file, new (go$funcType([(go$ptrType(file))], [go$error], false))((function(recv) { return recv.close(); })));
		return f;
	};
	epipecheck = function(file$1, e) {
		var v, v$1;
		if (go$interfaceIsEqual(e, new syscall.Errno(32))) {
			if (atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return file$1.file.nepipe; }, function(v) { file$1.file.nepipe = v; }), 1) >= 10) {
				sigpipe();
			}
		} else {
			atomic.StoreInt32(new (go$ptrType(Go$Int32))(function() { return file$1.file.nepipe; }, function(v$1) { file$1.file.nepipe = v$1; }), 0);
		}
	};
	OpenFile = go$pkg.OpenFile = function(name, flag, perm) {
		var file$1, err, _tuple, r, e, _tuple$1, _tuple$2;
		file$1 = (go$ptrType(File)).nil;
		err = null;
		_tuple = syscall.Open(name, flag | 16777216, syscallMode(perm)), r = _tuple[0], e = _tuple[1];
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$1 = [(go$ptrType(File)).nil, new PathError.Ptr("open", name, e)], file$1 = _tuple$1[0], err = _tuple$1[1];
			return [file$1, err];
		}
		syscall.CloseOnExec(r);
		_tuple$2 = [NewFile((r >>> 0), name), null], file$1 = _tuple$2[0], err = _tuple$2[1];
		return [file$1, err];
	};
	File.Ptr.prototype.Close = function() {
		var f;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.go$val.Close(); };
	file.Ptr.prototype.close = function() {
		var file$1, err, e;
		file$1 = this;
		if (file$1 === (go$ptrType(file)).nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = null;
		if (e = syscall.Close(file$1.fd), !(go$interfaceIsEqual(e, null))) {
			err = new PathError.Ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, null);
		return err;
	};
	file.prototype.close = function() { return this.go$val.close(); };
	File.Ptr.prototype.Stat = function() {
		var fi, err, f, _tuple, stat, _tuple$1, _tuple$2;
		fi = null;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [null, go$pkg.ErrInvalid], fi = _tuple[0], err = _tuple[1];
			return [fi, err];
		}
		stat = new syscall.Stat_t.Ptr();
		err = syscall.Fstat(f.file.fd, stat);
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [null, new PathError.Ptr("stat", f.file.name, err)], fi = _tuple$1[0], err = _tuple$1[1];
			return [fi, err];
		}
		_tuple$2 = [fileInfoFromStat(stat, f.file.name), null], fi = _tuple$2[0], err = _tuple$2[1];
		return [fi, err];
	};
	File.prototype.Stat = function() { return this.go$val.Stat(); };
	Stat = go$pkg.Stat = function(name) {
		var fi, err, stat, _tuple, _tuple$1;
		fi = null;
		err = null;
		stat = new syscall.Stat_t.Ptr();
		err = syscall.Stat(name, stat);
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple = [null, new PathError.Ptr("stat", name, err)], fi = _tuple[0], err = _tuple[1];
			return [fi, err];
		}
		_tuple$1 = [fileInfoFromStat(stat, name), null], fi = _tuple$1[0], err = _tuple$1[1];
		return [fi, err];
	};
	Lstat = go$pkg.Lstat = function(name) {
		var fi, err, stat, _tuple, _tuple$1;
		fi = null;
		err = null;
		stat = new syscall.Stat_t.Ptr();
		err = syscall.Lstat(name, stat);
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple = [null, new PathError.Ptr("lstat", name, err)], fi = _tuple[0], err = _tuple[1];
			return [fi, err];
		}
		_tuple$1 = [fileInfoFromStat(stat, name), null], fi = _tuple$1[0], err = _tuple$1[1];
		return [fi, err];
	};
	File.Ptr.prototype.readdir = function(n) {
		var fi, err, f, dirname, _tuple, names, _ref, _i, _slice, _index, filename, i, _tuple$1, fip, lerr, _slice$1, _index$1, _slice$2, _index$2, _tuple$2;
		fi = (go$sliceType(FileInfo)).nil;
		err = null;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		dirname = dirname + "/";
		_tuple = f.Readdirnames(n), names = _tuple[0], err = _tuple[1];
		fi = (go$sliceType(FileInfo)).make(names.length, 0, function() { return null; });
		_ref = names;
		_i = 0;
		while (_i < _ref.length) {
			filename = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_tuple$1 = lstat(dirname + filename), fip = _tuple$1[0], lerr = _tuple$1[1];
			if (!(go$interfaceIsEqual(lerr, null))) {
				_slice$1 = fi, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = new fileStat.Ptr(filename, new Go$Int64(0, 0), 0, new time.Time.Ptr(), null)) : go$throwRuntimeError("index out of range");
				_i++;
				continue;
			}
			_slice$2 = fi, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = fip) : go$throwRuntimeError("index out of range");
			_i++;
		}
		_tuple$2 = [fi, err], fi = _tuple$2[0], err = _tuple$2[1];
		return [fi, err];
	};
	File.prototype.readdir = function(n) { return this.go$val.readdir(n); };
	File.Ptr.prototype.read = function(b) {
		var n, err, f, _tuple;
		n = 0;
		err = null;
		f = this;
		_tuple = syscall.Read(f.file.fd, b), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.go$val.read(b); };
	File.Ptr.prototype.pread = function(b, off) {
		var n, err, f, _tuple;
		n = 0;
		err = null;
		f = this;
		_tuple = syscall.Pread(f.file.fd, b, off), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.go$val.pread(b, off); };
	File.Ptr.prototype.write = function(b) {
		var n, err, f, _tuple, m, err$1, _tuple$1;
		n = 0;
		err = null;
		f = this;
		while (true) {
			_tuple = syscall.Write(f.file.fd, b), m = _tuple[0], err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < b.length || go$interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = go$subslice(b, m);
				continue;
			}
			_tuple$1 = [n, err$1], n = _tuple$1[0], err = _tuple$1[1];
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.go$val.write(b); };
	File.Ptr.prototype.pwrite = function(b, off) {
		var n, err, f, _tuple;
		n = 0;
		err = null;
		f = this;
		_tuple = syscall.Pwrite(f.file.fd, b, off), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.go$val.pwrite(b, off); };
	File.Ptr.prototype.seek = function(offset, whence) {
		var ret, err, f, _tuple;
		ret = new Go$Int64(0, 0);
		err = null;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence), ret = _tuple[0], err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.go$val.seek(offset, whence); };
	basename = function(name) {
		var i;
		i = name.length - 1 >> 0;
		while (i > 0 && (name.charCodeAt(i) === 47)) {
			name = name.substring(0, i);
			i = i - 1 >> 0;
		}
		i = i - 1 >> 0;
		while (i >= 0) {
			if (name.charCodeAt(i) === 47) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - 1 >> 0;
		}
		return name;
	};
	Getwd = go$pkg.Getwd = function() {
		var go$this = this, pwd, err, _tuple, s, e, _tuple$1, _tuple$2, dot, _tuple$3, _tuple$4, d, err$1, _tuple$5, _tuple$6, d$1, err$2, _tuple$7, _tuple$8, root, _tuple$9, _tuple$10, parent, _tuple$11, _tuple$12, fd, err$3, _tuple$13, _tuple$14, names, err$4, _tuple$15, _ref, _i, _slice, _index, name, _tuple$16, d$2, _tuple$17, pd, _tuple$18, _tuple$19;
		pwd = "";
		err = null;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		_tuple = syscall.Getwd(), s = _tuple[0], e = _tuple[1];
		if (useSyscallwd(e)) {
			_tuple$1 = [s, NewSyscallError("getwd", e)], pwd = _tuple$1[0], err = _tuple$1[1];
			return [pwd, err];
		}
		_tuple$2 = Stat("."), dot = _tuple$2[0], err = _tuple$2[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$3 = ["", err], pwd = _tuple$3[0], err = _tuple$3[1];
			return [pwd, err];
		}
		pwd = Getenv("PWD");
		if (pwd.length > 0 && (pwd.charCodeAt(0) === 47)) {
			_tuple$4 = Stat(pwd), d = _tuple$4[0], err$1 = _tuple$4[1];
			if (go$interfaceIsEqual(err$1, null) && SameFile(dot, d)) {
				_tuple$5 = [pwd, null], pwd = _tuple$5[0], err = _tuple$5[1];
				return [pwd, err];
			}
		}
		getwdCache.Mutex.Lock();
		pwd = getwdCache.dir;
		getwdCache.Mutex.Unlock();
		if (pwd.length > 0) {
			_tuple$6 = Stat(pwd), d$1 = _tuple$6[0], err$2 = _tuple$6[1];
			if (go$interfaceIsEqual(err$2, null) && SameFile(dot, d$1)) {
				_tuple$7 = [pwd, null], pwd = _tuple$7[0], err = _tuple$7[1];
				return [pwd, err];
			}
		}
		_tuple$8 = Stat("/"), root = _tuple$8[0], err = _tuple$8[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$9 = ["", err], pwd = _tuple$9[0], err = _tuple$9[1];
			return [pwd, err];
		}
		if (SameFile(root, dot)) {
			_tuple$10 = ["/", null], pwd = _tuple$10[0], err = _tuple$10[1];
			return [pwd, err];
		}
		pwd = "";
		parent = "..";
		/* while (true) { */ case 2: if(!(true)) { go$s = 3; continue; }
			if (parent.length >= 1024) {
				_tuple$11 = ["", new syscall.Errno(63)], pwd = _tuple$11[0], err = _tuple$11[1];
				return [pwd, err];
			}
			_tuple$12 = Open(parent), fd = _tuple$12[0], err$3 = _tuple$12[1];
			if (!(go$interfaceIsEqual(err$3, null))) {
				_tuple$13 = ["", err$3], pwd = _tuple$13[0], err = _tuple$13[1];
				return [pwd, err];
			}
			/* while (true) { */ case 4: if(!(true)) { go$s = 5; continue; }
				_tuple$14 = fd.Readdirnames(100), names = _tuple$14[0], err$4 = _tuple$14[1];
				if (!(go$interfaceIsEqual(err$4, null))) {
					fd.Close();
					_tuple$15 = ["", err$4], pwd = _tuple$15[0], err = _tuple$15[1];
					return [pwd, err];
				}
				_ref = names;
				_i = 0;
				/* while (_i < _ref.length) { */ case 6: if(!(_i < _ref.length)) { go$s = 7; continue; }
					name = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					_tuple$16 = Lstat(parent + "/" + name), d$2 = _tuple$16[0];
					/* if (SameFile(d$2, dot)) { */ if (SameFile(d$2, dot)) {} else { go$s = 8; continue; }
						pwd = "/" + name + pwd;
						/* goto Found */ go$s = 1; continue;
					/* } */ case 8:
					_i++;
				/* } */ go$s = 6; continue; case 7:
			/* } */ go$s = 4; continue; case 5:
			/* Found: */ case 1:
			_tuple$17 = fd.Stat(), pd = _tuple$17[0], err$3 = _tuple$17[1];
			if (!(go$interfaceIsEqual(err$3, null))) {
				_tuple$18 = ["", err$3], pwd = _tuple$18[0], err = _tuple$18[1];
				return [pwd, err];
			}
			fd.Close();
			if (SameFile(pd, root)) {
				/* break; */ go$s = 3; continue;
			}
			dot = pd;
			parent = "../" + parent;
		/* } */ go$s = 2; continue; case 3:
		getwdCache.Mutex.Lock();
		getwdCache.dir = pwd;
		getwdCache.Mutex.Unlock();
		_tuple$19 = [pwd, null], pwd = _tuple$19[0], err = _tuple$19[1];
		return [pwd, err];
		/* */ } break; } }; return go$f();
	};
	useSyscallwdDarwin = function(err) {
		return !(go$interfaceIsEqual(err, new syscall.Errno(45)));
	};
	IsPathSeparator = go$pkg.IsPathSeparator = function(c) {
		return 47 === c;
	};
	Exit = go$pkg.Exit = function(code) {
		syscall.Exit(code);
	};
	sameFile = function(fs1, fs2) {
		var x, stat1, x$1, stat2, x$2, x$3;
		stat1 = (x = fs1.sys, (x !== null && x.constructor === (go$ptrType(syscall.Stat_t)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(syscall.Stat_t)))));
		stat2 = (x$1 = fs2.sys, (x$1 !== null && x$1.constructor === (go$ptrType(syscall.Stat_t)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(syscall.Stat_t)))));
		return (stat1.Dev === stat2.Dev) && (x$2 = stat1.Ino, x$3 = stat2.Ino, (x$2.high === x$3.high && x$2.low === x$3.low));
	};
	fileInfoFromStat = function(st, name) {
		var _struct, _struct$1, fs, _ref;
		fs = new fileStat.Ptr(basename(name), st.Size, 0, (_struct$1 = timespecToTime((_struct = st.Mtimespec, new syscall.Timespec.Ptr(_struct.Sec, _struct.Nsec))), new time.Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc)), st);
		fs.mode = (((st.Mode & 511) >>> 0) >>> 0);
		_ref = (st.Mode & 61440) >>> 0;
		if (_ref === 24576 || _ref === 57344) {
			fs.mode = (fs.mode | 67108864) >>> 0;
		} else if (_ref === 8192) {
			fs.mode = (fs.mode | 69206016) >>> 0;
		} else if (_ref === 16384) {
			fs.mode = (fs.mode | 2147483648) >>> 0;
		} else if (_ref === 4096) {
			fs.mode = (fs.mode | 33554432) >>> 0;
		} else if (_ref === 40960) {
			fs.mode = (fs.mode | 134217728) >>> 0;
		} else if (_ref === 32768) {
		} else if (_ref === 49152) {
			fs.mode = (fs.mode | 16777216) >>> 0;
		}
		if (!((((st.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | 4194304) >>> 0;
		}
		if (!((((st.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | 8388608) >>> 0;
		}
		if (!((((st.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | 1048576) >>> 0;
		}
		return fs;
	};
	timespecToTime = function(ts) {
		var _struct;
		return (_struct = time.Unix(ts.Sec, ts.Nsec), new time.Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
	};
	FileMode.prototype.String = function() {
		var m, buf, w, _ref, _i, _rune, c, i, y, _ref$1, _i$1, _rune$1, c$1, i$1, y$1;
		m = this.go$val;
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			i = _i;
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				buf[w] = (c << 24 >>> 24);
				w = w + 1 >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			buf[w] = 45;
			w = w + 1 >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			_rune$1 = go$decodeRune(_ref$1, _i$1);
			c$1 = _rune$1[0];
			i$1 = _i$1;
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				buf[w] = (c$1 << 24 >>> 24);
			} else {
				buf[w] = 45;
			}
			w = w + 1 >> 0;
			_i$1 += _rune$1[1];
		}
		return go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w));
	};
	go$ptrType(FileMode).prototype.String = function() { return new FileMode(this.go$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.go$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	go$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.go$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.go$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	go$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.go$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.go$val;
		return (m & 511) >>> 0;
	};
	go$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.go$get()).Perm(); };
	fileStat.Ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.go$val.Name(); };
	fileStat.Ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return (new FileMode(fs.Mode())).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.go$val.IsDir(); };
	SameFile = go$pkg.SameFile = function(fi1, fi2) {
		var _tuple, fs1, ok1, _tuple$1, fs2, ok2;
		_tuple = (fi1 !== null && fi1.constructor === (go$ptrType(fileStat)) ? [fi1.go$val, true] : [(go$ptrType(fileStat)).nil, false]), fs1 = _tuple[0], ok1 = _tuple[1];
		_tuple$1 = (fi2 !== null && fi2.constructor === (go$ptrType(fileStat)) ? [fi2.go$val, true] : [(go$ptrType(fileStat)).nil, false]), fs2 = _tuple$1[0], ok2 = _tuple$1[1];
		if (!ok1 || !ok2) {
			return false;
		}
		return sameFile(fs1, fs2);
	};
	fileStat.Ptr.prototype.Size = function() {
		var fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.go$val.Size(); };
	fileStat.Ptr.prototype.Mode = function() {
		var fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.go$val.Mode(); };
	fileStat.Ptr.prototype.ModTime = function() {
		var fs, _struct;
		fs = this;
		return (_struct = fs.modTime, new time.Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
	};
	fileStat.prototype.ModTime = function() { return this.go$val.ModTime(); };
	fileStat.Ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.go$val.Sys(); };

			if (go$packages["syscall"].Syscall15 !== undefined) { // windows
				NewFile = go$pkg.NewFile = function() { return new File.Ptr(); };
			}
			go$pkg.init = function() {
		PathError.init([["Op", "", Go$String, ""], ["Path", "", Go$String, ""], ["Err", "", go$error, ""]]);
		(go$ptrType(PathError)).methods = [["Error", "", [], [Go$String], false]];
		SyscallError.init([["Syscall", "", Go$String, ""], ["Err", "", go$error, ""]]);
		(go$ptrType(SyscallError)).methods = [["Error", "", [], [Go$String], false]];
		File.init([["", "os", (go$ptrType(file)), ""]]);
		File.methods = [["close", "os", [], [go$error], false]];
		(go$ptrType(File)).methods = [["Chdir", "", [], [go$error], false], ["Chmod", "", [FileMode], [go$error], false], ["Chown", "", [Go$Int, Go$Int], [go$error], false], ["Close", "", [], [go$error], false], ["Fd", "", [], [Go$Uintptr], false], ["Name", "", [], [Go$String], false], ["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["ReadAt", "", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false], ["Readdir", "", [Go$Int], [(go$sliceType(FileInfo)), go$error], false], ["Readdirnames", "", [Go$Int], [(go$sliceType(Go$String)), go$error], false], ["Seek", "", [Go$Int64, Go$Int], [Go$Int64, go$error], false], ["Stat", "", [], [FileInfo, go$error], false], ["Sync", "", [], [go$error], false], ["Truncate", "", [Go$Int64], [go$error], false], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["WriteAt", "", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false], ["WriteString", "", [Go$String], [Go$Int, go$error], false], ["close", "os", [], [go$error], false], ["pread", "os", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false], ["pwrite", "os", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false], ["read", "os", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["readdir", "os", [Go$Int], [(go$sliceType(FileInfo)), go$error], false], ["readdirnames", "os", [Go$Int], [(go$sliceType(Go$String)), go$error], false], ["seek", "os", [Go$Int64, Go$Int], [Go$Int64, go$error], false], ["write", "os", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false]];
		file.init([["fd", "os", Go$Int, ""], ["name", "os", Go$String, ""], ["dirinfo", "os", (go$ptrType(dirInfo)), ""], ["nepipe", "os", Go$Int32, ""]]);
		(go$ptrType(file)).methods = [["close", "os", [], [go$error], false]];
		dirInfo.init([["buf", "os", (go$sliceType(Go$Uint8)), ""], ["nbuf", "os", Go$Int, ""], ["bufp", "os", Go$Int, ""]]);
		FileInfo.init([["IsDir", "", (go$funcType([], [Go$Bool], false))], ["ModTime", "", (go$funcType([], [time.Time], false))], ["Mode", "", (go$funcType([], [FileMode], false))], ["Name", "", (go$funcType([], [Go$String], false))], ["Size", "", (go$funcType([], [Go$Int64], false))], ["Sys", "", (go$funcType([], [go$emptyInterface], false))]]);
		FileMode.methods = [["IsDir", "", [], [Go$Bool], false], ["IsRegular", "", [], [Go$Bool], false], ["Perm", "", [], [FileMode], false], ["String", "", [], [Go$String], false]];
		(go$ptrType(FileMode)).methods = [["IsDir", "", [], [Go$Bool], false], ["IsRegular", "", [], [Go$Bool], false], ["Perm", "", [], [FileMode], false], ["String", "", [], [Go$String], false]];
		fileStat.init([["name", "os", Go$String, ""], ["size", "os", Go$Int64, ""], ["mode", "os", FileMode, ""], ["modTime", "os", time.Time, ""], ["sys", "os", go$emptyInterface, ""]]);
		(go$ptrType(fileStat)).methods = [["IsDir", "", [], [Go$Bool], false], ["ModTime", "", [], [time.Time], false], ["Mode", "", [], [FileMode], false], ["Name", "", [], [Go$String], false], ["Size", "", [], [Go$Int64], false], ["Sys", "", [], [go$emptyInterface], false]];
		getwdCache = new (go$structType([["", "", sync.Mutex, ""], ["dir", "os", Go$String, ""]])).Ptr(new sync.Mutex.Ptr(), "");
		go$pkg.ErrInvalid = errors.New("invalid argument");
		go$pkg.ErrPermission = errors.New("permission denied");
		go$pkg.ErrExist = errors.New("file already exists");
		go$pkg.ErrNotExist = errors.New("file does not exist");
		go$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		go$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		go$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		lstat = Lstat;
		useSyscallwd = (function() {
			return true;
		});
		useSyscallwd = useSyscallwdDarwin;
	}
	return go$pkg;
})();
go$packages["strconv"] = (function() {
	var go$pkg = {}, math = go$packages["math"], errors = go$packages["errors"], utf8 = go$packages["unicode/utf8"], NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, FormatBool, syntaxError, rangeError, cutoff64, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, max, FormatUint, FormatInt, Itoa, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, optimize, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float64info, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts;
	NumError = go$pkg.NumError = go$newType(0, "Struct", "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.go$val = this;
		this.Func = Func_ !== undefined ? Func_ : "";
		this.Num = Num_ !== undefined ? Num_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	decimal = go$pkg.decimal = go$newType(0, "Struct", "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.go$val = this;
		this.d = d_ !== undefined ? d_ : go$makeNativeArray("Uint8", 800, function() { return 0; });
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
		this.trunc = trunc_ !== undefined ? trunc_ : false;
	});
	leftCheat = go$pkg.leftCheat = go$newType(0, "Struct", "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.go$val = this;
		this.delta = delta_ !== undefined ? delta_ : 0;
		this.cutoff = cutoff_ !== undefined ? cutoff_ : "";
	});
	extFloat = go$pkg.extFloat = go$newType(0, "Struct", "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.go$val = this;
		this.mant = mant_ !== undefined ? mant_ : new Go$Uint64(0, 0);
		this.exp = exp_ !== undefined ? exp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	floatInfo = go$pkg.floatInfo = go$newType(0, "Struct", "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.go$val = this;
		this.mantbits = mantbits_ !== undefined ? mantbits_ : 0;
		this.expbits = expbits_ !== undefined ? expbits_ : 0;
		this.bias = bias_ !== undefined ? bias_ : 0;
	});
	decimalSlice = go$pkg.decimalSlice = go$newType(0, "Struct", "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.go$val = this;
		this.d = d_ !== undefined ? d_ : (go$sliceType(Go$Uint8)).nil;
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	FormatBool = go$pkg.FormatBool = function(b) {
		if (b) {
			return "true";
		}
		return "false";
	};
	NumError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + e.Err.Error();
	};
	NumError.prototype.Error = function() { return this.go$val.Error(); };
	syntaxError = function(fn, str) {
		return new NumError.Ptr(fn, str, go$pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		return new NumError.Ptr(fn, str, go$pkg.ErrRange);
	};
	cutoff64 = function(base) {
		var x;
		if (base < 2) {
			return new Go$Uint64(0, 0);
		}
		return (x = go$div64(new Go$Uint64(4294967295, 4294967295), new Go$Uint64(0, base), false), new Go$Uint64(x.high + 0, x.low + 1));
	};
	ParseUint = go$pkg.ParseUint = function(s, base, bitSize) {
		var go$this = this, n, err, _tuple, cutoff, maxVal, s0, x, i, v, d, x$1, n1, _tuple$1, _tuple$2;
		n = new Go$Uint64(0, 0);
		err = null;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		_tuple = [new Go$Uint64(0, 0), new Go$Uint64(0, 0)], cutoff = _tuple[0], maxVal = _tuple[1];
		if (bitSize === 0) {
			bitSize = 32;
		}
		s0 = s;
		/* if (s.length < 1) { */ if (s.length < 1) {} else if (2 <= base && base <= 36) { go$s = 2; continue; } else if (base === 0) { go$s = 3; continue; } else { go$s = 4; continue; }
			err = go$pkg.ErrSyntax;
			/* goto Error */ go$s = 1; continue;
		/* } else if (2 <= base && base <= 36) { */ go$s = 5; continue; case 2: 
		/* } else if (base === 0) { */ go$s = 5; continue; case 3: 
			/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) {} else if (s.charCodeAt(0) === 48) { go$s = 6; continue; } else { go$s = 7; continue; }
				base = 16;
				s = s.substring(2);
				/* if (s.length < 1) { */ if (s.length < 1) {} else { go$s = 9; continue; }
					err = go$pkg.ErrSyntax;
					/* goto Error */ go$s = 1; continue;
				/* } */ case 9:
			/* } else if (s.charCodeAt(0) === 48) { */ go$s = 8; continue; case 6: 
				base = 8;
			/* } else { */ go$s = 8; continue; case 7: 
				base = 10;
			/* } */ case 8:
		/* } else { */ go$s = 5; continue; case 4: 
			err = errors.New("invalid base " + Itoa(base));
			/* goto Error */ go$s = 1; continue;
		/* } */ case 5:
		n = new Go$Uint64(0, 0);
		cutoff = cutoff64(base);
		maxVal = (x = go$shiftLeft64(new Go$Uint64(0, 1), (bitSize >>> 0)), new Go$Uint64(x.high - 0, x.low - 1));
		i = 0;
		/* while (i < s.length) { */ case 10: if(!(i < s.length)) { go$s = 11; continue; }
			v = 0;
			d = s.charCodeAt(i);
			/* if (48 <= d && d <= 57) { */ if (48 <= d && d <= 57) {} else if (97 <= d && d <= 122) { go$s = 12; continue; } else if (65 <= d && d <= 90) { go$s = 13; continue; } else { go$s = 14; continue; }
				v = d - 48 << 24 >>> 24;
			/* } else if (97 <= d && d <= 122) { */ go$s = 15; continue; case 12: 
				v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else if (65 <= d && d <= 90) { */ go$s = 15; continue; case 13: 
				v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else { */ go$s = 15; continue; case 14: 
				n = new Go$Uint64(0, 0);
				err = go$pkg.ErrSyntax;
				/* goto Error */ go$s = 1; continue;
			/* } */ case 15:
			/* if ((v >> 0) >= base) { */ if ((v >> 0) >= base) {} else { go$s = 16; continue; }
				n = new Go$Uint64(0, 0);
				err = go$pkg.ErrSyntax;
				/* goto Error */ go$s = 1; continue;
			/* } */ case 16:
			/* if ((n.high > cutoff.high || (n.high === cutoff.high && n.low >= cutoff.low))) { */ if ((n.high > cutoff.high || (n.high === cutoff.high && n.low >= cutoff.low))) {} else { go$s = 17; continue; }
				n = new Go$Uint64(4294967295, 4294967295);
				err = go$pkg.ErrRange;
				/* goto Error */ go$s = 1; continue;
			/* } */ case 17:
			n = go$mul64(n, (new Go$Uint64(0, base)));
			n1 = (x$1 = new Go$Uint64(0, v), new Go$Uint64(n.high + x$1.high, n.low + x$1.low));
			/* if ((n1.high < n.high || (n1.high === n.high && n1.low < n.low)) || (n1.high > maxVal.high || (n1.high === maxVal.high && n1.low > maxVal.low))) { */ if ((n1.high < n.high || (n1.high === n.high && n1.low < n.low)) || (n1.high > maxVal.high || (n1.high === maxVal.high && n1.low > maxVal.low))) {} else { go$s = 18; continue; }
				n = new Go$Uint64(4294967295, 4294967295);
				err = go$pkg.ErrRange;
				/* goto Error */ go$s = 1; continue;
			/* } */ case 18:
			n = n1;
			i = i + 1 >> 0;
		/* } */ go$s = 10; continue; case 11:
		_tuple$1 = [n, null], n = _tuple$1[0], err = _tuple$1[1];
		return [n, err];
		/* Error: */ case 1:
		_tuple$2 = [n, new NumError.Ptr("ParseUint", s0, err)], n = _tuple$2[0], err = _tuple$2[1];
		return [n, err];
		/* */ } break; } }; return go$f();
	};
	ParseInt = go$pkg.ParseInt = function(s, base, bitSize) {
		var i, err, _tuple, s0, neg, un, _tuple$1, _tuple$2, cutoff, x, _tuple$3, x$1, _tuple$4, n, _tuple$5;
		i = new Go$Int64(0, 0);
		err = null;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tuple = [new Go$Int64(0, 0), syntaxError("ParseInt", s)], i = _tuple[0], err = _tuple[1];
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new Go$Uint64(0, 0);
		_tuple$1 = ParseUint(s, base, bitSize), un = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null)) && !(go$interfaceIsEqual((err !== null && err.constructor === (go$ptrType(NumError)) ? err.go$val : go$typeAssertionFailed(err, (go$ptrType(NumError)))).Err, go$pkg.ErrRange))) {
			(err !== null && err.constructor === (go$ptrType(NumError)) ? err.go$val : go$typeAssertionFailed(err, (go$ptrType(NumError)))).Func = "ParseInt";
			(err !== null && err.constructor === (go$ptrType(NumError)) ? err.go$val : go$typeAssertionFailed(err, (go$ptrType(NumError)))).Num = s0;
			_tuple$2 = [new Go$Int64(0, 0), err], i = _tuple$2[0], err = _tuple$2[1];
			return [i, err];
		}
		cutoff = go$shiftLeft64(new Go$Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.high > cutoff.high || (un.high === cutoff.high && un.low >= cutoff.low))) {
			_tuple$3 = [(x = new Go$Uint64(cutoff.high - 0, cutoff.low - 1), new Go$Int64(x.high, x.low)), rangeError("ParseInt", s0)], i = _tuple$3[0], err = _tuple$3[1];
			return [i, err];
		}
		if (neg && (un.high > cutoff.high || (un.high === cutoff.high && un.low > cutoff.low))) {
			_tuple$4 = [(x$1 = new Go$Int64(cutoff.high, cutoff.low), new Go$Int64(-x$1.high, -x$1.low)), rangeError("ParseInt", s0)], i = _tuple$4[0], err = _tuple$4[1];
			return [i, err];
		}
		n = new Go$Int64(un.high, un.low);
		if (neg) {
			n = new Go$Int64(-n.high, -n.low);
		}
		_tuple$5 = [n, null], i = _tuple$5[0], err = _tuple$5[1];
		return [i, err];
	};
	Atoi = go$pkg.Atoi = function(s) {
		var i, err, _tuple, i64, _tuple$1;
		i = 0;
		err = null;
		_tuple = ParseInt(s, 10, 0), i64 = _tuple[0], err = _tuple[1];
		_tuple$1 = [((i64.low + ((i64.high >> 31) * 4294967296)) >> 0), err], i = _tuple$1[0], err = _tuple$1[1];
		return [i, err];
	};
	decimal.Ptr.prototype.String = function() {
		var a, n, buf, w, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = (go$sliceType(Go$Uint8)).make(n, 0, function() { return 0; });
		w = 0;
		if (a.nd === 0) {
			return "0";
		} else if (a.dp <= 0) {
			_slice = buf, _index = w, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 48) : go$throwRuntimeError("index out of range");
			w = w + 1 >> 0;
			_slice$1 = buf, _index$1 = w, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 46) : go$throwRuntimeError("index out of range");
			w = w + 1 >> 0;
			w = w + (digitZero(go$subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + (go$copySlice(go$subslice(buf, w), go$subslice(new (go$sliceType(Go$Uint8))(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + (go$copySlice(go$subslice(buf, w), go$subslice(new (go$sliceType(Go$Uint8))(a.d), 0, a.dp))) >> 0;
			_slice$2 = buf, _index$2 = w, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 46) : go$throwRuntimeError("index out of range");
			w = w + 1 >> 0;
			w = w + (go$copySlice(go$subslice(buf, w), go$subslice(new (go$sliceType(Go$Uint8))(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + (go$copySlice(go$subslice(buf, w), go$subslice(new (go$sliceType(Go$Uint8))(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero(go$subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return go$bytesToString(go$subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.go$val.String(); };
	digitZero = function(dst) {
		var _ref, _i, i, _slice, _index;
		_ref = dst;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_slice = dst, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 48) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return dst.length;
	};
	trim = function(a) {
		while (a.nd > 0 && (a.d[(a.nd - 1 >> 0)] === 48)) {
			a.nd = a.nd - 1 >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.Ptr.prototype.Assign = function(v) {
		var a, buf, n, v1, x;
		a = this;
		buf = go$makeNativeArray("Uint8", 24, function() { return 0; });
		n = 0;
		while ((v.high > 0 || (v.high === 0 && v.low > 0))) {
			v1 = go$div64(v, new Go$Uint64(0, 10), false);
			v = (x = go$mul64(new Go$Uint64(0, 10), v1), new Go$Uint64(v.high - x.high, v.low - x.low));
			buf[n] = (new Go$Uint64(v.high + 0, v.low + 48).low << 24 >>> 24);
			n = n + 1 >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - 1 >> 0;
		while (n >= 0) {
			a.d[a.nd] = buf[n];
			a.nd = a.nd + 1 >> 0;
			n = n - 1 >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.go$val.Assign(v); };
	rightShift = function(a, k) {
		var r, w, n, x, c, x$1, c$1, dig, y, x$2, dig$1, y$1, x$3;
		r = 0;
		w = 0;
		n = 0;
		while (((n >> go$min(k, 31)) >> 0) === 0) {
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (((n >> go$min(k, 31)) >> 0) === 0) {
					n = (x = 10, (((n >>> 16 << 16) * x >> 0) + (n << 16 >>> 16) * x) >> 0);
					r = r + 1 >> 0;
				}
				break;
			}
			c = (a.d[r] >> 0);
			n = ((x$1 = 10, (((n >>> 16 << 16) * x$1 >> 0) + (n << 16 >>> 16) * x$1) >> 0) + c >> 0) - 48 >> 0;
			r = r + 1 >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (r < a.nd) {
			c$1 = (a.d[r] >> 0);
			dig = (n >> go$min(k, 31)) >> 0;
			n = n - (((y = k, y < 32 ? (dig << y) : 0) >> 0)) >> 0;
			a.d[w] = ((dig + 48 >> 0) << 24 >>> 24);
			w = w + 1 >> 0;
			n = ((x$2 = 10, (((n >>> 16 << 16) * x$2 >> 0) + (n << 16 >>> 16) * x$2) >> 0) + c$1 >> 0) - 48 >> 0;
			r = r + 1 >> 0;
		}
		while (n > 0) {
			dig$1 = (n >> go$min(k, 31)) >> 0;
			n = n - (((y$1 = k, y$1 < 32 ? (dig$1 << y$1) : 0) >> 0)) >> 0;
			if (w < 800) {
				a.d[w] = ((dig$1 + 48 >> 0) << 24 >>> 24);
				w = w + 1 >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = (x$3 = 10, (((n >>> 16 << 16) * x$3 >> 0) + (n << 16 >>> 16) * x$3) >> 0);
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var i, _slice, _index, _slice$1, _index$1;
		i = 0;
		while (i < s.length) {
			if (i >= b.length) {
				return true;
			}
			if (!(((_slice = b, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === s.charCodeAt(i)))) {
				return (_slice$1 = b, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) < s.charCodeAt(i);
			}
			i = i + 1 >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _slice, _index, delta, _slice$1, _index$1, r, w, n, y, _q, quo, x, rem, _q$1, quo$1, x$1, rem$1;
		delta = (_slice = leftcheats, _index = k, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).delta;
		if (prefixIsLessThan(go$subslice(new (go$sliceType(Go$Uint8))(a.d), 0, a.nd), (_slice$1 = leftcheats, _index$1 = k, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).cutoff)) {
			delta = delta - 1 >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - 1 >> 0;
		while (r >= 0) {
			n = n + (((y = k, y < 32 ? ((((a.d[r] >> 0) - 48 >> 0)) << y) : 0) >> 0)) >> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
			rem = n - (x = 10, (((x >>> 16 << 16) * quo >> 0) + (x << 16 >>> 16) * quo) >> 0) >> 0;
			w = w - 1 >> 0;
			if (w < 800) {
				a.d[w] = ((rem + 48 >> 0) << 24 >>> 24);
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - 1 >> 0;
		}
		while (n > 0) {
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
			rem$1 = n - (x$1 = 10, (((x$1 >>> 16 << 16) * quo$1 >> 0) + (x$1 << 16 >>> 16) * quo$1) >> 0) >> 0;
			w = w - 1 >> 0;
			if (w < 800) {
				a.d[w] = ((rem$1 + 48 >> 0) << 24 >>> 24);
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.Ptr.prototype.Shift = function(k) {
		var a;
		a = this;
		if (a.nd === 0) {
		} else if (k > 0) {
			while (k > 27) {
				leftShift(a, 27);
				k = k - 27 >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (k < -27) {
				rightShift(a, 27);
				k = k + 27 >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.go$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if ((a.d[nd] === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = ((a.d[(nd - 1 >> 0)] - 48 << 24 >>> 24)) % 2, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0));
		}
		return a.d[nd] >= 53;
	};
	decimal.Ptr.prototype.Round = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.go$val.Round(nd); };
	decimal.Ptr.prototype.RoundDown = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.go$val.RoundDown(nd); };
	decimal.Ptr.prototype.RoundUp = function(nd) {
		var a, i, c, _lhs, _index;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (i >= 0) {
			c = a.d[i];
			if (c < 57) {
				_lhs = a.d, _index = i, _lhs[_index] = _lhs[_index] + 1 << 24 >>> 24;
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - 1 >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + 1 >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.go$val.RoundUp(nd); };
	decimal.Ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1;
		a = this;
		if (a.dp > 20) {
			return new Go$Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new Go$Uint64(0, 0);
		i = 0;
		while (i < a.dp && i < a.nd) {
			n = (x = go$mul64(n, new Go$Uint64(0, 10)), x$1 = new Go$Uint64(0, (a.d[i] - 48 << 24 >>> 24)), new Go$Uint64(x.high + x$1.high, x.low + x$1.low));
			i = i + 1 >> 0;
		}
		while (i < a.dp) {
			n = go$mul64(n, new Go$Uint64(0, 10));
			i = i + 1 >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = new Go$Uint64(n.high + 0, n.low + 1);
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.go$val.RoundedInteger(); };
	extFloat.Ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var lower, upper, f, x, _struct, _struct$1, _tuple, _struct$2, _struct$3, expBiased, x$1, x$2, x$3, x$4, _struct$4, _struct$5;
		lower = new extFloat.Ptr();
		upper = new extFloat.Ptr();
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = go$shiftLeft64((go$shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.high === x.high && mant.low === x.low))) {
			f.mant = go$shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tuple = [(_struct = f, new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)), (_struct$1 = f, new extFloat.Ptr(_struct$1.mant, _struct$1.exp, _struct$1.neg))], lower = _tuple[0], upper = _tuple[1];
			return [(_struct$2 = lower, new extFloat.Ptr(_struct$2.mant, _struct$2.exp, _struct$2.neg)), (_struct$3 = upper, new extFloat.Ptr(_struct$3.mant, _struct$3.exp, _struct$3.neg))];
		}
		expBiased = exp - flt.bias >> 0;
		upper = new extFloat.Ptr((x$1 = go$mul64(new Go$Uint64(0, 2), f.mant), new Go$Uint64(x$1.high + 0, x$1.low + 1)), f.exp - 1 >> 0, f.neg);
		if (!((x$2 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), (mant.high === x$2.high && mant.low === x$2.low))) || (expBiased === 1)) {
			lower = new extFloat.Ptr((x$3 = go$mul64(new Go$Uint64(0, 2), f.mant), new Go$Uint64(x$3.high - 0, x$3.low - 1)), f.exp - 1 >> 0, f.neg);
		} else {
			lower = new extFloat.Ptr((x$4 = go$mul64(new Go$Uint64(0, 4), f.mant), new Go$Uint64(x$4.high - 0, x$4.low - 1)), f.exp - 2 >> 0, f.neg);
		}
		return [(_struct$4 = lower, new extFloat.Ptr(_struct$4.mant, _struct$4.exp, _struct$4.neg)), (_struct$5 = upper, new extFloat.Ptr(_struct$5.mant, _struct$5.exp, _struct$5.neg))];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.go$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.Ptr.prototype.Normalize = function() {
		var shift, f, _tuple, mant, exp, x, x$1, x$2, x$3, x$4, x$5, _tuple$1;
		shift = 0;
		f = this;
		_tuple = [f.mant, f.exp], mant = _tuple[0], exp = _tuple[1];
		if ((mant.high === 0 && mant.low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = go$shiftRightUint64(mant, 32), (x.high === 0 && x.low === 0))) {
			mant = go$shiftLeft64(mant, 32);
			exp = exp - 32 >> 0;
		}
		if ((x$1 = go$shiftRightUint64(mant, 48), (x$1.high === 0 && x$1.low === 0))) {
			mant = go$shiftLeft64(mant, 16);
			exp = exp - 16 >> 0;
		}
		if ((x$2 = go$shiftRightUint64(mant, 56), (x$2.high === 0 && x$2.low === 0))) {
			mant = go$shiftLeft64(mant, 8);
			exp = exp - 8 >> 0;
		}
		if ((x$3 = go$shiftRightUint64(mant, 60), (x$3.high === 0 && x$3.low === 0))) {
			mant = go$shiftLeft64(mant, 4);
			exp = exp - 4 >> 0;
		}
		if ((x$4 = go$shiftRightUint64(mant, 62), (x$4.high === 0 && x$4.low === 0))) {
			mant = go$shiftLeft64(mant, 2);
			exp = exp - 2 >> 0;
		}
		if ((x$5 = go$shiftRightUint64(mant, 63), (x$5.high === 0 && x$5.low === 0))) {
			mant = go$shiftLeft64(mant, 1);
			exp = exp - 1 >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tuple$1 = [mant, exp], f.mant = _tuple$1[0], f.exp = _tuple$1[1];
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.go$val.Normalize(); };
	extFloat.Ptr.prototype.Multiply = function(g) {
		var f, _tuple, fhi, flo, _tuple$1, ghi, glo, cross1, cross2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, rem, x$8, x$9;
		f = this;
		_tuple = [go$shiftRightUint64(f.mant, 32), new Go$Uint64(0, (f.mant.low >>> 0))], fhi = _tuple[0], flo = _tuple[1];
		_tuple$1 = [go$shiftRightUint64(g.mant, 32), new Go$Uint64(0, (g.mant.low >>> 0))], ghi = _tuple$1[0], glo = _tuple$1[1];
		cross1 = go$mul64(fhi, glo);
		cross2 = go$mul64(flo, ghi);
		f.mant = (x = (x$1 = go$mul64(fhi, ghi), x$2 = go$shiftRightUint64(cross1, 32), new Go$Uint64(x$1.high + x$2.high, x$1.low + x$2.low)), x$3 = go$shiftRightUint64(cross2, 32), new Go$Uint64(x.high + x$3.high, x.low + x$3.low));
		rem = (x$4 = (x$5 = new Go$Uint64(0, (cross1.low >>> 0)), x$6 = new Go$Uint64(0, (cross2.low >>> 0)), new Go$Uint64(x$5.high + x$6.high, x$5.low + x$6.low)), x$7 = go$shiftRightUint64((go$mul64(flo, glo)), 32), new Go$Uint64(x$4.high + x$7.high, x$4.low + x$7.low));
		rem = new Go$Uint64(rem.high + 0, rem.low + 2147483648);
		f.mant = (x$8 = f.mant, x$9 = (go$shiftRightUint64(rem, 32)), new Go$Uint64(x$8.high + x$9.high, x$8.low + x$9.low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.go$val.Multiply(g); };
	extFloat.Ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var ok, f, errors$1, _q, i, _r, adjExp, x, _struct, _struct$1, shift, y, denormalExp, extrabits, halfway, x$1, x$2, x$3, mant_extra, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + 4 >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = uint64pow10[(19 - adjExp >> 0)], (mantissa.high < x.high || (mantissa.high === x.high && mantissa.low < x.low)))) {
			f.mant = go$mul64(f.mant, (uint64pow10[adjExp]));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply((_struct = smallPowersOfTen[adjExp], new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)));
			errors$1 = errors$1 + 4 >> 0;
		}
		f.Multiply((_struct$1 = powersOfTen[i], new extFloat.Ptr(_struct$1.mant, _struct$1.exp, _struct$1.neg)));
		if (errors$1 > 0) {
			errors$1 = errors$1 + 1 >> 0;
		}
		errors$1 = errors$1 + 4 >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = go$shiftLeft64(new Go$Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$1 = f.mant, x$2 = (x$3 = go$shiftLeft64(new Go$Uint64(0, 1), extrabits), new Go$Uint64(x$3.high - 0, x$3.low - 1)), new Go$Uint64(x$1.high & x$2.high, (x$1.low & x$2.low) >>> 0));
		if ((x$4 = (x$5 = new Go$Int64(halfway.high, halfway.low), x$6 = new Go$Int64(0, errors$1), new Go$Int64(x$5.high - x$6.high, x$5.low - x$6.low)), x$7 = new Go$Int64(mant_extra.high, mant_extra.low), (x$4.high < x$7.high || (x$4.high === x$7.high && x$4.low < x$7.low))) && (x$8 = new Go$Int64(mant_extra.high, mant_extra.low), x$9 = (x$10 = new Go$Int64(halfway.high, halfway.low), x$11 = new Go$Int64(0, errors$1), new Go$Int64(x$10.high + x$11.high, x$10.low + x$11.low)), (x$8.high < x$9.high || (x$8.high === x$9.high && x$8.low < x$9.low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.go$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.Ptr.prototype.frexp10 = function() {
		var exp10, index, f, _q, x, x$1, approxExp10, _q$1, i, exp, _struct, _tuple;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = (x = (-46 - f.exp >> 0), x$1 = 28, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + powersOfTen[i].exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + 1 >> 0;
			} else if (exp > -32) {
				i = i - 1 >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply((_struct = powersOfTen[i], new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)));
		_tuple = [-((-348 + ((((i >>> 16 << 16) * 8 >> 0) + (i << 16 >>> 16) * 8) >> 0) >> 0)), i], exp10 = _tuple[0], index = _tuple[1];
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.go$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var exp10, _tuple, i, _struct, _struct$1;
		exp10 = 0;
		_tuple = c.frexp10(), exp10 = _tuple[0], i = _tuple[1];
		a.Multiply((_struct = powersOfTen[i], new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)));
		b.Multiply((_struct$1 = powersOfTen[i], new extFloat.Ptr(_struct$1.mant, _struct$1.exp, _struct$1.neg)));
		return exp10;
	};
	extFloat.Ptr.prototype.FixedDecimal = function(d, n) {
		var f, x, _tuple, exp10, shift, integer, x$1, x$2, fraction, nonAsciiName, needed, integerDigits, pow10, _tuple$1, i, pow, x$3, rest, _q, x$4, buf, pos, v, _q$1, v1, x$5, i$1, _slice, _index, nd, x$6, x$7, digit, _slice$1, _index$1, x$8, x$9, ok, i$2, _slice$2, _index$2;
		f = this;
		if ((x = f.mant, (x.high === 0 && x.low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			throw go$panic(new Go$String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10(), exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = (go$shiftRightUint64(f.mant, shift).low >>> 0);
		fraction = (x$1 = f.mant, x$2 = go$shiftLeft64(new Go$Uint64(0, integer), shift), new Go$Uint64(x$1.high - x$2.high, x$1.low - x$2.low));
		nonAsciiName = new Go$Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new Go$Uint64(0, 1);
		_tuple$1 = [0, new Go$Uint64(0, 1)], i = _tuple$1[0], pow = _tuple$1[1];
		while (i < 20) {
			if ((x$3 = new Go$Uint64(0, integer), (pow.high > x$3.high || (pow.high === x$3.high && pow.low > x$3.low)))) {
				integerDigits = i;
				break;
			}
			pow = go$mul64(pow, new Go$Uint64(0, 10));
			i = i + 1 >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = uint64pow10[(integerDigits - needed >> 0)];
			integer = (_q = integer / ((pow10.low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
			rest = rest - ((x$4 = (pow10.low >>> 0), (((integer >>> 16 << 16) * x$4 >>> 0) + (integer << 16 >>> 16) * x$4) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		pos = 32;
		v = integer;
		while (v > 0) {
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : go$throwRuntimeError("integer divide by zero"));
			v = v - ((x$5 = 10, (((x$5 >>> 16 << 16) * v1 >>> 0) + (x$5 << 16 >>> 16) * v1) >>> 0)) >>> 0;
			pos = pos - 1 >> 0;
			buf[pos] = ((v + 48 >>> 0) << 24 >>> 24);
			v = v1;
		}
		i$1 = pos;
		while (i$1 < 32) {
			_slice = d.d, _index = i$1 - pos >> 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = buf[i$1]) : go$throwRuntimeError("index out of range");
			i$1 = i$1 + 1 >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.high === 0 && pow10.low === 1))) {
				throw go$panic(new Go$String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (needed > 0) {
				fraction = go$mul64(fraction, new Go$Uint64(0, 10));
				nonAsciiName = go$mul64(nonAsciiName, new Go$Uint64(0, 10));
				if ((x$6 = go$mul64(new Go$Uint64(0, 2), nonAsciiName), x$7 = go$shiftLeft64(new Go$Uint64(0, 1), shift), (x$6.high > x$7.high || (x$6.high === x$7.high && x$6.low > x$7.low)))) {
					return false;
				}
				digit = go$shiftRightUint64(fraction, shift);
				_slice$1 = d.d, _index$1 = nd, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (new Go$Uint64(digit.high + 0, digit.low + 48).low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
				fraction = (x$8 = go$shiftLeft64(digit, shift), new Go$Uint64(fraction.high - x$8.high, fraction.low - x$8.low));
				nd = nd + 1 >> 0;
				needed = needed - 1 >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$9 = go$shiftLeft64(new Go$Uint64(0, rest), shift), new Go$Uint64(x$9.high | fraction.high, (x$9.low | fraction.low) >>> 0)), pow10, shift, nonAsciiName);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (i$2 >= 0) {
			if (!(((_slice$2 = d.d, _index$2 = i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - 1 >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.go$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, nonAsciiName) {
		var x, x$1, x$2, x$3, x$4, x$5, x$6, i, _slice, _index, _slice$1, _index$1, _lhs, _index$2, _slice$2, _index$3, _slice$3, _index$4;
		if ((x = go$shiftLeft64(den, shift), (num.high > x.high || (num.high === x.high && num.low > x.low)))) {
			throw go$panic(new Go$String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = go$mul64(new Go$Uint64(0, 2), nonAsciiName), x$2 = go$shiftLeft64(den, shift), (x$1.high > x$2.high || (x$1.high === x$2.high && x$1.low > x$2.low)))) {
			throw go$panic(new Go$String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = go$mul64(new Go$Uint64(0, 2), (new Go$Uint64(num.high + nonAsciiName.high, num.low + nonAsciiName.low))), x$4 = go$shiftLeft64(den, shift), (x$3.high < x$4.high || (x$3.high === x$4.high && x$3.low < x$4.low)))) {
			return true;
		}
		if ((x$5 = go$mul64(new Go$Uint64(0, 2), (new Go$Uint64(num.high - nonAsciiName.high, num.low - nonAsciiName.low))), x$6 = go$shiftLeft64(den, shift), (x$5.high > x$6.high || (x$5.high === x$6.high && x$5.low > x$6.low)))) {
			i = d.nd - 1 >> 0;
			while (i >= 0) {
				if ((_slice = d.d, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 57) {
					d.nd = d.nd - 1 >> 0;
				} else {
					break;
				}
				i = i - 1 >> 0;
			}
			if (i < 0) {
				_slice$1 = d.d, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 49) : go$throwRuntimeError("index out of range");
				d.nd = 1;
				d.dp = d.dp + 1 >> 0;
			} else {
				_lhs = d.d, _index$2 = i, _slice$3 = _lhs, _index$4 = _index$2, (_index$4 >= 0 && _index$4 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$4] = (_slice$2 = _lhs, _index$3 = _index$2, (_index$3 >= 0 && _index$3 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$3] : go$throwRuntimeError("index out of range")) + 1 << 24 >>> 24) : go$throwRuntimeError("index out of range");
			}
			return true;
		}
		return false;
	};
	extFloat.Ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var f, x, x$1, y, x$2, y$1, buf, n, v, v1, x$3, nd, i, _slice, _index, _tuple, _slice$1, _index$1, exp10, x$4, x$5, shift, integer, x$6, x$7, fraction, x$8, x$9, allowance, x$10, x$11, targetDiff, integerDigits, _tuple$1, i$1, pow, x$12, i$2, pow$1, _q, digit, _slice$2, _index$2, x$13, currentDiff, x$14, digit$1, multiplier, _slice$3, _index$3, x$15, x$16;
		f = this;
		if ((x = f.mant, (x.high === 0 && x.low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && (x$1 = lower, y = f, (x$1.mant.high === y.mant.high && x$1.mant.low === y.mant.low) && x$1.exp === y.exp && x$1.neg === y.neg) && (x$2 = lower, y$1 = upper, (x$2.mant.high === y$1.mant.high && x$2.mant.low === y$1.mant.low) && x$2.exp === y$1.exp && x$2.neg === y$1.neg)) {
			buf = go$makeNativeArray("Uint8", 24, function() { return 0; });
			n = 23;
			v = f.mant;
			while ((v.high > 0 || (v.high === 0 && v.low > 0))) {
				v1 = go$div64(v, new Go$Uint64(0, 10), false);
				v = (x$3 = go$mul64(new Go$Uint64(0, 10), v1), new Go$Uint64(v.high - x$3.high, v.low - x$3.low));
				buf[n] = (new Go$Uint64(v.high + 0, v.low + 48).low << 24 >>> 24);
				n = n - 1 >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (i < nd) {
				_slice = d.d, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = buf[((n + 1 >> 0) + i >> 0)]) : go$throwRuntimeError("index out of range");
				i = i + 1 >> 0;
			}
			_tuple = [nd, nd], d.nd = _tuple[0], d.dp = _tuple[1];
			while (d.nd > 0 && ((_slice$1 = d.d, _index$1 = (d.nd - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 48)) {
				d.nd = d.nd - 1 >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = go$shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = go$shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$4 = upper.mant, new Go$Uint64(x$4.high + 0, x$4.low + 1));
		lower.mant = (x$5 = lower.mant, new Go$Uint64(x$5.high - 0, x$5.low - 1));
		shift = (-upper.exp >>> 0);
		integer = (go$shiftRightUint64(upper.mant, shift).low >>> 0);
		fraction = (x$6 = upper.mant, x$7 = go$shiftLeft64(new Go$Uint64(0, integer), shift), new Go$Uint64(x$6.high - x$7.high, x$6.low - x$7.low));
		allowance = (x$8 = upper.mant, x$9 = lower.mant, new Go$Uint64(x$8.high - x$9.high, x$8.low - x$9.low));
		targetDiff = (x$10 = upper.mant, x$11 = f.mant, new Go$Uint64(x$10.high - x$11.high, x$10.low - x$11.low));
		integerDigits = 0;
		_tuple$1 = [0, new Go$Uint64(0, 1)], i$1 = _tuple$1[0], pow = _tuple$1[1];
		while (i$1 < 20) {
			if ((x$12 = new Go$Uint64(0, integer), (pow.high > x$12.high || (pow.high === x$12.high && pow.low > x$12.low)))) {
				integerDigits = i$1;
				break;
			}
			pow = go$mul64(pow, new Go$Uint64(0, 10));
			i$1 = i$1 + 1 >> 0;
		}
		i$2 = 0;
		while (i$2 < integerDigits) {
			pow$1 = uint64pow10[((integerDigits - i$2 >> 0) - 1 >> 0)];
			digit = (_q = integer / (pow$1.low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
			_slice$2 = d.d, _index$2 = i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = ((digit + 48 >>> 0) << 24 >>> 24)) : go$throwRuntimeError("index out of range");
			integer = integer - ((x$13 = (pow$1.low >>> 0), (((digit >>> 16 << 16) * x$13 >>> 0) + (digit << 16 >>> 16) * x$13) >>> 0)) >>> 0;
			if (currentDiff = (x$14 = go$shiftLeft64(new Go$Uint64(0, integer), shift), new Go$Uint64(x$14.high + fraction.high, x$14.low + fraction.low)), (currentDiff.high < allowance.high || (currentDiff.high === allowance.high && currentDiff.low < allowance.low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, go$shiftLeft64(pow$1, shift), new Go$Uint64(0, 2));
			}
			i$2 = i$2 + 1 >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new Go$Uint64(0, 1);
		while (true) {
			fraction = go$mul64(fraction, new Go$Uint64(0, 10));
			multiplier = go$mul64(multiplier, new Go$Uint64(0, 10));
			digit$1 = (go$shiftRightUint64(fraction, shift).low >> 0);
			_slice$3 = d.d, _index$3 = d.nd, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = ((digit$1 + 48 >> 0) << 24 >>> 24)) : go$throwRuntimeError("index out of range");
			d.nd = d.nd + 1 >> 0;
			fraction = (x$15 = go$shiftLeft64(new Go$Uint64(0, digit$1), shift), new Go$Uint64(fraction.high - x$15.high, fraction.low - x$15.low));
			if ((x$16 = go$mul64(allowance, multiplier), (fraction.high < x$16.high || (fraction.high === x$16.high && fraction.low < x$16.low)))) {
				return adjustLastDigit(d, fraction, go$mul64(targetDiff, multiplier), go$mul64(allowance, multiplier), go$shiftLeft64(new Go$Uint64(0, 1), shift), go$mul64(multiplier, new Go$Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.go$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var x, x$1, x$2, x$3, _lhs, _index, _slice, _index$1, _slice$1, _index$2, x$4, x$5, x$6, x$7, x$8, x$9, _slice$2, _index$3;
		if ((x = go$mul64(new Go$Uint64(0, 2), ulpBinary), (ulpDecimal.high < x.high || (ulpDecimal.high === x.high && ulpDecimal.low < x.low)))) {
			return false;
		}
		while ((x$1 = (x$2 = (x$3 = go$div64(ulpDecimal, new Go$Uint64(0, 2), false), new Go$Uint64(currentDiff.high + x$3.high, currentDiff.low + x$3.low)), new Go$Uint64(x$2.high + ulpBinary.high, x$2.low + ulpBinary.low)), (x$1.high < targetDiff.high || (x$1.high === targetDiff.high && x$1.low < targetDiff.low)))) {
			_lhs = d.d, _index = d.nd - 1 >> 0, _slice$1 = _lhs, _index$2 = _index, (_index$2 >= 0 && _index$2 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$2] = (_slice = _lhs, _index$1 = _index, (_index$1 >= 0 && _index$1 < _slice.length) ? _slice.array[_slice.offset + _index$1] : go$throwRuntimeError("index out of range")) - 1 << 24 >>> 24) : go$throwRuntimeError("index out of range");
			currentDiff = (x$4 = ulpDecimal, new Go$Uint64(currentDiff.high + x$4.high, currentDiff.low + x$4.low));
		}
		if ((x$5 = new Go$Uint64(currentDiff.high + ulpDecimal.high, currentDiff.low + ulpDecimal.low), x$6 = (x$7 = (x$8 = go$div64(ulpDecimal, new Go$Uint64(0, 2), false), new Go$Uint64(targetDiff.high + x$8.high, targetDiff.low + x$8.low)), new Go$Uint64(x$7.high + ulpBinary.high, x$7.low + ulpBinary.low)), (x$5.high < x$6.high || (x$5.high === x$6.high && x$5.low <= x$6.low)))) {
			return false;
		}
		if ((currentDiff.high < ulpBinary.high || (currentDiff.high === ulpBinary.high && currentDiff.low < ulpBinary.low)) || (x$9 = new Go$Uint64(maxDiff.high - ulpBinary.high, maxDiff.low - ulpBinary.low), (currentDiff.high > x$9.high || (currentDiff.high === x$9.high && currentDiff.low > x$9.low)))) {
			return false;
		}
		if ((d.nd === 1) && ((_slice$2 = d.d, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$3] : go$throwRuntimeError("index out of range")) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = go$pkg.FormatFloat = function(f, fmt, prec, bitSize) {
		return go$bytesToString(genericFtoa((go$sliceType(Go$Uint8)).make(0, max(prec + 4 >> 0, 24), function() { return 0; }), f, fmt, prec, bitSize));
	};
	AppendFloat = go$pkg.AppendFloat = function(dst, f, fmt, prec, bitSize) {
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var bits, flt, _ref, x, neg, y, exp, x$1, x$2, mant, _ref$1, y$1, s, x$3, digs, ok, shortest, f, _tuple, _struct, lower, _struct$1, upper, buf, _ref$2, digits, _ref$3, buf$1, f$1, _struct$2;
		bits = new Go$Uint64(0, 0);
		flt = (go$ptrType(floatInfo)).nil;
		_ref = bitSize;
		if (_ref === 32) {
			bits = new Go$Uint64(0, math.Float32bits(val));
			flt = float32info;
		} else if (_ref === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			throw go$panic(new Go$String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = go$shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.high === 0 && x.low === 0)));
		exp = (go$shiftRightUint64(bits, flt.mantbits).low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), new Go$Uint64(x$2.high - 0, x$2.low - 1)), new Go$Uint64(bits.high & x$1.high, (bits.low & x$1.low) >>> 0));
		_ref$1 = exp;
		if (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {
			s = "";
			if (!((mant.high === 0 && mant.low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
		} else if (_ref$1 === 0) {
			exp = exp + 1 >> 0;
		} else {
			mant = (x$3 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), new Go$Uint64(mant.high | x$3.high, (mant.low | x$3.low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.Ptr();
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.Ptr();
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt), lower = (_struct = _tuple[0], new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)), upper = (_struct$1 = _tuple[1], new extFloat.Ptr(_struct$1.mant, _struct$1.exp, _struct$1.neg));
			buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
			digs.d = new (go$sliceType(Go$Uint8))(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_ref$2 = fmt;
			if (_ref$2 === 101 || _ref$2 === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref$2 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref$2 === 103 || _ref$2 === 71) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_ref$3 = fmt;
			if (_ref$3 === 101 || _ref$3 === 69) {
				digits = digits + 1 >> 0;
			} else if (_ref$3 === 103 || _ref$3 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = go$makeNativeArray("Uint8", 24, function() { return 0; });
				digs.d = new (go$sliceType(Go$Uint8))(buf$1);
				f$1 = new extFloat.Ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, (_struct$2 = digs, new decimalSlice.Ptr(_struct$2.d, _struct$2.nd, _struct$2.dp, _struct$2.neg)), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var d, digs, shortest, _ref, _ref$1, _struct;
		d = new decimal.Ptr();
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.Ptr();
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			digs = new decimalSlice.Ptr(new (go$sliceType(Go$Uint8))(d.d), d.nd, d.dp, false);
			_ref = fmt;
			if (_ref === 101 || _ref === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref === 103 || _ref === 71) {
				prec = digs.nd;
			}
		} else {
			_ref$1 = fmt;
			if (_ref$1 === 101 || _ref$1 === 69) {
				d.Round(prec + 1 >> 0);
			} else if (_ref$1 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if (_ref$1 === 103 || _ref$1 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			digs = new decimalSlice.Ptr(new (go$sliceType(Go$Uint8))(d.d), d.nd, d.dp, false);
		}
		return formatDigits(dst, shortest, neg, (_struct = digs, new decimalSlice.Ptr(_struct.d, _struct.nd, _struct.dp, _struct.neg)), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _ref, _struct, _struct$1, eprec, exp, _struct$2, _struct$3;
		_ref = fmt;
		if (_ref === 101 || _ref === 69) {
			return fmtE(dst, neg, (_struct = digs, new decimalSlice.Ptr(_struct.d, _struct.nd, _struct.dp, _struct.neg)), prec, fmt);
		} else if (_ref === 102) {
			return fmtF(dst, neg, (_struct$1 = digs, new decimalSlice.Ptr(_struct$1.d, _struct$1.nd, _struct$1.dp, _struct$1.neg)), prec);
		} else if (_ref === 103 || _ref === 71) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, (_struct$2 = digs, new decimalSlice.Ptr(_struct$2.d, _struct$2.nd, _struct$2.dp, _struct$2.neg)), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, (_struct$3 = digs, new decimalSlice.Ptr(_struct$3.d, _struct$3.nd, _struct$3.dp, _struct$3.neg)), max(prec - digs.dp >> 0, 0));
		}
		return go$append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var minexp, x, x$1, x$2, x$3, upper, x$4, mantlo, explo, x$5, x$6, lower, x$7, x$8, inclusive, i, _tuple, l, m, u, okdown, okup;
		if ((mant.high === 0 && mant.low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && (x = 332, x$1 = (d.dp - d.nd >> 0), (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0) >= (x$2 = 100, x$3 = (exp - (flt.mantbits >> 0) >> 0), (((x$2 >>> 16 << 16) * x$3 >> 0) + (x$2 << 16 >>> 16) * x$3) >> 0)) {
			return;
		}
		upper = new decimal.Ptr();
		upper.Assign((x$4 = go$mul64(mant, new Go$Uint64(0, 2)), new Go$Uint64(x$4.high + 0, x$4.low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new Go$Uint64(0, 0);
		explo = 0;
		if ((x$5 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), (mant.high > x$5.high || (mant.high === x$5.high && mant.low > x$5.low))) || (exp === minexp)) {
			mantlo = new Go$Uint64(mant.high - 0, mant.low - 1);
			explo = exp;
		} else {
			mantlo = (x$6 = go$mul64(mant, new Go$Uint64(0, 2)), new Go$Uint64(x$6.high - 0, x$6.low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.Ptr();
		lower.Assign((x$7 = go$mul64(mantlo, new Go$Uint64(0, 2)), new Go$Uint64(x$7.high + 0, x$7.low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$8 = go$div64(mant, new Go$Uint64(0, 2), true), (x$8.high === 0 && x$8.low === 0));
		i = 0;
		while (i < d.nd) {
			_tuple = [0, 0, 0], l = _tuple[0], m = _tuple[1], u = _tuple[2];
			if (i < lower.nd) {
				l = lower.d[i];
			} else {
				l = 48;
			}
			m = d.d[i];
			if (i < upper.nd) {
				u = upper.d[i];
			} else {
				u = 48;
			}
			okdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + 1 >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var ch, _slice, _index, i, m, _slice$1, _index$1, exp, buf, i$1, _r, _q, _ref;
		if (neg) {
			dst = go$append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (_slice = d.d, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		dst = go$append(dst, ch);
		if (prec > 0) {
			dst = go$append(dst, 46);
			i = 1;
			m = ((d.nd + prec >> 0) + 1 >> 0) - max(d.nd, prec + 1 >> 0) >> 0;
			while (i < m) {
				dst = go$append(dst, (_slice$1 = d.d, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
				i = i + 1 >> 0;
			}
			while (i <= prec) {
				dst = go$append(dst, 48);
				i = i + 1 >> 0;
			}
		}
		dst = go$append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = go$append(dst, ch);
		buf = go$makeNativeArray("Uint8", 3, function() { return 0; });
		i$1 = 3;
		while (exp >= 10) {
			i$1 = i$1 - 1 >> 0;
			buf[i$1] = (((_r = exp % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		i$1 = i$1 - 1 >> 0;
		buf[i$1] = ((exp + 48 >> 0) << 24 >>> 24);
		_ref = i$1;
		if (_ref === 0) {
			dst = go$append(dst, buf[0], buf[1], buf[2]);
		} else if (_ref === 1) {
			dst = go$append(dst, buf[1], buf[2]);
		} else if (_ref === 2) {
			dst = go$append(dst, 48, buf[2]);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var i, _slice, _index, i$1, ch, j, _slice$1, _index$1;
		if (neg) {
			dst = go$append(dst, 45);
		}
		if (d.dp > 0) {
			i = 0;
			i = 0;
			while (i < d.dp && i < d.nd) {
				dst = go$append(dst, (_slice = d.d, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
				i = i + 1 >> 0;
			}
			while (i < d.dp) {
				dst = go$append(dst, 48);
				i = i + 1 >> 0;
			}
		} else {
			dst = go$append(dst, 48);
		}
		if (prec > 0) {
			dst = go$append(dst, 46);
			i$1 = 0;
			while (i$1 < prec) {
				ch = 48;
				if (j = d.dp + i$1 >> 0, 0 <= j && j < d.nd) {
					ch = (_slice$1 = d.d, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				}
				dst = go$append(dst, ch);
				i$1 = i$1 + 1 >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var buf, w, esign, n, _r, _q, x;
		buf = go$makeNativeArray("Uint8", 50, function() { return 0; });
		w = 50;
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		esign = 43;
		if (exp < 0) {
			esign = 45;
			exp = -exp;
		}
		n = 0;
		while (exp > 0 || n < 1) {
			n = n + 1 >> 0;
			w = w - 1 >> 0;
			buf[w] = (((_r = exp % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		w = w - 1 >> 0;
		buf[w] = esign;
		w = w - 1 >> 0;
		buf[w] = 112;
		n = 0;
		while ((mant.high > 0 || (mant.high === 0 && mant.low > 0)) || n < 1) {
			n = n + 1 >> 0;
			w = w - 1 >> 0;
			buf[w] = ((x = go$div64(mant, new Go$Uint64(0, 10), true), new Go$Uint64(x.high + 0, x.low + 48)).low << 24 >>> 24);
			mant = go$div64(mant, new Go$Uint64(0, 10), false);
		}
		if (neg) {
			w = w - 1 >> 0;
			buf[w] = 45;
		}
		return go$appendSlice(dst, go$subslice(new (go$sliceType(Go$Uint8))(buf), w));
	};
	max = function(a, b) {
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = go$pkg.FormatUint = function(i, base) {
		var _tuple, s;
		_tuple = formatBits((go$sliceType(Go$Uint8)).nil, i, base, false, false), s = _tuple[1];
		return s;
	};
	FormatInt = go$pkg.FormatInt = function(i, base) {
		var _tuple, s;
		_tuple = formatBits((go$sliceType(Go$Uint8)).nil, new Go$Uint64(i.high, i.low), base, (i.high < 0 || (i.high === 0 && i.low < 0)), false), s = _tuple[1];
		return s;
	};
	Itoa = go$pkg.Itoa = function(i) {
		return FormatInt(new Go$Int64(0, i), 10);
	};
	formatBits = function(dst, u, base, neg, append_) {
		var d, s, a, i, s$1, q, x, j, q$1, x$1, b, m, b$1;
		d = (go$sliceType(Go$Uint8)).nil;
		s = "";
		if (base < 2 || base > 36) {
			throw go$panic(new Go$String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = go$makeNativeArray("Uint8", 65, function() { return 0; });
		i = 65;
		if (neg) {
			u = new Go$Uint64(-u.high, -u.low);
		}
		if (base === 10) {
			while ((u.high > 0 || (u.high === 0 && u.low >= 100))) {
				i = i - 2 >> 0;
				q = go$div64(u, new Go$Uint64(0, 100), false);
				j = ((x = go$mul64(q, new Go$Uint64(0, 100)), new Go$Uint64(u.high - x.high, u.low - x.low)).low >>> 0);
				a[i + 1 >> 0] = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789".charCodeAt(j);
				a[i + 0 >> 0] = "0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999".charCodeAt(j);
				u = q;
			}
			if ((u.high > 0 || (u.high === 0 && u.low >= 10))) {
				i = i - 1 >> 0;
				q$1 = go$div64(u, new Go$Uint64(0, 10), false);
				a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$1 = go$mul64(q$1, new Go$Uint64(0, 10)), new Go$Uint64(u.high - x$1.high, u.low - x$1.low)).low >>> 0));
				u = q$1;
			}
		} else if (s$1 = shifts[base], s$1 > 0) {
			b = new Go$Uint64(0, base);
			m = (b.low >>> 0) - 1 >>> 0;
			while ((u.high > b.high || (u.high === b.high && u.low >= b.low))) {
				i = i - 1 >> 0;
				a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.low >>> 0) & m) >>> 0));
				u = go$shiftRightUint64(u, (s$1));
			}
		} else {
			b$1 = new Go$Uint64(0, base);
			while ((u.high > b$1.high || (u.high === b$1.high && u.low >= b$1.low))) {
				i = i - 1 >> 0;
				a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((go$div64(u, b$1, true).low >>> 0));
				u = go$div64(u, (b$1), false);
			}
		}
		i = i - 1 >> 0;
		a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.low >>> 0));
		if (neg) {
			i = i - 1 >> 0;
			a[i] = 45;
		}
		if (append_) {
			d = go$appendSlice(dst, go$subslice(new (go$sliceType(Go$Uint8))(a), i));
			return [d, s];
		}
		s = go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly) {
		var runeTmp, _q, x, x$1, buf, width, r, _tuple, n, _ref, s$1, s$2;
		runeTmp = go$makeNativeArray("Uint8", 4, function() { return 0; });
		buf = (go$sliceType(Go$Uint8)).make(0, (_q = (x = 3, x$1 = s.length, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), function() { return 0; });
		buf = go$append(buf, quote);
		width = 0;
		while (s.length > 0) {
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s), r = _tuple[0], width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\x")));
				buf = go$append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = go$append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = go$append(buf, 92);
				buf = go$append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = go$append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r)) {
				n = utf8.EncodeRune(new (go$sliceType(Go$Uint8))(runeTmp), r);
				buf = go$appendSlice(buf, go$subslice(new (go$sliceType(Go$Uint8))(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_ref = r;
			if (_ref === 7) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\a")));
			} else if (_ref === 8) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\b")));
			} else if (_ref === 12) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\f")));
			} else if (_ref === 10) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\n")));
			} else if (_ref === 13) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\r")));
			} else if (_ref === 9) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\t")));
			} else if (_ref === 11) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\v")));
			} else {
				if (r < 32) {
					buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\x")));
					buf = go$append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = go$append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = go$append(buf, "0123456789abcdef".charCodeAt((((r >> go$min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - 4 >> 0;
					}
				} else if (r < 65536) {
					buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = go$append(buf, "0123456789abcdef".charCodeAt((((r >> go$min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - 4 >> 0;
					}
				} else {
					buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\U")));
					s$2 = 28;
					while (s$2 >= 0) {
						buf = go$append(buf, "0123456789abcdef".charCodeAt((((r >> go$min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - 4 >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = go$append(buf, quote);
		return go$bytesToString(buf);
	};
	Quote = go$pkg.Quote = function(s) {
		return quoteWith(s, 34, false);
	};
	QuoteToASCII = go$pkg.QuoteToASCII = function(s) {
		return quoteWith(s, 34, true);
	};
	QuoteRune = go$pkg.QuoteRune = function(r) {
		return quoteWith(go$encodeRune(r), 39, false);
	};
	AppendQuoteRune = go$pkg.AppendQuoteRune = function(dst, r) {
		return go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(QuoteRune(r))));
	};
	QuoteRuneToASCII = go$pkg.QuoteRuneToASCII = function(r) {
		return quoteWith(go$encodeRune(r), 39, true);
	};
	AppendQuoteRuneToASCII = go$pkg.AppendQuoteRuneToASCII = function(dst, r) {
		return go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(QuoteRuneToASCII(r))));
	};
	CanBackquote = go$pkg.CanBackquote = function(s) {
		var i;
		i = 0;
		while (i < s.length) {
			if ((s.charCodeAt(i) < 32 && !((s.charCodeAt(i) === 9))) || (s.charCodeAt(i) === 96)) {
				return false;
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	unhex = function(b) {
		var v, ok, c, _tuple, _tuple$1, _tuple$2;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tuple = [c - 48 >> 0, true], v = _tuple[0], ok = _tuple[1];
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tuple$1 = [(c - 97 >> 0) + 10 >> 0, true], v = _tuple$1[0], ok = _tuple$1[1];
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tuple$2 = [(c - 65 >> 0) + 10 >> 0, true], v = _tuple$2[0], ok = _tuple$2[1];
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = go$pkg.UnquoteChar = function(s, quote) {
		var value, multibyte, tail, err, c, _tuple, r, size, _tuple$1, _tuple$2, c$1, _ref, n, _ref$1, v, j, _tuple$3, x, ok, v$1, j$1, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = null;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = go$pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s), r = _tuple[0], size = _tuple[1];
			_tuple$1 = [r, true, s.substring(size), null], value = _tuple$1[0], multibyte = _tuple$1[1], tail = _tuple$1[2], err = _tuple$1[3];
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tuple$2 = [(s.charCodeAt(0) >> 0), false, s.substring(1), null], value = _tuple$2[0], multibyte = _tuple$2[1], tail = _tuple$2[2], err = _tuple$2[3];
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = go$pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		_ref = c$1;
		switch (0) { default: if (_ref === 97) {
			value = 7;
		} else if (_ref === 98) {
			value = 8;
		} else if (_ref === 102) {
			value = 12;
		} else if (_ref === 110) {
			value = 10;
		} else if (_ref === 114) {
			value = 13;
		} else if (_ref === 116) {
			value = 9;
		} else if (_ref === 118) {
			value = 11;
		} else if (_ref === 120 || _ref === 117 || _ref === 85) {
			n = 0;
			_ref$1 = c$1;
			if (_ref$1 === 120) {
				n = 2;
			} else if (_ref$1 === 117) {
				n = 4;
			} else if (_ref$1 === 85) {
				n = 8;
			}
			v = 0;
			if (s.length < n) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j = 0;
			while (j < n) {
				_tuple$3 = unhex(s.charCodeAt(j)), x = _tuple$3[0], ok = _tuple$3[1];
				if (!ok) {
					err = go$pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v = (v << 4 >> 0) | x;
				j = j + 1 >> 0;
			}
			s = s.substring(n);
			if (c$1 === 120) {
				value = v;
				break;
			}
			if (v > 1114111) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v;
			multibyte = true;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			v$1 = (c$1 >> 0) - 48 >> 0;
			if (s.length < 2) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j$1 = 0;
			while (j$1 < 2) {
				x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
				if (x$1 < 0 || x$1 > 7) {
					err = go$pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v$1 = ((v$1 << 3 >> 0)) | x$1;
				j$1 = j$1 + 1 >> 0;
			}
			s = s.substring(2);
			if (v$1 > 255) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v$1;
		} else if (_ref === 92) {
			value = 92;
		} else if (_ref === 39 || _ref === 34) {
			if (!((c$1 === quote))) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = (c$1 >> 0);
		} else {
			err = go$pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} }
		tail = s;
		return [value, multibyte, tail, err];
	};
	Unquote = go$pkg.Unquote = function(s) {
		var t, err, n, _tuple, quote, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _ref, _tuple$6, _tuple$7, r, size, _tuple$8, runeTmp, _q, x, x$1, buf, _tuple$9, c, multibyte, ss, err$1, _tuple$10, n$1, _tuple$11, _tuple$12;
		t = "";
		err = null;
		n = s.length;
		if (n < 2) {
			_tuple = ["", go$pkg.ErrSyntax], t = _tuple[0], err = _tuple[1];
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tuple$1 = ["", go$pkg.ErrSyntax], t = _tuple$1[0], err = _tuple$1[1];
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tuple$2 = ["", go$pkg.ErrSyntax], t = _tuple$2[0], err = _tuple$2[1];
				return [t, err];
			}
			_tuple$3 = [s, null], t = _tuple$3[0], err = _tuple$3[1];
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tuple$4 = ["", go$pkg.ErrSyntax], t = _tuple$4[0], err = _tuple$4[1];
			return [t, err];
		}
		if (contains(s, 10)) {
			_tuple$5 = ["", go$pkg.ErrSyntax], t = _tuple$5[0], err = _tuple$5[1];
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_ref = quote;
			if (_ref === 34) {
				_tuple$6 = [s, null], t = _tuple$6[0], err = _tuple$6[1];
				return [t, err];
			} else if (_ref === 39) {
				_tuple$7 = utf8.DecodeRuneInString(s), r = _tuple$7[0], size = _tuple$7[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tuple$8 = [s, null], t = _tuple$8[0], err = _tuple$8[1];
					return [t, err];
				}
			}
		}
		runeTmp = go$makeNativeArray("Uint8", 4, function() { return 0; });
		buf = (go$sliceType(Go$Uint8)).make(0, (_q = (x = 3, x$1 = s.length, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), function() { return 0; });
		while (s.length > 0) {
			_tuple$9 = UnquoteChar(s, quote), c = _tuple$9[0], multibyte = _tuple$9[1], ss = _tuple$9[2], err$1 = _tuple$9[3];
			if (!(go$interfaceIsEqual(err$1, null))) {
				_tuple$10 = ["", err$1], t = _tuple$10[0], err = _tuple$10[1];
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = go$append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new (go$sliceType(Go$Uint8))(runeTmp), c);
				buf = go$appendSlice(buf, go$subslice(new (go$sliceType(Go$Uint8))(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tuple$11 = ["", go$pkg.ErrSyntax], t = _tuple$11[0], err = _tuple$11[1];
				return [t, err];
			}
		}
		_tuple$12 = [go$bytesToString(buf), null], t = _tuple$12[0], err = _tuple$12[1];
		return [t, err];
	};
	contains = function(s, c) {
		var i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + 1 >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _tuple, i, j, _q, h, _slice, _index;
		_tuple = [0, a.length], i = _tuple[0], j = _tuple[1];
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if ((_slice = a, _index = h, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _tuple, i, j, _q, h, _slice, _index;
		_tuple = [0, a.length], i = _tuple[0], j = _tuple[1];
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if ((_slice = a, _index = h, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = go$pkg.IsPrint = function(r) {
		var _tuple, rr, isPrint, isNotPrint, i, _slice, _index, _slice$1, _index$1, j, _slice$2, _index$2, _tuple$1, rr$1, isPrint$1, isNotPrint$1, i$1, _slice$3, _index$3, _slice$4, _index$4, j$1, _slice$5, _index$5;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tuple = [(r << 16 >>> 16), isPrint16, isNotPrint16], rr = _tuple[0], isPrint = _tuple[1], isNotPrint = _tuple[2];
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.length || rr < (_slice = isPrint, _index = (i & ~1), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) || (_slice$1 = isPrint, _index$1 = (i | 1), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.length || !(((_slice$2 = isNotPrint, _index$2 = j, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === rr));
		}
		_tuple$1 = [(r >>> 0), isPrint32, isNotPrint32], rr$1 = _tuple$1[0], isPrint$1 = _tuple$1[1], isNotPrint$1 = _tuple$1[2];
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.length || rr$1 < (_slice$3 = isPrint$1, _index$3 = (i$1 & ~1), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) || (_slice$4 = isPrint$1, _index$4 = (i$1 | 1), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - 65536 >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.length || !(((_slice$5 = isNotPrint$1, _index$5 = j$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")) === (r << 16 >>> 16)));
	};
	go$pkg.init = function() {
		NumError.init([["Func", "", Go$String, ""], ["Num", "", Go$String, ""], ["Err", "", go$error, ""]]);
		(go$ptrType(NumError)).methods = [["Error", "", [], [Go$String], false]];
		decimal.init([["d", "strconv", (go$arrayType(Go$Uint8, 800)), ""], ["nd", "strconv", Go$Int, ""], ["dp", "strconv", Go$Int, ""], ["neg", "strconv", Go$Bool, ""], ["trunc", "strconv", Go$Bool, ""]]);
		(go$ptrType(decimal)).methods = [["Assign", "", [Go$Uint64], [], false], ["Round", "", [Go$Int], [], false], ["RoundDown", "", [Go$Int], [], false], ["RoundUp", "", [Go$Int], [], false], ["RoundedInteger", "", [], [Go$Uint64], false], ["Shift", "", [Go$Int], [], false], ["String", "", [], [Go$String], false], ["atof32int", "strconv", [], [Go$Float32], false], ["floatBits", "strconv", [(go$ptrType(floatInfo))], [Go$Uint64, Go$Bool], false], ["set", "strconv", [Go$String], [Go$Bool], false]];
		leftCheat.init([["delta", "strconv", Go$Int, ""], ["cutoff", "strconv", Go$String, ""]]);
		extFloat.init([["mant", "strconv", Go$Uint64, ""], ["exp", "strconv", Go$Int, ""], ["neg", "strconv", Go$Bool, ""]]);
		(go$ptrType(extFloat)).methods = [["AssignComputeBounds", "", [Go$Uint64, Go$Int, Go$Bool, (go$ptrType(floatInfo))], [extFloat, extFloat], false], ["AssignDecimal", "", [Go$Uint64, Go$Int, Go$Bool, Go$Bool, (go$ptrType(floatInfo))], [Go$Bool], false], ["FixedDecimal", "", [(go$ptrType(decimalSlice)), Go$Int], [Go$Bool], false], ["Multiply", "", [extFloat], [], false], ["Normalize", "", [], [Go$Uint], false], ["ShortestDecimal", "", [(go$ptrType(decimalSlice)), (go$ptrType(extFloat)), (go$ptrType(extFloat))], [Go$Bool], false], ["floatBits", "strconv", [(go$ptrType(floatInfo))], [Go$Uint64, Go$Bool], false], ["frexp10", "strconv", [], [Go$Int, Go$Int], false]];
		floatInfo.init([["mantbits", "strconv", Go$Uint, ""], ["expbits", "strconv", Go$Uint, ""], ["bias", "strconv", Go$Int, ""]]);
		decimalSlice.init([["d", "strconv", (go$sliceType(Go$Uint8)), ""], ["nd", "strconv", Go$Int, ""], ["dp", "strconv", Go$Int, ""], ["neg", "strconv", Go$Bool, ""]]);
		optimize = true;
		go$pkg.ErrRange = errors.New("value out of range");
		go$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new (go$sliceType(leftCheat))([new leftCheat.Ptr(0, ""), new leftCheat.Ptr(1, "5"), new leftCheat.Ptr(1, "25"), new leftCheat.Ptr(1, "125"), new leftCheat.Ptr(2, "625"), new leftCheat.Ptr(2, "3125"), new leftCheat.Ptr(2, "15625"), new leftCheat.Ptr(3, "78125"), new leftCheat.Ptr(3, "390625"), new leftCheat.Ptr(3, "1953125"), new leftCheat.Ptr(4, "9765625"), new leftCheat.Ptr(4, "48828125"), new leftCheat.Ptr(4, "244140625"), new leftCheat.Ptr(4, "1220703125"), new leftCheat.Ptr(5, "6103515625"), new leftCheat.Ptr(5, "30517578125"), new leftCheat.Ptr(5, "152587890625"), new leftCheat.Ptr(6, "762939453125"), new leftCheat.Ptr(6, "3814697265625"), new leftCheat.Ptr(6, "19073486328125"), new leftCheat.Ptr(7, "95367431640625"), new leftCheat.Ptr(7, "476837158203125"), new leftCheat.Ptr(7, "2384185791015625"), new leftCheat.Ptr(7, "11920928955078125"), new leftCheat.Ptr(8, "59604644775390625"), new leftCheat.Ptr(8, "298023223876953125"), new leftCheat.Ptr(8, "1490116119384765625"), new leftCheat.Ptr(9, "7450580596923828125")]);
		smallPowersOfTen = go$toNativeArray("Struct", [new extFloat.Ptr(new Go$Uint64(2147483648, 0), -63, false), new extFloat.Ptr(new Go$Uint64(2684354560, 0), -60, false), new extFloat.Ptr(new Go$Uint64(3355443200, 0), -57, false), new extFloat.Ptr(new Go$Uint64(4194304000, 0), -54, false), new extFloat.Ptr(new Go$Uint64(2621440000, 0), -50, false), new extFloat.Ptr(new Go$Uint64(3276800000, 0), -47, false), new extFloat.Ptr(new Go$Uint64(4096000000, 0), -44, false), new extFloat.Ptr(new Go$Uint64(2560000000, 0), -40, false)]);
		powersOfTen = go$toNativeArray("Struct", [new extFloat.Ptr(new Go$Uint64(4203730336, 136053384), -1220, false), new extFloat.Ptr(new Go$Uint64(3132023167, 2722021238), -1193, false), new extFloat.Ptr(new Go$Uint64(2333539104, 810921078), -1166, false), new extFloat.Ptr(new Go$Uint64(3477244234, 1573795306), -1140, false), new extFloat.Ptr(new Go$Uint64(2590748842, 1432697645), -1113, false), new extFloat.Ptr(new Go$Uint64(3860516611, 1025131999), -1087, false), new extFloat.Ptr(new Go$Uint64(2876309015, 3348809418), -1060, false), new extFloat.Ptr(new Go$Uint64(4286034428, 3200048207), -1034, false), new extFloat.Ptr(new Go$Uint64(3193344495, 1097586188), -1007, false), new extFloat.Ptr(new Go$Uint64(2379227053, 2424306748), -980, false), new extFloat.Ptr(new Go$Uint64(3545324584, 827693699), -954, false), new extFloat.Ptr(new Go$Uint64(2641472655, 2913388981), -927, false), new extFloat.Ptr(new Go$Uint64(3936100983, 602835915), -901, false), new extFloat.Ptr(new Go$Uint64(2932623761, 1081627501), -874, false), new extFloat.Ptr(new Go$Uint64(2184974969, 1572261463), -847, false), new extFloat.Ptr(new Go$Uint64(3255866422, 1308317239), -821, false), new extFloat.Ptr(new Go$Uint64(2425809519, 944281679), -794, false), new extFloat.Ptr(new Go$Uint64(3614737867, 629291719), -768, false), new extFloat.Ptr(new Go$Uint64(2693189581, 2545915892), -741, false), new extFloat.Ptr(new Go$Uint64(4013165208, 388672741), -715, false), new extFloat.Ptr(new Go$Uint64(2990041083, 708162190), -688, false), new extFloat.Ptr(new Go$Uint64(2227754207, 3536207675), -661, false), new extFloat.Ptr(new Go$Uint64(3319612455, 450088378), -635, false), new extFloat.Ptr(new Go$Uint64(2473304014, 3139815830), -608, false), new extFloat.Ptr(new Go$Uint64(3685510180, 2103616900), -582, false), new extFloat.Ptr(new Go$Uint64(2745919064, 224385782), -555, false), new extFloat.Ptr(new Go$Uint64(4091738259, 3737383206), -529, false), new extFloat.Ptr(new Go$Uint64(3048582568, 2868871352), -502, false), new extFloat.Ptr(new Go$Uint64(2271371013, 1820084875), -475, false), new extFloat.Ptr(new Go$Uint64(3384606560, 885076051), -449, false), new extFloat.Ptr(new Go$Uint64(2521728396, 2444895829), -422, false), new extFloat.Ptr(new Go$Uint64(3757668132, 1881767613), -396, false), new extFloat.Ptr(new Go$Uint64(2799680927, 3102062735), -369, false), new extFloat.Ptr(new Go$Uint64(4171849679, 2289335700), -343, false), new extFloat.Ptr(new Go$Uint64(3108270227, 2410191823), -316, false), new extFloat.Ptr(new Go$Uint64(2315841784, 3205436779), -289, false), new extFloat.Ptr(new Go$Uint64(3450873173, 1697722806), -263, false), new extFloat.Ptr(new Go$Uint64(2571100870, 3497754540), -236, false), new extFloat.Ptr(new Go$Uint64(3831238852, 707476230), -210, false), new extFloat.Ptr(new Go$Uint64(2854495385, 1769181907), -183, false), new extFloat.Ptr(new Go$Uint64(4253529586, 2197867022), -157, false), new extFloat.Ptr(new Go$Uint64(3169126500, 2450594539), -130, false), new extFloat.Ptr(new Go$Uint64(2361183241, 1867548876), -103, false), new extFloat.Ptr(new Go$Uint64(3518437208, 3793315116), -77, false), new extFloat.Ptr(new Go$Uint64(2621440000, 0), -50, false), new extFloat.Ptr(new Go$Uint64(3906250000, 0), -24, false), new extFloat.Ptr(new Go$Uint64(2910383045, 2892103680), 3, false), new extFloat.Ptr(new Go$Uint64(2168404344, 4170451332), 30, false), new extFloat.Ptr(new Go$Uint64(3231174267, 3372684723), 56, false), new extFloat.Ptr(new Go$Uint64(2407412430, 2078956656), 83, false), new extFloat.Ptr(new Go$Uint64(3587324068, 2884206696), 109, false), new extFloat.Ptr(new Go$Uint64(2672764710, 395977285), 136, false), new extFloat.Ptr(new Go$Uint64(3982729777, 3569679143), 162, false), new extFloat.Ptr(new Go$Uint64(2967364920, 2361961896), 189, false), new extFloat.Ptr(new Go$Uint64(2210859150, 447440347), 216, false), new extFloat.Ptr(new Go$Uint64(3294436857, 1114709402), 242, false), new extFloat.Ptr(new Go$Uint64(2454546732, 2786846552), 269, false), new extFloat.Ptr(new Go$Uint64(3657559652, 443583978), 295, false), new extFloat.Ptr(new Go$Uint64(2725094297, 2599384906), 322, false), new extFloat.Ptr(new Go$Uint64(4060706939, 3028118405), 348, false), new extFloat.Ptr(new Go$Uint64(3025462433, 2044532855), 375, false), new extFloat.Ptr(new Go$Uint64(2254145170, 1536935362), 402, false), new extFloat.Ptr(new Go$Uint64(3358938053, 3365297469), 428, false), new extFloat.Ptr(new Go$Uint64(2502603868, 4204241075), 455, false), new extFloat.Ptr(new Go$Uint64(3729170365, 2577424355), 481, false), new extFloat.Ptr(new Go$Uint64(2778448436, 3677981733), 508, false), new extFloat.Ptr(new Go$Uint64(4140210802, 2744688476), 534, false), new extFloat.Ptr(new Go$Uint64(3084697427, 1424604878), 561, false), new extFloat.Ptr(new Go$Uint64(2298278679, 4062331362), 588, false), new extFloat.Ptr(new Go$Uint64(3424702107, 3546052773), 614, false), new extFloat.Ptr(new Go$Uint64(2551601907, 2065781727), 641, false), new extFloat.Ptr(new Go$Uint64(3802183132, 2535403578), 667, false), new extFloat.Ptr(new Go$Uint64(2832847187, 1558426518), 694, false), new extFloat.Ptr(new Go$Uint64(4221271257, 2762425404), 720, false), new extFloat.Ptr(new Go$Uint64(3145092172, 2812560400), 747, false), new extFloat.Ptr(new Go$Uint64(2343276271, 3057687578), 774, false), new extFloat.Ptr(new Go$Uint64(3491753744, 2790753324), 800, false), new extFloat.Ptr(new Go$Uint64(2601559269, 3918606633), 827, false), new extFloat.Ptr(new Go$Uint64(3876625403, 2711358621), 853, false), new extFloat.Ptr(new Go$Uint64(2888311001, 1648096297), 880, false), new extFloat.Ptr(new Go$Uint64(2151959390, 2057817989), 907, false), new extFloat.Ptr(new Go$Uint64(3206669376, 61660461), 933, false), new extFloat.Ptr(new Go$Uint64(2389154863, 1581580175), 960, false), new extFloat.Ptr(new Go$Uint64(3560118173, 2626467905), 986, false), new extFloat.Ptr(new Go$Uint64(2652494738, 3034782633), 1013, false), new extFloat.Ptr(new Go$Uint64(3952525166, 3135207385), 1039, false), new extFloat.Ptr(new Go$Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = go$toNativeArray("Uint64", [new Go$Uint64(0, 1), new Go$Uint64(0, 10), new Go$Uint64(0, 100), new Go$Uint64(0, 1000), new Go$Uint64(0, 10000), new Go$Uint64(0, 100000), new Go$Uint64(0, 1000000), new Go$Uint64(0, 10000000), new Go$Uint64(0, 100000000), new Go$Uint64(0, 1000000000), new Go$Uint64(2, 1410065408), new Go$Uint64(23, 1215752192), new Go$Uint64(232, 3567587328), new Go$Uint64(2328, 1316134912), new Go$Uint64(23283, 276447232), new Go$Uint64(232830, 2764472320), new Go$Uint64(2328306, 1874919424), new Go$Uint64(23283064, 1569325056), new Go$Uint64(232830643, 2808348672), new Go$Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.Ptr(23, 8, -127);
		float64info = new floatInfo.Ptr(52, 11, -1023);
		isPrint16 = new (go$sliceType(Go$Uint16))([32, 126, 161, 887, 890, 894, 900, 1319, 1329, 1366, 1369, 1418, 1423, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2220, 2276, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3073, 3129, 3133, 3149, 3157, 3161, 3168, 3171, 3174, 3183, 3192, 3199, 3202, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3330, 3386, 3389, 3406, 3415, 3415, 3424, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5108, 5120, 5788, 5792, 5872, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8378, 8400, 8432, 8448, 8585, 8592, 9203, 9216, 9254, 9280, 9290, 9312, 11084, 11088, 11097, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11835, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40908, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42647, 42655, 42743, 42752, 42899, 42912, 42922, 43000, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43259, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43487, 43520, 43574, 43584, 43597, 43600, 43609, 43612, 43643, 43648, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43822, 43968, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65062, 65072, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new (go$sliceType(Go$Uint16))([173, 907, 909, 930, 1376, 1416, 1424, 1757, 2111, 2209, 2303, 2424, 2432, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3124, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6751, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9984, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42895, 43470, 43815, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new (go$sliceType(Go$Uint32))([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65930, 65936, 65947, 66000, 66045, 66176, 66204, 66208, 66256, 66304, 66339, 66352, 66378, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67679, 67840, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68030, 68031, 68096, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68223, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68479, 68608, 68680, 69216, 69246, 69632, 69709, 69714, 69743, 69760, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 70016, 70088, 70096, 70105, 71296, 71351, 71360, 71369, 73728, 74606, 74752, 74850, 74864, 74867, 77824, 78894, 92160, 92728, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119261, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 120831, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127166, 127169, 127199, 127232, 127242, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 127776, 127792, 127868, 127872, 127891, 127904, 127946, 127968, 127984, 128000, 128252, 128256, 128317, 128320, 128323, 128336, 128359, 128507, 128576, 128581, 128591, 128640, 128709, 128768, 128883, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new (go$sliceType(Go$Uint16))([12, 39, 59, 62, 799, 926, 2057, 2102, 2134, 2564, 2580, 2584, 4285, 4405, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61648, 61743, 62262, 62405, 62527, 62529, 62712]);
		shifts = go$toNativeArray("Uint", [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
	}
	return go$pkg;
})();
go$packages["reflect"] = (function() {
	var go$pkg = {}, strconv = go$packages["strconv"], sync = go$packages["sync"], math = go$packages["math"], runtime = go$packages["runtime"], Type, Kind, rtype, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, iword, makeMethodValue, TypeOf, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, SliceOf, toType, methodName, methodReceiver, valueInterface, overflowFloat32, typesMustMatch, Copy, unsafe_New, MakeSlice, ValueOf, Zero, New, convertOp, makeInt, makeFloat, makeComplex, makeString, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtDirect, cvtT2I, cvtI2I, chanclose, chanrecv, chansend, mapaccess, mapassign, mapiterinit, mapiterkey, mapiternext, maplen, call, ifaceE2I, kindNames, uint8Type;
	Type = go$pkg.Type = go$newType(0, "Interface", "reflect.Type", "Type", "reflect", null);
	Kind = go$pkg.Kind = go$newType(4, "Uint", "reflect.Kind", "Kind", "reflect", null);
	rtype = go$pkg.rtype = go$newType(0, "Struct", "reflect.rtype", "rtype", "reflect", function(size_, hash_, _$2_, align_, fieldAlign_, kind_, alg_, gc_, string_, uncommonType_, ptrToThis_) {
		this.go$val = this;
		this.size = size_ !== undefined ? size_ : 0;
		this.hash = hash_ !== undefined ? hash_ : 0;
		this._$2 = _$2_ !== undefined ? _$2_ : 0;
		this.align = align_ !== undefined ? align_ : 0;
		this.fieldAlign = fieldAlign_ !== undefined ? fieldAlign_ : 0;
		this.kind = kind_ !== undefined ? kind_ : 0;
		this.alg = alg_ !== undefined ? alg_ : (go$ptrType(Go$Uintptr)).nil;
		this.gc = gc_ !== undefined ? gc_ : 0;
		this.string = string_ !== undefined ? string_ : (go$ptrType(Go$String)).nil;
		this.uncommonType = uncommonType_ !== undefined ? uncommonType_ : (go$ptrType(uncommonType)).nil;
		this.ptrToThis = ptrToThis_ !== undefined ? ptrToThis_ : (go$ptrType(rtype)).nil;
	});
	rtype.prototype.Method = function(i) { return this.go$val.Method(i); };
	rtype.Ptr.prototype.Method = function(i) { return this.uncommonType.Method(i); };
	rtype.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	rtype.Ptr.prototype.MethodByName = function(name) { return this.uncommonType.MethodByName(name); };
	rtype.prototype.Name = function() { return this.go$val.Name(); };
	rtype.Ptr.prototype.Name = function() { return this.uncommonType.Name(); };
	rtype.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	rtype.Ptr.prototype.NumMethod = function() { return this.uncommonType.NumMethod(); };
	rtype.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	rtype.Ptr.prototype.PkgPath = function() { return this.uncommonType.PkgPath(); };
	rtype.prototype.uncommon = function() { return this.go$val.uncommon(); };
	rtype.Ptr.prototype.uncommon = function() { return this.uncommonType.uncommon(); };
	method = go$pkg.method = go$newType(0, "Struct", "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : (go$ptrType(Go$String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : (go$ptrType(Go$String)).nil;
		this.mtyp = mtyp_ !== undefined ? mtyp_ : (go$ptrType(rtype)).nil;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(rtype)).nil;
		this.ifn = ifn_ !== undefined ? ifn_ : 0;
		this.tfn = tfn_ !== undefined ? tfn_ : 0;
	});
	uncommonType = go$pkg.uncommonType = go$newType(0, "Struct", "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : (go$ptrType(Go$String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : (go$ptrType(Go$String)).nil;
		this.methods = methods_ !== undefined ? methods_ : (go$sliceType(method)).nil;
	});
	ChanDir = go$pkg.ChanDir = go$newType(4, "Int", "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = go$pkg.arrayType = go$newType(0, "Struct", "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
		this.slice = slice_ !== undefined ? slice_ : (go$ptrType(rtype)).nil;
		this.len = len_ !== undefined ? len_ : 0;
	});
	arrayType.prototype.Align = function() { return this.go$val.Align(); };
	arrayType.Ptr.prototype.Align = function() { return this.rtype.Align(); };
	arrayType.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	arrayType.Ptr.prototype.AssignableTo = function(u) { return this.rtype.AssignableTo(u); };
	arrayType.prototype.Bits = function() { return this.go$val.Bits(); };
	arrayType.Ptr.prototype.Bits = function() { return this.rtype.Bits(); };
	arrayType.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	arrayType.Ptr.prototype.ChanDir = function() { return this.rtype.ChanDir(); };
	arrayType.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	arrayType.Ptr.prototype.ConvertibleTo = function(u) { return this.rtype.ConvertibleTo(u); };
	arrayType.prototype.Elem = function() { return this.go$val.Elem(); };
	arrayType.Ptr.prototype.Elem = function() { return this.rtype.Elem(); };
	arrayType.prototype.Field = function(i) { return this.go$val.Field(i); };
	arrayType.Ptr.prototype.Field = function(i) { return this.rtype.Field(i); };
	arrayType.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	arrayType.Ptr.prototype.FieldAlign = function() { return this.rtype.FieldAlign(); };
	arrayType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	arrayType.Ptr.prototype.FieldByIndex = function(index) { return this.rtype.FieldByIndex(index); };
	arrayType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	arrayType.Ptr.prototype.FieldByName = function(name) { return this.rtype.FieldByName(name); };
	arrayType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	arrayType.Ptr.prototype.FieldByNameFunc = function(match) { return this.rtype.FieldByNameFunc(match); };
	arrayType.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	arrayType.Ptr.prototype.Implements = function(u) { return this.rtype.Implements(u); };
	arrayType.prototype.In = function(i) { return this.go$val.In(i); };
	arrayType.Ptr.prototype.In = function(i) { return this.rtype.In(i); };
	arrayType.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	arrayType.Ptr.prototype.IsVariadic = function() { return this.rtype.IsVariadic(); };
	arrayType.prototype.Key = function() { return this.go$val.Key(); };
	arrayType.Ptr.prototype.Key = function() { return this.rtype.Key(); };
	arrayType.prototype.Kind = function() { return this.go$val.Kind(); };
	arrayType.Ptr.prototype.Kind = function() { return this.rtype.Kind(); };
	arrayType.prototype.Len = function() { return this.go$val.Len(); };
	arrayType.Ptr.prototype.Len = function() { return this.rtype.Len(); };
	arrayType.prototype.Method = function(i) { return this.go$val.Method(i); };
	arrayType.Ptr.prototype.Method = function(i) { return this.rtype.Method(i); };
	arrayType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	arrayType.Ptr.prototype.MethodByName = function(name) { return this.rtype.MethodByName(name); };
	arrayType.prototype.Name = function() { return this.go$val.Name(); };
	arrayType.Ptr.prototype.Name = function() { return this.rtype.Name(); };
	arrayType.prototype.NumField = function() { return this.go$val.NumField(); };
	arrayType.Ptr.prototype.NumField = function() { return this.rtype.NumField(); };
	arrayType.prototype.NumIn = function() { return this.go$val.NumIn(); };
	arrayType.Ptr.prototype.NumIn = function() { return this.rtype.NumIn(); };
	arrayType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	arrayType.Ptr.prototype.NumMethod = function() { return this.rtype.NumMethod(); };
	arrayType.prototype.NumOut = function() { return this.go$val.NumOut(); };
	arrayType.Ptr.prototype.NumOut = function() { return this.rtype.NumOut(); };
	arrayType.prototype.Out = function(i) { return this.go$val.Out(i); };
	arrayType.Ptr.prototype.Out = function(i) { return this.rtype.Out(i); };
	arrayType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	arrayType.Ptr.prototype.PkgPath = function() { return this.rtype.PkgPath(); };
	arrayType.prototype.Size = function() { return this.go$val.Size(); };
	arrayType.Ptr.prototype.Size = function() { return this.rtype.Size(); };
	arrayType.prototype.String = function() { return this.go$val.String(); };
	arrayType.Ptr.prototype.String = function() { return this.rtype.String(); };
	arrayType.prototype.common = function() { return this.go$val.common(); };
	arrayType.Ptr.prototype.common = function() { return this.rtype.common(); };
	arrayType.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	arrayType.Ptr.prototype.ptrTo = function() { return this.rtype.ptrTo(); };
	arrayType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	arrayType.Ptr.prototype.uncommon = function() { return this.rtype.uncommon(); };
	chanType = go$pkg.chanType = go$newType(0, "Struct", "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
		this.dir = dir_ !== undefined ? dir_ : 0;
	});
	chanType.prototype.Align = function() { return this.go$val.Align(); };
	chanType.Ptr.prototype.Align = function() { return this.rtype.Align(); };
	chanType.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	chanType.Ptr.prototype.AssignableTo = function(u) { return this.rtype.AssignableTo(u); };
	chanType.prototype.Bits = function() { return this.go$val.Bits(); };
	chanType.Ptr.prototype.Bits = function() { return this.rtype.Bits(); };
	chanType.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	chanType.Ptr.prototype.ChanDir = function() { return this.rtype.ChanDir(); };
	chanType.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	chanType.Ptr.prototype.ConvertibleTo = function(u) { return this.rtype.ConvertibleTo(u); };
	chanType.prototype.Elem = function() { return this.go$val.Elem(); };
	chanType.Ptr.prototype.Elem = function() { return this.rtype.Elem(); };
	chanType.prototype.Field = function(i) { return this.go$val.Field(i); };
	chanType.Ptr.prototype.Field = function(i) { return this.rtype.Field(i); };
	chanType.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	chanType.Ptr.prototype.FieldAlign = function() { return this.rtype.FieldAlign(); };
	chanType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	chanType.Ptr.prototype.FieldByIndex = function(index) { return this.rtype.FieldByIndex(index); };
	chanType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	chanType.Ptr.prototype.FieldByName = function(name) { return this.rtype.FieldByName(name); };
	chanType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	chanType.Ptr.prototype.FieldByNameFunc = function(match) { return this.rtype.FieldByNameFunc(match); };
	chanType.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	chanType.Ptr.prototype.Implements = function(u) { return this.rtype.Implements(u); };
	chanType.prototype.In = function(i) { return this.go$val.In(i); };
	chanType.Ptr.prototype.In = function(i) { return this.rtype.In(i); };
	chanType.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	chanType.Ptr.prototype.IsVariadic = function() { return this.rtype.IsVariadic(); };
	chanType.prototype.Key = function() { return this.go$val.Key(); };
	chanType.Ptr.prototype.Key = function() { return this.rtype.Key(); };
	chanType.prototype.Kind = function() { return this.go$val.Kind(); };
	chanType.Ptr.prototype.Kind = function() { return this.rtype.Kind(); };
	chanType.prototype.Len = function() { return this.go$val.Len(); };
	chanType.Ptr.prototype.Len = function() { return this.rtype.Len(); };
	chanType.prototype.Method = function(i) { return this.go$val.Method(i); };
	chanType.Ptr.prototype.Method = function(i) { return this.rtype.Method(i); };
	chanType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	chanType.Ptr.prototype.MethodByName = function(name) { return this.rtype.MethodByName(name); };
	chanType.prototype.Name = function() { return this.go$val.Name(); };
	chanType.Ptr.prototype.Name = function() { return this.rtype.Name(); };
	chanType.prototype.NumField = function() { return this.go$val.NumField(); };
	chanType.Ptr.prototype.NumField = function() { return this.rtype.NumField(); };
	chanType.prototype.NumIn = function() { return this.go$val.NumIn(); };
	chanType.Ptr.prototype.NumIn = function() { return this.rtype.NumIn(); };
	chanType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	chanType.Ptr.prototype.NumMethod = function() { return this.rtype.NumMethod(); };
	chanType.prototype.NumOut = function() { return this.go$val.NumOut(); };
	chanType.Ptr.prototype.NumOut = function() { return this.rtype.NumOut(); };
	chanType.prototype.Out = function(i) { return this.go$val.Out(i); };
	chanType.Ptr.prototype.Out = function(i) { return this.rtype.Out(i); };
	chanType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	chanType.Ptr.prototype.PkgPath = function() { return this.rtype.PkgPath(); };
	chanType.prototype.Size = function() { return this.go$val.Size(); };
	chanType.Ptr.prototype.Size = function() { return this.rtype.Size(); };
	chanType.prototype.String = function() { return this.go$val.String(); };
	chanType.Ptr.prototype.String = function() { return this.rtype.String(); };
	chanType.prototype.common = function() { return this.go$val.common(); };
	chanType.Ptr.prototype.common = function() { return this.rtype.common(); };
	chanType.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	chanType.Ptr.prototype.ptrTo = function() { return this.rtype.ptrTo(); };
	chanType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	chanType.Ptr.prototype.uncommon = function() { return this.rtype.uncommon(); };
	funcType = go$pkg.funcType = go$newType(0, "Struct", "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.dotdotdot = dotdotdot_ !== undefined ? dotdotdot_ : false;
		this.in$2 = in$2_ !== undefined ? in$2_ : (go$sliceType((go$ptrType(rtype)))).nil;
		this.out = out_ !== undefined ? out_ : (go$sliceType((go$ptrType(rtype)))).nil;
	});
	funcType.prototype.Align = function() { return this.go$val.Align(); };
	funcType.Ptr.prototype.Align = function() { return this.rtype.Align(); };
	funcType.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	funcType.Ptr.prototype.AssignableTo = function(u) { return this.rtype.AssignableTo(u); };
	funcType.prototype.Bits = function() { return this.go$val.Bits(); };
	funcType.Ptr.prototype.Bits = function() { return this.rtype.Bits(); };
	funcType.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	funcType.Ptr.prototype.ChanDir = function() { return this.rtype.ChanDir(); };
	funcType.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	funcType.Ptr.prototype.ConvertibleTo = function(u) { return this.rtype.ConvertibleTo(u); };
	funcType.prototype.Elem = function() { return this.go$val.Elem(); };
	funcType.Ptr.prototype.Elem = function() { return this.rtype.Elem(); };
	funcType.prototype.Field = function(i) { return this.go$val.Field(i); };
	funcType.Ptr.prototype.Field = function(i) { return this.rtype.Field(i); };
	funcType.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	funcType.Ptr.prototype.FieldAlign = function() { return this.rtype.FieldAlign(); };
	funcType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	funcType.Ptr.prototype.FieldByIndex = function(index) { return this.rtype.FieldByIndex(index); };
	funcType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	funcType.Ptr.prototype.FieldByName = function(name) { return this.rtype.FieldByName(name); };
	funcType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	funcType.Ptr.prototype.FieldByNameFunc = function(match) { return this.rtype.FieldByNameFunc(match); };
	funcType.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	funcType.Ptr.prototype.Implements = function(u) { return this.rtype.Implements(u); };
	funcType.prototype.In = function(i) { return this.go$val.In(i); };
	funcType.Ptr.prototype.In = function(i) { return this.rtype.In(i); };
	funcType.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	funcType.Ptr.prototype.IsVariadic = function() { return this.rtype.IsVariadic(); };
	funcType.prototype.Key = function() { return this.go$val.Key(); };
	funcType.Ptr.prototype.Key = function() { return this.rtype.Key(); };
	funcType.prototype.Kind = function() { return this.go$val.Kind(); };
	funcType.Ptr.prototype.Kind = function() { return this.rtype.Kind(); };
	funcType.prototype.Len = function() { return this.go$val.Len(); };
	funcType.Ptr.prototype.Len = function() { return this.rtype.Len(); };
	funcType.prototype.Method = function(i) { return this.go$val.Method(i); };
	funcType.Ptr.prototype.Method = function(i) { return this.rtype.Method(i); };
	funcType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	funcType.Ptr.prototype.MethodByName = function(name) { return this.rtype.MethodByName(name); };
	funcType.prototype.Name = function() { return this.go$val.Name(); };
	funcType.Ptr.prototype.Name = function() { return this.rtype.Name(); };
	funcType.prototype.NumField = function() { return this.go$val.NumField(); };
	funcType.Ptr.prototype.NumField = function() { return this.rtype.NumField(); };
	funcType.prototype.NumIn = function() { return this.go$val.NumIn(); };
	funcType.Ptr.prototype.NumIn = function() { return this.rtype.NumIn(); };
	funcType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	funcType.Ptr.prototype.NumMethod = function() { return this.rtype.NumMethod(); };
	funcType.prototype.NumOut = function() { return this.go$val.NumOut(); };
	funcType.Ptr.prototype.NumOut = function() { return this.rtype.NumOut(); };
	funcType.prototype.Out = function(i) { return this.go$val.Out(i); };
	funcType.Ptr.prototype.Out = function(i) { return this.rtype.Out(i); };
	funcType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	funcType.Ptr.prototype.PkgPath = function() { return this.rtype.PkgPath(); };
	funcType.prototype.Size = function() { return this.go$val.Size(); };
	funcType.Ptr.prototype.Size = function() { return this.rtype.Size(); };
	funcType.prototype.String = function() { return this.go$val.String(); };
	funcType.Ptr.prototype.String = function() { return this.rtype.String(); };
	funcType.prototype.common = function() { return this.go$val.common(); };
	funcType.Ptr.prototype.common = function() { return this.rtype.common(); };
	funcType.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	funcType.Ptr.prototype.ptrTo = function() { return this.rtype.ptrTo(); };
	funcType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	funcType.Ptr.prototype.uncommon = function() { return this.rtype.uncommon(); };
	imethod = go$pkg.imethod = go$newType(0, "Struct", "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : (go$ptrType(Go$String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : (go$ptrType(Go$String)).nil;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(rtype)).nil;
	});
	interfaceType = go$pkg.interfaceType = go$newType(0, "Struct", "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.methods = methods_ !== undefined ? methods_ : (go$sliceType(imethod)).nil;
	});
	interfaceType.prototype.Align = function() { return this.go$val.Align(); };
	interfaceType.Ptr.prototype.Align = function() { return this.rtype.Align(); };
	interfaceType.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	interfaceType.Ptr.prototype.AssignableTo = function(u) { return this.rtype.AssignableTo(u); };
	interfaceType.prototype.Bits = function() { return this.go$val.Bits(); };
	interfaceType.Ptr.prototype.Bits = function() { return this.rtype.Bits(); };
	interfaceType.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	interfaceType.Ptr.prototype.ChanDir = function() { return this.rtype.ChanDir(); };
	interfaceType.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	interfaceType.Ptr.prototype.ConvertibleTo = function(u) { return this.rtype.ConvertibleTo(u); };
	interfaceType.prototype.Elem = function() { return this.go$val.Elem(); };
	interfaceType.Ptr.prototype.Elem = function() { return this.rtype.Elem(); };
	interfaceType.prototype.Field = function(i) { return this.go$val.Field(i); };
	interfaceType.Ptr.prototype.Field = function(i) { return this.rtype.Field(i); };
	interfaceType.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	interfaceType.Ptr.prototype.FieldAlign = function() { return this.rtype.FieldAlign(); };
	interfaceType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	interfaceType.Ptr.prototype.FieldByIndex = function(index) { return this.rtype.FieldByIndex(index); };
	interfaceType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	interfaceType.Ptr.prototype.FieldByName = function(name) { return this.rtype.FieldByName(name); };
	interfaceType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	interfaceType.Ptr.prototype.FieldByNameFunc = function(match) { return this.rtype.FieldByNameFunc(match); };
	interfaceType.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	interfaceType.Ptr.prototype.Implements = function(u) { return this.rtype.Implements(u); };
	interfaceType.prototype.In = function(i) { return this.go$val.In(i); };
	interfaceType.Ptr.prototype.In = function(i) { return this.rtype.In(i); };
	interfaceType.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	interfaceType.Ptr.prototype.IsVariadic = function() { return this.rtype.IsVariadic(); };
	interfaceType.prototype.Key = function() { return this.go$val.Key(); };
	interfaceType.Ptr.prototype.Key = function() { return this.rtype.Key(); };
	interfaceType.prototype.Kind = function() { return this.go$val.Kind(); };
	interfaceType.Ptr.prototype.Kind = function() { return this.rtype.Kind(); };
	interfaceType.prototype.Len = function() { return this.go$val.Len(); };
	interfaceType.Ptr.prototype.Len = function() { return this.rtype.Len(); };
	interfaceType.prototype.Method = function(i) { return this.go$val.Method(i); };
	interfaceType.Ptr.prototype.Method = function(i) { return this.rtype.Method(i); };
	interfaceType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	interfaceType.Ptr.prototype.MethodByName = function(name) { return this.rtype.MethodByName(name); };
	interfaceType.prototype.Name = function() { return this.go$val.Name(); };
	interfaceType.Ptr.prototype.Name = function() { return this.rtype.Name(); };
	interfaceType.prototype.NumField = function() { return this.go$val.NumField(); };
	interfaceType.Ptr.prototype.NumField = function() { return this.rtype.NumField(); };
	interfaceType.prototype.NumIn = function() { return this.go$val.NumIn(); };
	interfaceType.Ptr.prototype.NumIn = function() { return this.rtype.NumIn(); };
	interfaceType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	interfaceType.Ptr.prototype.NumMethod = function() { return this.rtype.NumMethod(); };
	interfaceType.prototype.NumOut = function() { return this.go$val.NumOut(); };
	interfaceType.Ptr.prototype.NumOut = function() { return this.rtype.NumOut(); };
	interfaceType.prototype.Out = function(i) { return this.go$val.Out(i); };
	interfaceType.Ptr.prototype.Out = function(i) { return this.rtype.Out(i); };
	interfaceType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	interfaceType.Ptr.prototype.PkgPath = function() { return this.rtype.PkgPath(); };
	interfaceType.prototype.Size = function() { return this.go$val.Size(); };
	interfaceType.Ptr.prototype.Size = function() { return this.rtype.Size(); };
	interfaceType.prototype.String = function() { return this.go$val.String(); };
	interfaceType.Ptr.prototype.String = function() { return this.rtype.String(); };
	interfaceType.prototype.common = function() { return this.go$val.common(); };
	interfaceType.Ptr.prototype.common = function() { return this.rtype.common(); };
	interfaceType.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	interfaceType.Ptr.prototype.ptrTo = function() { return this.rtype.ptrTo(); };
	interfaceType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	interfaceType.Ptr.prototype.uncommon = function() { return this.rtype.uncommon(); };
	mapType = go$pkg.mapType = go$newType(0, "Struct", "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.key = key_ !== undefined ? key_ : (go$ptrType(rtype)).nil;
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
		this.bucket = bucket_ !== undefined ? bucket_ : (go$ptrType(rtype)).nil;
		this.hmap = hmap_ !== undefined ? hmap_ : (go$ptrType(rtype)).nil;
	});
	mapType.prototype.Align = function() { return this.go$val.Align(); };
	mapType.Ptr.prototype.Align = function() { return this.rtype.Align(); };
	mapType.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	mapType.Ptr.prototype.AssignableTo = function(u) { return this.rtype.AssignableTo(u); };
	mapType.prototype.Bits = function() { return this.go$val.Bits(); };
	mapType.Ptr.prototype.Bits = function() { return this.rtype.Bits(); };
	mapType.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	mapType.Ptr.prototype.ChanDir = function() { return this.rtype.ChanDir(); };
	mapType.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	mapType.Ptr.prototype.ConvertibleTo = function(u) { return this.rtype.ConvertibleTo(u); };
	mapType.prototype.Elem = function() { return this.go$val.Elem(); };
	mapType.Ptr.prototype.Elem = function() { return this.rtype.Elem(); };
	mapType.prototype.Field = function(i) { return this.go$val.Field(i); };
	mapType.Ptr.prototype.Field = function(i) { return this.rtype.Field(i); };
	mapType.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	mapType.Ptr.prototype.FieldAlign = function() { return this.rtype.FieldAlign(); };
	mapType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	mapType.Ptr.prototype.FieldByIndex = function(index) { return this.rtype.FieldByIndex(index); };
	mapType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	mapType.Ptr.prototype.FieldByName = function(name) { return this.rtype.FieldByName(name); };
	mapType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	mapType.Ptr.prototype.FieldByNameFunc = function(match) { return this.rtype.FieldByNameFunc(match); };
	mapType.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	mapType.Ptr.prototype.Implements = function(u) { return this.rtype.Implements(u); };
	mapType.prototype.In = function(i) { return this.go$val.In(i); };
	mapType.Ptr.prototype.In = function(i) { return this.rtype.In(i); };
	mapType.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	mapType.Ptr.prototype.IsVariadic = function() { return this.rtype.IsVariadic(); };
	mapType.prototype.Key = function() { return this.go$val.Key(); };
	mapType.Ptr.prototype.Key = function() { return this.rtype.Key(); };
	mapType.prototype.Kind = function() { return this.go$val.Kind(); };
	mapType.Ptr.prototype.Kind = function() { return this.rtype.Kind(); };
	mapType.prototype.Len = function() { return this.go$val.Len(); };
	mapType.Ptr.prototype.Len = function() { return this.rtype.Len(); };
	mapType.prototype.Method = function(i) { return this.go$val.Method(i); };
	mapType.Ptr.prototype.Method = function(i) { return this.rtype.Method(i); };
	mapType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	mapType.Ptr.prototype.MethodByName = function(name) { return this.rtype.MethodByName(name); };
	mapType.prototype.Name = function() { return this.go$val.Name(); };
	mapType.Ptr.prototype.Name = function() { return this.rtype.Name(); };
	mapType.prototype.NumField = function() { return this.go$val.NumField(); };
	mapType.Ptr.prototype.NumField = function() { return this.rtype.NumField(); };
	mapType.prototype.NumIn = function() { return this.go$val.NumIn(); };
	mapType.Ptr.prototype.NumIn = function() { return this.rtype.NumIn(); };
	mapType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	mapType.Ptr.prototype.NumMethod = function() { return this.rtype.NumMethod(); };
	mapType.prototype.NumOut = function() { return this.go$val.NumOut(); };
	mapType.Ptr.prototype.NumOut = function() { return this.rtype.NumOut(); };
	mapType.prototype.Out = function(i) { return this.go$val.Out(i); };
	mapType.Ptr.prototype.Out = function(i) { return this.rtype.Out(i); };
	mapType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	mapType.Ptr.prototype.PkgPath = function() { return this.rtype.PkgPath(); };
	mapType.prototype.Size = function() { return this.go$val.Size(); };
	mapType.Ptr.prototype.Size = function() { return this.rtype.Size(); };
	mapType.prototype.String = function() { return this.go$val.String(); };
	mapType.Ptr.prototype.String = function() { return this.rtype.String(); };
	mapType.prototype.common = function() { return this.go$val.common(); };
	mapType.Ptr.prototype.common = function() { return this.rtype.common(); };
	mapType.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	mapType.Ptr.prototype.ptrTo = function() { return this.rtype.ptrTo(); };
	mapType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	mapType.Ptr.prototype.uncommon = function() { return this.rtype.uncommon(); };
	ptrType = go$pkg.ptrType = go$newType(0, "Struct", "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
	});
	ptrType.prototype.Align = function() { return this.go$val.Align(); };
	ptrType.Ptr.prototype.Align = function() { return this.rtype.Align(); };
	ptrType.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	ptrType.Ptr.prototype.AssignableTo = function(u) { return this.rtype.AssignableTo(u); };
	ptrType.prototype.Bits = function() { return this.go$val.Bits(); };
	ptrType.Ptr.prototype.Bits = function() { return this.rtype.Bits(); };
	ptrType.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	ptrType.Ptr.prototype.ChanDir = function() { return this.rtype.ChanDir(); };
	ptrType.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	ptrType.Ptr.prototype.ConvertibleTo = function(u) { return this.rtype.ConvertibleTo(u); };
	ptrType.prototype.Elem = function() { return this.go$val.Elem(); };
	ptrType.Ptr.prototype.Elem = function() { return this.rtype.Elem(); };
	ptrType.prototype.Field = function(i) { return this.go$val.Field(i); };
	ptrType.Ptr.prototype.Field = function(i) { return this.rtype.Field(i); };
	ptrType.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	ptrType.Ptr.prototype.FieldAlign = function() { return this.rtype.FieldAlign(); };
	ptrType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	ptrType.Ptr.prototype.FieldByIndex = function(index) { return this.rtype.FieldByIndex(index); };
	ptrType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	ptrType.Ptr.prototype.FieldByName = function(name) { return this.rtype.FieldByName(name); };
	ptrType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	ptrType.Ptr.prototype.FieldByNameFunc = function(match) { return this.rtype.FieldByNameFunc(match); };
	ptrType.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	ptrType.Ptr.prototype.Implements = function(u) { return this.rtype.Implements(u); };
	ptrType.prototype.In = function(i) { return this.go$val.In(i); };
	ptrType.Ptr.prototype.In = function(i) { return this.rtype.In(i); };
	ptrType.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	ptrType.Ptr.prototype.IsVariadic = function() { return this.rtype.IsVariadic(); };
	ptrType.prototype.Key = function() { return this.go$val.Key(); };
	ptrType.Ptr.prototype.Key = function() { return this.rtype.Key(); };
	ptrType.prototype.Kind = function() { return this.go$val.Kind(); };
	ptrType.Ptr.prototype.Kind = function() { return this.rtype.Kind(); };
	ptrType.prototype.Len = function() { return this.go$val.Len(); };
	ptrType.Ptr.prototype.Len = function() { return this.rtype.Len(); };
	ptrType.prototype.Method = function(i) { return this.go$val.Method(i); };
	ptrType.Ptr.prototype.Method = function(i) { return this.rtype.Method(i); };
	ptrType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	ptrType.Ptr.prototype.MethodByName = function(name) { return this.rtype.MethodByName(name); };
	ptrType.prototype.Name = function() { return this.go$val.Name(); };
	ptrType.Ptr.prototype.Name = function() { return this.rtype.Name(); };
	ptrType.prototype.NumField = function() { return this.go$val.NumField(); };
	ptrType.Ptr.prototype.NumField = function() { return this.rtype.NumField(); };
	ptrType.prototype.NumIn = function() { return this.go$val.NumIn(); };
	ptrType.Ptr.prototype.NumIn = function() { return this.rtype.NumIn(); };
	ptrType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	ptrType.Ptr.prototype.NumMethod = function() { return this.rtype.NumMethod(); };
	ptrType.prototype.NumOut = function() { return this.go$val.NumOut(); };
	ptrType.Ptr.prototype.NumOut = function() { return this.rtype.NumOut(); };
	ptrType.prototype.Out = function(i) { return this.go$val.Out(i); };
	ptrType.Ptr.prototype.Out = function(i) { return this.rtype.Out(i); };
	ptrType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	ptrType.Ptr.prototype.PkgPath = function() { return this.rtype.PkgPath(); };
	ptrType.prototype.Size = function() { return this.go$val.Size(); };
	ptrType.Ptr.prototype.Size = function() { return this.rtype.Size(); };
	ptrType.prototype.String = function() { return this.go$val.String(); };
	ptrType.Ptr.prototype.String = function() { return this.rtype.String(); };
	ptrType.prototype.common = function() { return this.go$val.common(); };
	ptrType.Ptr.prototype.common = function() { return this.rtype.common(); };
	ptrType.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	ptrType.Ptr.prototype.ptrTo = function() { return this.rtype.ptrTo(); };
	ptrType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	ptrType.Ptr.prototype.uncommon = function() { return this.rtype.uncommon(); };
	sliceType = go$pkg.sliceType = go$newType(0, "Struct", "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
	});
	sliceType.prototype.Align = function() { return this.go$val.Align(); };
	sliceType.Ptr.prototype.Align = function() { return this.rtype.Align(); };
	sliceType.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	sliceType.Ptr.prototype.AssignableTo = function(u) { return this.rtype.AssignableTo(u); };
	sliceType.prototype.Bits = function() { return this.go$val.Bits(); };
	sliceType.Ptr.prototype.Bits = function() { return this.rtype.Bits(); };
	sliceType.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	sliceType.Ptr.prototype.ChanDir = function() { return this.rtype.ChanDir(); };
	sliceType.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	sliceType.Ptr.prototype.ConvertibleTo = function(u) { return this.rtype.ConvertibleTo(u); };
	sliceType.prototype.Elem = function() { return this.go$val.Elem(); };
	sliceType.Ptr.prototype.Elem = function() { return this.rtype.Elem(); };
	sliceType.prototype.Field = function(i) { return this.go$val.Field(i); };
	sliceType.Ptr.prototype.Field = function(i) { return this.rtype.Field(i); };
	sliceType.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	sliceType.Ptr.prototype.FieldAlign = function() { return this.rtype.FieldAlign(); };
	sliceType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	sliceType.Ptr.prototype.FieldByIndex = function(index) { return this.rtype.FieldByIndex(index); };
	sliceType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	sliceType.Ptr.prototype.FieldByName = function(name) { return this.rtype.FieldByName(name); };
	sliceType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	sliceType.Ptr.prototype.FieldByNameFunc = function(match) { return this.rtype.FieldByNameFunc(match); };
	sliceType.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	sliceType.Ptr.prototype.Implements = function(u) { return this.rtype.Implements(u); };
	sliceType.prototype.In = function(i) { return this.go$val.In(i); };
	sliceType.Ptr.prototype.In = function(i) { return this.rtype.In(i); };
	sliceType.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	sliceType.Ptr.prototype.IsVariadic = function() { return this.rtype.IsVariadic(); };
	sliceType.prototype.Key = function() { return this.go$val.Key(); };
	sliceType.Ptr.prototype.Key = function() { return this.rtype.Key(); };
	sliceType.prototype.Kind = function() { return this.go$val.Kind(); };
	sliceType.Ptr.prototype.Kind = function() { return this.rtype.Kind(); };
	sliceType.prototype.Len = function() { return this.go$val.Len(); };
	sliceType.Ptr.prototype.Len = function() { return this.rtype.Len(); };
	sliceType.prototype.Method = function(i) { return this.go$val.Method(i); };
	sliceType.Ptr.prototype.Method = function(i) { return this.rtype.Method(i); };
	sliceType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	sliceType.Ptr.prototype.MethodByName = function(name) { return this.rtype.MethodByName(name); };
	sliceType.prototype.Name = function() { return this.go$val.Name(); };
	sliceType.Ptr.prototype.Name = function() { return this.rtype.Name(); };
	sliceType.prototype.NumField = function() { return this.go$val.NumField(); };
	sliceType.Ptr.prototype.NumField = function() { return this.rtype.NumField(); };
	sliceType.prototype.NumIn = function() { return this.go$val.NumIn(); };
	sliceType.Ptr.prototype.NumIn = function() { return this.rtype.NumIn(); };
	sliceType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	sliceType.Ptr.prototype.NumMethod = function() { return this.rtype.NumMethod(); };
	sliceType.prototype.NumOut = function() { return this.go$val.NumOut(); };
	sliceType.Ptr.prototype.NumOut = function() { return this.rtype.NumOut(); };
	sliceType.prototype.Out = function(i) { return this.go$val.Out(i); };
	sliceType.Ptr.prototype.Out = function(i) { return this.rtype.Out(i); };
	sliceType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	sliceType.Ptr.prototype.PkgPath = function() { return this.rtype.PkgPath(); };
	sliceType.prototype.Size = function() { return this.go$val.Size(); };
	sliceType.Ptr.prototype.Size = function() { return this.rtype.Size(); };
	sliceType.prototype.String = function() { return this.go$val.String(); };
	sliceType.Ptr.prototype.String = function() { return this.rtype.String(); };
	sliceType.prototype.common = function() { return this.go$val.common(); };
	sliceType.Ptr.prototype.common = function() { return this.rtype.common(); };
	sliceType.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	sliceType.Ptr.prototype.ptrTo = function() { return this.rtype.ptrTo(); };
	sliceType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	sliceType.Ptr.prototype.uncommon = function() { return this.rtype.uncommon(); };
	structField = go$pkg.structField = go$newType(0, "Struct", "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : (go$ptrType(Go$String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : (go$ptrType(Go$String)).nil;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(rtype)).nil;
		this.tag = tag_ !== undefined ? tag_ : (go$ptrType(Go$String)).nil;
		this.offset = offset_ !== undefined ? offset_ : 0;
	});
	structType = go$pkg.structType = go$newType(0, "Struct", "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.fields = fields_ !== undefined ? fields_ : (go$sliceType(structField)).nil;
	});
	structType.prototype.Align = function() { return this.go$val.Align(); };
	structType.Ptr.prototype.Align = function() { return this.rtype.Align(); };
	structType.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	structType.Ptr.prototype.AssignableTo = function(u) { return this.rtype.AssignableTo(u); };
	structType.prototype.Bits = function() { return this.go$val.Bits(); };
	structType.Ptr.prototype.Bits = function() { return this.rtype.Bits(); };
	structType.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	structType.Ptr.prototype.ChanDir = function() { return this.rtype.ChanDir(); };
	structType.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	structType.Ptr.prototype.ConvertibleTo = function(u) { return this.rtype.ConvertibleTo(u); };
	structType.prototype.Elem = function() { return this.go$val.Elem(); };
	structType.Ptr.prototype.Elem = function() { return this.rtype.Elem(); };
	structType.prototype.Field = function(i) { return this.go$val.Field(i); };
	structType.Ptr.prototype.Field = function(i) { return this.rtype.Field(i); };
	structType.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	structType.Ptr.prototype.FieldAlign = function() { return this.rtype.FieldAlign(); };
	structType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	structType.Ptr.prototype.FieldByIndex = function(index) { return this.rtype.FieldByIndex(index); };
	structType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	structType.Ptr.prototype.FieldByName = function(name) { return this.rtype.FieldByName(name); };
	structType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	structType.Ptr.prototype.FieldByNameFunc = function(match) { return this.rtype.FieldByNameFunc(match); };
	structType.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	structType.Ptr.prototype.Implements = function(u) { return this.rtype.Implements(u); };
	structType.prototype.In = function(i) { return this.go$val.In(i); };
	structType.Ptr.prototype.In = function(i) { return this.rtype.In(i); };
	structType.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	structType.Ptr.prototype.IsVariadic = function() { return this.rtype.IsVariadic(); };
	structType.prototype.Key = function() { return this.go$val.Key(); };
	structType.Ptr.prototype.Key = function() { return this.rtype.Key(); };
	structType.prototype.Kind = function() { return this.go$val.Kind(); };
	structType.Ptr.prototype.Kind = function() { return this.rtype.Kind(); };
	structType.prototype.Len = function() { return this.go$val.Len(); };
	structType.Ptr.prototype.Len = function() { return this.rtype.Len(); };
	structType.prototype.Method = function(i) { return this.go$val.Method(i); };
	structType.Ptr.prototype.Method = function(i) { return this.rtype.Method(i); };
	structType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	structType.Ptr.prototype.MethodByName = function(name) { return this.rtype.MethodByName(name); };
	structType.prototype.Name = function() { return this.go$val.Name(); };
	structType.Ptr.prototype.Name = function() { return this.rtype.Name(); };
	structType.prototype.NumField = function() { return this.go$val.NumField(); };
	structType.Ptr.prototype.NumField = function() { return this.rtype.NumField(); };
	structType.prototype.NumIn = function() { return this.go$val.NumIn(); };
	structType.Ptr.prototype.NumIn = function() { return this.rtype.NumIn(); };
	structType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	structType.Ptr.prototype.NumMethod = function() { return this.rtype.NumMethod(); };
	structType.prototype.NumOut = function() { return this.go$val.NumOut(); };
	structType.Ptr.prototype.NumOut = function() { return this.rtype.NumOut(); };
	structType.prototype.Out = function(i) { return this.go$val.Out(i); };
	structType.Ptr.prototype.Out = function(i) { return this.rtype.Out(i); };
	structType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	structType.Ptr.prototype.PkgPath = function() { return this.rtype.PkgPath(); };
	structType.prototype.Size = function() { return this.go$val.Size(); };
	structType.Ptr.prototype.Size = function() { return this.rtype.Size(); };
	structType.prototype.String = function() { return this.go$val.String(); };
	structType.Ptr.prototype.String = function() { return this.rtype.String(); };
	structType.prototype.common = function() { return this.go$val.common(); };
	structType.Ptr.prototype.common = function() { return this.rtype.common(); };
	structType.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	structType.Ptr.prototype.ptrTo = function() { return this.rtype.ptrTo(); };
	structType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	structType.Ptr.prototype.uncommon = function() { return this.rtype.uncommon(); };
	Method = go$pkg.Method = go$newType(0, "Struct", "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Func = Func_ !== undefined ? Func_ : new Value.Ptr();
		this.Index = Index_ !== undefined ? Index_ : 0;
	});
	StructField = go$pkg.StructField = go$newType(0, "Struct", "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Tag = Tag_ !== undefined ? Tag_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.Index = Index_ !== undefined ? Index_ : (go$sliceType(Go$Int)).nil;
		this.Anonymous = Anonymous_ !== undefined ? Anonymous_ : false;
	});
	StructTag = go$pkg.StructTag = go$newType(0, "String", "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = go$pkg.fieldScan = go$newType(0, "Struct", "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.go$val = this;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(structType)).nil;
		this.index = index_ !== undefined ? index_ : (go$sliceType(Go$Int)).nil;
	});
	Value = go$pkg.Value = go$newType(0, "Struct", "reflect.Value", "Value", "reflect", function(typ_, val_, flag_) {
		this.go$val = this;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(rtype)).nil;
		this.val = val_ !== undefined ? val_ : 0;
		this.flag = flag_ !== undefined ? flag_ : 0;
	});
	Value.prototype.kind = function() { return this.go$val.kind(); };
	Value.Ptr.prototype.kind = function() { return new flag(this.flag).kind(); };
	Value.prototype.mustBe = function(expected) { return this.go$val.mustBe(expected); };
	Value.Ptr.prototype.mustBe = function(expected) { return new flag(this.flag).mustBe(expected); };
	Value.prototype.mustBeAssignable = function() { return this.go$val.mustBeAssignable(); };
	Value.Ptr.prototype.mustBeAssignable = function() { return new flag(this.flag).mustBeAssignable(); };
	Value.prototype.mustBeExported = function() { return this.go$val.mustBeExported(); };
	Value.Ptr.prototype.mustBeExported = function() { return new flag(this.flag).mustBeExported(); };
	flag = go$pkg.flag = go$newType(4, "Uintptr", "reflect.flag", "flag", "reflect", null);
	ValueError = go$pkg.ValueError = go$newType(0, "Struct", "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.go$val = this;
		this.Method = Method_ !== undefined ? Method_ : "";
		this.Kind = Kind_ !== undefined ? Kind_ : 0;
	});
	iword = go$pkg.iword = go$newType(0, "UnsafePointer", "reflect.iword", "iword", "reflect", null);
	makeMethodValue = function(op, v) {
			if ((v.flag & flagMethod) === 0) {
				throw go$panic(new Go$String("reflect: internal error: invalid use of makePartialFunc"));
			}

			var tuple = methodReceiver(op, v, v.flag >> flagMethodShift);
			var fn = tuple[1];
			var rcvr = tuple[2];
			var fv = function() { return fn.apply(rcvr, arguments); };
			return new Value.Ptr(v.Type(), fv, (v.flag & flagRO) | (Func << flagKindShift));
		};
	Kind.prototype.String = function() {
		var k, _slice, _index;
		k = this.go$val;
		if ((k >> 0) < kindNames.length) {
			return (_slice = kindNames, _index = k, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	go$ptrType(Kind).prototype.String = function() { return new Kind(this.go$get()).String(); };
	uncommonType.Ptr.prototype.uncommon = function() {
		var t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	uncommonType.Ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		if (t === (go$ptrType(uncommonType)).nil || go$pointerIsEqual(t.pkgPath, (go$ptrType(Go$String)).nil)) {
			return "";
		}
		return t.pkgPath.go$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	uncommonType.Ptr.prototype.Name = function() {
		var t;
		t = this;
		if (t === (go$ptrType(uncommonType)).nil || go$pointerIsEqual(t.name, (go$ptrType(Go$String)).nil)) {
			return "";
		}
		return t.name.go$get();
	};
	uncommonType.prototype.Name = function() { return this.go$val.Name(); };
	rtype.Ptr.prototype.String = function() {
		var t;
		t = this;
		return t.string.go$get();
	};
	rtype.prototype.String = function() { return this.go$val.String(); };
	rtype.Ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.go$val.Size(); };
	rtype.Ptr.prototype.Bits = function() {
		var t, k, x, x$1;
		t = this;
		if (t === (go$ptrType(rtype)).nil) {
			throw go$panic(new Go$String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			throw go$panic(new Go$String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return (x = (t.size >> 0), x$1 = 8, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
	};
	rtype.prototype.Bits = function() { return this.go$val.Bits(); };
	rtype.Ptr.prototype.Align = function() {
		var t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.go$val.Align(); };
	rtype.Ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	rtype.Ptr.prototype.Kind = function() {
		var t;
		t = this;
		return (((t.kind & 127) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.go$val.Kind(); };
	rtype.Ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.go$val.common(); };
	uncommonType.Ptr.prototype.Method = function(i) {
			if (this === uncommonType.Ptr.nil || i < 0 || i >= this.methods.length) {
				throw go$panic(new Go$String("reflect: Method index out of range"));
			}
			var p = this.methods.array[i];
			var fl = Func << flagKindShift;
			var pkgPath = "";
			if (p.pkgPath.go$get !== go$throwNilPointerError) {
				pkgPath = p.pkgPath.go$get();
				fl |= flagRO;
			}
			var mt = p.typ;
			var name = p.name.go$get();
			if (go$reservedKeywords.indexOf(name) !== -1) {
				name += "$";
			}
			var fn = function(rcvr) {
				return rcvr[name].apply(rcvr, Go$Array.prototype.slice.apply(arguments, [1]));
			}
			return new Method.Ptr(p.name.go$get(), pkgPath, mt, new Value.Ptr(mt, fn, fl), i);
		};
	uncommonType.prototype.Method = function() { return this.go$val.Method(); };
	uncommonType.Ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		if (t === (go$ptrType(uncommonType)).nil) {
			return 0;
		}
		return t.methods.length;
	};
	uncommonType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	uncommonType.Ptr.prototype.MethodByName = function(name) {
		var m, ok, t, _struct, _struct$1, p, _ref, _i, i, _slice, _index, _struct$2, _struct$3, _tuple, _struct$4, _struct$5, _struct$6, _struct$7;
		m = new Method.Ptr();
		ok = false;
		t = this;
		if (t === (go$ptrType(uncommonType)).nil) {
			return [(_struct = m, new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index)), ok];
		}
		p = (go$ptrType(method)).nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			p = (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!(go$pointerIsEqual(p.name, (go$ptrType(Go$String)).nil)) && p.name.go$get() === name) {
				_tuple = [(_struct$2 = t.Method(i), new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index)), true], m = _tuple[0], ok = _tuple[1];
				return [(_struct$4 = m, new Method.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, (_struct$5 = _struct$4.Func, new Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), _struct$4.Index)), ok];
			}
			_i++;
		}
		return [(_struct$6 = m, new Method.Ptr(_struct$6.Name, _struct$6.PkgPath, _struct$6.Type, (_struct$7 = _struct$6.Func, new Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), _struct$6.Index)), ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	rtype.Ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	rtype.Ptr.prototype.Method = function(i) {
		var m, t, tt, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7;
		m = new Method.Ptr();
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			m = (_struct = tt.Method(i), new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index));
			return (_struct$2 = m, new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index));
		}
		m = (_struct$4 = t.uncommonType.Method(i), new Method.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, (_struct$5 = _struct$4.Func, new Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), _struct$4.Index));
		return (_struct$6 = m, new Method.Ptr(_struct$6.Name, _struct$6.PkgPath, _struct$6.Type, (_struct$7 = _struct$6.Func, new Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), _struct$6.Index));
	};
	rtype.prototype.Method = function(i) { return this.go$val.Method(i); };
	rtype.Ptr.prototype.MethodByName = function(name) {
		var m, ok, t, tt, _tuple, _struct, _struct$1, _struct$2, _struct$3, _tuple$1, _struct$4, _struct$5, _struct$6, _struct$7;
		m = new Method.Ptr();
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			_tuple = tt.MethodByName(name), m = (_struct = _tuple[0], new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index)), ok = _tuple[1];
			return [(_struct$2 = m, new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index)), ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name), m = (_struct$4 = _tuple$1[0], new Method.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, (_struct$5 = _struct$4.Func, new Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), _struct$4.Index)), ok = _tuple$1[1];
		return [(_struct$6 = m, new Method.Ptr(_struct$6.Name, _struct$6.PkgPath, _struct$6.Type, (_struct$7 = _struct$6.Func, new Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), _struct$6.Index)), ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	rtype.Ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	rtype.Ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.go$val.Name(); };
	rtype.Ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			throw go$panic(new Go$String("reflect: ChanDir of non-chan type"));
		}
		tt = t.chanType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	rtype.Ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: IsVariadic of non-func type"));
		}
		tt = t.funcType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	rtype.Ptr.prototype.Elem = function() {
		var t, _ref, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_ref = t.Kind();
		if (_ref === 17) {
			tt = t.arrayType;
			return toType(tt.elem);
		} else if (_ref === 18) {
			tt$1 = t.chanType;
			return toType(tt$1.elem);
		} else if (_ref === 21) {
			tt$2 = t.mapType;
			return toType(tt$2.elem);
		} else if (_ref === 22) {
			tt$3 = t.ptrType;
			return toType(tt$3.elem);
		} else if (_ref === 23) {
			tt$4 = t.sliceType;
			return toType(tt$4.elem);
		}
		throw go$panic(new Go$String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.go$val.Elem(); };
	rtype.Ptr.prototype.Field = function(i) {
		var t, tt, _struct;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: Field of non-struct type"));
		}
		tt = t.structType;
		return (_struct = tt.Field(i), new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous));
	};
	rtype.prototype.Field = function(i) { return this.go$val.Field(i); };
	rtype.Ptr.prototype.FieldByIndex = function(index) {
		var t, tt, _struct;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.structType;
		return (_struct = tt.FieldByIndex(index), new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous));
	};
	rtype.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	rtype.Ptr.prototype.FieldByName = function(name) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: FieldByName of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByName(name);
	};
	rtype.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	rtype.Ptr.prototype.FieldByNameFunc = function(match) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByNameFunc(match);
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	rtype.Ptr.prototype.In = function(i) {
		var t, tt, _slice, _index;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: In of non-func type"));
		}
		tt = t.funcType;
		return toType((_slice = tt.in$2, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
	};
	rtype.prototype.In = function(i) { return this.go$val.In(i); };
	rtype.Ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			throw go$panic(new Go$String("reflect: Key of non-map type"));
		}
		tt = t.mapType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.go$val.Key(); };
	rtype.Ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			throw go$panic(new Go$String("reflect: Len of non-array type"));
		}
		tt = t.arrayType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.go$val.Len(); };
	rtype.Ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: NumField of non-struct type"));
		}
		tt = t.structType;
		return tt.fields.length;
	};
	rtype.prototype.NumField = function() { return this.go$val.NumField(); };
	rtype.Ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: NumIn of non-func type"));
		}
		tt = t.funcType;
		return tt.in$2.length;
	};
	rtype.prototype.NumIn = function() { return this.go$val.NumIn(); };
	rtype.Ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: NumOut of non-func type"));
		}
		tt = t.funcType;
		return tt.out.length;
	};
	rtype.prototype.NumOut = function() { return this.go$val.NumOut(); };
	rtype.Ptr.prototype.Out = function(i) {
		var t, tt, _slice, _index;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: Out of non-func type"));
		}
		tt = t.funcType;
		return toType((_slice = tt.out, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
	};
	rtype.prototype.Out = function(i) { return this.go$val.Out(i); };
	ChanDir.prototype.String = function() {
		var d, _ref;
		d = this.go$val;
		_ref = d;
		if (_ref === 2) {
			return "chan<-";
		} else if (_ref === 1) {
			return "<-chan";
		} else if (_ref === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	go$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.go$get()).String(); };
	interfaceType.Ptr.prototype.Method = function(i) {
		var m, t, _struct, _struct$1, _slice, _index, p, _struct$2, _struct$3;
		m = new Method.Ptr();
		t = this;
		if (i < 0 || i >= t.methods.length) {
			return (_struct = m, new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index));
		}
		p = (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		m.Name = p.name.go$get();
		if (!(go$pointerIsEqual(p.pkgPath, (go$ptrType(Go$String)).nil))) {
			m.PkgPath = p.pkgPath.go$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return (_struct$2 = m, new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index));
	};
	interfaceType.prototype.Method = function(i) { return this.go$val.Method(i); };
	interfaceType.Ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.length;
	};
	interfaceType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	interfaceType.Ptr.prototype.MethodByName = function(name) {
		var m, ok, t, _struct, _struct$1, p, _ref, _i, i, _slice, _index, _struct$2, _struct$3, _tuple, _struct$4, _struct$5, _struct$6, _struct$7;
		m = new Method.Ptr();
		ok = false;
		t = this;
		if (t === (go$ptrType(interfaceType)).nil) {
			return [(_struct = m, new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index)), ok];
		}
		p = (go$ptrType(imethod)).nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			p = (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (p.name.go$get() === name) {
				_tuple = [(_struct$2 = t.Method(i), new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index)), true], m = _tuple[0], ok = _tuple[1];
				return [(_struct$4 = m, new Method.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, (_struct$5 = _struct$4.Func, new Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), _struct$4.Index)), ok];
			}
			_i++;
		}
		return [(_struct$6 = m, new Method.Ptr(_struct$6.Name, _struct$6.PkgPath, _struct$6.Type, (_struct$7 = _struct$6.Func, new Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), _struct$6.Index)), ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var tag, i, name, qvalue, _tuple, value;
		tag = this.go$val;
		while (!(tag === "")) {
			i = 0;
			while (i < tag.length && (tag.charCodeAt(i) === 32)) {
				i = i + 1 >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34))) {
				i = i + 1 >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (i < tag.length && !((tag.charCodeAt(i) === 34))) {
				if (tag.charCodeAt(i) === 92) {
					i = i + 1 >> 0;
				}
				i = i + 1 >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue), value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	go$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.go$get()).Get(key); };
	structType.Ptr.prototype.Field = function(i) {
		var f, t, _struct, _slice, _index, p, t$1, _struct$1;
		f = new StructField.Ptr();
		t = this;
		if (i < 0 || i >= t.fields.length) {
			return (_struct = f, new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous));
		}
		p = (_slice = t.fields, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		f.Type = toType(p.typ);
		if (!(go$pointerIsEqual(p.name, (go$ptrType(Go$String)).nil))) {
			f.Name = p.name.go$get();
		} else {
			t$1 = f.Type;
			if (t$1.Kind() === 22) {
				t$1 = t$1.Elem();
			}
			f.Name = t$1.Name();
			f.Anonymous = true;
		}
		if (!(go$pointerIsEqual(p.pkgPath, (go$ptrType(Go$String)).nil))) {
			f.PkgPath = p.pkgPath.go$get();
		}
		if (!(go$pointerIsEqual(p.tag, (go$ptrType(Go$String)).nil))) {
			f.Tag = p.tag.go$get();
		}
		f.Offset = p.offset;
		f.Index = new (go$sliceType(Go$Int))([i]);
		return (_struct$1 = f, new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous));
	};
	structType.prototype.Field = function(i) { return this.go$val.Field(i); };
	structType.Ptr.prototype.FieldByIndex = function(index) {
		var f, t, _ref, _i, _slice, _index, x, i, ft, _struct, _struct$1;
		f = new StructField.Ptr();
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				ft = f.Type;
				if ((ft.Kind() === 22) && (ft.Elem().Kind() === 25)) {
					ft = ft.Elem();
				}
				f.Type = ft;
			}
			f = (_struct = f.Type.Field(x), new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous));
			_i++;
		}
		return (_struct$1 = f, new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous));
	};
	structType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	structType.Ptr.prototype.FieldByNameFunc = function(match) {
		var result, ok, t, current, next, nextCount, _map, _key, visited, _tuple, count, _ref, _i, _slice, _index, _struct, scan, t$1, _entry, _key$1, _ref$1, _i$1, i, _slice$1, _index$1, f, fname, ntyp, _entry$1, _tuple$1, _struct$1, _struct$2, styp, _entry$2, _key$2, _map$1, _key$3, _key$4, _entry$3, _key$5, index, _struct$3;
		result = new StructField.Ptr();
		ok = false;
		t = this;
		current = new (go$sliceType(fieldScan))([]);
		next = new (go$sliceType(fieldScan))([new fieldScan.Ptr(t, (go$sliceType(Go$Int)).nil)]);
		nextCount = false;
		visited = (_map = new Go$Map(), _map);
		while (next.length > 0) {
			_tuple = [next, go$subslice(current, 0, 0)], current = _tuple[0], next = _tuple[1];
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			while (_i < _ref.length) {
				scan = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new fieldScan.Ptr(_struct.typ, _struct.index));
				t$1 = scan.typ;
				if ((_entry = visited[t$1.go$key()], _entry !== undefined ? _entry.v : false)) {
					_i++;
					continue;
				}
				_key$1 = t$1, (visited || go$throwRuntimeError("assignment to entry in nil map"))[_key$1.go$key()] = { k: _key$1, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					i = _i$1;
					f = (_slice$1 = t$1.fields, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					fname = "";
					ntyp = (go$ptrType(rtype)).nil;
					if (!(go$pointerIsEqual(f.name, (go$ptrType(Go$String)).nil))) {
						fname = f.name.go$get();
					} else {
						ntyp = f.typ;
						if (ntyp.Kind() === 22) {
							ntyp = ntyp.Elem().common();
						}
						fname = ntyp.Name();
					}
					if (match(fname)) {
						if ((_entry$1 = count[t$1.go$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tuple$1 = [new StructField.Ptr("", "", null, "", 0, (go$sliceType(Go$Int)).nil, false), false], result = _tuple$1[0], ok = _tuple$1[1];
							return [(_struct$1 = result, new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous)), ok];
						}
						result = (_struct$2 = t$1.Field(i), new StructField.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, _struct$2.Tag, _struct$2.Offset, _struct$2.Index, _struct$2.Anonymous));
						result.Index = (go$sliceType(Go$Int)).nil;
						result.Index = go$appendSlice(result.Index, scan.index);
						result.Index = go$append(result.Index, i);
						ok = true;
						_i$1++;
						continue;
					}
					if (ok || ntyp === (go$ptrType(rtype)).nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						continue;
					}
					styp = ntyp.structType;
					if ((_entry$2 = nextCount[styp.go$key()], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$2 = styp, (nextCount || go$throwRuntimeError("assignment to entry in nil map"))[_key$2.go$key()] = { k: _key$2, v: 2 };
						_i$1++;
						continue;
					}
					if (nextCount === false) {
						nextCount = (_map$1 = new Go$Map(), _map$1);
					}
					_key$4 = styp, (nextCount || go$throwRuntimeError("assignment to entry in nil map"))[_key$4.go$key()] = { k: _key$4, v: 1 };
					if ((_entry$3 = count[t$1.go$key()], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$5 = styp, (nextCount || go$throwRuntimeError("assignment to entry in nil map"))[_key$5.go$key()] = { k: _key$5, v: 2 };
					}
					index = (go$sliceType(Go$Int)).nil;
					index = go$appendSlice(index, scan.index);
					index = go$append(index, i);
					next = go$append(next, new fieldScan.Ptr(styp, index));
					_i$1++;
				}
				_i++;
			}
			if (ok) {
				break;
			}
		}
		return [(_struct$3 = result, new StructField.Ptr(_struct$3.Name, _struct$3.PkgPath, _struct$3.Type, _struct$3.Tag, _struct$3.Offset, _struct$3.Index, _struct$3.Anonymous)), ok];
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	structType.Ptr.prototype.FieldByName = function(name) {
		var f, present, t, hasAnon, _ref, _i, i, _slice, _index, tf, _struct, _tuple, _struct$1, _struct$2, _tuple$1, _struct$3, _struct$4;
		f = new StructField.Ptr();
		present = false;
		t = this;
		hasAnon = false;
		if (!(name === "")) {
			_ref = t.fields;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				tf = (_slice = t.fields, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (go$pointerIsEqual(tf.name, (go$ptrType(Go$String)).nil)) {
					hasAnon = true;
					_i++;
					continue;
				}
				if (tf.name.go$get() === name) {
					_tuple = [(_struct = t.Field(i), new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous)), true], f = _tuple[0], present = _tuple[1];
					return [(_struct$1 = f, new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous)), present];
				}
				_i++;
			}
		}
		if (!hasAnon) {
			return [(_struct$2 = f, new StructField.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, _struct$2.Tag, _struct$2.Offset, _struct$2.Index, _struct$2.Anonymous)), present];
		}
		_tuple$1 = t.FieldByNameFunc((function(s) {
			return s === name;
		})), f = (_struct$3 = _tuple$1[0], new StructField.Ptr(_struct$3.Name, _struct$3.PkgPath, _struct$3.Type, _struct$3.Tag, _struct$3.Offset, _struct$3.Index, _struct$3.Anonymous)), present = _tuple$1[1];
		return [(_struct$4 = f, new StructField.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, _struct$4.Tag, _struct$4.Offset, _struct$4.Index, _struct$4.Anonymous)), present];
	};
	structType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	TypeOf = go$pkg.TypeOf = function(i) {
			if (i === null) {
				return null;
			}
			if (i.constructor.kind === undefined) { // js.Object
				return Go$String.reflectType();
			}
			return i.constructor.reflectType();
		};
	PtrTo = go$pkg.PtrTo = function(t) {
		return (t !== null && t.constructor === (go$ptrType(rtype)) ? t.go$val : go$typeAssertionFailed(t, (go$ptrType(rtype)))).ptrTo();
	};
	rtype.Ptr.prototype.ptrTo = function() {
			return go$ptrType(this.jsType).reflectType();
		};
	rtype.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	rtype.Ptr.prototype.Implements = function(u) {
		var t;
		t = this;
		if (go$interfaceIsEqual(u, null)) {
			throw go$panic(new Go$String("reflect: nil type passed to Type.Implements"));
		}
		if (!((u.Kind() === 20))) {
			throw go$panic(new Go$String("reflect: non-interface type passed to Type.Implements"));
		}
		return implements$1((u !== null && u.constructor === (go$ptrType(rtype)) ? u.go$val : go$typeAssertionFailed(u, (go$ptrType(rtype)))), t);
	};
	rtype.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	rtype.Ptr.prototype.AssignableTo = function(u) {
		var t, uu;
		t = this;
		if (go$interfaceIsEqual(u, null)) {
			throw go$panic(new Go$String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = (u !== null && u.constructor === (go$ptrType(rtype)) ? u.go$val : go$typeAssertionFailed(u, (go$ptrType(rtype))));
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	rtype.Ptr.prototype.ConvertibleTo = function(u) {
		var t, uu;
		t = this;
		if (go$interfaceIsEqual(u, null)) {
			throw go$panic(new Go$String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = (u !== null && u.constructor === (go$ptrType(rtype)) ? u.go$val : go$typeAssertionFailed(u, (go$ptrType(rtype))));
		return !(convertOp(uu, t) === go$throwNilPointerError);
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var t, v, i, j, _slice, _index, tm, _slice$1, _index$1, vm, v$1, i$1, j$1, _slice$2, _index$2, tm$1, _slice$3, _index$3, vm$1;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.interfaceType;
		if (t.methods.length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.interfaceType;
			i = 0;
			j = 0;
			while (j < v.methods.length) {
				tm = (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				vm = (_slice$1 = v.methods, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				if (go$pointerIsEqual(vm.name, tm.name) && go$pointerIsEqual(vm.pkgPath, tm.pkgPath) && vm.typ === tm.typ) {
					if (i = i + 1 >> 0, i >= t.methods.length) {
						return true;
					}
				}
				j = j + 1 >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === (go$ptrType(uncommonType)).nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (j$1 < v$1.methods.length) {
			tm$1 = (_slice$2 = t.methods, _index$2 = i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			vm$1 = (_slice$3 = v$1.methods, _index$3 = j$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			if (go$pointerIsEqual(vm$1.name, tm$1.name) && go$pointerIsEqual(vm$1.pkgPath, tm$1.pkgPath) && vm$1.mtyp === tm$1.typ) {
				if (i$1 = i$1 + 1 >> 0, i$1 >= t.methods.length) {
					return true;
				}
			}
			j$1 = j$1 + 1 >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var kind, _ref, t, v, _ref$1, _i, _slice, _index, typ, i, _slice$1, _index$1, _ref$2, _i$1, _slice$2, _index$2, typ$1, i$1, _slice$3, _index$3, t$1, v$1, t$2, v$2, _ref$3, _i$2, i$2, _slice$4, _index$4, tf, _slice$5, _index$5, vf;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_ref = kind;
		if (_ref === 17) {
			return go$interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_ref === 18) {
			if ((V.ChanDir() === 3) && go$interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && go$interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 19) {
			t = T.funcType;
			v = V.funcType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.length === v.in$2.length)) || !((t.out.length === v.out.length))) {
				return false;
			}
			_ref$1 = t.in$2;
			_i = 0;
			while (_i < _ref$1.length) {
				typ = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (!(typ === (_slice$1 = v.in$2, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))) {
					return false;
				}
				_i++;
			}
			_ref$2 = t.out;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				typ$1 = (_slice$2 = _ref$2, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				i$1 = _i$1;
				if (!(typ$1 === (_slice$3 = v.out, _index$3 = i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref === 20) {
			t$1 = T.interfaceType;
			v$1 = V.interfaceType;
			if ((t$1.methods.length === 0) && (v$1.methods.length === 0)) {
				return true;
			}
			return false;
		} else if (_ref === 21) {
			return go$interfaceIsEqual(T.Key(), V.Key()) && go$interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 22 || _ref === 23) {
			return go$interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 25) {
			t$2 = T.structType;
			v$2 = V.structType;
			if (!((t$2.fields.length === v$2.fields.length))) {
				return false;
			}
			_ref$3 = t$2.fields;
			_i$2 = 0;
			while (_i$2 < _ref$3.length) {
				i$2 = _i$2;
				tf = (_slice$4 = t$2.fields, _index$4 = i$2, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
				vf = (_slice$5 = v$2.fields, _index$5 = i$2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
				if (!(go$pointerIsEqual(tf.name, vf.name)) && (go$pointerIsEqual(tf.name, (go$ptrType(Go$String)).nil) || go$pointerIsEqual(vf.name, (go$ptrType(Go$String)).nil) || !(tf.name.go$get() === vf.name.go$get()))) {
					return false;
				}
				if (!(go$pointerIsEqual(tf.pkgPath, vf.pkgPath)) && (go$pointerIsEqual(tf.pkgPath, (go$ptrType(Go$String)).nil) || go$pointerIsEqual(vf.pkgPath, (go$ptrType(Go$String)).nil) || !(tf.pkgPath.go$get() === vf.pkgPath.go$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!(go$pointerIsEqual(tf.tag, vf.tag)) && (go$pointerIsEqual(tf.tag, (go$ptrType(Go$String)).nil) || go$pointerIsEqual(vf.tag, (go$ptrType(Go$String)).nil) || !(tf.tag.go$get() === vf.tag.go$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	SliceOf = go$pkg.SliceOf = function(t) {
			return go$sliceType(t.jsType).reflectType();
		};
	toType = function(t) {
		if (t === (go$ptrType(rtype)).nil) {
			return null;
		}
		return t;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.go$val;
		return (((((f >>> 4 >>> 0)) & 31) >>> 0) >>> 0);
	};
	go$ptrType(flag).prototype.kind = function() { return new flag(this.go$get()).kind(); };
	ValueError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + (new Kind(e.Kind)).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.go$val.Error(); };
	methodName = function() {
			return "?FIXME?";
		};
	Value.Ptr.prototype.iword = function() {
			if ((this.flag & flagIndir) !== 0 && this.typ.Kind() !== Array && this.typ.Kind() !== Struct) {
				return this.val.go$get();
			}
			return this.val;
		};
	Value.prototype.iword = function() { return this.go$val.iword(); };
	flag.prototype.mustBe = function(expected) {
		var f, k;
		f = this.go$val;
		k = (new flag(f)).kind();
		if (!((k === expected))) {
			throw go$panic(new ValueError.Ptr(methodName(), k));
		}
	};
	go$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.go$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.go$val;
		if (f === 0) {
			throw go$panic(new ValueError.Ptr(methodName(), 0));
		}
		if (!((((f & 1) >>> 0) === 0))) {
			throw go$panic(new Go$String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	go$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.go$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.go$val;
		if (f === 0) {
			throw go$panic(new ValueError.Ptr(methodName(), 0));
		}
		if (!((((f & 1) >>> 0) === 0))) {
			throw go$panic(new Go$String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 4) >>> 0) === 0) {
			throw go$panic(new Go$String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	go$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.go$get()).mustBeAssignable(); };
	Value.Ptr.prototype.Addr = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (((v.flag & 4) >>> 0) === 0) {
			throw go$panic(new Go$String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.Ptr(v.typ.ptrTo(), v.val, ((((v.flag & 1) >>> 0)) | 352) >>> 0);
	};
	Value.prototype.Addr = function() { return this.go$val.Addr(); };
	Value.Ptr.prototype.Bool = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(1);
		if (!((((v.flag & 2) >>> 0) === 0))) {
			return v.val.go$get();
		}
		return v.val;
	};
	Value.prototype.Bool = function() { return this.go$val.Bool(); };
	Value.Ptr.prototype.Bytes = function() {
			this.mustBe(Slice);
			if (this.typ.Elem().Kind() !== Uint8) {
				throw go$panic(new Go$String("reflect.Value.Bytes of non-byte slice"));
			}
			return this.iword();
		};
	Value.prototype.Bytes = function() { return this.go$val.Bytes(); };
	Value.Ptr.prototype.runes = function() {
			this.mustBe(Slice);
			if (this.typ.Elem().Kind() !== Int32) {
				throw new go$panic(new Go$String("reflect.Value.Bytes of non-rune slice"));
			}
			return this.iword();
		};
	Value.prototype.runes = function() { return this.go$val.runes(); };
	Value.Ptr.prototype.CanAddr = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		return !((((v.flag & 4) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.go$val.CanAddr(); };
	Value.Ptr.prototype.CanSet = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		return ((v.flag & 5) >>> 0) === 4;
	};
	Value.prototype.CanSet = function() { return this.go$val.CanSet(); };
	Value.Ptr.prototype.Call = function(in$1) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(19);
		(new flag(v.flag)).mustBeExported();
		return v.call("Call", in$1);
	};
	Value.prototype.Call = function(in$1) { return this.go$val.Call(in$1); };
	Value.Ptr.prototype.CallSlice = function(in$1) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(19);
		(new flag(v.flag)).mustBeExported();
		return v.call("CallSlice", in$1);
	};
	Value.prototype.CallSlice = function(in$1) { return this.go$val.CallSlice(in$1); };
	Value.Ptr.prototype.call = function(op, args) {
			var t = this.typ, fn, rcvr;

			if ((this.flag & flagMethod) !== 0) {
				var tuple = methodReceiver(op, this, this.flag >> flagMethodShift);
				t = tuple[0];
				fn = tuple[1];
				rcvr = tuple[2];
			} else {
				fn = this.iword();
			}

			if (fn === go$throwNilPointerError) {
				throw go$panic(new Go$String("reflect.Value.Call: call of nil function"));
			}

			var isSlice = (op === "CallSlice");
			var n = t.NumIn();
			if (isSlice) {
				if (!t.IsVariadic()) {
					throw go$panic(new Go$String("reflect: CallSlice of non-variadic function"));
				}
				if (args.length < n) {
					throw go$panic(new Go$String("reflect: CallSlice with too few input arguments"));
				}
				if (args.length > n) {
					throw go$panic(new Go$String("reflect: CallSlice with too many input arguments"));
				}
			} else {
				if (t.IsVariadic()) {
					n--;
				}
				if (args.length < n) {
					throw go$panic(new Go$String("reflect: Call with too few input arguments"));
				}
				if (!t.IsVariadic() && args.length > n) {
					throw go$panic(new Go$String("reflect: Call with too many input arguments"));
				}
			}
			var i;
			for (i = 0; i < args.length; i++) {
				if (args.array[args.offset + i].Kind() === Invalid) {
					throw go$panic(new Go$String("reflect: " + op + " using zero Value argument"));
				}
			}
			for (i = 0; i < n; i++) {
				var xt = args.array[args.offset + i].Type(), targ = t.In(i);
				if (!xt.AssignableTo(targ)) {
					throw go$panic(new Go$String("reflect: " + op + " using " + xt.String() + " as type " + targ.String()));
				}
			}
			if (!isSlice && t.IsVariadic()) {
				var m = args.length - n;
				var slice = MakeSlice(t.In(n), m, m);
				var elem = t.In(n).Elem();
				for (i = 0; i < m; i++) {
					var x = args.array[args.offset + n + i];
					var xt = x.Type();
					if (!xt.AssignableTo(elem)) {
						throw go$panic(new Go$String("reflect: cannot use " + xt.String() + " as type " + elem.String() + " in " + op));
					}
					slice.Index(i).Set(x);
				}
				args = new (go$sliceType(Value))(go$sliceToArray(args).slice(0, n).concat([slice]));
			}

			if (args.length !== t.NumIn()) {
				throw go$panic(new Go$String("reflect.Value.Call: wrong argument count"));
			}

			var argsArray = new Go$Array(t.NumIn());
			for (i = 0; i < t.NumIn(); i++) {
				argsArray[i] = args.array[args.offset + i].assignTo("reflect.Value.Call", t.In(i), go$ptrType(go$emptyInterface).nil).iword();
			}
			var results = fn.apply(rcvr, argsArray);
			if (t.NumOut() === 0) {
				results = [];
			} else if (t.NumOut() === 1) {
				results = [results];
			}
			for (i = 0; i < t.NumOut(); i++) {
				var typ = t.Out(i);
				var flag = typ.Kind() << flagKindShift;
				results[i] = new Value.Ptr(typ, results[i], flag);
			}
			return new (go$sliceType(Value))(results);
		};
	Value.prototype.call = function() { return this.go$val.call(); };
	methodReceiver = function(op, v, i) {
			var m, t;
			if (v.typ.Kind() === Interface) {
				var tt = v.typ.interfaceType;
				if (i < 0 || i >= tt.methods.length) {
					throw go$panic(new Go$String("reflect: internal error: invalid method index"));
				}
				if (v.IsNil()) {
					throw go$panic(new Go$String("reflect: " + op + " of method on nil interface value"));
				}
				m = tt.methods.array[i];
				t = m.typ;
			} else {
				var ut = v.typ.uncommon();
				if (ut === uncommonType.Ptr.nil || i < 0 || i >= ut.methods.length) {
					throw go$panic(new Go$String("reflect: internal error: invalid method index"));
				}
				m = ut.methods.array[i];
				t = m.mtyp;
			}
			if (m.pkgPath.go$get !== go$throwNilPointerError) {
				throw go$panic(new Go$String("reflect: " + op + " of unexported method"));
			}
			var name = m.name.go$get()
			if (go$reservedKeywords.indexOf(name) !== -1) {
				name += "$";
			}
			var rcvr = v.iword();
			if (isWrapped(v.typ)) {
				rcvr = new v.typ.jsType(rcvr);
			}
			return [t, rcvr[name], rcvr];
		};
	Value.Ptr.prototype.Cap = function() {
			var k = this.kind();
			switch (k) {
			case Slice:
				return this.iword().capacity;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Cap", k));
		};
	Value.prototype.Cap = function() { return this.go$val.Cap(); };
	Value.Ptr.prototype.Close = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		chanclose(v.iword());
	};
	Value.prototype.Close = function() { return this.go$val.Close(); };
	Value.Ptr.prototype.Complex = function() {
			return this.iword();
		};
	Value.prototype.Complex = function() { return this.go$val.Complex(); };
	Value.Ptr.prototype.Elem = function() {
			switch (this.kind()) {
			case Interface:
				var val = this.iword();
				if (val === null) {
					return new Value.Ptr();
				}
				if (val.constructor.kind === undefined) { // js.Object
					return new Value.Ptr(Go$String.reflectType(), go$toString(val), String << flagKindShift);
				}
				var typ = val.constructor.reflectType();
				var fl = this.flag & flagRO;
				fl |= typ.Kind() << flagKindShift;
				return new Value.Ptr(typ, val.go$val, fl);

			case Ptr:
				var val = this.iword();
				if (this.IsNil()) {
					return new Value.Ptr();
				}
				var tt = this.typ.ptrType;
				var fl = (this.flag & flagRO) | flagIndir | flagAddr;
				fl |= tt.elem.Kind() << flagKindShift;
				return new Value.Ptr(tt.elem, val, fl);
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Elem", this.kind()));
		};
	Value.prototype.Elem = function() { return this.go$val.Elem(); };
	Value.Ptr.prototype.Field = function(i) {
			this.mustBe(Struct);
			var tt = this.typ.structType;
			if (i < 0 || i >= tt.fields.length) {
				throw go$panic(new Go$String("reflect: Field index out of range"));
			}
			var field = tt.fields.array[i];
			var name = fieldName(field, i);
			var typ = field.typ;
			var fl = this.flag & (flagRO | flagIndir | flagAddr);
			if (field.pkgPath.go$get !== go$throwNilPointerError) {
				fl |= flagRO;
			}
			fl |= typ.Kind() << flagKindShift;
			if ((this.flag & flagIndir) !== 0 && typ.Kind() !== Array && typ.Kind() !== Struct) {
				var struct = this.val;
				return new Value.Ptr(typ, new (go$ptrType(typ.jsType))(function() { return struct[name]; }, function(v) { struct[name] = v; }), fl);
			}
			return new Value.Ptr(typ, this.val[name], fl);
		};
	Value.prototype.Field = function() { return this.go$val.Field(); };
	Value.Ptr.prototype.FieldByIndex = function(index) {
		var _struct, v, _ref, _i, _slice, _index, x, i, _struct$1, _struct$2, _struct$3;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(25);
		_ref = index;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				if ((v.Kind() === 22) && (v.Elem().Kind() === 25)) {
					v = (_struct$1 = v.Elem(), new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
				}
			}
			v = (_struct$2 = v.Field(x), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			_i++;
		}
		return (_struct$3 = v, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
	};
	Value.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	Value.Ptr.prototype.FieldByName = function(name) {
		var _struct, v, ok, _tuple, _struct$1, f, _struct$2;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(25);
		if (_tuple = v.typ.FieldByName(name), f = (_struct$1 = _tuple[0], new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous)), ok = _tuple[1], ok) {
			return (_struct$2 = v.FieldByIndex(f.Index), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
	};
	Value.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	Value.Ptr.prototype.FieldByNameFunc = function(match) {
		var _struct, v, ok, _tuple, _struct$1, f, _struct$2;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(25);
		if (_tuple = v.typ.FieldByNameFunc(match), f = (_struct$1 = _tuple[0], new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous)), ok = _tuple[1], ok) {
			return (_struct$2 = v.FieldByIndex(f.Index), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	Value.Ptr.prototype.Float = function() {
		var _struct, v, k, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 13) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return go$float32frombits(go$float32bits(v.val.go$get()));
			}
			return go$float32frombits(go$float32bits(v.val));
		} else if (_ref === 14) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return v.val.go$get();
			}
			return v.val;
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.Float", k));
	};
	Value.prototype.Float = function() { return this.go$val.Float(); };
	Value.Ptr.prototype.Index = function(i) {
			var k = this.kind();
			switch (k) {
			case Array:
				var tt = this.typ.arrayType;
				if (i < 0 || i >= tt.len) {
					throw go$panic(new Go$String("reflect: array index out of range"));
				}
				var typ = tt.elem;
				var fl = this.flag & (flagRO | flagIndir | flagAddr);
				fl |= typ.Kind() << flagKindShift;
				if ((this.flag & flagIndir) !== 0 && typ.Kind() !== Array && typ.Kind() !== Struct) {
					var array = this.val;
					return new Value.Ptr(typ, new (go$ptrType(typ.jsType))(function() { return array[i]; }, function(v) { array[i] = v; }), fl);
				}
				return new Value.Ptr(typ, this.iword()[i], fl);
			case Slice:
				if (i < 0 || i >= this.iword().length) {
					throw go$panic(new Go$String("reflect: slice index out of range"));
				}
				var typ = this.typ.sliceType.elem;
				var fl = flagAddr | flagIndir | (this.flag & flagRO);
				fl |= typ.Kind() << flagKindShift;
				i += this.iword().offset;
				var array = this.iword().array;
				if (typ.Kind() === Struct) {
					return new Value.Ptr(typ, array[i], fl);
				}
				return new Value.Ptr(typ, new (go$ptrType(typ.jsType))(function() { return array[i]; }, function(v) { array[i] = v; }), fl);
			case String:
				var string = this.iword();
				if (i < 0 || i >= string.length) {
					throw go$panic(new Go$String("reflect: string index out of range"));
				}
				var fl = (this.flag & flagRO) | (Uint8 << flagKindShift);
				return new Value.Ptr(uint8Type, string.charCodeAt(i), fl);
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Index", k));
		};
	Value.prototype.Index = function() { return this.go$val.Index(); };
	Value.Ptr.prototype.Int = function() {
		var _struct, v, k, p, v$1, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		p = 0;
		if (!((((v.flag & 2) >>> 0) === 0))) {
			p = v.val;
		} else {
			p = new (go$ptrType(Go$UnsafePointer))(function() { return v.val; }, function(v$1) { v.val = v$1; });
		}
		_ref = k;
		if (_ref === 2) {
			return new Go$Int64(0, p.go$get());
		} else if (_ref === 3) {
			return new Go$Int64(0, p.go$get());
		} else if (_ref === 4) {
			return new Go$Int64(0, p.go$get());
		} else if (_ref === 5) {
			return new Go$Int64(0, p.go$get());
		} else if (_ref === 6) {
			return p.go$get();
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.Int", k));
	};
	Value.prototype.Int = function() { return this.go$val.Int(); };
	Value.Ptr.prototype.CanInterface = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.flag === 0) {
			throw go$panic(new ValueError.Ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 1) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.go$val.CanInterface(); };
	Value.Ptr.prototype.Interface = function() {
		var i, _struct, v, _struct$1;
		i = null;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		i = valueInterface((_struct$1 = v, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), true);
		return i;
	};
	Value.prototype.Interface = function() { return this.go$val.Interface(); };
	valueInterface = function(v, safe) {
			if (v.flag === 0) {
				throw go$panic(new ValueError.Ptr("reflect.Value.Interface", 0));
			}
			if (safe && (v.flag & flagRO) !== 0) {
				throw go$panic(new Go$String("reflect.Value.Interface: cannot return value obtained from unexported field or method"))
			}
			if ((v.flag & flagMethod) !== 0) {
				v = makeMethodValue("Interface", v);
			}
			if (isWrapped(v.typ)) {
				return new v.typ.jsType(v.iword());
			}
			return v.iword();
		};
	Value.Ptr.prototype.InterfaceData = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(20);
		return go$mapArray(v.val, function(entry) { return entry; });
	};
	Value.prototype.InterfaceData = function() { return this.go$val.InterfaceData(); };
	Value.Ptr.prototype.IsNil = function() {
			switch (this.kind()) {
			case Chan:
			case Ptr:
			case Slice:
				return this.iword() === this.typ.jsType.nil;
			case Func:
				return this.iword() === go$throwNilPointerError;
			case Map:
				return this.iword() === false;
			case Interface:
				return this.iword() === null;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.IsNil", this.kind()));
		};
	Value.prototype.IsNil = function() { return this.go$val.IsNil(); };
	Value.Ptr.prototype.IsValid = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.go$val.IsValid(); };
	Value.Ptr.prototype.Kind = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		return (new flag(v.flag)).kind();
	};
	Value.prototype.Kind = function() { return this.go$val.Kind(); };
	Value.Ptr.prototype.Len = function() {
			var k = this.kind();
			switch (k) {
			case Array:
			case Slice:
			case String:
				return this.iword().length;
			case Map:
				return go$keys(this.iword()).length;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Len", k));
		};
	Value.prototype.Len = function() { return this.go$val.Len(); };
	Value.Ptr.prototype.MapIndex = function(key) {
		var _struct, v, tt, _struct$1, _tuple, word, ok, typ, fl;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(21);
		tt = v.typ.mapType;
		key = (_struct$1 = key.assignTo("reflect.Value.MapIndex", tt.key, (go$ptrType(go$emptyInterface)).nil), new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		_tuple = mapaccess(v.typ, v.iword(), key.iword()), word = _tuple[0], ok = _tuple[1];
		if (!ok) {
			return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 1) >>> 0;
		if (typ.size > 4) {
			fl = (fl | 2) >>> 0;
		}
		fl = (fl | (((typ.Kind() >>> 0) << 4 >>> 0))) >>> 0;
		return new Value.Ptr(typ, word, fl);
	};
	Value.prototype.MapIndex = function(key) { return this.go$val.MapIndex(key); };
	Value.Ptr.prototype.MapKeys = function() {
		var _struct, v, tt, keyType, fl, m, mlen, it, a, i, _tuple, keyWord, ok, _slice, _index;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(21);
		tt = v.typ.mapType;
		keyType = tt.key;
		fl = (v.flag & 1) >>> 0;
		fl = (fl | (((keyType.Kind() >>> 0) << 4 >>> 0))) >>> 0;
		if (keyType.size > 4) {
			fl = (fl | 2) >>> 0;
		}
		m = v.iword();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = (go$sliceType(Value)).make(mlen, 0, function() { return new Value.Ptr(); });
		i = 0;
		i = 0;
		while (i < a.length) {
			_tuple = mapiterkey(it), keyWord = _tuple[0], ok = _tuple[1];
			if (!ok) {
				break;
			}
			_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = new Value.Ptr(keyType, keyWord, fl)) : go$throwRuntimeError("index out of range");
			mapiternext(it);
			i = i + 1 >> 0;
		}
		return go$subslice(a, 0, i);
	};
	Value.prototype.MapKeys = function() { return this.go$val.MapKeys(); };
	Value.Ptr.prototype.Method = function(i) {
		var _struct, v, fl;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.typ === (go$ptrType(rtype)).nil) {
			throw go$panic(new ValueError.Ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0)) || i < 0 || i >= v.typ.NumMethod()) {
			throw go$panic(new Go$String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			throw go$panic(new Go$String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 3) >>> 0;
		fl = (fl | 304) >>> 0;
		fl = (fl | (((((i >>> 0) << 9 >>> 0) | 8) >>> 0))) >>> 0;
		return new Value.Ptr(v.typ, v.val, fl);
	};
	Value.prototype.Method = function(i) { return this.go$val.Method(i); };
	Value.Ptr.prototype.NumMethod = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.typ === (go$ptrType(rtype)).nil) {
			throw go$panic(new ValueError.Ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	Value.Ptr.prototype.MethodByName = function(name) {
		var _struct, v, _tuple, _struct$1, _struct$2, m, ok, _struct$3;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.typ === (go$ptrType(rtype)).nil) {
			throw go$panic(new ValueError.Ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
		}
		_tuple = v.typ.MethodByName(name), m = (_struct$1 = _tuple[0], new Method.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, (_struct$2 = _struct$1.Func, new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), _struct$1.Index)), ok = _tuple[1];
		if (!ok) {
			return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
		}
		return (_struct$3 = v.Method(m.Index), new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
	};
	Value.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	Value.Ptr.prototype.NumField = function() {
		var _struct, v, tt;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(25);
		tt = v.typ.structType;
		return tt.fields.length;
	};
	Value.prototype.NumField = function() { return this.go$val.NumField(); };
	Value.Ptr.prototype.OverflowComplex = function(x) {
		var _struct, v, k, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 15) {
			return overflowFloat32(x.real) || overflowFloat32(x.imag);
		} else if (_ref === 16) {
			return false;
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.OverflowComplex", k));
	};
	Value.prototype.OverflowComplex = function(x) { return this.go$val.OverflowComplex(x); };
	Value.Ptr.prototype.OverflowFloat = function(x) {
		var _struct, v, k, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 13) {
			return overflowFloat32(x);
		} else if (_ref === 14) {
			return false;
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.OverflowFloat", k));
	};
	Value.prototype.OverflowFloat = function(x) { return this.go$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.Ptr.prototype.OverflowInt = function(x) {
		var _struct, v, k, _ref, x$1, x$2, bitSize, trunc;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			bitSize = (x$1 = v.typ.size, x$2 = 8, (((x$1 >>> 16 << 16) * x$2 >>> 0) + (x$1 << 16 >>> 16) * x$2) >>> 0);
			trunc = go$shiftRightInt64((go$shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.high === trunc.high && x.low === trunc.low));
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.OverflowInt", k));
	};
	Value.prototype.OverflowInt = function(x) { return this.go$val.OverflowInt(x); };
	Value.Ptr.prototype.OverflowUint = function(x) {
		var _struct, v, k, _ref, x$1, x$2, bitSize, trunc;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {
			bitSize = (x$1 = v.typ.size, x$2 = 8, (((x$1 >>> 16 << 16) * x$2 >>> 0) + (x$1 << 16 >>> 16) * x$2) >>> 0);
			trunc = go$shiftRightUint64((go$shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.high === trunc.high && x.low === trunc.low));
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.OverflowUint", k));
	};
	Value.prototype.OverflowUint = function(x) { return this.go$val.OverflowUint(x); };
	Value.Ptr.prototype.Pointer = function() {
			var k = this.kind();
			switch (k) {
			case Chan:
			case Map:
			case Ptr:
			case Slice:
			case UnsafePointer:
				if (this.IsNil()) {
					return 0;
				}
				return this.iword();
			case Func:
				if (this.IsNil()) {
					return 0;
				}
				return 1;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Pointer", k));
		};
	Value.prototype.Pointer = function() { return this.go$val.Pointer(); };
	Value.Ptr.prototype.Recv = function() {
		var x, ok, _struct, v, _tuple, _struct$1, _struct$2;
		x = new Value.Ptr();
		ok = false;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		_tuple = v.recv(false), x = (_struct$1 = _tuple[0], new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), ok = _tuple[1];
		return [(_struct$2 = x, new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), ok];
	};
	Value.prototype.Recv = function() { return this.go$val.Recv(); };
	Value.Ptr.prototype.recv = function(nb) {
		var val, ok, _struct, v, tt, _tuple, word, selected, typ, fl, _struct$1;
		val = new Value.Ptr();
		ok = false;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 1) === 0) {
			throw go$panic(new Go$String("reflect: recv on send-only channel"));
		}
		_tuple = chanrecv(v.typ, v.iword(), nb), word = _tuple[0], selected = _tuple[1], ok = _tuple[2];
		if (selected) {
			typ = tt.elem;
			fl = (typ.Kind() >>> 0) << 4 >>> 0;
			if (typ.size > 4) {
				fl = (fl | 2) >>> 0;
			}
			val = new Value.Ptr(typ, word, fl);
		}
		return [(_struct$1 = val, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), ok];
	};
	Value.prototype.recv = function(nb) { return this.go$val.recv(nb); };
	Value.Ptr.prototype.Send = function(x) {
		var _struct, v, _struct$1;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		v.send((_struct$1 = x, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), false);
	};
	Value.prototype.Send = function(x) { return this.go$val.Send(x); };
	Value.Ptr.prototype.send = function(x, nb) {
		var selected, _struct, v, tt, _struct$1;
		selected = false;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 2) === 0) {
			throw go$panic(new Go$String("reflect: send on recv-only channel"));
		}
		(new flag(x.flag)).mustBeExported();
		x = (_struct$1 = x.assignTo("reflect.Value.Send", tt.elem, (go$ptrType(go$emptyInterface)).nil), new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		selected = chansend(v.typ, v.iword(), x.iword(), nb);
		return selected;
	};
	Value.prototype.send = function(x, nb) { return this.go$val.send(x, nb); };
	Value.Ptr.prototype.Set = function(x) {
			this.mustBeAssignable();
			x.mustBeExported();
			if ((this.flag & flagIndir) !== 0) {
				switch (this.typ.Kind()) {
				case Array:
					go$copyArray(this.val, x.val);
					return;
				case Interface:
					this.val.go$set(valueInterface(x, false));
					return;
				case Struct:
					copyStruct(this.val, x.val, this.typ);
					return;
				default:
					this.val.go$set(x.iword());
					return;
				}
			}
			this.val = x.val;
		};
	Value.prototype.Set = function() { return this.go$val.Set(); };
	Value.Ptr.prototype.SetBool = function(x) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(1);
		v.val.go$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.go$val.SetBool(x); };
	Value.Ptr.prototype.SetBytes = function(x) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			throw go$panic(new Go$String("reflect.Value.SetBytes of non-byte slice"));
		}
		v.val.go$set(x);
	};
	Value.prototype.SetBytes = function(x) { return this.go$val.SetBytes(x); };
	Value.Ptr.prototype.SetComplex = function(x) {
			this.mustBeAssignable();
			var k = this.kind();
			switch (k) {
			case Complex64:
			case Complex128:
				this.val.go$set(new this.typ.jsType(x.real, x.imag));
				return;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.SetComplex", k));
		};
	Value.prototype.SetComplex = function() { return this.go$val.SetComplex(); };
	Value.Ptr.prototype.SetFloat = function(x) {
		var _struct, v, k, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 13) {
			v.val.go$set(x);
		} else if (_ref === 14) {
			v.val.go$set(x);
		} else {
			throw go$panic(new ValueError.Ptr("reflect.Value.SetFloat", k));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.go$val.SetFloat(x); };
	Value.Ptr.prototype.SetInt = function(x) {
			this.mustBeAssignable();
			var k = this.kind();
			switch (k) {
			case Int:
			case Int8:
			case Int16:
			case Int32:
				this.val.go$set(go$flatten64(x));
				return;
			case Int64:
				this.val.go$set(new this.typ.jsType(x.high, x.low));
				return;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.SetInt", k));
		};
	Value.prototype.SetInt = function() { return this.go$val.SetInt(); };
	Value.Ptr.prototype.SetLen = function(n) {
			this.mustBeAssignable();
			this.mustBe(Slice);
			var s = this.val.go$get();
			if (n < 0 || n > s.capacity) {
				throw go$panic(new Go$String("reflect: slice length out of range in SetLen"));
			}
			var newSlice = new this.typ.jsType(s.array);
			newSlice.offset = s.offset;
			newSlice.length = n;
			newSlice.capacity = s.capacity;
			this.val.go$set(newSlice);
		};
	Value.prototype.SetLen = function() { return this.go$val.SetLen(); };
	Value.Ptr.prototype.SetCap = function(n) {
			this.mustBeAssignable();
			this.mustBe(Slice);
			var s = this.val.go$get();
			if (n < s.length || n > s.capacity) {
				throw go$panic(new Go$String("reflect: slice capacity out of range in SetCap"));
			}
			var newSlice = new this.typ.jsType(s.array);
			newSlice.offset = s.offset;
			newSlice.length = s.length;
			newSlice.capacity = n;
			this.val.go$set(newSlice);
		};
	Value.prototype.SetCap = function() { return this.go$val.SetCap(); };
	Value.Ptr.prototype.SetMapIndex = function(key, val) {
		var _struct, v, tt, _struct$1, _struct$2;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(21);
		(new flag(v.flag)).mustBeExported();
		(new flag(key.flag)).mustBeExported();
		tt = v.typ.mapType;
		key = (_struct$1 = key.assignTo("reflect.Value.SetMapIndex", tt.key, (go$ptrType(go$emptyInterface)).nil), new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		if (!(val.typ === (go$ptrType(rtype)).nil)) {
			(new flag(val.flag)).mustBeExported();
			val = (_struct$2 = val.assignTo("reflect.Value.SetMapIndex", tt.elem, (go$ptrType(go$emptyInterface)).nil), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		mapassign(v.typ, v.iword(), key.iword(), val.iword(), !(val.typ === (go$ptrType(rtype)).nil));
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.go$val.SetMapIndex(key, val); };
	Value.Ptr.prototype.SetUint = function(x) {
			this.mustBeAssignable();
			var k = this.kind();
			switch (k) {
			case Uint:
			case Uint8:
			case Uint16:
			case Uint32:
			case Uintptr:
				this.val.go$set(x.low);
				return;
			case Uint64:
				this.val.go$set(new this.typ.jsType(x.high, x.low));
				return;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.SetUint", k));
		};
	Value.prototype.SetUint = function() { return this.go$val.SetUint(); };
	Value.Ptr.prototype.SetPointer = function(x) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(26);
		v.val.go$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.go$val.SetPointer(x); };
	Value.Ptr.prototype.SetString = function(x) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(24);
		v.val.go$set(x);
	};
	Value.prototype.SetString = function(x) { return this.go$val.SetString(x); };
	Value.Ptr.prototype.Slice = function(i, j) {
			var typ, s, cap;
			var kind = this.kind();
			switch (kind) {
			case Array:
				if ((this.flag & flagAddr) === 0) {
					throw go$panic(new Go$String("reflect.Value.Slice: slice of unaddressable array"));
				}
				var tt = this.typ.arrayType;
				cap = tt.len;
				typ = SliceOf(tt.elem);
				s = new typ.jsType(this.iword());
				break;
			case Slice:
				typ = this.typ.sliceType;
				s = this.iword();
				cap = s.capacity;
				break;
			case String:
				s = this.iword();
				if (i < 0 || j < i || j > s.length) {
					throw go$panic(new Go$String("reflect.Value.Slice: string slice index out of bounds"));
				}
				return new Value.Ptr(this.typ, s.substring(i, j), this.flag);
			default:
				throw go$panic(new ValueError.Ptr("reflect.Value.Slice", kind));
			}

			if (i < 0 || j < i || j > cap) {
				throw go$panic(new Go$String("reflect.Value.Slice: slice index out of bounds"));
			}

			var fl = (this.flag & flagRO) | (Slice << flagKindShift);
			return new Value.Ptr(typ.common(), go$subslice(s, i, j), fl);
		};
	Value.prototype.Slice = function() { return this.go$val.Slice(); };
	Value.Ptr.prototype.Slice3 = function(i, j, k) {
			var typ, s, cap;
			var kind = this.kind();
			switch (kind) {
			case Array:
				if ((this.flag & flagAddr) === 0) {
					throw go$panic(new Go$String("reflect.Value.Slice3: slice of unaddressable array"));
				}
				var tt = this.typ.arrayType;
				cap = tt.len;
				typ = SliceOf(tt.elem);
				s = new typ.jsType(this.iword());
				break;
			case Slice:
				typ = this.typ.sliceType;
				s = this.iword();
				cap = s.capacity;
				break;
			default:
				throw go$panic(new ValueError.Ptr("reflect.Value.Slice3", kind));
			}

			if (i < 0 || j < i || k < j || k > cap) {
				throw go$panic(new Go$String("reflect.Value.Slice3: slice index out of bounds"));
			}

			var fl = (this.flag & flagRO) | (Slice << flagKindShift);
			return new Value.Ptr(typ.common(), go$subslice(s, i, j, k), fl);
		};
	Value.prototype.Slice3 = function() { return this.go$val.Slice3(); };
	Value.Ptr.prototype.String = function() {
			switch (this.kind()) {
			case Invalid:
				return "<invalid Value>";
			case String:
				return this.iword();
			}
			return "<" + this.typ.String() + " Value>";
		};
	Value.prototype.String = function() { return this.go$val.String(); };
	Value.Ptr.prototype.TryRecv = function() {
		var x, ok, _struct, v, _tuple, _struct$1, _struct$2;
		x = new Value.Ptr();
		ok = false;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		_tuple = v.recv(true), x = (_struct$1 = _tuple[0], new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), ok = _tuple[1];
		return [(_struct$2 = x, new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), ok];
	};
	Value.prototype.TryRecv = function() { return this.go$val.TryRecv(); };
	Value.Ptr.prototype.TrySend = function(x) {
		var _struct, v, _struct$1;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		return v.send((_struct$1 = x, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), true);
	};
	Value.prototype.TrySend = function(x) { return this.go$val.TrySend(x); };
	Value.Ptr.prototype.Type = function() {
		var _struct, v, f, i, tt, _slice, _index, m, ut, _slice$1, _index$1, m$1;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		f = v.flag;
		if (f === 0) {
			throw go$panic(new ValueError.Ptr("reflect.Value.Type", 0));
		}
		if (((f & 8) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 9 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.interfaceType;
			if (i < 0 || i >= tt.methods.length) {
				throw go$panic(new Go$String("reflect: internal error: invalid method index"));
			}
			m = (_slice = tt.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === (go$ptrType(uncommonType)).nil || i < 0 || i >= ut.methods.length) {
			throw go$panic(new Go$String("reflect: internal error: invalid method index"));
		}
		m$1 = (_slice$1 = ut.methods, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.go$val.Type(); };
	Value.Ptr.prototype.Uint = function() {
		var _struct, v, k, p, v$1, _ref, x;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		p = 0;
		if (!((((v.flag & 2) >>> 0) === 0))) {
			p = v.val;
		} else {
			p = new (go$ptrType(Go$UnsafePointer))(function() { return v.val; }, function(v$1) { v.val = v$1; });
		}
		_ref = k;
		if (_ref === 7) {
			return new Go$Uint64(0, p.go$get());
		} else if (_ref === 8) {
			return new Go$Uint64(0, p.go$get());
		} else if (_ref === 9) {
			return new Go$Uint64(0, p.go$get());
		} else if (_ref === 10) {
			return new Go$Uint64(0, p.go$get());
		} else if (_ref === 11) {
			return p.go$get();
		} else if (_ref === 12) {
			return (x = p.go$get(), new Go$Uint64(0, x.constructor === Number ? x : 1));
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.Uint", k));
	};
	Value.prototype.Uint = function() { return this.go$val.Uint(); };
	Value.Ptr.prototype.UnsafeAddr = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.typ === (go$ptrType(rtype)).nil) {
			throw go$panic(new ValueError.Ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 4) >>> 0) === 0) {
			throw go$panic(new Go$String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.val;
	};
	Value.prototype.UnsafeAddr = function() { return this.go$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		if (!(go$interfaceIsEqual(t1, t2))) {
			throw go$panic(new Go$String(what + ": " + t1.String() + " != " + t2.String()));
		}
	};
	Copy = go$pkg.Copy = function(dst, src) {
			var dk = dst.kind();
			if (dk !== Array && dk !== Slice) {
				throw go$panic(new ValueError.Ptr("reflect.Copy", dk));
			}
			if (dk === Array) {
				dst.mustBeAssignable();
			}
			dst.mustBeExported();

			var sk = src.kind();
			if (sk !== Array && sk != Slice) {
				throw go$panic(new ValueError.Ptr("reflect.Copy", sk));
			}
			src.mustBeExported();

			typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem());

			var dstVal = dst.iword();
			if (dk === Array) {
				dstVal = new (go$sliceType(dst.typ.Elem().jsType))(dstVal);
			}
			var srcVal = src.iword();
			if (sk === Array) {
				srcVal = new (go$sliceType(src.typ.Elem().jsType))(srcVal);
			}
			return go$copySlice(dstVal, srcVal);
		};
	unsafe_New = function(typ) {
			switch (typ.Kind()) {
			case Struct:
				return new typ.jsType.Ptr();
			case Array:
				return zeroVal(typ);
			default:
				return go$newDataPointer(zeroVal(typ), typ.ptrTo().jsType);
			}
		};
	MakeSlice = go$pkg.MakeSlice = function(typ, len, cap) {
			if (typ.Kind() !== Slice) {
				throw go$panic(new Go$String("reflect.MakeSlice of non-slice type"));
			}
			if (len < 0) {
				throw go$panic(new Go$String("reflect.MakeSlice: negative len"));
			}
			if (cap < 0) {
				throw go$panic(new Go$String("reflect.MakeSlice: negative cap"));
			}
			if (len > cap) {
				throw go$panic(new Go$String("reflect.MakeSlice: len > cap"));
			}
			return new Value.Ptr(typ.common(), typ.jsType.make(len, cap, function() { return zeroVal(typ.Elem()); }), Slice << flagKindShift);
		};
	ValueOf = go$pkg.ValueOf = function(i) {
			if (i === null) {
				return new Value.Ptr();
			}
			if (i.constructor.kind === undefined) { // js.Object
				return new Value.Ptr(Go$String.reflectType(), go$toString(i), String << flagKindShift);
			}
			var typ = i.constructor.reflectType();
			return new Value.Ptr(typ, i.go$val, typ.Kind() << flagKindShift);
		};
	Zero = go$pkg.Zero = function(typ) {
			return new Value.Ptr(typ, zeroVal(typ), typ.Kind() << flagKindShift);
		};
	New = go$pkg.New = function(typ) {
		var ptr, fl;
		if (go$interfaceIsEqual(typ, null)) {
			throw go$panic(new Go$String("reflect: New(nil)"));
		}
		ptr = unsafe_New((typ !== null && typ.constructor === (go$ptrType(rtype)) ? typ.go$val : go$typeAssertionFailed(typ, (go$ptrType(rtype)))));
		fl = 352;
		return new Value.Ptr(typ.common().ptrTo(), ptr, fl);
	};
	Value.Ptr.prototype.assignTo = function(context, dst, target) {
		var _struct, v, _struct$1, _struct$2, fl, _struct$3, x;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (!((((v.flag & 8) >>> 0) === 0))) {
			v = (_struct$2 = makeMethodValue(context, (_struct$1 = v, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		if (directlyAssignable(dst, v.typ)) {
			v.typ = dst;
			fl = (v.flag & 7) >>> 0;
			fl = (fl | (((dst.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			return new Value.Ptr(dst, v.val, fl);
		} else if (implements$1(dst, v.typ)) {
			if (target === (go$ptrType(go$emptyInterface)).nil) {
				target = go$newDataPointer(null, (go$ptrType(go$emptyInterface)));
			}
			x = valueInterface((_struct$3 = v, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), false);
			if (dst.NumMethod() === 0) {
				target.go$set(x);
			} else {
				ifaceE2I(dst, x, target);
			}
			return new Value.Ptr(dst, target, 322);
		}
		throw go$panic(new Go$String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.go$val.assignTo(context, dst, target); };
	Value.Ptr.prototype.Convert = function(t) {
		var _struct, v, _struct$1, _struct$2, op, _struct$3, _struct$4;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (!((((v.flag & 8) >>> 0) === 0))) {
			v = (_struct$2 = makeMethodValue("Convert", (_struct$1 = v, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		op = convertOp(t.common(), v.typ);
		if (op === go$throwNilPointerError) {
			throw go$panic(new Go$String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + t.String()));
		}
		return (_struct$4 = op((_struct$3 = v, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), t), new Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
	};
	Value.prototype.Convert = function(t) { return this.go$val.Convert(t); };
	convertOp = function(dst, src) {
		var _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6;
		_ref = src.Kind();
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			_ref$1 = dst.Kind();
			if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				return cvtInt;
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				return cvtIntFloat;
			} else if (_ref$1 === 24) {
				return cvtIntString;
			}
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			_ref$2 = dst.Kind();
			if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
				return cvtUint;
			} else if (_ref$2 === 13 || _ref$2 === 14) {
				return cvtUintFloat;
			} else if (_ref$2 === 24) {
				return cvtUintString;
			}
		} else if (_ref === 13 || _ref === 14) {
			_ref$3 = dst.Kind();
			if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
				return cvtFloatInt;
			} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
				return cvtFloatUint;
			} else if (_ref$3 === 13 || _ref$3 === 14) {
				return cvtFloat;
			}
		} else if (_ref === 15 || _ref === 16) {
			_ref$4 = dst.Kind();
			if (_ref$4 === 15 || _ref$4 === 16) {
				return cvtComplex;
			}
		} else if (_ref === 24) {
			if ((dst.Kind() === 23) && dst.Elem().PkgPath() === "") {
				_ref$5 = dst.Elem().Kind();
				if (_ref$5 === 8) {
					return cvtStringBytes;
				} else if (_ref$5 === 5) {
					return cvtStringRunes;
				}
			}
		} else if (_ref === 23) {
			if ((dst.Kind() === 24) && src.Elem().PkgPath() === "") {
				_ref$6 = src.Elem().Kind();
				if (_ref$6 === 8) {
					return cvtBytesString;
				} else if (_ref$6 === 5) {
					return cvtRunesString;
				}
			}
		}
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if ((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "" && haveIdenticalUnderlyingType(dst.Elem().common(), src.Elem().common())) {
			return cvtDirect;
		}
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return go$throwNilPointerError;
	};
	makeInt = function(f, bits, typ) {
			var val;
			switch (typ.Kind()) {
			case Int8:
				val = bits.low << 24 >> 24;
				break;
			case Int16:
				val = bits.low << 16 >> 16;
				break;
			case Int:
			case Int32:
				val = bits.low >> 0;
				break;
			case Int64:
				return new Value.Ptr(typ, go$newDataPointer(new Go$Int64(bits.high, bits.low), typ.ptrTo().jsType), f | flagIndir | (Int64 << flagKindShift));
			case Uint8:
				val = bits.low << 24 >>> 24;
				break;
			case Uint16:
				val = bits.low << 16 >>> 16;
				break;
			case Uint64:
				return new Value.Ptr(typ, go$newDataPointer(bits, typ.ptrTo().jsType), f | flagIndir | (Int64 << flagKindShift));
			case Uint:
			case Uint32:
			case Uintptr:
				val = bits.low >>> 0;
				break;
			}
			return new Value.Ptr(typ, val, f | (typ.Kind() << flagKindShift));
		};
	makeFloat = function(f, v, t) {
		var typ, ptr, w, _ref, v$1, v$2;
		typ = t.common();
		if (typ.size > 4) {
			ptr = unsafe_New(typ);
			ptr.go$set(v);
			return new Value.Ptr(typ, ptr, (((f | 2) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		w = 0;
		_ref = typ.size;
		if (_ref === 4) {
			new (go$ptrType(iword))(function() { return w; }, function(v$1) { w = v$1; }).go$set(v);
		} else if (_ref === 8) {
			new (go$ptrType(iword))(function() { return w; }, function(v$2) { w = v$2; }).go$set(v);
		}
		return new Value.Ptr(typ, w, (f | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	makeComplex = function(f, v, typ) {
			return new Value.Ptr(typ, new typ.jsType(v.real, v.imag), f | (typ.Kind() << flagKindShift));
		};
	makeString = function(f, v, t) {
		var _struct, ret, _struct$1;
		ret = (_struct = New(t).Elem(), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		ret.SetString(v);
		ret.flag = ((ret.flag & ~4) | f) >>> 0;
		return (_struct$1 = ret, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
	};
	cvtInt = function(v, t) {
		var x, _struct;
		return (_struct = makeInt((v.flag & 1) >>> 0, (x = v.Int(), new Go$Uint64(x.high, x.low)), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtUint = function(v, t) {
		var _struct;
		return (_struct = makeInt((v.flag & 1) >>> 0, v.Uint(), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtFloatInt = function(v, t) {
		var x, _struct;
		return (_struct = makeInt((v.flag & 1) >>> 0, (x = new Go$Int64(0, v.Float()), new Go$Uint64(x.high, x.low)), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtFloatUint = function(v, t) {
		var _struct;
		return (_struct = makeInt((v.flag & 1) >>> 0, new Go$Uint64(0, v.Float()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtIntFloat = function(v, t) {
		var _struct;
		return (_struct = makeFloat((v.flag & 1) >>> 0, go$flatten64(v.Int()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtUintFloat = function(v, t) {
		var _struct;
		return (_struct = makeFloat((v.flag & 1) >>> 0, go$flatten64(v.Uint()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtFloat = function(v, t) {
		var _struct;
		return (_struct = makeFloat((v.flag & 1) >>> 0, v.Float(), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtComplex = function(v, t) {
		var _struct;
		return (_struct = makeComplex((v.flag & 1) >>> 0, v.Complex(), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtIntString = function(v, t) {
		var _struct;
		return (_struct = makeString((v.flag & 1) >>> 0, go$encodeRune(v.Int().low), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtUintString = function(v, t) {
		var _struct;
		return (_struct = makeString((v.flag & 1) >>> 0, go$encodeRune(v.Uint().low), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtBytesString = function(v, t) {
		var _struct;
		return (_struct = makeString((v.flag & 1) >>> 0, go$bytesToString(v.Bytes()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtStringBytes = function(v, typ) {
			return new Value.Ptr(typ, new typ.jsType(go$stringToBytes(v.iword())), (v.flag & flagRO) | (Slice << flagKindShift));
		};
	cvtRunesString = function(v, t) {
		var _struct;
		return (_struct = makeString((v.flag & 1) >>> 0, go$runesToString(v.runes()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtStringRunes = function(v, typ) {
			return new Value.Ptr(typ, new typ.jsType(go$stringToRunes(v.iword())), (v.flag & flagRO) | (Slice << flagKindShift));
		};
	cvtDirect = function(v, typ) {
			var srcVal = v.iword();
			if (srcVal === v.typ.jsType.nil) {
				return new Value.Ptr(typ, typ.jsType.nil, v.flag);
			}

			var val;
			switch (typ.Kind()) {
			case Chan:
				val = new typ.jsType();
				break;
			case Slice:
				val = new typ.jsType(srcVal.array);
				val.length = srcVal.length;
				val.cap = srcVal.cap;
				break;
			case Ptr:
				if (typ.Elem().Kind() === Struct) {
					if (typ.Elem() === v.typ.Elem()) {
						val = srcVal;
					}
					val = new typ.jsType();
					copyStruct(val, srcVal, typ.Elem());
					break;
				}
				val = new typ.jsType(srcVal.go$get, srcVal.go$set);
				break;
			case Struct:
				val = new typ.jsType.Ptr();
				copyStruct(val, srcVal, typ);
				break;
			case Array:
			case Func:
			case Interface:
			case Map:
			case String:
				val = srcVal;
				break;
			default:
				throw go$panic(new ValueError.Ptr("reflect.Convert", typ.Kind()));
			}
			return new Value.Ptr(typ, val, (v.flag & flagRO) | (typ.Kind() << flagKindShift));
		};
	cvtT2I = function(v, typ) {
		var target, _struct, x;
		target = go$newDataPointer(null, (go$ptrType(go$emptyInterface)));
		x = valueInterface((_struct = v, new Value.Ptr(_struct.typ, _struct.val, _struct.flag)), false);
		if (typ.NumMethod() === 0) {
			target.go$set(x);
		} else {
			ifaceE2I((typ !== null && typ.constructor === (go$ptrType(rtype)) ? typ.go$val : go$typeAssertionFailed(typ, (go$ptrType(rtype)))), x, target);
		}
		return new Value.Ptr(typ.common(), target, (((((v.flag & 1) >>> 0) | 2) >>> 0) | 320) >>> 0);
	};
	cvtI2I = function(v, typ) {
		var _struct, ret, _struct$1, _struct$2, _struct$3;
		if (v.IsNil()) {
			ret = (_struct = Zero(typ), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			ret.flag = (ret.flag | (((v.flag & 1) >>> 0))) >>> 0;
			return (_struct$1 = ret, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		return (_struct$3 = cvtT2I((_struct$2 = v.Elem(), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), typ), new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
	};
	chanclose = function(ch) { go$notSupported("channels"); };
	chanrecv = function(t, ch, nb) { go$notSupported("channels"); };
	chansend = function(t, ch, val, nb) { go$notSupported("channels"); };
	mapaccess = function(t, m, key) {
			var entry = m[key.go$key ? key.go$key() : key];
			if (entry === undefined) {
				return [undefined, false];
			}
			return [makeIndir(t.Elem(), entry.v), true];
		};
	mapassign = function(t, m, key, val, ok) {
			if (!ok) {
				delete m[key.go$key ? key.go$key() : key];
				return;
			}
			if (t.Elem().kind === Struct) {
				var newVal = {};
				copyStruct(newVal, val, t.Elem());
				val = newVal;
			}
			m[key.go$key ? key.go$key() : key] = { k: key, v: val };
		};
	mapiterinit = function(t, m) {
			return {t: t, m: m, keys: go$keys(m), i: 0};
		};
	mapiterkey = function(it) {
			var key = it.keys[it.i];
			return [makeIndir(it.t.Key(), it.m[key].k), true];
		};
	mapiternext = function(it) {
			it.i++;
		};
	maplen = function(m) {
			return go$keys(m).length;
		};
	call = function() {
		throw go$panic("Native function not implemented: call");
	};
	ifaceE2I = function(t, src, dst) {
			dst.go$set(src);
		};

			var Invalid = 0;
			var Bool = 1;
			var Int = 2;
			var Int8 = 3;
			var Int16 = 4;
			var Int32 = 5;
			var Int64 = 6;
			var Uint = 7;
			var Uint8 = 8;
			var Uint16 = 9;
			var Uint32 = 10;
			var Uint64 = 11;
			var Uintptr = 12;
			var Float32 = 13;
			var Float64 = 14;
			var Complex64 = 15;
			var Complex128 = 16;
			var Array = 17;
			var Chan = 18;
			var Func = 19;
			var Interface = 20;
			var Map = 21;
			var Ptr = 22;
			var Slice = 23;
			var String = 24;
			var Struct = 25;
			var UnsafePointer = 26;

			var RecvDir = 1;
			var SendDir = 2;
			var BothDir = 3;

			var flagRO = 1;
			var flagIndir = 2;
			var flagAddr = 4;
			var flagMethod = 8;
			var flagKindShift = 4;
			var flagKindWidth = 5;
			var flagKindMask = 31;
			var flagMethodShift = 9;

			go$reflect = {
				rtype: rtype.Ptr, uncommonType: uncommonType.Ptr, method: method.Ptr, arrayType: arrayType.Ptr, chanType: chanType.Ptr, funcType: funcType.Ptr, interfaceType: interfaceType.Ptr, mapType: mapType.Ptr, ptrType: ptrType.Ptr, sliceType: sliceType.Ptr, structType: structType.Ptr,
				imethod: imethod.Ptr, structField: structField.Ptr,
				kinds: { Bool: Bool, Int: Int, Int8: Int8, Int16: Int16, Int32: Int32, Int64: Int64, Uint: Uint, Uint8: Uint8, Uint16: Uint16, Uint32: Uint32, Uint64: Uint64, Uintptr: Uintptr, Float32: Float32, Float64: Float64, Complex64: Complex64, Complex128: Complex128, Array: Array, Chan: Chan, Func: Func, Interface: Interface, Map: Map, Ptr: Ptr, Slice: Slice, String: String, Struct: Struct, UnsafePointer: UnsafePointer },
				RecvDir: RecvDir, SendDir: SendDir, BothDir: BothDir
			};

			var isWrapped = function(typ) {
				switch (typ.Kind()) {
				case Bool:
				case Int:
				case Int8:
				case Int16:
				case Int32:
				case Uint:
				case Uint8:
				case Uint16:
				case Uint32:
				case Uintptr:
				case Float32:
				case Float64:
				case Array:
				case Map:
				case Func:
				case String:
				case Struct:
					return true;
				case Ptr:
					return typ.Elem().Kind() === Array;
				}
				return false;
			};
			var fieldName = function(field, i) {
				if (field.name.go$get === go$throwNilPointerError) {
					var ntyp = field.typ;
					if (ntyp.Kind() === Ptr) {
						ntyp = ntyp.Elem().common();
					}
					return ntyp.Name();
				}
				var name = field.name.go$get();
				if (name === "_" || go$reservedKeywords.indexOf(name) != -1) {
					return name + "$" + i;
				}
				return name;
			};
			var copyStruct = function(dst, src, typ) {
				var fields = typ.structType.fields.array, i;
				for (i = 0; i < fields.length; i++) {
					var field = fields[i];
					var name = fieldName(field, i);
					dst[name] = src[name];
				}
			};
			var deepValueEqual = function(v1, v2, visited) {
				if (!v1.IsValid() || !v2.IsValid()) {
					return !v1.IsValid() && !v2.IsValid();
				}
				if (v1.Type() !== v2.Type()) {
					return false;
				}

				var i;
				switch(v1.Kind()) {
				case Array:
				case Map:
				case Slice:
				case Struct:
					for (i = 0; i < visited.length; i++) {
						var entry = visited[i];
						if (v1.val === entry[0] && v2.val === entry[1]) {
							return true;
						}
					}
					visited.push([v1.val, v2.val]);
				}

				switch(v1.Kind()) {
				case Array:
				case Slice:
					if (v1.Kind() === Slice) {
						if (v1.IsNil() !== v2.IsNil()) {
							return false;
						}
						if (v1.iword() === v2.iword()) {
							return true;
						}
					}
					var n = v1.Len();
					if (n !== v2.Len()) {
						return false;
					}
					for (i = 0; i < n; i++) {
						if (!deepValueEqual(v1.Index(i), v2.Index(i), visited)) {
							return false;
						}
					}
					return true;
				case Interface:
					if (v1.IsNil() || v2.IsNil()) {
						return v1.IsNil() && v2.IsNil();
					}
					return deepValueEqual(v1.Elem(), v2.Elem(), visited);
				case Ptr:
					return deepValueEqual(v1.Elem(), v2.Elem(), visited);
				case Struct:
					var n = v1.NumField();
					for (i = 0; i < n; i++) {
						if (!deepValueEqual(v1.Field(i), v2.Field(i), visited)) {
							return false;
						}
					}
					return true;
				case Map:
					if (v1.IsNil() !== v2.IsNil()) {
						return false;
					}
					if (v1.iword() === v2.iword()) {
						return true;
					}
					var keys = v1.MapKeys();
					if (keys.length !== v2.Len()) {
						return false;
					}
					for (i = 0; i < keys.length; i++) {
						var k = keys.array[i];
						if (!deepValueEqual(v1.MapIndex(k), v2.MapIndex(k), visited)) {
							return false;
						}
					}
					return true;
				case Func:
					return v1.IsNil() && v2.IsNil();
				}

				return go$interfaceIsEqual(valueInterface(v1, false), valueInterface(v2, false));
			};
			var zeroVal = function(typ) {
				switch (typ.Kind()) {
				case Bool:
					return false;
				case Int:
				case Int8:
				case Int16:
				case Int32:
				case Uint:
				case Uint8:
				case Uint16:
				case Uint32:
				case Uintptr:
				case Float32:
				case Float64:
					return 0;
				case Int64:
				case Uint64:
				case Complex64:
				case Complex128:
					return new typ.jsType(0, 0);
				case Array:
					var elemType = typ.Elem();
					return go$makeNativeArray(elemType.jsType.kind, typ.Len(), function() { return zeroVal(elemType); });
				case Func:
					return go$throwNilPointerError;
				case Interface:
					return null;
				case Map:
					return false;
				case Chan:
				case Ptr:
				case Slice:
					return typ.jsType.nil;
				case String:
					return "";
				case Struct:
					return new typ.jsType.Ptr();
				default:
					throw go$panic(new ValueError.Ptr("reflect.Zero", this.kind()));
				}
			};
			var makeIndir = function(t, v) {
				if (t.size > 4) {
					return go$newDataPointer(v, t.ptrTo().jsType);
				}
				return v;
			};
			go$pkg.init = function() {
		Type.init([["Align", "", (go$funcType([], [Go$Int], false))], ["AssignableTo", "", (go$funcType([Type], [Go$Bool], false))], ["Bits", "", (go$funcType([], [Go$Int], false))], ["ChanDir", "", (go$funcType([], [ChanDir], false))], ["ConvertibleTo", "", (go$funcType([Type], [Go$Bool], false))], ["Elem", "", (go$funcType([], [Type], false))], ["Field", "", (go$funcType([Go$Int], [StructField], false))], ["FieldAlign", "", (go$funcType([], [Go$Int], false))], ["FieldByIndex", "", (go$funcType([(go$sliceType(Go$Int))], [StructField], false))], ["FieldByName", "", (go$funcType([Go$String], [StructField, Go$Bool], false))], ["FieldByNameFunc", "", (go$funcType([(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false))], ["Implements", "", (go$funcType([Type], [Go$Bool], false))], ["In", "", (go$funcType([Go$Int], [Type], false))], ["IsVariadic", "", (go$funcType([], [Go$Bool], false))], ["Key", "", (go$funcType([], [Type], false))], ["Kind", "", (go$funcType([], [Kind], false))], ["Len", "", (go$funcType([], [Go$Int], false))], ["Method", "", (go$funcType([Go$Int], [Method], false))], ["MethodByName", "", (go$funcType([Go$String], [Method, Go$Bool], false))], ["Name", "", (go$funcType([], [Go$String], false))], ["NumField", "", (go$funcType([], [Go$Int], false))], ["NumIn", "", (go$funcType([], [Go$Int], false))], ["NumMethod", "", (go$funcType([], [Go$Int], false))], ["NumOut", "", (go$funcType([], [Go$Int], false))], ["Out", "", (go$funcType([Go$Int], [Type], false))], ["PkgPath", "", (go$funcType([], [Go$String], false))], ["Size", "", (go$funcType([], [Go$Uintptr], false))], ["String", "", (go$funcType([], [Go$String], false))], ["common", "reflect", (go$funcType([], [(go$ptrType(rtype))], false))], ["uncommon", "reflect", (go$funcType([], [(go$ptrType(uncommonType))], false))]]);
		Kind.methods = [["String", "", [], [Go$String], false]];
		(go$ptrType(Kind)).methods = [["String", "", [], [Go$String], false]];
		rtype.init([["size", "reflect", Go$Uintptr, ""], ["hash", "reflect", Go$Uint32, ""], ["_", "reflect", Go$Uint8, ""], ["align", "reflect", Go$Uint8, ""], ["fieldAlign", "reflect", Go$Uint8, ""], ["kind", "reflect", Go$Uint8, ""], ["alg", "reflect", (go$ptrType(Go$Uintptr)), ""], ["gc", "reflect", Go$UnsafePointer, ""], ["string", "reflect", (go$ptrType(Go$String)), ""], ["", "reflect", (go$ptrType(uncommonType)), ""], ["ptrToThis", "reflect", (go$ptrType(rtype)), ""]]);
		rtype.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		(go$ptrType(rtype)).methods = [["Align", "", [], [Go$Int], false], ["AssignableTo", "", [Type], [Go$Bool], false], ["Bits", "", [], [Go$Int], false], ["ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "", [Type], [Go$Bool], false], ["Elem", "", [], [Type], false], ["Field", "", [Go$Int], [StructField], false], ["FieldAlign", "", [], [Go$Int], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false], ["Implements", "", [Type], [Go$Bool], false], ["In", "", [Go$Int], [Type], false], ["IsVariadic", "", [], [Go$Bool], false], ["Key", "", [], [Type], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumField", "", [], [Go$Int], false], ["NumIn", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["NumOut", "", [], [Go$Int], false], ["Out", "", [Go$Int], [Type], false], ["PkgPath", "", [], [Go$String], false], ["Size", "", [], [Go$Uintptr], false], ["String", "", [], [Go$String], false], ["common", "reflect", [], [(go$ptrType(rtype))], false], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		method.init([["name", "reflect", (go$ptrType(Go$String)), ""], ["pkgPath", "reflect", (go$ptrType(Go$String)), ""], ["mtyp", "reflect", (go$ptrType(rtype)), ""], ["typ", "reflect", (go$ptrType(rtype)), ""], ["ifn", "reflect", Go$UnsafePointer, ""], ["tfn", "reflect", Go$UnsafePointer, ""]]);
		uncommonType.init([["name", "reflect", (go$ptrType(Go$String)), ""], ["pkgPath", "reflect", (go$ptrType(Go$String)), ""], ["methods", "reflect", (go$sliceType(method)), ""]]);
		(go$ptrType(uncommonType)).methods = [["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumMethod", "", [], [Go$Int], false], ["PkgPath", "", [], [Go$String], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		ChanDir.methods = [["String", "", [], [Go$String], false]];
		(go$ptrType(ChanDir)).methods = [["String", "", [], [Go$String], false]];
		arrayType.init([["", "reflect", rtype, "reflect:\"array\""], ["elem", "reflect", (go$ptrType(rtype)), ""], ["slice", "reflect", (go$ptrType(rtype)), ""], ["len", "reflect", Go$Uintptr, ""]]);
		arrayType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		(go$ptrType(arrayType)).methods = [["Align", "", [], [Go$Int], false], ["AssignableTo", "", [Type], [Go$Bool], false], ["Bits", "", [], [Go$Int], false], ["ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "", [Type], [Go$Bool], false], ["Elem", "", [], [Type], false], ["Field", "", [Go$Int], [StructField], false], ["FieldAlign", "", [], [Go$Int], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false], ["Implements", "", [Type], [Go$Bool], false], ["In", "", [Go$Int], [Type], false], ["IsVariadic", "", [], [Go$Bool], false], ["Key", "", [], [Type], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumField", "", [], [Go$Int], false], ["NumIn", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["NumOut", "", [], [Go$Int], false], ["Out", "", [Go$Int], [Type], false], ["PkgPath", "", [], [Go$String], false], ["Size", "", [], [Go$Uintptr], false], ["String", "", [], [Go$String], false], ["common", "reflect", [], [(go$ptrType(rtype))], false], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		chanType.init([["", "reflect", rtype, "reflect:\"chan\""], ["elem", "reflect", (go$ptrType(rtype)), ""], ["dir", "reflect", Go$Uintptr, ""]]);
		chanType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		(go$ptrType(chanType)).methods = [["Align", "", [], [Go$Int], false], ["AssignableTo", "", [Type], [Go$Bool], false], ["Bits", "", [], [Go$Int], false], ["ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "", [Type], [Go$Bool], false], ["Elem", "", [], [Type], false], ["Field", "", [Go$Int], [StructField], false], ["FieldAlign", "", [], [Go$Int], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false], ["Implements", "", [Type], [Go$Bool], false], ["In", "", [Go$Int], [Type], false], ["IsVariadic", "", [], [Go$Bool], false], ["Key", "", [], [Type], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumField", "", [], [Go$Int], false], ["NumIn", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["NumOut", "", [], [Go$Int], false], ["Out", "", [Go$Int], [Type], false], ["PkgPath", "", [], [Go$String], false], ["Size", "", [], [Go$Uintptr], false], ["String", "", [], [Go$String], false], ["common", "reflect", [], [(go$ptrType(rtype))], false], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		funcType.init([["", "reflect", rtype, "reflect:\"func\""], ["dotdotdot", "reflect", Go$Bool, ""], ["in", "reflect", (go$sliceType((go$ptrType(rtype)))), ""], ["out", "reflect", (go$sliceType((go$ptrType(rtype)))), ""]]);
		funcType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		(go$ptrType(funcType)).methods = [["Align", "", [], [Go$Int], false], ["AssignableTo", "", [Type], [Go$Bool], false], ["Bits", "", [], [Go$Int], false], ["ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "", [Type], [Go$Bool], false], ["Elem", "", [], [Type], false], ["Field", "", [Go$Int], [StructField], false], ["FieldAlign", "", [], [Go$Int], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false], ["Implements", "", [Type], [Go$Bool], false], ["In", "", [Go$Int], [Type], false], ["IsVariadic", "", [], [Go$Bool], false], ["Key", "", [], [Type], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumField", "", [], [Go$Int], false], ["NumIn", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["NumOut", "", [], [Go$Int], false], ["Out", "", [Go$Int], [Type], false], ["PkgPath", "", [], [Go$String], false], ["Size", "", [], [Go$Uintptr], false], ["String", "", [], [Go$String], false], ["common", "reflect", [], [(go$ptrType(rtype))], false], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		imethod.init([["name", "reflect", (go$ptrType(Go$String)), ""], ["pkgPath", "reflect", (go$ptrType(Go$String)), ""], ["typ", "reflect", (go$ptrType(rtype)), ""]]);
		interfaceType.init([["", "reflect", rtype, "reflect:\"interface\""], ["methods", "reflect", (go$sliceType(imethod)), ""]]);
		interfaceType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		(go$ptrType(interfaceType)).methods = [["Align", "", [], [Go$Int], false], ["AssignableTo", "", [Type], [Go$Bool], false], ["Bits", "", [], [Go$Int], false], ["ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "", [Type], [Go$Bool], false], ["Elem", "", [], [Type], false], ["Field", "", [Go$Int], [StructField], false], ["FieldAlign", "", [], [Go$Int], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false], ["Implements", "", [Type], [Go$Bool], false], ["In", "", [Go$Int], [Type], false], ["IsVariadic", "", [], [Go$Bool], false], ["Key", "", [], [Type], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumField", "", [], [Go$Int], false], ["NumIn", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["NumOut", "", [], [Go$Int], false], ["Out", "", [Go$Int], [Type], false], ["PkgPath", "", [], [Go$String], false], ["Size", "", [], [Go$Uintptr], false], ["String", "", [], [Go$String], false], ["common", "reflect", [], [(go$ptrType(rtype))], false], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		mapType.init([["", "reflect", rtype, "reflect:\"map\""], ["key", "reflect", (go$ptrType(rtype)), ""], ["elem", "reflect", (go$ptrType(rtype)), ""], ["bucket", "reflect", (go$ptrType(rtype)), ""], ["hmap", "reflect", (go$ptrType(rtype)), ""]]);
		mapType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		(go$ptrType(mapType)).methods = [["Align", "", [], [Go$Int], false], ["AssignableTo", "", [Type], [Go$Bool], false], ["Bits", "", [], [Go$Int], false], ["ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "", [Type], [Go$Bool], false], ["Elem", "", [], [Type], false], ["Field", "", [Go$Int], [StructField], false], ["FieldAlign", "", [], [Go$Int], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false], ["Implements", "", [Type], [Go$Bool], false], ["In", "", [Go$Int], [Type], false], ["IsVariadic", "", [], [Go$Bool], false], ["Key", "", [], [Type], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumField", "", [], [Go$Int], false], ["NumIn", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["NumOut", "", [], [Go$Int], false], ["Out", "", [Go$Int], [Type], false], ["PkgPath", "", [], [Go$String], false], ["Size", "", [], [Go$Uintptr], false], ["String", "", [], [Go$String], false], ["common", "reflect", [], [(go$ptrType(rtype))], false], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		ptrType.init([["", "reflect", rtype, "reflect:\"ptr\""], ["elem", "reflect", (go$ptrType(rtype)), ""]]);
		ptrType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		(go$ptrType(ptrType)).methods = [["Align", "", [], [Go$Int], false], ["AssignableTo", "", [Type], [Go$Bool], false], ["Bits", "", [], [Go$Int], false], ["ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "", [Type], [Go$Bool], false], ["Elem", "", [], [Type], false], ["Field", "", [Go$Int], [StructField], false], ["FieldAlign", "", [], [Go$Int], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false], ["Implements", "", [Type], [Go$Bool], false], ["In", "", [Go$Int], [Type], false], ["IsVariadic", "", [], [Go$Bool], false], ["Key", "", [], [Type], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumField", "", [], [Go$Int], false], ["NumIn", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["NumOut", "", [], [Go$Int], false], ["Out", "", [Go$Int], [Type], false], ["PkgPath", "", [], [Go$String], false], ["Size", "", [], [Go$Uintptr], false], ["String", "", [], [Go$String], false], ["common", "reflect", [], [(go$ptrType(rtype))], false], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		sliceType.init([["", "reflect", rtype, "reflect:\"slice\""], ["elem", "reflect", (go$ptrType(rtype)), ""]]);
		sliceType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		(go$ptrType(sliceType)).methods = [["Align", "", [], [Go$Int], false], ["AssignableTo", "", [Type], [Go$Bool], false], ["Bits", "", [], [Go$Int], false], ["ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "", [Type], [Go$Bool], false], ["Elem", "", [], [Type], false], ["Field", "", [Go$Int], [StructField], false], ["FieldAlign", "", [], [Go$Int], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false], ["Implements", "", [Type], [Go$Bool], false], ["In", "", [Go$Int], [Type], false], ["IsVariadic", "", [], [Go$Bool], false], ["Key", "", [], [Type], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumField", "", [], [Go$Int], false], ["NumIn", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["NumOut", "", [], [Go$Int], false], ["Out", "", [Go$Int], [Type], false], ["PkgPath", "", [], [Go$String], false], ["Size", "", [], [Go$Uintptr], false], ["String", "", [], [Go$String], false], ["common", "reflect", [], [(go$ptrType(rtype))], false], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		structField.init([["name", "reflect", (go$ptrType(Go$String)), ""], ["pkgPath", "reflect", (go$ptrType(Go$String)), ""], ["typ", "reflect", (go$ptrType(rtype)), ""], ["tag", "reflect", (go$ptrType(Go$String)), ""], ["offset", "reflect", Go$Uintptr, ""]]);
		structType.init([["", "reflect", rtype, "reflect:\"struct\""], ["fields", "reflect", (go$sliceType(structField)), ""]]);
		structType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		(go$ptrType(structType)).methods = [["Align", "", [], [Go$Int], false], ["AssignableTo", "", [Type], [Go$Bool], false], ["Bits", "", [], [Go$Int], false], ["ChanDir", "", [], [ChanDir], false], ["ConvertibleTo", "", [Type], [Go$Bool], false], ["Elem", "", [], [Type], false], ["Field", "", [Go$Int], [StructField], false], ["FieldAlign", "", [], [Go$Int], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false], ["Implements", "", [Type], [Go$Bool], false], ["In", "", [Go$Int], [Type], false], ["IsVariadic", "", [], [Go$Bool], false], ["Key", "", [], [Type], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["Method", "", [Go$Int], [Method], false], ["MethodByName", "", [Go$String], [Method, Go$Bool], false], ["Name", "", [], [Go$String], false], ["NumField", "", [], [Go$Int], false], ["NumIn", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["NumOut", "", [], [Go$Int], false], ["Out", "", [Go$Int], [Type], false], ["PkgPath", "", [], [Go$String], false], ["Size", "", [], [Go$Uintptr], false], ["String", "", [], [Go$String], false], ["common", "reflect", [], [(go$ptrType(rtype))], false], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false]];
		Method.init([["Name", "", Go$String, ""], ["PkgPath", "", Go$String, ""], ["Type", "", Type, ""], ["Func", "", Value, ""], ["Index", "", Go$Int, ""]]);
		StructField.init([["Name", "", Go$String, ""], ["PkgPath", "", Go$String, ""], ["Type", "", Type, ""], ["Tag", "", StructTag, ""], ["Offset", "", Go$Uintptr, ""], ["Index", "", (go$sliceType(Go$Int)), ""], ["Anonymous", "", Go$Bool, ""]]);
		StructTag.methods = [["Get", "", [Go$String], [Go$String], false]];
		(go$ptrType(StructTag)).methods = [["Get", "", [Go$String], [Go$String], false]];
		fieldScan.init([["typ", "reflect", (go$ptrType(structType)), ""], ["index", "reflect", (go$sliceType(Go$Int)), ""]]);
		Value.init([["typ", "reflect", (go$ptrType(rtype)), ""], ["val", "reflect", Go$UnsafePointer, ""], ["", "reflect", flag, ""]]);
		Value.methods = [["Addr", "", [], [Value], false], ["Bool", "", [], [Go$Bool], false], ["Bytes", "", [], [(go$sliceType(Go$Uint8))], false], ["Call", "", [(go$sliceType(Value))], [(go$sliceType(Value))], false], ["CallSlice", "", [(go$sliceType(Value))], [(go$sliceType(Value))], false], ["CanAddr", "", [], [Go$Bool], false], ["CanInterface", "", [], [Go$Bool], false], ["CanSet", "", [], [Go$Bool], false], ["Cap", "", [], [Go$Int], false], ["Close", "", [], [], false], ["Complex", "", [], [Go$Complex128], false], ["Convert", "", [Type], [Value], false], ["Elem", "", [], [Value], false], ["Field", "", [Go$Int], [Value], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [Value], false], ["FieldByName", "", [Go$String], [Value], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [Value], false], ["Float", "", [], [Go$Float64], false], ["Index", "", [Go$Int], [Value], false], ["Int", "", [], [Go$Int64], false], ["Interface", "", [], [go$emptyInterface], false], ["InterfaceData", "", [], [(go$arrayType(Go$Uintptr, 2))], false], ["IsNil", "", [], [Go$Bool], false], ["IsValid", "", [], [Go$Bool], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["MapIndex", "", [Value], [Value], false], ["MapKeys", "", [], [(go$sliceType(Value))], false], ["Method", "", [Go$Int], [Value], false], ["MethodByName", "", [Go$String], [Value], false], ["NumField", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["OverflowComplex", "", [Go$Complex128], [Go$Bool], false], ["OverflowFloat", "", [Go$Float64], [Go$Bool], false], ["OverflowInt", "", [Go$Int64], [Go$Bool], false], ["OverflowUint", "", [Go$Uint64], [Go$Bool], false], ["Pointer", "", [], [Go$Uintptr], false], ["Recv", "", [], [Value, Go$Bool], false], ["Send", "", [Value], [], false], ["Set", "", [Value], [], false], ["SetBool", "", [Go$Bool], [], false], ["SetBytes", "", [(go$sliceType(Go$Uint8))], [], false], ["SetCap", "", [Go$Int], [], false], ["SetComplex", "", [Go$Complex128], [], false], ["SetFloat", "", [Go$Float64], [], false], ["SetInt", "", [Go$Int64], [], false], ["SetLen", "", [Go$Int], [], false], ["SetMapIndex", "", [Value, Value], [], false], ["SetPointer", "", [Go$UnsafePointer], [], false], ["SetString", "", [Go$String], [], false], ["SetUint", "", [Go$Uint64], [], false], ["Slice", "", [Go$Int, Go$Int], [Value], false], ["Slice3", "", [Go$Int, Go$Int, Go$Int], [Value], false], ["String", "", [], [Go$String], false], ["TryRecv", "", [], [Value, Go$Bool], false], ["TrySend", "", [Value], [Go$Bool], false], ["Type", "", [], [Type], false], ["Uint", "", [], [Go$Uint64], false], ["UnsafeAddr", "", [], [Go$Uintptr], false], ["assignTo", "reflect", [Go$String, (go$ptrType(rtype)), (go$ptrType(go$emptyInterface))], [Value], false], ["call", "reflect", [Go$String, (go$sliceType(Value))], [(go$sliceType(Value))], false], ["iword", "reflect", [], [iword], false], ["kind", "reflect", [], [Kind], false], ["mustBe", "reflect", [Kind], [], false], ["mustBeAssignable", "reflect", [], [], false], ["mustBeExported", "reflect", [], [], false], ["recv", "reflect", [Go$Bool], [Value, Go$Bool], false], ["runes", "reflect", [], [(go$sliceType(Go$Int32))], false], ["send", "reflect", [Value, Go$Bool], [Go$Bool], false], ["setRunes", "reflect", [(go$sliceType(Go$Int32))], [], false]];
		(go$ptrType(Value)).methods = [["Addr", "", [], [Value], false], ["Bool", "", [], [Go$Bool], false], ["Bytes", "", [], [(go$sliceType(Go$Uint8))], false], ["Call", "", [(go$sliceType(Value))], [(go$sliceType(Value))], false], ["CallSlice", "", [(go$sliceType(Value))], [(go$sliceType(Value))], false], ["CanAddr", "", [], [Go$Bool], false], ["CanInterface", "", [], [Go$Bool], false], ["CanSet", "", [], [Go$Bool], false], ["Cap", "", [], [Go$Int], false], ["Close", "", [], [], false], ["Complex", "", [], [Go$Complex128], false], ["Convert", "", [Type], [Value], false], ["Elem", "", [], [Value], false], ["Field", "", [Go$Int], [Value], false], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [Value], false], ["FieldByName", "", [Go$String], [Value], false], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [Value], false], ["Float", "", [], [Go$Float64], false], ["Index", "", [Go$Int], [Value], false], ["Int", "", [], [Go$Int64], false], ["Interface", "", [], [go$emptyInterface], false], ["InterfaceData", "", [], [(go$arrayType(Go$Uintptr, 2))], false], ["IsNil", "", [], [Go$Bool], false], ["IsValid", "", [], [Go$Bool], false], ["Kind", "", [], [Kind], false], ["Len", "", [], [Go$Int], false], ["MapIndex", "", [Value], [Value], false], ["MapKeys", "", [], [(go$sliceType(Value))], false], ["Method", "", [Go$Int], [Value], false], ["MethodByName", "", [Go$String], [Value], false], ["NumField", "", [], [Go$Int], false], ["NumMethod", "", [], [Go$Int], false], ["OverflowComplex", "", [Go$Complex128], [Go$Bool], false], ["OverflowFloat", "", [Go$Float64], [Go$Bool], false], ["OverflowInt", "", [Go$Int64], [Go$Bool], false], ["OverflowUint", "", [Go$Uint64], [Go$Bool], false], ["Pointer", "", [], [Go$Uintptr], false], ["Recv", "", [], [Value, Go$Bool], false], ["Send", "", [Value], [], false], ["Set", "", [Value], [], false], ["SetBool", "", [Go$Bool], [], false], ["SetBytes", "", [(go$sliceType(Go$Uint8))], [], false], ["SetCap", "", [Go$Int], [], false], ["SetComplex", "", [Go$Complex128], [], false], ["SetFloat", "", [Go$Float64], [], false], ["SetInt", "", [Go$Int64], [], false], ["SetLen", "", [Go$Int], [], false], ["SetMapIndex", "", [Value, Value], [], false], ["SetPointer", "", [Go$UnsafePointer], [], false], ["SetString", "", [Go$String], [], false], ["SetUint", "", [Go$Uint64], [], false], ["Slice", "", [Go$Int, Go$Int], [Value], false], ["Slice3", "", [Go$Int, Go$Int, Go$Int], [Value], false], ["String", "", [], [Go$String], false], ["TryRecv", "", [], [Value, Go$Bool], false], ["TrySend", "", [Value], [Go$Bool], false], ["Type", "", [], [Type], false], ["Uint", "", [], [Go$Uint64], false], ["UnsafeAddr", "", [], [Go$Uintptr], false], ["assignTo", "reflect", [Go$String, (go$ptrType(rtype)), (go$ptrType(go$emptyInterface))], [Value], false], ["call", "reflect", [Go$String, (go$sliceType(Value))], [(go$sliceType(Value))], false], ["iword", "reflect", [], [iword], false], ["kind", "reflect", [], [Kind], false], ["mustBe", "reflect", [Kind], [], false], ["mustBeAssignable", "reflect", [], [], false], ["mustBeExported", "reflect", [], [], false], ["recv", "reflect", [Go$Bool], [Value, Go$Bool], false], ["runes", "reflect", [], [(go$sliceType(Go$Int32))], false], ["send", "reflect", [Value, Go$Bool], [Go$Bool], false], ["setRunes", "reflect", [(go$sliceType(Go$Int32))], [], false]];
		flag.methods = [["kind", "reflect", [], [Kind], false], ["mustBe", "reflect", [Kind], [], false], ["mustBeAssignable", "reflect", [], [], false], ["mustBeExported", "reflect", [], [], false]];
		(go$ptrType(flag)).methods = [["kind", "reflect", [], [Kind], false], ["mustBe", "reflect", [Kind], [], false], ["mustBeAssignable", "reflect", [], [], false], ["mustBeExported", "reflect", [], [], false]];
		ValueError.init([["Method", "", Go$String, ""], ["Kind", "", Kind, ""]]);
		(go$ptrType(ValueError)).methods = [["Error", "", [], [Go$String], false]];
		kindNames = new (go$sliceType(Go$String))(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		var x;
		uint8Type = (x = TypeOf(new Go$Uint8(0)), (x !== null && x.constructor === (go$ptrType(rtype)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(rtype)))));
	}
	return go$pkg;
})();
go$packages["fmt"] = (function() {
	var go$pkg = {}, strconv = go$packages["strconv"], utf8 = go$packages["unicode/utf8"], errors = go$packages["errors"], io = go$packages["io"], os = go$packages["os"], reflect = go$packages["reflect"], sync = go$packages["sync"], math = go$packages["math"], fmt, State, Formatter, Stringer, GoStringer, buffer, pp, cache, runeUnreader, ScanState, scanError, ss, ssave, doPrec, newCache, newPrinter, Fprintf, Printf, Sprintf, Errorf, Fprint, Print, Sprint, Fprintln, Println, Sprintln, getField, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, space, ssFree, complexError, boolError;
	fmt = go$pkg.fmt = go$newType(0, "Struct", "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_) {
		this.go$val = this;
		this.intbuf = intbuf_ !== undefined ? intbuf_ : go$makeNativeArray("Uint8", 65, function() { return 0; });
		this.buf = buf_ !== undefined ? buf_ : (go$ptrType(buffer)).nil;
		this.wid = wid_ !== undefined ? wid_ : 0;
		this.prec = prec_ !== undefined ? prec_ : 0;
		this.widPresent = widPresent_ !== undefined ? widPresent_ : false;
		this.precPresent = precPresent_ !== undefined ? precPresent_ : false;
		this.minus = minus_ !== undefined ? minus_ : false;
		this.plus = plus_ !== undefined ? plus_ : false;
		this.sharp = sharp_ !== undefined ? sharp_ : false;
		this.space = space_ !== undefined ? space_ : false;
		this.unicode = unicode_ !== undefined ? unicode_ : false;
		this.uniQuote = uniQuote_ !== undefined ? uniQuote_ : false;
		this.zero = zero_ !== undefined ? zero_ : false;
	});
	State = go$pkg.State = go$newType(0, "Interface", "fmt.State", "State", "fmt", null);
	Formatter = go$pkg.Formatter = go$newType(0, "Interface", "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = go$pkg.Stringer = go$newType(0, "Interface", "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = go$pkg.GoStringer = go$newType(0, "Interface", "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = go$pkg.buffer = go$newType(0, "Slice", "fmt.buffer", "buffer", "fmt", null);
	pp = go$pkg.pp = go$newType(0, "Struct", "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.go$val = this;
		this.n = n_ !== undefined ? n_ : 0;
		this.panicking = panicking_ !== undefined ? panicking_ : false;
		this.erroring = erroring_ !== undefined ? erroring_ : false;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.arg = arg_ !== undefined ? arg_ : null;
		this.value = value_ !== undefined ? value_ : new reflect.Value.Ptr();
		this.reordered = reordered_ !== undefined ? reordered_ : false;
		this.goodArgNum = goodArgNum_ !== undefined ? goodArgNum_ : false;
		this.runeBuf = runeBuf_ !== undefined ? runeBuf_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.fmt = fmt_ !== undefined ? fmt_ : new fmt.Ptr();
	});
	cache = go$pkg.cache = go$newType(0, "Struct", "fmt.cache", "cache", "fmt", function(mu_, saved_, new$2_) {
		this.go$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.saved = saved_ !== undefined ? saved_ : (go$sliceType(go$emptyInterface)).nil;
		this.new$2 = new$2_ !== undefined ? new$2_ : go$throwNilPointerError;
	});
	runeUnreader = go$pkg.runeUnreader = go$newType(0, "Interface", "fmt.runeUnreader", "runeUnreader", "fmt", null);
	ScanState = go$pkg.ScanState = go$newType(0, "Interface", "fmt.ScanState", "ScanState", "fmt", null);
	scanError = go$pkg.scanError = go$newType(0, "Struct", "fmt.scanError", "scanError", "fmt", function(err_) {
		this.go$val = this;
		this.err = err_ !== undefined ? err_ : null;
	});
	ss = go$pkg.ss = go$newType(0, "Struct", "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.go$val = this;
		this.rr = rr_ !== undefined ? rr_ : null;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.peekRune = peekRune_ !== undefined ? peekRune_ : 0;
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
		this.count = count_ !== undefined ? count_ : 0;
		this.atEOF = atEOF_ !== undefined ? atEOF_ : false;
		this.ssave = ssave_ !== undefined ? ssave_ : new ssave.Ptr();
	});
	ssave = go$pkg.ssave = go$newType(0, "Struct", "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.go$val = this;
		this.validSave = validSave_ !== undefined ? validSave_ : false;
		this.nlIsEnd = nlIsEnd_ !== undefined ? nlIsEnd_ : false;
		this.nlIsSpace = nlIsSpace_ !== undefined ? nlIsSpace_ : false;
		this.argLimit = argLimit_ !== undefined ? argLimit_ : 0;
		this.limit = limit_ !== undefined ? limit_ : 0;
		this.maxWid = maxWid_ !== undefined ? maxWid_ : 0;
	});
	fmt.Ptr.prototype.clearflags = function() {
		var f;
		f = this;
		f.wid = 0;
		f.widPresent = false;
		f.prec = 0;
		f.precPresent = false;
		f.minus = false;
		f.plus = false;
		f.sharp = false;
		f.space = false;
		f.unicode = false;
		f.uniQuote = false;
		f.zero = false;
	};
	fmt.prototype.clearflags = function() { return this.go$val.clearflags(); };
	fmt.Ptr.prototype.init = function(buf) {
		var f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.go$val.init(buf); };
	fmt.Ptr.prototype.computePadding = function(width) {
		var padding, leftWidth, rightWidth, f, left, w, _tuple, _tuple$1, _tuple$2;
		padding = (go$sliceType(Go$Uint8)).nil;
		leftWidth = 0;
		rightWidth = 0;
		f = this;
		left = !f.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.zero) {
				_tuple = [padZeroBytes, w, 0], padding = _tuple[0], leftWidth = _tuple[1], rightWidth = _tuple[2];
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tuple$1 = [padSpaceBytes, w, 0], padding = _tuple$1[0], leftWidth = _tuple$1[1], rightWidth = _tuple$1[2];
				return [padding, leftWidth, rightWidth];
			} else {
				_tuple$2 = [padSpaceBytes, 0, w], padding = _tuple$2[0], leftWidth = _tuple$2[1], rightWidth = _tuple$2[2];
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.go$val.computePadding(width); };
	fmt.Ptr.prototype.writePadding = function(n, padding) {
		var f, m;
		f = this;
		while (n > 0) {
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write(go$subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.go$val.writePadding(n, padding); };
	fmt.Ptr.prototype.pad = function(b) {
		var f, _tuple, padding, left, right;
		f = this;
		if (!f.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(b.length), padding = _tuple[0], left = _tuple[1], right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.go$val.pad(b); };
	fmt.Ptr.prototype.padString = function(s) {
		var f, _tuple, padding, left, right;
		f = this;
		if (!f.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s)), padding = _tuple[0], left = _tuple[1], right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.go$val.padString(s); };
	fmt.Ptr.prototype.fmt_boolean = function(v) {
		var f;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.go$val.fmt_boolean(v); };
	fmt.Ptr.prototype.integer = function(a, base, signedness, digits) {
		var f, buf, negative, prec, i, ua, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _ref, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _slice$11, _index$11, runeWidth, width, j, _slice$12, _index$12, _slice$13, _index$13, _slice$14, _index$14;
		f = this;
		if (f.precPresent && (f.prec === 0) && (a.high === 0 && a.low === 0)) {
			return;
		}
		buf = go$subslice(new (go$sliceType(Go$Uint8))(f.intbuf), 0);
		if (f.widPresent && f.wid > 65) {
			buf = (go$sliceType(Go$Uint8)).make(f.wid, 0, function() { return 0; });
		}
		negative = signedness === true && (a.high < 0 || (a.high === 0 && a.low < 0));
		if (negative) {
			a = new Go$Int64(-a.high, -a.low);
		}
		prec = 0;
		if (f.precPresent) {
			prec = f.prec;
			f.zero = false;
		} else if (f.zero && f.widPresent && !f.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.plus || f.space) {
				prec = prec - 1 >> 0;
			}
		}
		i = buf.length;
		ua = new Go$Uint64(a.high, a.low);
		while ((ua.high > base.high || (ua.high === base.high && ua.low >= base.low))) {
			i = i - 1 >> 0;
			_slice = buf, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = digits.charCodeAt(go$flatten64(go$div64(ua, base, true)))) : go$throwRuntimeError("index out of range");
			ua = go$div64(ua, (base), false);
		}
		i = i - 1 >> 0;
		_slice$1 = buf, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = digits.charCodeAt(go$flatten64(ua))) : go$throwRuntimeError("index out of range");
		while (i > 0 && prec > (buf.length - i >> 0)) {
			i = i - 1 >> 0;
			_slice$2 = buf, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 48) : go$throwRuntimeError("index out of range");
		}
		if (f.sharp) {
			_ref = base;
			if ((_ref.high === 0 && _ref.low === 8)) {
				if (!(((_slice$3 = buf, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) === 48))) {
					i = i - 1 >> 0;
					_slice$4 = buf, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = 48) : go$throwRuntimeError("index out of range");
				}
			} else if ((_ref.high === 0 && _ref.low === 16)) {
				i = i - 1 >> 0;
				_slice$5 = buf, _index$5 = i, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = (120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24) : go$throwRuntimeError("index out of range");
				i = i - 1 >> 0;
				_slice$6 = buf, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = 48) : go$throwRuntimeError("index out of range");
			}
		}
		if (f.unicode) {
			i = i - 1 >> 0;
			_slice$7 = buf, _index$7 = i, (_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = 43) : go$throwRuntimeError("index out of range");
			i = i - 1 >> 0;
			_slice$8 = buf, _index$8 = i, (_index$8 >= 0 && _index$8 < _slice$8.length) ? (_slice$8.array[_slice$8.offset + _index$8] = 85) : go$throwRuntimeError("index out of range");
		}
		if (negative) {
			i = i - 1 >> 0;
			_slice$9 = buf, _index$9 = i, (_index$9 >= 0 && _index$9 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$9] = 45) : go$throwRuntimeError("index out of range");
		} else if (f.plus) {
			i = i - 1 >> 0;
			_slice$10 = buf, _index$10 = i, (_index$10 >= 0 && _index$10 < _slice$10.length) ? (_slice$10.array[_slice$10.offset + _index$10] = 43) : go$throwRuntimeError("index out of range");
		} else if (f.space) {
			i = i - 1 >> 0;
			_slice$11 = buf, _index$11 = i, (_index$11 >= 0 && _index$11 < _slice$11.length) ? (_slice$11.array[_slice$11.offset + _index$11] = 32) : go$throwRuntimeError("index out of range");
		}
		if (f.unicode && f.uniQuote && (a.high > 0 || (a.high === 0 && a.low >= 0)) && (a.high < 0 || (a.high === 0 && a.low <= 1114111)) && strconv.IsPrint(((a.low + ((a.high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.low + ((a.high >> 31) * 4294967296)) >> 0));
			width = (2 + runeWidth >> 0) + 1 >> 0;
			go$copySlice(go$subslice(buf, (i - width >> 0)), go$subslice(buf, i));
			i = i - (width) >> 0;
			j = buf.length - width >> 0;
			_slice$12 = buf, _index$12 = j, (_index$12 >= 0 && _index$12 < _slice$12.length) ? (_slice$12.array[_slice$12.offset + _index$12] = 32) : go$throwRuntimeError("index out of range");
			j = j + 1 >> 0;
			_slice$13 = buf, _index$13 = j, (_index$13 >= 0 && _index$13 < _slice$13.length) ? (_slice$13.array[_slice$13.offset + _index$13] = 39) : go$throwRuntimeError("index out of range");
			j = j + 1 >> 0;
			utf8.EncodeRune(go$subslice(buf, j), ((a.low + ((a.high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			_slice$14 = buf, _index$14 = j, (_index$14 >= 0 && _index$14 < _slice$14.length) ? (_slice$14.array[_slice$14.offset + _index$14] = 39) : go$throwRuntimeError("index out of range");
		}
		f.pad(go$subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.go$val.integer(a, base, signedness, digits); };
	fmt.Ptr.prototype.truncate = function(s) {
		var f, n, _ref, _i, _rune, i;
		f = this;
		if (f.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = go$decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - 1 >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.go$val.truncate(s); };
	fmt.Ptr.prototype.fmt_s = function(s) {
		var f;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.go$val.fmt_s(s); };
	fmt.Ptr.prototype.fmt_sbx = function(s, b, digits) {
		var f, n, x, buf, i, c, _slice, _index;
		f = this;
		n = b.length;
		if (b === (go$sliceType(Go$Uint8)).nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = (go$sliceType(Go$Uint8)).nil;
		i = 0;
		while (i < n) {
			if (i > 0 && f.space) {
				buf = go$append(buf, 32);
			}
			if (f.sharp) {
				buf = go$append(buf, 48, x);
			}
			c = 0;
			if (b === (go$sliceType(Go$Uint8)).nil) {
				c = s.charCodeAt(i);
			} else {
				c = (_slice = b, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			}
			buf = go$append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + 1 >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.go$val.fmt_sbx(s, b, digits); };
	fmt.Ptr.prototype.fmt_sx = function(s, digits) {
		var f;
		f = this;
		f.fmt_sbx(s, (go$sliceType(Go$Uint8)).nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.go$val.fmt_sx(s, digits); };
	fmt.Ptr.prototype.fmt_bx = function(b, digits) {
		var f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.go$val.fmt_bx(b, digits); };
	fmt.Ptr.prototype.fmt_q = function(s) {
		var f, quoted;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.go$val.fmt_q(s); };
	fmt.Ptr.prototype.fmt_qc = function(c) {
		var f, quoted;
		f = this;
		quoted = (go$sliceType(Go$Uint8)).nil;
		if (f.plus) {
			quoted = strconv.AppendQuoteRuneToASCII(go$subslice(new (go$sliceType(Go$Uint8))(f.intbuf), 0, 0), ((c.low + ((c.high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune(go$subslice(new (go$sliceType(Go$Uint8))(f.intbuf), 0, 0), ((c.low + ((c.high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.go$val.fmt_qc(c); };
	doPrec = function(f, def) {
		if (f.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.Ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var f, slice, _ref, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		f = this;
		f.intbuf[0] = 32;
		slice = strconv.AppendFloat(go$subslice(new (go$sliceType(Go$Uint8))(f.intbuf), 0, 1), v, verb, prec, n);
		_ref = (_slice = slice, _index = 1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (_ref === 45 || _ref === 43) {
			if (f.zero && f.widPresent && f.wid > slice.length) {
				f.buf.WriteByte((_slice$1 = slice, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
				f.wid = f.wid - 1 >> 0;
				f.pad(go$subslice(slice, 2));
				return;
			}
			slice = go$subslice(slice, 1);
		} else {
			if (f.plus) {
				_slice$2 = slice, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 43) : go$throwRuntimeError("index out of range");
			} else if (f.space) {
			} else {
				slice = go$subslice(slice, 1);
			}
		}
		f.pad(slice);
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.go$val.formatFloat(v, verb, prec, n); };
	fmt.Ptr.prototype.fmt_e64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.go$val.fmt_e64(v); };
	fmt.Ptr.prototype.fmt_E64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.go$val.fmt_E64(v); };
	fmt.Ptr.prototype.fmt_f64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.go$val.fmt_f64(v); };
	fmt.Ptr.prototype.fmt_g64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.go$val.fmt_g64(v); };
	fmt.Ptr.prototype.fmt_G64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.go$val.fmt_G64(v); };
	fmt.Ptr.prototype.fmt_fb64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.go$val.fmt_fb64(v); };
	fmt.Ptr.prototype.fmt_e32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$float32frombits(go$float32bits(v)), 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.go$val.fmt_e32(v); };
	fmt.Ptr.prototype.fmt_E32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$float32frombits(go$float32bits(v)), 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.go$val.fmt_E32(v); };
	fmt.Ptr.prototype.fmt_f32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$float32frombits(go$float32bits(v)), 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.go$val.fmt_f32(v); };
	fmt.Ptr.prototype.fmt_g32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$float32frombits(go$float32bits(v)), 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.go$val.fmt_g32(v); };
	fmt.Ptr.prototype.fmt_G32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$float32frombits(go$float32bits(v)), 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.go$val.fmt_G32(v); };
	fmt.Ptr.prototype.fmt_fb32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$float32frombits(go$float32bits(v)), 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.go$val.fmt_fb32(v); };
	fmt.Ptr.prototype.fmt_c64 = function(v, verb) {
		var f, r, oldPlus, i, _ref;
		f = this;
		f.buf.WriteByte(40);
		r = v.real;
		oldPlus = f.plus;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.fmt_fb32(r);
			} else if (_ref === 101) {
				f.fmt_e32(r);
			} else if (_ref === 69) {
				f.fmt_E32(r);
			} else if (_ref === 102) {
				f.fmt_f32(r);
			} else if (_ref === 103) {
				f.fmt_g32(r);
			} else if (_ref === 71) {
				f.fmt_G32(r);
			}
			if (!((i === 0))) {
				break;
			}
			f.plus = true;
			r = v.imag;
			i = i + 1 >> 0;
		}
		f.plus = oldPlus;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.go$val.fmt_c64(v, verb); };
	fmt.Ptr.prototype.fmt_c128 = function(v, verb) {
		var f, r, oldPlus, i, _ref;
		f = this;
		f.buf.WriteByte(40);
		r = v.real;
		oldPlus = f.plus;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.fmt_fb64(r);
			} else if (_ref === 101) {
				f.fmt_e64(r);
			} else if (_ref === 69) {
				f.fmt_E64(r);
			} else if (_ref === 102) {
				f.fmt_f64(r);
			} else if (_ref === 103) {
				f.fmt_g64(r);
			} else if (_ref === 71) {
				f.fmt_G64(r);
			}
			if (!((i === 0))) {
				break;
			}
			f.plus = true;
			r = v.imag;
			i = i + 1 >> 0;
		}
		f.plus = oldPlus;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.go$val.fmt_c128(v, verb); };
	go$ptrType(buffer).prototype.Write = function(p) {
		var n, err, b, _tuple;
		n = 0;
		err = null;
		b = this;
		b.go$set(go$appendSlice(b.go$get(), p));
		_tuple = [p.length, null], n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	buffer.prototype.Write = function(p) { var obj = this; return (new (go$ptrType(buffer))(function() { return obj; }, null)).Write(p); };
	go$ptrType(buffer).prototype.WriteString = function(s) {
		var n, err, b, _tuple;
		n = 0;
		err = null;
		b = this;
		b.go$set(go$appendSlice(b.go$get(), new buffer(go$stringToBytes(s))));
		_tuple = [s.length, null], n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	buffer.prototype.WriteString = function(s) { var obj = this; return (new (go$ptrType(buffer))(function() { return obj; }, null)).WriteString(s); };
	go$ptrType(buffer).prototype.WriteByte = function(c) {
		var b;
		b = this;
		b.go$set(go$append(b.go$get(), c));
		return null;
	};
	buffer.prototype.WriteByte = function(c) { var obj = this; return (new (go$ptrType(buffer))(function() { return obj; }, null)).WriteByte(c); };
	go$ptrType(buffer).prototype.WriteRune = function(r) {
		var bp, b, n, x, w;
		bp = this;
		if (r < 128) {
			bp.go$set(go$append(bp.go$get(), (r << 24 >>> 24)));
			return null;
		}
		b = bp.go$get();
		n = b.length;
		while ((n + 4 >> 0) > b.capacity) {
			b = go$append(b, 0);
		}
		w = utf8.EncodeRune((x = go$subslice(b, n, (n + 4 >> 0)), go$subslice(new (go$sliceType(Go$Uint8))(x.array), x.offset, x.offset + x.length)), r);
		bp.go$set(go$subslice(b, 0, (n + w >> 0)));
		return null;
	};
	buffer.prototype.WriteRune = function(r) { var obj = this; return (new (go$ptrType(buffer))(function() { return obj; }, null)).WriteRune(r); };
	cache.Ptr.prototype.put = function(x) {
		var c;
		c = this;
		c.mu.Lock();
		if (c.saved.length < c.saved.capacity) {
			c.saved = go$append(c.saved, x);
		}
		c.mu.Unlock();
	};
	cache.prototype.put = function(x) { return this.go$val.put(x); };
	cache.Ptr.prototype.get = function() {
		var c, n, _slice, _index, x;
		c = this;
		c.mu.Lock();
		n = c.saved.length;
		if (n === 0) {
			c.mu.Unlock();
			return c.new$2();
		}
		x = (_slice = c.saved, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		c.saved = go$subslice(c.saved, 0, (n - 1 >> 0));
		c.mu.Unlock();
		return x;
	};
	cache.prototype.get = function() { return this.go$val.get(); };
	newCache = function(f) {
		return new cache.Ptr(new sync.Mutex.Ptr(), (go$sliceType(go$emptyInterface)).make(0, 100, function() { return null; }), f);
	};
	newPrinter = function() {
		var x, p, v;
		p = (x = ppFree.get(), (x !== null && x.constructor === (go$ptrType(pp)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(pp)))));
		p.panicking = false;
		p.erroring = false;
		p.fmt.init(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; }));
		return p;
	};
	pp.Ptr.prototype.free = function() {
		var p;
		p = this;
		if (p.buf.capacity > 1024) {
			return;
		}
		p.buf = go$subslice(p.buf, 0, 0);
		p.arg = null;
		p.value = new reflect.Value.Ptr((go$ptrType(reflect.rtype)).nil, 0, 0);
		ppFree.put(p);
	};
	pp.prototype.free = function() { return this.go$val.free(); };
	pp.Ptr.prototype.Width = function() {
		var wid, ok, p, _tuple;
		wid = 0;
		ok = false;
		p = this;
		_tuple = [p.fmt.wid, p.fmt.widPresent], wid = _tuple[0], ok = _tuple[1];
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.go$val.Width(); };
	pp.Ptr.prototype.Precision = function() {
		var prec, ok, p, _tuple;
		prec = 0;
		ok = false;
		p = this;
		_tuple = [p.fmt.prec, p.fmt.precPresent], prec = _tuple[0], ok = _tuple[1];
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.go$val.Precision(); };
	pp.Ptr.prototype.Flag = function(b) {
		var p, _ref;
		p = this;
		_ref = b;
		if (_ref === 45) {
			return p.fmt.minus;
		} else if (_ref === 43) {
			return p.fmt.plus;
		} else if (_ref === 35) {
			return p.fmt.sharp;
		} else if (_ref === 32) {
			return p.fmt.space;
		} else if (_ref === 48) {
			return p.fmt.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.go$val.Flag(b); };
	pp.Ptr.prototype.add = function(c) {
		var p, v;
		p = this;
		(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.go$val.add(c); };
	pp.Ptr.prototype.Write = function(b) {
		var ret, err, p, _tuple, v;
		ret = 0;
		err = null;
		p = this;
		_tuple = (new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).Write(b), ret = _tuple[0], err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.go$val.Write(b); };
	Fprintf = go$pkg.Fprintf = function(w, format, a) {
		var n, err, p, _tuple, x;
		n = 0;
		err = null;
		p = newPrinter();
		p.doPrintf(format, a);
		_tuple = w.Write((x = p.buf, go$subslice(new (go$sliceType(Go$Uint8))(x.array), x.offset, x.offset + x.length))), n = _tuple[0], err = _tuple[1];
		p.free();
		return [n, err];
	};
	Printf = go$pkg.Printf = function(format, a) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = Fprintf(os.Stdout, format, a), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	Sprintf = go$pkg.Sprintf = function(format, a) {
		var p, s;
		p = newPrinter();
		p.doPrintf(format, a);
		s = go$bytesToString(p.buf);
		p.free();
		return s;
	};
	Errorf = go$pkg.Errorf = function(format, a) {
		return errors.New(Sprintf(format, a));
	};
	Fprint = go$pkg.Fprint = function(w, a) {
		var n, err, p, _tuple, x;
		n = 0;
		err = null;
		p = newPrinter();
		p.doPrint(a, false, false);
		_tuple = w.Write((x = p.buf, go$subslice(new (go$sliceType(Go$Uint8))(x.array), x.offset, x.offset + x.length))), n = _tuple[0], err = _tuple[1];
		p.free();
		return [n, err];
	};
	Print = go$pkg.Print = function(a) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = Fprint(os.Stdout, a), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	Sprint = go$pkg.Sprint = function(a) {
		var p, s;
		p = newPrinter();
		p.doPrint(a, false, false);
		s = go$bytesToString(p.buf);
		p.free();
		return s;
	};
	Fprintln = go$pkg.Fprintln = function(w, a) {
		var n, err, p, _tuple, x;
		n = 0;
		err = null;
		p = newPrinter();
		p.doPrint(a, true, true);
		_tuple = w.Write((x = p.buf, go$subslice(new (go$sliceType(Go$Uint8))(x.array), x.offset, x.offset + x.length))), n = _tuple[0], err = _tuple[1];
		p.free();
		return [n, err];
	};
	Println = go$pkg.Println = function(a) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = Fprintln(os.Stdout, a), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	Sprintln = go$pkg.Sprintln = function(a) {
		var p, s;
		p = newPrinter();
		p.doPrint(a, true, true);
		s = go$bytesToString(p.buf);
		p.free();
		return s;
	};
	getField = function(v, i) {
		var _struct, val, _struct$1, _struct$2;
		val = (_struct = v.Field(i), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if ((val.Kind() === 20) && !val.IsNil()) {
			val = (_struct$1 = val.Elem(), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		return (_struct$2 = val, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
	};
	parsenum = function(s, start, end) {
		var num, isnum, newi, _tuple, x;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tuple = [0, false, end], num = _tuple[0], isnum = _tuple[1], newi = _tuple[2];
			return [num, isnum, newi];
		}
		newi = start;
		while (newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57) {
			num = (x = 10, (((num >>> 16 << 16) * x >> 0) + (num << 16 >>> 16) * x) >> 0) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + 1 >> 0;
		}
		return [num, isnum, newi];
	};
	pp.Ptr.prototype.unknownType = function(v) {
		var p, v$1, v$2, v$3, v$4;
		p = this;
		if (go$interfaceIsEqual(v, null)) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(nilAngleBytes);
			return;
		}
		(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).WriteByte(63);
		(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).WriteString(reflect.TypeOf(v).String());
		(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(63);
	};
	pp.prototype.unknownType = function(v) { return this.go$val.unknownType(v); };
	pp.Ptr.prototype.badVerb = function(verb) {
		var p, v, v$1, _struct, v$2;
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
		if (!(go$interfaceIsEqual(p.arg, null))) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(reflect.TypeOf(p.arg).String());
			p.add(61);
			p.printArg(p.arg, 118, false, false, 0);
		} else if (p.value.IsValid()) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteString(p.value.Type().String());
			p.add(61);
			p.printValue((_struct = p.value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), 118, false, false, 0);
		} else {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(nilAngleBytes);
		}
		p.add(41);
		p.erroring = false;
	};
	pp.prototype.badVerb = function(verb) { return this.go$val.badVerb(verb); };
	pp.Ptr.prototype.fmtBool = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 116 || _ref === 118) {
			p.fmt.fmt_boolean(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBool = function(v, verb) { return this.go$val.fmtBool(v, verb); };
	pp.Ptr.prototype.fmtC = function(c) {
		var p, r, x, w;
		p = this;
		r = ((c.low + ((c.high >> 31) * 4294967296)) >> 0);
		if (!((x = new Go$Int64(0, r), (x.high === c.high && x.low === c.low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune(go$subslice(new (go$sliceType(Go$Uint8))(p.runeBuf), 0, 4), r);
		p.fmt.pad(go$subslice(new (go$sliceType(Go$Uint8))(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.go$val.fmtC(c); };
	pp.Ptr.prototype.fmtInt64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(v, new Go$Uint64(0, 2), true, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(v);
		} else if (_ref === 100 || _ref === 118) {
			p.fmt.integer(v, new Go$Uint64(0, 10), true, "0123456789abcdef");
		} else if (_ref === 111) {
			p.fmt.integer(v, new Go$Uint64(0, 8), true, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.high || (0 === v.high && 0 <= v.low)) && (v.high < 0 || (v.high === 0 && v.low <= 1114111))) {
				p.fmt.fmt_qc(v);
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(v, new Go$Uint64(0, 16), true, "0123456789abcdef");
		} else if (_ref === 85) {
			p.fmtUnicode(v);
		} else if (_ref === 88) {
			p.fmt.integer(v, new Go$Uint64(0, 16), true, "0123456789ABCDEF");
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.go$val.fmtInt64(v, verb); };
	pp.Ptr.prototype.fmt0x64 = function(v, leading0x) {
		var p, sharp;
		p = this;
		sharp = p.fmt.sharp;
		p.fmt.sharp = leading0x;
		p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.go$val.fmt0x64(v, leading0x); };
	pp.Ptr.prototype.fmtUnicode = function(v) {
		var p, precPresent, sharp, prec;
		p = this;
		precPresent = p.fmt.precPresent;
		sharp = p.fmt.sharp;
		p.fmt.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.precPresent = true;
		}
		p.fmt.unicode = true;
		p.fmt.uniQuote = sharp;
		p.fmt.integer(v, new Go$Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.unicode = false;
		p.fmt.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.precPresent = precPresent;
		p.fmt.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.go$val.fmtUnicode(v); };
	pp.Ptr.prototype.fmtUint64 = function(v, verb, goSyntax) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 2), false, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(new Go$Int64(v.high, v.low));
		} else if (_ref === 100) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 10), false, "0123456789abcdef");
		} else if (_ref === 118) {
			if (goSyntax) {
				p.fmt0x64(v, true);
			} else {
				p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 10), false, "0123456789abcdef");
			}
		} else if (_ref === 111) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 8), false, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.high || (0 === v.high && 0 <= v.low)) && (v.high < 0 || (v.high === 0 && v.low <= 1114111))) {
				p.fmt.fmt_qc(new Go$Int64(v.high, v.low));
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 16), false, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 16), false, "0123456789ABCDEF");
		} else if (_ref === 85) {
			p.fmtUnicode(new Go$Int64(v.high, v.low));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtUint64 = function(v, verb, goSyntax) { return this.go$val.fmtUint64(v, verb, goSyntax); };
	pp.Ptr.prototype.fmtFloat32 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb32(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e32(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E32(v);
		} else if (_ref === 102) {
			p.fmt.fmt_f32(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g32(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G32(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.go$val.fmtFloat32(v, verb); };
	pp.Ptr.prototype.fmtFloat64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb64(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e64(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E64(v);
		} else if (_ref === 102) {
			p.fmt.fmt_f64(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g64(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G64(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.go$val.fmtFloat64(v, verb); };
	pp.Ptr.prototype.fmtComplex64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c64(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c64(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.go$val.fmtComplex64(v, verb); };
	pp.Ptr.prototype.fmtComplex128 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c128(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c128(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.go$val.fmtComplex128(v, verb); };
	pp.Ptr.prototype.fmtString = function(v, verb, goSyntax) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 118) {
			if (goSyntax) {
				p.fmt.fmt_q(v);
			} else {
				p.fmt.fmt_s(v);
			}
		} else if (_ref === 115) {
			p.fmt.fmt_s(v);
		} else if (_ref === 120) {
			p.fmt.fmt_sx(v, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.fmt_sx(v, "0123456789ABCDEF");
		} else if (_ref === 113) {
			p.fmt.fmt_q(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtString = function(v, verb, goSyntax) { return this.go$val.fmtString(v, verb, goSyntax); };
	pp.Ptr.prototype.fmtBytes = function(v, verb, goSyntax, typ, depth) {
		var p, v$1, v$2, v$3, v$4, _ref, _i, _slice, _index, c, i, v$5, v$6, v$7, v$8, _ref$1;
		p = this;
		if ((verb === 118) || (verb === 100)) {
			if (goSyntax) {
				if (go$interfaceIsEqual(typ, null)) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(bytesBytes);
				} else {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).WriteString(typ.String());
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).WriteByte(123);
				}
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(91);
			}
			_ref = v;
			_i = 0;
			while (_i < _ref.length) {
				c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (i > 0) {
					if (goSyntax) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$5) { p.buf = v$5; })).Write(commaSpaceBytes);
					} else {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$6) { p.buf = v$6; })).WriteByte(32);
					}
				}
				p.printArg(new Go$Uint8(c), 118, p.fmt.plus, goSyntax, depth + 1 >> 0);
				_i++;
			}
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$7) { p.buf = v$7; })).WriteByte(125);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$8) { p.buf = v$8; })).WriteByte(93);
			}
			return;
		}
		_ref$1 = verb;
		if (_ref$1 === 115) {
			p.fmt.fmt_s(go$bytesToString(v));
		} else if (_ref$1 === 120) {
			p.fmt.fmt_bx(v, "0123456789abcdef");
		} else if (_ref$1 === 88) {
			p.fmt.fmt_bx(v, "0123456789ABCDEF");
		} else if (_ref$1 === 113) {
			p.fmt.fmt_q(go$bytesToString(v));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBytes = function(v, verb, goSyntax, typ, depth) { return this.go$val.fmtBytes(v, verb, goSyntax, typ, depth); };
	pp.Ptr.prototype.fmtPointer = function(value, verb, goSyntax) {
		var p, use0x64, _ref, u, _ref$1, v, v$1, v$2;
		p = this;
		use0x64 = true;
		_ref = verb;
		if (_ref === 112 || _ref === 118) {
		} else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) {
			use0x64 = false;
		} else {
			p.badVerb(verb);
			return;
		}
		u = 0;
		_ref$1 = value.Kind();
		if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) {
			u = value.Pointer();
		} else {
			p.badVerb(verb);
			return;
		}
		if (goSyntax) {
			p.add(40);
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(value.Type().String());
			p.add(41);
			p.add(40);
			if (u === 0) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(nilBytes);
			} else {
				p.fmt0x64(new Go$Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
		} else if ((verb === 118) && (u === 0)) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(nilAngleBytes);
		} else {
			if (use0x64) {
				p.fmt0x64(new Go$Uint64(0, u.constructor === Number ? u : 1), !p.fmt.sharp);
			} else {
				p.fmtUint64(new Go$Uint64(0, u.constructor === Number ? u : 1), verb, false);
			}
		}
	};
	pp.prototype.fmtPointer = function(value, verb, goSyntax) { return this.go$val.fmtPointer(value, verb, goSyntax); };
	pp.Ptr.prototype.catchPanic = function(arg, verb) {
		var p, err, v, _struct, v$1, v$2, v$3, v$4;
		p = this;
		if (err = go$recover(), !(go$interfaceIsEqual(err, null))) {
			if (v = (_struct = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), (v.Kind() === 22) && v.IsNil()) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(nilAngleBytes);
				return;
			}
			if (p.panicking) {
				throw go$panic(err);
			}
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(percentBangBytes);
			p.add(verb);
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(panicBytes);
			p.panicking = true;
			p.printArg(err, 118, false, false, 0);
			p.panicking = false;
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(41);
		}
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.go$val.catchPanic(arg, verb); };
	pp.Ptr.prototype.handleMethods = function(verb, plus, goSyntax, depth) {
		var wasString, handled, p, ok, _tuple, x, formatter, ok$1, _tuple$1, x$1, stringer, _ref, v, _ref$1, _type;
		wasString = false;
		handled = false;
		var go$deferred = [];
		try {
			p = this;
			if (p.erroring) {
				return [wasString, handled];
			}
			if (_tuple = (x = p.arg, (x !== null && Formatter.implementedBy.indexOf(x.constructor) !== -1 ? [x, true] : [null, false])), formatter = _tuple[0], ok = _tuple[1], ok) {
				handled = true;
				wasString = false;
				go$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
				formatter.Format(p, verb);
				return [wasString, handled];
			}
			if (plus) {
				p.fmt.plus = false;
			}
			if (goSyntax) {
				p.fmt.sharp = false;
				if (_tuple$1 = (x$1 = p.arg, (x$1 !== null && GoStringer.implementedBy.indexOf(x$1.constructor) !== -1 ? [x$1, true] : [null, false])), stringer = _tuple$1[0], ok$1 = _tuple$1[1], ok$1) {
					wasString = false;
					handled = true;
					go$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
					p.fmtString(stringer.GoString(), 115, false);
					return [wasString, handled];
				}
			} else {
				_ref = verb;
				if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) {
					_ref$1 = p.arg;
					_type = _ref$1 !== null ? _ref$1.constructor : null;
					if (go$error.implementedBy.indexOf(_type) !== -1) {
						v = _ref$1;
						wasString = false;
						handled = true;
						go$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
						p.printArg(new Go$String(v.Error()), verb, plus, false, depth);
						return [wasString, handled];
					} else if (Stringer.implementedBy.indexOf(_type) !== -1) {
						v = _ref$1;
						wasString = false;
						handled = true;
						go$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
						p.printArg(new Go$String(v.String()), verb, plus, false, depth);
						return [wasString, handled];
					}
				}
			}
			handled = false;
			return [wasString, handled];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [wasString, handled];
		}
	};
	pp.prototype.handleMethods = function(verb, plus, goSyntax, depth) { return this.go$val.handleMethods(verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printArg = function(arg, verb, plus, goSyntax, depth) {
		var wasString, p, _ref, _struct, oldPlus, oldSharp, f, _ref$1, _type, handled, _tuple, isString, _struct$1;
		wasString = false;
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.Ptr((go$ptrType(reflect.rtype)).nil, 0, 0);
		if (go$interfaceIsEqual(arg, null)) {
			if ((verb === 84) || (verb === 118)) {
				p.fmt.pad(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new Go$String(reflect.TypeOf(arg).String()), 115, false, false, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer((_struct = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), verb, goSyntax);
			wasString = false;
			return wasString;
		}
		oldPlus = p.fmt.plus;
		oldSharp = p.fmt.sharp;
		if (plus) {
			p.fmt.plus = false;
		}
		if (goSyntax) {
			p.fmt.sharp = false;
		}
		_ref$1 = arg;
		_type = _ref$1 !== null ? _ref$1.constructor : null;
		if (_type === Go$Bool) {
			f = _ref$1.go$val;
			p.fmtBool(f, verb);
		} else if (_type === Go$Float32) {
			f = _ref$1.go$val;
			p.fmtFloat32(f, verb);
		} else if (_type === Go$Float64) {
			f = _ref$1.go$val;
			p.fmtFloat64(f, verb);
		} else if (_type === Go$Complex64) {
			f = _ref$1.go$val;
			p.fmtComplex64(f, verb);
		} else if (_type === Go$Complex128) {
			f = _ref$1.go$val;
			p.fmtComplex128(f, verb);
		} else if (_type === Go$Int) {
			f = _ref$1.go$val;
			p.fmtInt64(new Go$Int64(0, f), verb);
		} else if (_type === Go$Int8) {
			f = _ref$1.go$val;
			p.fmtInt64(new Go$Int64(0, f), verb);
		} else if (_type === Go$Int16) {
			f = _ref$1.go$val;
			p.fmtInt64(new Go$Int64(0, f), verb);
		} else if (_type === Go$Int32) {
			f = _ref$1.go$val;
			p.fmtInt64(new Go$Int64(0, f), verb);
		} else if (_type === Go$Int64) {
			f = _ref$1.go$val;
			p.fmtInt64(f, verb);
		} else if (_type === Go$Uint) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f), verb, goSyntax);
		} else if (_type === Go$Uint8) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f), verb, goSyntax);
		} else if (_type === Go$Uint16) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f), verb, goSyntax);
		} else if (_type === Go$Uint32) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f), verb, goSyntax);
		} else if (_type === Go$Uint64) {
			f = _ref$1.go$val;
			p.fmtUint64(f, verb, goSyntax);
		} else if (_type === Go$Uintptr) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f.constructor === Number ? f : 1), verb, goSyntax);
		} else if (_type === Go$String) {
			f = _ref$1.go$val;
			p.fmtString(f, verb, goSyntax);
			wasString = (verb === 115) || (verb === 118);
		} else if (_type === (go$sliceType(Go$Uint8))) {
			f = _ref$1.go$val;
			p.fmtBytes(f, verb, goSyntax, null, depth);
			wasString = verb === 115;
		} else {
			f = _ref$1;
			p.fmt.plus = oldPlus;
			p.fmt.sharp = oldSharp;
			if (_tuple = p.handleMethods(verb, plus, goSyntax, depth), isString = _tuple[0], handled = _tuple[1], handled) {
				wasString = isString;
				return wasString;
			}
			wasString = p.printReflectValue((_struct$1 = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), verb, plus, goSyntax, depth);
			return wasString;
		}
		p.arg = null;
		return wasString;
	};
	pp.prototype.printArg = function(arg, verb, plus, goSyntax, depth) { return this.go$val.printArg(arg, verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printValue = function(value, verb, plus, goSyntax, depth) {
		var wasString, p, v, _ref, _struct, handled, _tuple, isString, _struct$1;
		wasString = false;
		p = this;
		if (!value.IsValid()) {
			if ((verb === 84) || (verb === 118)) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).Write(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new Go$String(value.Type().String()), 115, false, false, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer((_struct = value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), verb, goSyntax);
			wasString = false;
			return wasString;
		}
		p.arg = null;
		if (value.CanInterface()) {
			p.arg = value.Interface();
		}
		if (_tuple = p.handleMethods(verb, plus, goSyntax, depth), isString = _tuple[0], handled = _tuple[1], handled) {
			wasString = isString;
			return wasString;
		}
		wasString = p.printReflectValue((_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), verb, plus, goSyntax, depth);
		return wasString;
	};
	pp.prototype.printValue = function(value, verb, plus, goSyntax, depth) { return this.go$val.printValue(value, verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printReflectValue = function(value, verb, plus, goSyntax, depth) {
		var wasString, p, _struct, oldValue, _struct$1, _struct$2, f, _ref, x, v, v$1, v$2, v$3, keys, _ref$1, _i, _slice, _index, _struct$3, key, i, v$4, v$5, _struct$4, v$6, _struct$5, _struct$6, v$7, v$8, v$9, _struct$7, v$10, t, i$1, v$11, v$12, f$1, _struct$8, v$13, v$14, _struct$9, _struct$10, v$15, _struct$11, value$1, v$16, v$17, v$18, _struct$12, typ, bytes, _ref$2, _i$1, i$2, _slice$1, _index$1, v$19, v$20, v$21, v$22, i$3, v$23, v$24, _struct$13, v$25, v$26, v$27, _struct$14, a, _ref$3, v$28, _struct$15, v$29, _struct$16, _struct$17, _struct$18, _struct$19;
		wasString = false;
		p = this;
		oldValue = (_struct = p.value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		p.value = (_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		f = (_struct$2 = value, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		_ref = f.Kind();
		BigSwitch:
		switch (0) { default: if (_ref === 1) {
			p.fmtBool(f.Bool(), verb);
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			p.fmtInt64(f.Int(), verb);
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			p.fmtUint64(f.Uint(), verb, goSyntax);
		} else if (_ref === 13 || _ref === 14) {
			if (f.Type().Size() === 4) {
				p.fmtFloat32(f.Float(), verb);
			} else {
				p.fmtFloat64(f.Float(), verb);
			}
		} else if (_ref === 15 || _ref === 16) {
			if (f.Type().Size() === 8) {
				p.fmtComplex64((x = f.Complex(), new Go$Complex64(x.real, x.imag)), verb);
			} else {
				p.fmtComplex128(f.Complex(), verb);
			}
		} else if (_ref === 24) {
			p.fmtString(f.String(), verb, goSyntax);
		} else if (_ref === 21) {
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(f.Type().String());
				if (f.IsNil()) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteString("(nil)");
					break;
				}
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).WriteByte(123);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(mapBytes);
			}
			keys = f.MapKeys();
			_ref$1 = keys;
			_i = 0;
			while (_i < _ref$1.length) {
				key = (_struct$3 = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
				i = _i;
				if (i > 0) {
					if (goSyntax) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).Write(commaSpaceBytes);
					} else {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$5) { p.buf = v$5; })).WriteByte(32);
					}
				}
				p.printValue((_struct$4 = key, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), verb, plus, goSyntax, depth + 1 >> 0);
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$6) { p.buf = v$6; })).WriteByte(58);
				p.printValue((_struct$6 = f.MapIndex((_struct$5 = key, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag))), new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)), verb, plus, goSyntax, depth + 1 >> 0);
				_i++;
			}
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$7) { p.buf = v$7; })).WriteByte(125);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$8) { p.buf = v$8; })).WriteByte(93);
			}
		} else if (_ref === 25) {
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$9) { p.buf = v$9; })).WriteString(value.Type().String());
			}
			p.add(123);
			v$10 = (_struct$7 = f, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag));
			t = v$10.Type();
			i$1 = 0;
			while (i$1 < v$10.NumField()) {
				if (i$1 > 0) {
					if (goSyntax) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$11) { p.buf = v$11; })).Write(commaSpaceBytes);
					} else {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$12) { p.buf = v$12; })).WriteByte(32);
					}
				}
				if (plus || goSyntax) {
					if (f$1 = (_struct$8 = t.Field(i$1), new reflect.StructField.Ptr(_struct$8.Name, _struct$8.PkgPath, _struct$8.Type, _struct$8.Tag, _struct$8.Offset, _struct$8.Index, _struct$8.Anonymous)), !(f$1.Name === "")) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$13) { p.buf = v$13; })).WriteString(f$1.Name);
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$14) { p.buf = v$14; })).WriteByte(58);
					}
				}
				p.printValue((_struct$10 = getField((_struct$9 = v$10, new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag)), i$1), new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag)), verb, plus, goSyntax, depth + 1 >> 0);
				i$1 = i$1 + 1 >> 0;
			}
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$15) { p.buf = v$15; })).WriteByte(125);
		} else if (_ref === 20) {
			value$1 = (_struct$11 = f.Elem(), new reflect.Value.Ptr(_struct$11.typ, _struct$11.val, _struct$11.flag));
			if (!value$1.IsValid()) {
				if (goSyntax) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$16) { p.buf = v$16; })).WriteString(f.Type().String());
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$17) { p.buf = v$17; })).Write(nilParenBytes);
				} else {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$18) { p.buf = v$18; })).Write(nilAngleBytes);
				}
			} else {
				wasString = p.printValue((_struct$12 = value$1, new reflect.Value.Ptr(_struct$12.typ, _struct$12.val, _struct$12.flag)), verb, plus, goSyntax, depth + 1 >> 0);
			}
		} else if (_ref === 17 || _ref === 23) {
			if (typ = f.Type(), typ.Elem().Kind() === 8) {
				bytes = (go$sliceType(Go$Uint8)).nil;
				if (f.Kind() === 23) {
					bytes = f.Bytes();
				} else if (f.CanAddr()) {
					bytes = f.Slice(0, f.Len()).Bytes();
				} else {
					bytes = (go$sliceType(Go$Uint8)).make(f.Len(), 0, function() { return 0; });
					_ref$2 = bytes;
					_i$1 = 0;
					while (_i$1 < _ref$2.length) {
						i$2 = _i$1;
						_slice$1 = bytes, _index$1 = i$2, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (f.Index(i$2).Uint().low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
						_i$1++;
					}
				}
				p.fmtBytes(bytes, verb, goSyntax, typ, depth);
				wasString = verb === 115;
				break;
			}
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$19) { p.buf = v$19; })).WriteString(value.Type().String());
				if ((f.Kind() === 23) && f.IsNil()) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$20) { p.buf = v$20; })).WriteString("(nil)");
					break;
				}
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$21) { p.buf = v$21; })).WriteByte(123);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$22) { p.buf = v$22; })).WriteByte(91);
			}
			i$3 = 0;
			while (i$3 < f.Len()) {
				if (i$3 > 0) {
					if (goSyntax) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$23) { p.buf = v$23; })).Write(commaSpaceBytes);
					} else {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$24) { p.buf = v$24; })).WriteByte(32);
					}
				}
				p.printValue((_struct$13 = f.Index(i$3), new reflect.Value.Ptr(_struct$13.typ, _struct$13.val, _struct$13.flag)), verb, plus, goSyntax, depth + 1 >> 0);
				i$3 = i$3 + 1 >> 0;
			}
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$25) { p.buf = v$25; })).WriteByte(125);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$26) { p.buf = v$26; })).WriteByte(93);
			}
		} else if (_ref === 22) {
			v$27 = f.Pointer();
			if (!((v$27 === 0)) && (depth === 0)) {
				a = (_struct$14 = f.Elem(), new reflect.Value.Ptr(_struct$14.typ, _struct$14.val, _struct$14.flag));
				_ref$3 = a.Kind();
				if (_ref$3 === 17 || _ref$3 === 23) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$28) { p.buf = v$28; })).WriteByte(38);
					p.printValue((_struct$15 = a, new reflect.Value.Ptr(_struct$15.typ, _struct$15.val, _struct$15.flag)), verb, plus, goSyntax, depth + 1 >> 0);
					break BigSwitch;
				} else if (_ref$3 === 25) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$29) { p.buf = v$29; })).WriteByte(38);
					p.printValue((_struct$16 = a, new reflect.Value.Ptr(_struct$16.typ, _struct$16.val, _struct$16.flag)), verb, plus, goSyntax, depth + 1 >> 0);
					break BigSwitch;
				}
			}
			p.fmtPointer((_struct$17 = value, new reflect.Value.Ptr(_struct$17.typ, _struct$17.val, _struct$17.flag)), verb, goSyntax);
		} else if (_ref === 18 || _ref === 19 || _ref === 26) {
			p.fmtPointer((_struct$18 = value, new reflect.Value.Ptr(_struct$18.typ, _struct$18.val, _struct$18.flag)), verb, goSyntax);
		} else {
			p.unknownType(new f.constructor.Struct(f));
		} }
		p.value = (_struct$19 = oldValue, new reflect.Value.Ptr(_struct$19.typ, _struct$19.val, _struct$19.flag));
		wasString = wasString;
		return wasString;
	};
	pp.prototype.printReflectValue = function(value, verb, plus, goSyntax, depth) { return this.go$val.printReflectValue(value, verb, plus, goSyntax, depth); };
	intFromArg = function(a, argNum) {
		var num, isInt, newArgNum, _tuple, x, _slice, _index;
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		if (argNum < a.length) {
			_tuple = (x = (_slice = a, _index = argNum, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === Go$Int ? [x.go$val, true] : [0, false])), num = _tuple[0], isInt = _tuple[1];
			newArgNum = argNum + 1 >> 0;
		}
		return [num, isInt, newArgNum];
	};
	parseArgNumber = function(format) {
		var index, wid, ok, i, _tuple, width, ok$1, newi, _tuple$1, _tuple$2, _tuple$3;
		index = 0;
		wid = 0;
		ok = false;
		i = 1;
		while (i < format.length) {
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i), width = _tuple[0], ok$1 = _tuple[1], newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tuple$1 = [0, i + 1 >> 0, false], index = _tuple$1[0], wid = _tuple$1[1], ok = _tuple$1[2];
					return [index, wid, ok];
				}
				_tuple$2 = [width - 1 >> 0, i + 1 >> 0, true], index = _tuple$2[0], wid = _tuple$2[1], ok = _tuple$2[2];
				return [index, wid, ok];
			}
			i = i + 1 >> 0;
		}
		_tuple$3 = [0, 1, false], index = _tuple$3[0], wid = _tuple$3[1], ok = _tuple$3[2];
		return [index, wid, ok];
	};
	pp.Ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var newArgNum, newi, found, p, _tuple, _tuple$1, index, wid, ok, _tuple$2, _tuple$3;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tuple = [argNum, i, false], newArgNum = _tuple[0], newi = _tuple[1], found = _tuple[2];
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple$1 = parseArgNumber(format.substring(i)), index = _tuple$1[0], wid = _tuple$1[1], ok = _tuple$1[2];
		if (ok && 0 <= index && index < numArgs) {
			_tuple$2 = [index, i + wid >> 0, true], newArgNum = _tuple$2[0], newi = _tuple$2[1], found = _tuple$2[2];
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tuple$3 = [argNum, i + wid >> 0, true], newArgNum = _tuple$3[0], newi = _tuple$3[1], found = _tuple$3[2];
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.go$val.argNumber(argNum, format, i, numArgs); };
	pp.Ptr.prototype.doPrintf = function(format, a) {
		var p, end, argNum, afterIndex, i, lasti, v, _ref, _tuple, _tuple$1, v$1, _tuple$2, _tuple$3, _tuple$4, v$2, _tuple$5, _tuple$6, v$3, _tuple$7, c, w, v$4, v$5, v$6, v$7, v$8, _slice, _index, arg, goSyntax, plus, v$9, _slice$1, _index$1, arg$1, v$10, v$11, v$12, v$13;
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		while (i < end) {
			p.goodArgNum = true;
			lasti = i;
			while (i < end && !((format.charCodeAt(i) === 37))) {
				i = i + 1 >> 0;
			}
			if (i > lasti) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				break;
			}
			i = i + 1 >> 0;
			p.fmt.clearflags();
			F:
			while (i < end) {
				_ref = format.charCodeAt(i);
				if (_ref === 35) {
					p.fmt.sharp = true;
				} else if (_ref === 48) {
					p.fmt.zero = true;
				} else if (_ref === 43) {
					p.fmt.plus = true;
				} else if (_ref === 45) {
					p.fmt.minus = true;
				} else if (_ref === 32) {
					p.fmt.space = true;
				} else {
					break F;
				}
				i = i + 1 >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.length), argNum = _tuple[0], i = _tuple[1], afterIndex = _tuple[2];
			if (i < end && (format.charCodeAt(i) === 42)) {
				i = i + 1 >> 0;
				_tuple$1 = intFromArg(a, argNum), p.fmt.wid = _tuple$1[0], p.fmt.widPresent = _tuple$1[1], argNum = _tuple$1[2];
				if (!p.fmt.widPresent) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(badWidthBytes);
				}
				afterIndex = false;
			} else {
				_tuple$2 = parsenum(format, i, end), p.fmt.wid = _tuple$2[0], p.fmt.widPresent = _tuple$2[1], i = _tuple$2[2];
				if (afterIndex && p.fmt.widPresent) {
					p.goodArgNum = false;
				}
			}
			if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {
				i = i + 1 >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.length), argNum = _tuple$3[0], i = _tuple$3[1], afterIndex = _tuple$3[2];
				if (format.charCodeAt(i) === 42) {
					i = i + 1 >> 0;
					_tuple$4 = intFromArg(a, argNum), p.fmt.prec = _tuple$4[0], p.fmt.precPresent = _tuple$4[1], argNum = _tuple$4[2];
					if (!p.fmt.precPresent) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(badPrecBytes);
					}
					afterIndex = false;
				} else {
					_tuple$5 = parsenum(format, i, end), p.fmt.prec = _tuple$5[0], p.fmt.precPresent = _tuple$5[1], i = _tuple$5[2];
					if (!p.fmt.precPresent) {
						p.fmt.prec = 0;
						p.fmt.precPresent = true;
					}
				}
			}
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.length), argNum = _tuple$6[0], i = _tuple$6[1], afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(noVerbBytes);
				continue;
			}
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i)), c = _tuple$7[0], w = _tuple$7[1];
			i = i + (w) >> 0;
			if (c === 37) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(37);
				continue;
			}
			if (!p.goodArgNum) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$5) { p.buf = v$5; })).Write(percentBangBytes);
				p.add(c);
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$6) { p.buf = v$6; })).Write(badIndexBytes);
				continue;
			} else if (argNum >= a.length) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$7) { p.buf = v$7; })).Write(percentBangBytes);
				p.add(c);
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$8) { p.buf = v$8; })).Write(missingBytes);
				continue;
			}
			arg = (_slice = a, _index = argNum, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			argNum = argNum + 1 >> 0;
			goSyntax = (c === 118) && p.fmt.sharp;
			plus = (c === 118) && p.fmt.plus;
			p.printArg(arg, c, plus, goSyntax, 0);
		}
		if (!p.reordered && argNum < a.length) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$9) { p.buf = v$9; })).Write(extraBytes);
			while (argNum < a.length) {
				arg$1 = (_slice$1 = a, _index$1 = argNum, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				if (!(go$interfaceIsEqual(arg$1, null))) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$10) { p.buf = v$10; })).WriteString(reflect.TypeOf(arg$1).String());
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$11) { p.buf = v$11; })).WriteByte(61);
				}
				p.printArg(arg$1, 118, false, false, 0);
				if ((argNum + 1 >> 0) < a.length) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$12) { p.buf = v$12; })).Write(commaSpaceBytes);
				}
				argNum = argNum + 1 >> 0;
			}
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$13) { p.buf = v$13; })).WriteByte(41);
		}
	};
	pp.prototype.doPrintf = function(format, a) { return this.go$val.doPrintf(format, a); };
	pp.Ptr.prototype.doPrint = function(a, addspace, addnewline) {
		var p, prevString, argNum, _slice, _index, arg, isString, v, v$1;
		p = this;
		prevString = false;
		argNum = 0;
		while (argNum < a.length) {
			p.fmt.clearflags();
			arg = (_slice = a, _index = argNum, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (argNum > 0) {
				isString = !(go$interfaceIsEqual(arg, null)) && (reflect.TypeOf(arg).Kind() === 24);
				if (addspace || !isString && !prevString) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteByte(32);
				}
			}
			prevString = p.printArg(arg, 118, false, false, 0);
			argNum = argNum + 1 >> 0;
		}
		if (addnewline) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteByte(10);
		}
	};
	pp.prototype.doPrint = function(a, addspace, addnewline) { return this.go$val.doPrint(a, addspace, addnewline); };
	ss.Ptr.prototype.Read = function(buf) {
		var n, err, s, _tuple;
		n = 0;
		err = null;
		s = this;
		_tuple = [0, errors.New("ScanState's Read should not be called. Use ReadRune")], n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.go$val.Read(buf); };
	ss.Ptr.prototype.ReadRune = function() {
		var r, size, err, s, _tuple;
		r = 0;
		size = 0;
		err = null;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + 1 >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_tuple = s.rr.ReadRune(), r = _tuple[0], size = _tuple[1], err = _tuple[2];
		if (go$interfaceIsEqual(err, null)) {
			s.count = s.count + 1 >> 0;
			s.prevRune = r;
		} else if (go$interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
	};
	ss.prototype.ReadRune = function() { return this.go$val.ReadRune(); };
	ss.Ptr.prototype.Width = function() {
		var wid, ok, s, _tuple, _tuple$1;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tuple = [0, false], wid = _tuple[0], ok = _tuple[1];
			return [wid, ok];
		}
		_tuple$1 = [s.ssave.maxWid, true], wid = _tuple$1[0], ok = _tuple$1[1];
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.go$val.Width(); };
	ss.Ptr.prototype.getRune = function() {
		var r, s, _tuple, err;
		r = 0;
		s = this;
		_tuple = s.ReadRune(), r = _tuple[0], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			if (go$interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
	};
	ss.prototype.getRune = function() { return this.go$val.getRune(); };
	ss.Ptr.prototype.UnreadRune = function() {
		var s, ok, _tuple, x, u;
		s = this;
		if (_tuple = (x = s.rr, (x !== null && runeUnreader.implementedBy.indexOf(x.constructor) !== -1 ? [x, true] : [null, false])), u = _tuple[0], ok = _tuple[1], ok) {
			u.UnreadRune();
		} else {
			s.peekRune = s.prevRune;
		}
		s.prevRune = -1;
		s.count = s.count - 1 >> 0;
		return null;
	};
	ss.prototype.UnreadRune = function() { return this.go$val.UnreadRune(); };
	ss.Ptr.prototype.error = function(err) {
		var s, x;
		s = this;
		throw go$panic((x = new scanError.Ptr(err), new x.constructor.Struct(x)));
	};
	ss.prototype.error = function(err) { return this.go$val.error(err); };
	ss.Ptr.prototype.errorString = function(err) {
		var s, x;
		s = this;
		throw go$panic((x = new scanError.Ptr(errors.New(err)), new x.constructor.Struct(x)));
	};
	ss.prototype.errorString = function(err) { return this.go$val.errorString(err); };
	ss.Ptr.prototype.Token = function(skipSpace, f) {
		var tok, err, s;
		tok = (go$sliceType(Go$Uint8)).nil;
		err = null;
		var go$deferred = [];
		try {
			s = this;
			go$deferred.push({ fun: (function() {
				var e, ok, _tuple, _struct, se;
				if (e = go$recover(), !(go$interfaceIsEqual(e, null))) {
					if (_tuple = (e !== null && e.constructor === scanError ? [e.go$val, true] : [new scanError.Ptr(), false]), se = (_struct = _tuple[0], new scanError.Ptr(_struct.err)), ok = _tuple[1], ok) {
						err = se.err;
					} else {
						throw go$panic(e);
					}
				}
			}), args: [] });
			if (f === go$throwNilPointerError) {
				f = notSpace;
			}
			s.buf = go$subslice(s.buf, 0, 0);
			tok = s.token(skipSpace, f);
			return [tok, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [tok, err];
		}
	};
	ss.prototype.Token = function(skipSpace, f) { return this.go$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var rx, _ref, _i, _slice, _index, rng;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (_i < _ref.length) {
			rng = go$mapArray((_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), function(entry) { return entry; });
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		return !isSpace(r);
	};
	ss.Ptr.prototype.SkipSpace = function() {
		var s;
		s = this;
		s.skipSpace(false);
	};
	ss.prototype.SkipSpace = function() { return this.go$val.SkipSpace(); };
	ss.Ptr.prototype.free = function(old) {
		var s, _struct;
		s = this;
		if (old.validSave) {
			s.ssave = (_struct = old, new ssave.Ptr(_struct.validSave, _struct.nlIsEnd, _struct.nlIsSpace, _struct.argLimit, _struct.limit, _struct.maxWid));
			return;
		}
		if (s.buf.capacity > 1024) {
			return;
		}
		s.buf = go$subslice(s.buf, 0, 0);
		s.rr = null;
		ssFree.put(s);
	};
	ss.prototype.free = function(old) { return this.go$val.free(old); };
	ss.Ptr.prototype.skipSpace = function(stopAtNewline) {
		var s, r;
		s = this;
		while (true) {
			r = s.getRune();
			if (r === -1) {
				return;
			}
			if ((r === 13) && s.peek("\n")) {
				continue;
			}
			if (r === 10) {
				if (stopAtNewline) {
					break;
				}
				if (s.ssave.nlIsSpace) {
					continue;
				}
				s.errorString("unexpected newline");
				return;
			}
			if (!isSpace(r)) {
				s.UnreadRune();
				break;
			}
		}
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.go$val.skipSpace(stopAtNewline); };
	ss.Ptr.prototype.token = function(skipSpace, f) {
		var s, r, v, x;
		s = this;
		if (skipSpace) {
			s.skipSpace(false);
		}
		while (true) {
			r = s.getRune();
			if (r === -1) {
				break;
			}
			if (!f(r)) {
				s.UnreadRune();
				break;
			}
			(new (go$ptrType(buffer))(function() { return s.buf; }, function(v) { s.buf = v; })).WriteRune(r);
		}
		return (x = s.buf, go$subslice(new (go$sliceType(Go$Uint8))(x.array), x.offset, x.offset + x.length));
	};
	ss.prototype.token = function(skipSpace, f) { return this.go$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _ref, _i, _rune, c, i;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			i = _i;
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.Ptr.prototype.peek = function(ok) {
		var s, r;
		s = this;
		r = s.getRune();
		if (!((r === -1))) {
			s.UnreadRune();
		}
		return indexRune(ok, r) >= 0;
	};
	ss.prototype.peek = function(ok) { return this.go$val.peek(ok); };
	go$pkg.init = function() {
		fmt.init([["intbuf", "fmt", (go$arrayType(Go$Uint8, 65)), ""], ["buf", "fmt", (go$ptrType(buffer)), ""], ["wid", "fmt", Go$Int, ""], ["prec", "fmt", Go$Int, ""], ["widPresent", "fmt", Go$Bool, ""], ["precPresent", "fmt", Go$Bool, ""], ["minus", "fmt", Go$Bool, ""], ["plus", "fmt", Go$Bool, ""], ["sharp", "fmt", Go$Bool, ""], ["space", "fmt", Go$Bool, ""], ["unicode", "fmt", Go$Bool, ""], ["uniQuote", "fmt", Go$Bool, ""], ["zero", "fmt", Go$Bool, ""]]);
		(go$ptrType(fmt)).methods = [["clearflags", "fmt", [], [], false], ["computePadding", "fmt", [Go$Int], [(go$sliceType(Go$Uint8)), Go$Int, Go$Int], false], ["fmt_E32", "fmt", [Go$Float32], [], false], ["fmt_E64", "fmt", [Go$Float64], [], false], ["fmt_G32", "fmt", [Go$Float32], [], false], ["fmt_G64", "fmt", [Go$Float64], [], false], ["fmt_boolean", "fmt", [Go$Bool], [], false], ["fmt_bx", "fmt", [(go$sliceType(Go$Uint8)), Go$String], [], false], ["fmt_c128", "fmt", [Go$Complex128, Go$Int32], [], false], ["fmt_c64", "fmt", [Go$Complex64, Go$Int32], [], false], ["fmt_e32", "fmt", [Go$Float32], [], false], ["fmt_e64", "fmt", [Go$Float64], [], false], ["fmt_f32", "fmt", [Go$Float32], [], false], ["fmt_f64", "fmt", [Go$Float64], [], false], ["fmt_fb32", "fmt", [Go$Float32], [], false], ["fmt_fb64", "fmt", [Go$Float64], [], false], ["fmt_g32", "fmt", [Go$Float32], [], false], ["fmt_g64", "fmt", [Go$Float64], [], false], ["fmt_q", "fmt", [Go$String], [], false], ["fmt_qc", "fmt", [Go$Int64], [], false], ["fmt_s", "fmt", [Go$String], [], false], ["fmt_sbx", "fmt", [Go$String, (go$sliceType(Go$Uint8)), Go$String], [], false], ["fmt_sx", "fmt", [Go$String, Go$String], [], false], ["formatFloat", "fmt", [Go$Float64, Go$Uint8, Go$Int, Go$Int], [], false], ["init", "fmt", [(go$ptrType(buffer))], [], false], ["integer", "fmt", [Go$Int64, Go$Uint64, Go$Bool, Go$String], [], false], ["pad", "fmt", [(go$sliceType(Go$Uint8))], [], false], ["padString", "fmt", [Go$String], [], false], ["truncate", "fmt", [Go$String], [Go$String], false], ["writePadding", "fmt", [Go$Int, (go$sliceType(Go$Uint8))], [], false]];
		State.init([["Flag", "", (go$funcType([Go$Int], [Go$Bool], false))], ["Precision", "", (go$funcType([], [Go$Int, Go$Bool], false))], ["Width", "", (go$funcType([], [Go$Int, Go$Bool], false))], ["Write", "", (go$funcType([(go$sliceType(Go$Uint8))], [Go$Int, go$error], false))]]);
		Formatter.init([["Format", "", (go$funcType([State, Go$Int32], [], false))]]);
		Stringer.init([["String", "", (go$funcType([], [Go$String], false))]]);
		GoStringer.init([["GoString", "", (go$funcType([], [Go$String], false))]]);
		buffer.init(Go$Uint8);
		(go$ptrType(buffer)).methods = [["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["WriteByte", "", [Go$Uint8], [go$error], false], ["WriteRune", "", [Go$Int32], [go$error], false], ["WriteString", "", [Go$String], [Go$Int, go$error], false]];
		pp.init([["n", "fmt", Go$Int, ""], ["panicking", "fmt", Go$Bool, ""], ["erroring", "fmt", Go$Bool, ""], ["buf", "fmt", buffer, ""], ["arg", "fmt", go$emptyInterface, ""], ["value", "fmt", reflect.Value, ""], ["reordered", "fmt", Go$Bool, ""], ["goodArgNum", "fmt", Go$Bool, ""], ["runeBuf", "fmt", (go$arrayType(Go$Uint8, 4)), ""], ["fmt", "fmt", fmt, ""]]);
		(go$ptrType(pp)).methods = [["Flag", "", [Go$Int], [Go$Bool], false], ["Precision", "", [], [Go$Int, Go$Bool], false], ["Width", "", [], [Go$Int, Go$Bool], false], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["add", "fmt", [Go$Int32], [], false], ["argNumber", "fmt", [Go$Int, Go$String, Go$Int, Go$Int], [Go$Int, Go$Int, Go$Bool], false], ["badVerb", "fmt", [Go$Int32], [], false], ["catchPanic", "fmt", [go$emptyInterface, Go$Int32], [], false], ["doPrint", "fmt", [(go$sliceType(go$emptyInterface)), Go$Bool, Go$Bool], [], false], ["doPrintf", "fmt", [Go$String, (go$sliceType(go$emptyInterface))], [], false], ["fmt0x64", "fmt", [Go$Uint64, Go$Bool], [], false], ["fmtBool", "fmt", [Go$Bool, Go$Int32], [], false], ["fmtBytes", "fmt", [(go$sliceType(Go$Uint8)), Go$Int32, Go$Bool, reflect.Type, Go$Int], [], false], ["fmtC", "fmt", [Go$Int64], [], false], ["fmtComplex128", "fmt", [Go$Complex128, Go$Int32], [], false], ["fmtComplex64", "fmt", [Go$Complex64, Go$Int32], [], false], ["fmtFloat32", "fmt", [Go$Float32, Go$Int32], [], false], ["fmtFloat64", "fmt", [Go$Float64, Go$Int32], [], false], ["fmtInt64", "fmt", [Go$Int64, Go$Int32], [], false], ["fmtPointer", "fmt", [reflect.Value, Go$Int32, Go$Bool], [], false], ["fmtString", "fmt", [Go$String, Go$Int32, Go$Bool], [], false], ["fmtUint64", "fmt", [Go$Uint64, Go$Int32, Go$Bool], [], false], ["fmtUnicode", "fmt", [Go$Int64], [], false], ["free", "fmt", [], [], false], ["handleMethods", "fmt", [Go$Int32, Go$Bool, Go$Bool, Go$Int], [Go$Bool, Go$Bool], false], ["printArg", "fmt", [go$emptyInterface, Go$Int32, Go$Bool, Go$Bool, Go$Int], [Go$Bool], false], ["printReflectValue", "fmt", [reflect.Value, Go$Int32, Go$Bool, Go$Bool, Go$Int], [Go$Bool], false], ["printValue", "fmt", [reflect.Value, Go$Int32, Go$Bool, Go$Bool, Go$Int], [Go$Bool], false], ["unknownType", "fmt", [go$emptyInterface], [], false]];
		cache.init([["mu", "fmt", sync.Mutex, ""], ["saved", "fmt", (go$sliceType(go$emptyInterface)), ""], ["new", "fmt", (go$funcType([], [go$emptyInterface], false)), ""]]);
		(go$ptrType(cache)).methods = [["get", "fmt", [], [go$emptyInterface], false], ["put", "fmt", [go$emptyInterface], [], false]];
		runeUnreader.init([["UnreadRune", "", (go$funcType([], [go$error], false))]]);
		ScanState.init([["Read", "", (go$funcType([(go$sliceType(Go$Uint8))], [Go$Int, go$error], false))], ["ReadRune", "", (go$funcType([], [Go$Int32, Go$Int, go$error], false))], ["SkipSpace", "", (go$funcType([], [], false))], ["Token", "", (go$funcType([Go$Bool, (go$funcType([Go$Int32], [Go$Bool], false))], [(go$sliceType(Go$Uint8)), go$error], false))], ["UnreadRune", "", (go$funcType([], [go$error], false))], ["Width", "", (go$funcType([], [Go$Int, Go$Bool], false))]]);
		scanError.init([["err", "fmt", go$error, ""]]);
		ss.init([["rr", "fmt", io.RuneReader, ""], ["buf", "fmt", buffer, ""], ["peekRune", "fmt", Go$Int32, ""], ["prevRune", "fmt", Go$Int32, ""], ["count", "fmt", Go$Int, ""], ["atEOF", "fmt", Go$Bool, ""], ["", "fmt", ssave, ""]]);
		(go$ptrType(ss)).methods = [["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["ReadRune", "", [], [Go$Int32, Go$Int, go$error], false], ["SkipSpace", "", [], [], false], ["Token", "", [Go$Bool, (go$funcType([Go$Int32], [Go$Bool], false))], [(go$sliceType(Go$Uint8)), go$error], false], ["UnreadRune", "", [], [go$error], false], ["Width", "", [], [Go$Int, Go$Bool], false], ["accept", "fmt", [Go$String], [Go$Bool], false], ["advance", "fmt", [Go$String], [Go$Int], false], ["complexTokens", "fmt", [], [Go$String, Go$String], false], ["consume", "fmt", [Go$String, Go$Bool], [Go$Bool], false], ["convertFloat", "fmt", [Go$String, Go$Int], [Go$Float64], false], ["convertString", "fmt", [Go$Int32], [Go$String], false], ["doScan", "fmt", [(go$sliceType(go$emptyInterface))], [Go$Int, go$error], false], ["doScanf", "fmt", [Go$String, (go$sliceType(go$emptyInterface))], [Go$Int, go$error], false], ["error", "fmt", [go$error], [], false], ["errorString", "fmt", [Go$String], [], false], ["floatToken", "fmt", [], [Go$String], false], ["free", "fmt", [ssave], [], false], ["getBase", "fmt", [Go$Int32], [Go$Int, Go$String], false], ["getRune", "fmt", [], [Go$Int32], false], ["hexByte", "fmt", [], [Go$Uint8, Go$Bool], false], ["hexDigit", "fmt", [Go$Int32], [Go$Int], false], ["hexString", "fmt", [], [Go$String], false], ["mustReadRune", "fmt", [], [Go$Int32], false], ["notEOF", "fmt", [], [], false], ["okVerb", "fmt", [Go$Int32, Go$String, Go$String], [Go$Bool], false], ["peek", "fmt", [Go$String], [Go$Bool], false], ["quotedString", "fmt", [], [Go$String], false], ["scanBasePrefix", "fmt", [], [Go$Int, Go$String, Go$Bool], false], ["scanBool", "fmt", [Go$Int32], [Go$Bool], false], ["scanComplex", "fmt", [Go$Int32, Go$Int], [Go$Complex128], false], ["scanInt", "fmt", [Go$Int32, Go$Int], [Go$Int64], false], ["scanNumber", "fmt", [Go$String, Go$Bool], [Go$String], false], ["scanOne", "fmt", [Go$Int32, go$emptyInterface], [], false], ["scanRune", "fmt", [Go$Int], [Go$Int64], false], ["scanUint", "fmt", [Go$Int32, Go$Int], [Go$Uint64], false], ["skipSpace", "fmt", [Go$Bool], [], false], ["token", "fmt", [Go$Bool, (go$funcType([Go$Int32], [Go$Bool], false))], [(go$sliceType(Go$Uint8))], false]];
		ssave.init([["validSave", "fmt", Go$Bool, ""], ["nlIsEnd", "fmt", Go$Bool, ""], ["nlIsSpace", "fmt", Go$Bool, ""], ["argLimit", "fmt", Go$Int, ""], ["limit", "fmt", Go$Int, ""], ["maxWid", "fmt", Go$Int, ""]]);
		padZeroBytes = (go$sliceType(Go$Uint8)).make(65, 0, function() { return 0; });
		padSpaceBytes = (go$sliceType(Go$Uint8)).make(65, 0, function() { return 0; });
		trueBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("true"));
		falseBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("false"));
		commaSpaceBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes(", "));
		nilAngleBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("<nil>"));
		nilParenBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("(nil)"));
		nilBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("nil"));
		mapBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("map["));
		percentBangBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!"));
		missingBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("(MISSING)"));
		badIndexBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("(BADINDEX)"));
		panicBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("(PANIC="));
		extraBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!(EXTRA "));
		irparenBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("i)"));
		bytesBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("[]byte{"));
		badWidthBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!(BADPREC)"));
		noVerbBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!(NOVERB)"));
		ppFree = newCache((function() {
			return new pp.Ptr();
		}));
		intBits = reflect.TypeOf(new Go$Int(0)).Bits();
		uintptrBits = reflect.TypeOf(new Go$Uintptr(0)).Bits();
		space = new (go$sliceType((go$arrayType(Go$Uint16, 2))))([go$toNativeArray("Uint16", [9, 13]), go$toNativeArray("Uint16", [32, 32]), go$toNativeArray("Uint16", [133, 133]), go$toNativeArray("Uint16", [160, 160]), go$toNativeArray("Uint16", [5760, 5760]), go$toNativeArray("Uint16", [6158, 6158]), go$toNativeArray("Uint16", [8192, 8202]), go$toNativeArray("Uint16", [8232, 8233]), go$toNativeArray("Uint16", [8239, 8239]), go$toNativeArray("Uint16", [8287, 8287]), go$toNativeArray("Uint16", [12288, 12288])]);
		ssFree = newCache((function() {
			return new ss.Ptr();
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		var i, _slice, _index, _slice$1, _index$1;
		i = 0;
		while (i < 65) {
			_slice = padZeroBytes, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 48) : go$throwRuntimeError("index out of range");
			_slice$1 = padSpaceBytes, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 32) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
	}
	return go$pkg;
})();
go$packages["sort"] = (function() {
	var go$pkg = {}, StringSlice, Search, SearchStrings, min, insertionSort, siftDown, heapSort, medianOfThree, swapRange, doPivot, quickSort, Sort, Strings;
	StringSlice = go$pkg.StringSlice = go$newType(0, "Slice", "sort.StringSlice", "StringSlice", "sort", null);
	Search = go$pkg.Search = function(n, f) {
		var _tuple, i, j, _q, h;
		_tuple = [0, n], i = _tuple[0], j = _tuple[1];
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if (!f(h)) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	SearchStrings = go$pkg.SearchStrings = function(a, x) {
		return Search(a.length, (function(i) {
			var _slice, _index;
			return (_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >= x;
		}));
	};
	StringSlice.prototype.Search = function(x) {
		var p;
		p = this;
		return SearchStrings(go$subslice(new (go$sliceType(Go$String))(p.array), p.offset, p.offset + p.length), x);
	};
	go$ptrType(StringSlice).prototype.Search = function(x) { return this.go$get().Search(x); };
	min = function(a, b) {
		if (a < b) {
			return a;
		}
		return b;
	};
	insertionSort = function(data, a, b) {
		var i, j;
		i = a + 1 >> 0;
		while (i < b) {
			j = i;
			while (j > a && data.Less(j, j - 1 >> 0)) {
				data.Swap(j, j - 1 >> 0);
				j = j - 1 >> 0;
			}
			i = i + 1 >> 0;
		}
	};
	siftDown = function(data, lo, hi, first) {
		var root, x, child;
		root = lo;
		while (true) {
			child = (x = 2, (((x >>> 16 << 16) * root >> 0) + (x << 16 >>> 16) * root) >> 0) + 1 >> 0;
			if (child >= hi) {
				break;
			}
			if ((child + 1 >> 0) < hi && data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0)) {
				child = child + 1 >> 0;
			}
			if (!data.Less(first + root >> 0, first + child >> 0)) {
				return;
			}
			data.Swap(first + root >> 0, first + child >> 0);
			root = child;
		}
	};
	heapSort = function(data, a, b) {
		var first, lo, hi, _q, i, i$1;
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		while (i >= 0) {
			siftDown(data, i, hi, first);
			i = i - 1 >> 0;
		}
		i$1 = hi - 1 >> 0;
		while (i$1 >= 0) {
			data.Swap(first, first + i$1 >> 0);
			siftDown(data, lo, i$1, first);
			i$1 = i$1 - 1 >> 0;
		}
	};
	medianOfThree = function(data, a, b, c) {
		var m0, m1, m2;
		m0 = b;
		m1 = a;
		m2 = c;
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
		if (data.Less(m2, m1)) {
			data.Swap(m2, m1);
		}
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
	};
	swapRange = function(data, a, b, n) {
		var i;
		i = 0;
		while (i < n) {
			data.Swap(a + i >> 0, b + i >> 0);
			i = i + 1 >> 0;
		}
	};
	doPivot = function(data, lo, hi) {
		var midlo, midhi, _q, m, _q$1, s, x, x$1, pivot, _tuple, a, b, c, d, n, _tuple$1;
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
		if ((hi - lo >> 0) > 40) {
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
			medianOfThree(data, lo, lo + s >> 0, lo + (x = 2, (((x >>> 16 << 16) * s >> 0) + (x << 16 >>> 16) * s) >> 0) >> 0);
			medianOfThree(data, m, m - s >> 0, m + s >> 0);
			medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - (x$1 = 2, (((x$1 >>> 16 << 16) * s >> 0) + (x$1 << 16 >>> 16) * s) >> 0) >> 0);
		}
		medianOfThree(data, lo, m, hi - 1 >> 0);
		pivot = lo;
		_tuple = [lo + 1 >> 0, lo + 1 >> 0, hi, hi], a = _tuple[0], b = _tuple[1], c = _tuple[2], d = _tuple[3];
		while (true) {
			while (b < c) {
				if (data.Less(b, pivot)) {
					b = b + 1 >> 0;
				} else if (!data.Less(pivot, b)) {
					data.Swap(a, b);
					a = a + 1 >> 0;
					b = b + 1 >> 0;
				} else {
					break;
				}
			}
			while (b < c) {
				if (data.Less(pivot, c - 1 >> 0)) {
					c = c - 1 >> 0;
				} else if (!data.Less(c - 1 >> 0, pivot)) {
					data.Swap(c - 1 >> 0, d - 1 >> 0);
					c = c - 1 >> 0;
					d = d - 1 >> 0;
				} else {
					break;
				}
			}
			if (b >= c) {
				break;
			}
			data.Swap(b, c - 1 >> 0);
			b = b + 1 >> 0;
			c = c - 1 >> 0;
		}
		n = min(b - a >> 0, a - lo >> 0);
		swapRange(data, lo, b - n >> 0, n);
		n = min(hi - d >> 0, d - c >> 0);
		swapRange(data, c, hi - n >> 0, n);
		_tuple$1 = [(lo + b >> 0) - a >> 0, hi - ((d - c >> 0)) >> 0], midlo = _tuple$1[0], midhi = _tuple$1[1];
		return [midlo, midhi];
	};
	quickSort = function(data, a, b, maxDepth) {
		var _tuple, mlo, mhi;
		while ((b - a >> 0) > 7) {
			if (maxDepth === 0) {
				heapSort(data, a, b);
				return;
			}
			maxDepth = maxDepth - 1 >> 0;
			_tuple = doPivot(data, a, b), mlo = _tuple[0], mhi = _tuple[1];
			if ((mlo - a >> 0) < (b - mhi >> 0)) {
				quickSort(data, a, mlo, maxDepth);
				a = mhi;
			} else {
				quickSort(data, mhi, b, maxDepth);
				b = mlo;
			}
		}
		if ((b - a >> 0) > 1) {
			insertionSort(data, a, b);
		}
	};
	Sort = go$pkg.Sort = function(data) {
		var n, maxDepth, i, x;
		n = data.Len();
		maxDepth = 0;
		i = n;
		while (i > 0) {
			maxDepth = maxDepth + 1 >> 0;
			i = i >> 1 >> 0;
		}
		maxDepth = (x = 2, (((maxDepth >>> 16 << 16) * x >> 0) + (maxDepth << 16 >>> 16) * x) >> 0);
		quickSort(data, 0, n, maxDepth);
	};
	StringSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.length;
	};
	go$ptrType(StringSlice).prototype.Len = function() { return this.go$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var p, _slice, _index, _slice$1, _index$1;
		p = this;
		return (_slice = p, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < (_slice$1 = p, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
	};
	go$ptrType(StringSlice).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var p, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		p = this;
		_tuple = [(_slice = p, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = p, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _slice$2 = p, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = p, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var p;
		p = this;
		Sort(p);
	};
	go$ptrType(StringSlice).prototype.Sort = function() { return this.go$get().Sort(); };
	Strings = go$pkg.Strings = function(a) {
		Sort(go$subslice(new StringSlice(a.array), a.offset, a.offset + a.length));
	};
	go$pkg.init = function() {
		StringSlice.init(Go$String);
		StringSlice.methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Search", "", [Go$String], [Go$Int], false], ["Sort", "", [], [], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(StringSlice)).methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Search", "", [Go$String], [Go$Int], false], ["Sort", "", [], [], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
	}
	return go$pkg;
})();
go$packages["go/token"] = (function() {
	var go$pkg = {}, fmt = go$packages["fmt"], sort = go$packages["sort"], sync = go$packages["sync"], strconv = go$packages["strconv"], Position, Pos, File, lineInfo, FileSet, serializedFile, serializedFileSet, Token, searchLineInfos, NewFileSet, searchFiles, searchInts, Lookup, tokens, keywords;
	Position = go$pkg.Position = go$newType(0, "Struct", "token.Position", "Position", "go/token", function(Filename_, Offset_, Line_, Column_) {
		this.go$val = this;
		this.Filename = Filename_ !== undefined ? Filename_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Column = Column_ !== undefined ? Column_ : 0;
	});
	Pos = go$pkg.Pos = go$newType(4, "Int", "token.Pos", "Pos", "go/token", null);
	File = go$pkg.File = go$newType(0, "Struct", "token.File", "File", "go/token", function(set_, name_, base_, size_, lines_, infos_) {
		this.go$val = this;
		this.set = set_ !== undefined ? set_ : (go$ptrType(FileSet)).nil;
		this.name = name_ !== undefined ? name_ : "";
		this.base = base_ !== undefined ? base_ : 0;
		this.size = size_ !== undefined ? size_ : 0;
		this.lines = lines_ !== undefined ? lines_ : (go$sliceType(Go$Int)).nil;
		this.infos = infos_ !== undefined ? infos_ : (go$sliceType(lineInfo)).nil;
	});
	lineInfo = go$pkg.lineInfo = go$newType(0, "Struct", "token.lineInfo", "lineInfo", "go/token", function(Offset_, Filename_, Line_) {
		this.go$val = this;
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.Filename = Filename_ !== undefined ? Filename_ : "";
		this.Line = Line_ !== undefined ? Line_ : 0;
	});
	FileSet = go$pkg.FileSet = go$newType(0, "Struct", "token.FileSet", "FileSet", "go/token", function(mutex_, base_, files_, last_) {
		this.go$val = this;
		this.mutex = mutex_ !== undefined ? mutex_ : new sync.RWMutex.Ptr();
		this.base = base_ !== undefined ? base_ : 0;
		this.files = files_ !== undefined ? files_ : (go$sliceType((go$ptrType(File)))).nil;
		this.last = last_ !== undefined ? last_ : (go$ptrType(File)).nil;
	});
	serializedFile = go$pkg.serializedFile = go$newType(0, "Struct", "token.serializedFile", "serializedFile", "go/token", function(Name_, Base_, Size_, Lines_, Infos_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Base = Base_ !== undefined ? Base_ : 0;
		this.Size = Size_ !== undefined ? Size_ : 0;
		this.Lines = Lines_ !== undefined ? Lines_ : (go$sliceType(Go$Int)).nil;
		this.Infos = Infos_ !== undefined ? Infos_ : (go$sliceType(lineInfo)).nil;
	});
	serializedFileSet = go$pkg.serializedFileSet = go$newType(0, "Struct", "token.serializedFileSet", "serializedFileSet", "go/token", function(Base_, Files_) {
		this.go$val = this;
		this.Base = Base_ !== undefined ? Base_ : 0;
		this.Files = Files_ !== undefined ? Files_ : (go$sliceType(serializedFile)).nil;
	});
	Token = go$pkg.Token = go$newType(4, "Int", "token.Token", "Token", "go/token", null);
	Position.Ptr.prototype.IsValid = function() {
		var pos;
		pos = this;
		return pos.Line > 0;
	};
	Position.prototype.IsValid = function() { return this.go$val.IsValid(); };
	Position.Ptr.prototype.String = function() {
		var _struct, pos, s;
		pos = (_struct = this, new Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
		s = pos.Filename;
		if (pos.IsValid()) {
			if (!(s === "")) {
				s = s + ":";
			}
			s = s + (fmt.Sprintf("%d:%d", new (go$sliceType(go$emptyInterface))([new Go$Int(pos.Line), new Go$Int(pos.Column)])));
		}
		if (s === "") {
			s = "-";
		}
		return s;
	};
	Position.prototype.String = function() { return this.go$val.String(); };
	Pos.prototype.IsValid = function() {
		var p;
		p = this.go$val;
		return !((p === 0));
	};
	go$ptrType(Pos).prototype.IsValid = function() { return new Pos(this.go$get()).IsValid(); };
	File.Ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.name;
	};
	File.prototype.Name = function() { return this.go$val.Name(); };
	File.Ptr.prototype.Base = function() {
		var f;
		f = this;
		return f.base;
	};
	File.prototype.Base = function() { return this.go$val.Base(); };
	File.Ptr.prototype.Size = function() {
		var f;
		f = this;
		return f.size;
	};
	File.prototype.Size = function() { return this.go$val.Size(); };
	File.Ptr.prototype.LineCount = function() {
		var f, n;
		f = this;
		f.set.mutex.RLock();
		n = f.lines.length;
		f.set.mutex.RUnlock();
		return n;
	};
	File.prototype.LineCount = function() { return this.go$val.LineCount(); };
	File.Ptr.prototype.AddLine = function(offset) {
		var f, i, _slice, _index;
		f = this;
		f.set.mutex.Lock();
		if (i = f.lines.length, ((i === 0) || (_slice = f.lines, _index = (i - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < offset) && offset < f.size) {
			f.lines = go$append(f.lines, offset);
		}
		f.set.mutex.Unlock();
	};
	File.prototype.AddLine = function(offset) { return this.go$val.AddLine(offset); };
	File.Ptr.prototype.MergeLine = function(line) {
		var f;
		var go$deferred = [];
		try {
			f = this;
			if (line <= 0) {
				throw go$panic(new Go$String("illegal line number (line numbering starts at 1)"));
			}
			f.set.mutex.Lock();
			go$deferred.push({ recv: f.set.mutex, method: "Unlock", args: [] });
			if (line >= f.lines.length) {
				throw go$panic(new Go$String("illegal line number"));
			}
			go$copySlice(go$subslice(f.lines, line), go$subslice(f.lines, (line + 1 >> 0)));
			f.lines = go$subslice(f.lines, 0, (f.lines.length - 1 >> 0));
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	File.prototype.MergeLine = function(line) { return this.go$val.MergeLine(line); };
	File.Ptr.prototype.SetLines = function(lines) {
		var f, size, _ref, _i, _slice, _index, offset, i, _slice$1, _index$1;
		f = this;
		size = f.size;
		_ref = lines;
		_i = 0;
		while (_i < _ref.length) {
			offset = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0 && offset <= (_slice$1 = lines, _index$1 = (i - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) || size <= offset) {
				return false;
			}
			_i++;
		}
		f.set.mutex.Lock();
		f.lines = lines;
		f.set.mutex.Unlock();
		return true;
	};
	File.prototype.SetLines = function(lines) { return this.go$val.SetLines(lines); };
	File.Ptr.prototype.SetLinesForContent = function(content) {
		var f, lines, line, _ref, _i, _slice, _index, b, offset;
		f = this;
		lines = (go$sliceType(Go$Int)).nil;
		line = 0;
		_ref = content;
		_i = 0;
		while (_i < _ref.length) {
			b = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			offset = _i;
			if (line >= 0) {
				lines = go$append(lines, line);
			}
			line = -1;
			if (b === 10) {
				line = offset + 1 >> 0;
			}
			_i++;
		}
		f.set.mutex.Lock();
		f.lines = lines;
		f.set.mutex.Unlock();
	};
	File.prototype.SetLinesForContent = function(content) { return this.go$val.SetLinesForContent(content); };
	File.Ptr.prototype.AddLineInfo = function(offset, filename, line) {
		var f, i, _slice, _index;
		f = this;
		f.set.mutex.Lock();
		if (i = f.infos.length, (i === 0) || (_slice = f.infos, _index = (i - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Offset < offset && offset < f.size) {
			f.infos = go$append(f.infos, new lineInfo.Ptr(offset, filename, line));
		}
		f.set.mutex.Unlock();
	};
	File.prototype.AddLineInfo = function(offset, filename, line) { return this.go$val.AddLineInfo(offset, filename, line); };
	File.Ptr.prototype.Pos = function(offset) {
		var f;
		f = this;
		if (offset > f.size) {
			throw go$panic(new Go$String("illegal file offset"));
		}
		return ((f.base + offset >> 0) >> 0);
	};
	File.prototype.Pos = function(offset) { return this.go$val.Pos(offset); };
	File.Ptr.prototype.Offset = function(p) {
		var f;
		f = this;
		if ((p >> 0) < f.base || (p >> 0) > (f.base + f.size >> 0)) {
			throw go$panic(new Go$String("illegal Pos value"));
		}
		return (p >> 0) - f.base >> 0;
	};
	File.prototype.Offset = function(p) { return this.go$val.Offset(p); };
	File.Ptr.prototype.Line = function(p) {
		var f;
		f = this;
		return f.Position(p).Line;
	};
	File.prototype.Line = function(p) { return this.go$val.Line(p); };
	searchLineInfos = function(a, x) {
		return sort.Search(a.length, (function(i) {
			var _slice, _index;
			return (_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Offset > x;
		})) - 1 >> 0;
	};
	File.Ptr.prototype.info = function(offset) {
		var filename, line, column, f, i, _slice, _index, _tuple, i$1, _slice$1, _index$1, alt, i$2;
		filename = "";
		line = 0;
		column = 0;
		f = this;
		filename = f.name;
		if (i = searchInts(f.lines, offset), i >= 0) {
			_tuple = [i + 1 >> 0, (offset - (_slice = f.lines, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0) + 1 >> 0], line = _tuple[0], column = _tuple[1];
		}
		if (f.infos.length > 0) {
			if (i$1 = searchLineInfos(f.infos, offset), i$1 >= 0) {
				alt = (_slice$1 = f.infos, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				filename = alt.Filename;
				if (i$2 = searchInts(f.lines, alt.Offset), i$2 >= 0) {
					line = line + (((alt.Line - i$2 >> 0) - 1 >> 0)) >> 0;
				}
			}
		}
		return [filename, line, column];
	};
	File.prototype.info = function(offset) { return this.go$val.info(offset); };
	File.Ptr.prototype.position = function(p) {
		var pos, f, offset, _tuple, _struct;
		pos = new Position.Ptr();
		f = this;
		offset = (p >> 0) - f.base >> 0;
		pos.Offset = offset;
		_tuple = f.info(offset), pos.Filename = _tuple[0], pos.Line = _tuple[1], pos.Column = _tuple[2];
		return (_struct = pos, new Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
	};
	File.prototype.position = function(p) { return this.go$val.position(p); };
	File.Ptr.prototype.Position = function(p) {
		var pos, f, _struct, _struct$1;
		pos = new Position.Ptr();
		f = this;
		if (!((p === 0))) {
			if ((p >> 0) < f.base || (p >> 0) > (f.base + f.size >> 0)) {
				throw go$panic(new Go$String("illegal Pos value"));
			}
			pos = (_struct = f.position(p), new Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
		}
		return (_struct$1 = pos, new Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column));
	};
	File.prototype.Position = function(p) { return this.go$val.Position(p); };
	NewFileSet = go$pkg.NewFileSet = function() {
		return new FileSet.Ptr(new sync.RWMutex.Ptr(), 1, (go$sliceType((go$ptrType(File)))).nil, (go$ptrType(File)).nil);
	};
	FileSet.Ptr.prototype.Base = function() {
		var s, b;
		s = this;
		s.mutex.RLock();
		b = s.base;
		s.mutex.RUnlock();
		return b;
	};
	FileSet.prototype.Base = function() { return this.go$val.Base(); };
	FileSet.Ptr.prototype.AddFile = function(filename, base, size) {
		var s, f;
		var go$deferred = [];
		try {
			s = this;
			s.mutex.Lock();
			go$deferred.push({ recv: s.mutex, method: "Unlock", args: [] });
			if (base < 0) {
				base = s.base;
			}
			if (base < s.base || size < 0) {
				throw go$panic(new Go$String("illegal base or size"));
			}
			f = new File.Ptr(s, filename, base, size, new (go$sliceType(Go$Int))([0]), (go$sliceType(lineInfo)).nil);
			base = base + ((size + 1 >> 0)) >> 0;
			if (base < 0) {
				throw go$panic(new Go$String("token.Pos offset overflow (> 2G of source code in file set)"));
			}
			s.base = base;
			s.files = go$append(s.files, f);
			s.last = f;
			return f;
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(File)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	FileSet.prototype.AddFile = function(filename, base, size) { return this.go$val.AddFile(filename, base, size); };
	FileSet.Ptr.prototype.Iterate = function(f) {
		var s, i, file, _slice, _index;
		s = this;
		i = 0;
		while (true) {
			file = (go$ptrType(File)).nil;
			s.mutex.RLock();
			if (i < s.files.length) {
				file = (_slice = s.files, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			}
			s.mutex.RUnlock();
			if (file === (go$ptrType(File)).nil || !f(file)) {
				break;
			}
			i = i + 1 >> 0;
		}
	};
	FileSet.prototype.Iterate = function(f) { return this.go$val.Iterate(f); };
	searchFiles = function(a, x) {
		return sort.Search(a.length, (function(i) {
			var _slice, _index;
			return (_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).base > x;
		})) - 1 >> 0;
	};
	FileSet.Ptr.prototype.file = function(p) {
		var s, f, i, _slice, _index, f$1;
		s = this;
		s.mutex.RLock();
		if (f = s.last, !(f === (go$ptrType(File)).nil) && f.base <= (p >> 0) && (p >> 0) <= (f.base + f.size >> 0)) {
			s.mutex.RUnlock();
			return f;
		}
		if (i = searchFiles(s.files, (p >> 0)), i >= 0) {
			f$1 = (_slice = s.files, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if ((p >> 0) <= (f$1.base + f$1.size >> 0)) {
				s.mutex.RUnlock();
				s.mutex.Lock();
				s.last = f$1;
				s.mutex.Unlock();
				return f$1;
			}
		}
		s.mutex.RUnlock();
		return (go$ptrType(File)).nil;
	};
	FileSet.prototype.file = function(p) { return this.go$val.file(p); };
	FileSet.Ptr.prototype.File = function(p) {
		var f, s;
		f = (go$ptrType(File)).nil;
		s = this;
		if (!((p === 0))) {
			f = s.file(p);
		}
		return f;
	};
	FileSet.prototype.File = function(p) { return this.go$val.File(p); };
	FileSet.Ptr.prototype.Position = function(p) {
		var pos, s, f, _struct, _struct$1;
		pos = new Position.Ptr();
		s = this;
		if (!((p === 0))) {
			if (f = s.file(p), !(f === (go$ptrType(File)).nil)) {
				pos = (_struct = f.position(p), new Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
			}
		}
		return (_struct$1 = pos, new Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column));
	};
	FileSet.prototype.Position = function(p) { return this.go$val.Position(p); };
	searchInts = function(a, x) {
		var _tuple, i, j, _q, h, _slice, _index;
		_tuple = [0, a.length], i = _tuple[0], j = _tuple[1];
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if ((_slice = a, _index = h, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) <= x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i - 1 >> 0;
	};
	FileSet.Ptr.prototype.Read = function(decode) {
		var s, ss, err, files, i, _slice, _index, f, _slice$1, _index$1;
		s = this;
		ss = new serializedFileSet.Ptr();
		if (err = decode(ss), !(go$interfaceIsEqual(err, null))) {
			return err;
		}
		s.mutex.Lock();
		s.base = ss.Base;
		files = (go$sliceType((go$ptrType(File)))).make(ss.Files.length, 0, function() { return (go$ptrType(File)).nil; });
		i = 0;
		while (i < ss.Files.length) {
			f = (_slice = ss.Files, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_slice$1 = files, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = new File.Ptr(s, f.Name, f.Base, f.Size, f.Lines, f.Infos)) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		s.files = files;
		s.last = (go$ptrType(File)).nil;
		s.mutex.Unlock();
		return null;
	};
	FileSet.prototype.Read = function(decode) { return this.go$val.Read(decode); };
	FileSet.Ptr.prototype.Write = function(encode) {
		var s, ss, files, _ref, _i, _slice, _index, f, i, _slice$1, _index$1;
		s = this;
		ss = new serializedFileSet.Ptr();
		s.mutex.Lock();
		ss.Base = s.base;
		files = (go$sliceType(serializedFile)).make(s.files.length, 0, function() { return new serializedFile.Ptr(); });
		_ref = s.files;
		_i = 0;
		while (_i < _ref.length) {
			f = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$1 = files, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = new serializedFile.Ptr(f.name, f.base, f.size, f.lines, f.infos)) : go$throwRuntimeError("index out of range");
			_i++;
		}
		ss.Files = files;
		s.mutex.Unlock();
		return encode(new ss.constructor.Struct(ss));
	};
	FileSet.prototype.Write = function(encode) { return this.go$val.Write(encode); };
	Token.prototype.String = function() {
		var tok, s;
		tok = this.go$val;
		s = "";
		if (0 <= tok && tok < 86) {
			s = tokens[tok];
		}
		if (s === "") {
			s = "token(" + strconv.Itoa((tok >> 0)) + ")";
		}
		return s;
	};
	go$ptrType(Token).prototype.String = function() { return new Token(this.go$get()).String(); };
	Token.prototype.Precedence = function() {
		var op, _ref;
		op = this.go$val;
		_ref = op;
		if (_ref === 35) {
			return 1;
		} else if (_ref === 34) {
			return 2;
		} else if (_ref === 39 || _ref === 44 || _ref === 40 || _ref === 45 || _ref === 41 || _ref === 46) {
			return 3;
		} else if (_ref === 12 || _ref === 13 || _ref === 18 || _ref === 19) {
			return 4;
		} else if (_ref === 14 || _ref === 15 || _ref === 16 || _ref === 20 || _ref === 21 || _ref === 17 || _ref === 22) {
			return 5;
		}
		return 0;
	};
	go$ptrType(Token).prototype.Precedence = function() { return new Token(this.go$get()).Precedence(); };
	Lookup = go$pkg.Lookup = function(ident) {
		var is_keyword, _tuple, _entry, tok;
		if (_tuple = (_entry = keywords[ident], _entry !== undefined ? [_entry.v, true] : [0, false]), tok = _tuple[0], is_keyword = _tuple[1], is_keyword) {
			return tok;
		}
		return 4;
	};
	Token.prototype.IsLiteral = function() {
		var tok;
		tok = this.go$val;
		return 3 < tok && tok < 10;
	};
	go$ptrType(Token).prototype.IsLiteral = function() { return new Token(this.go$get()).IsLiteral(); };
	Token.prototype.IsOperator = function() {
		var tok;
		tok = this.go$val;
		return 11 < tok && tok < 59;
	};
	go$ptrType(Token).prototype.IsOperator = function() { return new Token(this.go$get()).IsOperator(); };
	Token.prototype.IsKeyword = function() {
		var tok;
		tok = this.go$val;
		return 60 < tok && tok < 86;
	};
	go$ptrType(Token).prototype.IsKeyword = function() { return new Token(this.go$get()).IsKeyword(); };
	go$pkg.init = function() {
		Position.init([["Filename", "", Go$String, ""], ["Offset", "", Go$Int, ""], ["Line", "", Go$Int, ""], ["Column", "", Go$Int, ""]]);
		Position.methods = [["String", "", [], [Go$String], false]];
		(go$ptrType(Position)).methods = [["IsValid", "", [], [Go$Bool], false], ["String", "", [], [Go$String], false]];
		Pos.methods = [["IsValid", "", [], [Go$Bool], false]];
		(go$ptrType(Pos)).methods = [["IsValid", "", [], [Go$Bool], false]];
		File.init([["set", "go/token", (go$ptrType(FileSet)), ""], ["name", "go/token", Go$String, ""], ["base", "go/token", Go$Int, ""], ["size", "go/token", Go$Int, ""], ["lines", "go/token", (go$sliceType(Go$Int)), ""], ["infos", "go/token", (go$sliceType(lineInfo)), ""]]);
		(go$ptrType(File)).methods = [["AddLine", "", [Go$Int], [], false], ["AddLineInfo", "", [Go$Int, Go$String, Go$Int], [], false], ["Base", "", [], [Go$Int], false], ["Line", "", [Pos], [Go$Int], false], ["LineCount", "", [], [Go$Int], false], ["MergeLine", "", [Go$Int], [], false], ["Name", "", [], [Go$String], false], ["Offset", "", [Pos], [Go$Int], false], ["Pos", "", [Go$Int], [Pos], false], ["Position", "", [Pos], [Position], false], ["SetLines", "", [(go$sliceType(Go$Int))], [Go$Bool], false], ["SetLinesForContent", "", [(go$sliceType(Go$Uint8))], [], false], ["Size", "", [], [Go$Int], false], ["info", "go/token", [Go$Int], [Go$String, Go$Int, Go$Int], false], ["position", "go/token", [Pos], [Position], false]];
		lineInfo.init([["Offset", "", Go$Int, ""], ["Filename", "", Go$String, ""], ["Line", "", Go$Int, ""]]);
		FileSet.init([["mutex", "go/token", sync.RWMutex, ""], ["base", "go/token", Go$Int, ""], ["files", "go/token", (go$sliceType((go$ptrType(File)))), ""], ["last", "go/token", (go$ptrType(File)), ""]]);
		(go$ptrType(FileSet)).methods = [["AddFile", "", [Go$String, Go$Int, Go$Int], [(go$ptrType(File))], false], ["Base", "", [], [Go$Int], false], ["File", "", [Pos], [(go$ptrType(File))], false], ["Iterate", "", [(go$funcType([(go$ptrType(File))], [Go$Bool], false))], [], false], ["Position", "", [Pos], [Position], false], ["Read", "", [(go$funcType([go$emptyInterface], [go$error], false))], [go$error], false], ["Write", "", [(go$funcType([go$emptyInterface], [go$error], false))], [go$error], false], ["file", "go/token", [Pos], [(go$ptrType(File))], false]];
		serializedFile.init([["Name", "", Go$String, ""], ["Base", "", Go$Int, ""], ["Size", "", Go$Int, ""], ["Lines", "", (go$sliceType(Go$Int)), ""], ["Infos", "", (go$sliceType(lineInfo)), ""]]);
		serializedFileSet.init([["Base", "", Go$Int, ""], ["Files", "", (go$sliceType(serializedFile)), ""]]);
		Token.methods = [["IsKeyword", "", [], [Go$Bool], false], ["IsLiteral", "", [], [Go$Bool], false], ["IsOperator", "", [], [Go$Bool], false], ["Precedence", "", [], [Go$Int], false], ["String", "", [], [Go$String], false]];
		(go$ptrType(Token)).methods = [["IsKeyword", "", [], [Go$Bool], false], ["IsLiteral", "", [], [Go$Bool], false], ["IsOperator", "", [], [Go$Bool], false], ["Precedence", "", [], [Go$Int], false], ["String", "", [], [Go$String], false]];
		keywords = false;
		tokens = go$toNativeArray("String", ["ILLEGAL", "EOF", "COMMENT", "", "IDENT", "INT", "FLOAT", "IMAG", "CHAR", "STRING", "", "", "+", "-", "*", "/", "%", "&", "|", "^", "<<", ">>", "&^", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=", "<<=", ">>=", "&^=", "&&", "||", "<-", "++", "--", "==", "<", ">", "=", "!", "!=", "<=", ">=", ":=", "...", "(", "[", "{", ",", ".", ")", "]", "}", ";", ":", "", "", "break", "case", "chan", "const", "continue", "default", "defer", "else", "fallthrough", "for", "func", "go", "goto", "if", "import", "interface", "map", "package", "range", "return", "select", "struct", "switch", "type", "var"]);
		var i, _key;
		keywords = new Go$Map();
		i = 61;
		while (i < 86) {
			_key = tokens[i], (keywords || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: i };
			i = i + 1 >> 0;
		}
	}
	return go$pkg;
})();
go$packages["encoding/binary"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], io = go$packages["io"], math = go$packages["math"], reflect = go$packages["reflect"], bigEndian, overflow;
	bigEndian = go$pkg.bigEndian = go$newType(0, "Struct", "binary.bigEndian", "bigEndian", "encoding/binary", function() {
		this.go$val = this;
	});
	bigEndian.Ptr.prototype.Uint16 = function(b) {
		var _slice, _index, _slice$1, _index$1;
		return (((_slice = b, _index = 1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) << 16 >>> 16) | (((_slice$1 = b, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;
	};
	bigEndian.prototype.Uint16 = function(b) { return this.go$val.Uint16(b); };
	bigEndian.Ptr.prototype.PutUint16 = function(b, v) {
		var _slice, _index, _slice$1, _index$1;
		_slice = b, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = ((v >>> 8 << 16 >>> 16) << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$1 = b, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (v << 24 >>> 24)) : go$throwRuntimeError("index out of range");
	};
	bigEndian.prototype.PutUint16 = function(b, v) { return this.go$val.PutUint16(b, v); };
	bigEndian.Ptr.prototype.Uint32 = function(b) {
		var _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3;
		return (((((((_slice = b, _index = 3, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >>> 0) | (((_slice$1 = b, _index$1 = 2, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) >>> 0) << 8 >>> 0)) >>> 0) | (((_slice$2 = b, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) >>> 0) << 16 >>> 0)) >>> 0) | (((_slice$3 = b, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) >>> 0) << 24 >>> 0)) >>> 0;
	};
	bigEndian.prototype.Uint32 = function(b) { return this.go$val.Uint32(b); };
	bigEndian.Ptr.prototype.PutUint32 = function(b, v) {
		var _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3;
		_slice = b, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = ((v >>> 24 >>> 0) << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$1 = b, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = ((v >>> 16 >>> 0) << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$2 = b, _index$2 = 2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = ((v >>> 8 >>> 0) << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$3 = b, _index$3 = 3, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (v << 24 >>> 24)) : go$throwRuntimeError("index out of range");
	};
	bigEndian.prototype.PutUint32 = function(b, v) { return this.go$val.PutUint32(b, v); };
	bigEndian.Ptr.prototype.Uint64 = function(b) {
		var x, x$1, x$2, x$3, x$4, x$5, x$6, _slice, _index, x$7, _slice$1, _index$1, x$8, _slice$2, _index$2, x$9, _slice$3, _index$3, x$10, _slice$4, _index$4, x$11, _slice$5, _index$5, x$12, _slice$6, _index$6, x$13, _slice$7, _index$7;
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new Go$Uint64(0, (_slice = b, _index = 7, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))), x$7 = go$shiftLeft64(new Go$Uint64(0, (_slice$1 = b, _index$1 = 6, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))), 8), new Go$Uint64(x$6.high | x$7.high, (x$6.low | x$7.low) >>> 0)), x$8 = go$shiftLeft64(new Go$Uint64(0, (_slice$2 = b, _index$2 = 5, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))), 16), new Go$Uint64(x$5.high | x$8.high, (x$5.low | x$8.low) >>> 0)), x$9 = go$shiftLeft64(new Go$Uint64(0, (_slice$3 = b, _index$3 = 4, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))), 24), new Go$Uint64(x$4.high | x$9.high, (x$4.low | x$9.low) >>> 0)), x$10 = go$shiftLeft64(new Go$Uint64(0, (_slice$4 = b, _index$4 = 3, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"))), 32), new Go$Uint64(x$3.high | x$10.high, (x$3.low | x$10.low) >>> 0)), x$11 = go$shiftLeft64(new Go$Uint64(0, (_slice$5 = b, _index$5 = 2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"))), 40), new Go$Uint64(x$2.high | x$11.high, (x$2.low | x$11.low) >>> 0)), x$12 = go$shiftLeft64(new Go$Uint64(0, (_slice$6 = b, _index$6 = 1, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"))), 48), new Go$Uint64(x$1.high | x$12.high, (x$1.low | x$12.low) >>> 0)), x$13 = go$shiftLeft64(new Go$Uint64(0, (_slice$7 = b, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"))), 56), new Go$Uint64(x.high | x$13.high, (x.low | x$13.low) >>> 0));
	};
	bigEndian.prototype.Uint64 = function(b) { return this.go$val.Uint64(b); };
	bigEndian.Ptr.prototype.PutUint64 = function(b, v) {
		var _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7;
		_slice = b, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = (go$shiftRightUint64(v, 56).low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$1 = b, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (go$shiftRightUint64(v, 48).low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$2 = b, _index$2 = 2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (go$shiftRightUint64(v, 40).low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$3 = b, _index$3 = 3, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (go$shiftRightUint64(v, 32).low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$4 = b, _index$4 = 4, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = (go$shiftRightUint64(v, 24).low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$5 = b, _index$5 = 5, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = (go$shiftRightUint64(v, 16).low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$6 = b, _index$6 = 6, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = (go$shiftRightUint64(v, 8).low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
		_slice$7 = b, _index$7 = 7, (_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = (v.low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
	};
	bigEndian.prototype.PutUint64 = function(b, v) { return this.go$val.PutUint64(b, v); };
	bigEndian.Ptr.prototype.String = function() {
		return "BigEndian";
	};
	bigEndian.prototype.String = function() { return this.go$val.String(); };
	bigEndian.Ptr.prototype.GoString = function() {
		return "binary.BigEndian";
	};
	bigEndian.prototype.GoString = function() { return this.go$val.GoString(); };
	go$pkg.init = function() {
		bigEndian.init([]);
		bigEndian.methods = [["GoString", "", [], [Go$String], false], ["PutUint16", "", [(go$sliceType(Go$Uint8)), Go$Uint16], [], false], ["PutUint32", "", [(go$sliceType(Go$Uint8)), Go$Uint32], [], false], ["PutUint64", "", [(go$sliceType(Go$Uint8)), Go$Uint64], [], false], ["String", "", [], [Go$String], false], ["Uint16", "", [(go$sliceType(Go$Uint8))], [Go$Uint16], false], ["Uint32", "", [(go$sliceType(Go$Uint8))], [Go$Uint32], false], ["Uint64", "", [(go$sliceType(Go$Uint8))], [Go$Uint64], false]];
		(go$ptrType(bigEndian)).methods = [["GoString", "", [], [Go$String], false], ["PutUint16", "", [(go$sliceType(Go$Uint8)), Go$Uint16], [], false], ["PutUint32", "", [(go$sliceType(Go$Uint8)), Go$Uint32], [], false], ["PutUint64", "", [(go$sliceType(Go$Uint8)), Go$Uint64], [], false], ["String", "", [], [Go$String], false], ["Uint16", "", [(go$sliceType(Go$Uint8))], [Go$Uint16], false], ["Uint32", "", [(go$sliceType(Go$Uint8))], [Go$Uint32], false], ["Uint64", "", [(go$sliceType(Go$Uint8))], [Go$Uint64], false]];
		go$pkg.BigEndian = new bigEndian.Ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
	}
	return go$pkg;
})();
go$packages["math/rand"] = (function() {
	var go$pkg = {}, math = go$packages["math"], sync = go$packages["sync"], Source, Rand, lockedSource, rngSource, absInt32, NewSource, New, seedrand, ke, we, fe, kn, wn, fn, globalRand, rng_cooked;
	Source = go$pkg.Source = go$newType(0, "Interface", "rand.Source", "Source", "math/rand", null);
	Rand = go$pkg.Rand = go$newType(0, "Struct", "rand.Rand", "Rand", "math/rand", function(src_) {
		this.go$val = this;
		this.src = src_ !== undefined ? src_ : null;
	});
	lockedSource = go$pkg.lockedSource = go$newType(0, "Struct", "rand.lockedSource", "lockedSource", "math/rand", function(lk_, src_) {
		this.go$val = this;
		this.lk = lk_ !== undefined ? lk_ : new sync.Mutex.Ptr();
		this.src = src_ !== undefined ? src_ : null;
	});
	rngSource = go$pkg.rngSource = go$newType(0, "Struct", "rand.rngSource", "rngSource", "math/rand", function(tap_, feed_, vec_) {
		this.go$val = this;
		this.tap = tap_ !== undefined ? tap_ : 0;
		this.feed = feed_ !== undefined ? feed_ : 0;
		this.vec = vec_ !== undefined ? vec_ : go$makeNativeArray("Int64", 607, function() { return new Go$Int64(0, 0); });
	});
	Rand.Ptr.prototype.ExpFloat64 = function() {
		var r, j, i, x;
		r = this;
		while (true) {
			j = r.Uint32();
			i = (j & 255) >>> 0;
			x = j * go$float32frombits(go$float32bits(we[i]));
			if (j < ke[i]) {
				return x;
			}
			if (i === 0) {
				return 7.69711747013105 - math.Log(r.Float64());
			}
			if (fe[i] + r.Float64() * (fe[(i - 1 >>> 0)] - fe[i]) < math.Exp(-x)) {
				return x;
			}
		}
	};
	Rand.prototype.ExpFloat64 = function() { return this.go$val.ExpFloat64(); };
	absInt32 = function(i) {
		if (i < 0) {
			return (-i >>> 0);
		}
		return (i >>> 0);
	};
	Rand.Ptr.prototype.NormFloat64 = function() {
		var r, j, i, x, y;
		r = this;
		while (true) {
			j = (r.Uint32() >> 0);
			i = j & 127;
			x = j * go$float32frombits(go$float32bits(wn[i]));
			if (absInt32(j) < kn[i]) {
				return x;
			}
			if (i === 0) {
				while (true) {
					x = -math.Log(r.Float64()) * 0.29047645161474317;
					y = -math.Log(r.Float64());
					if (y + y >= x * x) {
						break;
					}
				}
				if (j > 0) {
					return 3.442619855899 + x;
				}
				return -3.442619855899 - x;
			}
			if (fn[i] + r.Float64() * (fn[(i - 1 >> 0)] - fn[i]) < math.Exp(-0.5 * x * x)) {
				return x;
			}
		}
	};
	Rand.prototype.NormFloat64 = function() { return this.go$val.NormFloat64(); };
	NewSource = go$pkg.NewSource = function(seed) {
		var rng;
		rng = new rngSource.Ptr();
		rng.Seed(seed);
		return rng;
	};
	New = go$pkg.New = function(src) {
		return new Rand.Ptr(src);
	};
	Rand.Ptr.prototype.Seed = function(seed) {
		var r;
		r = this;
		r.src.Seed(seed);
	};
	Rand.prototype.Seed = function(seed) { return this.go$val.Seed(seed); };
	Rand.Ptr.prototype.Int63 = function() {
		var r;
		r = this;
		return r.src.Int63();
	};
	Rand.prototype.Int63 = function() { return this.go$val.Int63(); };
	Rand.Ptr.prototype.Uint32 = function() {
		var r;
		r = this;
		return (go$shiftRightInt64(r.Int63(), 31).low >>> 0);
	};
	Rand.prototype.Uint32 = function() { return this.go$val.Uint32(); };
	Rand.Ptr.prototype.Int31 = function() {
		var r, x;
		r = this;
		return ((x = go$shiftRightInt64(r.Int63(), 32), x.low + ((x.high >> 31) * 4294967296)) >> 0);
	};
	Rand.prototype.Int31 = function() { return this.go$val.Int31(); };
	Rand.Ptr.prototype.Int = function() {
		var r, u;
		r = this;
		u = (r.Int63().low >>> 0);
		return (((u << 1 >>> 0) >>> 1 >>> 0) >> 0);
	};
	Rand.prototype.Int = function() { return this.go$val.Int(); };
	Rand.Ptr.prototype.Int63n = function(n) {
		var r, x, x$1, max, v;
		r = this;
		if ((n.high < 0 || (n.high === 0 && n.low <= 0))) {
			throw go$panic(new Go$String("invalid argument to Int63n"));
		}
		max = (x = (x$1 = go$div64(new Go$Uint64(2147483648, 0), new Go$Uint64(n.high, n.low), true), new Go$Uint64(2147483647 - x$1.high, 4294967295 - x$1.low)), new Go$Int64(x.high, x.low));
		v = r.Int63();
		while ((v.high > max.high || (v.high === max.high && v.low > max.low))) {
			v = r.Int63();
		}
		return go$div64(v, n, true);
	};
	Rand.prototype.Int63n = function(n) { return this.go$val.Int63n(n); };
	Rand.Ptr.prototype.Int31n = function(n) {
		var r, _r, max, v, _r$1;
		r = this;
		if (n <= 0) {
			throw go$panic(new Go$String("invalid argument to Int31n"));
		}
		max = ((2147483647 - (_r = 2147483648 % (n >>> 0), _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) >>> 0) >> 0);
		v = r.Int31();
		while (v > max) {
			v = r.Int31();
		}
		return (_r$1 = v % n, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero"));
	};
	Rand.prototype.Int31n = function(n) { return this.go$val.Int31n(n); };
	Rand.Ptr.prototype.Intn = function(n) {
		var r, x;
		r = this;
		if (n <= 0) {
			throw go$panic(new Go$String("invalid argument to Intn"));
		}
		if (n <= 2147483647) {
			return (r.Int31n((n >> 0)) >> 0);
		}
		return ((x = r.Int63n(new Go$Int64(0, n)), x.low + ((x.high >> 31) * 4294967296)) >> 0);
	};
	Rand.prototype.Intn = function(n) { return this.go$val.Intn(n); };
	Rand.Ptr.prototype.Float64 = function() {
		var r;
		r = this;
		return go$flatten64(r.Int63()) / 9.223372036854776e+18;
	};
	Rand.prototype.Float64 = function() { return this.go$val.Float64(); };
	Rand.Ptr.prototype.Float32 = function() {
		var r;
		r = this;
		return r.Float64();
	};
	Rand.prototype.Float32 = function() { return this.go$val.Float32(); };
	Rand.Ptr.prototype.Perm = function(n) {
		var r, m, i, _slice, _index, i$1, j, _slice$1, _index$1, _slice$2, _index$2, _tuple, _slice$3, _index$3, _slice$4, _index$4;
		r = this;
		m = (go$sliceType(Go$Int)).make(n, 0, function() { return 0; });
		i = 0;
		while (i < n) {
			_slice = m, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = i) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		i$1 = 0;
		while (i$1 < n) {
			j = r.Intn(i$1 + 1 >> 0);
			_tuple = [(_slice$1 = m, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (_slice$2 = m, _index$2 = i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))], _slice$3 = m, _index$3 = i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$4 = m, _index$4 = j, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = _tuple[1]) : go$throwRuntimeError("index out of range");
			i$1 = i$1 + 1 >> 0;
		}
		return m;
	};
	Rand.prototype.Perm = function(n) { return this.go$val.Perm(n); };
	lockedSource.Ptr.prototype.Int63 = function() {
		var n, r;
		n = new Go$Int64(0, 0);
		r = this;
		r.lk.Lock();
		n = r.src.Int63();
		r.lk.Unlock();
		return n;
	};
	lockedSource.prototype.Int63 = function() { return this.go$val.Int63(); };
	lockedSource.Ptr.prototype.Seed = function(seed) {
		var r;
		r = this;
		r.lk.Lock();
		r.src.Seed(seed);
		r.lk.Unlock();
	};
	lockedSource.prototype.Seed = function(seed) { return this.go$val.Seed(seed); };
	seedrand = function(x) {
		var _q, hi, _r, lo;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"));
		x = ((((48271 >>> 16 << 16) * lo >> 0) + (48271 << 16 >>> 16) * lo) >> 0) - ((((3399 >>> 16 << 16) * hi >> 0) + (3399 << 16 >>> 16) * hi) >> 0) >> 0;
		if (x < 0) {
			x = x + 2147483647 >> 0;
		}
		return x;
	};
	rngSource.Ptr.prototype.Seed = function(seed) {
		var rng, x, i, u, x$1, x$2, x$3;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = go$div64(seed, new Go$Int64(0, 2147483647), true);
		if ((seed.high < 0 || (seed.high === 0 && seed.low < 0))) {
			seed = new Go$Int64(seed.high + 0, seed.low + 2147483647);
		}
		if ((seed.high === 0 && seed.low === 0)) {
			seed = new Go$Int64(0, 89482311);
		}
		x = ((seed.low + ((seed.high >> 31) * 4294967296)) >> 0);
		i = -20;
		while (i < 607) {
			x = seedrand(x);
			if (i >= 0) {
				u = new Go$Int64(0, 0);
				u = go$shiftLeft64(new Go$Int64(0, x), 40);
				x = seedrand(x);
				u = (x$1 = go$shiftLeft64(new Go$Int64(0, x), 20), new Go$Int64(u.high ^ x$1.high, (u.low ^ x$1.low) >>> 0));
				x = seedrand(x);
				u = (x$2 = new Go$Int64(0, x), new Go$Int64(u.high ^ x$2.high, (u.low ^ x$2.low) >>> 0));
				u = (x$3 = rng_cooked[i], new Go$Int64(u.high ^ x$3.high, (u.low ^ x$3.low) >>> 0));
				rng.vec[i] = new Go$Int64(u.high & 2147483647, (u.low & 4294967295) >>> 0);
			}
			i = i + 1 >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.go$val.Seed(seed); };
	rngSource.Ptr.prototype.Int63 = function() {
		var rng, x, x$1, x$2, x$3;
		rng = this;
		rng.tap = rng.tap - 1 >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + 607 >> 0;
		}
		rng.feed = rng.feed - 1 >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + 607 >> 0;
		}
		x$3 = (x = (x$1 = rng.vec[rng.feed], x$2 = rng.vec[rng.tap], new Go$Int64(x$1.high + x$2.high, x$1.low + x$2.low)), new Go$Int64(x.high & 2147483647, (x.low & 4294967295) >>> 0));
		rng.vec[rng.feed] = x$3;
		return x$3;
	};
	rngSource.prototype.Int63 = function() { return this.go$val.Int63(); };
	go$pkg.init = function() {
		Source.init([["Int63", "", (go$funcType([], [Go$Int64], false))], ["Seed", "", (go$funcType([Go$Int64], [], false))]]);
		Rand.init([["src", "math/rand", Source, ""]]);
		(go$ptrType(Rand)).methods = [["ExpFloat64", "", [], [Go$Float64], false], ["Float32", "", [], [Go$Float32], false], ["Float64", "", [], [Go$Float64], false], ["Int", "", [], [Go$Int], false], ["Int31", "", [], [Go$Int32], false], ["Int31n", "", [Go$Int32], [Go$Int32], false], ["Int63", "", [], [Go$Int64], false], ["Int63n", "", [Go$Int64], [Go$Int64], false], ["Intn", "", [Go$Int], [Go$Int], false], ["NormFloat64", "", [], [Go$Float64], false], ["Perm", "", [Go$Int], [(go$sliceType(Go$Int))], false], ["Seed", "", [Go$Int64], [], false], ["Uint32", "", [], [Go$Uint32], false]];
		lockedSource.init([["lk", "math/rand", sync.Mutex, ""], ["src", "math/rand", Source, ""]]);
		(go$ptrType(lockedSource)).methods = [["Int63", "", [], [Go$Int64], false], ["Seed", "", [Go$Int64], [], false]];
		rngSource.init([["tap", "math/rand", Go$Int, ""], ["feed", "math/rand", Go$Int, ""], ["vec", "math/rand", (go$arrayType(Go$Int64, 607)), ""]]);
		(go$ptrType(rngSource)).methods = [["Int63", "", [], [Go$Int64], false], ["Seed", "", [Go$Int64], [], false]];
		ke = go$toNativeArray("Uint32", [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = go$toNativeArray("Float32", [2.0249555e-09, 1.486674e-11, 2.4409617e-11, 3.1968806e-11, 3.844677e-11, 4.4228204e-11, 4.9516443e-11, 5.443359e-11, 5.905944e-11, 6.344942e-11, 6.7643814e-11, 7.1672945e-11, 7.556032e-11, 7.932458e-11, 8.298079e-11, 8.654132e-11, 9.0016515e-11, 9.3415074e-11, 9.674443e-11, 1.0001099e-10, 1.03220314e-10, 1.06377254e-10, 1.09486115e-10, 1.1255068e-10, 1.1557435e-10, 1.1856015e-10, 1.2151083e-10, 1.2442886e-10, 1.2731648e-10, 1.3017575e-10, 1.3300853e-10, 1.3581657e-10, 1.3860142e-10, 1.4136457e-10, 1.4410738e-10, 1.4683108e-10, 1.4953687e-10, 1.5222583e-10, 1.54899e-10, 1.5755733e-10, 1.6020171e-10, 1.6283301e-10, 1.6545203e-10, 1.6805951e-10, 1.7065617e-10, 1.732427e-10, 1.7581973e-10, 1.7838787e-10, 1.8094774e-10, 1.8349985e-10, 1.8604476e-10, 1.8858298e-10, 1.9111498e-10, 1.9364126e-10, 1.9616223e-10, 1.9867835e-10, 2.0119004e-10, 2.0369768e-10, 2.0620168e-10, 2.087024e-10, 2.1120022e-10, 2.136955e-10, 2.1618855e-10, 2.1867974e-10, 2.2116936e-10, 2.2365775e-10, 2.261452e-10, 2.2863202e-10, 2.311185e-10, 2.3360494e-10, 2.360916e-10, 2.3857874e-10, 2.4106667e-10, 2.4355562e-10, 2.4604588e-10, 2.485377e-10, 2.5103128e-10, 2.5352695e-10, 2.560249e-10, 2.585254e-10, 2.6102867e-10, 2.6353494e-10, 2.6604446e-10, 2.6855745e-10, 2.7107416e-10, 2.7359479e-10, 2.761196e-10, 2.7864877e-10, 2.8118255e-10, 2.8372119e-10, 2.8626485e-10, 2.888138e-10, 2.9136826e-10, 2.939284e-10, 2.9649452e-10, 2.9906677e-10, 3.016454e-10, 3.0423064e-10, 3.0682268e-10, 3.0942177e-10, 3.1202813e-10, 3.1464195e-10, 3.1726352e-10, 3.19893e-10, 3.2253064e-10, 3.251767e-10, 3.2783135e-10, 3.3049485e-10, 3.3316744e-10, 3.3584938e-10, 3.3854083e-10, 3.4124212e-10, 3.4395342e-10, 3.46675e-10, 3.4940711e-10, 3.5215003e-10, 3.5490397e-10, 3.5766917e-10, 3.6044595e-10, 3.6323455e-10, 3.660352e-10, 3.6884823e-10, 3.7167386e-10, 3.745124e-10, 3.773641e-10, 3.802293e-10, 3.8310827e-10, 3.860013e-10, 3.8890866e-10, 3.918307e-10, 3.9476775e-10, 3.9772008e-10, 4.0068804e-10, 4.0367196e-10, 4.0667217e-10, 4.09689e-10, 4.1272286e-10, 4.1577405e-10, 4.1884296e-10, 4.2192994e-10, 4.250354e-10, 4.281597e-10, 4.313033e-10, 4.3446652e-10, 4.3764986e-10, 4.408537e-10, 4.4407847e-10, 4.4732465e-10, 4.5059267e-10, 4.5388301e-10, 4.571962e-10, 4.6053267e-10, 4.6389292e-10, 4.6727755e-10, 4.70687e-10, 4.741219e-10, 4.7758275e-10, 4.810702e-10, 4.845848e-10, 4.8812715e-10, 4.9169796e-10, 4.9529775e-10, 4.989273e-10, 5.0258725e-10, 5.0627835e-10, 5.100013e-10, 5.1375687e-10, 5.1754584e-10, 5.21369e-10, 5.2522725e-10, 5.2912136e-10, 5.330522e-10, 5.370208e-10, 5.4102806e-10, 5.45075e-10, 5.491625e-10, 5.532918e-10, 5.5746385e-10, 5.616799e-10, 5.6594107e-10, 5.7024857e-10, 5.746037e-10, 5.7900773e-10, 5.834621e-10, 5.8796823e-10, 5.925276e-10, 5.971417e-10, 6.018122e-10, 6.065408e-10, 6.113292e-10, 6.1617933e-10, 6.2109295e-10, 6.260722e-10, 6.3111916e-10, 6.3623595e-10, 6.4142497e-10, 6.4668854e-10, 6.5202926e-10, 6.5744976e-10, 6.6295286e-10, 6.6854156e-10, 6.742188e-10, 6.79988e-10, 6.858526e-10, 6.9181616e-10, 6.978826e-10, 7.04056e-10, 7.103407e-10, 7.167412e-10, 7.2326256e-10, 7.2990985e-10, 7.366886e-10, 7.4360473e-10, 7.5066453e-10, 7.5787476e-10, 7.6524265e-10, 7.7277595e-10, 7.80483e-10, 7.883728e-10, 7.9645507e-10, 8.047402e-10, 8.1323964e-10, 8.219657e-10, 8.309319e-10, 8.401528e-10, 8.496445e-10, 8.594247e-10, 8.6951274e-10, 8.799301e-10, 8.9070046e-10, 9.018503e-10, 9.134092e-10, 9.254101e-10, 9.378904e-10, 9.508923e-10, 9.644638e-10, 9.786603e-10, 9.935448e-10, 1.0091913e-09, 1.025686e-09, 1.0431306e-09, 1.0616465e-09, 1.08138e-09, 1.1025096e-09, 1.1252564e-09, 1.1498986e-09, 1.1767932e-09, 1.206409e-09, 1.2393786e-09, 1.276585e-09, 1.3193139e-09, 1.3695435e-09, 1.4305498e-09, 1.508365e-09, 1.6160854e-09, 1.7921248e-09]);
		fe = go$toNativeArray("Float32", [1, 0.9381437, 0.90046996, 0.87170434, 0.8477855, 0.8269933, 0.8084217, 0.7915276, 0.77595687, 0.7614634, 0.7478686, 0.7350381, 0.72286767, 0.71127474, 0.70019263, 0.6895665, 0.67935055, 0.6695063, 0.66000086, 0.65080583, 0.6418967, 0.63325197, 0.6248527, 0.6166822, 0.60872537, 0.60096896, 0.5934009, 0.58601034, 0.5787874, 0.57172304, 0.5648092, 0.5580383, 0.5514034, 0.5448982, 0.5385169, 0.53225386, 0.5261042, 0.52006316, 0.5141264, 0.50828975, 0.5025495, 0.496902, 0.49134386, 0.485872, 0.48048335, 0.4751752, 0.46994483, 0.46478975, 0.45970762, 0.45469615, 0.44975325, 0.44487688, 0.44006512, 0.43531612, 0.43062815, 0.42599955, 0.42142874, 0.4169142, 0.41245446, 0.40804818, 0.403694, 0.3993907, 0.39513698, 0.39093173, 0.38677382, 0.38266218, 0.37859577, 0.37457356, 0.37059465, 0.3666581, 0.362763, 0.35890847, 0.35509375, 0.351318, 0.3475805, 0.34388044, 0.34021714, 0.3365899, 0.33299807, 0.32944095, 0.32591796, 0.3224285, 0.3189719, 0.31554767, 0.31215525, 0.30879408, 0.3054636, 0.3021634, 0.29889292, 0.2956517, 0.29243928, 0.28925523, 0.28609908, 0.28297043, 0.27986884, 0.27679393, 0.2737453, 0.2707226, 0.2677254, 0.26475343, 0.26180625, 0.25888354, 0.25598502, 0.2531103, 0.25025907, 0.24743107, 0.24462597, 0.24184346, 0.23908329, 0.23634516, 0.23362878, 0.23093392, 0.2282603, 0.22560766, 0.22297576, 0.22036438, 0.21777324, 0.21520215, 0.21265087, 0.21011916, 0.20760682, 0.20511365, 0.20263945, 0.20018397, 0.19774707, 0.19532852, 0.19292815, 0.19054577, 0.1881812, 0.18583426, 0.18350479, 0.1811926, 0.17889754, 0.17661946, 0.17435817, 0.17211354, 0.1698854, 0.16767362, 0.16547804, 0.16329853, 0.16113494, 0.15898713, 0.15685499, 0.15473837, 0.15263714, 0.15055119, 0.14848037, 0.14642459, 0.14438373, 0.14235765, 0.14034624, 0.13834943, 0.13636707, 0.13439907, 0.13244532, 0.13050574, 0.1285802, 0.12666863, 0.12477092, 0.12288698, 0.12101672, 0.119160056, 0.1173169, 0.115487166, 0.11367077, 0.11186763, 0.11007768, 0.10830083, 0.10653701, 0.10478614, 0.10304816, 0.101323, 0.09961058, 0.09791085, 0.09622374, 0.09454919, 0.09288713, 0.091237515, 0.08960028, 0.087975375, 0.08636274, 0.08476233, 0.083174095, 0.081597984, 0.08003395, 0.07848195, 0.076941945, 0.07541389, 0.07389775, 0.072393484, 0.07090106, 0.069420435, 0.06795159, 0.066494495, 0.06504912, 0.063615434, 0.062193416, 0.060783047, 0.059384305, 0.057997175, 0.05662164, 0.05525769, 0.053905312, 0.052564494, 0.051235236, 0.049917534, 0.048611384, 0.047316793, 0.046033762, 0.0447623, 0.043502413, 0.042254124, 0.041017443, 0.039792392, 0.038578995, 0.037377283, 0.036187284, 0.035009038, 0.033842582, 0.032687962, 0.031545233, 0.030414443, 0.02929566, 0.02818895, 0.027094385, 0.026012046, 0.024942026, 0.023884421, 0.022839336, 0.021806888, 0.020787204, 0.019780423, 0.0187867, 0.0178062, 0.016839107, 0.015885621, 0.014945968, 0.014020392, 0.013109165, 0.012212592, 0.011331013, 0.01046481, 0.009614414, 0.008780315, 0.007963077, 0.0071633533, 0.006381906, 0.0056196423, 0.0048776558, 0.004157295, 0.0034602648, 0.0027887989, 0.0021459677, 0.0015362998, 0.0009672693, 0.00045413437]);
		kn = go$toNativeArray("Uint32", [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = go$toNativeArray("Float32", [1.7290405e-09, 1.2680929e-10, 1.6897518e-10, 1.9862688e-10, 2.2232431e-10, 2.4244937e-10, 2.601613e-10, 2.7611988e-10, 2.9073963e-10, 3.042997e-10, 3.1699796e-10, 3.289802e-10, 3.4035738e-10, 3.5121603e-10, 3.616251e-10, 3.7164058e-10, 3.8130857e-10, 3.9066758e-10, 3.9975012e-10, 4.08584e-10, 4.1719309e-10, 4.2559822e-10, 4.338176e-10, 4.418672e-10, 4.497613e-10, 4.5751258e-10, 4.651324e-10, 4.7263105e-10, 4.8001775e-10, 4.87301e-10, 4.944885e-10, 5.015873e-10, 5.0860405e-10, 5.155446e-10, 5.2241467e-10, 5.2921934e-10, 5.359635e-10, 5.426517e-10, 5.4928817e-10, 5.5587696e-10, 5.624219e-10, 5.6892646e-10, 5.753941e-10, 5.818282e-10, 5.882317e-10, 5.946077e-10, 6.00959e-10, 6.072884e-10, 6.135985e-10, 6.19892e-10, 6.2617134e-10, 6.3243905e-10, 6.386974e-10, 6.449488e-10, 6.511956e-10, 6.5744005e-10, 6.6368433e-10, 6.699307e-10, 6.7618144e-10, 6.824387e-10, 6.8870465e-10, 6.949815e-10, 7.012715e-10, 7.075768e-10, 7.1389966e-10, 7.202424e-10, 7.266073e-10, 7.329966e-10, 7.394128e-10, 7.4585826e-10, 7.5233547e-10, 7.58847e-10, 7.653954e-10, 7.719835e-10, 7.7861395e-10, 7.852897e-10, 7.920138e-10, 7.987892e-10, 8.0561924e-10, 8.125073e-10, 8.194569e-10, 8.2647167e-10, 8.3355556e-10, 8.407127e-10, 8.479473e-10, 8.55264e-10, 8.6266755e-10, 8.7016316e-10, 8.777562e-10, 8.8545243e-10, 8.932582e-10, 9.0117996e-10, 9.09225e-10, 9.174008e-10, 9.2571584e-10, 9.341788e-10, 9.427997e-10, 9.515889e-10, 9.605579e-10, 9.697193e-10, 9.790869e-10, 9.88676e-10, 9.985036e-10, 1.0085882e-09, 1.0189509e-09, 1.0296151e-09, 1.0406069e-09, 1.0519566e-09, 1.063698e-09, 1.0758702e-09, 1.0885183e-09, 1.1016947e-09, 1.1154611e-09, 1.1298902e-09, 1.1450696e-09, 1.1611052e-09, 1.1781276e-09, 1.1962995e-09, 1.2158287e-09, 1.2369856e-09, 1.2601323e-09, 1.2857697e-09, 1.3146202e-09, 1.347784e-09, 1.3870636e-09, 1.4357403e-09, 1.5008659e-09, 1.6030948e-09]);
		fn = go$toNativeArray("Float32", [1, 0.9635997, 0.9362827, 0.9130436, 0.89228165, 0.87324303, 0.8555006, 0.8387836, 0.8229072, 0.8077383, 0.793177, 0.7791461, 0.7655842, 0.7524416, 0.73967725, 0.7272569, 0.7151515, 0.7033361, 0.69178915, 0.68049186, 0.6694277, 0.658582, 0.6479418, 0.63749546, 0.6272325, 0.6171434, 0.6072195, 0.5974532, 0.58783704, 0.5783647, 0.56903, 0.5598274, 0.5507518, 0.54179835, 0.5329627, 0.52424055, 0.5156282, 0.50712204, 0.49871865, 0.49041483, 0.48220766, 0.4740943, 0.46607214, 0.4581387, 0.45029163, 0.44252872, 0.43484783, 0.427247, 0.41972435, 0.41227803, 0.40490642, 0.39760786, 0.3903808, 0.3832238, 0.37613547, 0.36911446, 0.3621595, 0.35526937, 0.34844297, 0.34167916, 0.33497685, 0.3283351, 0.3217529, 0.3152294, 0.30876362, 0.30235484, 0.29600215, 0.28970486, 0.2834622, 0.2772735, 0.27113807, 0.2650553, 0.25902456, 0.2530453, 0.24711695, 0.241239, 0.23541094, 0.22963232, 0.2239027, 0.21822165, 0.21258877, 0.20700371, 0.20146611, 0.19597565, 0.19053204, 0.18513499, 0.17978427, 0.17447963, 0.1692209, 0.16400786, 0.15884037, 0.15371831, 0.14864157, 0.14361008, 0.13862377, 0.13368265, 0.12878671, 0.12393598, 0.119130544, 0.11437051, 0.10965602, 0.104987256, 0.10036444, 0.095787846, 0.0912578, 0.08677467, 0.0823389, 0.077950984, 0.073611505, 0.06932112, 0.06508058, 0.06089077, 0.056752663, 0.0526674, 0.048636295, 0.044660863, 0.040742867, 0.03688439, 0.033087887, 0.029356318, 0.025693292, 0.022103304, 0.018592102, 0.015167298, 0.011839478, 0.008624485, 0.005548995, 0.0026696292]);
		rng_cooked = go$toNativeArray("Int64", [new Go$Int64(1173834291, 3952672746), new Go$Int64(1081821761, 3130416987), new Go$Int64(324977939, 3414273807), new Go$Int64(1241840476, 2806224363), new Go$Int64(669549340, 1997590414), new Go$Int64(2103305448, 2402795971), new Go$Int64(1663160183, 1140819369), new Go$Int64(1120601685, 1788868961), new Go$Int64(1848035537, 1089001426), new Go$Int64(1235702047, 873593504), new Go$Int64(1911387977, 581324885), new Go$Int64(492609478, 1609182556), new Go$Int64(1069394745, 1241596776), new Go$Int64(1895445337, 1771189259), new Go$Int64(772864846, 3467012610), new Go$Int64(2006957225, 2344407434), new Go$Int64(402115761, 782467244), new Go$Int64(26335124, 3404933915), new Go$Int64(1063924276, 618867887), new Go$Int64(1178782866, 520164395), new Go$Int64(555910815, 1341358184), new Go$Int64(632398609, 665794848), new Go$Int64(1527227641, 3183648150), new Go$Int64(1781176124, 696329606), new Go$Int64(1789146075, 4151988961), new Go$Int64(60039534, 998951326), new Go$Int64(1535158725, 1364957564), new Go$Int64(63173359, 4090230633), new Go$Int64(649454641, 4009697548), new Go$Int64(248009524, 2569622517), new Go$Int64(778703922, 3742421481), new Go$Int64(1038377625, 1506914633), new Go$Int64(1738099768, 1983412561), new Go$Int64(236311649, 1436266083), new Go$Int64(1035966148, 3922894967), new Go$Int64(810508934, 1792680179), new Go$Int64(563141142, 1188796351), new Go$Int64(1349617468, 405968250), new Go$Int64(1044074554, 433754187), new Go$Int64(870549669, 4073162024), new Go$Int64(1053232044, 433121399), new Go$Int64(2451824, 4162580594), new Go$Int64(2010221076, 4132415622), new Go$Int64(611252600, 3033822028), new Go$Int64(2016407895, 824682382), new Go$Int64(2366218, 3583765414), new Go$Int64(1522878809, 535386927), new Go$Int64(1637219058, 2286693689), new Go$Int64(1453075389, 2968466525), new Go$Int64(193683513, 1351410206), new Go$Int64(1863677552, 1412813499), new Go$Int64(492736522, 4126267639), new Go$Int64(512765208, 2105529399), new Go$Int64(2132966268, 2413882233), new Go$Int64(947457634, 32226200), new Go$Int64(1149341356, 2032329073), new Go$Int64(106485445, 1356518208), new Go$Int64(79673492, 3430061722), new Go$Int64(663048513, 3820169661), new Go$Int64(481498454, 2981816134), new Go$Int64(1017155588, 4184371017), new Go$Int64(206574701, 2119206761), new Go$Int64(1295374591, 2472200560), new Go$Int64(1587026100, 2853524696), new Go$Int64(1307803389, 1681119904), new Go$Int64(1972496813, 95608918), new Go$Int64(392686347, 3690479145), new Go$Int64(941912722, 1397922290), new Go$Int64(988169623, 1516129515), new Go$Int64(1827305493, 1547420459), new Go$Int64(1311333971, 1470949486), new Go$Int64(194013850, 1336785672), new Go$Int64(2102397034, 4131677129), new Go$Int64(755205548, 4246329084), new Go$Int64(1004983461, 3788585631), new Go$Int64(2081005363, 3080389532), new Go$Int64(1501045284, 2215402037), new Go$Int64(391002300, 1171593935), new Go$Int64(1408774047, 1423855166), new Go$Int64(1628305930, 2276716302), new Go$Int64(1779030508, 2068027241), new Go$Int64(1369359303, 3427553297), new Go$Int64(189241615, 3289637845), new Go$Int64(1057480830, 3486407650), new Go$Int64(634572984, 3071877822), new Go$Int64(1159653919, 3363620705), new Go$Int64(1213226718, 4159821533), new Go$Int64(2070861710, 1894661), new Go$Int64(1472989750, 1156868282), new Go$Int64(348271067, 776219088), new Go$Int64(1646054810, 2425634259), new Go$Int64(1716021749, 680510161), new Go$Int64(1573220192, 1310101429), new Go$Int64(1095885995, 2964454134), new Go$Int64(1821788136, 3467098407), new Go$Int64(1990672920, 2109628894), new Go$Int64(7834944, 1232604732), new Go$Int64(309412934, 3261916179), new Go$Int64(1699175360, 434597899), new Go$Int64(235436061, 1624796439), new Go$Int64(521080809, 3589632480), new Go$Int64(1198416575, 864579159), new Go$Int64(208735487, 1380889830), new Go$Int64(619206309, 2654509477), new Go$Int64(1419738251, 1468209306), new Go$Int64(403198876, 100794388), new Go$Int64(956062190, 2991674471), new Go$Int64(1938816907, 2224662036), new Go$Int64(1973824487, 977097250), new Go$Int64(1351320195, 726419512), new Go$Int64(1964023751, 1747974366), new Go$Int64(1394388465, 1556430604), new Go$Int64(1097991433, 1080776742), new Go$Int64(1761636690, 280794874), new Go$Int64(117767733, 919835643), new Go$Int64(1180474222, 3434019658), new Go$Int64(196069168, 2461941785), new Go$Int64(133215641, 3615001066), new Go$Int64(417204809, 3103414427), new Go$Int64(790056561, 3380809712), new Go$Int64(879802240, 2724693469), new Go$Int64(547796833, 598827710), new Go$Int64(300924196, 3452273442), new Go$Int64(2071705424, 649274915), new Go$Int64(1346182319, 2585724112), new Go$Int64(636549385, 3165579553), new Go$Int64(1185578221, 2635894283), new Go$Int64(2094573470, 2053289721), new Go$Int64(985976581, 3169337108), new Go$Int64(1170569632, 144717764), new Go$Int64(1079216270, 1383666384), new Go$Int64(2022678706, 681540375), new Go$Int64(1375448925, 537050586), new Go$Int64(182715304, 315246468), new Go$Int64(226402871, 849323088), new Go$Int64(1262421183, 45543944), new Go$Int64(1201038398, 2319052083), new Go$Int64(2106775454, 3613090841), new Go$Int64(560472520, 2992171180), new Go$Int64(1765620479, 2068244785), new Go$Int64(917538188, 4239862634), new Go$Int64(777927839, 3892253031), new Go$Int64(720683925, 958186149), new Go$Int64(1724185863, 1877702262), new Go$Int64(1357886971, 837674867), new Go$Int64(1837048883, 1507589294), new Go$Int64(1905518400, 873336795), new Go$Int64(267722611, 2764496274), new Go$Int64(341003118, 4196182374), new Go$Int64(1080717893, 550964545), new Go$Int64(818747069, 420611474), new Go$Int64(222653272, 204265180), new Go$Int64(1549974541, 1787046383), new Go$Int64(1215581865, 3102292318), new Go$Int64(418321538, 1552199393), new Go$Int64(1243493047, 980542004), new Go$Int64(267284263, 3293718720), new Go$Int64(1179528763, 3771917473), new Go$Int64(599484404, 2195808264), new Go$Int64(252818753, 3894702887), new Go$Int64(780007692, 2099949527), new Go$Int64(1424094358, 338442522), new Go$Int64(490737398, 637158004), new Go$Int64(419862118, 281976339), new Go$Int64(574970164, 3619802330), new Go$Int64(1715552825, 3084554784), new Go$Int64(882872465, 4129772886), new Go$Int64(43084605, 1680378557), new Go$Int64(525521057, 3339087776), new Go$Int64(1680500332, 4220317857), new Go$Int64(211654685, 2959322499), new Go$Int64(1675600481, 1488354890), new Go$Int64(1312620086, 3958162143), new Go$Int64(920972075, 2773705983), new Go$Int64(1876039582, 225908689), new Go$Int64(963748535, 908216283), new Go$Int64(1541787429, 3574646075), new Go$Int64(319760557, 1936937569), new Go$Int64(1519770881, 75492235), new Go$Int64(816689472, 1935193178), new Go$Int64(2142521206, 2018250883), new Go$Int64(455141620, 3943126022), new Go$Int64(1546084160, 3066544345), new Go$Int64(1932392669, 2793082663), new Go$Int64(908474287, 3297036421), new Go$Int64(1640597065, 2206987825), new Go$Int64(1594236910, 807894872), new Go$Int64(366158341, 766252117), new Go$Int64(2060649606, 3833114345), new Go$Int64(845619743, 1255067973), new Go$Int64(1201145605, 741697208), new Go$Int64(671241040, 2810093753), new Go$Int64(1109032642, 4229340371), new Go$Int64(1462188720, 1361684224), new Go$Int64(988084219, 1906263026), new Go$Int64(475781207, 3904421704), new Go$Int64(1523946520, 1769075545), new Go$Int64(1062308525, 2621599764), new Go$Int64(1279509432, 3431891480), new Go$Int64(404732502, 1871896503), new Go$Int64(128756421, 1412808876), new Go$Int64(1605404688, 952876175), new Go$Int64(1917039957, 1824438899), new Go$Int64(1662295856, 1005035476), new Go$Int64(1990909507, 527508597), new Go$Int64(1288873303, 3066806859), new Go$Int64(565995893, 3244940914), new Go$Int64(1257737460, 209092916), new Go$Int64(1899814242, 1242699167), new Go$Int64(1433653252, 456723774), new Go$Int64(1776978905, 1001252870), new Go$Int64(1468772157, 2026725874), new Go$Int64(857254202, 2137562569), new Go$Int64(765939740, 3183366709), new Go$Int64(1533887628, 2612072960), new Go$Int64(56977098, 1727148468), new Go$Int64(949899753, 3803658212), new Go$Int64(1883670356, 479946959), new Go$Int64(685713571, 1562982345), new Go$Int64(201241205, 1766109365), new Go$Int64(700596547, 3257093788), new Go$Int64(1962768719, 2365720207), new Go$Int64(93384808, 3742754173), new Go$Int64(1689098413, 2878193673), new Go$Int64(1096135042, 2174002182), new Go$Int64(1313222695, 3573511231), new Go$Int64(1392911121, 1760299077), new Go$Int64(771856457, 2260779833), new Go$Int64(1281464374, 1452805722), new Go$Int64(917811730, 2940011802), new Go$Int64(1890251082, 1886183802), new Go$Int64(893897673, 2514369088), new Go$Int64(1644345561, 3924317791), new Go$Int64(172616216, 500935732), new Go$Int64(1403501753, 676580929), new Go$Int64(581571365, 1184984890), new Go$Int64(1455515235, 1271474274), new Go$Int64(318728910, 3163791473), new Go$Int64(2051027584, 2842487377), new Go$Int64(1511537551, 2170968612), new Go$Int64(573262976, 3535856740), new Go$Int64(94256461, 1488599718), new Go$Int64(966951817, 3408913763), new Go$Int64(60951736, 2501050084), new Go$Int64(1272353200, 1639124157), new Go$Int64(138001144, 4088176393), new Go$Int64(1574896563, 3989947576), new Go$Int64(1982239940, 3414355209), new Go$Int64(1355154361, 2275136352), new Go$Int64(89709303, 2151835223), new Go$Int64(1216338715, 1654534827), new Go$Int64(1467562197, 377892833), new Go$Int64(1664767638, 660204544), new Go$Int64(85706799, 390828249), new Go$Int64(725310955, 3402783878), new Go$Int64(678849488, 3717936603), new Go$Int64(1113532086, 2211058823), new Go$Int64(1564224320, 2692150867), new Go$Int64(1952770442, 1928910388), new Go$Int64(788716862, 3931011137), new Go$Int64(1083670504, 1112701047), new Go$Int64(2079333076, 2452299106), new Go$Int64(1251318826, 2337204777), new Go$Int64(1774877857, 273889282), new Go$Int64(1798719843, 1462008793), new Go$Int64(2138834788, 1554494002), new Go$Int64(952516517, 182675323), new Go$Int64(548928884, 1882802136), new Go$Int64(589279648, 3700220025), new Go$Int64(381039426, 3083431543), new Go$Int64(1295624457, 3622207527), new Go$Int64(338126939, 432729309), new Go$Int64(480013522, 2391914317), new Go$Int64(297925497, 235747924), new Go$Int64(2120733629, 3088823825), new Go$Int64(1402403853, 2314658321), new Go$Int64(1165929723, 2957634338), new Go$Int64(501323675, 4117056981), new Go$Int64(1564699815, 1482500298), new Go$Int64(1406657158, 840489337), new Go$Int64(799522364, 3483178565), new Go$Int64(532129761, 2074004656), new Go$Int64(724246478, 3643392642), new Go$Int64(1482330167, 1583624461), new Go$Int64(1261660694, 287473085), new Go$Int64(1667835381, 3136843981), new Go$Int64(1138806821, 1266970974), new Go$Int64(135185781, 1998688839), new Go$Int64(392094735, 1492900209), new Go$Int64(1031326774, 1538112737), new Go$Int64(76914806, 2207265429), new Go$Int64(260686035, 963263315), new Go$Int64(1671145500, 2295892134), new Go$Int64(1068469660, 2002560897), new Go$Int64(1791233343, 1369254035), new Go$Int64(33436120, 3353312708), new Go$Int64(57507843, 947771099), new Go$Int64(201728503, 1747061399), new Go$Int64(1507240140, 2047354631), new Go$Int64(720000810, 4165367136), new Go$Int64(479265078, 3388864963), new Go$Int64(1195302398, 286492130), new Go$Int64(2045622690, 2795735007), new Go$Int64(1431753082, 3703961339), new Go$Int64(1999047161, 1797825479), new Go$Int64(1429039600, 1116589674), new Go$Int64(482063550, 2593309206), new Go$Int64(1329049334, 3404995677), new Go$Int64(1396904208, 3453462936), new Go$Int64(1014767077, 3016498634), new Go$Int64(75698599, 1650371545), new Go$Int64(1592007860, 212344364), new Go$Int64(1127766888, 3843932156), new Go$Int64(1399463792, 3573129983), new Go$Int64(1256901817, 665897820), new Go$Int64(1071492673, 1675628772), new Go$Int64(243225682, 2831752928), new Go$Int64(2120298836, 1486294219), new Go$Int64(193076235, 268782709), new Go$Int64(1145360145, 4186179080), new Go$Int64(624342951, 1613720397), new Go$Int64(857179861, 2703686015), new Go$Int64(1235864944, 2205342611), new Go$Int64(1474779655, 1411666394), new Go$Int64(619028749, 677744900), new Go$Int64(270855115, 4172867247), new Go$Int64(135494707, 2163418403), new Go$Int64(849547544, 2841526879), new Go$Int64(1029966689, 1082141470), new Go$Int64(377371856, 4046134367), new Go$Int64(51415528, 2142943655), new Go$Int64(1897659315, 3124627521), new Go$Int64(998228909, 219992939), new Go$Int64(1068692697, 1756846531), new Go$Int64(1283749206, 1225118210), new Go$Int64(1621625642, 1647770243), new Go$Int64(111523943, 444807907), new Go$Int64(2036369448, 3952076173), new Go$Int64(53201823, 1461839639), new Go$Int64(315761893, 3699250910), new Go$Int64(702974850, 1373688981), new Go$Int64(734022261, 147523747), new Go$Int64(100152742, 1211276581), new Go$Int64(1294440951, 2548832680), new Go$Int64(1144696256, 1995631888), new Go$Int64(154500578, 2011457303), new Go$Int64(796460974, 3057425772), new Go$Int64(667839456, 81484597), new Go$Int64(465502760, 3646681560), new Go$Int64(775020923, 635548515), new Go$Int64(602489502, 2508044581), new Go$Int64(353263531, 1014917157), new Go$Int64(719992433, 3214891315), new Go$Int64(852684611, 959582252), new Go$Int64(226415134, 3347040449), new Go$Int64(1784615552, 4102971975), new Go$Int64(397887437, 4078022210), new Go$Int64(1610679822, 2851767182), new Go$Int64(749162636, 1540160644), new Go$Int64(598384772, 1057290595), new Go$Int64(2034890660, 3907769253), new Go$Int64(579300318, 4248952684), new Go$Int64(1092907599, 132554364), new Go$Int64(1061621234, 1029351092), new Go$Int64(697840928, 2583007416), new Go$Int64(298619124, 1486185789), new Go$Int64(55905697, 2871589073), new Go$Int64(2017643612, 723203291), new Go$Int64(146250550, 2494333952), new Go$Int64(1064490251, 2230939180), new Go$Int64(342915576, 3943232912), new Go$Int64(1768732449, 2181367922), new Go$Int64(1418222537, 2889274791), new Go$Int64(1824032949, 2046728161), new Go$Int64(1653899792, 1376052477), new Go$Int64(1022327048, 381236993), new Go$Int64(1034385958, 3188942166), new Go$Int64(2073003539, 350070824), new Go$Int64(144881592, 61758415), new Go$Int64(1405659422, 3492950336), new Go$Int64(117440928, 3093818430), new Go$Int64(1693893113, 2962480613), new Go$Int64(235432940, 3154871160), new Go$Int64(511005079, 3228564679), new Go$Int64(610731502, 888276216), new Go$Int64(1200780674, 3574998604), new Go$Int64(870415268, 1967526716), new Go$Int64(591335707, 1554691298), new Go$Int64(574459414, 339944798), new Go$Int64(1223764147, 1154515356), new Go$Int64(1825645307, 967516237), new Go$Int64(1546195135, 596588202), new Go$Int64(279882768, 3764362170), new Go$Int64(492091056, 266611402), new Go$Int64(1754227768, 2047856075), new Go$Int64(1146757215, 21444105), new Go$Int64(1198058894, 3065563181), new Go$Int64(1915064845, 1140663212), new Go$Int64(633187674, 2323741028), new Go$Int64(2126290159, 3103873707), new Go$Int64(1008658319, 2766828349), new Go$Int64(1661896145, 1970872996), new Go$Int64(1628585413, 3766615585), new Go$Int64(1552335120, 2036813414), new Go$Int64(152606527, 3105536507), new Go$Int64(13954645, 3396176938), new Go$Int64(1426081645, 1377154485), new Go$Int64(2085644467, 3807014186), new Go$Int64(543009040, 3710110597), new Go$Int64(396058129, 916420443), new Go$Int64(734556788, 2103831255), new Go$Int64(381322154, 717331943), new Go$Int64(572884752, 3550505941), new Go$Int64(45939673, 378749927), new Go$Int64(149867929, 611017331), new Go$Int64(592130075, 758907650), new Go$Int64(1012992349, 154266815), new Go$Int64(1107028706, 1407468696), new Go$Int64(469292398, 970098704), new Go$Int64(1862426162, 1971660656), new Go$Int64(998365243, 3332747885), new Go$Int64(1947089649, 1935189867), new Go$Int64(1510248801, 203520055), new Go$Int64(842317902, 3916463034), new Go$Int64(1758884993, 3474113316), new Go$Int64(1036101639, 316544223), new Go$Int64(373738757, 1650844677), new Go$Int64(1240292229, 4267565603), new Go$Int64(1077208624, 2501167616), new Go$Int64(626831785, 3929401789), new Go$Int64(56122796, 337170252), new Go$Int64(1186981558, 2061966842), new Go$Int64(1843292800, 2508461464), new Go$Int64(206012532, 2791377107), new Go$Int64(1240791848, 1227227588), new Go$Int64(1813978778, 1709681848), new Go$Int64(1153692192, 3768820575), new Go$Int64(1145186199, 2887126398), new Go$Int64(700372314, 296561685), new Go$Int64(700300844, 3729960077), new Go$Int64(575172304, 372833036), new Go$Int64(2078875613, 2409779288), new Go$Int64(1829161290, 555274064), new Go$Int64(1041887929, 4239804901), new Go$Int64(1839403216, 3723486978), new Go$Int64(498390553, 2145871984), new Go$Int64(564717933, 3565480803), new Go$Int64(578829821, 2197313814), new Go$Int64(974785092, 3613674566), new Go$Int64(438638731, 3042093666), new Go$Int64(2050927384, 3324034321), new Go$Int64(869420878, 3708873369), new Go$Int64(946682149, 1698090092), new Go$Int64(1618900382, 4213940712), new Go$Int64(304003901, 2087477361), new Go$Int64(381315848, 2407950639), new Go$Int64(851258090, 3942568569), new Go$Int64(923583198, 4088074412), new Go$Int64(723260036, 2964773675), new Go$Int64(1473561819, 1539178386), new Go$Int64(1062961552, 2694849566), new Go$Int64(460977733, 2120273838), new Go$Int64(542912908, 2484608657), new Go$Int64(880846449, 2956190677), new Go$Int64(1970902366, 4223313749), new Go$Int64(662161910, 3502682327), new Go$Int64(705634754, 4133891139), new Go$Int64(1116124348, 1166449596), new Go$Int64(1038247601, 3362705993), new Go$Int64(93734798, 3892921029), new Go$Int64(1876124043, 786869787), new Go$Int64(1057490746, 1046342263), new Go$Int64(242763728, 493777327), new Go$Int64(1293910447, 3304827646), new Go$Int64(616460742, 125356352), new Go$Int64(499300063, 74094113), new Go$Int64(1351896723, 2500816079), new Go$Int64(1657235204, 514015239), new Go$Int64(1377565129, 543520454), new Go$Int64(107706923, 3614531153), new Go$Int64(2056746300, 2356753985), new Go$Int64(1390062617, 2018141668), new Go$Int64(131272971, 2087974891), new Go$Int64(644556607, 3166972343), new Go$Int64(372256200, 1517638666), new Go$Int64(1212207984, 173466846), new Go$Int64(1451709187, 4241513471), new Go$Int64(733932806, 2783126920), new Go$Int64(1972004134, 4167264826), new Go$Int64(29260506, 3907395640), new Go$Int64(1236582087, 1539634186), new Go$Int64(1551526350, 178241987), new Go$Int64(2034206012, 182168164), new Go$Int64(1044953189, 2386154934), new Go$Int64(1379126408, 4077374341), new Go$Int64(32803926, 1732699140), new Go$Int64(1726425903, 1041306002), new Go$Int64(1860414813, 2068001749), new Go$Int64(1005320202, 3208962910), new Go$Int64(844054010, 697710380), new Go$Int64(638124245, 2228431183), new Go$Int64(1337169671, 3554678728), new Go$Int64(1396494601, 173470263), new Go$Int64(2061597383, 3848297795), new Go$Int64(1220546671, 246236185), new Go$Int64(163293187, 2066374846), new Go$Int64(1771673660, 312890749), new Go$Int64(703378057, 3573310289), new Go$Int64(1548631747, 143166754), new Go$Int64(613554316, 2081511079), new Go$Int64(1197802104, 486038032), new Go$Int64(240999859, 2982218564), new Go$Int64(364901986, 1000939191), new Go$Int64(1902782651, 2750454885), new Go$Int64(1475638791, 3375313137), new Go$Int64(503615608, 881302957), new Go$Int64(638698903, 2514186393), new Go$Int64(443860803, 360024739), new Go$Int64(1399671872, 292500025), new Go$Int64(1381210821, 2276300752), new Go$Int64(521803381, 4069087683), new Go$Int64(208500981, 1637778212), new Go$Int64(720490469, 1676670893), new Go$Int64(1067262482, 3855174429), new Go$Int64(2114075974, 2067248671), new Go$Int64(2058057389, 2884561259), new Go$Int64(1341742553, 2456511185), new Go$Int64(983726246, 561175414), new Go$Int64(427994085, 432588903), new Go$Int64(885133709, 4059399550), new Go$Int64(2054387382, 1075014784), new Go$Int64(413651020, 2728058415), new Go$Int64(1839142064, 1299703678), new Go$Int64(1262333188, 2347583393), new Go$Int64(1285481956, 2468164145), new Go$Int64(989129637, 1140014346), new Go$Int64(2033889184, 1936972070), new Go$Int64(409904655, 3870530098), new Go$Int64(1662989391, 1717789158), new Go$Int64(1914486492, 1153452491), new Go$Int64(1157059232, 3948827651), new Go$Int64(790338018, 2101413152), new Go$Int64(1495744672, 3854091229), new Go$Int64(83644069, 4215565463), new Go$Int64(762206335, 1202710438), new Go$Int64(1582574611, 2072216740), new Go$Int64(705690639, 2066751068), new Go$Int64(33900336, 173902580), new Go$Int64(1405499842, 142459001), new Go$Int64(172391592, 1889151926), new Go$Int64(1648540523, 3034199774), new Go$Int64(1618587731, 516490102), new Go$Int64(93114264, 3692577783), new Go$Int64(68662295, 2953948865), new Go$Int64(1826544975, 4041040923), new Go$Int64(204965672, 592046130), new Go$Int64(1441840008, 384297211), new Go$Int64(95834184, 265863924), new Go$Int64(2101717619, 1333136237), new Go$Int64(1499611781, 1406273556), new Go$Int64(1074670496, 426305476), new Go$Int64(125704633, 2750898176), new Go$Int64(488068495, 1633944332), new Go$Int64(2037723464, 3236349343), new Go$Int64(444060402, 4013676611), new Go$Int64(1718532237, 2265047407), new Go$Int64(1433593806, 875071080), new Go$Int64(1804436145, 1418843655), new Go$Int64(2009228711, 451657300), new Go$Int64(1229446621, 1866374663), new Go$Int64(1653472867, 1551455622), new Go$Int64(577191481, 3560962459), new Go$Int64(1669204077, 3347903778), new Go$Int64(1849156454, 2675874918), new Go$Int64(316128071, 2762991672), new Go$Int64(530492383, 3689068477), new Go$Int64(844089962, 4071997905), new Go$Int64(1508155730, 1381702441), new Go$Int64(2089931018, 2373284878), new Go$Int64(1283216186, 2143983064), new Go$Int64(308739063, 1938207195), new Go$Int64(1754949306, 1188152253), new Go$Int64(1272345009, 615870490), new Go$Int64(742653194, 2662252621), new Go$Int64(1477718295, 3839976789), new Go$Int64(56149435, 306752547), new Go$Int64(720795581, 2162363077), new Go$Int64(2090431015, 2767224719), new Go$Int64(675859549, 2628837712), new Go$Int64(1678405918, 2967771969), new Go$Int64(1694285728, 499792248), new Go$Int64(403352367, 4285253508), new Go$Int64(962357072, 2856511070), new Go$Int64(679471692, 2526409716), new Go$Int64(353777175, 1240875658), new Go$Int64(1232590226, 2577342868), new Go$Int64(1146185433, 4136853496), new Go$Int64(670368674, 2403540137), new Go$Int64(1372824515, 1371410668), new Go$Int64(1970921600, 371758825), new Go$Int64(1706420536, 1528834084), new Go$Int64(2075795018, 1504757260), new Go$Int64(685663576, 699052551), new Go$Int64(1641940109, 3347789870), new Go$Int64(1951619734, 3430604759), new Go$Int64(2119672219, 1935601723), new Go$Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.Ptr(new sync.Mutex.Ptr(), NewSource(new Go$Int64(0, 1))));
	}
	return go$pkg;
})();
go$packages["strings"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], io = go$packages["io"], utf8 = go$packages["unicode/utf8"], unicode = go$packages["unicode"], Reader, NewReader, explode, hashstr, Count, Contains, ContainsRune, Index, LastIndex, IndexRune, IndexAny, genSplit, Split, Fields, FieldsFunc, Join, HasPrefix, HasSuffix, Map, Repeat, ToUpper, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, IndexFunc, indexFunc, lastIndexFunc, TrimSpace, TrimSuffix, Replace, IndexByte;
	Reader = go$pkg.Reader = go$newType(0, "Struct", "strings.Reader", "Reader", "strings", function(s_, i_, prevRune_) {
		this.go$val = this;
		this.s = s_ !== undefined ? s_ : "";
		this.i = i_ !== undefined ? i_ : 0;
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
	});
	Reader.Ptr.prototype.Len = function() {
		var r;
		r = this;
		if (r.i >= r.s.length) {
			return 0;
		}
		return r.s.length - r.i >> 0;
	};
	Reader.prototype.Len = function() { return this.go$val.Len(); };
	Reader.Ptr.prototype.Read = function(b) {
		var n, err, r, _tuple, _tuple$1;
		n = 0;
		err = null;
		r = this;
		if (b.length === 0) {
			_tuple = [0, null], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		if (r.i >= r.s.length) {
			_tuple$1 = [0, io.EOF], n = _tuple$1[0], err = _tuple$1[1];
			return [n, err];
		}
		n = go$copyString(b, r.s.substring(r.i));
		r.i = r.i + (n) >> 0;
		r.prevRune = -1;
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.go$val.Read(b); };
	Reader.Ptr.prototype.ReadAt = function(b, off) {
		var n, err, r, _tuple, x, _tuple$1;
		n = 0;
		err = null;
		r = this;
		if ((off.high < 0 || (off.high === 0 && off.low < 0))) {
			_tuple = [0, errors.New("strings: invalid offset")], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		if ((x = new Go$Int64(0, r.s.length), (off.high > x.high || (off.high === x.high && off.low >= x.low)))) {
			_tuple$1 = [0, io.EOF], n = _tuple$1[0], err = _tuple$1[1];
			return [n, err];
		}
		n = go$copyString(b, r.s.substring(((off.low + ((off.high >> 31) * 4294967296)) >> 0)));
		if (n < b.length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.go$val.ReadAt(b, off); };
	Reader.Ptr.prototype.ReadByte = function() {
		var b, err, r, _tuple;
		b = 0;
		err = null;
		r = this;
		if (r.i >= r.s.length) {
			_tuple = [0, io.EOF], b = _tuple[0], err = _tuple[1];
			return [b, err];
		}
		b = r.s.charCodeAt(r.i);
		r.i = r.i + 1 >> 0;
		r.prevRune = -1;
		return [b, err];
	};
	Reader.prototype.ReadByte = function() { return this.go$val.ReadByte(); };
	Reader.Ptr.prototype.UnreadByte = function() {
		var r;
		r = this;
		if (r.i <= 0) {
			return errors.New("strings.Reader: at beginning of string");
		}
		r.i = r.i - 1 >> 0;
		r.prevRune = -1;
		return null;
	};
	Reader.prototype.UnreadByte = function() { return this.go$val.UnreadByte(); };
	Reader.Ptr.prototype.ReadRune = function() {
		var ch, size, err, r, _tuple, c, _tuple$1, _tuple$2;
		ch = 0;
		size = 0;
		err = null;
		r = this;
		if (r.i >= r.s.length) {
			_tuple = [0, 0, io.EOF], ch = _tuple[0], size = _tuple[1], err = _tuple[2];
			return [ch, size, err];
		}
		r.prevRune = r.i;
		if (c = r.s.charCodeAt(r.i), c < 128) {
			r.i = r.i + 1 >> 0;
			_tuple$1 = [(c >> 0), 1, null], ch = _tuple$1[0], size = _tuple$1[1], err = _tuple$1[2];
			return [ch, size, err];
		}
		_tuple$2 = utf8.DecodeRuneInString(r.s.substring(r.i)), ch = _tuple$2[0], size = _tuple$2[1];
		r.i = r.i + (size) >> 0;
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.go$val.ReadRune(); };
	Reader.Ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("strings.Reader: previous operation was not ReadRune");
		}
		r.i = r.prevRune;
		r.prevRune = -1;
		return null;
	};
	Reader.prototype.UnreadRune = function() { return this.go$val.UnreadRune(); };
	Reader.Ptr.prototype.Seek = function(offset, whence) {
		var r, abs, _ref, x, x$1;
		r = this;
		abs = new Go$Int64(0, 0);
		_ref = whence;
		if (_ref === 0) {
			abs = offset;
		} else if (_ref === 1) {
			abs = (x = new Go$Int64(0, r.i), new Go$Int64(x.high + offset.high, x.low + offset.low));
		} else if (_ref === 2) {
			abs = (x$1 = new Go$Int64(0, r.s.length), new Go$Int64(x$1.high + offset.high, x$1.low + offset.low));
		} else {
			return [new Go$Int64(0, 0), errors.New("strings: invalid whence")];
		}
		if ((abs.high < 0 || (abs.high === 0 && abs.low < 0))) {
			return [new Go$Int64(0, 0), errors.New("strings: negative position")];
		}
		if ((abs.high > 0 || (abs.high === 0 && abs.low >= 2147483648))) {
			return [new Go$Int64(0, 0), errors.New("strings: position out of range")];
		}
		r.i = ((abs.low + ((abs.high >> 31) * 4294967296)) >> 0);
		return [abs, null];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.go$val.Seek(offset, whence); };
	Reader.Ptr.prototype.WriteTo = function(w) {
		var n, err, r, _tuple, s, _tuple$1, m;
		n = new Go$Int64(0, 0);
		err = null;
		r = this;
		r.prevRune = -1;
		if (r.i >= r.s.length) {
			_tuple = [new Go$Int64(0, 0), null], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		s = r.s.substring(r.i);
		_tuple$1 = io.WriteString(w, s), m = _tuple$1[0], err = _tuple$1[1];
		if (m > s.length) {
			throw go$panic(new Go$String("strings.Reader.WriteTo: invalid WriteString count"));
		}
		r.i = r.i + (m) >> 0;
		n = new Go$Int64(0, m);
		if (!((m === s.length)) && go$interfaceIsEqual(err, null)) {
			err = io.ErrShortWrite;
		}
		return [n, err];
	};
	Reader.prototype.WriteTo = function(w) { return this.go$val.WriteTo(w); };
	NewReader = go$pkg.NewReader = function(s) {
		return new Reader.Ptr(s, 0, -1);
	};
	explode = function(s, n) {
		var l, a, size, ch, _tuple, i, cur, _tuple$1, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		if (n === 0) {
			return (go$sliceType(Go$String)).nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = (go$sliceType(Go$String)).make(n, 0, function() { return ""; });
		size = 0;
		ch = 0;
		_tuple = [0, 0], i = _tuple[0], cur = _tuple[1];
		while ((i + 1 >> 0) < n) {
			_tuple$1 = utf8.DecodeRuneInString(s.substring(cur)), ch = _tuple$1[0], size = _tuple$1[1];
			if (ch === 65533) {
				_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = "\xEF\xBF\xBD") : go$throwRuntimeError("index out of range");
			} else {
				_slice$1 = a, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = s.substring(cur, (cur + size >> 0))) : go$throwRuntimeError("index out of range");
			}
			cur = cur + (size) >> 0;
			i = i + 1 >> 0;
		}
		if (cur < s.length) {
			_slice$2 = a, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = s.substring(cur)) : go$throwRuntimeError("index out of range");
		}
		return a;
	};
	hashstr = function(sep) {
		var hash, i, _tuple, pow, sq, i$1, x, x$1;
		hash = 0;
		i = 0;
		while (i < sep.length) {
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i + 1 >> 0;
		}
		_tuple = [1, 16777619], pow = _tuple[0], sq = _tuple[1];
		i$1 = sep.length;
		while (i$1 > 0) {
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = i$1 >> 1 >> 0;
		}
		return [hash, pow];
	};
	Count = go$pkg.Count = function(s, sep) {
		var n, c, i, _tuple, hashsep, pow, h, i$1, lastmatch, i$2, x, x$1;
		n = 0;
		if (sep.length === 0) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length === 1) {
			c = sep.charCodeAt(0);
			i = 0;
			while (i < s.length) {
				if (s.charCodeAt(i) === c) {
					n = n + 1 >> 0;
				}
				i = i + 1 >> 0;
			}
			return n;
		} else if (sep.length > s.length) {
			return 0;
		} else if (sep.length === s.length) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		_tuple = hashstr(sep), hashsep = _tuple[0], pow = _tuple[1];
		h = 0;
		i$1 = 0;
		while (i$1 < sep.length) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 + 1 >> 0;
		}
		lastmatch = 0;
		if ((h === hashsep) && s.substring(0, sep.length) === sep) {
			n = n + 1 >> 0;
			lastmatch = sep.length;
		}
		i$2 = sep.length;
		while (i$2 < s.length) {
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$2 - sep.length >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$2 = i$2 + 1 >> 0;
			if ((h === hashsep) && lastmatch <= (i$2 - sep.length >> 0) && s.substring(i$2 - sep.length >> 0, i$2) === sep) {
				n = n + 1 >> 0;
				lastmatch = i$2;
			}
		}
		return n;
	};
	Contains = go$pkg.Contains = function(s, substr) {
		return Index(s, substr) >= 0;
	};
	ContainsRune = go$pkg.ContainsRune = function(s, r) {
		return IndexRune(s, r) >= 0;
	};
	Index = go$pkg.Index = function(s, sep) {
		var n, _tuple, hashsep, pow, h, i, i$1, x, x$1;
		n = sep.length;
		if (n === 0) {
			return 0;
		} else if (n === 1) {
			return IndexByte(s, sep.charCodeAt(0));
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashstr(sep), hashsep = _tuple[0], pow = _tuple[1];
		h = 0;
		i = 0;
		while (i < n) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i) >>> 0) >>> 0;
			i = i + 1 >> 0;
		}
		if ((h === hashsep) && s.substring(0, n) === sep) {
			return 0;
		}
		i$1 = n;
		while (i$1 < s.length) {
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$1) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$1 - n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$1 = i$1 + 1 >> 0;
			if ((h === hashsep) && s.substring(i$1 - n >> 0, i$1) === sep) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	LastIndex = go$pkg.LastIndex = function(s, sep) {
		var n, c, i, i$1;
		n = sep.length;
		if (n === 0) {
			return s.length;
		}
		c = sep.charCodeAt(0);
		if (n === 1) {
			i = s.length - 1 >> 0;
			while (i >= 0) {
				if (s.charCodeAt(i) === c) {
					return i;
				}
				i = i - 1 >> 0;
			}
			return -1;
		}
		i$1 = s.length - n >> 0;
		while (i$1 >= 0) {
			if ((s.charCodeAt(i$1) === c) && s.substring(i$1, (i$1 + n >> 0)) === sep) {
				return i$1;
			}
			i$1 = i$1 - 1 >> 0;
		}
		return -1;
	};
	IndexRune = go$pkg.IndexRune = function(s, r) {
		var b, i, _ref, _i, _rune, c, i$1;
		if (r < 128) {
			b = (r << 24 >>> 24);
			i = 0;
			while (i < s.length) {
				if (s.charCodeAt(i) === b) {
					return i;
				}
				i = i + 1 >> 0;
			}
		} else {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = go$decodeRune(_ref, _i);
				c = _rune[0];
				i$1 = _i;
				if (c === r) {
					return i$1;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	IndexAny = go$pkg.IndexAny = function(s, chars) {
		var _ref, _i, _rune, c, i, _ref$1, _i$1, _rune$1, m;
		if (chars.length > 0) {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = go$decodeRune(_ref, _i);
				c = _rune[0];
				i = _i;
				_ref$1 = chars;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					_rune$1 = go$decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	genSplit = function(s, sep, sepSave, n) {
		var c, start, a, na, i, _slice, _index, _slice$1, _index$1;
		if (n === 0) {
			return (go$sliceType(Go$String)).nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = (go$sliceType(Go$String)).make(n, 0, function() { return ""; });
		na = 0;
		i = 0;
		while ((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n) {
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				_slice = a, _index = na, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = s.substring(start, (i + sepSave >> 0))) : go$throwRuntimeError("index out of range");
				na = na + 1 >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + 1 >> 0;
		}
		_slice$1 = a, _index$1 = na, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = s.substring(start)) : go$throwRuntimeError("index out of range");
		return go$subslice(a, 0, (na + 1 >> 0));
	};
	Split = go$pkg.Split = function(s, sep) {
		return genSplit(s, sep, 0, -1);
	};
	Fields = go$pkg.Fields = function(s) {
		return FieldsFunc(s, unicode.IsSpace);
	};
	FieldsFunc = go$pkg.FieldsFunc = function(s, f) {
		var n, inField, _ref, _i, _rune, rune, wasInField, a, na, fieldStart, _ref$1, _i$1, _rune$1, rune$1, i, _slice, _index, _slice$1, _index$1;
		n = 0;
		inField = false;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			rune = _rune[0];
			wasInField = inField;
			inField = !f(rune);
			if (inField && !wasInField) {
				n = n + 1 >> 0;
			}
			_i += _rune[1];
		}
		a = (go$sliceType(Go$String)).make(n, 0, function() { return ""; });
		na = 0;
		fieldStart = -1;
		_ref$1 = s;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			_rune$1 = go$decodeRune(_ref$1, _i$1);
			rune$1 = _rune$1[0];
			i = _i$1;
			if (f(rune$1)) {
				if (fieldStart >= 0) {
					_slice = a, _index = na, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = s.substring(fieldStart, i)) : go$throwRuntimeError("index out of range");
					na = na + 1 >> 0;
					fieldStart = -1;
				}
			} else if (fieldStart === -1) {
				fieldStart = i;
			}
			_i$1 += _rune$1[1];
		}
		if (fieldStart >= 0) {
			_slice$1 = a, _index$1 = na, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = s.substring(fieldStart)) : go$throwRuntimeError("index out of range");
		}
		return a;
	};
	Join = go$pkg.Join = function(a, sep) {
		var _slice, _index, x, x$1, n, i, _slice$1, _index$1, b, _slice$2, _index$2, bp, _ref, _i, _slice$3, _index$3, s;
		if (a.length === 0) {
			return "";
		}
		if (a.length === 1) {
			return (_slice = a, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		n = (x = sep.length, x$1 = (a.length - 1 >> 0), (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		i = 0;
		while (i < a.length) {
			n = n + ((_slice$1 = a, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).length) >> 0;
			i = i + 1 >> 0;
		}
		b = (go$sliceType(Go$Uint8)).make(n, 0, function() { return 0; });
		bp = go$copyString(b, (_slice$2 = a, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")));
		_ref = go$subslice(a, 1);
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice$3 = _ref, _index$3 = _i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			bp = bp + (go$copyString(go$subslice(b, bp), sep)) >> 0;
			bp = bp + (go$copyString(go$subslice(b, bp), s)) >> 0;
			_i++;
		}
		return go$bytesToString(b);
	};
	HasPrefix = go$pkg.HasPrefix = function(s, prefix) {
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	HasSuffix = go$pkg.HasSuffix = function(s, suffix) {
		return s.length >= suffix.length && s.substring((s.length - suffix.length >> 0)) === suffix;
	};
	Map = go$pkg.Map = function(mapping, s) {
		var maxbytes, nbytes, b, _ref, _i, _rune, c, i, r, wid, x, nb;
		maxbytes = s.length;
		nbytes = 0;
		b = (go$sliceType(Go$Uint8)).nil;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			i = _i;
			r = mapping(c);
			if (b === (go$sliceType(Go$Uint8)).nil) {
				if (r === c) {
					_i += _rune[1];
					continue;
				}
				b = (go$sliceType(Go$Uint8)).make(maxbytes, 0, function() { return 0; });
				nbytes = go$copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = (x = 2, (((maxbytes >>> 16 << 16) * x >> 0) + (maxbytes << 16 >>> 16) * x) >> 0) + 4 >> 0;
					nb = (go$sliceType(Go$Uint8)).make(maxbytes, 0, function() { return 0; });
					go$copySlice(nb, go$subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune(go$subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		}
		if (b === (go$sliceType(Go$Uint8)).nil) {
			return s;
		}
		return go$bytesToString(go$subslice(b, 0, nbytes));
	};
	Repeat = go$pkg.Repeat = function(s, count) {
		var x, b, bp, i;
		b = (go$sliceType(Go$Uint8)).make((x = s.length, (((x >>> 16 << 16) * count >> 0) + (x << 16 >>> 16) * count) >> 0), 0, function() { return 0; });
		bp = 0;
		i = 0;
		while (i < count) {
			bp = bp + (go$copyString(go$subslice(b, bp), s)) >> 0;
			i = i + 1 >> 0;
		}
		return go$bytesToString(b);
	};
	ToUpper = go$pkg.ToUpper = function(s) {
		return Map(unicode.ToUpper, s);
	};
	ToLower = go$pkg.ToLower = function(s) {
		return Map(unicode.ToLower, s);
	};
	TrimLeftFunc = go$pkg.TrimLeftFunc = function(s, f) {
		var i;
		i = indexFunc(s, f, false);
		if (i === -1) {
			return "";
		}
		return s.substring(i);
	};
	TrimRightFunc = go$pkg.TrimRightFunc = function(s, f) {
		var i, _tuple, wid;
		i = lastIndexFunc(s, f, false);
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString(s.substring(i)), wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + 1 >> 0;
		}
		return s.substring(0, i);
	};
	TrimFunc = go$pkg.TrimFunc = function(s, f) {
		return TrimRightFunc(TrimLeftFunc(s, f), f);
	};
	IndexFunc = go$pkg.IndexFunc = function(s, f) {
		return indexFunc(s, f, true);
	};
	indexFunc = function(s, f, truth) {
		var start, wid, r, _tuple;
		start = 0;
		while (start < s.length) {
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s.substring(start)), r = _tuple[0], wid = _tuple[1];
			}
			if (f(r) === truth) {
				return start;
			}
			start = start + (wid) >> 0;
		}
		return -1;
	};
	lastIndexFunc = function(s, f, truth) {
		var i, _tuple, r, size;
		i = s.length;
		while (i > 0) {
			_tuple = utf8.DecodeLastRuneInString(s.substring(0, i)), r = _tuple[0], size = _tuple[1];
			i = i - (size) >> 0;
			if (f(r) === truth) {
				return i;
			}
		}
		return -1;
	};
	TrimSpace = go$pkg.TrimSpace = function(s) {
		return TrimFunc(s, unicode.IsSpace);
	};
	TrimSuffix = go$pkg.TrimSuffix = function(s, suffix) {
		if (HasSuffix(s, suffix)) {
			return s.substring(0, (s.length - suffix.length >> 0));
		}
		return s;
	};
	Replace = go$pkg.Replace = function(s, old, new$1, n) {
		var m, x, t, w, start, i, j, _tuple, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		if (m = Count(s, old), m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = (go$sliceType(Go$Uint8)).make(s.length + (x = (new$1.length - old.length >> 0), (((n >>> 16 << 16) * x >> 0) + (n << 16 >>> 16) * x) >> 0) >> 0, 0, function() { return 0; });
		w = 0;
		start = 0;
		i = 0;
		while (i < n) {
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString(s.substring(start)), wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index(s.substring(start), old)) >> 0;
			}
			w = w + (go$copyString(go$subslice(t, w), s.substring(start, j))) >> 0;
			w = w + (go$copyString(go$subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + 1 >> 0;
		}
		w = w + (go$copyString(go$subslice(t, w), s.substring(start))) >> 0;
		return go$bytesToString(go$subslice(t, 0, w));
	};
	IndexByte = go$pkg.IndexByte = function(s, c) { return s.indexOf(String.fromCharCode(c)); };
	go$pkg.init = function() {
		Reader.init([["s", "strings", Go$String, ""], ["i", "strings", Go$Int, ""], ["prevRune", "strings", Go$Int, ""]]);
		(go$ptrType(Reader)).methods = [["Len", "", [], [Go$Int], false], ["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["ReadAt", "", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false], ["ReadByte", "", [], [Go$Uint8, go$error], false], ["ReadRune", "", [], [Go$Int32, Go$Int, go$error], false], ["Seek", "", [Go$Int64, Go$Int], [Go$Int64, go$error], false], ["UnreadByte", "", [], [go$error], false], ["UnreadRune", "", [], [go$error], false], ["WriteTo", "", [io.Writer], [Go$Int64, go$error], false]];
	}
	return go$pkg;
})();
go$packages["math/big"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], fmt = go$packages["fmt"], io = go$packages["io"], rand = go$packages["math/rand"], strings = go$packages["strings"], math = go$packages["math"], sync = go$packages["sync"], binary = go$packages["encoding/binary"], Word, Int, nat, divisor, Rat, addWW_g, subWW_g, mulWW_g, mulAddWWW_g, bitLen_g, leadingZeros, divWW_g, addVV_g, subVV_g, addVW_g, subVW_g, shlVU_g, shrVU_g, mulAddVWW_g, addMulVVW_g, divWVW_g, mulWW, divWW, addVV, subVV, addVW, subVW, shlVU, shrVU, mulAddVWW, addMulVVW, divWVW, bitLen, NewInt, charset, writeMultiple, basicMul, karatsubaAdd, karatsubaSub, karatsuba, alias, addAt, max, karatsubaLen, hexValue, divisors, trailingZeroBits, greaterThan, NewRat, low64, quotToFloat, mulDenom, scaleDenom, ratTok, intOne, natOne, natTwo, natTen, karatsubaThreshold, leafSize, cacheBase10, deBruijn32Lookup, deBruijn64Lookup;
	Word = go$pkg.Word = go$newType(4, "Uintptr", "big.Word", "Word", "math/big", null);
	Int = go$pkg.Int = go$newType(0, "Struct", "big.Int", "Int", "math/big", function(neg_, abs_) {
		this.go$val = this;
		this.neg = neg_ !== undefined ? neg_ : false;
		this.abs = abs_ !== undefined ? abs_ : nat.nil;
	});
	nat = go$pkg.nat = go$newType(0, "Slice", "big.nat", "nat", "math/big", null);
	divisor = go$pkg.divisor = go$newType(0, "Struct", "big.divisor", "divisor", "math/big", function(bbb_, nbits_, ndigits_) {
		this.go$val = this;
		this.bbb = bbb_ !== undefined ? bbb_ : nat.nil;
		this.nbits = nbits_ !== undefined ? nbits_ : 0;
		this.ndigits = ndigits_ !== undefined ? ndigits_ : 0;
	});
	Rat = go$pkg.Rat = go$newType(0, "Struct", "big.Rat", "Rat", "math/big", function(a_, b_) {
		this.go$val = this;
		this.a = a_ !== undefined ? a_ : new Int.Ptr();
		this.b = b_ !== undefined ? b_ : new Int.Ptr();
	});
	addWW_g = function(x, y, c) {
		var z1, z0, yc;
		z1 = 0;
		z0 = 0;
		yc = y + c >>> 0;
		z0 = x + yc >>> 0;
		if (z0 < x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	subWW_g = function(x, y, c) {
		var z1, z0, yc;
		z1 = 0;
		z0 = 0;
		yc = y + c >>> 0;
		z0 = x - yc >>> 0;
		if (z0 > x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	mulWW_g = function(x, y) {
		var z1, z0, x0, x1, y0, y1, w0, t, w1, w2;
		z1 = 0;
		z0 = 0;
		x0 = (x & 65535) >>> 0;
		x1 = x >>> 16 >>> 0;
		y0 = (y & 65535) >>> 0;
		y1 = y >>> 16 >>> 0;
		w0 = (((x0 >>> 16 << 16) * y0 >>> 0) + (x0 << 16 >>> 16) * y0) >>> 0;
		t = ((((x1 >>> 16 << 16) * y0 >>> 0) + (x1 << 16 >>> 16) * y0) >>> 0) + (w0 >>> 16 >>> 0) >>> 0;
		w1 = (t & 65535) >>> 0;
		w2 = t >>> 16 >>> 0;
		w1 = w1 + (((((x0 >>> 16 << 16) * y1 >>> 0) + (x0 << 16 >>> 16) * y1) >>> 0)) >>> 0;
		z1 = (((((x1 >>> 16 << 16) * y1 >>> 0) + (x1 << 16 >>> 16) * y1) >>> 0) + w2 >>> 0) + (w1 >>> 16 >>> 0) >>> 0;
		z0 = (((x >>> 16 << 16) * y >>> 0) + (x << 16 >>> 16) * y) >>> 0;
		return [z1, z0];
	};
	mulAddWWW_g = function(x, y, c) {
		var z1, z0, _tuple, zz0;
		z1 = 0;
		z0 = 0;
		_tuple = mulWW(x, y), z1 = _tuple[0], zz0 = _tuple[1];
		if (z0 = zz0 + c >>> 0, z0 < zz0) {
			z1 = z1 + 1 >>> 0;
		}
		return [z1, z0];
	};
	bitLen_g = function(x) {
		var n;
		n = 0;
		while (x >= 32768) {
			n = n + 16 >> 0;
			x = x >>> 16 >>> 0;
		}
		if (x >= 128) {
			x = x >>> 8 >>> 0;
			n = n + 8 >> 0;
		}
		if (x >= 8) {
			x = x >>> 4 >>> 0;
			n = n + 4 >> 0;
		}
		if (x >= 2) {
			x = x >>> 2 >>> 0;
			n = n + 2 >> 0;
		}
		if (x >= 1) {
			n = n + 1 >> 0;
		}
		return n;
	};
	leadingZeros = function(x) {
		return ((32 - bitLen(x) >> 0) >>> 0);
	};
	divWW_g = function(u1, u0, v) {
		var q, r, _tuple, s, y, vn1, vn0, y$1, y$2, un32, y$3, un10, un1, un0, _q, q1, rhat, un21, _q$1, q0, y$4, _tuple$1;
		q = 0;
		r = 0;
		if (u1 >= v) {
			_tuple = [4294967295, 4294967295], q = _tuple[0], r = _tuple[1];
			return [q, r];
		}
		s = leadingZeros(v);
		v = (y = (s), y < 32 ? (v << y) : 0) >>> 0;
		vn1 = v >>> 16 >>> 0;
		vn0 = (v & 65535) >>> 0;
		un32 = (((y$1 = s, y$1 < 32 ? (u1 << y$1) : 0) >>> 0) | ((y$2 = ((32 - s >>> 0)), y$2 < 32 ? (u0 >>> y$2) : 0) >>> 0)) >>> 0;
		un10 = (y$3 = s, y$3 < 32 ? (u0 << y$3) : 0) >>> 0;
		un1 = un10 >>> 16 >>> 0;
		un0 = (un10 & 65535) >>> 0;
		q1 = (_q = un32 / vn1, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
		rhat = un32 - ((((q1 >>> 16 << 16) * vn1 >>> 0) + (q1 << 16 >>> 16) * vn1) >>> 0) >>> 0;
		while (q1 >= 65536 || ((((q1 >>> 16 << 16) * vn0 >>> 0) + (q1 << 16 >>> 16) * vn0) >>> 0) > (((((65536 >>> 16 << 16) * rhat >>> 0) + (65536 << 16 >>> 16) * rhat) >>> 0) + un1 >>> 0)) {
			q1 = q1 - 1 >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		un21 = (((((un32 >>> 16 << 16) * 65536 >>> 0) + (un32 << 16 >>> 16) * 65536) >>> 0) + un1 >>> 0) - ((((q1 >>> 16 << 16) * v >>> 0) + (q1 << 16 >>> 16) * v) >>> 0) >>> 0;
		q0 = (_q$1 = un21 / vn1, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : go$throwRuntimeError("integer divide by zero"));
		rhat = un21 - ((((q0 >>> 16 << 16) * vn1 >>> 0) + (q0 << 16 >>> 16) * vn1) >>> 0) >>> 0;
		while (q0 >= 65536 || ((((q0 >>> 16 << 16) * vn0 >>> 0) + (q0 << 16 >>> 16) * vn0) >>> 0) > (((((65536 >>> 16 << 16) * rhat >>> 0) + (65536 << 16 >>> 16) * rhat) >>> 0) + un0 >>> 0)) {
			q0 = q0 - 1 >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		_tuple$1 = [((((q1 >>> 16 << 16) * 65536 >>> 0) + (q1 << 16 >>> 16) * 65536) >>> 0) + q0 >>> 0, (y$4 = s, y$4 < 32 ? ((((((((un21 >>> 16 << 16) * 65536 >>> 0) + (un21 << 16 >>> 16) * 65536) >>> 0) + un0 >>> 0) - ((((q0 >>> 16 << 16) * v >>> 0) + (q0 << 16 >>> 16) * v) >>> 0) >>> 0)) >>> y$4) : 0) >>> 0], q = _tuple$1[0], r = _tuple$1[1];
		return [q, r];
	};
	addVV_g = function(z, x, y) {
		var c, _ref, _i, i, _tuple, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		c = 0;
		_ref = z;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_tuple = addWW_g((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = y, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), c), c = _tuple[0], _slice$2 = z, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[1]) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return c;
	};
	subVV_g = function(z, x, y) {
		var c, _ref, _i, i, _tuple, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		c = 0;
		_ref = z;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_tuple = subWW_g((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = y, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), c), c = _tuple[0], _slice$2 = z, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[1]) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return c;
	};
	addVW_g = function(z, x, y) {
		var c, _ref, _i, i, _tuple, _slice, _index, _slice$1, _index$1;
		c = 0;
		c = y;
		_ref = z;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_tuple = addWW_g((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), c, 0), c = _tuple[0], _slice$1 = z, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = _tuple[1]) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return c;
	};
	subVW_g = function(z, x, y) {
		var c, _ref, _i, i, _tuple, _slice, _index, _slice$1, _index$1;
		c = 0;
		c = y;
		_ref = z;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_tuple = subWW_g((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), c, 0), c = _tuple[0], _slice$1 = z, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = _tuple[1]) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return c;
	};
	shlVU_g = function(z, x, s) {
		var c, n, nonAsciiName, _slice, _index, w1, y, i, w, _slice$1, _index$1, y$1, y$2, _slice$2, _index$2, y$3, _slice$3, _index$3;
		c = 0;
		if (n = z.length, n > 0) {
			nonAsciiName = 32 - s >>> 0;
			w1 = (_slice = x, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			c = (y = nonAsciiName, y < 32 ? (w1 >>> y) : 0) >>> 0;
			i = n - 1 >> 0;
			while (i > 0) {
				w = w1;
				w1 = (_slice$1 = x, _index$1 = (i - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				_slice$2 = z, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (((y$1 = s, y$1 < 32 ? (w << y$1) : 0) >>> 0) | ((y$2 = nonAsciiName, y$2 < 32 ? (w1 >>> y$2) : 0) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
				i = i - 1 >> 0;
			}
			_slice$3 = z, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (y$3 = s, y$3 < 32 ? (w1 << y$3) : 0) >>> 0) : go$throwRuntimeError("index out of range");
		}
		return c;
	};
	shrVU_g = function(z, x, s) {
		var c, n, nonAsciiName, _slice, _index, w1, y, i, w, _slice$1, _index$1, y$1, y$2, _slice$2, _index$2, y$3, _slice$3, _index$3;
		c = 0;
		if (n = z.length, n > 0) {
			nonAsciiName = 32 - s >>> 0;
			w1 = (_slice = x, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			c = (y = nonAsciiName, y < 32 ? (w1 << y) : 0) >>> 0;
			i = 0;
			while (i < (n - 1 >> 0)) {
				w = w1;
				w1 = (_slice$1 = x, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				_slice$2 = z, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (((y$1 = s, y$1 < 32 ? (w >>> y$1) : 0) >>> 0) | ((y$2 = nonAsciiName, y$2 < 32 ? (w1 << y$2) : 0) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
				i = i + 1 >> 0;
			}
			_slice$3 = z, _index$3 = n - 1 >> 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (y$3 = s, y$3 < 32 ? (w1 >>> y$3) : 0) >>> 0) : go$throwRuntimeError("index out of range");
		}
		return c;
	};
	mulAddVWW_g = function(z, x, y, r) {
		var c, _ref, _i, i, _tuple, _slice, _index, _slice$1, _index$1;
		c = 0;
		c = r;
		_ref = z;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_tuple = mulAddWWW_g((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), y, c), c = _tuple[0], _slice$1 = z, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = _tuple[1]) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return c;
	};
	addMulVVW_g = function(z, x, y) {
		var c, _ref, _i, i, _tuple, _slice, _index, _slice$1, _index$1, z1, z0, _tuple$1, _slice$2, _index$2;
		c = 0;
		_ref = z;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_tuple = mulAddWWW_g((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), y, (_slice$1 = z, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))), z1 = _tuple[0], z0 = _tuple[1];
			_tuple$1 = addWW_g(z0, c, 0), c = _tuple$1[0], _slice$2 = z, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple$1[1]) : go$throwRuntimeError("index out of range");
			c = c + (z1) >>> 0;
			_i++;
		}
		return c;
	};
	divWVW_g = function(z, xn, x, y) {
		var r, i, _tuple, _slice, _index, _slice$1, _index$1;
		r = 0;
		r = xn;
		i = z.length - 1 >> 0;
		while (i >= 0) {
			_tuple = divWW_g(r, (_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), y), _slice$1 = z, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = _tuple[0]) : go$throwRuntimeError("index out of range"), r = _tuple[1];
			i = i - 1 >> 0;
		}
		return r;
	};
	mulWW = function(x, y) { return mulWW_g(x, y); };
	divWW = function(x1, x0, y) { return divWW_g(x1, x0, y); };
	addVV = function(z, x, y) { return addVV_g(z, x, y); };
	subVV = function(z, x, y) { return subVV_g(z, x, y); };
	addVW = function(z, x, y) { return addVW_g(z, x, y); };
	subVW = function(z, x, y) { return subVW_g(z, x, y); };
	shlVU = function(z, x, s) { return shlVU_g(z, x, s); };
	shrVU = function(z, x, s) { return shrVU_g(z, x, s); };
	mulAddVWW = function(z, x, y, r) { return mulAddVWW_g(z, x, y, r); };
	addMulVVW = function(z, x, y) { return addMulVVW_g(z, x, y); };
	divWVW = function(z, xn, x, y) { return divWVW_g(z, xn, x, y); };
	bitLen = function(x) { return bitLen_g(x); };
	Int.Ptr.prototype.Sign = function() {
		var x;
		x = this;
		if (x.abs.length === 0) {
			return 0;
		}
		if (x.neg) {
			return -1;
		}
		return 1;
	};
	Int.prototype.Sign = function() { return this.go$val.Sign(); };
	Int.Ptr.prototype.SetInt64 = function(x) {
		var z, neg;
		z = this;
		neg = false;
		if ((x.high < 0 || (x.high === 0 && x.low < 0))) {
			neg = true;
			x = new Go$Int64(-x.high, -x.low);
		}
		z.abs = z.abs.setUint64(new Go$Uint64(x.high, x.low));
		z.neg = neg;
		return z;
	};
	Int.prototype.SetInt64 = function(x) { return this.go$val.SetInt64(x); };
	Int.Ptr.prototype.SetUint64 = function(x) {
		var z;
		z = this;
		z.abs = z.abs.setUint64(x);
		z.neg = false;
		return z;
	};
	Int.prototype.SetUint64 = function(x) { return this.go$val.SetUint64(x); };
	NewInt = go$pkg.NewInt = function(x) {
		return new Int.Ptr().SetInt64(x);
	};
	Int.Ptr.prototype.Set = function(x) {
		var z;
		z = this;
		if (!(z === x)) {
			z.abs = z.abs.set(x.abs);
			z.neg = x.neg;
		}
		return z;
	};
	Int.prototype.Set = function(x) { return this.go$val.Set(x); };
	Int.Ptr.prototype.Bits = function() {
		var x, x$1;
		x = this;
		return (x$1 = x.abs, go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length));
	};
	Int.prototype.Bits = function() { return this.go$val.Bits(); };
	Int.Ptr.prototype.SetBits = function(abs) {
		var z;
		z = this;
		z.abs = go$subslice(new nat(abs.array), abs.offset, abs.offset + abs.length).norm();
		z.neg = false;
		return z;
	};
	Int.prototype.SetBits = function(abs) { return this.go$val.SetBits(abs); };
	Int.Ptr.prototype.Abs = function(x) {
		var z;
		z = this;
		z.Set(x);
		z.neg = false;
		return z;
	};
	Int.prototype.Abs = function(x) { return this.go$val.Abs(x); };
	Int.Ptr.prototype.Neg = function(x) {
		var z;
		z = this;
		z.Set(x);
		z.neg = z.abs.length > 0 && !z.neg;
		return z;
	};
	Int.prototype.Neg = function(x) { return this.go$val.Neg(x); };
	Int.Ptr.prototype.Add = function(x, y) {
		var z, neg;
		z = this;
		neg = x.neg;
		if (x.neg === y.neg) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.length > 0 && neg;
		return z;
	};
	Int.prototype.Add = function(x, y) { return this.go$val.Add(x, y); };
	Int.Ptr.prototype.Sub = function(x, y) {
		var z, neg;
		z = this;
		neg = x.neg;
		if (!(x.neg === y.neg)) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.length > 0 && neg;
		return z;
	};
	Int.prototype.Sub = function(x, y) { return this.go$val.Sub(x, y); };
	Int.Ptr.prototype.Mul = function(x, y) {
		var z;
		z = this;
		z.abs = z.abs.mul(x.abs, y.abs);
		z.neg = z.abs.length > 0 && !(x.neg === y.neg);
		return z;
	};
	Int.prototype.Mul = function(x, y) { return this.go$val.Mul(x, y); };
	Int.Ptr.prototype.MulRange = function(a, b) {
		var z, neg, x, x$1, _tuple;
		z = this;
		if ((a.high > b.high || (a.high === b.high && a.low > b.low))) {
			return z.SetInt64(new Go$Int64(0, 1));
		} else if ((a.high < 0 || (a.high === 0 && a.low <= 0)) && (b.high > 0 || (b.high === 0 && b.low >= 0))) {
			return z.SetInt64(new Go$Int64(0, 0));
		}
		neg = false;
		if ((a.high < 0 || (a.high === 0 && a.low < 0))) {
			neg = (x = (x$1 = new Go$Int64(b.high - a.high, b.low - a.low), new Go$Int64(x$1.high & 0, (x$1.low & 1) >>> 0)), (x.high === 0 && x.low === 0));
			_tuple = [new Go$Int64(-b.high, -b.low), new Go$Int64(-a.high, -a.low)], a = _tuple[0], b = _tuple[1];
		}
		z.abs = z.abs.mulRange(new Go$Uint64(a.high, a.low), new Go$Uint64(b.high, b.low));
		z.neg = neg;
		return z;
	};
	Int.prototype.MulRange = function(a, b) { return this.go$val.MulRange(a, b); };
	Int.Ptr.prototype.Binomial = function(n, k) {
		var z, _tuple, a, b, x;
		z = this;
		_tuple = [new Int.Ptr(), new Int.Ptr()], a = _tuple[0], b = _tuple[1];
		a.MulRange((x = new Go$Int64(n.high - k.high, n.low - k.low), new Go$Int64(x.high + 0, x.low + 1)), n);
		b.MulRange(new Go$Int64(0, 1), k);
		return z.Quo(a, b);
	};
	Int.prototype.Binomial = function(n, k) { return this.go$val.Binomial(n, k); };
	Int.Ptr.prototype.Quo = function(x, y) {
		var z, _tuple;
		z = this;
		_tuple = z.abs.div(nat.nil, x.abs, y.abs), z.abs = _tuple[0];
		z.neg = z.abs.length > 0 && !(x.neg === y.neg);
		return z;
	};
	Int.prototype.Quo = function(x, y) { return this.go$val.Quo(x, y); };
	Int.Ptr.prototype.Rem = function(x, y) {
		var z, _tuple;
		z = this;
		_tuple = nat.nil.div(z.abs, x.abs, y.abs), z.abs = _tuple[1];
		z.neg = z.abs.length > 0 && x.neg;
		return z;
	};
	Int.prototype.Rem = function(x, y) { return this.go$val.Rem(x, y); };
	Int.Ptr.prototype.QuoRem = function(x, y, r) {
		var z, _tuple, _tuple$1;
		z = this;
		_tuple = z.abs.div(r.abs, x.abs, y.abs), z.abs = _tuple[0], r.abs = _tuple[1];
		_tuple$1 = [z.abs.length > 0 && !(x.neg === y.neg), r.abs.length > 0 && x.neg], z.neg = _tuple$1[0], r.neg = _tuple$1[1];
		return [z, r];
	};
	Int.prototype.QuoRem = function(x, y, r) { return this.go$val.QuoRem(x, y, r); };
	Int.Ptr.prototype.Div = function(x, y) {
		var z, y_neg, r;
		z = this;
		y_neg = y.neg;
		r = new Int.Ptr();
		z.QuoRem(x, y, r);
		if (r.neg) {
			if (y_neg) {
				z.Add(z, intOne);
			} else {
				z.Sub(z, intOne);
			}
		}
		return z;
	};
	Int.prototype.Div = function(x, y) { return this.go$val.Div(x, y); };
	Int.Ptr.prototype.Mod = function(x, y) {
		var z, y0, q;
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.Ptr().Set(y);
		}
		q = new Int.Ptr();
		q.QuoRem(x, y, z);
		if (z.neg) {
			if (y0.neg) {
				z.Sub(z, y0);
			} else {
				z.Add(z, y0);
			}
		}
		return z;
	};
	Int.prototype.Mod = function(x, y) { return this.go$val.Mod(x, y); };
	Int.Ptr.prototype.DivMod = function(x, y, m) {
		var z, y0;
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.Ptr().Set(y);
		}
		z.QuoRem(x, y, m);
		if (m.neg) {
			if (y0.neg) {
				z.Add(z, intOne);
				m.Sub(m, y0);
			} else {
				z.Sub(z, intOne);
				m.Add(m, y0);
			}
		}
		return [z, m];
	};
	Int.prototype.DivMod = function(x, y, m) { return this.go$val.DivMod(x, y, m); };
	Int.Ptr.prototype.Cmp = function(y) {
		var r, x;
		r = 0;
		x = this;
		if (x.neg === y.neg) {
			r = x.abs.cmp(y.abs);
			if (x.neg) {
				r = -r;
			}
		} else if (x.neg) {
			r = -1;
		} else {
			r = 1;
		}
		return r;
	};
	Int.prototype.Cmp = function(y) { return this.go$val.Cmp(y); };
	Int.Ptr.prototype.String = function() {
		var x;
		x = this;
		if (x === (go$ptrType(Int)).nil) {
			return "<nil>";
		} else if (x.neg) {
			return "-" + x.abs.decimalString();
		}
		return x.abs.decimalString();
	};
	Int.prototype.String = function() { return this.go$val.String(); };
	charset = function(ch) {
		var _ref;
		_ref = ch;
		if (_ref === 98) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 2);
		} else if (_ref === 111) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 8);
		} else if (_ref === 100 || _ref === 115 || _ref === 118) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 10);
		} else if (_ref === 120) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 16);
		} else if (_ref === 88) {
			return "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".substring(0, 16);
		}
		return "";
	};
	writeMultiple = function(s, text, count) {
		var b;
		if (text.length > 0) {
			b = new (go$sliceType(Go$Uint8))(go$stringToBytes(text));
			while (count > 0) {
				s.Write(b);
				count = count - 1 >> 0;
			}
		}
	};
	Int.Ptr.prototype.Format = function(s, ch) {
		var x, cs, sign, prefix, _ref, digits, left, zeroes, right, _tuple, precision, precisionSet, length, widthSet, width, _tuple$1, d;
		x = this;
		cs = charset(ch);
		if (cs === "") {
			fmt.Fprintf(s, "%%!%c(big.Int=%s)", new (go$sliceType(go$emptyInterface))([new Go$Int32(ch), new Go$String(x.String())]));
			return;
		} else if (x === (go$ptrType(Int)).nil) {
			fmt.Fprint(s, new (go$sliceType(go$emptyInterface))([new Go$String("<nil>")]));
			return;
		}
		sign = "";
		if (x.neg) {
			sign = "-";
		} else if (s.Flag(43)) {
			sign = "+";
		} else if (s.Flag(32)) {
			sign = " ";
		}
		prefix = "";
		if (s.Flag(35)) {
			_ref = ch;
			if (_ref === 111) {
				prefix = "0";
			} else if (_ref === 120) {
				prefix = "0x";
			} else if (_ref === 88) {
				prefix = "0X";
			}
		}
		digits = x.abs.string(cs);
		left = 0;
		zeroes = 0;
		right = 0;
		_tuple = s.Precision(), precision = _tuple[0], precisionSet = _tuple[1];
		if (precisionSet) {
			if (digits.length < precision) {
				zeroes = precision - digits.length >> 0;
			} else if (digits === "0" && (precision === 0)) {
				return;
			}
		}
		length = ((sign.length + prefix.length >> 0) + zeroes >> 0) + digits.length >> 0;
		if (_tuple$1 = s.Width(), width = _tuple$1[0], widthSet = _tuple$1[1], widthSet && length < width) {
			d = width - length >> 0;
			if (s.Flag(45)) {
				right = d;
			} else if (s.Flag(48) && !precisionSet) {
				zeroes = d;
			} else {
				left = d;
			}
		}
		writeMultiple(s, " ", left);
		writeMultiple(s, sign, 1);
		writeMultiple(s, prefix, 1);
		writeMultiple(s, "0", zeroes);
		writeMultiple(s, digits, 1);
		writeMultiple(s, " ", right);
	};
	Int.prototype.Format = function(s, ch) { return this.go$val.Format(s, ch); };
	Int.Ptr.prototype.scan = function(r, base) {
		var z, _tuple, ch, err, neg, _ref, _tuple$1;
		z = this;
		_tuple = r.ReadRune(), ch = _tuple[0], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Int)).nil, 0, err];
		}
		neg = false;
		_ref = ch;
		if (_ref === 45) {
			neg = true;
		} else if (_ref === 43) {
		} else {
			r.UnreadRune();
		}
		_tuple$1 = z.abs.scan(r, base), z.abs = _tuple$1[0], base = _tuple$1[1], err = _tuple$1[2];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Int)).nil, base, err];
		}
		z.neg = z.abs.length > 0 && neg;
		return [z, base, null];
	};
	Int.prototype.scan = function(r, base) { return this.go$val.scan(r, base); };
	Int.Ptr.prototype.Scan = function(s, ch) {
		var z, base, _ref, _tuple, err;
		z = this;
		s.SkipSpace();
		base = 0;
		_ref = ch;
		if (_ref === 98) {
			base = 2;
		} else if (_ref === 111) {
			base = 8;
		} else if (_ref === 100) {
			base = 10;
		} else if (_ref === 120 || _ref === 88) {
			base = 16;
		} else if (_ref === 115 || _ref === 118) {
		} else {
			return errors.New("Int.Scan: invalid verb");
		}
		_tuple = z.scan(s, base), err = _tuple[2];
		return err;
	};
	Int.prototype.Scan = function(s, ch) { return this.go$val.Scan(s, ch); };
	Int.Ptr.prototype.Int64 = function() {
		var x, x$1, v;
		x = this;
		v = (x$1 = x.Uint64(), new Go$Int64(x$1.high, x$1.low));
		if (x.neg) {
			v = new Go$Int64(-v.high, -v.low);
		}
		return v;
	};
	Int.prototype.Int64 = function() { return this.go$val.Int64(); };
	Int.Ptr.prototype.Uint64 = function() {
		var x, x$1, _slice, _index, v, x$2, x$3, _slice$1, _index$1;
		x = this;
		if (x.abs.length === 0) {
			return new Go$Uint64(0, 0);
		}
		v = (x$1 = (_slice = x.abs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new Go$Uint64(0, x$1.constructor === Number ? x$1 : 1));
		if (true && x.abs.length > 1) {
			v = (x$2 = go$shiftLeft64((x$3 = (_slice$1 = x.abs, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new Go$Uint64(0, x$3.constructor === Number ? x$3 : 1)), 32), new Go$Uint64(v.high | x$2.high, (v.low | x$2.low) >>> 0));
		}
		return v;
	};
	Int.prototype.Uint64 = function() { return this.go$val.Uint64(); };
	Int.Ptr.prototype.SetString = function(s, base) {
		var z, r, _tuple, err, _tuple$1;
		z = this;
		r = strings.NewReader(s);
		_tuple = z.scan(r, base), err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Int)).nil, false];
		}
		_tuple$1 = r.ReadRune(), err = _tuple$1[2];
		if (!(go$interfaceIsEqual(err, io.EOF))) {
			return [(go$ptrType(Int)).nil, false];
		}
		return [z, true];
	};
	Int.prototype.SetString = function(s, base) { return this.go$val.SetString(s, base); };
	Int.Ptr.prototype.SetBytes = function(buf) {
		var z;
		z = this;
		z.abs = z.abs.setBytes(buf);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBytes = function(buf) { return this.go$val.SetBytes(buf); };
	Int.Ptr.prototype.Bytes = function() {
		var x, x$1, buf;
		x = this;
		buf = (go$sliceType(Go$Uint8)).make((x$1 = x.abs.length, (((x$1 >>> 16 << 16) * 4 >> 0) + (x$1 << 16 >>> 16) * 4) >> 0), 0, function() { return 0; });
		return go$subslice(buf, x.abs.bytes(buf));
	};
	Int.prototype.Bytes = function() { return this.go$val.Bytes(); };
	Int.Ptr.prototype.BitLen = function() {
		var x;
		x = this;
		return x.abs.bitLen();
	};
	Int.prototype.BitLen = function() { return this.go$val.BitLen(); };
	Int.Ptr.prototype.Exp = function(x, y, m) {
		var z, mWords, _slice, _index;
		z = this;
		if (y.neg || (y.abs.length === 0)) {
			return z.SetInt64(new Go$Int64(0, 1));
		}
		mWords = nat.nil;
		if (!(m === (go$ptrType(Int)).nil)) {
			mWords = m.abs;
		}
		z.abs = z.abs.expNN(x.abs, y.abs, mWords);
		z.neg = z.abs.length > 0 && x.neg && ((((_slice = y.abs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) & 1) >>> 0) === 1);
		return z;
	};
	Int.prototype.Exp = function(x, y, m) { return this.go$val.Exp(x, y, m); };
	Int.Ptr.prototype.GCD = function(x, y, a, b) {
		var z, A, B, X, Y, lastX, lastY, q, temp, r, _tuple, _tuple$1, _struct, l, r$1, _struct$1, l$1, r$2, _struct$2, l$2, r$3;
		z = this;
		if (a.Sign() <= 0 || b.Sign() <= 0) {
			z.SetInt64(new Go$Int64(0, 0));
			if (!(x === (go$ptrType(Int)).nil)) {
				x.SetInt64(new Go$Int64(0, 0));
			}
			if (!(y === (go$ptrType(Int)).nil)) {
				y.SetInt64(new Go$Int64(0, 0));
			}
			return z;
		}
		if (x === (go$ptrType(Int)).nil && y === (go$ptrType(Int)).nil) {
			return z.binaryGCD(a, b);
		}
		A = new Int.Ptr().Set(a);
		B = new Int.Ptr().Set(b);
		X = new Int.Ptr();
		Y = new Int.Ptr().SetInt64(new Go$Int64(0, 1));
		lastX = new Int.Ptr().SetInt64(new Go$Int64(0, 1));
		lastY = new Int.Ptr();
		q = new Int.Ptr();
		temp = new Int.Ptr();
		while (B.abs.length > 0) {
			r = new Int.Ptr();
			_tuple = q.QuoRem(A, B, r), q = _tuple[0], r = _tuple[1];
			_tuple$1 = [B, r], A = _tuple$1[0], B = _tuple$1[1];
			temp.Set(X);
			X.Mul(X, q);
			X.neg = !X.neg;
			X.Add(X, lastX);
			lastX.Set(temp);
			temp.Set(Y);
			Y.Mul(Y, q);
			Y.neg = !Y.neg;
			Y.Add(Y, lastY);
			lastY.Set(temp);
		}
		if (!(x === (go$ptrType(Int)).nil)) {
			l = x, r$1 = (_struct = lastX, new Int.Ptr(_struct.neg, _struct.abs)), l.neg = r$1.neg, l.abs = r$1.abs;
		}
		if (!(y === (go$ptrType(Int)).nil)) {
			l$1 = y, r$2 = (_struct$1 = lastY, new Int.Ptr(_struct$1.neg, _struct$1.abs)), l$1.neg = r$2.neg, l$1.abs = r$2.abs;
		}
		l$2 = z, r$3 = (_struct$2 = A, new Int.Ptr(_struct$2.neg, _struct$2.abs)), l$2.neg = r$3.neg, l$2.abs = r$3.abs;
		return z;
	};
	Int.prototype.GCD = function(x, y, a, b) { return this.go$val.GCD(x, y, a, b); };
	Int.Ptr.prototype.binaryGCD = function(a, b) {
		var z, u, v, k, vk, t, _slice, _index, _tuple, _tuple$1;
		z = this;
		u = z;
		v = new Int.Ptr();
		if (a.abs.length > b.abs.length) {
			u.Set(b);
			v.Rem(a, b);
		} else if (a.abs.length < b.abs.length) {
			u.Set(a);
			v.Rem(b, a);
		} else {
			u.Set(a);
			v.Set(b);
		}
		if (v.abs.length === 0) {
			return u;
		}
		k = u.abs.trailingZeroBits();
		if (vk = v.abs.trailingZeroBits(), vk < k) {
			k = vk;
		}
		u.Rsh(u, k);
		v.Rsh(v, k);
		t = new Int.Ptr();
		if (!(((((_slice = u.abs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) & 1) >>> 0) === 0))) {
			t.Neg(v);
		} else {
			t.Set(u);
		}
		while (t.abs.length > 0) {
			t.Rsh(t, t.abs.trailingZeroBits());
			if (t.neg) {
				_tuple = [t, v], v = _tuple[0], t = _tuple[1];
				v.neg = v.abs.length > 0 && !v.neg;
			} else {
				_tuple$1 = [t, u], u = _tuple$1[0], t = _tuple$1[1];
			}
			t.Sub(u, v);
		}
		return z.Lsh(u, k);
	};
	Int.prototype.binaryGCD = function(a, b) { return this.go$val.binaryGCD(a, b); };
	Int.Ptr.prototype.ProbablyPrime = function(n) {
		var x;
		x = this;
		return !x.neg && x.abs.probablyPrime(n);
	};
	Int.prototype.ProbablyPrime = function(n) { return this.go$val.ProbablyPrime(n); };
	Int.Ptr.prototype.Rand = function(rnd, n) {
		var z;
		z = this;
		z.neg = false;
		if (n.neg === true || (n.abs.length === 0)) {
			z.abs = nat.nil;
			return z;
		}
		z.abs = z.abs.random(rnd, n.abs, n.abs.bitLen());
		return z;
	};
	Int.prototype.Rand = function(rnd, n) { return this.go$val.Rand(rnd, n); };
	Int.Ptr.prototype.ModInverse = function(g, p) {
		var z, d;
		z = this;
		d = new Int.Ptr();
		d.GCD(z, (go$ptrType(Int)).nil, g, p);
		if (z.neg) {
			z.Add(z, p);
		}
		return z;
	};
	Int.prototype.ModInverse = function(g, p) { return this.go$val.ModInverse(g, p); };
	Int.Ptr.prototype.Lsh = function(x, n) {
		var z;
		z = this;
		z.abs = z.abs.shl(x.abs, n);
		z.neg = x.neg;
		return z;
	};
	Int.prototype.Lsh = function(x, n) { return this.go$val.Lsh(x, n); };
	Int.Ptr.prototype.Rsh = function(x, n) {
		var z, t;
		z = this;
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.shr(t, n);
			z.abs = t.add(t, natOne);
			z.neg = true;
			return z;
		}
		z.abs = z.abs.shr(x.abs, n);
		z.neg = false;
		return z;
	};
	Int.prototype.Rsh = function(x, n) { return this.go$val.Rsh(x, n); };
	Int.Ptr.prototype.Bit = function(i) {
		var x, _slice, _index, t;
		x = this;
		if (i === 0) {
			if (x.abs.length > 0) {
				return ((((_slice = x.abs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) & 1) >>> 0) >>> 0);
			}
			return 0;
		}
		if (i < 0) {
			throw go$panic(new Go$String("negative bit index"));
		}
		if (x.neg) {
			t = nat.nil.sub(x.abs, natOne);
			return (t.bit((i >>> 0)) ^ 1) >>> 0;
		}
		return x.abs.bit((i >>> 0));
	};
	Int.prototype.Bit = function(i) { return this.go$val.Bit(i); };
	Int.Ptr.prototype.SetBit = function(x, i, b) {
		var z, t;
		z = this;
		if (i < 0) {
			throw go$panic(new Go$String("negative bit index"));
		}
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.setBit(t, (i >>> 0), (b ^ 1) >>> 0);
			z.abs = t.add(t, natOne);
			z.neg = z.abs.length > 0;
			return z;
		}
		z.abs = z.abs.setBit(x.abs, (i >>> 0), b);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBit = function(x, i, b) { return this.go$val.SetBit(x, i, b); };
	Int.Ptr.prototype.And = function(x, y) {
		var z, x1, y1, _tuple, y1$1;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.or(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.and(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tuple = [y, x], x = _tuple[0], y = _tuple[1];
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.andNot(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.And = function(x, y) { return this.go$val.And(x, y); };
	Int.Ptr.prototype.AndNot = function(x, y) {
		var z, x1, y1, x1$1, y1$1;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.andNot(y1, x1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.andNot(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			x1$1 = nat.nil.sub(x.abs, natOne);
			z.abs = z.abs.add(z.abs.or(x1$1, y.abs), natOne);
			z.neg = true;
			return z;
		}
		y1$1 = nat.nil.add(y.abs, natOne);
		z.abs = z.abs.and(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.AndNot = function(x, y) { return this.go$val.AndNot(x, y); };
	Int.Ptr.prototype.Or = function(x, y) {
		var z, x1, y1, _tuple, y1$1;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.and(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.or(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tuple = [y, x], x = _tuple[0], y = _tuple[1];
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.andNot(y1$1, x.abs), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Or = function(x, y) { return this.go$val.Or(x, y); };
	Int.Ptr.prototype.Xor = function(x, y) {
		var z, x1, y1, _tuple, y1$1;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.xor(x1, y1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.xor(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tuple = [y, x], x = _tuple[0], y = _tuple[1];
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.xor(x.abs, y1$1), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Xor = function(x, y) { return this.go$val.Xor(x, y); };
	Int.Ptr.prototype.Not = function(x) {
		var z;
		z = this;
		if (x.neg) {
			z.abs = z.abs.sub(x.abs, natOne);
			z.neg = false;
			return z;
		}
		z.abs = z.abs.add(x.abs, natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Not = function(x) { return this.go$val.Not(x); };
	Int.Ptr.prototype.GobEncode = function() {
		var x, x$1, buf, i, b, _slice, _index;
		x = this;
		if (x === (go$ptrType(Int)).nil) {
			return [(go$sliceType(Go$Uint8)).nil, null];
		}
		buf = (go$sliceType(Go$Uint8)).make(1 + (x$1 = x.abs.length, (((x$1 >>> 16 << 16) * 4 >> 0) + (x$1 << 16 >>> 16) * 4) >> 0) >> 0, 0, function() { return 0; });
		i = x.abs.bytes(buf) - 1 >> 0;
		b = 2;
		if (x.neg) {
			b = (b | 1) >>> 0;
		}
		_slice = buf, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = b) : go$throwRuntimeError("index out of range");
		return [go$subslice(buf, i), null];
	};
	Int.prototype.GobEncode = function() { return this.go$val.GobEncode(); };
	Int.Ptr.prototype.GobDecode = function(buf) {
		var z, l, r, _slice, _index, b;
		z = this;
		if (buf.length === 0) {
			l = z, r = new Int.Ptr(false, nat.nil), l.neg = r.neg, l.abs = r.abs;
			return null;
		}
		b = (_slice = buf, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (!(((b >>> 1 << 24 >>> 24) === 1))) {
			return errors.New(fmt.Sprintf("Int.GobDecode: encoding version %d not supported", new (go$sliceType(go$emptyInterface))([new Go$Uint8((b >>> 1 << 24 >>> 24))])));
		}
		z.neg = !((((b & 1) >>> 0) === 0));
		z.abs = z.abs.setBytes(go$subslice(buf, 1));
		return null;
	};
	Int.prototype.GobDecode = function(buf) { return this.go$val.GobDecode(buf); };
	Int.Ptr.prototype.MarshalJSON = function() {
		var x;
		x = this;
		return [new (go$sliceType(Go$Uint8))(go$stringToBytes(x.String())), null];
	};
	Int.prototype.MarshalJSON = function() { return this.go$val.MarshalJSON(); };
	Int.Ptr.prototype.UnmarshalJSON = function(x) {
		var z, _tuple, ok;
		z = this;
		_tuple = z.SetString(go$bytesToString(x), 0), ok = _tuple[1];
		if (!ok) {
			return fmt.Errorf("math/big: cannot unmarshal %s into a *big.Int", new (go$sliceType(go$emptyInterface))([x]));
		}
		return null;
	};
	Int.prototype.UnmarshalJSON = function(x) { return this.go$val.UnmarshalJSON(x); };
	nat.prototype.clear = function() {
		var z, _ref, _i, i, _slice, _index;
		z = this;
		_ref = z;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_slice = z, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 0) : go$throwRuntimeError("index out of range");
			_i++;
		}
	};
	go$ptrType(nat).prototype.clear = function() { return this.go$get().clear(); };
	nat.prototype.norm = function() {
		var z, i, _slice, _index;
		z = this;
		i = z.length;
		while (i > 0 && ((_slice = z, _index = (i - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 0)) {
			i = i - 1 >> 0;
		}
		return go$subslice(z, 0, i);
	};
	go$ptrType(nat).prototype.norm = function() { return this.go$get().norm(); };
	nat.prototype.make = function(n) {
		var z;
		z = this;
		if (n <= z.capacity) {
			return go$subslice(z, 0, n);
		}
		return nat.make(n, n + 4 >> 0, function() { return 0; });
	};
	go$ptrType(nat).prototype.make = function(n) { return this.go$get().make(n); };
	nat.prototype.setWord = function(x) {
		var z, _slice, _index;
		z = this;
		if (x === 0) {
			return z.make(0);
		}
		z = z.make(1);
		_slice = z, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = x) : go$throwRuntimeError("index out of range");
		return z;
	};
	go$ptrType(nat).prototype.setWord = function(x) { return this.go$get().setWord(x); };
	nat.prototype.setUint64 = function(x) {
		var z, x$1, w, n, t, _ref, _i, i, _slice, _index;
		z = this;
		if (w = (x.low >>> 0), (x$1 = new Go$Uint64(0, w.constructor === Number ? w : 1), (x$1.high === x.high && x$1.low === x.low))) {
			return z.setWord(w);
		}
		n = 0;
		t = x;
		while ((t.high > 0 || (t.high === 0 && t.low > 0))) {
			n = n + 1 >> 0;
			t = go$shiftRightUint64(t, 32);
		}
		z = z.make(n);
		_ref = z;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_slice = z, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = (new Go$Uint64(x.high & 0, (x.low & 4294967295) >>> 0).low >>> 0)) : go$throwRuntimeError("index out of range");
			x = go$shiftRightUint64(x, 32);
			_i++;
		}
		return z;
	};
	go$ptrType(nat).prototype.setUint64 = function(x) { return this.go$get().setUint64(x); };
	nat.prototype.set = function(x) {
		var z;
		z = this;
		z = z.make(x.length);
		go$copySlice(z, x);
		return z;
	};
	go$ptrType(nat).prototype.set = function(x) { return this.go$get().set(x); };
	nat.prototype.add = function(x, y) {
		var z, m, n, x$1, c, x$2, x$3, _slice, _index;
		z = this;
		m = x.length;
		n = y.length;
		if (m < n) {
			return z.add(y, x);
		} else if (m === 0) {
			return z.make(0);
		} else if (n === 0) {
			return z.set(x);
		}
		z = z.make(m + 1 >> 0);
		c = addVV((x$1 = go$subslice(z, 0, n), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length), go$subslice(new (go$sliceType(Word))(y.array), y.offset, y.offset + y.length));
		if (m > n) {
			c = addVW((x$2 = go$subslice(z, n, m), go$subslice(new (go$sliceType(Word))(x$2.array), x$2.offset, x$2.offset + x$2.length)), (x$3 = go$subslice(x, n), go$subslice(new (go$sliceType(Word))(x$3.array), x$3.offset, x$3.offset + x$3.length)), c);
		}
		_slice = z, _index = m, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = c) : go$throwRuntimeError("index out of range");
		return z.norm();
	};
	go$ptrType(nat).prototype.add = function(x, y) { return this.go$get().add(x, y); };
	nat.prototype.sub = function(x, y) {
		var z, m, n, x$1, c, x$2, x$3;
		z = this;
		m = x.length;
		n = y.length;
		if (m < n) {
			throw go$panic(new Go$String("underflow"));
		} else if (m === 0) {
			return z.make(0);
		} else if (n === 0) {
			return z.set(x);
		}
		z = z.make(m);
		c = subVV((x$1 = go$subslice(z, 0, n), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length), go$subslice(new (go$sliceType(Word))(y.array), y.offset, y.offset + y.length));
		if (m > n) {
			c = subVW((x$2 = go$subslice(z, n), go$subslice(new (go$sliceType(Word))(x$2.array), x$2.offset, x$2.offset + x$2.length)), (x$3 = go$subslice(x, n), go$subslice(new (go$sliceType(Word))(x$3.array), x$3.offset, x$3.offset + x$3.length)), c);
		}
		if (!((c === 0))) {
			throw go$panic(new Go$String("underflow"));
		}
		return z.norm();
	};
	go$ptrType(nat).prototype.sub = function(x, y) { return this.go$get().sub(x, y); };
	nat.prototype.cmp = function(y) {
		var r, x, m, n, i, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5;
		r = 0;
		x = this;
		m = x.length;
		n = y.length;
		if (!((m === n)) || (m === 0)) {
			if (m < n) {
				r = -1;
			} else if (m > n) {
				r = 1;
			}
			return r;
		}
		i = m - 1 >> 0;
		while (i > 0 && ((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === (_slice$1 = y, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))) {
			i = i - 1 >> 0;
		}
		if ((_slice$2 = x, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) < (_slice$3 = y, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))) {
			r = -1;
		} else if ((_slice$4 = x, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) > (_slice$5 = y, _index$5 = i, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"))) {
			r = 1;
		}
		return r;
	};
	go$ptrType(nat).prototype.cmp = function(y) { return this.go$get().cmp(y); };
	nat.prototype.mulAddWW = function(x, y, r) {
		var z, m, x$1, _slice, _index;
		z = this;
		m = x.length;
		if ((m === 0) || (y === 0)) {
			return z.setWord(r);
		}
		z = z.make(m + 1 >> 0);
		_slice = z, _index = m, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = mulAddVWW((x$1 = go$subslice(z, 0, m), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length), y, r)) : go$throwRuntimeError("index out of range");
		return z.norm();
	};
	go$ptrType(nat).prototype.mulAddWW = function(x, y, r) { return this.go$get().mulAddWW(x, y, r); };
	basicMul = function(z, x, y) {
		var _ref, _i, _slice, _index, d, i, x$1, _slice$1, _index$1;
		go$subslice(z, 0, (x.length + y.length >> 0)).clear();
		_ref = y;
		_i = 0;
		while (_i < _ref.length) {
			d = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (!((d === 0))) {
				_slice$1 = z, _index$1 = x.length + i >> 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = addMulVVW((x$1 = go$subslice(z, i, (i + x.length >> 0)), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length), d)) : go$throwRuntimeError("index out of range");
			}
			_i++;
		}
	};
	karatsubaAdd = function(z, x, n) {
		var c, x$1, x$2, x$3;
		if (c = addVV((x$1 = go$subslice(z, 0, n), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), go$subslice(new (go$sliceType(Word))(z.array), z.offset, z.offset + z.length), go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length)), !((c === 0))) {
			addVW((x$2 = go$subslice(z, n, (n + (n >> 1 >> 0) >> 0)), go$subslice(new (go$sliceType(Word))(x$2.array), x$2.offset, x$2.offset + x$2.length)), (x$3 = go$subslice(z, n), go$subslice(new (go$sliceType(Word))(x$3.array), x$3.offset, x$3.offset + x$3.length)), c);
		}
	};
	karatsubaSub = function(z, x, n) {
		var c, x$1, x$2, x$3;
		if (c = subVV((x$1 = go$subslice(z, 0, n), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), go$subslice(new (go$sliceType(Word))(z.array), z.offset, z.offset + z.length), go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length)), !((c === 0))) {
			subVW((x$2 = go$subslice(z, n, (n + (n >> 1 >> 0) >> 0)), go$subslice(new (go$sliceType(Word))(x$2.array), x$2.offset, x$2.offset + x$2.length)), (x$3 = go$subslice(z, n), go$subslice(new (go$sliceType(Word))(x$3.array), x$3.offset, x$3.offset + x$3.length)), c);
		}
	};
	karatsuba = function(z, x, y) {
		var n, n2, _tuple, x1, x0, _tuple$1, y1, y0, s, x$1, x$2, xd, x$3, x$4, yd, x$5, p, x$6, r, x$7;
		n = y.length;
		if (!(((n & 1) === 0)) || n < karatsubaThreshold || n < 2) {
			basicMul(z, x, y);
			return;
		}
		n2 = n >> 1 >> 0;
		_tuple = [go$subslice(x, n2), go$subslice(x, 0, n2)], x1 = _tuple[0], x0 = _tuple[1];
		_tuple$1 = [go$subslice(y, n2), go$subslice(y, 0, n2)], y1 = _tuple$1[0], y0 = _tuple$1[1];
		karatsuba(z, x0, y0);
		karatsuba(go$subslice(z, n), x1, y1);
		s = 1;
		xd = go$subslice(z, (x$1 = 2, (((x$1 >>> 16 << 16) * n >> 0) + (x$1 << 16 >>> 16) * n) >> 0), ((x$2 = 2, (((x$2 >>> 16 << 16) * n >> 0) + (x$2 << 16 >>> 16) * n) >> 0) + n2 >> 0));
		if (!((subVV(go$subslice(new (go$sliceType(Word))(xd.array), xd.offset, xd.offset + xd.length), go$subslice(new (go$sliceType(Word))(x1.array), x1.offset, x1.offset + x1.length), go$subslice(new (go$sliceType(Word))(x0.array), x0.offset, x0.offset + x0.length)) === 0))) {
			s = -s;
			subVV(go$subslice(new (go$sliceType(Word))(xd.array), xd.offset, xd.offset + xd.length), go$subslice(new (go$sliceType(Word))(x0.array), x0.offset, x0.offset + x0.length), go$subslice(new (go$sliceType(Word))(x1.array), x1.offset, x1.offset + x1.length));
		}
		yd = go$subslice(z, (x$3 = 2, (((x$3 >>> 16 << 16) * n >> 0) + (x$3 << 16 >>> 16) * n) >> 0) + n2 >> 0, (x$4 = 3, (((x$4 >>> 16 << 16) * n >> 0) + (x$4 << 16 >>> 16) * n) >> 0));
		if (!((subVV(go$subslice(new (go$sliceType(Word))(yd.array), yd.offset, yd.offset + yd.length), go$subslice(new (go$sliceType(Word))(y0.array), y0.offset, y0.offset + y0.length), go$subslice(new (go$sliceType(Word))(y1.array), y1.offset, y1.offset + y1.length)) === 0))) {
			s = -s;
			subVV(go$subslice(new (go$sliceType(Word))(yd.array), yd.offset, yd.offset + yd.length), go$subslice(new (go$sliceType(Word))(y1.array), y1.offset, y1.offset + y1.length), go$subslice(new (go$sliceType(Word))(y0.array), y0.offset, y0.offset + y0.length));
		}
		p = go$subslice(z, (x$5 = 3, (((n >>> 16 << 16) * x$5 >> 0) + (n << 16 >>> 16) * x$5) >> 0));
		karatsuba(p, xd, yd);
		r = go$subslice(z, (x$6 = 4, (((n >>> 16 << 16) * x$6 >> 0) + (n << 16 >>> 16) * x$6) >> 0));
		go$copySlice(r, go$subslice(z, 0, (x$7 = 2, (((n >>> 16 << 16) * x$7 >> 0) + (n << 16 >>> 16) * x$7) >> 0)));
		karatsubaAdd(go$subslice(z, n2), r, n);
		karatsubaAdd(go$subslice(z, n2), go$subslice(r, n), n);
		if (s > 0) {
			karatsubaAdd(go$subslice(z, n2), p, n);
		} else {
			karatsubaSub(go$subslice(z, n2), p, n);
		}
	};
	alias = function(x, y) {
		return x.capacity > 0 && y.capacity > 0 && go$sliceIsEqual(go$subslice(x, 0, x.capacity), (x.capacity - 1 >> 0), go$subslice(y, 0, y.capacity), (y.capacity - 1 >> 0));
	};
	addAt = function(z, x, i) {
		var n, c, x$1, x$2, j, x$3, x$4;
		if (n = x.length, n > 0) {
			if (c = addVV((x$1 = go$subslice(z, i, (i + n >> 0)), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), (x$2 = go$subslice(z, i), go$subslice(new (go$sliceType(Word))(x$2.array), x$2.offset, x$2.offset + x$2.length)), go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length)), !((c === 0))) {
				j = i + n >> 0;
				if (j < z.length) {
					addVW((x$3 = go$subslice(z, j), go$subslice(new (go$sliceType(Word))(x$3.array), x$3.offset, x$3.offset + x$3.length)), (x$4 = go$subslice(z, j), go$subslice(new (go$sliceType(Word))(x$4.array), x$4.offset, x$4.offset + x$4.length)), c);
				}
			}
		}
	};
	max = function(x, y) {
		if (x > y) {
			return x;
		}
		return y;
	};
	karatsubaLen = function(n) {
		var i, y;
		i = 0;
		while (n > karatsubaThreshold) {
			n = n >> 1 >> 0;
			i = i + 1 >>> 0;
		}
		return (y = i, y < 32 ? (n << y) : 0) >> 0;
	};
	nat.prototype.mul = function(x, y) {
		var z, m, n, _slice, _index, k, x0, y0, x$1, x$2, t, x0$1, y1, y0$1, i, xi;
		z = this;
		m = x.length;
		n = y.length;
		if (m < n) {
			return z.mul(y, x);
		} else if ((m === 0) || (n === 0)) {
			return z.make(0);
		} else if (n === 1) {
			return z.mulAddWW(x, (_slice = y, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), 0);
		}
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if (n < karatsubaThreshold) {
			z = z.make(m + n >> 0);
			basicMul(z, x, y);
			return z.norm();
		}
		k = karatsubaLen(n);
		x0 = go$subslice(x, 0, k);
		y0 = go$subslice(y, 0, k);
		z = z.make(max((x$1 = 6, (((x$1 >>> 16 << 16) * k >> 0) + (x$1 << 16 >>> 16) * k) >> 0), m + n >> 0));
		karatsuba(z, x0, y0);
		z = go$subslice(z, 0, (m + n >> 0));
		go$subslice(z, (x$2 = 2, (((x$2 >>> 16 << 16) * k >> 0) + (x$2 << 16 >>> 16) * k) >> 0)).clear();
		if (k < n || !((m === n))) {
			t = nat.nil;
			x0$1 = x0.norm();
			y1 = go$subslice(y, k);
			t = t.mul(x0$1, y1);
			addAt(z, t, k);
			y0$1 = y0.norm();
			i = k;
			while (i < x.length) {
				xi = go$subslice(x, i);
				if (xi.length > k) {
					xi = go$subslice(xi, 0, k);
				}
				xi = xi.norm();
				t = t.mul(xi, y0$1);
				addAt(z, t, i);
				t = t.mul(xi, y1);
				addAt(z, t, i + k >> 0);
				i = i + (k) >> 0;
			}
		}
		return z.norm();
	};
	go$ptrType(nat).prototype.mul = function(x, y) { return this.go$get().mul(x, y); };
	nat.prototype.mulRange = function(a, b) {
		var z, x, m;
		z = this;
		if ((a.high === 0 && a.low === 0)) {
			return z.setUint64(new Go$Uint64(0, 0));
		} else if ((a.high > b.high || (a.high === b.high && a.low > b.low))) {
			return z.setUint64(new Go$Uint64(0, 1));
		} else if ((a.high === b.high && a.low === b.low)) {
			return z.setUint64(a);
		} else if ((x = new Go$Uint64(a.high + 0, a.low + 1), (x.high === b.high && x.low === b.low))) {
			return z.mul(nat.nil.setUint64(a), nat.nil.setUint64(b));
		}
		m = go$div64((new Go$Uint64(a.high + b.high, a.low + b.low)), new Go$Uint64(0, 2), false);
		return z.mul(nat.nil.mulRange(a, m), nat.nil.mulRange(new Go$Uint64(m.high + 0, m.low + 1), b));
	};
	go$ptrType(nat).prototype.mulRange = function(a, b) { return this.go$get().mulRange(a, b); };
	nat.prototype.divW = function(x, y) {
		var q, r, z, m;
		q = nat.nil;
		r = 0;
		z = this;
		m = x.length;
		if (y === 0) {
			throw go$panic(new Go$String("division by zero"));
		} else if (y === 1) {
			q = z.set(x);
			return [q, r];
		} else if (m === 0) {
			q = z.make(0);
			return [q, r];
		}
		z = z.make(m);
		r = divWVW(go$subslice(new (go$sliceType(Word))(z.array), z.offset, z.offset + z.length), 0, go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length), y);
		q = z.norm();
		return [q, r];
	};
	go$ptrType(nat).prototype.divW = function(x, y) { return this.go$get().divW(x, y); };
	nat.prototype.div = function(z2, u, v) {
		var q, r, z, r2, _tuple, _slice, _index, _tuple$1;
		q = nat.nil;
		r = nat.nil;
		z = this;
		if (v.length === 0) {
			throw go$panic(new Go$String("division by zero"));
		}
		if (u.cmp(v) < 0) {
			q = z.make(0);
			r = z2.set(u);
			return [q, r];
		}
		if (v.length === 1) {
			r2 = 0;
			_tuple = z.divW(u, (_slice = v, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))), q = _tuple[0], r2 = _tuple[1];
			r = z2.setWord(r2);
			return [q, r];
		}
		_tuple$1 = z.divLarge(z2, u, v), q = _tuple$1[0], r = _tuple$1[1];
		return [q, r];
	};
	go$ptrType(nat).prototype.div = function(z2, u, v) { return this.go$get().div(z2, u, v); };
	nat.prototype.divLarge = function(u, uIn, v) {
		var q, r, z, n, m, qhatv, _slice, _index, shift, v1, x, _slice$1, _index$1, j, qhat, _slice$2, _index$2, _slice$3, _index$3, rhat, _tuple, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _tuple$1, _slice$7, _index$7, x1, x2, _slice$8, _index$8, prevRhat, _slice$9, _index$9, _tuple$2, _slice$10, _index$10, x$1, _slice$11, _index$11, x$2, x$3, c, x$4, x$5, c$1, _lhs, _index$12, _slice$12, _index$13, _slice$13, _index$14, _slice$14, _index$15, _tuple$3;
		q = nat.nil;
		r = nat.nil;
		z = this;
		n = v.length;
		m = uIn.length - n >> 0;
		if (alias(z, uIn) || alias(z, v)) {
			z = nat.nil;
		}
		q = z.make(m + 1 >> 0);
		qhatv = nat.make(n + 1 >> 0, 0, function() { return 0; });
		if (alias(u, uIn) || alias(u, v)) {
			u = nat.nil;
		}
		u = u.make(uIn.length + 1 >> 0);
		u.clear();
		shift = leadingZeros((_slice = v, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
		if (shift > 0) {
			v1 = nat.make(n, 0, function() { return 0; });
			shlVU(go$subslice(new (go$sliceType(Word))(v1.array), v1.offset, v1.offset + v1.length), go$subslice(new (go$sliceType(Word))(v.array), v.offset, v.offset + v.length), shift);
			v = v1;
		}
		_slice$1 = u, _index$1 = uIn.length, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = shlVU((x = go$subslice(u, 0, uIn.length), go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length)), go$subslice(new (go$sliceType(Word))(uIn.array), uIn.offset, uIn.offset + uIn.length), shift)) : go$throwRuntimeError("index out of range");
		j = m;
		while (j >= 0) {
			qhat = 4294967295;
			if (!(((_slice$2 = u, _index$2 = (j + n >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === (_slice$3 = v, _index$3 = (n - 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))))) {
				rhat = 0;
				_tuple = divWW((_slice$4 = u, _index$4 = (j + n >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), (_slice$5 = u, _index$5 = ((j + n >> 0) - 1 >> 0), (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")), (_slice$6 = v, _index$6 = (n - 1 >> 0), (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"))), qhat = _tuple[0], rhat = _tuple[1];
				_tuple$1 = mulWW(qhat, (_slice$7 = v, _index$7 = (n - 2 >> 0), (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"))), x1 = _tuple$1[0], x2 = _tuple$1[1];
				while (greaterThan(x1, x2, rhat, (_slice$8 = u, _index$8 = ((j + n >> 0) - 2 >> 0), (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")))) {
					qhat = qhat - 1 >>> 0;
					prevRhat = rhat;
					rhat = rhat + ((_slice$9 = v, _index$9 = (n - 1 >> 0), (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"))) >>> 0;
					if (rhat < prevRhat) {
						break;
					}
					_tuple$2 = mulWW(qhat, (_slice$10 = v, _index$10 = (n - 2 >> 0), (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"))), x1 = _tuple$2[0], x2 = _tuple$2[1];
				}
			}
			_slice$11 = qhatv, _index$11 = n, (_index$11 >= 0 && _index$11 < _slice$11.length) ? (_slice$11.array[_slice$11.offset + _index$11] = mulAddVWW((x$1 = go$subslice(qhatv, 0, n), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), go$subslice(new (go$sliceType(Word))(v.array), v.offset, v.offset + v.length), qhat, 0)) : go$throwRuntimeError("index out of range");
			c = subVV((x$2 = go$subslice(u, j, (j + qhatv.length >> 0)), go$subslice(new (go$sliceType(Word))(x$2.array), x$2.offset, x$2.offset + x$2.length)), (x$3 = go$subslice(u, j), go$subslice(new (go$sliceType(Word))(x$3.array), x$3.offset, x$3.offset + x$3.length)), go$subslice(new (go$sliceType(Word))(qhatv.array), qhatv.offset, qhatv.offset + qhatv.length));
			if (!((c === 0))) {
				c$1 = addVV((x$4 = go$subslice(u, j, (j + n >> 0)), go$subslice(new (go$sliceType(Word))(x$4.array), x$4.offset, x$4.offset + x$4.length)), (x$5 = go$subslice(u, j), go$subslice(new (go$sliceType(Word))(x$5.array), x$5.offset, x$5.offset + x$5.length)), go$subslice(new (go$sliceType(Word))(v.array), v.offset, v.offset + v.length));
				_lhs = u, _index$12 = j + n >> 0, _slice$13 = _lhs, _index$14 = _index$12, (_index$14 >= 0 && _index$14 < _slice$13.length) ? (_slice$13.array[_slice$13.offset + _index$14] = (_slice$12 = _lhs, _index$13 = _index$12, (_index$13 >= 0 && _index$13 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$13] : go$throwRuntimeError("index out of range")) + (c$1) >>> 0) : go$throwRuntimeError("index out of range");
				qhat = qhat - 1 >>> 0;
			}
			_slice$14 = q, _index$15 = j, (_index$15 >= 0 && _index$15 < _slice$14.length) ? (_slice$14.array[_slice$14.offset + _index$15] = qhat) : go$throwRuntimeError("index out of range");
			j = j - 1 >> 0;
		}
		q = q.norm();
		shrVU(go$subslice(new (go$sliceType(Word))(u.array), u.offset, u.offset + u.length), go$subslice(new (go$sliceType(Word))(u.array), u.offset, u.offset + u.length), shift);
		r = u.norm();
		_tuple$3 = [q, r], q = _tuple$3[0], r = _tuple$3[1];
		return [q, r];
	};
	go$ptrType(nat).prototype.divLarge = function(u, uIn, v) { return this.go$get().divLarge(u, uIn, v); };
	nat.prototype.bitLen = function() {
		var x, i, _slice, _index;
		x = this;
		if (i = x.length - 1 >> 0, i >= 0) {
			return ((((i >>> 16 << 16) * 32 >> 0) + (i << 16 >>> 16) * 32) >> 0) + bitLen((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))) >> 0;
		}
		return 0;
	};
	go$ptrType(nat).prototype.bitLen = function() { return this.go$get().bitLen(); };
	hexValue = function(ch) {
		var d;
		d = 37;
		if (48 <= ch && ch <= 57) {
			d = ((ch - 48 >> 0) >> 0);
		} else if (97 <= ch && ch <= 122) {
			d = (((ch - 97 >> 0) + 10 >> 0) >> 0);
		} else if (65 <= ch && ch <= 90) {
			d = (((ch - 65 >> 0) + 10 >> 0) >> 0);
		}
		return (d >>> 0);
	};
	nat.prototype.scan = function(r, base) {
		var z, _tuple, ch, err, b, _tuple$1, _ref, _ref$1, _tuple$2, bb, dd, _q, max$1, d, x, _tuple$3;
		z = this;
		if (base < 0 || (base === 1) || 36 < base) {
			return [z, 0, errors.New("illegal number base")];
		}
		_tuple = r.ReadRune(), ch = _tuple[0], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			return [z, 0, err];
		}
		b = (base >>> 0);
		if (base === 0) {
			b = 10;
			if (ch === 48) {
				_tuple$1 = r.ReadRune(), ch = _tuple$1[0], err = _tuple$1[2];
				_ref = err;
				if (go$interfaceIsEqual(_ref, null)) {
					b = 8;
					_ref$1 = ch;
					if (_ref$1 === 120 || _ref$1 === 88) {
						b = 16;
					} else if (_ref$1 === 98 || _ref$1 === 66) {
						b = 2;
					}
					if ((b === 2) || (b === 16)) {
						if (_tuple$2 = r.ReadRune(), ch = _tuple$2[0], err = _tuple$2[2], !(go$interfaceIsEqual(err, null))) {
							return [z, 0, err];
						}
					}
				} else if (go$interfaceIsEqual(_ref, io.EOF)) {
					return [z.make(0), 10, null];
				} else {
					return [z, 10, err];
				}
			}
		}
		z = z.make(0);
		bb = 1;
		dd = 0;
		max$1 = (_q = 4294967295 / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
		while (true) {
			d = hexValue(ch);
			if (d >= b) {
				r.UnreadRune();
				break;
			}
			if (bb <= max$1) {
				bb = (x = b, (((bb >>> 16 << 16) * x >>> 0) + (bb << 16 >>> 16) * x) >>> 0);
				dd = ((((dd >>> 16 << 16) * b >>> 0) + (dd << 16 >>> 16) * b) >>> 0) + d >>> 0;
			} else {
				z = z.mulAddWW(z, bb, dd);
				bb = b;
				dd = d;
			}
			if (_tuple$3 = r.ReadRune(), ch = _tuple$3[0], err = _tuple$3[2], !(go$interfaceIsEqual(err, null))) {
				if (!(go$interfaceIsEqual(err, io.EOF))) {
					return [z, (b >> 0), err];
				}
				break;
			}
		}
		if (bb > 1) {
			z = z.mulAddWW(z, bb, dd);
		} else if ((base === 0) && (b === 8)) {
			return [z, 10, null];
		} else if (!((base === 0)) || !((b === 8))) {
			return [z, (b >> 0), errors.New("syntax error scanning number")];
		}
		return [z.norm(), (b >> 0), null];
	};
	go$ptrType(nat).prototype.scan = function(r, base) { return this.go$get().scan(r, base); };
	nat.prototype.decimalString = function() {
		var x;
		x = this;
		return x.string("0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 10));
	};
	go$ptrType(nat).prototype.decimalString = function() { return this.go$get().decimalString(); };
	nat.prototype.string = function(charset$1) {
		var x, b, i, s, shift, y, mask, _slice, _index, w, nbits, k, _slice$1, _index$1, y$1, _slice$2, _index$2, y$2, _slice$3, _index$3, _slice$4, _index$4, y$3, _slice$5, _index$5, _slice$6, _index$6, y$4, bb, ndigits, _q, max$1, x$1, table, q, zero, _slice$7, _index$7;
		x = this;
		b = (charset$1.length >>> 0);
		if (b < 2 || false) {
			throw go$panic(new Go$String("illegal base"));
		} else if (x.length === 0) {
			return go$encodeRune(charset$1.charCodeAt(0));
		}
		i = (x.bitLen() / math.Log2(b) >> 0) + 1 >> 0;
		s = (go$sliceType(Go$Uint8)).make(i, 0, function() { return 0; });
		if (b === ((b & (-b >>> 0)) >>> 0)) {
			shift = trailingZeroBits(b);
			mask = ((y = shift, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0;
			w = (_slice = x, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			nbits = 32;
			k = 1;
			while (k < x.length) {
				while (nbits >= shift) {
					i = i - 1 >> 0;
					_slice$1 = s, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = charset$1.charCodeAt(((w & mask) >>> 0))) : go$throwRuntimeError("index out of range");
					w = (y$1 = (shift), y$1 < 32 ? (w >>> y$1) : 0) >>> 0;
					nbits = nbits - (shift) >>> 0;
				}
				if (nbits === 0) {
					w = (_slice$2 = x, _index$2 = k, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
					nbits = 32;
				} else {
					w = (w | (((y$2 = nbits, y$2 < 32 ? ((_slice$3 = x, _index$3 = k, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) << y$2) : 0) >>> 0))) >>> 0;
					i = i - 1 >> 0;
					_slice$4 = s, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = charset$1.charCodeAt(((w & mask) >>> 0))) : go$throwRuntimeError("index out of range");
					w = (y$3 = ((shift - nbits >>> 0)), y$3 < 32 ? ((_slice$5 = x, _index$5 = k, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")) >>> y$3) : 0) >>> 0;
					nbits = 32 - ((shift - nbits >>> 0)) >>> 0;
				}
				k = k + 1 >> 0;
			}
			while (nbits >= 0 && !((w === 0))) {
				i = i - 1 >> 0;
				_slice$6 = s, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = charset$1.charCodeAt(((w & mask) >>> 0))) : go$throwRuntimeError("index out of range");
				w = (y$4 = (shift), y$4 < 32 ? (w >>> y$4) : 0) >>> 0;
				nbits = nbits - (shift) >>> 0;
			}
		} else {
			bb = b;
			ndigits = 1;
			max$1 = (_q = 4294967295 / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
			while (bb <= max$1) {
				ndigits = ndigits + 1 >> 0;
				bb = (x$1 = b, (((bb >>> 16 << 16) * x$1 >>> 0) + (bb << 16 >>> 16) * x$1) >>> 0);
			}
			table = divisors(x.length, b, ndigits, bb);
			q = nat.nil.set(x);
			q.convertWords(s, charset$1, b, ndigits, bb, table);
			i = 0;
			zero = charset$1.charCodeAt(0);
			while ((_slice$7 = s, _index$7 = i, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")) === zero) {
				i = i + 1 >> 0;
			}
		}
		return go$bytesToString(go$subslice(s, i));
	};
	go$ptrType(nat).prototype.string = function(charset$1) { return this.go$get().string(charset$1); };
	nat.prototype.convertWords = function(s, charset$1, b, ndigits, bb, table) {
		var q, r, index, maxLength, minLength, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _tuple, _slice$3, _index$3, _slice$4, _index$4, h, i, r$1, _tuple$1, j, _q, t, _slice$5, _index$5, _tuple$2, j$1, _r, _slice$6, _index$6, _q$1, zero, _slice$7, _index$7;
		q = this;
		if (!(table === (go$sliceType(divisor)).nil)) {
			r = nat.nil;
			index = table.length - 1 >> 0;
			while (q.length > leafSize) {
				maxLength = q.bitLen();
				minLength = maxLength >> 1 >> 0;
				while (index > 0 && (_slice = table, _index = (index - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).nbits > minLength) {
					index = index - 1 >> 0;
				}
				if ((_slice$1 = table, _index$1 = index, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).nbits >= maxLength && (_slice$2 = table, _index$2 = index, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).bbb.cmp(q) >= 0) {
					index = index - 1 >> 0;
					if (index < 0) {
						throw go$panic(new Go$String("internal inconsistency"));
					}
				}
				_tuple = q.div(r, q, (_slice$3 = table, _index$3 = index, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).bbb), q = _tuple[0], r = _tuple[1];
				h = s.length - (_slice$4 = table, _index$4 = index, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).ndigits >> 0;
				r.convertWords(go$subslice(s, h), charset$1, b, ndigits, bb, go$subslice(table, 0, index));
				s = go$subslice(s, 0, h);
			}
		}
		i = s.length;
		r$1 = 0;
		if (b === 10) {
			while (q.length > 0) {
				_tuple$1 = q.divW(q, bb), q = _tuple$1[0], r$1 = _tuple$1[1];
				j = 0;
				while (j < ndigits && i > 0) {
					i = i - 1 >> 0;
					t = (_q = r$1 / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
					_slice$5 = s, _index$5 = i, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = charset$1.charCodeAt((((r$1 - (t << 3 >>> 0) >>> 0) - t >>> 0) - t >>> 0))) : go$throwRuntimeError("index out of range");
					r$1 = t;
					j = j + 1 >> 0;
				}
			}
		} else {
			while (q.length > 0) {
				_tuple$2 = q.divW(q, bb), q = _tuple$2[0], r$1 = _tuple$2[1];
				j$1 = 0;
				while (j$1 < ndigits && i > 0) {
					i = i - 1 >> 0;
					_slice$6 = s, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = charset$1.charCodeAt((_r = r$1 % b, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")))) : go$throwRuntimeError("index out of range");
					r$1 = (_q$1 = r$1 / (b), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : go$throwRuntimeError("integer divide by zero"));
					j$1 = j$1 + 1 >> 0;
				}
			}
		}
		zero = charset$1.charCodeAt(0);
		while (i > 0) {
			i = i - 1 >> 0;
			_slice$7 = s, _index$7 = i, (_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = zero) : go$throwRuntimeError("index out of range");
		}
	};
	go$ptrType(nat).prototype.convertWords = function(s, charset$1, b, ndigits, bb, table) { return this.go$get().convertWords(s, charset$1, b, ndigits, bb, table); };
	nat.prototype.expWW = function(x, y) {
		var z;
		z = this;
		return z.expNN(nat.nil.setWord(x), nat.nil.setWord(y), nat.nil);
	};
	go$ptrType(nat).prototype.expWW = function(x, y) { return this.go$get().expWW(x, y); };
	divisors = function(m, b, ndigits, bb) {
		var k, words, table, _slice, _index, larger, i, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, x, x$1, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _slice$11, _index$11, _slice$12, _index$12, _slice$13, _index$13, _slice$14, _index$14, _slice$15, _index$15;
		if ((leafSize === 0) || m <= leafSize) {
			return (go$sliceType(divisor)).nil;
		}
		k = 1;
		words = leafSize;
		while (words < (m >> 1 >> 0) && k < 64) {
			k = k + 1 >> 0;
			words = words << 1 >> 0;
		}
		table = (go$sliceType(divisor)).nil;
		if (b === 10) {
			cacheBase10.Mutex.Lock();
			table = go$subslice(new (go$sliceType(divisor))(cacheBase10.table), 0, k);
		} else {
			table = (go$sliceType(divisor)).make(k, 0, function() { return new divisor.Ptr(); });
		}
		if ((_slice = table, _index = (k - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).ndigits === 0) {
			larger = nat.nil;
			i = 0;
			while (i < k) {
				if ((_slice$1 = table, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).ndigits === 0) {
					if (i === 0) {
						(_slice$2 = table, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).bbb = nat.nil.expWW(bb, (leafSize >>> 0));
						(_slice$3 = table, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).ndigits = (((ndigits >>> 16 << 16) * leafSize >> 0) + (ndigits << 16 >>> 16) * leafSize) >> 0;
					} else {
						(_slice$6 = table, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")).bbb = nat.nil.mul((_slice$4 = table, _index$4 = (i - 1 >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).bbb, (_slice$5 = table, _index$5 = (i - 1 >> 0), (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")).bbb);
						(_slice$8 = table, _index$8 = i, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")).ndigits = (x = 2, x$1 = (_slice$7 = table, _index$7 = (i - 1 >> 0), (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")).ndigits, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
					}
					larger = nat.nil.set((_slice$9 = table, _index$9 = i, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")).bbb);
					while (mulAddVWW(go$subslice(new (go$sliceType(Word))(larger.array), larger.offset, larger.offset + larger.length), go$subslice(new (go$sliceType(Word))(larger.array), larger.offset, larger.offset + larger.length), b, 0) === 0) {
						(_slice$11 = table, _index$11 = i, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")).bbb = (_slice$10 = table, _index$10 = i, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")).bbb.set(larger);
						(_slice$13 = table, _index$13 = i, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")).ndigits = (_slice$12 = table, _index$12 = i, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")).ndigits + 1 >> 0;
					}
					(_slice$15 = table, _index$15 = i, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range")).nbits = (_slice$14 = table, _index$14 = i, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range")).bbb.bitLen();
				}
				i = i + 1 >> 0;
			}
		}
		if (b === 10) {
			cacheBase10.Mutex.Unlock();
		}
		return table;
	};
	trailingZeroBits = function(x) {
		var _ref, _slice, _index, x$1, _slice$1, _index$1, x$2, x$3;
		_ref = 32;
		if (_ref === 32) {
			return ((_slice = deBruijn32Lookup, _index = (((x$1 = ((x & (-x >>> 0)) >>> 0), (((x$1 >>> 16 << 16) * 125613361 >>> 0) + (x$1 << 16 >>> 16) * 125613361) >>> 0)) >>> 27 >>> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >>> 0);
		} else if (_ref === 64) {
			return ((_slice$1 = deBruijn64Lookup, _index$1 = (((x$2 = ((x & (-x >>> 0)) >>> 0), x$3 = 3033172745, (((x$2 >>> 16 << 16) * x$3 >>> 0) + (x$2 << 16 >>> 16) * x$3) >>> 0)) >>> 58 >>> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) >>> 0);
		} else {
			throw go$panic(new Go$String("unknown word size"));
		}
	};
	nat.prototype.trailingZeroBits = function() {
		var x, i, _slice, _index, _slice$1, _index$1;
		x = this;
		if (x.length === 0) {
			return 0;
		}
		i = 0;
		while ((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 0) {
			i = i + 1 >>> 0;
		}
		return ((((i >>> 16 << 16) * 32 >>> 0) + (i << 16 >>> 16) * 32) >>> 0) + trailingZeroBits((_slice$1 = x, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) >>> 0;
	};
	go$ptrType(nat).prototype.trailingZeroBits = function() { return this.go$get().trailingZeroBits(); };
	nat.prototype.shl = function(x, s) {
		var z, m, _q, n, x$1, _r, _slice, _index;
		z = this;
		m = x.length;
		if (m === 0) {
			return z.make(0);
		}
		n = m + ((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero")) >> 0) >> 0;
		z = z.make(n + 1 >> 0);
		_slice = z, _index = n, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = shlVU((x$1 = go$subslice(z, n - m >> 0, n), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length), (_r = s % 32, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")))) : go$throwRuntimeError("index out of range");
		go$subslice(z, 0, (n - m >> 0)).clear();
		return z.norm();
	};
	go$ptrType(nat).prototype.shl = function(x, s) { return this.go$get().shl(x, s); };
	nat.prototype.shr = function(x, s) {
		var z, m, _q, n, x$1, _r;
		z = this;
		m = x.length;
		n = m - ((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero")) >> 0) >> 0;
		if (n <= 0) {
			return z.make(0);
		}
		z = z.make(n);
		shrVU(go$subslice(new (go$sliceType(Word))(z.array), z.offset, z.offset + z.length), (x$1 = go$subslice(x, (m - n >> 0)), go$subslice(new (go$sliceType(Word))(x$1.array), x$1.offset, x$1.offset + x$1.length)), (_r = s % 32, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")));
		return z.norm();
	};
	go$ptrType(nat).prototype.shr = function(x, s) { return this.go$get().shr(x, s); };
	nat.prototype.setBit = function(x, i, b) {
		var z, _q, j, y, _r, m, n, _ref, _lhs, _index, _slice, _index$1, _slice$1, _index$2, _lhs$1, _index$3, _slice$2, _index$4, _slice$3, _index$5;
		z = this;
		j = ((_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero")) >> 0);
		m = (y = ((_r = i % 32, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0;
		n = x.length;
		_ref = b;
		if (_ref === 0) {
			z = z.make(n);
			go$copySlice(z, x);
			if (j >= n) {
				return z;
			}
			_lhs = z, _index = j, _slice$1 = _lhs, _index$2 = _index, (_index$2 >= 0 && _index$2 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$2] = (_slice = _lhs, _index$1 = _index, (_index$1 >= 0 && _index$1 < _slice.length) ? _slice.array[_slice.offset + _index$1] : go$throwRuntimeError("index out of range")) & ~(m)) : go$throwRuntimeError("index out of range");
			return z.norm();
		} else if (_ref === 1) {
			if (j >= n) {
				z = z.make(j + 1 >> 0);
				go$subslice(z, n).clear();
			} else {
				z = z.make(n);
			}
			go$copySlice(z, x);
			_lhs$1 = z, _index$3 = j, _slice$3 = _lhs$1, _index$5 = _index$3, (_index$5 >= 0 && _index$5 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$5] = ((_slice$2 = _lhs$1, _index$4 = _index$3, (_index$4 >= 0 && _index$4 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$4] : go$throwRuntimeError("index out of range")) | (m)) >>> 0) : go$throwRuntimeError("index out of range");
			return z;
		}
		throw go$panic(new Go$String("set bit is not 0 or 1"));
	};
	go$ptrType(nat).prototype.setBit = function(x, i, b) { return this.go$get().setBit(x, i, b); };
	nat.prototype.bit = function(i) {
		var z, _q, j, y, _r, _slice, _index;
		z = this;
		j = ((_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero")) >> 0);
		if (j >= z.length) {
			return 0;
		}
		return (((((y = ((_r = i % 32, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"))), y < 32 ? ((_slice = z, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >>> y) : 0) >>> 0) & 1) >>> 0) >>> 0);
	};
	go$ptrType(nat).prototype.bit = function(i) { return this.go$get().bit(i); };
	nat.prototype.and = function(x, y) {
		var z, m, n, i, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		z = this;
		m = x.length;
		n = y.length;
		if (m > n) {
			m = n;
		}
		z = z.make(m);
		i = 0;
		while (i < m) {
			_slice$2 = z, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = ((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) & (_slice$1 = y, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) >>> 0) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		return z.norm();
	};
	go$ptrType(nat).prototype.and = function(x, y) { return this.go$get().and(x, y); };
	nat.prototype.andNot = function(x, y) {
		var z, m, n, i, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		z = this;
		m = x.length;
		n = y.length;
		if (n > m) {
			n = m;
		}
		z = z.make(m);
		i = 0;
		while (i < n) {
			_slice$2 = z, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) & ~(_slice$1 = y, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		go$copySlice(go$subslice(z, n, m), go$subslice(x, n, m));
		return z.norm();
	};
	go$ptrType(nat).prototype.andNot = function(x, y) { return this.go$get().andNot(x, y); };
	nat.prototype.or = function(x, y) {
		var z, m, n, s, _tuple, i, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		z = this;
		m = x.length;
		n = y.length;
		s = x;
		if (m < n) {
			_tuple = [m, n], n = _tuple[0], m = _tuple[1];
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (i < n) {
			_slice$2 = z, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = ((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) | (_slice$1 = y, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) >>> 0) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		go$copySlice(go$subslice(z, n, m), go$subslice(s, n, m));
		return z.norm();
	};
	go$ptrType(nat).prototype.or = function(x, y) { return this.go$get().or(x, y); };
	nat.prototype.xor = function(x, y) {
		var z, m, n, s, _tuple, i, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		z = this;
		m = x.length;
		n = y.length;
		s = x;
		if (m < n) {
			_tuple = [m, n], n = _tuple[0], m = _tuple[1];
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (i < n) {
			_slice$2 = z, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = ((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) ^ (_slice$1 = y, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) >>> 0) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		go$copySlice(go$subslice(z, n, m), go$subslice(s, n, m));
		return z.norm();
	};
	go$ptrType(nat).prototype.xor = function(x, y) { return this.go$get().xor(x, y); };
	greaterThan = function(x1, x2, y1, y2) {
		return x1 > y1 || (x1 === y1) && x2 > y2;
	};
	nat.prototype.modW = function(d) {
		var r, x, q;
		r = 0;
		x = this;
		q = nat.nil;
		q = q.make(x.length);
		r = divWVW(go$subslice(new (go$sliceType(Word))(q.array), q.offset, q.offset + q.length), 0, go$subslice(new (go$sliceType(Word))(x.array), x.offset, x.offset + x.length), d);
		return r;
	};
	go$ptrType(nat).prototype.modW = function(d) { return this.go$get().modW(d); };
	nat.prototype.random = function(rand$1, limit, n) {
		var z, _r, bitLengthOfMSW, y, mask, _ref, _ref$1, _i, i, _slice, _index, _ref$2, _i$1, i$1, _slice$1, _index$1, _lhs, _index$2, _slice$2, _index$3, _slice$3, _index$4;
		z = this;
		if (alias(z, limit)) {
			z = nat.nil;
		}
		z = z.make(limit.length);
		bitLengthOfMSW = ((_r = n % 32, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) >>> 0);
		if (bitLengthOfMSW === 0) {
			bitLengthOfMSW = 32;
		}
		mask = ((((y = bitLengthOfMSW, y < 32 ? (1 << y) : 0) >>> 0)) - 1 >>> 0);
		while (true) {
			_ref = 32;
			if (_ref === 32) {
				_ref$1 = z;
				_i = 0;
				while (_i < _ref$1.length) {
					i = _i;
					_slice = z, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = (rand$1.Uint32() >>> 0)) : go$throwRuntimeError("index out of range");
					_i++;
				}
			} else if (_ref === 64) {
				_ref$2 = z;
				_i$1 = 0;
				while (_i$1 < _ref$2.length) {
					i$1 = _i$1;
					_slice$1 = z, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = ((rand$1.Uint32() >>> 0) | ((rand$1.Uint32() >>> 0) << 32 >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
					_i$1++;
				}
			} else {
				throw go$panic(new Go$String("unknown word size"));
			}
			_lhs = z, _index$2 = limit.length - 1 >> 0, _slice$3 = _lhs, _index$4 = _index$2, (_index$4 >= 0 && _index$4 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$4] = ((_slice$2 = _lhs, _index$3 = _index$2, (_index$3 >= 0 && _index$3 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$3] : go$throwRuntimeError("index out of range")) & (mask)) >>> 0) : go$throwRuntimeError("index out of range");
			if (z.cmp(limit) < 0) {
				break;
			}
		}
		return z.norm();
	};
	go$ptrType(nat).prototype.random = function(rand$1, limit, n) { return this.go$get().random(rand$1, limit, n); };
	nat.prototype.expNN = function(x, y, m) {
		var z, _slice, _index, _slice$1, _index$1, v, shift, y$1, q, w, _tuple, zz, r, j, _tuple$1, _tuple$2, _tuple$3, _tuple$4, i, _slice$2, _index$2, j$1, _tuple$5, _tuple$6, _tuple$7, _tuple$8;
		z = this;
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if (y.length === 0) {
			z = z.make(1);
			_slice = z, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 1) : go$throwRuntimeError("index out of range");
			return z;
		}
		if (!((m.length === 0))) {
			z = z.make(m.length);
		}
		z = z.set(x);
		if (x.length > 1 && y.length > 1 && m.length > 0) {
			return z.expNNWindowed(x, y, m);
		}
		v = (_slice$1 = y, _index$1 = (y.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		shift = leadingZeros(v) + 1 >>> 0;
		v = (y$1 = (shift), y$1 < 32 ? (v << y$1) : 0) >>> 0;
		q = nat.nil;
		w = 32 - (shift >> 0) >> 0;
		_tuple = [nat.nil, nat.nil], zz = _tuple[0], r = _tuple[1];
		j = 0;
		while (j < w) {
			zz = zz.mul(z, z);
			_tuple$1 = [z, zz], zz = _tuple$1[0], z = _tuple$1[1];
			if (!((((v & 2147483648) >>> 0) === 0))) {
				zz = zz.mul(z, x);
				_tuple$2 = [z, zz], zz = _tuple$2[0], z = _tuple$2[1];
			}
			if (!((m.length === 0))) {
				_tuple$3 = zz.div(r, z, m), zz = _tuple$3[0], r = _tuple$3[1];
				_tuple$4 = [q, z, zz, r], zz = _tuple$4[0], r = _tuple$4[1], q = _tuple$4[2], z = _tuple$4[3];
			}
			v = v << 1 >>> 0;
			j = j + 1 >> 0;
		}
		i = y.length - 2 >> 0;
		while (i >= 0) {
			v = (_slice$2 = y, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			j$1 = 0;
			while (j$1 < 32) {
				zz = zz.mul(z, z);
				_tuple$5 = [z, zz], zz = _tuple$5[0], z = _tuple$5[1];
				if (!((((v & 2147483648) >>> 0) === 0))) {
					zz = zz.mul(z, x);
					_tuple$6 = [z, zz], zz = _tuple$6[0], z = _tuple$6[1];
				}
				if (!((m.length === 0))) {
					_tuple$7 = zz.div(r, z, m), zz = _tuple$7[0], r = _tuple$7[1];
					_tuple$8 = [q, z, zz, r], zz = _tuple$8[0], r = _tuple$8[1], q = _tuple$8[2], z = _tuple$8[3];
				}
				v = v << 1 >>> 0;
				j$1 = j$1 + 1 >> 0;
			}
			i = i - 1 >> 0;
		}
		return z.norm();
	};
	go$ptrType(nat).prototype.expNN = function(x, y, m) { return this.go$get().expNN(x, y, m); };
	nat.prototype.expNNWindowed = function(x, y, m) {
		var z, _tuple, zz, r, powers, i, v, _q, _q$1, v$1, v$2, _tuple$1, p2, p, p1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, i$1, _slice, _index, yi, j, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$20;
		z = this;
		_tuple = [nat.nil, nat.nil], zz = _tuple[0], r = _tuple[1];
		powers = go$makeNativeArray("Slice", 16, function() { return nat.nil; });
		powers[0] = natOne;
		powers[1] = x;
		i = 2;
		while (i < 16) {
			_tuple$1 = [new (go$ptrType(nat))(function() { return powers[(_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"))]; }, function(v) { powers[(_q$1 = i / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"))] = v; }), new (go$ptrType(nat))(function() { return powers[i]; }, function(v$1) { powers[i] = v$1; }), new (go$ptrType(nat))(function() { return powers[(i + 1 >> 0)]; }, function(v$2) { powers[i + 1 >> 0] = v$2; })], p2 = _tuple$1[0], p = _tuple$1[1], p1 = _tuple$1[2];
			p.go$set(p.mul(p2.go$get(), p2.go$get()));
			_tuple$2 = zz.div(r, p.go$get(), m), zz = _tuple$2[0], r = _tuple$2[1];
			_tuple$3 = [r, p.go$get()], p.go$set(_tuple$3[0]), r = _tuple$3[1];
			p1.go$set(p1.mul(p.go$get(), x));
			_tuple$4 = zz.div(r, p1.go$get(), m), zz = _tuple$4[0], r = _tuple$4[1];
			_tuple$5 = [r, p1.go$get()], p1.go$set(_tuple$5[0]), r = _tuple$5[1];
			i = i + 2 >> 0;
		}
		z = z.setWord(1);
		i$1 = y.length - 1 >> 0;
		while (i$1 >= 0) {
			yi = (_slice = y, _index = i$1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			j = 0;
			while (j < 32) {
				if (!((i$1 === (y.length - 1 >> 0))) || !((j === 0))) {
					zz = zz.mul(z, z);
					_tuple$6 = [z, zz], zz = _tuple$6[0], z = _tuple$6[1];
					_tuple$7 = zz.div(r, z, m), zz = _tuple$7[0], r = _tuple$7[1];
					_tuple$8 = [r, z], z = _tuple$8[0], r = _tuple$8[1];
					zz = zz.mul(z, z);
					_tuple$9 = [z, zz], zz = _tuple$9[0], z = _tuple$9[1];
					_tuple$10 = zz.div(r, z, m), zz = _tuple$10[0], r = _tuple$10[1];
					_tuple$11 = [r, z], z = _tuple$11[0], r = _tuple$11[1];
					zz = zz.mul(z, z);
					_tuple$12 = [z, zz], zz = _tuple$12[0], z = _tuple$12[1];
					_tuple$13 = zz.div(r, z, m), zz = _tuple$13[0], r = _tuple$13[1];
					_tuple$14 = [r, z], z = _tuple$14[0], r = _tuple$14[1];
					zz = zz.mul(z, z);
					_tuple$15 = [z, zz], zz = _tuple$15[0], z = _tuple$15[1];
					_tuple$16 = zz.div(r, z, m), zz = _tuple$16[0], r = _tuple$16[1];
					_tuple$17 = [r, z], z = _tuple$17[0], r = _tuple$17[1];
				}
				zz = zz.mul(z, powers[(yi >>> 28 >>> 0)]);
				_tuple$18 = [z, zz], zz = _tuple$18[0], z = _tuple$18[1];
				_tuple$19 = zz.div(r, z, m), zz = _tuple$19[0], r = _tuple$19[1];
				_tuple$20 = [r, z], z = _tuple$20[0], r = _tuple$20[1];
				yi = yi << 4 >>> 0;
				j = j + 4 >> 0;
			}
			i$1 = i$1 - 1 >> 0;
		}
		return z.norm();
	};
	go$ptrType(nat).prototype.expNNWindowed = function(x, y, m) { return this.go$get().expNNWindowed(x, y, m); };
	nat.prototype.probablyPrime = function(reps) {
		var n, _slice, _index, _r, _slice$1, _index$1, _slice$2, _index$2, _ref, _slice$3, _index$3, r, _ref$1, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, nm1, k, q, nm3, x, _slice$4, _index$4, rand$1, _tuple, x$1, y, quotient, nm3Len, i, j, _tuple$1;
		n = this;
		if (n.length === 0) {
			return false;
		}
		if (n.length === 1) {
			if ((_slice = n, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < 2) {
				return false;
			}
			if ((_r = (_slice$1 = n, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) % 2, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0) {
				return (_slice$2 = n, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 2;
			}
			_ref = (_slice$3 = n, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			if (_ref === 3 || _ref === 5 || _ref === 7 || _ref === 11 || _ref === 13 || _ref === 17 || _ref === 19 || _ref === 23 || _ref === 29 || _ref === 31 || _ref === 37 || _ref === 41 || _ref === 43 || _ref === 47 || _ref === 53) {
				return true;
			}
		}
		r = 0;
		_ref$1 = 32;
		if (_ref$1 === 32) {
			r = n.modW(3234846615);
		} else if (_ref$1 === 64) {
			r = n.modW(820596253);
		} else {
			throw go$panic(new Go$String("Unknown word size"));
		}
		if (((_r$1 = r % 3, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero")) === 0) || ((_r$2 = r % 5, _r$2 === _r$2 ? _r$2 : go$throwRuntimeError("integer divide by zero")) === 0) || ((_r$3 = r % 7, _r$3 === _r$3 ? _r$3 : go$throwRuntimeError("integer divide by zero")) === 0) || ((_r$4 = r % 11, _r$4 === _r$4 ? _r$4 : go$throwRuntimeError("integer divide by zero")) === 0) || ((_r$5 = r % 13, _r$5 === _r$5 ? _r$5 : go$throwRuntimeError("integer divide by zero")) === 0) || ((_r$6 = r % 17, _r$6 === _r$6 ? _r$6 : go$throwRuntimeError("integer divide by zero")) === 0) || ((_r$7 = r % 19, _r$7 === _r$7 ? _r$7 : go$throwRuntimeError("integer divide by zero")) === 0) || ((_r$8 = r % 23, _r$8 === _r$8 ? _r$8 : go$throwRuntimeError("integer divide by zero")) === 0) || ((_r$9 = r % 29, _r$9 === _r$9 ? _r$9 : go$throwRuntimeError("integer divide by zero")) === 0)) {
			return false;
		}
		nm1 = nat.nil.sub(n, natOne);
		k = nm1.trailingZeroBits();
		q = nat.nil.shr(nm1, k);
		nm3 = nat.nil.sub(nm1, natTwo);
		rand$1 = rand.New(rand.NewSource((x = (_slice$4 = n, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), new Go$Int64(0, x.constructor === Number ? x : 1))));
		_tuple = [nat.nil, nat.nil, nat.nil], x$1 = _tuple[0], y = _tuple[1], quotient = _tuple[2];
		nm3Len = nm3.bitLen();
		i = 0;
		NextRandom:
		while (i < reps) {
			x$1 = x$1.random(rand$1, nm3, nm3Len);
			x$1 = x$1.add(x$1, natTwo);
			y = y.expNN(x$1, q, n);
			if ((y.cmp(natOne) === 0) || (y.cmp(nm1) === 0)) {
				i = i + 1 >> 0;
				continue;
			}
			j = 1;
			while (j < k) {
				y = y.mul(y, y);
				_tuple$1 = quotient.div(y, y, n), quotient = _tuple$1[0], y = _tuple$1[1];
				if (y.cmp(nm1) === 0) {
					i = i + 1 >> 0;
					continue NextRandom;
				}
				if (y.cmp(natOne) === 0) {
					return false;
				}
				j = j + 1 >>> 0;
			}
			return false;
		}
		return true;
	};
	go$ptrType(nat).prototype.probablyPrime = function(reps) { return this.go$get().probablyPrime(reps); };
	nat.prototype.bytes = function(buf) {
		var i, z, _ref, _i, _slice, _index, d, j, _slice$1, _index$1, _slice$2, _index$2;
		i = 0;
		z = this;
		i = buf.length;
		_ref = z;
		_i = 0;
		while (_i < _ref.length) {
			d = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			j = 0;
			while (j < 4) {
				i = i - 1 >> 0;
				_slice$1 = buf, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (d << 24 >>> 24)) : go$throwRuntimeError("index out of range");
				d = d >>> 8 >>> 0;
				j = j + 1 >> 0;
			}
			_i++;
		}
		while (i < buf.length && ((_slice$2 = buf, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 0)) {
			i = i + 1 >> 0;
		}
		return i;
	};
	go$ptrType(nat).prototype.bytes = function(buf) { return this.go$get().bytes(buf); };
	nat.prototype.setBytes = function(buf) {
		var z, _q, k, s, d, i, y, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		z = this;
		z = z.make((_q = (((buf.length + 4 >> 0) - 1 >> 0)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")));
		k = 0;
		s = 0;
		d = 0;
		i = buf.length;
		while (i > 0) {
			d = (d | (((y = s, y < 32 ? (((_slice = buf, _index = (i - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >>> 0) << y) : 0) >>> 0))) >>> 0;
			if (s = s + 8 >>> 0, s === 32) {
				_slice$1 = z, _index$1 = k, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = d) : go$throwRuntimeError("index out of range");
				k = k + 1 >> 0;
				s = 0;
				d = 0;
			}
			i = i - 1 >> 0;
		}
		if (k < z.length) {
			_slice$2 = z, _index$2 = k, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = d) : go$throwRuntimeError("index out of range");
		}
		return z.norm();
	};
	go$ptrType(nat).prototype.setBytes = function(buf) { return this.go$get().setBytes(buf); };
	NewRat = go$pkg.NewRat = function(a, b) {
		return new Rat.Ptr().SetFrac64(a, b);
	};
	Rat.Ptr.prototype.SetFloat64 = function(f) {
		var z, bits, mantissa, x, exp, _ref, shift, x$1;
		z = this;
		bits = math.Float64bits(f);
		mantissa = new Go$Uint64(bits.high & 1048575, (bits.low & 4294967295) >>> 0);
		exp = ((x = go$shiftRightUint64(bits, 52), new Go$Uint64(x.high & 0, (x.low & 2047) >>> 0)).low >> 0);
		_ref = exp;
		if (_ref === 2047) {
			return (go$ptrType(Rat)).nil;
		} else if (_ref === 0) {
			exp = exp - 1022 >> 0;
		} else {
			mantissa = new Go$Uint64(mantissa.high | 1048576, (mantissa.low | 0) >>> 0);
			exp = exp - 1023 >> 0;
		}
		shift = 52 - exp >> 0;
		while ((x$1 = new Go$Uint64(mantissa.high & 0, (mantissa.low & 1) >>> 0), (x$1.high === 0 && x$1.low === 0)) && shift > 0) {
			mantissa = go$shiftRightUint64(mantissa, 1);
			shift = shift - 1 >> 0;
		}
		z.a.SetUint64(mantissa);
		z.a.neg = f < 0;
		z.b.Set(intOne);
		if (shift > 0) {
			z.b.Lsh(z.b, (shift >>> 0));
		} else {
			z.a.Lsh(z.a, (-shift >>> 0));
		}
		return z.norm();
	};
	Rat.prototype.SetFloat64 = function(f) { return this.go$val.SetFloat64(f); };
	low64 = function(z) {
		var x, x$1, _slice, _index, x$2, x$3, _slice$1, _index$1, x$4, _slice$2, _index$2;
		if (z.length === 0) {
			return new Go$Uint64(0, 0);
		}
		if (true && z.length > 1) {
			return (x = go$shiftLeft64((x$1 = (_slice = z, _index = 1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new Go$Uint64(0, x$1.constructor === Number ? x$1 : 1)), 32), x$2 = (x$3 = (_slice$1 = z, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new Go$Uint64(0, x$3.constructor === Number ? x$3 : 1)), new Go$Uint64(x.high | x$2.high, (x.low | x$2.low) >>> 0));
		}
		return (x$4 = (_slice$2 = z, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), new Go$Uint64(0, x$4.constructor === Number ? x$4 : 1));
	};
	quotToFloat = function(a, b) {
		var f, exact, alen, _tuple, blen, exp, _tuple$1, a2, b2, shift, q, _tuple$2, r, mantissa, haveRem, x, x$1, x$2, shift$1, x$3, x$4, lostbits, x$5, x$6;
		f = 0;
		exact = false;
		alen = a.bitLen();
		if (alen === 0) {
			_tuple = [0, true], f = _tuple[0], exact = _tuple[1];
			return [f, exact];
		}
		blen = b.bitLen();
		if (blen === 0) {
			throw go$panic(new Go$String("division by zero"));
		}
		exp = alen - blen >> 0;
		_tuple$1 = [nat.nil, nat.nil], a2 = _tuple$1[0], b2 = _tuple$1[1];
		a2 = a2.set(a);
		b2 = b2.set(b);
		if (shift = 54 - exp >> 0, shift > 0) {
			a2 = a2.shl(a2, (shift >>> 0));
		} else if (shift < 0) {
			b2 = b2.shl(b2, (-shift >>> 0));
		}
		q = nat.nil;
		_tuple$2 = q.div(a2, a2, b2), q = _tuple$2[0], r = _tuple$2[1];
		mantissa = low64(q);
		haveRem = r.length > 0;
		if ((x = go$shiftRightUint64(mantissa, 54), (x.high === 0 && x.low === 1))) {
			if ((x$1 = new Go$Uint64(mantissa.high & 0, (mantissa.low & 1) >>> 0), (x$1.high === 0 && x$1.low === 1))) {
				haveRem = true;
			}
			mantissa = go$shiftRightUint64(mantissa, 1);
			exp = exp + 1 >> 0;
		}
		if (!((x$2 = go$shiftRightUint64(mantissa, 53), (x$2.high === 0 && x$2.low === 1)))) {
			throw go$panic(new Go$String("expected exactly 54 bits of result"));
		}
		if (-1074 <= exp && exp <= -1022) {
			shift$1 = new Go$Uint64(0, (-1022 - ((exp - 1 >> 0)) >> 0));
			lostbits = (x$3 = (x$4 = go$shiftLeft64(new Go$Uint64(0, 1), go$flatten64(shift$1)), new Go$Uint64(x$4.high - 0, x$4.low - 1)), new Go$Uint64(mantissa.high & x$3.high, (mantissa.low & x$3.low) >>> 0));
			haveRem = haveRem || !((lostbits.high === 0 && lostbits.low === 0));
			mantissa = go$shiftRightUint64(mantissa, go$flatten64((shift$1)));
			exp = -1021;
		}
		exact = !haveRem;
		if (!((x$5 = new Go$Uint64(mantissa.high & 0, (mantissa.low & 1) >>> 0), (x$5.high === 0 && x$5.low === 0)))) {
			exact = false;
			if (haveRem || !((x$6 = new Go$Uint64(mantissa.high & 0, (mantissa.low & 2) >>> 0), (x$6.high === 0 && x$6.low === 0)))) {
				if (mantissa = new Go$Uint64(mantissa.high + 0, mantissa.low + 1), (mantissa.high > 4194304 || (mantissa.high === 4194304 && mantissa.low >= 0))) {
					mantissa = go$shiftRightUint64(mantissa, 1);
					exp = exp + 1 >> 0;
				}
			}
		}
		mantissa = go$shiftRightUint64(mantissa, 1);
		f = math.Ldexp(go$flatten64(mantissa), exp - 53 >> 0);
		if (math.IsInf(f, 0)) {
			exact = false;
		}
		return [f, exact];
	};
	Rat.Ptr.prototype.Float64 = function() {
		var f, exact, x, b, _tuple;
		f = 0;
		exact = false;
		x = this;
		b = x.b.abs;
		if (b.length === 0) {
			b = b.set(natOne);
		}
		_tuple = quotToFloat(x.a.abs, b), f = _tuple[0], exact = _tuple[1];
		if (x.a.neg) {
			f = -f;
		}
		return [f, exact];
	};
	Rat.prototype.Float64 = function() { return this.go$val.Float64(); };
	Rat.Ptr.prototype.SetFrac = function(a, b) {
		var z, babs;
		z = this;
		z.a.neg = !(a.neg === b.neg);
		babs = b.abs;
		if (babs.length === 0) {
			throw go$panic(new Go$String("division by zero"));
		}
		if (z.a === b || alias(z.a.abs, babs)) {
			babs = nat.nil.set(babs);
		}
		z.a.abs = z.a.abs.set(a.abs);
		z.b.abs = z.b.abs.set(babs);
		return z.norm();
	};
	Rat.prototype.SetFrac = function(a, b) { return this.go$val.SetFrac(a, b); };
	Rat.Ptr.prototype.SetFrac64 = function(a, b) {
		var z;
		z = this;
		z.a.SetInt64(a);
		if ((b.high === 0 && b.low === 0)) {
			throw go$panic(new Go$String("division by zero"));
		}
		if ((b.high < 0 || (b.high === 0 && b.low < 0))) {
			b = new Go$Int64(-b.high, -b.low);
			z.a.neg = !z.a.neg;
		}
		z.b.abs = z.b.abs.setUint64(new Go$Uint64(b.high, b.low));
		return z.norm();
	};
	Rat.prototype.SetFrac64 = function(a, b) { return this.go$val.SetFrac64(a, b); };
	Rat.Ptr.prototype.SetInt = function(x) {
		var z;
		z = this;
		z.a.Set(x);
		z.b.abs = z.b.abs.make(0);
		return z;
	};
	Rat.prototype.SetInt = function(x) { return this.go$val.SetInt(x); };
	Rat.Ptr.prototype.SetInt64 = function(x) {
		var z;
		z = this;
		z.a.SetInt64(x);
		z.b.abs = z.b.abs.make(0);
		return z;
	};
	Rat.prototype.SetInt64 = function(x) { return this.go$val.SetInt64(x); };
	Rat.Ptr.prototype.Set = function(x) {
		var z;
		z = this;
		if (!(z === x)) {
			z.a.Set(x.a);
			z.b.Set(x.b);
		}
		return z;
	};
	Rat.prototype.Set = function(x) { return this.go$val.Set(x); };
	Rat.Ptr.prototype.Abs = function(x) {
		var z;
		z = this;
		z.Set(x);
		z.a.neg = false;
		return z;
	};
	Rat.prototype.Abs = function(x) { return this.go$val.Abs(x); };
	Rat.Ptr.prototype.Neg = function(x) {
		var z;
		z = this;
		z.Set(x);
		z.a.neg = z.a.abs.length > 0 && !z.a.neg;
		return z;
	};
	Rat.prototype.Neg = function(x) { return this.go$val.Neg(x); };
	Rat.Ptr.prototype.Inv = function(x) {
		var z, a, b, _tuple;
		z = this;
		if (x.a.abs.length === 0) {
			throw go$panic(new Go$String("division by zero"));
		}
		z.Set(x);
		a = z.b.abs;
		if (a.length === 0) {
			a = a.set(natOne);
		}
		b = z.a.abs;
		if (b.cmp(natOne) === 0) {
			b = b.make(0);
		}
		_tuple = [a, b], z.a.abs = _tuple[0], z.b.abs = _tuple[1];
		return z;
	};
	Rat.prototype.Inv = function(x) { return this.go$val.Inv(x); };
	Rat.Ptr.prototype.Sign = function() {
		var x;
		x = this;
		return x.a.Sign();
	};
	Rat.prototype.Sign = function() { return this.go$val.Sign(); };
	Rat.Ptr.prototype.IsInt = function() {
		var x;
		x = this;
		return (x.b.abs.length === 0) || (x.b.abs.cmp(natOne) === 0);
	};
	Rat.prototype.IsInt = function() { return this.go$val.IsInt(); };
	Rat.Ptr.prototype.Num = function() {
		var x;
		x = this;
		return x.a;
	};
	Rat.prototype.Num = function() { return this.go$val.Num(); };
	Rat.Ptr.prototype.Denom = function() {
		var x;
		x = this;
		x.b.neg = false;
		if (x.b.abs.length === 0) {
			x.b.abs = x.b.abs.set(natOne);
		}
		return x.b;
	};
	Rat.prototype.Denom = function() { return this.go$val.Denom(); };
	Rat.Ptr.prototype.norm = function() {
		var z, neg, f, _tuple, _tuple$1;
		z = this;
		if (z.a.abs.length === 0) {
			z.a.neg = false;
			z.b.abs = z.b.abs.make(0);
		} else if (z.b.abs.length === 0) {
		} else if (z.b.abs.cmp(natOne) === 0) {
			z.b.abs = z.b.abs.make(0);
		} else {
			neg = z.a.neg;
			z.a.neg = false;
			z.b.neg = false;
			if (f = NewInt(new Go$Int64(0, 0)).binaryGCD(z.a, z.b), !((f.Cmp(intOne) === 0))) {
				_tuple = z.a.abs.div(nat.nil, z.a.abs, f.abs), z.a.abs = _tuple[0];
				_tuple$1 = z.b.abs.div(nat.nil, z.b.abs, f.abs), z.b.abs = _tuple$1[0];
				if (z.b.abs.cmp(natOne) === 0) {
					z.b.abs = z.b.abs.make(0);
				}
			}
			z.a.neg = neg;
		}
		return z;
	};
	Rat.prototype.norm = function() { return this.go$val.norm(); };
	mulDenom = function(z, x, y) {
		if (x.length === 0) {
			return z.set(y);
		} else if (y.length === 0) {
			return z.set(x);
		}
		return z.mul(x, y);
	};
	scaleDenom = function(x, f) {
		var z;
		z = new Int.Ptr();
		if (f.length === 0) {
			return z.Set(x);
		}
		z.abs = z.abs.mul(x.abs, f);
		z.neg = x.neg;
		return z;
	};
	Rat.Ptr.prototype.Cmp = function(y) {
		var x;
		x = this;
		return scaleDenom(x.a, y.b.abs).Cmp(scaleDenom(y.a, x.b.abs));
	};
	Rat.prototype.Cmp = function(y) { return this.go$val.Cmp(y); };
	Rat.Ptr.prototype.Add = function(x, y) {
		var z, a1, a2;
		z = this;
		a1 = scaleDenom(x.a, y.b.abs);
		a2 = scaleDenom(y.a, x.b.abs);
		z.a.Add(a1, a2);
		z.b.abs = mulDenom(z.b.abs, x.b.abs, y.b.abs);
		return z.norm();
	};
	Rat.prototype.Add = function(x, y) { return this.go$val.Add(x, y); };
	Rat.Ptr.prototype.Sub = function(x, y) {
		var z, a1, a2;
		z = this;
		a1 = scaleDenom(x.a, y.b.abs);
		a2 = scaleDenom(y.a, x.b.abs);
		z.a.Sub(a1, a2);
		z.b.abs = mulDenom(z.b.abs, x.b.abs, y.b.abs);
		return z.norm();
	};
	Rat.prototype.Sub = function(x, y) { return this.go$val.Sub(x, y); };
	Rat.Ptr.prototype.Mul = function(x, y) {
		var z;
		z = this;
		z.a.Mul(x.a, y.a);
		z.b.abs = mulDenom(z.b.abs, x.b.abs, y.b.abs);
		return z.norm();
	};
	Rat.prototype.Mul = function(x, y) { return this.go$val.Mul(x, y); };
	Rat.Ptr.prototype.Quo = function(x, y) {
		var z, a, b;
		z = this;
		if (y.a.abs.length === 0) {
			throw go$panic(new Go$String("division by zero"));
		}
		a = scaleDenom(x.a, y.b.abs);
		b = scaleDenom(y.a, x.b.abs);
		z.a.abs = a.abs;
		z.b.abs = b.abs;
		z.a.neg = !(a.neg === b.neg);
		return z.norm();
	};
	Rat.prototype.Quo = function(x, y) { return this.go$val.Quo(x, y); };
	ratTok = function(ch) {
		return strings.IndexRune("+-/0123456789.eE", ch) >= 0;
	};
	Rat.Ptr.prototype.Scan = function(s, ch) {
		var z, _tuple, tok, err, ok, _tuple$1;
		z = this;
		_tuple = s.Token(true, ratTok), tok = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		if (strings.IndexRune("efgEFGv", ch) < 0) {
			return errors.New("Rat.Scan: invalid verb");
		}
		if (_tuple$1 = z.SetString(go$bytesToString(tok)), ok = _tuple$1[1], !ok) {
			return errors.New("Rat.Scan: invalid syntax");
		}
		return null;
	};
	Rat.prototype.Scan = function(s, ch) { return this.go$val.Scan(s, ch); };
	Rat.Ptr.prototype.SetString = function(s) {
		var z, sep, ok, _tuple, err, _tuple$1, e, exp, ok$1, _tuple$2, ok$2, _tuple$3, powTen;
		z = this;
		if (s.length === 0) {
			return [(go$ptrType(Rat)).nil, false];
		}
		sep = strings.Index(s, "/");
		if (sep >= 0) {
			if (_tuple = z.a.SetString(s.substring(0, sep), 10), ok = _tuple[1], !ok) {
				return [(go$ptrType(Rat)).nil, false];
			}
			s = s.substring((sep + 1 >> 0));
			err = null;
			if (_tuple$1 = z.b.abs.scan(strings.NewReader(s), 10), z.b.abs = _tuple$1[0], err = _tuple$1[2], !(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(Rat)).nil, false];
			}
			return [z.norm(), true];
		}
		sep = strings.Index(s, ".");
		e = strings.IndexAny(s, "eE");
		exp = new Int.Ptr();
		if (e >= 0) {
			if (e < sep) {
				return [(go$ptrType(Rat)).nil, false];
			}
			if (_tuple$2 = exp.SetString(s.substring((e + 1 >> 0)), 10), ok$1 = _tuple$2[1], !ok$1) {
				return [(go$ptrType(Rat)).nil, false];
			}
			s = s.substring(0, e);
		}
		if (sep >= 0) {
			s = s.substring(0, sep) + s.substring((sep + 1 >> 0));
			exp.Sub(exp, NewInt(new Go$Int64(0, (s.length - sep >> 0))));
		}
		if (_tuple$3 = z.a.SetString(s, 10), ok$2 = _tuple$3[1], !ok$2) {
			return [(go$ptrType(Rat)).nil, false];
		}
		powTen = nat.nil.expNN(natTen, exp.abs, nat.nil);
		if (exp.neg) {
			z.b.abs = powTen;
			z.norm();
		} else {
			z.a.abs = z.a.abs.mul(z.a.abs, powTen);
			z.b.abs = z.b.abs.make(0);
		}
		return [z, true];
	};
	Rat.prototype.SetString = function(s) { return this.go$val.SetString(s); };
	Rat.Ptr.prototype.String = function() {
		var x, s;
		x = this;
		s = "/1";
		if (!((x.b.abs.length === 0))) {
			s = "/" + x.b.abs.decimalString();
		}
		return x.a.String() + s;
	};
	Rat.prototype.String = function() { return this.go$val.String(); };
	Rat.Ptr.prototype.RatString = function() {
		var x;
		x = this;
		if (x.IsInt()) {
			return x.a.String();
		}
		return x.String();
	};
	Rat.prototype.RatString = function() { return this.go$val.RatString(); };
	Rat.Ptr.prototype.FloatString = function(prec) {
		var x, s, _tuple, q, r, p, _tuple$1, r2, s$1, rs, leadingZeros$1;
		x = this;
		if (x.IsInt()) {
			s = x.a.String();
			if (prec > 0) {
				s = s + ("." + strings.Repeat("0", prec));
			}
			return s;
		}
		_tuple = nat.nil.div(nat.nil, x.a.abs, x.b.abs), q = _tuple[0], r = _tuple[1];
		p = natOne;
		if (prec > 0) {
			p = nat.nil.expNN(natTen, nat.nil.setUint64(new Go$Uint64(0, prec)), nat.nil);
		}
		r = r.mul(r, p);
		_tuple$1 = r.div(nat.nil, r, x.b.abs), r = _tuple$1[0], r2 = _tuple$1[1];
		r2 = r2.add(r2, r2);
		if (x.b.abs.cmp(r2) <= 0) {
			r = r.add(r, natOne);
			if (r.cmp(p) >= 0) {
				q = nat.nil.add(q, natOne);
				r = nat.nil.sub(r, p);
			}
		}
		s$1 = q.decimalString();
		if (x.a.neg) {
			s$1 = "-" + s$1;
		}
		if (prec > 0) {
			rs = r.decimalString();
			leadingZeros$1 = prec - rs.length >> 0;
			s$1 = s$1 + ("." + strings.Repeat("0", leadingZeros$1) + rs);
		}
		return s$1;
	};
	Rat.prototype.FloatString = function(prec) { return this.go$val.FloatString(prec); };
	Rat.Ptr.prototype.GobEncode = function() {
		var x, x$1, buf, i, j, n, b, _slice, _index;
		x = this;
		if (x === (go$ptrType(Rat)).nil) {
			return [(go$sliceType(Go$Uint8)).nil, null];
		}
		buf = (go$sliceType(Go$Uint8)).make(5 + (x$1 = (x.a.abs.length + x.b.abs.length >> 0), (((x$1 >>> 16 << 16) * 4 >> 0) + (x$1 << 16 >>> 16) * 4) >> 0) >> 0, 0, function() { return 0; });
		i = x.b.abs.bytes(buf);
		j = x.a.abs.bytes(go$subslice(buf, 0, i));
		n = i - j >> 0;
		if (!((((n >>> 0) >> 0) === n))) {
			return [(go$sliceType(Go$Uint8)).nil, errors.New("Rat.GobEncode: numerator too large")];
		}
		binary.BigEndian.PutUint32(go$subslice(buf, j - 4 >> 0, j), (n >>> 0));
		j = j - 5 >> 0;
		b = 2;
		if (x.a.neg) {
			b = (b | 1) >>> 0;
		}
		_slice = buf, _index = j, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = b) : go$throwRuntimeError("index out of range");
		return [go$subslice(buf, j), null];
	};
	Rat.prototype.GobEncode = function() { return this.go$val.GobEncode(); };
	Rat.Ptr.prototype.GobDecode = function(buf) {
		var z, l, r, _slice, _index, b, i;
		z = this;
		if (buf.length === 0) {
			l = z, r = new Rat.Ptr(new Int.Ptr(), new Int.Ptr()), l.a = r.a, l.b = r.b;
			return null;
		}
		b = (_slice = buf, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (!(((b >>> 1 << 24 >>> 24) === 1))) {
			return errors.New(fmt.Sprintf("Rat.GobDecode: encoding version %d not supported", new (go$sliceType(go$emptyInterface))([new Go$Uint8((b >>> 1 << 24 >>> 24))])));
		}
		i = 5 + binary.BigEndian.Uint32(go$subslice(buf, 1, 5)) >>> 0;
		z.a.neg = !((((b & 1) >>> 0) === 0));
		z.a.abs = z.a.abs.setBytes(go$subslice(buf, 5, i));
		z.b.abs = z.b.abs.setBytes(go$subslice(buf, i));
		return null;
	};
	Rat.prototype.GobDecode = function(buf) { return this.go$val.GobDecode(buf); };
	go$pkg.init = function() {
		Int.init([["neg", "math/big", Go$Bool, ""], ["abs", "math/big", nat, ""]]);
		(go$ptrType(Int)).methods = [["Abs", "", [(go$ptrType(Int))], [(go$ptrType(Int))], false], ["Add", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["And", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["AndNot", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["Binomial", "", [Go$Int64, Go$Int64], [(go$ptrType(Int))], false], ["Bit", "", [Go$Int], [Go$Uint], false], ["BitLen", "", [], [Go$Int], false], ["Bits", "", [], [(go$sliceType(Word))], false], ["Bytes", "", [], [(go$sliceType(Go$Uint8))], false], ["Cmp", "", [(go$ptrType(Int))], [Go$Int], false], ["Div", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["DivMod", "", [(go$ptrType(Int)), (go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int)), (go$ptrType(Int))], false], ["Exp", "", [(go$ptrType(Int)), (go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["Format", "", [fmt.State, Go$Int32], [], false], ["GCD", "", [(go$ptrType(Int)), (go$ptrType(Int)), (go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["GobDecode", "", [(go$sliceType(Go$Uint8))], [go$error], false], ["GobEncode", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["Int64", "", [], [Go$Int64], false], ["Lsh", "", [(go$ptrType(Int)), Go$Uint], [(go$ptrType(Int))], false], ["MarshalJSON", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["Mod", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["ModInverse", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["Mul", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["MulRange", "", [Go$Int64, Go$Int64], [(go$ptrType(Int))], false], ["Neg", "", [(go$ptrType(Int))], [(go$ptrType(Int))], false], ["Not", "", [(go$ptrType(Int))], [(go$ptrType(Int))], false], ["Or", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["ProbablyPrime", "", [Go$Int], [Go$Bool], false], ["Quo", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["QuoRem", "", [(go$ptrType(Int)), (go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int)), (go$ptrType(Int))], false], ["Rand", "", [(go$ptrType(rand.Rand)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["Rem", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["Rsh", "", [(go$ptrType(Int)), Go$Uint], [(go$ptrType(Int))], false], ["Scan", "", [fmt.ScanState, Go$Int32], [go$error], false], ["Set", "", [(go$ptrType(Int))], [(go$ptrType(Int))], false], ["SetBit", "", [(go$ptrType(Int)), Go$Int, Go$Uint], [(go$ptrType(Int))], false], ["SetBits", "", [(go$sliceType(Word))], [(go$ptrType(Int))], false], ["SetBytes", "", [(go$sliceType(Go$Uint8))], [(go$ptrType(Int))], false], ["SetInt64", "", [Go$Int64], [(go$ptrType(Int))], false], ["SetString", "", [Go$String, Go$Int], [(go$ptrType(Int)), Go$Bool], false], ["SetUint64", "", [Go$Uint64], [(go$ptrType(Int))], false], ["Sign", "", [], [Go$Int], false], ["String", "", [], [Go$String], false], ["Sub", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["Uint64", "", [], [Go$Uint64], false], ["UnmarshalJSON", "", [(go$sliceType(Go$Uint8))], [go$error], false], ["Xor", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["binaryGCD", "math/big", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Int))], false], ["scan", "math/big", [io.RuneScanner, Go$Int], [(go$ptrType(Int)), Go$Int, go$error], false]];
		nat.init(Word);
		nat.methods = [["add", "math/big", [nat, nat], [nat], false], ["and", "math/big", [nat, nat], [nat], false], ["andNot", "math/big", [nat, nat], [nat], false], ["bit", "math/big", [Go$Uint], [Go$Uint], false], ["bitLen", "math/big", [], [Go$Int], false], ["bytes", "math/big", [(go$sliceType(Go$Uint8))], [Go$Int], false], ["clear", "math/big", [], [], false], ["cmp", "math/big", [nat], [Go$Int], false], ["convertWords", "math/big", [(go$sliceType(Go$Uint8)), Go$String, Word, Go$Int, Word, (go$sliceType(divisor))], [], false], ["decimalString", "math/big", [], [Go$String], false], ["div", "math/big", [nat, nat, nat], [nat, nat], false], ["divLarge", "math/big", [nat, nat, nat], [nat, nat], false], ["divW", "math/big", [nat, Word], [nat, Word], false], ["expNN", "math/big", [nat, nat, nat], [nat], false], ["expNNWindowed", "math/big", [nat, nat, nat], [nat], false], ["expWW", "math/big", [Word, Word], [nat], false], ["make", "math/big", [Go$Int], [nat], false], ["modW", "math/big", [Word], [Word], false], ["mul", "math/big", [nat, nat], [nat], false], ["mulAddWW", "math/big", [nat, Word, Word], [nat], false], ["mulRange", "math/big", [Go$Uint64, Go$Uint64], [nat], false], ["norm", "math/big", [], [nat], false], ["or", "math/big", [nat, nat], [nat], false], ["probablyPrime", "math/big", [Go$Int], [Go$Bool], false], ["random", "math/big", [(go$ptrType(rand.Rand)), nat, Go$Int], [nat], false], ["scan", "math/big", [io.RuneScanner, Go$Int], [nat, Go$Int, go$error], false], ["set", "math/big", [nat], [nat], false], ["setBit", "math/big", [nat, Go$Uint, Go$Uint], [nat], false], ["setBytes", "math/big", [(go$sliceType(Go$Uint8))], [nat], false], ["setUint64", "math/big", [Go$Uint64], [nat], false], ["setWord", "math/big", [Word], [nat], false], ["shl", "math/big", [nat, Go$Uint], [nat], false], ["shr", "math/big", [nat, Go$Uint], [nat], false], ["string", "math/big", [Go$String], [Go$String], false], ["sub", "math/big", [nat, nat], [nat], false], ["trailingZeroBits", "math/big", [], [Go$Uint], false], ["xor", "math/big", [nat, nat], [nat], false]];
		(go$ptrType(nat)).methods = [["add", "math/big", [nat, nat], [nat], false], ["and", "math/big", [nat, nat], [nat], false], ["andNot", "math/big", [nat, nat], [nat], false], ["bit", "math/big", [Go$Uint], [Go$Uint], false], ["bitLen", "math/big", [], [Go$Int], false], ["bytes", "math/big", [(go$sliceType(Go$Uint8))], [Go$Int], false], ["clear", "math/big", [], [], false], ["cmp", "math/big", [nat], [Go$Int], false], ["convertWords", "math/big", [(go$sliceType(Go$Uint8)), Go$String, Word, Go$Int, Word, (go$sliceType(divisor))], [], false], ["decimalString", "math/big", [], [Go$String], false], ["div", "math/big", [nat, nat, nat], [nat, nat], false], ["divLarge", "math/big", [nat, nat, nat], [nat, nat], false], ["divW", "math/big", [nat, Word], [nat, Word], false], ["expNN", "math/big", [nat, nat, nat], [nat], false], ["expNNWindowed", "math/big", [nat, nat, nat], [nat], false], ["expWW", "math/big", [Word, Word], [nat], false], ["make", "math/big", [Go$Int], [nat], false], ["modW", "math/big", [Word], [Word], false], ["mul", "math/big", [nat, nat], [nat], false], ["mulAddWW", "math/big", [nat, Word, Word], [nat], false], ["mulRange", "math/big", [Go$Uint64, Go$Uint64], [nat], false], ["norm", "math/big", [], [nat], false], ["or", "math/big", [nat, nat], [nat], false], ["probablyPrime", "math/big", [Go$Int], [Go$Bool], false], ["random", "math/big", [(go$ptrType(rand.Rand)), nat, Go$Int], [nat], false], ["scan", "math/big", [io.RuneScanner, Go$Int], [nat, Go$Int, go$error], false], ["set", "math/big", [nat], [nat], false], ["setBit", "math/big", [nat, Go$Uint, Go$Uint], [nat], false], ["setBytes", "math/big", [(go$sliceType(Go$Uint8))], [nat], false], ["setUint64", "math/big", [Go$Uint64], [nat], false], ["setWord", "math/big", [Word], [nat], false], ["shl", "math/big", [nat, Go$Uint], [nat], false], ["shr", "math/big", [nat, Go$Uint], [nat], false], ["string", "math/big", [Go$String], [Go$String], false], ["sub", "math/big", [nat, nat], [nat], false], ["trailingZeroBits", "math/big", [], [Go$Uint], false], ["xor", "math/big", [nat, nat], [nat], false]];
		divisor.init([["bbb", "math/big", nat, ""], ["nbits", "math/big", Go$Int, ""], ["ndigits", "math/big", Go$Int, ""]]);
		Rat.init([["a", "math/big", Int, ""], ["b", "math/big", Int, ""]]);
		(go$ptrType(Rat)).methods = [["Abs", "", [(go$ptrType(Rat))], [(go$ptrType(Rat))], false], ["Add", "", [(go$ptrType(Rat)), (go$ptrType(Rat))], [(go$ptrType(Rat))], false], ["Cmp", "", [(go$ptrType(Rat))], [Go$Int], false], ["Denom", "", [], [(go$ptrType(Int))], false], ["Float64", "", [], [Go$Float64, Go$Bool], false], ["FloatString", "", [Go$Int], [Go$String], false], ["GobDecode", "", [(go$sliceType(Go$Uint8))], [go$error], false], ["GobEncode", "", [], [(go$sliceType(Go$Uint8)), go$error], false], ["Inv", "", [(go$ptrType(Rat))], [(go$ptrType(Rat))], false], ["IsInt", "", [], [Go$Bool], false], ["Mul", "", [(go$ptrType(Rat)), (go$ptrType(Rat))], [(go$ptrType(Rat))], false], ["Neg", "", [(go$ptrType(Rat))], [(go$ptrType(Rat))], false], ["Num", "", [], [(go$ptrType(Int))], false], ["Quo", "", [(go$ptrType(Rat)), (go$ptrType(Rat))], [(go$ptrType(Rat))], false], ["RatString", "", [], [Go$String], false], ["Scan", "", [fmt.ScanState, Go$Int32], [go$error], false], ["Set", "", [(go$ptrType(Rat))], [(go$ptrType(Rat))], false], ["SetFloat64", "", [Go$Float64], [(go$ptrType(Rat))], false], ["SetFrac", "", [(go$ptrType(Int)), (go$ptrType(Int))], [(go$ptrType(Rat))], false], ["SetFrac64", "", [Go$Int64, Go$Int64], [(go$ptrType(Rat))], false], ["SetInt", "", [(go$ptrType(Int))], [(go$ptrType(Rat))], false], ["SetInt64", "", [Go$Int64], [(go$ptrType(Rat))], false], ["SetString", "", [Go$String], [(go$ptrType(Rat)), Go$Bool], false], ["Sign", "", [], [Go$Int], false], ["String", "", [], [Go$String], false], ["Sub", "", [(go$ptrType(Rat)), (go$ptrType(Rat))], [(go$ptrType(Rat))], false], ["norm", "math/big", [], [(go$ptrType(Rat))], false]];
		cacheBase10 = new (go$structType([["", "", sync.Mutex, ""], ["table", "math/big", (go$arrayType(divisor, 64)), ""]])).Ptr(new sync.Mutex.Ptr(), go$makeNativeArray("Struct", 64, function() { return new divisor.Ptr(); }));
		natOne = new nat([1]);
		intOne = new Int.Ptr(false, natOne);
		natTwo = new nat([2]);
		natTen = new nat([10]);
		karatsubaThreshold = 40;
		leafSize = 8;
		deBruijn32Lookup = new (go$sliceType(Go$Uint8))([0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
		deBruijn64Lookup = new (go$sliceType(Go$Uint8))([0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
	}
	return go$pkg;
})();
go$packages["code.google.com/p/go.tools/go/exact"] = (function() {
	var go$pkg = {}, fmt = go$packages["fmt"], token = go$packages["go/token"], big = go$packages["math/big"], strconv = go$packages["strconv"], Kind, Value, unknownVal, boolVal, stringVal, int64Val, intVal, floatVal, complexVal, normInt, normFloat, normComplex, MakeUnknown, MakeBool, MakeString, MakeInt64, MakeFloat64, MakeFromLiteral, BoolVal, StringVal, Int64Val, Uint64Val, Float64Val, BitLen, Sign, MakeImag, Real, Imag, is32bit, is63bit, UnaryOp, ord, match, BinaryOp, Shift, cmpZero, Compare, minInt64, maxInt64, int1, rat0;
	Kind = go$pkg.Kind = go$newType(4, "Int", "exact.Kind", "Kind", "code.google.com/p/go.tools/go/exact", null);
	Value = go$pkg.Value = go$newType(0, "Interface", "exact.Value", "Value", "code.google.com/p/go.tools/go/exact", null);
	unknownVal = go$pkg.unknownVal = go$newType(0, "Struct", "exact.unknownVal", "unknownVal", "code.google.com/p/go.tools/go/exact", function() {
		this.go$val = this;
	});
	boolVal = go$pkg.boolVal = go$newType(0, "Bool", "exact.boolVal", "boolVal", "code.google.com/p/go.tools/go/exact", null);
	stringVal = go$pkg.stringVal = go$newType(0, "String", "exact.stringVal", "stringVal", "code.google.com/p/go.tools/go/exact", null);
	int64Val = go$pkg.int64Val = go$newType(8, "Int64", "exact.int64Val", "int64Val", "code.google.com/p/go.tools/go/exact", null);
	intVal = go$pkg.intVal = go$newType(0, "Struct", "exact.intVal", "intVal", "code.google.com/p/go.tools/go/exact", function(val_) {
		this.go$val = this;
		this.val = val_ !== undefined ? val_ : (go$ptrType(big.Int)).nil;
	});
	floatVal = go$pkg.floatVal = go$newType(0, "Struct", "exact.floatVal", "floatVal", "code.google.com/p/go.tools/go/exact", function(val_) {
		this.go$val = this;
		this.val = val_ !== undefined ? val_ : (go$ptrType(big.Rat)).nil;
	});
	complexVal = go$pkg.complexVal = go$newType(0, "Struct", "exact.complexVal", "complexVal", "code.google.com/p/go.tools/go/exact", function(re_, im_) {
		this.go$val = this;
		this.re = re_ !== undefined ? re_ : (go$ptrType(big.Rat)).nil;
		this.im = im_ !== undefined ? im_ : (go$ptrType(big.Rat)).nil;
	});
	unknownVal.Ptr.prototype.Kind = function() {
		return 0;
	};
	unknownVal.prototype.Kind = function() { return this.go$val.Kind(); };
	boolVal.prototype.Kind = function() {
		return 1;
	};
	go$ptrType(boolVal).prototype.Kind = function() { return new boolVal(this.go$get()).Kind(); };
	stringVal.prototype.Kind = function() {
		return 2;
	};
	go$ptrType(stringVal).prototype.Kind = function() { return new stringVal(this.go$get()).Kind(); };
	int64Val.prototype.Kind = function() {
		return 3;
	};
	go$ptrType(int64Val).prototype.Kind = function() { return this.go$get().Kind(); };
	intVal.Ptr.prototype.Kind = function() {
		return 3;
	};
	intVal.prototype.Kind = function() { return this.go$val.Kind(); };
	floatVal.Ptr.prototype.Kind = function() {
		return 4;
	};
	floatVal.prototype.Kind = function() { return this.go$val.Kind(); };
	complexVal.Ptr.prototype.Kind = function() {
		return 5;
	};
	complexVal.prototype.Kind = function() { return this.go$val.Kind(); };
	unknownVal.Ptr.prototype.String = function() {
		return "unknown";
	};
	unknownVal.prototype.String = function() { return this.go$val.String(); };
	boolVal.prototype.String = function() {
		var x;
		x = this.go$val;
		return fmt.Sprintf("%v", new (go$sliceType(go$emptyInterface))([new Go$Bool(x)]));
	};
	go$ptrType(boolVal).prototype.String = function() { return new boolVal(this.go$get()).String(); };
	stringVal.prototype.String = function() {
		var x;
		x = this.go$val;
		return strconv.Quote(x);
	};
	go$ptrType(stringVal).prototype.String = function() { return new stringVal(this.go$get()).String(); };
	int64Val.prototype.String = function() {
		var x;
		x = this;
		return strconv.FormatInt(new Go$Int64(x.high, x.low), 10);
	};
	go$ptrType(int64Val).prototype.String = function() { return this.go$get().String(); };
	intVal.Ptr.prototype.String = function() {
		var _struct, x;
		x = (_struct = this, new intVal.Ptr(_struct.val));
		return x.val.String();
	};
	intVal.prototype.String = function() { return this.go$val.String(); };
	floatVal.Ptr.prototype.String = function() {
		var _struct, x;
		x = (_struct = this, new floatVal.Ptr(_struct.val));
		return x.val.String();
	};
	floatVal.prototype.String = function() { return this.go$val.String(); };
	complexVal.Ptr.prototype.String = function() {
		var _struct, x;
		x = (_struct = this, new complexVal.Ptr(_struct.re, _struct.im));
		return fmt.Sprintf("(%s + %si)", new (go$sliceType(go$emptyInterface))([x.re, x.im]));
	};
	complexVal.prototype.String = function() { return this.go$val.String(); };
	normInt = function(x) {
		var x$1, x$2;
		if (minInt64.Cmp(x) <= 0 && x.Cmp(maxInt64) <= 0) {
			return (x$1 = x.Int64(), new int64Val(x$1.high, x$1.low));
		}
		return (x$2 = new intVal.Ptr(x), new x$2.constructor.Struct(x$2));
	};
	normFloat = function(x) {
		var x$1;
		if (x.IsInt()) {
			return normInt(x.Num());
		}
		return (x$1 = new floatVal.Ptr(x), new x$1.constructor.Struct(x$1));
	};
	normComplex = function(re, im) {
		var x;
		if (im.Sign() === 0) {
			return normFloat(re);
		}
		return (x = new complexVal.Ptr(re, im), new x.constructor.Struct(x));
	};
	MakeUnknown = go$pkg.MakeUnknown = function() {
		var x;
		return (x = new unknownVal.Ptr(), new x.constructor.Struct(x));
	};
	MakeBool = go$pkg.MakeBool = function(b) {
		return new boolVal(b);
	};
	MakeString = go$pkg.MakeString = function(s) {
		return new stringVal(s);
	};
	MakeInt64 = go$pkg.MakeInt64 = function(x) {
		return new int64Val(x.high, x.low);
	};
	MakeFloat64 = go$pkg.MakeFloat64 = function(x) {
		var f, x$1;
		if (f = new big.Rat.Ptr().SetFloat64(x), !(f === (go$ptrType(big.Rat)).nil)) {
			return normFloat(f);
		}
		return (x$1 = new unknownVal.Ptr(), new x$1.constructor.Struct(x$1));
	};
	MakeFromLiteral = go$pkg.MakeFromLiteral = function(lit, tok) {
		var _ref, err, _tuple, x, ok, _tuple$1, x$1, x$2, ok$1, _tuple$2, x$3, n, ok$2, _tuple$3, im, n$1, err$1, _tuple$4, code, err$2, _tuple$5, s;
		_ref = tok;
		if (_ref === 5) {
			if (_tuple = strconv.ParseInt(lit, 0, 64), x = _tuple[0], err = _tuple[1], go$interfaceIsEqual(err, null)) {
				return new int64Val(x.high, x.low);
			}
			if (_tuple$1 = new big.Int.Ptr().SetString(lit, 0), x$1 = _tuple$1[0], ok = _tuple$1[1], ok) {
				return (x$2 = new intVal.Ptr(x$1), new x$2.constructor.Struct(x$2));
			}
		} else if (_ref === 6) {
			if (_tuple$2 = new big.Rat.Ptr().SetString(lit), x$3 = _tuple$2[0], ok$1 = _tuple$2[1], ok$1) {
				return normFloat(x$3);
			}
		} else if (_ref === 7) {
			if (n = lit.length, n > 0 && (lit.charCodeAt((n - 1 >> 0)) === 105)) {
				if (_tuple$3 = new big.Rat.Ptr().SetString(lit.substring(0, (n - 1 >> 0))), im = _tuple$3[0], ok$2 = _tuple$3[1], ok$2) {
					return normComplex(big.NewRat(new Go$Int64(0, 0), new Go$Int64(0, 1)), im);
				}
			}
		} else if (_ref === 8) {
			if (n$1 = lit.length, n$1 >= 2) {
				if (_tuple$4 = strconv.UnquoteChar(lit.substring(1, (n$1 - 1 >> 0)), 39), code = _tuple$4[0], err$1 = _tuple$4[3], go$interfaceIsEqual(err$1, null)) {
					return new int64Val(0, code);
				}
			}
		} else if (_ref === 9) {
			if (_tuple$5 = strconv.Unquote(lit), s = _tuple$5[0], err$2 = _tuple$5[1], go$interfaceIsEqual(err$2, null)) {
				return new stringVal(s);
			}
		}
		return null;
	};
	BoolVal = go$pkg.BoolVal = function(x) {
		var x$1, _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === boolVal) {
			x$1 = _ref.go$val;
			return x$1;
		} else if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return false;
		}
		throw go$panic(new Go$String(fmt.Sprintf("%v not a Bool", new (go$sliceType(go$emptyInterface))([x]))));
	};
	StringVal = go$pkg.StringVal = function(x) {
		var x$1, _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === stringVal) {
			x$1 = _ref.go$val;
			return x$1;
		} else if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return "";
		}
		throw go$panic(new Go$String(fmt.Sprintf("%v not a String", new (go$sliceType(go$emptyInterface))([x]))));
	};
	Int64Val = go$pkg.Int64Val = function(x) {
		var x$1, _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === int64Val) {
			x$1 = _ref.go$val;
			return [new Go$Int64(x$1.high, x$1.low), true];
		} else if (_type === intVal) {
			x$1 = _ref.go$val;
			return [x$1.val.Int64(), x$1.val.BitLen() <= 63];
		} else if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return [new Go$Int64(0, 0), false];
		}
		throw go$panic(new Go$String(fmt.Sprintf("%v not an Int", new (go$sliceType(go$emptyInterface))([x]))));
	};
	Uint64Val = go$pkg.Uint64Val = function(x) {
		var x$1, _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === int64Val) {
			x$1 = _ref.go$val;
			return [new Go$Uint64(x$1.high, x$1.low), (x$1.high > 0 || (x$1.high === 0 && x$1.low >= 0))];
		} else if (_type === intVal) {
			x$1 = _ref.go$val;
			return [x$1.val.Uint64(), x$1.val.Sign() >= 0 && x$1.val.BitLen() <= 64];
		} else if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return [new Go$Uint64(0, 0), false];
		}
		throw go$panic(new Go$String(fmt.Sprintf("%v not an Int", new (go$sliceType(go$emptyInterface))([x]))));
	};
	Float64Val = go$pkg.Float64Val = function(x) {
		var x$1, _ref, _type, f, x$2;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === int64Val) {
			x$1 = _ref.go$val;
			f = go$flatten64(new Go$Int64(x$1.high, x$1.low));
			return [f, (x$2 = new int64Val(0, f), (x$2.high === x$1.high && x$2.low === x$1.low))];
		} else if (_type === intVal) {
			x$1 = _ref.go$val;
			return new big.Rat.Ptr().SetFrac(x$1.val, int1).Float64();
		} else if (_type === floatVal) {
			x$1 = _ref.go$val;
			return x$1.val.Float64();
		} else if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return [0, false];
		}
		throw go$panic(new Go$String(fmt.Sprintf("%v not a Float", new (go$sliceType(go$emptyInterface))([x]))));
	};
	BitLen = go$pkg.BitLen = function(x) {
		var x$1, _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === int64Val) {
			x$1 = _ref.go$val;
			return new big.Int.Ptr().SetInt64(new Go$Int64(x$1.high, x$1.low)).BitLen();
		} else if (_type === intVal) {
			x$1 = _ref.go$val;
			return x$1.val.BitLen();
		} else if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return 0;
		}
		throw go$panic(new Go$String(fmt.Sprintf("%v not an Int", new (go$sliceType(go$emptyInterface))([x]))));
	};
	Sign = go$pkg.Sign = function(x) {
		var x$1, _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === int64Val) {
			x$1 = _ref.go$val;
			if ((x$1.high < 0 || (x$1.high === 0 && x$1.low < 0))) {
				return -1;
			} else if ((x$1.high > 0 || (x$1.high === 0 && x$1.low > 0))) {
				return 1;
			}
			return 0;
		} else if (_type === intVal) {
			x$1 = _ref.go$val;
			return x$1.val.Sign();
		} else if (_type === floatVal) {
			x$1 = _ref.go$val;
			return x$1.val.Sign();
		} else if (_type === complexVal) {
			x$1 = _ref.go$val;
			return x$1.re.Sign() | x$1.im.Sign();
		} else if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return 1;
		}
		throw go$panic(new Go$String(fmt.Sprintf("%v not numeric", new (go$sliceType(go$emptyInterface))([x]))));
	};
	MakeImag = go$pkg.MakeImag = function(x) {
		var im, x$1, _ref, _type;
		im = (go$ptrType(big.Rat)).nil;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return new x$1.constructor.Struct(x$1);
		} else if (_type === int64Val) {
			x$1 = _ref.go$val;
			im = big.NewRat(new Go$Int64(x$1.high, x$1.low), new Go$Int64(0, 1));
		} else if (_type === intVal) {
			x$1 = _ref.go$val;
			im = new big.Rat.Ptr().SetFrac(x$1.val, int1);
		} else if (_type === floatVal) {
			x$1 = _ref.go$val;
			im = x$1.val;
		} else {
			x$1 = _ref;
			throw go$panic(new Go$String(fmt.Sprintf("%v not Int or Float", new (go$sliceType(go$emptyInterface))([x$1]))));
		}
		return normComplex(rat0, im);
	};
	Real = go$pkg.Real = function(x) {
		var x$1, _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === unknownVal || _type === int64Val || _type === intVal || _type === floatVal) {
			x$1 = _ref;
			return x$1;
		} else if (_type === complexVal) {
			x$1 = _ref.go$val;
			return normFloat(x$1.re);
		}
		throw go$panic(new Go$String(fmt.Sprintf("%v not numeric", new (go$sliceType(go$emptyInterface))([x]))));
	};
	Imag = go$pkg.Imag = function(x) {
		var x$1, _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return new x$1.constructor.Struct(x$1);
		} else if (_type === int64Val || _type === intVal || _type === floatVal) {
			x$1 = _ref;
			return new int64Val(0, 0);
		} else if (_type === complexVal) {
			x$1 = _ref.go$val;
			return normFloat(x$1.im);
		}
		throw go$panic(new Go$String(fmt.Sprintf("%v not numeric", new (go$sliceType(go$emptyInterface))([x]))));
	};
	is32bit = function(x) {
		return (-1 < x.high || (-1 === x.high && 2147483648 <= x.low)) && (x.high < 0 || (x.high === 0 && x.low <= 2147483647));
	};
	is63bit = function(x) {
		return (-1073741824 < x.high || (-1073741824 === x.high && 0 <= x.low)) && (x.high < 1073741823 || (x.high === 1073741823 && x.low <= 4294967295));
	};
	UnaryOp = go$pkg.UnaryOp = function(op, y, size) {
		var go$this = this, _ref, _ref$1, _type, y$1, _ref$2, _type$1, z, z$1, y$2, _ref$3, _type$2, x, x$1, s, y$3, _ref$4, _type$3;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		_ref = op;
		/* if (_ref === 12) { */ if (_ref === 12) {} else if (_ref === 13) { go$s = 2; continue; } else if (_ref === 19) { go$s = 3; continue; } else if (_ref === 43) { go$s = 4; continue; } else { go$s = 5; continue; }
			_ref$1 = y;
			_type = _ref$1 !== null ? _ref$1.constructor : null;
			if (_type === unknownVal || _type === int64Val || _type === intVal || _type === floatVal || _type === complexVal) {
				return y;
			}
		/* } else if (_ref === 13) { */ go$s = 5; continue; case 2: 
			_ref$2 = y;
			_type$1 = _ref$2 !== null ? _ref$2.constructor : null;
			if (_type$1 === unknownVal) {
				y$1 = _ref$2.go$val;
				return new y$1.constructor.Struct(y$1);
			} else if (_type$1 === int64Val) {
				y$1 = _ref$2.go$val;
				if (z = new int64Val(-y$1.high, -y$1.low), !((z.high === y$1.high && z.low === y$1.low))) {
					return z;
				}
				return normInt(new big.Int.Ptr().Neg(big.NewInt(new Go$Int64(y$1.high, y$1.low))));
			} else if (_type$1 === intVal) {
				y$1 = _ref$2.go$val;
				return normInt(new big.Int.Ptr().Neg(y$1.val));
			} else if (_type$1 === floatVal) {
				y$1 = _ref$2.go$val;
				return normFloat(new big.Rat.Ptr().Neg(y$1.val));
			} else if (_type$1 === complexVal) {
				y$1 = _ref$2.go$val;
				return normComplex(new big.Rat.Ptr().Neg(y$1.re), new big.Rat.Ptr().Neg(y$1.im));
			}
		/* } else if (_ref === 19) { */ go$s = 5; continue; case 3: 
			z$1 = new big.Int.Ptr();
			_ref$3 = y;
			_type$2 = _ref$3 !== null ? _ref$3.constructor : null;
			/* if (_type$2 === unknownVal) { */ if (_type$2 === unknownVal) {} else if (_type$2 === int64Val) { go$s = 6; continue; } else if (_type$2 === intVal) { go$s = 7; continue; } else { go$s = 8; continue; }
				y$2 = _ref$3.go$val;
				return new y$2.constructor.Struct(y$2);
			/* } else if (_type$2 === int64Val) { */ go$s = 9; continue; case 6: 
				y$2 = _ref$3.go$val;
				z$1.Not(big.NewInt(new Go$Int64(y$2.high, y$2.low)));
			/* } else if (_type$2 === intVal) { */ go$s = 9; continue; case 7: 
				y$2 = _ref$3.go$val;
				z$1.Not(y$2.val);
			/* } else { */ go$s = 9; continue; case 8: 
				y$2 = _ref$3;
				/* goto Error */ go$s = 1; continue;
			/* } */ case 9:
			if (size >= 0) {
				s = (x = (size >>> 0), x$1 = 8, (((x >>> 16 << 16) * x$1 >>> 0) + (x << 16 >>> 16) * x$1) >>> 0);
				z$1.AndNot(z$1, new big.Int.Ptr().Lsh(big.NewInt(new Go$Int64(-1, 4294967295)), s));
			}
			return normInt(z$1);
		/* } else if (_ref === 43) { */ go$s = 5; continue; case 4: 
			_ref$4 = y;
			_type$3 = _ref$4 !== null ? _ref$4.constructor : null;
			if (_type$3 === unknownVal) {
				y$3 = _ref$4.go$val;
				return new y$3.constructor.Struct(y$3);
			} else if (_type$3 === boolVal) {
				y$3 = _ref$4.go$val;
				return new boolVal(!y$3);
			}
		/* } */ case 5:
		/* Error: */ case 1:
		throw go$panic(new Go$String(fmt.Sprintf("invalid unary operation %s%v", new (go$sliceType(go$emptyInterface))([new token.Token(op), y]))));
		/* */ } break; } }; return go$f();
	};
	ord = function(x) {
		var _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === int64Val) {
			return 1;
		} else if (_type === intVal) {
			return 2;
		} else if (_type === floatVal) {
			return 3;
		} else if (_type === complexVal) {
			return 4;
		} else {
			return 0;
		}
	};
	match = function(x, y) {
		var _, _$1, _tuple, _tuple$1, x$1, _ref, _type, _tuple$2, _tuple$3, y$1, _ref$1, _type$1, _tuple$4, x$2, _tuple$5, x$3, _tuple$6, x$4, _tuple$7, y$2, _ref$2, _type$2, _tuple$8, x$5, _tuple$9, x$6, _tuple$10, y$3, _ref$3, _type$3, _tuple$11, x$7, _tuple$12;
		_ = null;
		_$1 = null;
		if (ord(x) > ord(y)) {
			_tuple = match(y, x), y = _tuple[0], x = _tuple[1];
			_tuple$1 = [x, y], _ = _tuple$1[0], _$1 = _tuple$1[1];
			return [_, _$1];
		}
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === unknownVal) {
			x$1 = _ref.go$val;
			_tuple$2 = [new x$1.constructor.Struct(x$1), new x$1.constructor.Struct(x$1)], _ = _tuple$2[0], _$1 = _tuple$2[1];
			return [_, _$1];
		} else if (_type === boolVal || _type === stringVal || _type === complexVal) {
			x$1 = _ref;
			_tuple$3 = [x$1, y], _ = _tuple$3[0], _$1 = _tuple$3[1];
			return [_, _$1];
		} else if (_type === int64Val) {
			x$1 = _ref.go$val;
			_ref$1 = y;
			_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
			if (_type$1 === int64Val) {
				y$1 = _ref$1.go$val;
				_tuple$4 = [x$1, y$1], _ = _tuple$4[0], _$1 = _tuple$4[1];
				return [_, _$1];
			} else if (_type$1 === intVal) {
				y$1 = _ref$1.go$val;
				_tuple$5 = [(x$2 = new intVal.Ptr(big.NewInt(new Go$Int64(x$1.high, x$1.low))), new x$2.constructor.Struct(x$2)), new y$1.constructor.Struct(y$1)], _ = _tuple$5[0], _$1 = _tuple$5[1];
				return [_, _$1];
			} else if (_type$1 === floatVal) {
				y$1 = _ref$1.go$val;
				_tuple$6 = [(x$3 = new floatVal.Ptr(big.NewRat(new Go$Int64(x$1.high, x$1.low), new Go$Int64(0, 1))), new x$3.constructor.Struct(x$3)), new y$1.constructor.Struct(y$1)], _ = _tuple$6[0], _$1 = _tuple$6[1];
				return [_, _$1];
			} else if (_type$1 === complexVal) {
				y$1 = _ref$1.go$val;
				_tuple$7 = [(x$4 = new complexVal.Ptr(big.NewRat(new Go$Int64(x$1.high, x$1.low), new Go$Int64(0, 1)), rat0), new x$4.constructor.Struct(x$4)), new y$1.constructor.Struct(y$1)], _ = _tuple$7[0], _$1 = _tuple$7[1];
				return [_, _$1];
			}
		} else if (_type === intVal) {
			x$1 = _ref.go$val;
			_ref$2 = y;
			_type$2 = _ref$2 !== null ? _ref$2.constructor : null;
			if (_type$2 === intVal) {
				y$2 = _ref$2.go$val;
				_tuple$8 = [new x$1.constructor.Struct(x$1), new y$2.constructor.Struct(y$2)], _ = _tuple$8[0], _$1 = _tuple$8[1];
				return [_, _$1];
			} else if (_type$2 === floatVal) {
				y$2 = _ref$2.go$val;
				_tuple$9 = [(x$5 = new floatVal.Ptr(new big.Rat.Ptr().SetFrac(x$1.val, int1)), new x$5.constructor.Struct(x$5)), new y$2.constructor.Struct(y$2)], _ = _tuple$9[0], _$1 = _tuple$9[1];
				return [_, _$1];
			} else if (_type$2 === complexVal) {
				y$2 = _ref$2.go$val;
				_tuple$10 = [(x$6 = new complexVal.Ptr(new big.Rat.Ptr().SetFrac(x$1.val, int1), rat0), new x$6.constructor.Struct(x$6)), new y$2.constructor.Struct(y$2)], _ = _tuple$10[0], _$1 = _tuple$10[1];
				return [_, _$1];
			}
		} else if (_type === floatVal) {
			x$1 = _ref.go$val;
			_ref$3 = y;
			_type$3 = _ref$3 !== null ? _ref$3.constructor : null;
			if (_type$3 === floatVal) {
				y$3 = _ref$3.go$val;
				_tuple$11 = [new x$1.constructor.Struct(x$1), new y$3.constructor.Struct(y$3)], _ = _tuple$11[0], _$1 = _tuple$11[1];
				return [_, _$1];
			} else if (_type$3 === complexVal) {
				y$3 = _ref$3.go$val;
				_tuple$12 = [(x$7 = new complexVal.Ptr(x$1.val, rat0), new x$7.constructor.Struct(x$7)), new y$3.constructor.Struct(y$3)], _ = _tuple$12[0], _$1 = _tuple$12[1];
				return [_, _$1];
			}
		}
		throw go$panic(new Go$String("unreachable"));
	};
	BinaryOp = go$pkg.BinaryOp = function(x, op, y) {
		var go$this = this, _tuple, x$1, _ref, _type, y$1, _ref$1, a, x$2, b, c, _ref$2, a$1, b$1, c$1, _ref$3, a$2, b$2, c$2, _ref$4, _struct, y$2, _tuple$1, a$3, b$3, _tuple$2, c$3, d, _tuple$3, re, im, _ref$5, _tuple$4, ac, bd, bc, ad, _tuple$5, ac$1, bd$1, bc$1, ad$1, s, cc, dd;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		_tuple = match(x, y), x = _tuple[0], y = _tuple[1];
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		/* if (_type === unknownVal) { */ if (_type === unknownVal) {} else if (_type === boolVal) { go$s = 2; continue; } else if (_type === int64Val) { go$s = 3; continue; } else if (_type === intVal) { go$s = 4; continue; } else if (_type === floatVal) { go$s = 5; continue; } else if (_type === complexVal) { go$s = 6; continue; } else if (_type === stringVal) { go$s = 7; continue; } else { go$s = 8; continue; }
			x$1 = _ref.go$val;
			return new x$1.constructor.Struct(x$1);
		/* } else if (_type === boolVal) { */ go$s = 8; continue; case 2: 
			x$1 = _ref.go$val;
			y$1 = (y !== null && y.constructor === boolVal ? y.go$val : go$typeAssertionFailed(y, boolVal));
			_ref$1 = op;
			if (_ref$1 === 34) {
				return new boolVal(x$1 && y$1);
			} else if (_ref$1 === 35) {
				return new boolVal(x$1 || y$1);
			}
		/* } else if (_type === int64Val) { */ go$s = 8; continue; case 3: 
			x$1 = _ref.go$val;
			a = new Go$Int64(x$1.high, x$1.low);
			b = (x$2 = (y !== null && y.constructor === int64Val ? y.go$val : go$typeAssertionFailed(y, int64Val)), new Go$Int64(x$2.high, x$2.low));
			c = new Go$Int64(0, 0);
			_ref$2 = op;
			/* if (_ref$2 === 12) { */ if (_ref$2 === 12) {} else if (_ref$2 === 13) { go$s = 9; continue; } else if (_ref$2 === 14) { go$s = 10; continue; } else if (_ref$2 === 15) { go$s = 11; continue; } else if (_ref$2 === 26) { go$s = 12; continue; } else if (_ref$2 === 16) { go$s = 13; continue; } else if (_ref$2 === 17) { go$s = 14; continue; } else if (_ref$2 === 18) { go$s = 15; continue; } else if (_ref$2 === 19) { go$s = 16; continue; } else if (_ref$2 === 22) { go$s = 17; continue; } else { go$s = 18; continue; }
				if (!is63bit(a) || !is63bit(b)) {
					return normInt(new big.Int.Ptr().Add(big.NewInt(a), big.NewInt(b)));
				}
				c = new Go$Int64(a.high + b.high, a.low + b.low);
			/* } else if (_ref$2 === 13) { */ go$s = 19; continue; case 9: 
				if (!is63bit(a) || !is63bit(b)) {
					return normInt(new big.Int.Ptr().Sub(big.NewInt(a), big.NewInt(b)));
				}
				c = new Go$Int64(a.high - b.high, a.low - b.low);
			/* } else if (_ref$2 === 14) { */ go$s = 19; continue; case 10: 
				if (!is32bit(a) || !is32bit(b)) {
					return normInt(new big.Int.Ptr().Mul(big.NewInt(a), big.NewInt(b)));
				}
				c = go$mul64(a, b);
			/* } else if (_ref$2 === 15) { */ go$s = 19; continue; case 11: 
				return normFloat(new big.Rat.Ptr().SetFrac(big.NewInt(a), big.NewInt(b)));
			/* } else if (_ref$2 === 26) { */ go$s = 19; continue; case 12: 
				c = go$div64(a, b, false);
			/* } else if (_ref$2 === 16) { */ go$s = 19; continue; case 13: 
				c = go$div64(a, b, true);
			/* } else if (_ref$2 === 17) { */ go$s = 19; continue; case 14: 
				c = new Go$Int64(a.high & b.high, (a.low & b.low) >>> 0);
			/* } else if (_ref$2 === 18) { */ go$s = 19; continue; case 15: 
				c = new Go$Int64(a.high | b.high, (a.low | b.low) >>> 0);
			/* } else if (_ref$2 === 19) { */ go$s = 19; continue; case 16: 
				c = new Go$Int64(a.high ^ b.high, (a.low ^ b.low) >>> 0);
			/* } else if (_ref$2 === 22) { */ go$s = 19; continue; case 17: 
				c = new Go$Int64(a.high &~ b.high, (a.low &~ b.low) >>> 0);
			/* } else { */ go$s = 19; continue; case 18: 
				/* goto Error */ go$s = 1; continue;
			/* } */ case 19:
			return new int64Val(c.high, c.low);
		/* } else if (_type === intVal) { */ go$s = 8; continue; case 4: 
			x$1 = _ref.go$val;
			a$1 = x$1.val;
			b$1 = (y !== null && y.constructor === intVal ? y.go$val : go$typeAssertionFailed(y, intVal)).val;
			c$1 = new big.Int.Ptr();
			_ref$3 = op;
			/* if (_ref$3 === 12) { */ if (_ref$3 === 12) {} else if (_ref$3 === 13) { go$s = 20; continue; } else if (_ref$3 === 14) { go$s = 21; continue; } else if (_ref$3 === 15) { go$s = 22; continue; } else if (_ref$3 === 26) { go$s = 23; continue; } else if (_ref$3 === 16) { go$s = 24; continue; } else if (_ref$3 === 17) { go$s = 25; continue; } else if (_ref$3 === 18) { go$s = 26; continue; } else if (_ref$3 === 19) { go$s = 27; continue; } else if (_ref$3 === 22) { go$s = 28; continue; } else { go$s = 29; continue; }
				c$1.Add(a$1, b$1);
			/* } else if (_ref$3 === 13) { */ go$s = 30; continue; case 20: 
				c$1.Sub(a$1, b$1);
			/* } else if (_ref$3 === 14) { */ go$s = 30; continue; case 21: 
				c$1.Mul(a$1, b$1);
			/* } else if (_ref$3 === 15) { */ go$s = 30; continue; case 22: 
				return normFloat(new big.Rat.Ptr().SetFrac(a$1, b$1));
			/* } else if (_ref$3 === 26) { */ go$s = 30; continue; case 23: 
				c$1.Quo(a$1, b$1);
			/* } else if (_ref$3 === 16) { */ go$s = 30; continue; case 24: 
				c$1.Rem(a$1, b$1);
			/* } else if (_ref$3 === 17) { */ go$s = 30; continue; case 25: 
				c$1.And(a$1, b$1);
			/* } else if (_ref$3 === 18) { */ go$s = 30; continue; case 26: 
				c$1.Or(a$1, b$1);
			/* } else if (_ref$3 === 19) { */ go$s = 30; continue; case 27: 
				c$1.Xor(a$1, b$1);
			/* } else if (_ref$3 === 22) { */ go$s = 30; continue; case 28: 
				c$1.AndNot(a$1, b$1);
			/* } else { */ go$s = 30; continue; case 29: 
				/* goto Error */ go$s = 1; continue;
			/* } */ case 30:
			return normInt(c$1);
		/* } else if (_type === floatVal) { */ go$s = 8; continue; case 5: 
			x$1 = _ref.go$val;
			a$2 = x$1.val;
			b$2 = (y !== null && y.constructor === floatVal ? y.go$val : go$typeAssertionFailed(y, floatVal)).val;
			c$2 = new big.Rat.Ptr();
			_ref$4 = op;
			/* if (_ref$4 === 12) { */ if (_ref$4 === 12) {} else if (_ref$4 === 13) { go$s = 31; continue; } else if (_ref$4 === 14) { go$s = 32; continue; } else if (_ref$4 === 15) { go$s = 33; continue; } else { go$s = 34; continue; }
				c$2.Add(a$2, b$2);
			/* } else if (_ref$4 === 13) { */ go$s = 35; continue; case 31: 
				c$2.Sub(a$2, b$2);
			/* } else if (_ref$4 === 14) { */ go$s = 35; continue; case 32: 
				c$2.Mul(a$2, b$2);
			/* } else if (_ref$4 === 15) { */ go$s = 35; continue; case 33: 
				c$2.Quo(a$2, b$2);
			/* } else { */ go$s = 35; continue; case 34: 
				/* goto Error */ go$s = 1; continue;
			/* } */ case 35:
			return normFloat(c$2);
		/* } else if (_type === complexVal) { */ go$s = 8; continue; case 6: 
			x$1 = _ref.go$val;
			y$2 = (_struct = (y !== null && y.constructor === complexVal ? y.go$val : go$typeAssertionFailed(y, complexVal)), new complexVal.Ptr(_struct.re, _struct.im));
			_tuple$1 = [x$1.re, x$1.im], a$3 = _tuple$1[0], b$3 = _tuple$1[1];
			_tuple$2 = [y$2.re, y$2.im], c$3 = _tuple$2[0], d = _tuple$2[1];
			_tuple$3 = [new big.Rat.Ptr(), new big.Rat.Ptr()], re = _tuple$3[0], im = _tuple$3[1];
			_ref$5 = op;
			/* if (_ref$5 === 12) { */ if (_ref$5 === 12) {} else if (_ref$5 === 13) { go$s = 36; continue; } else if (_ref$5 === 14) { go$s = 37; continue; } else if (_ref$5 === 15) { go$s = 38; continue; } else { go$s = 39; continue; }
				re.Add(a$3, c$3);
				im.Add(b$3, d);
			/* } else if (_ref$5 === 13) { */ go$s = 40; continue; case 36: 
				re.Sub(a$3, c$3);
				im.Sub(b$3, d);
			/* } else if (_ref$5 === 14) { */ go$s = 40; continue; case 37: 
				_tuple$4 = [new big.Rat.Ptr(), new big.Rat.Ptr(), new big.Rat.Ptr(), new big.Rat.Ptr()], ac = _tuple$4[0], bd = _tuple$4[1], bc = _tuple$4[2], ad = _tuple$4[3];
				ac.Mul(a$3, c$3);
				bd.Mul(b$3, d);
				bc.Mul(b$3, c$3);
				ad.Mul(a$3, d);
				re.Sub(ac, bd);
				im.Add(bc, ad);
			/* } else if (_ref$5 === 15) { */ go$s = 40; continue; case 38: 
				_tuple$5 = [new big.Rat.Ptr(), new big.Rat.Ptr(), new big.Rat.Ptr(), new big.Rat.Ptr(), new big.Rat.Ptr(), new big.Rat.Ptr(), new big.Rat.Ptr()], ac$1 = _tuple$5[0], bd$1 = _tuple$5[1], bc$1 = _tuple$5[2], ad$1 = _tuple$5[3], s = _tuple$5[4], cc = _tuple$5[5], dd = _tuple$5[6];
				ac$1.Mul(a$3, c$3);
				bd$1.Mul(b$3, d);
				bc$1.Mul(b$3, c$3);
				ad$1.Mul(a$3, d);
				cc.Mul(c$3, c$3);
				dd.Mul(d, d);
				s.Add(cc, dd);
				re.Add(ac$1, bd$1);
				re.Quo(re, s);
				im.Sub(bc$1, ad$1);
				im.Quo(im, s);
			/* } else { */ go$s = 40; continue; case 39: 
				/* goto Error */ go$s = 1; continue;
			/* } */ case 40:
			return normComplex(re, im);
		/* } else if (_type === stringVal) { */ go$s = 8; continue; case 7: 
			x$1 = _ref.go$val;
			if (op === 12) {
				return new stringVal(x$1 + (y !== null && y.constructor === stringVal ? y.go$val : go$typeAssertionFailed(y, stringVal)));
			}
		/* } */ case 8:
		/* Error: */ case 1:
		throw go$panic(new Go$String(fmt.Sprintf("invalid binary operation %v %s %v", new (go$sliceType(go$emptyInterface))([x, new token.Token(op), y]))));
		/* */ } break; } }; return go$f();
	};
	Shift = go$pkg.Shift = function(x, op, s) {
		var x$1, _ref, _type, _ref$1, z, z$1, _ref$2;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return new x$1.constructor.Struct(x$1);
		} else if (_type === int64Val) {
			x$1 = _ref.go$val;
			if (s === 0) {
				return x$1;
			}
			_ref$1 = op;
			if (_ref$1 === 20) {
				z = big.NewInt(new Go$Int64(x$1.high, x$1.low));
				return normInt(z.Lsh(z, s));
			} else if (_ref$1 === 21) {
				return go$shiftRightInt64(x$1, s);
			}
		} else if (_type === intVal) {
			x$1 = _ref.go$val;
			if (s === 0) {
				return new x$1.constructor.Struct(x$1);
			}
			z$1 = new big.Int.Ptr();
			_ref$2 = op;
			if (_ref$2 === 20) {
				return normInt(z$1.Lsh(x$1.val, s));
			} else if (_ref$2 === 21) {
				return normInt(z$1.Rsh(x$1.val, s));
			}
		}
		throw go$panic(new Go$String(fmt.Sprintf("invalid shift %v %s %d", new (go$sliceType(go$emptyInterface))([x, new token.Token(op), new Go$Uint(s)]))));
	};
	cmpZero = function(x, op) {
		var _ref;
		_ref = op;
		if (_ref === 39) {
			return x === 0;
		} else if (_ref === 44) {
			return !((x === 0));
		} else if (_ref === 40) {
			return x < 0;
		} else if (_ref === 45) {
			return x <= 0;
		} else if (_ref === 41) {
			return x > 0;
		} else if (_ref === 46) {
			return x >= 0;
		}
		throw go$panic(new Go$String("unreachable"));
	};
	Compare = go$pkg.Compare = function(x, op, y) {
		var _tuple, x$1, _ref, _type, y$1, _ref$1, y$2, _ref$2, _struct, y$3, re, im, _ref$3, y$4, _ref$4;
		_tuple = match(x, y), x = _tuple[0], y = _tuple[1];
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === unknownVal) {
			x$1 = _ref.go$val;
			return false;
		} else if (_type === boolVal) {
			x$1 = _ref.go$val;
			y$1 = (y !== null && y.constructor === boolVal ? y.go$val : go$typeAssertionFailed(y, boolVal));
			_ref$1 = op;
			if (_ref$1 === 39) {
				return x$1 === y$1;
			} else if (_ref$1 === 44) {
				return !(x$1 === y$1);
			}
		} else if (_type === int64Val) {
			x$1 = _ref.go$val;
			y$2 = (y !== null && y.constructor === int64Val ? y.go$val : go$typeAssertionFailed(y, int64Val));
			_ref$2 = op;
			if (_ref$2 === 39) {
				return (x$1.high === y$2.high && x$1.low === y$2.low);
			} else if (_ref$2 === 44) {
				return !((x$1.high === y$2.high && x$1.low === y$2.low));
			} else if (_ref$2 === 40) {
				return (x$1.high < y$2.high || (x$1.high === y$2.high && x$1.low < y$2.low));
			} else if (_ref$2 === 45) {
				return (x$1.high < y$2.high || (x$1.high === y$2.high && x$1.low <= y$2.low));
			} else if (_ref$2 === 41) {
				return (x$1.high > y$2.high || (x$1.high === y$2.high && x$1.low > y$2.low));
			} else if (_ref$2 === 46) {
				return (x$1.high > y$2.high || (x$1.high === y$2.high && x$1.low >= y$2.low));
			}
		} else if (_type === intVal) {
			x$1 = _ref.go$val;
			return cmpZero(x$1.val.Cmp((y !== null && y.constructor === intVal ? y.go$val : go$typeAssertionFailed(y, intVal)).val), op);
		} else if (_type === floatVal) {
			x$1 = _ref.go$val;
			return cmpZero(x$1.val.Cmp((y !== null && y.constructor === floatVal ? y.go$val : go$typeAssertionFailed(y, floatVal)).val), op);
		} else if (_type === complexVal) {
			x$1 = _ref.go$val;
			y$3 = (_struct = (y !== null && y.constructor === complexVal ? y.go$val : go$typeAssertionFailed(y, complexVal)), new complexVal.Ptr(_struct.re, _struct.im));
			re = x$1.re.Cmp(y$3.re);
			im = x$1.im.Cmp(y$3.im);
			_ref$3 = op;
			if (_ref$3 === 39) {
				return (re === 0) && (im === 0);
			} else if (_ref$3 === 44) {
				return !((re === 0)) || !((im === 0));
			}
		} else if (_type === stringVal) {
			x$1 = _ref.go$val;
			y$4 = (y !== null && y.constructor === stringVal ? y.go$val : go$typeAssertionFailed(y, stringVal));
			_ref$4 = op;
			if (_ref$4 === 39) {
				return x$1 === y$4;
			} else if (_ref$4 === 44) {
				return !(x$1 === y$4);
			} else if (_ref$4 === 40) {
				return x$1 < y$4;
			} else if (_ref$4 === 45) {
				return x$1 <= y$4;
			} else if (_ref$4 === 41) {
				return x$1 > y$4;
			} else if (_ref$4 === 46) {
				return x$1 >= y$4;
			}
		}
		throw go$panic(new Go$String(fmt.Sprintf("invalid comparison %v %s %v", new (go$sliceType(go$emptyInterface))([x, new token.Token(op), y]))));
	};
	go$pkg.init = function() {
		Value.init([["Kind", "", (go$funcType([], [Kind], false))], ["String", "", (go$funcType([], [Go$String], false))], ["implementsValue", "code.google.com/p/go.tools/go/exact", (go$funcType([], [], false))]]);
		unknownVal.init([]);
		unknownVal.methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		(go$ptrType(unknownVal)).methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		boolVal.methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		(go$ptrType(boolVal)).methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		stringVal.methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		(go$ptrType(stringVal)).methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		int64Val.methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		(go$ptrType(int64Val)).methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		intVal.init([["val", "code.google.com/p/go.tools/go/exact", (go$ptrType(big.Int)), ""]]);
		intVal.methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		(go$ptrType(intVal)).methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		floatVal.init([["val", "code.google.com/p/go.tools/go/exact", (go$ptrType(big.Rat)), ""]]);
		floatVal.methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		(go$ptrType(floatVal)).methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		complexVal.init([["re", "code.google.com/p/go.tools/go/exact", (go$ptrType(big.Rat)), ""], ["im", "code.google.com/p/go.tools/go/exact", (go$ptrType(big.Rat)), ""]]);
		complexVal.methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		(go$ptrType(complexVal)).methods = [["Kind", "", [], [Kind], false], ["String", "", [], [Go$String], false], ["implementsValue", "code.google.com/p/go.tools/go/exact", [], [], false]];
		minInt64 = big.NewInt(new Go$Int64(-2147483648, 0));
		maxInt64 = big.NewInt(new Go$Int64(2147483647, 4294967295));
		int1 = big.NewInt(new Go$Int64(0, 1));
		rat0 = big.NewRat(new Go$Int64(0, 0), new Go$Int64(0, 1));
	}
	return go$pkg;
})();
go$packages["bufio"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], errors = go$packages["errors"], io = go$packages["io"], utf8 = go$packages["unicode/utf8"], Reader, NewReaderSize, NewReader, errNegativeRead;
	Reader = go$pkg.Reader = go$newType(0, "Struct", "bufio.Reader", "Reader", "bufio", function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.go$val = this;
		this.buf = buf_ !== undefined ? buf_ : (go$sliceType(Go$Uint8)).nil;
		this.rd = rd_ !== undefined ? rd_ : null;
		this.r = r_ !== undefined ? r_ : 0;
		this.w = w_ !== undefined ? w_ : 0;
		this.err = err_ !== undefined ? err_ : null;
		this.lastByte = lastByte_ !== undefined ? lastByte_ : 0;
		this.lastRuneSize = lastRuneSize_ !== undefined ? lastRuneSize_ : 0;
	});
	NewReaderSize = go$pkg.NewReaderSize = function(rd, size) {
		var _tuple, b, ok, r;
		_tuple = (rd !== null && rd.constructor === (go$ptrType(Reader)) ? [rd.go$val, true] : [(go$ptrType(Reader)).nil, false]), b = _tuple[0], ok = _tuple[1];
		if (ok && b.buf.length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.Ptr();
		r.reset((go$sliceType(Go$Uint8)).make(size, 0, function() { return 0; }), rd);
		return r;
	};
	NewReader = go$pkg.NewReader = function(rd) {
		return NewReaderSize(rd, 4096);
	};
	Reader.Ptr.prototype.Reset = function(r) {
		var b;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.go$val.Reset(r); };
	Reader.Ptr.prototype.reset = function(buf, r) {
		var b, l, r$1;
		b = this;
		l = b, r$1 = new Reader.Ptr(buf, r, 0, 0, null, -1, -1), l.buf = r$1.buf, l.rd = r$1.rd, l.r = r$1.r, l.w = r$1.w, l.err = r$1.err, l.lastByte = r$1.lastByte, l.lastRuneSize = r$1.lastRuneSize;
	};
	Reader.prototype.reset = function(buf, r) { return this.go$val.reset(buf, r); };
	Reader.Ptr.prototype.fill = function() {
		var b, _tuple, n, err;
		b = this;
		if (b.r > 0) {
			go$copySlice(b.buf, go$subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		_tuple = b.rd.Read(go$subslice(b.buf, b.w)), n = _tuple[0], err = _tuple[1];
		if (n < 0) {
			throw go$panic(errNegativeRead);
		}
		b.w = b.w + (n) >> 0;
		if (!(go$interfaceIsEqual(err, null))) {
			b.err = err;
		}
	};
	Reader.prototype.fill = function() { return this.go$val.fill(); };
	Reader.Ptr.prototype.readErr = function() {
		var b, err;
		b = this;
		err = b.err;
		b.err = null;
		return err;
	};
	Reader.prototype.readErr = function() { return this.go$val.readErr(); };
	Reader.Ptr.prototype.Peek = function(n) {
		var b, m, err;
		b = this;
		if (n < 0) {
			return [(go$sliceType(Go$Uint8)).nil, go$pkg.ErrNegativeCount];
		}
		if (n > b.buf.length) {
			return [(go$sliceType(Go$Uint8)).nil, go$pkg.ErrBufferFull];
		}
		while ((b.w - b.r >> 0) < n && go$interfaceIsEqual(b.err, null)) {
			b.fill();
		}
		m = b.w - b.r >> 0;
		if (m > n) {
			m = n;
		}
		err = null;
		if (m < n) {
			err = b.readErr();
			if (go$interfaceIsEqual(err, null)) {
				err = go$pkg.ErrBufferFull;
			}
		}
		return [go$subslice(b.buf, b.r, (b.r + m >> 0)), err];
	};
	Reader.prototype.Peek = function(n) { return this.go$val.Peek(n); };
	Reader.Ptr.prototype.Read = function(p) {
		var n, err, b, _tuple, _tuple$1, _tuple$2, _slice, _index, _tuple$3, _tuple$4, _slice$1, _index$1, _tuple$5;
		n = 0;
		err = null;
		b = this;
		n = p.length;
		if (n === 0) {
			_tuple = [0, b.readErr()], n = _tuple[0], err = _tuple[1];
			return [n, err];
		}
		if (b.w === b.r) {
			if (!(go$interfaceIsEqual(b.err, null))) {
				_tuple$1 = [0, b.readErr()], n = _tuple$1[0], err = _tuple$1[1];
				return [n, err];
			}
			if (p.length >= b.buf.length) {
				_tuple$2 = b.rd.Read(p), n = _tuple$2[0], b.err = _tuple$2[1];
				if (n > 0) {
					b.lastByte = ((_slice = p, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0);
					b.lastRuneSize = -1;
				}
				_tuple$3 = [n, b.readErr()], n = _tuple$3[0], err = _tuple$3[1];
				return [n, err];
			}
			b.fill();
			if (b.w === b.r) {
				_tuple$4 = [0, b.readErr()], n = _tuple$4[0], err = _tuple$4[1];
				return [n, err];
			}
		}
		if (n > (b.w - b.r >> 0)) {
			n = b.w - b.r >> 0;
		}
		go$copySlice(go$subslice(p, 0, n), go$subslice(b.buf, b.r));
		b.r = b.r + (n) >> 0;
		b.lastByte = ((_slice$1 = b.buf, _index$1 = (b.r - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) >> 0);
		b.lastRuneSize = -1;
		_tuple$5 = [n, null], n = _tuple$5[0], err = _tuple$5[1];
		return [n, err];
	};
	Reader.prototype.Read = function(p) { return this.go$val.Read(p); };
	Reader.Ptr.prototype.ReadByte = function() {
		var c, err, b, _tuple, _slice, _index, _tuple$1;
		c = 0;
		err = null;
		b = this;
		b.lastRuneSize = -1;
		while (b.w === b.r) {
			if (!(go$interfaceIsEqual(b.err, null))) {
				_tuple = [0, b.readErr()], c = _tuple[0], err = _tuple[1];
				return [c, err];
			}
			b.fill();
		}
		c = (_slice = b.buf, _index = b.r, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		b.r = b.r + 1 >> 0;
		b.lastByte = (c >> 0);
		_tuple$1 = [c, null], c = _tuple$1[0], err = _tuple$1[1];
		return [c, err];
	};
	Reader.prototype.ReadByte = function() { return this.go$val.ReadByte(); };
	Reader.Ptr.prototype.UnreadByte = function() {
		var b, _slice, _index;
		b = this;
		b.lastRuneSize = -1;
		if ((b.r === b.w) && b.lastByte >= 0) {
			b.w = 1;
			b.r = 0;
			_slice = b.buf, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = (b.lastByte << 24 >>> 24)) : go$throwRuntimeError("index out of range");
			b.lastByte = -1;
			return null;
		}
		if (b.r <= 0) {
			return go$pkg.ErrInvalidUnreadByte;
		}
		b.r = b.r - 1 >> 0;
		b.lastByte = -1;
		return null;
	};
	Reader.prototype.UnreadByte = function() { return this.go$val.UnreadByte(); };
	Reader.Ptr.prototype.ReadRune = function() {
		var r, size, err, b, _tuple, _slice, _index, _tuple$1, _tuple$2, _slice$1, _index$1, _tuple$3;
		r = 0;
		size = 0;
		err = null;
		b = this;
		while ((b.r + 4 >> 0) > b.w && !utf8.FullRune(go$subslice(b.buf, b.r, b.w)) && go$interfaceIsEqual(b.err, null)) {
			b.fill();
		}
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tuple = [0, 0, b.readErr()], r = _tuple[0], size = _tuple[1], err = _tuple[2];
			return [r, size, err];
		}
		_tuple$1 = [((_slice = b.buf, _index = b.r, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0), 1], r = _tuple$1[0], size = _tuple$1[1];
		if (r >= 128) {
			_tuple$2 = utf8.DecodeRune(go$subslice(b.buf, b.r, b.w)), r = _tuple$2[0], size = _tuple$2[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = ((_slice$1 = b.buf, _index$1 = (b.r - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) >> 0);
		b.lastRuneSize = size;
		_tuple$3 = [r, size, null], r = _tuple$3[0], size = _tuple$3[1], err = _tuple$3[2];
		return [r, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.go$val.ReadRune(); };
	Reader.Ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRuneSize < 0 || (b.r === 0)) {
			return go$pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return null;
	};
	Reader.prototype.UnreadRune = function() { return this.go$val.UnreadRune(); };
	Reader.Ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.go$val.Buffered(); };
	Reader.Ptr.prototype.ReadSlice = function(delim) {
		var line, err, b, i, line1, _tuple, line$1, _tuple$1, n, i$1, line$2, _tuple$2, _tuple$3;
		line = (go$sliceType(Go$Uint8)).nil;
		err = null;
		b = this;
		if (i = bytes.IndexByte(go$subslice(b.buf, b.r, b.w), delim), i >= 0) {
			line1 = go$subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
			b.r = b.r + ((i + 1 >> 0)) >> 0;
			_tuple = [line1, null], line = _tuple[0], err = _tuple[1];
			return [line, err];
		}
		while (true) {
			if (!(go$interfaceIsEqual(b.err, null))) {
				line$1 = go$subslice(b.buf, b.r, b.w);
				b.r = b.w;
				_tuple$1 = [line$1, b.readErr()], line = _tuple$1[0], err = _tuple$1[1];
				return [line, err];
			}
			n = b.Buffered();
			b.fill();
			if (i$1 = bytes.IndexByte(go$subslice(b.buf, n, b.w), delim), i$1 >= 0) {
				line$2 = go$subslice(b.buf, 0, ((n + i$1 >> 0) + 1 >> 0));
				b.r = (n + i$1 >> 0) + 1 >> 0;
				_tuple$2 = [line$2, null], line = _tuple$2[0], err = _tuple$2[1];
				return [line, err];
			}
			if (b.Buffered() >= b.buf.length) {
				b.r = b.w;
				_tuple$3 = [b.buf, go$pkg.ErrBufferFull], line = _tuple$3[0], err = _tuple$3[1];
				return [line, err];
			}
		}
	};
	Reader.prototype.ReadSlice = function(delim) { return this.go$val.ReadSlice(delim); };
	Reader.Ptr.prototype.ReadLine = function() {
		var line, isPrefix, err, b, _tuple, _slice, _index, _tuple$1, _slice$1, _index$1, drop, _slice$2, _index$2;
		line = (go$sliceType(Go$Uint8)).nil;
		isPrefix = false;
		err = null;
		b = this;
		_tuple = b.ReadSlice(10), line = _tuple[0], err = _tuple[1];
		if (go$interfaceIsEqual(err, go$pkg.ErrBufferFull)) {
			if (line.length > 0 && ((_slice = line, _index = (line.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 13)) {
				if (b.r === 0) {
					throw go$panic(new Go$String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - 1 >> 0;
				line = go$subslice(line, 0, (line.length - 1 >> 0));
			}
			_tuple$1 = [line, true, null], line = _tuple$1[0], isPrefix = _tuple$1[1], err = _tuple$1[2];
			return [line, isPrefix, err];
		}
		if (line.length === 0) {
			if (!(go$interfaceIsEqual(err, null))) {
				line = (go$sliceType(Go$Uint8)).nil;
			}
			return [line, isPrefix, err];
		}
		err = null;
		if ((_slice$1 = line, _index$1 = (line.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 10) {
			drop = 1;
			if (line.length > 1 && ((_slice$2 = line, _index$2 = (line.length - 2 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 13)) {
				drop = 2;
			}
			line = go$subslice(line, 0, (line.length - drop >> 0));
		}
		return [line, isPrefix, err];
	};
	Reader.prototype.ReadLine = function() { return this.go$val.ReadLine(); };
	Reader.Ptr.prototype.ReadBytes = function(delim) {
		var line, err, b, frag, full, e, _tuple, buf, n, _ref, _i, i, _slice, _index, buf$1, _ref$1, _i$1, i$1, _slice$1, _index$1, _tuple$1;
		line = (go$sliceType(Go$Uint8)).nil;
		err = null;
		b = this;
		frag = (go$sliceType(Go$Uint8)).nil;
		full = (go$sliceType((go$sliceType(Go$Uint8)))).nil;
		err = null;
		while (true) {
			e = null;
			_tuple = b.ReadSlice(delim), frag = _tuple[0], e = _tuple[1];
			if (go$interfaceIsEqual(e, null)) {
				break;
			}
			if (!(go$interfaceIsEqual(e, go$pkg.ErrBufferFull))) {
				err = e;
				break;
			}
			buf = (go$sliceType(Go$Uint8)).make(frag.length, 0, function() { return 0; });
			go$copySlice(buf, frag);
			full = go$append(full, buf);
		}
		n = 0;
		_ref = full;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			n = n + ((_slice = full, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).length) >> 0;
			_i++;
		}
		n = n + (frag.length) >> 0;
		buf$1 = (go$sliceType(Go$Uint8)).make(n, 0, function() { return 0; });
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			i$1 = _i$1;
			n = n + (go$copySlice(go$subslice(buf$1, n), (_slice$1 = full, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))) >> 0;
			_i$1++;
		}
		go$copySlice(go$subslice(buf$1, n), frag);
		_tuple$1 = [buf$1, err], line = _tuple$1[0], err = _tuple$1[1];
		return [line, err];
	};
	Reader.prototype.ReadBytes = function(delim) { return this.go$val.ReadBytes(delim); };
	Reader.Ptr.prototype.ReadString = function(delim) {
		var line, err, b, _tuple, bytes$1, _tuple$1;
		line = "";
		err = null;
		b = this;
		_tuple = b.ReadBytes(delim), bytes$1 = _tuple[0], err = _tuple[1];
		line = go$bytesToString(bytes$1);
		_tuple$1 = [line, err], line = _tuple$1[0], err = _tuple$1[1];
		return [line, err];
	};
	Reader.prototype.ReadString = function(delim) { return this.go$val.ReadString(delim); };
	Reader.Ptr.prototype.WriteTo = function(w) {
		var n, err, b, _tuple, ok, _tuple$1, x, r, _tuple$2, m, err$1, x$1, _tuple$3, _tuple$4, m$1, err$2, x$2, _tuple$5, _tuple$6;
		n = new Go$Int64(0, 0);
		err = null;
		b = this;
		_tuple = b.writeBuf(w), n = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [n, err];
		}
		if (_tuple$1 = (x = b.rd, (x !== null && io.WriterTo.implementedBy.indexOf(x.constructor) !== -1 ? [x, true] : [null, false])), r = _tuple$1[0], ok = _tuple$1[1], ok) {
			_tuple$2 = r.WriteTo(w), m = _tuple$2[0], err$1 = _tuple$2[1];
			n = (x$1 = m, new Go$Int64(n.high + x$1.high, n.low + x$1.low));
			_tuple$3 = [n, err$1], n = _tuple$3[0], err = _tuple$3[1];
			return [n, err];
		}
		b.fill();
		while (b.r < b.w) {
			_tuple$4 = b.writeBuf(w), m$1 = _tuple$4[0], err$2 = _tuple$4[1];
			n = (x$2 = m$1, new Go$Int64(n.high + x$2.high, n.low + x$2.low));
			if (!(go$interfaceIsEqual(err$2, null))) {
				_tuple$5 = [n, err$2], n = _tuple$5[0], err = _tuple$5[1];
				return [n, err];
			}
			b.fill();
		}
		if (go$interfaceIsEqual(b.err, io.EOF)) {
			b.err = null;
		}
		_tuple$6 = [n, b.readErr()], n = _tuple$6[0], err = _tuple$6[1];
		return [n, err];
	};
	Reader.prototype.WriteTo = function(w) { return this.go$val.WriteTo(w); };
	Reader.Ptr.prototype.writeBuf = function(w) {
		var b, _tuple, n, err;
		b = this;
		_tuple = w.Write(go$subslice(b.buf, b.r, b.w)), n = _tuple[0], err = _tuple[1];
		b.r = b.r + (n) >> 0;
		return [new Go$Int64(0, n), err];
	};
	Reader.prototype.writeBuf = function(w) { return this.go$val.writeBuf(w); };
	go$pkg.init = function() {
		Reader.init([["buf", "bufio", (go$sliceType(Go$Uint8)), ""], ["rd", "bufio", io.Reader, ""], ["r", "bufio", Go$Int, ""], ["w", "bufio", Go$Int, ""], ["err", "bufio", go$error, ""], ["lastByte", "bufio", Go$Int, ""], ["lastRuneSize", "bufio", Go$Int, ""]]);
		(go$ptrType(Reader)).methods = [["Buffered", "", [], [Go$Int], false], ["Peek", "", [Go$Int], [(go$sliceType(Go$Uint8)), go$error], false], ["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["ReadByte", "", [], [Go$Uint8, go$error], false], ["ReadBytes", "", [Go$Uint8], [(go$sliceType(Go$Uint8)), go$error], false], ["ReadLine", "", [], [(go$sliceType(Go$Uint8)), Go$Bool, go$error], false], ["ReadRune", "", [], [Go$Int32, Go$Int, go$error], false], ["ReadSlice", "", [Go$Uint8], [(go$sliceType(Go$Uint8)), go$error], false], ["ReadString", "", [Go$Uint8], [Go$String, go$error], false], ["Reset", "", [io.Reader], [], false], ["UnreadByte", "", [], [go$error], false], ["UnreadRune", "", [], [go$error], false], ["WriteTo", "", [io.Writer], [Go$Int64, go$error], false], ["fill", "bufio", [], [], false], ["readErr", "bufio", [], [go$error], false], ["reset", "bufio", [(go$sliceType(Go$Uint8)), io.Reader], [], false], ["writeBuf", "bufio", [io.Writer], [Go$Int64, go$error], false]];
		go$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		go$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		go$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		go$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		go$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		go$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		go$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
	}
	return go$pkg;
})();
go$packages["path/filepath"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], os = go$packages["os"], runtime = go$packages["runtime"], sort = go$packages["sort"], strings = go$packages["strings"], utf8 = go$packages["unicode/utf8"], bytes = go$packages["bytes"], lazybuf, Clean, ToSlash, FromSlash, SplitList, Split, Join, EvalSymlinks, VolumeName, IsAbs, volumeNameLen, splitList, evalSymlinks;
	lazybuf = go$pkg.lazybuf = go$newType(0, "Struct", "filepath.lazybuf", "lazybuf", "path/filepath", function(path_, buf_, w_, volAndPath_, volLen_) {
		this.go$val = this;
		this.path = path_ !== undefined ? path_ : "";
		this.buf = buf_ !== undefined ? buf_ : (go$sliceType(Go$Uint8)).nil;
		this.w = w_ !== undefined ? w_ : 0;
		this.volAndPath = volAndPath_ !== undefined ? volAndPath_ : "";
		this.volLen = volLen_ !== undefined ? volLen_ : 0;
	});
	lazybuf.Ptr.prototype.index = function(i) {
		var b, _slice, _index;
		b = this;
		if (!(b.buf === (go$sliceType(Go$Uint8)).nil)) {
			return (_slice = b.buf, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.go$val.index(i); };
	lazybuf.Ptr.prototype.append = function(c) {
		var b, _slice, _index;
		b = this;
		if (b.buf === (go$sliceType(Go$Uint8)).nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + 1 >> 0;
				return;
			}
			b.buf = (go$sliceType(Go$Uint8)).make(b.path.length, 0, function() { return 0; });
			go$copyString(b.buf, b.path.substring(0, b.w));
		}
		_slice = b.buf, _index = b.w, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = c) : go$throwRuntimeError("index out of range");
		b.w = b.w + 1 >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.go$val.append(c); };
	lazybuf.Ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === (go$sliceType(Go$Uint8)).nil) {
			return b.volAndPath.substring(0, (b.volLen + b.w >> 0));
		}
		return b.volAndPath.substring(0, b.volLen) + go$bytesToString(go$subslice(b.buf, 0, b.w));
	};
	lazybuf.prototype.string = function() { return this.go$val.string(); };
	Clean = go$pkg.Clean = function(path) {
		var originalPath, volLen, rooted, n, out, _tuple, r, dotdot, _tuple$1;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = path.substring(volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.Ptr(path, (go$sliceType(Go$Uint8)).nil, 0, originalPath, volLen);
		_tuple = [0, 0], r = _tuple[0], dotdot = _tuple[1];
		if (rooted) {
			out.append(47);
			_tuple$1 = [1, 1], r = _tuple$1[0], dotdot = _tuple$1[1];
		}
		while (r < n) {
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + 1 >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + 1 >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + 2 >> 0;
				if (out.w > dotdot) {
					out.w = out.w - 1 >> 0;
					while (out.w > dotdot && !os.IsPathSeparator(out.index(out.w))) {
						out.w = out.w - 1 >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (r < n && !os.IsPathSeparator(path.charCodeAt(r))) {
					out.append(path.charCodeAt(r));
					r = r + 1 >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	ToSlash = go$pkg.ToSlash = function(path) {
		return path;
		return strings.Replace(path, "/", "/", -1);
	};
	FromSlash = go$pkg.FromSlash = function(path) {
		return path;
		return strings.Replace(path, "/", "/", -1);
	};
	SplitList = go$pkg.SplitList = function(path) {
		return splitList(path);
	};
	Split = go$pkg.Split = function(path) {
		var dir, file, vol, i, _tuple;
		dir = "";
		file = "";
		vol = VolumeName(path);
		i = path.length - 1 >> 0;
		while (i >= vol.length && !os.IsPathSeparator(path.charCodeAt(i))) {
			i = i - 1 >> 0;
		}
		_tuple = [path.substring(0, (i + 1 >> 0)), path.substring((i + 1 >> 0))], dir = _tuple[0], file = _tuple[1];
		return [dir, file];
	};
	Join = go$pkg.Join = function(elem) {
		var _ref, _i, _slice, _index, e, i;
		_ref = elem;
		_i = 0;
		while (_i < _ref.length) {
			e = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (!(e === "")) {
				return Clean(strings.Join(go$subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	EvalSymlinks = go$pkg.EvalSymlinks = function(path) {
		return evalSymlinks(path);
	};
	VolumeName = go$pkg.VolumeName = function(path) {
		var v;
		v = "";
		v = path.substring(0, volumeNameLen(path));
		return v;
	};
	IsAbs = go$pkg.IsAbs = function(path) {
		return strings.HasPrefix(path, "/");
	};
	volumeNameLen = function(path) {
		return 0;
	};
	splitList = function(path) {
		if (path === "") {
			return new (go$sliceType(Go$String))([]);
		}
		return strings.Split(path, ":");
	};
	evalSymlinks = function(path) {
		var originalPath, b, n, i, p, _tuple, _tuple$1, _tuple$2, fi, err, _tuple$3, dest;
		originalPath = path;
		b = new bytes.Buffer.Ptr();
		n = 0;
		while (!(path === "")) {
			if (n > 255) {
				return ["", errors.New("EvalSymlinks: too many links in " + originalPath)];
			}
			i = strings.IndexRune(path, 47);
			p = "";
			if (i === -1) {
				_tuple = [path, ""], p = _tuple[0], path = _tuple[1];
			} else {
				_tuple$1 = [path.substring(0, i), path.substring((i + 1 >> 0))], p = _tuple$1[0], path = _tuple$1[1];
			}
			if (p === "") {
				if (b.Len() === 0) {
					b.WriteRune(47);
				}
				n = n + 1 >> 0;
				continue;
			}
			_tuple$2 = os.Lstat(b.String() + p), fi = _tuple$2[0], err = _tuple$2[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return ["", err];
			}
			if (((fi.Mode() & 134217728) >>> 0) === 0) {
				b.WriteString(p);
				if (!(path === "")) {
					b.WriteRune(47);
				}
				n = n + 1 >> 0;
				continue;
			}
			_tuple$3 = os.Readlink(b.String() + p), dest = _tuple$3[0], err = _tuple$3[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return ["", err];
			}
			if (IsAbs(dest)) {
				b.Reset();
			}
			path = dest + "/" + path;
			n = n + 1 >> 0;
		}
		return [Clean(b.String()), null];
	};
	go$pkg.init = function() {
		lazybuf.init([["path", "path/filepath", Go$String, ""], ["buf", "path/filepath", (go$sliceType(Go$Uint8)), ""], ["w", "path/filepath", Go$Int, ""], ["volAndPath", "path/filepath", Go$String, ""], ["volLen", "path/filepath", Go$Int, ""]]);
		(go$ptrType(lazybuf)).methods = [["append", "path/filepath", [Go$Uint8], [], false], ["index", "path/filepath", [Go$Int], [Go$Uint8], false], ["string", "path/filepath", [], [Go$String], false]];
		go$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		go$pkg.SkipDir = errors.New("skip this directory");
	}
	return go$pkg;
})();
go$packages["go/scanner"] = (function() {
	var go$pkg = {}, fmt = go$packages["fmt"], token = go$packages["go/token"], io = go$packages["io"], sort = go$packages["sort"], bytes = go$packages["bytes"], filepath = go$packages["path/filepath"], strconv = go$packages["strconv"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], Error, ErrorList, ErrorHandler, Scanner, Mode, isLetter, isDigit, digitVal, stripCR, prefix;
	Error = go$pkg.Error = go$newType(0, "Struct", "scanner.Error", "Error", "go/scanner", function(Pos_, Msg_) {
		this.go$val = this;
		this.Pos = Pos_ !== undefined ? Pos_ : new token.Position.Ptr();
		this.Msg = Msg_ !== undefined ? Msg_ : "";
	});
	ErrorList = go$pkg.ErrorList = go$newType(0, "Slice", "scanner.ErrorList", "ErrorList", "go/scanner", null);
	ErrorHandler = go$pkg.ErrorHandler = go$newType(0, "Func", "scanner.ErrorHandler", "ErrorHandler", "go/scanner", null);
	Scanner = go$pkg.Scanner = go$newType(0, "Struct", "scanner.Scanner", "Scanner", "go/scanner", function(file_, dir_, src_, err_, mode_, ch_, offset_, rdOffset_, lineOffset_, insertSemi_, ErrorCount_) {
		this.go$val = this;
		this.file = file_ !== undefined ? file_ : (go$ptrType(token.File)).nil;
		this.dir = dir_ !== undefined ? dir_ : "";
		this.src = src_ !== undefined ? src_ : (go$sliceType(Go$Uint8)).nil;
		this.err = err_ !== undefined ? err_ : go$throwNilPointerError;
		this.mode = mode_ !== undefined ? mode_ : 0;
		this.ch = ch_ !== undefined ? ch_ : 0;
		this.offset = offset_ !== undefined ? offset_ : 0;
		this.rdOffset = rdOffset_ !== undefined ? rdOffset_ : 0;
		this.lineOffset = lineOffset_ !== undefined ? lineOffset_ : 0;
		this.insertSemi = insertSemi_ !== undefined ? insertSemi_ : false;
		this.ErrorCount = ErrorCount_ !== undefined ? ErrorCount_ : 0;
	});
	Mode = go$pkg.Mode = go$newType(4, "Uint", "scanner.Mode", "Mode", "go/scanner", null);
	Error.Ptr.prototype.Error = function() {
		var _struct, _struct$1, e;
		e = (_struct = this, new Error.Ptr((_struct$1 = _struct.Pos, new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column)), _struct.Msg));
		if (!(e.Pos.Filename === "") || e.Pos.IsValid()) {
			return e.Pos.String() + ": " + e.Msg;
		}
		return e.Msg;
	};
	Error.prototype.Error = function() { return this.go$val.Error(); };
	go$ptrType(ErrorList).prototype.Add = function(pos, msg) {
		var p, _struct;
		p = this;
		p.go$set(go$append(p.go$get(), new Error.Ptr((_struct = pos, new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)), msg)));
	};
	ErrorList.prototype.Add = function(pos, msg) { var obj = this; return (new (go$ptrType(ErrorList))(function() { return obj; }, null)).Add(pos, msg); };
	go$ptrType(ErrorList).prototype.Reset = function() {
		var p;
		p = this;
		p.go$set(go$subslice((p.go$get()), 0, 0));
	};
	ErrorList.prototype.Reset = function() { var obj = this; return (new (go$ptrType(ErrorList))(function() { return obj; }, null)).Reset(); };
	ErrorList.prototype.Len = function() {
		var p;
		p = this;
		return p.length;
	};
	go$ptrType(ErrorList).prototype.Len = function() { return this.go$get().Len(); };
	ErrorList.prototype.Swap = function(i, j) {
		var p, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		p = this;
		_tuple = [(_slice = p, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = p, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _slice$2 = p, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = p, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(ErrorList).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	ErrorList.prototype.Less = function(i, j) {
		var p, _slice, _index, e, _slice$1, _index$1, f;
		p = this;
		e = (_slice = p, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos;
		f = (_slice$1 = p, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Pos;
		if (e.Filename < f.Filename) {
			return true;
		}
		if (e.Filename === f.Filename) {
			if (e.Line < f.Line) {
				return true;
			}
			if (e.Line === f.Line) {
				return e.Column < f.Column;
			}
		}
		return false;
	};
	go$ptrType(ErrorList).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	ErrorList.prototype.Sort = function() {
		var p;
		p = this;
		sort.Sort(p);
	};
	go$ptrType(ErrorList).prototype.Sort = function() { return this.go$get().Sort(); };
	go$ptrType(ErrorList).prototype.RemoveMultiples = function() {
		var p, last, i, _ref, _i, _slice, _index, e, _struct, _slice$1, _index$1;
		p = this;
		sort.Sort(p);
		last = new token.Position.Ptr();
		i = 0;
		_ref = p.go$get();
		_i = 0;
		while (_i < _ref.length) {
			e = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!(e.Pos.Filename === last.Filename) || !((e.Pos.Line === last.Line))) {
				last = (_struct = e.Pos, new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
				_slice$1 = p.go$get(), _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = e) : go$throwRuntimeError("index out of range");
				i = i + 1 >> 0;
			}
			_i++;
		}
		p.go$set(go$subslice((p.go$get()), 0, i));
	};
	ErrorList.prototype.RemoveMultiples = function() { var obj = this; return (new (go$ptrType(ErrorList))(function() { return obj; }, null)).RemoveMultiples(); };
	ErrorList.prototype.Error = function() {
		var p, _ref, _slice, _index, _slice$1, _index$1;
		p = this;
		_ref = p.length;
		if (_ref === 0) {
			return "no errors";
		} else if (_ref === 1) {
			return (_slice = p, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Error();
		}
		return fmt.Sprintf("%s (and %d more errors)", new (go$sliceType(go$emptyInterface))([(_slice$1 = p, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new Go$Int((p.length - 1 >> 0))]));
	};
	go$ptrType(ErrorList).prototype.Error = function() { return this.go$get().Error(); };
	ErrorList.prototype.Err = function() {
		var p;
		p = this;
		if (p.length === 0) {
			return null;
		}
		return p;
	};
	go$ptrType(ErrorList).prototype.Err = function() { return this.go$get().Err(); };
	Scanner.Ptr.prototype.next = function() {
		var s, _slice, _index, _tuple, r, w, _tuple$1;
		s = this;
		if (s.rdOffset < s.src.length) {
			s.offset = s.rdOffset;
			if (s.ch === 10) {
				s.lineOffset = s.offset;
				s.file.AddLine(s.offset);
			}
			_tuple = [((_slice = s.src, _index = s.rdOffset, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0), 1], r = _tuple[0], w = _tuple[1];
			if (r === 0) {
				s.error(s.offset, "illegal character NUL");
			} else if (r >= 128) {
				_tuple$1 = utf8.DecodeRune(go$subslice(s.src, s.rdOffset)), r = _tuple$1[0], w = _tuple$1[1];
				if ((r === 65533) && (w === 1)) {
					s.error(s.offset, "illegal UTF-8 encoding");
				} else if ((r === 65279) && s.offset > 0) {
					s.error(s.offset, "illegal byte order mark");
				}
			}
			s.rdOffset = s.rdOffset + (w) >> 0;
			s.ch = r;
		} else {
			s.offset = s.src.length;
			if (s.ch === 10) {
				s.lineOffset = s.offset;
				s.file.AddLine(s.offset);
			}
			s.ch = -1;
		}
	};
	Scanner.prototype.next = function() { return this.go$val.next(); };
	Scanner.Ptr.prototype.Init = function(file, src, err, mode) {
		var s, _tuple;
		s = this;
		if (!((file.Size() === src.length))) {
			throw go$panic(new Go$String(fmt.Sprintf("file size (%d) does not match src len (%d)", new (go$sliceType(go$emptyInterface))([new Go$Int(file.Size()), new Go$Int(src.length)]))));
		}
		s.file = file;
		_tuple = filepath.Split(file.Name()), s.dir = _tuple[0];
		s.src = src;
		s.err = err;
		s.mode = mode;
		s.ch = 32;
		s.offset = 0;
		s.rdOffset = 0;
		s.lineOffset = 0;
		s.insertSemi = false;
		s.ErrorCount = 0;
		s.next();
		if (s.ch === 65279) {
			s.next();
		}
	};
	Scanner.prototype.Init = function(file, src, err, mode) { return this.go$val.Init(file, src, err, mode); };
	Scanner.Ptr.prototype.error = function(offs, msg) {
		var s, _struct;
		s = this;
		if (!(s.err === go$throwNilPointerError)) {
			s.err((_struct = s.file.Position(s.file.Pos(offs)), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)), msg);
		}
		s.ErrorCount = s.ErrorCount + 1 >> 0;
	};
	Scanner.prototype.error = function(offs, msg) { return this.go$val.error(offs, msg); };
	Scanner.Ptr.prototype.interpretLineComment = function(text) {
		var s, i, err, line, _tuple, filename;
		s = this;
		if (bytes.HasPrefix(text, prefix)) {
			if (i = bytes.LastIndex(text, new (go$sliceType(Go$Uint8))([58])), i > 0) {
				if (_tuple = strconv.Atoi(go$bytesToString(go$subslice(text, (i + 1 >> 0)))), line = _tuple[0], err = _tuple[1], go$interfaceIsEqual(err, null) && line > 0) {
					filename = filepath.Clean(go$bytesToString(go$subslice(text, prefix.length, i)));
					if (!filepath.IsAbs(filename)) {
						filename = filepath.Join(new (go$sliceType(Go$String))([s.dir, filename]));
					}
					s.file.AddLineInfo((s.lineOffset + text.length >> 0) + 1 >> 0, filename, line);
				}
			}
		}
	};
	Scanner.prototype.interpretLineComment = function(text) { return this.go$val.interpretLineComment(text); };
	Scanner.Ptr.prototype.scanComment = function() {
		var go$this = this, s, offs, hasCR, ch, lit;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		s = go$this;
		offs = s.offset - 1 >> 0;
		hasCR = false;
		/* if (s.ch === 47) { */ if (s.ch === 47) {} else { go$s = 2; continue; }
			s.next();
			while (!((s.ch === 10)) && s.ch >= 0) {
				if (s.ch === 13) {
					hasCR = true;
				}
				s.next();
			}
			if (offs === s.lineOffset) {
				s.interpretLineComment(go$subslice(s.src, offs, s.offset));
			}
			/* goto exit */ go$s = 1; continue;
		/* } */ case 2:
		s.next();
		/* while (s.ch >= 0) { */ case 3: if(!(s.ch >= 0)) { go$s = 4; continue; }
			ch = s.ch;
			if (ch === 13) {
				hasCR = true;
			}
			s.next();
			/* if ((ch === 42) && (s.ch === 47)) { */ if ((ch === 42) && (s.ch === 47)) {} else { go$s = 5; continue; }
				s.next();
				/* goto exit */ go$s = 1; continue;
			/* } */ case 5:
		/* } */ go$s = 3; continue; case 4:
		s.error(offs, "comment not terminated");
		/* exit: */ case 1:
		lit = go$subslice(s.src, offs, s.offset);
		if (hasCR) {
			lit = stripCR(lit);
		}
		return go$bytesToString(lit);
		/* */ } break; } }; return go$f();
	};
	Scanner.prototype.scanComment = function() { return this.go$val.scanComment(); };
	Scanner.Ptr.prototype.findLineEnd = function() {
		var s, ch;
		var go$deferred = [];
		try {
			s = this;
			go$deferred.push({ fun: (function(offs) {
				s.ch = 47;
				s.offset = offs;
				s.rdOffset = offs + 1 >> 0;
				s.next();
			}), args: [s.offset - 1 >> 0] });
			while ((s.ch === 47) || (s.ch === 42)) {
				if (s.ch === 47) {
					return true;
				}
				s.next();
				while (s.ch >= 0) {
					ch = s.ch;
					if (ch === 10) {
						return true;
					}
					s.next();
					if ((ch === 42) && (s.ch === 47)) {
						s.next();
						break;
					}
				}
				s.skipWhitespace();
				if (s.ch < 0 || (s.ch === 10)) {
					return true;
				}
				if (!((s.ch === 47))) {
					return false;
				}
				s.next();
			}
			return false;
		} catch(go$err) {
			go$pushErr(go$err);
			return false;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Scanner.prototype.findLineEnd = function() { return this.go$val.findLineEnd(); };
	isLetter = function(ch) {
		return 97 <= ch && ch <= 122 || 65 <= ch && ch <= 90 || (ch === 95) || ch >= 128 && unicode.IsLetter(ch);
	};
	isDigit = function(ch) {
		return 48 <= ch && ch <= 57 || ch >= 128 && unicode.IsDigit(ch);
	};
	Scanner.Ptr.prototype.scanIdentifier = function() {
		var s, offs;
		s = this;
		offs = s.offset;
		while (isLetter(s.ch) || isDigit(s.ch)) {
			s.next();
		}
		return go$bytesToString(go$subslice(s.src, offs, s.offset));
	};
	Scanner.prototype.scanIdentifier = function() { return this.go$val.scanIdentifier(); };
	digitVal = function(ch) {
		if (48 <= ch && ch <= 57) {
			return ((ch - 48 >> 0) >> 0);
		} else if (97 <= ch && ch <= 102) {
			return (((ch - 97 >> 0) + 10 >> 0) >> 0);
		} else if (65 <= ch && ch <= 70) {
			return (((ch - 65 >> 0) + 10 >> 0) >> 0);
		}
		return 16;
	};
	Scanner.Ptr.prototype.scanMantissa = function(base) {
		var s;
		s = this;
		while (digitVal(s.ch) < base) {
			s.next();
		}
	};
	Scanner.prototype.scanMantissa = function(base) { return this.go$val.scanMantissa(base); };
	Scanner.Ptr.prototype.scanNumber = function(seenDecimalPoint) {
		var go$this = this, s, offs, tok, offs$1, seenDecimalDigit;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		s = go$this;
		offs = s.offset;
		tok = 5;
		/* if (seenDecimalPoint) { */ if (seenDecimalPoint) {} else { go$s = 4; continue; }
			offs = offs - 1 >> 0;
			tok = 6;
			s.scanMantissa(10);
			/* goto exponent */ go$s = 1; continue;
		/* } */ case 4:
		/* if (s.ch === 48) { */ if (s.ch === 48) {} else { go$s = 5; continue; }
			offs$1 = s.offset;
			s.next();
			/* if ((s.ch === 120) || (s.ch === 88)) { */ if ((s.ch === 120) || (s.ch === 88)) {} else { go$s = 6; continue; }
				s.next();
				s.scanMantissa(16);
				if ((s.offset - offs$1 >> 0) <= 2) {
					s.error(offs$1, "illegal hexadecimal number");
				}
			/* } else { */ go$s = 7; continue; case 6: 
				seenDecimalDigit = false;
				s.scanMantissa(8);
				if ((s.ch === 56) || (s.ch === 57)) {
					seenDecimalDigit = true;
					s.scanMantissa(10);
				}
				/* if ((s.ch === 46) || (s.ch === 101) || (s.ch === 69) || (s.ch === 105)) { */ if ((s.ch === 46) || (s.ch === 101) || (s.ch === 69) || (s.ch === 105)) {} else { go$s = 8; continue; }
					/* goto fraction */ go$s = 2; continue;
				/* } */ case 8:
				if (seenDecimalDigit) {
					s.error(offs$1, "illegal octal number");
				}
			/* } */ case 7:
			/* goto exit */ go$s = 3; continue;
		/* } */ case 5:
		s.scanMantissa(10);
		/* fraction: */ case 2:
		/* if (s.ch === 46) { */ if (s.ch === 46) {} else { go$s = 9; continue; }
			tok = 6;
			s.next();
			s.scanMantissa(10);
		/* } */ case 9:
		/* exponent: */ case 1:
		/* if ((s.ch === 101) || (s.ch === 69)) { */ if ((s.ch === 101) || (s.ch === 69)) {} else { go$s = 10; continue; }
			tok = 6;
			s.next();
			if ((s.ch === 45) || (s.ch === 43)) {
				s.next();
			}
			s.scanMantissa(10);
		/* } */ case 10:
		if (s.ch === 105) {
			tok = 7;
			s.next();
		}
		/* exit: */ case 3:
		return [tok, go$bytesToString(go$subslice(s.src, offs, s.offset))];
		/* */ } break; } }; return go$f();
	};
	Scanner.prototype.scanNumber = function(seenDecimalPoint) { return this.go$val.scanNumber(seenDecimalPoint); };
	Scanner.Ptr.prototype.scanEscape = function(quote) {
		var s, offs, _tuple, i, base, max, _ref, _tuple$1, _tuple$2, _tuple$3, _tuple$4, x, d;
		s = this;
		offs = s.offset;
		_tuple = [0, 0, 0], i = _tuple[0], base = _tuple[1], max = _tuple[2];
		_ref = s.ch;
		if (_ref === 97 || _ref === 98 || _ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 118 || _ref === 92 || _ref === quote) {
			s.next();
			return;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			_tuple$1 = [3, 8, 255], i = _tuple$1[0], base = _tuple$1[1], max = _tuple$1[2];
		} else if (_ref === 120) {
			s.next();
			_tuple$2 = [2, 16, 255], i = _tuple$2[0], base = _tuple$2[1], max = _tuple$2[2];
		} else if (_ref === 117) {
			s.next();
			_tuple$3 = [4, 16, 1114111], i = _tuple$3[0], base = _tuple$3[1], max = _tuple$3[2];
		} else if (_ref === 85) {
			s.next();
			_tuple$4 = [8, 16, 1114111], i = _tuple$4[0], base = _tuple$4[1], max = _tuple$4[2];
		} else {
			s.next();
			s.error(offs, "unknown escape sequence");
			return;
		}
		x = 0;
		while (i > 0 && !((s.ch === quote)) && s.ch >= 0) {
			d = (digitVal(s.ch) >>> 0);
			if (d >= base) {
				s.error(s.offset, "illegal character in escape sequence");
				break;
			}
			x = ((((x >>> 16 << 16) * base >>> 0) + (x << 16 >>> 16) * base) >>> 0) + d >>> 0;
			s.next();
			i = i - 1 >>> 0;
		}
		while (i > 0 && !((s.ch === quote)) && s.ch >= 0) {
			s.next();
			i = i - 1 >>> 0;
		}
		if (x > max || 55296 <= x && x < 57344) {
			s.error(offs, "escape sequence is invalid Unicode code point");
		}
	};
	Scanner.prototype.scanEscape = function(quote) { return this.go$val.scanEscape(quote); };
	Scanner.Ptr.prototype.scanChar = function() {
		var s, offs, n, ch;
		s = this;
		offs = s.offset - 1 >> 0;
		n = 0;
		while (!((s.ch === 39))) {
			ch = s.ch;
			n = n + 1 >> 0;
			s.next();
			if ((ch === 10) || ch < 0) {
				s.error(offs, "character literal not terminated");
				n = 1;
				break;
			}
			if (ch === 92) {
				s.scanEscape(39);
			}
		}
		s.next();
		if (!((n === 1))) {
			s.error(offs, "illegal character literal");
		}
		return go$bytesToString(go$subslice(s.src, offs, s.offset));
	};
	Scanner.prototype.scanChar = function() { return this.go$val.scanChar(); };
	Scanner.Ptr.prototype.scanString = function() {
		var s, offs, ch;
		s = this;
		offs = s.offset - 1 >> 0;
		while (!((s.ch === 34))) {
			ch = s.ch;
			s.next();
			if ((ch === 10) || ch < 0) {
				s.error(offs, "string not terminated");
				break;
			}
			if (ch === 92) {
				s.scanEscape(34);
			}
		}
		s.next();
		return go$bytesToString(go$subslice(s.src, offs, s.offset));
	};
	Scanner.prototype.scanString = function() { return this.go$val.scanString(); };
	stripCR = function(b) {
		var c, i, _ref, _i, _slice, _index, ch, _slice$1, _index$1;
		c = (go$sliceType(Go$Uint8)).make(b.length, 0, function() { return 0; });
		i = 0;
		_ref = b;
		_i = 0;
		while (_i < _ref.length) {
			ch = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!((ch === 13))) {
				_slice$1 = c, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = ch) : go$throwRuntimeError("index out of range");
				i = i + 1 >> 0;
			}
			_i++;
		}
		return go$subslice(c, 0, i);
	};
	Scanner.Ptr.prototype.scanRawString = function() {
		var s, offs, hasCR, ch, lit;
		s = this;
		offs = s.offset - 1 >> 0;
		hasCR = false;
		while (!((s.ch === 96))) {
			ch = s.ch;
			s.next();
			if (ch === 13) {
				hasCR = true;
			}
			if (ch < 0) {
				s.error(offs, "string not terminated");
				break;
			}
		}
		s.next();
		lit = go$subslice(s.src, offs, s.offset);
		if (hasCR) {
			lit = stripCR(lit);
		}
		return go$bytesToString(lit);
	};
	Scanner.prototype.scanRawString = function() { return this.go$val.scanRawString(); };
	Scanner.Ptr.prototype.skipWhitespace = function() {
		var s;
		s = this;
		while ((s.ch === 32) || (s.ch === 9) || (s.ch === 10) && !s.insertSemi || (s.ch === 13)) {
			s.next();
		}
	};
	Scanner.prototype.skipWhitespace = function() { return this.go$val.skipWhitespace(); };
	Scanner.Ptr.prototype.switch2 = function(tok0, tok1) {
		var s;
		s = this;
		if (s.ch === 61) {
			s.next();
			return tok1;
		}
		return tok0;
	};
	Scanner.prototype.switch2 = function(tok0, tok1) { return this.go$val.switch2(tok0, tok1); };
	Scanner.Ptr.prototype.switch3 = function(tok0, tok1, ch2, tok2) {
		var s;
		s = this;
		if (s.ch === 61) {
			s.next();
			return tok1;
		}
		if (s.ch === ch2) {
			s.next();
			return tok2;
		}
		return tok0;
	};
	Scanner.prototype.switch3 = function(tok0, tok1, ch2, tok2) { return this.go$val.switch3(tok0, tok1, ch2, tok2); };
	Scanner.Ptr.prototype.switch4 = function(tok0, tok1, ch2, tok2, tok3) {
		var s;
		s = this;
		if (s.ch === 61) {
			s.next();
			return tok1;
		}
		if (s.ch === ch2) {
			s.next();
			if (s.ch === 61) {
				s.next();
				return tok3;
			}
			return tok2;
		}
		return tok0;
	};
	Scanner.prototype.switch4 = function(tok0, tok1, ch2, tok2, tok3) { return this.go$val.switch4(tok0, tok1, ch2, tok2, tok3); };
	Scanner.Ptr.prototype.Scan = function() {
		var go$this = this, pos, tok, lit, s, insertSemi, ch, _ref, _tuple, _ref$1, _tuple$1, _tuple$2, _tuple$3, _tuple$4;
		pos = 0;
		tok = 0;
		lit = "";
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		s = go$this;
		/* scanAgain: */ case 1:
		s.skipWhitespace();
		pos = s.file.Pos(s.offset);
		insertSemi = false;
		ch = s.ch;
		/* if (isLetter(ch)) { */ if (isLetter(ch)) {} else if (48 <= ch && ch <= 57) { go$s = 2; continue; } else { go$s = 3; continue; }
			lit = s.scanIdentifier();
			if (lit.length > 1) {
				tok = token.Lookup(lit);
				_ref = tok;
				if (_ref === 4 || _ref === 61 || _ref === 65 || _ref === 69 || _ref === 80) {
					insertSemi = true;
				}
			} else {
				insertSemi = true;
				tok = 4;
			}
		/* } else if (48 <= ch && ch <= 57) { */ go$s = 4; continue; case 2: 
			insertSemi = true;
			_tuple = s.scanNumber(false), tok = _tuple[0], lit = _tuple[1];
		/* } else { */ go$s = 4; continue; case 3: 
			s.next();
			_ref$1 = ch;
			/* if (_ref$1 === -1) { */ if (_ref$1 === -1) {} else if (_ref$1 === 10) { go$s = 5; continue; } else if (_ref$1 === 34) { go$s = 6; continue; } else if (_ref$1 === 39) { go$s = 7; continue; } else if (_ref$1 === 96) { go$s = 8; continue; } else if (_ref$1 === 58) { go$s = 9; continue; } else if (_ref$1 === 46) { go$s = 10; continue; } else if (_ref$1 === 44) { go$s = 11; continue; } else if (_ref$1 === 59) { go$s = 12; continue; } else if (_ref$1 === 40) { go$s = 13; continue; } else if (_ref$1 === 41) { go$s = 14; continue; } else if (_ref$1 === 91) { go$s = 15; continue; } else if (_ref$1 === 93) { go$s = 16; continue; } else if (_ref$1 === 123) { go$s = 17; continue; } else if (_ref$1 === 125) { go$s = 18; continue; } else if (_ref$1 === 43) { go$s = 19; continue; } else if (_ref$1 === 45) { go$s = 20; continue; } else if (_ref$1 === 42) { go$s = 21; continue; } else if (_ref$1 === 47) { go$s = 22; continue; } else if (_ref$1 === 37) { go$s = 23; continue; } else if (_ref$1 === 94) { go$s = 24; continue; } else if (_ref$1 === 60) { go$s = 25; continue; } else if (_ref$1 === 62) { go$s = 26; continue; } else if (_ref$1 === 61) { go$s = 27; continue; } else if (_ref$1 === 33) { go$s = 28; continue; } else if (_ref$1 === 38) { go$s = 29; continue; } else if (_ref$1 === 124) { go$s = 30; continue; } else { go$s = 31; continue; }
				if (s.insertSemi) {
					s.insertSemi = false;
					_tuple$1 = [pos, 57, "\n"], pos = _tuple$1[0], tok = _tuple$1[1], lit = _tuple$1[2];
					return [pos, tok, lit];
				}
				tok = 1;
			/* } else if (_ref$1 === 10) { */ go$s = 32; continue; case 5: 
				s.insertSemi = false;
				_tuple$2 = [pos, 57, "\n"], pos = _tuple$2[0], tok = _tuple$2[1], lit = _tuple$2[2];
				return [pos, tok, lit];
			/* } else if (_ref$1 === 34) { */ go$s = 32; continue; case 6: 
				insertSemi = true;
				tok = 9;
				lit = s.scanString();
			/* } else if (_ref$1 === 39) { */ go$s = 32; continue; case 7: 
				insertSemi = true;
				tok = 8;
				lit = s.scanChar();
			/* } else if (_ref$1 === 96) { */ go$s = 32; continue; case 8: 
				insertSemi = true;
				tok = 9;
				lit = s.scanRawString();
			/* } else if (_ref$1 === 58) { */ go$s = 32; continue; case 9: 
				tok = s.switch2(58, 47);
			/* } else if (_ref$1 === 46) { */ go$s = 32; continue; case 10: 
				if (48 <= s.ch && s.ch <= 57) {
					insertSemi = true;
					_tuple$3 = s.scanNumber(true), tok = _tuple$3[0], lit = _tuple$3[1];
				} else if (s.ch === 46) {
					s.next();
					if (s.ch === 46) {
						s.next();
						tok = 48;
					}
				} else {
					tok = 53;
				}
			/* } else if (_ref$1 === 44) { */ go$s = 32; continue; case 11: 
				tok = 52;
			/* } else if (_ref$1 === 59) { */ go$s = 32; continue; case 12: 
				tok = 57;
				lit = ";";
			/* } else if (_ref$1 === 40) { */ go$s = 32; continue; case 13: 
				tok = 49;
			/* } else if (_ref$1 === 41) { */ go$s = 32; continue; case 14: 
				insertSemi = true;
				tok = 54;
			/* } else if (_ref$1 === 91) { */ go$s = 32; continue; case 15: 
				tok = 50;
			/* } else if (_ref$1 === 93) { */ go$s = 32; continue; case 16: 
				insertSemi = true;
				tok = 55;
			/* } else if (_ref$1 === 123) { */ go$s = 32; continue; case 17: 
				tok = 51;
			/* } else if (_ref$1 === 125) { */ go$s = 32; continue; case 18: 
				insertSemi = true;
				tok = 56;
			/* } else if (_ref$1 === 43) { */ go$s = 32; continue; case 19: 
				tok = s.switch3(12, 23, 43, 37);
				if (tok === 37) {
					insertSemi = true;
				}
			/* } else if (_ref$1 === 45) { */ go$s = 32; continue; case 20: 
				tok = s.switch3(13, 24, 45, 38);
				if (tok === 38) {
					insertSemi = true;
				}
			/* } else if (_ref$1 === 42) { */ go$s = 32; continue; case 21: 
				tok = s.switch2(14, 25);
			/* } else if (_ref$1 === 47) { */ go$s = 32; continue; case 22: 
				/* if ((s.ch === 47) || (s.ch === 42)) { */ if ((s.ch === 47) || (s.ch === 42)) {} else { go$s = 33; continue; }
					if (s.insertSemi && s.findLineEnd()) {
						s.ch = 47;
						s.offset = s.file.Offset(pos);
						s.rdOffset = s.offset + 1 >> 0;
						s.insertSemi = false;
						_tuple$4 = [pos, 57, "\n"], pos = _tuple$4[0], tok = _tuple$4[1], lit = _tuple$4[2];
						return [pos, tok, lit];
					}
					lit = s.scanComment();
					/* if (((s.mode & 1) >>> 0) === 0) { */ if (((s.mode & 1) >>> 0) === 0) {} else { go$s = 35; continue; }
						s.insertSemi = false;
						/* goto scanAgain */ go$s = 1; continue;
					/* } */ case 35:
					tok = 2;
				/* } else { */ go$s = 34; continue; case 33: 
					tok = s.switch2(15, 26);
				/* } */ case 34:
			/* } else if (_ref$1 === 37) { */ go$s = 32; continue; case 23: 
				tok = s.switch2(16, 27);
			/* } else if (_ref$1 === 94) { */ go$s = 32; continue; case 24: 
				tok = s.switch2(19, 30);
			/* } else if (_ref$1 === 60) { */ go$s = 32; continue; case 25: 
				if (s.ch === 45) {
					s.next();
					tok = 36;
				} else {
					tok = s.switch4(40, 45, 60, 20, 31);
				}
			/* } else if (_ref$1 === 62) { */ go$s = 32; continue; case 26: 
				tok = s.switch4(41, 46, 62, 21, 32);
			/* } else if (_ref$1 === 61) { */ go$s = 32; continue; case 27: 
				tok = s.switch2(42, 39);
			/* } else if (_ref$1 === 33) { */ go$s = 32; continue; case 28: 
				tok = s.switch2(43, 44);
			/* } else if (_ref$1 === 38) { */ go$s = 32; continue; case 29: 
				if (s.ch === 94) {
					s.next();
					tok = s.switch2(22, 33);
				} else {
					tok = s.switch3(17, 28, 38, 34);
				}
			/* } else if (_ref$1 === 124) { */ go$s = 32; continue; case 30: 
				tok = s.switch3(18, 29, 124, 35);
			/* } else { */ go$s = 32; continue; case 31: 
				if (!((ch === 65279))) {
					s.error(s.file.Offset(pos), fmt.Sprintf("illegal character %#U", new (go$sliceType(go$emptyInterface))([new Go$Int32(ch)])));
				}
				insertSemi = s.insertSemi;
				tok = 0;
				lit = go$encodeRune(ch);
			/* } */ case 32:
		/* } */ case 4:
		if (((s.mode & 2) >>> 0) === 0) {
			s.insertSemi = insertSemi;
		}
		return [pos, tok, lit];
		/* */ } break; } }; return go$f();
	};
	Scanner.prototype.Scan = function() { return this.go$val.Scan(); };
	go$pkg.init = function() {
		Error.init([["Pos", "", token.Position, ""], ["Msg", "", Go$String, ""]]);
		Error.methods = [["Error", "", [], [Go$String], false]];
		(go$ptrType(Error)).methods = [["Error", "", [], [Go$String], false]];
		ErrorList.init((go$ptrType(Error)));
		ErrorList.methods = [["Err", "", [], [go$error], false], ["Error", "", [], [Go$String], false], ["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Sort", "", [], [], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(ErrorList)).methods = [["Add", "", [token.Position, Go$String], [], false], ["Err", "", [], [go$error], false], ["Error", "", [], [Go$String], false], ["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["RemoveMultiples", "", [], [], false], ["Reset", "", [], [], false], ["Sort", "", [], [], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		ErrorHandler.init([token.Position, Go$String], [], false);
		Scanner.init([["file", "go/scanner", (go$ptrType(token.File)), ""], ["dir", "go/scanner", Go$String, ""], ["src", "go/scanner", (go$sliceType(Go$Uint8)), ""], ["err", "go/scanner", ErrorHandler, ""], ["mode", "go/scanner", Mode, ""], ["ch", "go/scanner", Go$Int32, ""], ["offset", "go/scanner", Go$Int, ""], ["rdOffset", "go/scanner", Go$Int, ""], ["lineOffset", "go/scanner", Go$Int, ""], ["insertSemi", "go/scanner", Go$Bool, ""], ["ErrorCount", "", Go$Int, ""]]);
		(go$ptrType(Scanner)).methods = [["Init", "", [(go$ptrType(token.File)), (go$sliceType(Go$Uint8)), ErrorHandler, Mode], [], false], ["Scan", "", [], [token.Pos, token.Token, Go$String], false], ["error", "go/scanner", [Go$Int, Go$String], [], false], ["findLineEnd", "go/scanner", [], [Go$Bool], false], ["interpretLineComment", "go/scanner", [(go$sliceType(Go$Uint8))], [], false], ["next", "go/scanner", [], [], false], ["scanChar", "go/scanner", [], [Go$String], false], ["scanComment", "go/scanner", [], [Go$String], false], ["scanEscape", "go/scanner", [Go$Int32], [], false], ["scanIdentifier", "go/scanner", [], [Go$String], false], ["scanMantissa", "go/scanner", [Go$Int], [], false], ["scanNumber", "go/scanner", [Go$Bool], [token.Token, Go$String], false], ["scanRawString", "go/scanner", [], [Go$String], false], ["scanString", "go/scanner", [], [Go$String], false], ["skipWhitespace", "go/scanner", [], [], false], ["switch2", "go/scanner", [token.Token, token.Token], [token.Token], false], ["switch3", "go/scanner", [token.Token, token.Token, Go$Int32, token.Token], [token.Token], false], ["switch4", "go/scanner", [token.Token, token.Token, Go$Int32, token.Token, token.Token], [token.Token], false]];
		prefix = new (go$sliceType(Go$Uint8))(go$stringToBytes("//line "));
	}
	return go$pkg;
})();
go$packages["go/ast"] = (function() {
	var go$pkg = {}, token = go$packages["go/token"], strings = go$packages["strings"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], bytes = go$packages["bytes"], fmt = go$packages["fmt"], sort = go$packages["sort"], strconv = go$packages["strconv"], io = go$packages["io"], os = go$packages["os"], reflect = go$packages["reflect"], scanner = go$packages["go/scanner"], Node, Expr, Stmt, Decl, Comment, CommentGroup, Field, FieldList, BadExpr, Ident, Ellipsis, BasicLit, FuncLit, CompositeLit, ParenExpr, SelectorExpr, IndexExpr, SliceExpr, TypeAssertExpr, CallExpr, StarExpr, UnaryExpr, BinaryExpr, KeyValueExpr, ChanDir, ArrayType, StructType, FuncType, InterfaceType, MapType, ChanType, BadStmt, DeclStmt, EmptyStmt, LabeledStmt, ExprStmt, SendStmt, IncDecStmt, AssignStmt, GoStmt, DeferStmt, ReturnStmt, BranchStmt, BlockStmt, IfStmt, CaseClause, SwitchStmt, TypeSwitchStmt, CommClause, SelectStmt, ForStmt, RangeStmt, Spec, ImportSpec, ValueSpec, TypeSpec, BadDecl, GenDecl, FuncDecl, File, Package, posSpan, byImportSpec, byCommentPos, Scope, Object, ObjKind, Visitor, inspector, isWhitespace, stripTrailingWhitespace, NewIdent, IsExported, SortImports, importPath, importName, importComment, collapse, sortSpecs, NewScope, NewObj, walkIdentList, walkExprList, walkStmtList, walkDeclList, Walk, Inspect, objKindStrings;
	Node = go$pkg.Node = go$newType(0, "Interface", "ast.Node", "Node", "go/ast", null);
	Expr = go$pkg.Expr = go$newType(0, "Interface", "ast.Expr", "Expr", "go/ast", null);
	Stmt = go$pkg.Stmt = go$newType(0, "Interface", "ast.Stmt", "Stmt", "go/ast", null);
	Decl = go$pkg.Decl = go$newType(0, "Interface", "ast.Decl", "Decl", "go/ast", null);
	Comment = go$pkg.Comment = go$newType(0, "Struct", "ast.Comment", "Comment", "go/ast", function(Slash_, Text_) {
		this.go$val = this;
		this.Slash = Slash_ !== undefined ? Slash_ : 0;
		this.Text = Text_ !== undefined ? Text_ : "";
	});
	CommentGroup = go$pkg.CommentGroup = go$newType(0, "Struct", "ast.CommentGroup", "CommentGroup", "go/ast", function(List_) {
		this.go$val = this;
		this.List = List_ !== undefined ? List_ : (go$sliceType((go$ptrType(Comment)))).nil;
	});
	Field = go$pkg.Field = go$newType(0, "Struct", "ast.Field", "Field", "go/ast", function(Doc_, Names_, Type_, Tag_, Comment_) {
		this.go$val = this;
		this.Doc = Doc_ !== undefined ? Doc_ : (go$ptrType(CommentGroup)).nil;
		this.Names = Names_ !== undefined ? Names_ : (go$sliceType((go$ptrType(Ident)))).nil;
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Tag = Tag_ !== undefined ? Tag_ : (go$ptrType(BasicLit)).nil;
		this.Comment = Comment_ !== undefined ? Comment_ : (go$ptrType(CommentGroup)).nil;
	});
	FieldList = go$pkg.FieldList = go$newType(0, "Struct", "ast.FieldList", "FieldList", "go/ast", function(Opening_, List_, Closing_) {
		this.go$val = this;
		this.Opening = Opening_ !== undefined ? Opening_ : 0;
		this.List = List_ !== undefined ? List_ : (go$sliceType((go$ptrType(Field)))).nil;
		this.Closing = Closing_ !== undefined ? Closing_ : 0;
	});
	BadExpr = go$pkg.BadExpr = go$newType(0, "Struct", "ast.BadExpr", "BadExpr", "go/ast", function(From_, To_) {
		this.go$val = this;
		this.From = From_ !== undefined ? From_ : 0;
		this.To = To_ !== undefined ? To_ : 0;
	});
	Ident = go$pkg.Ident = go$newType(0, "Struct", "ast.Ident", "Ident", "go/ast", function(NamePos_, Name_, Obj_) {
		this.go$val = this;
		this.NamePos = NamePos_ !== undefined ? NamePos_ : 0;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Obj = Obj_ !== undefined ? Obj_ : (go$ptrType(Object)).nil;
	});
	Ellipsis = go$pkg.Ellipsis = go$newType(0, "Struct", "ast.Ellipsis", "Ellipsis", "go/ast", function(Ellipsis_, Elt_) {
		this.go$val = this;
		this.Ellipsis = Ellipsis_ !== undefined ? Ellipsis_ : 0;
		this.Elt = Elt_ !== undefined ? Elt_ : null;
	});
	BasicLit = go$pkg.BasicLit = go$newType(0, "Struct", "ast.BasicLit", "BasicLit", "go/ast", function(ValuePos_, Kind_, Value_) {
		this.go$val = this;
		this.ValuePos = ValuePos_ !== undefined ? ValuePos_ : 0;
		this.Kind = Kind_ !== undefined ? Kind_ : 0;
		this.Value = Value_ !== undefined ? Value_ : "";
	});
	FuncLit = go$pkg.FuncLit = go$newType(0, "Struct", "ast.FuncLit", "FuncLit", "go/ast", function(Type_, Body_) {
		this.go$val = this;
		this.Type = Type_ !== undefined ? Type_ : (go$ptrType(FuncType)).nil;
		this.Body = Body_ !== undefined ? Body_ : (go$ptrType(BlockStmt)).nil;
	});
	CompositeLit = go$pkg.CompositeLit = go$newType(0, "Struct", "ast.CompositeLit", "CompositeLit", "go/ast", function(Type_, Lbrace_, Elts_, Rbrace_) {
		this.go$val = this;
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Lbrace = Lbrace_ !== undefined ? Lbrace_ : 0;
		this.Elts = Elts_ !== undefined ? Elts_ : (go$sliceType(Expr)).nil;
		this.Rbrace = Rbrace_ !== undefined ? Rbrace_ : 0;
	});
	ParenExpr = go$pkg.ParenExpr = go$newType(0, "Struct", "ast.ParenExpr", "ParenExpr", "go/ast", function(Lparen_, X_, Rparen_) {
		this.go$val = this;
		this.Lparen = Lparen_ !== undefined ? Lparen_ : 0;
		this.X = X_ !== undefined ? X_ : null;
		this.Rparen = Rparen_ !== undefined ? Rparen_ : 0;
	});
	SelectorExpr = go$pkg.SelectorExpr = go$newType(0, "Struct", "ast.SelectorExpr", "SelectorExpr", "go/ast", function(X_, Sel_) {
		this.go$val = this;
		this.X = X_ !== undefined ? X_ : null;
		this.Sel = Sel_ !== undefined ? Sel_ : (go$ptrType(Ident)).nil;
	});
	IndexExpr = go$pkg.IndexExpr = go$newType(0, "Struct", "ast.IndexExpr", "IndexExpr", "go/ast", function(X_, Lbrack_, Index_, Rbrack_) {
		this.go$val = this;
		this.X = X_ !== undefined ? X_ : null;
		this.Lbrack = Lbrack_ !== undefined ? Lbrack_ : 0;
		this.Index = Index_ !== undefined ? Index_ : null;
		this.Rbrack = Rbrack_ !== undefined ? Rbrack_ : 0;
	});
	SliceExpr = go$pkg.SliceExpr = go$newType(0, "Struct", "ast.SliceExpr", "SliceExpr", "go/ast", function(X_, Lbrack_, Low_, High_, Max_, Slice3_, Rbrack_) {
		this.go$val = this;
		this.X = X_ !== undefined ? X_ : null;
		this.Lbrack = Lbrack_ !== undefined ? Lbrack_ : 0;
		this.Low = Low_ !== undefined ? Low_ : null;
		this.High = High_ !== undefined ? High_ : null;
		this.Max = Max_ !== undefined ? Max_ : null;
		this.Slice3 = Slice3_ !== undefined ? Slice3_ : false;
		this.Rbrack = Rbrack_ !== undefined ? Rbrack_ : 0;
	});
	TypeAssertExpr = go$pkg.TypeAssertExpr = go$newType(0, "Struct", "ast.TypeAssertExpr", "TypeAssertExpr", "go/ast", function(X_, Lparen_, Type_, Rparen_) {
		this.go$val = this;
		this.X = X_ !== undefined ? X_ : null;
		this.Lparen = Lparen_ !== undefined ? Lparen_ : 0;
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Rparen = Rparen_ !== undefined ? Rparen_ : 0;
	});
	CallExpr = go$pkg.CallExpr = go$newType(0, "Struct", "ast.CallExpr", "CallExpr", "go/ast", function(Fun_, Lparen_, Args_, Ellipsis_, Rparen_) {
		this.go$val = this;
		this.Fun = Fun_ !== undefined ? Fun_ : null;
		this.Lparen = Lparen_ !== undefined ? Lparen_ : 0;
		this.Args = Args_ !== undefined ? Args_ : (go$sliceType(Expr)).nil;
		this.Ellipsis = Ellipsis_ !== undefined ? Ellipsis_ : 0;
		this.Rparen = Rparen_ !== undefined ? Rparen_ : 0;
	});
	StarExpr = go$pkg.StarExpr = go$newType(0, "Struct", "ast.StarExpr", "StarExpr", "go/ast", function(Star_, X_) {
		this.go$val = this;
		this.Star = Star_ !== undefined ? Star_ : 0;
		this.X = X_ !== undefined ? X_ : null;
	});
	UnaryExpr = go$pkg.UnaryExpr = go$newType(0, "Struct", "ast.UnaryExpr", "UnaryExpr", "go/ast", function(OpPos_, Op_, X_) {
		this.go$val = this;
		this.OpPos = OpPos_ !== undefined ? OpPos_ : 0;
		this.Op = Op_ !== undefined ? Op_ : 0;
		this.X = X_ !== undefined ? X_ : null;
	});
	BinaryExpr = go$pkg.BinaryExpr = go$newType(0, "Struct", "ast.BinaryExpr", "BinaryExpr", "go/ast", function(X_, OpPos_, Op_, Y_) {
		this.go$val = this;
		this.X = X_ !== undefined ? X_ : null;
		this.OpPos = OpPos_ !== undefined ? OpPos_ : 0;
		this.Op = Op_ !== undefined ? Op_ : 0;
		this.Y = Y_ !== undefined ? Y_ : null;
	});
	KeyValueExpr = go$pkg.KeyValueExpr = go$newType(0, "Struct", "ast.KeyValueExpr", "KeyValueExpr", "go/ast", function(Key_, Colon_, Value_) {
		this.go$val = this;
		this.Key = Key_ !== undefined ? Key_ : null;
		this.Colon = Colon_ !== undefined ? Colon_ : 0;
		this.Value = Value_ !== undefined ? Value_ : null;
	});
	ChanDir = go$pkg.ChanDir = go$newType(4, "Int", "ast.ChanDir", "ChanDir", "go/ast", null);
	ArrayType = go$pkg.ArrayType = go$newType(0, "Struct", "ast.ArrayType", "ArrayType", "go/ast", function(Lbrack_, Len_, Elt_) {
		this.go$val = this;
		this.Lbrack = Lbrack_ !== undefined ? Lbrack_ : 0;
		this.Len = Len_ !== undefined ? Len_ : null;
		this.Elt = Elt_ !== undefined ? Elt_ : null;
	});
	StructType = go$pkg.StructType = go$newType(0, "Struct", "ast.StructType", "StructType", "go/ast", function(Struct_, Fields_, Incomplete_) {
		this.go$val = this;
		this.Struct = Struct_ !== undefined ? Struct_ : 0;
		this.Fields = Fields_ !== undefined ? Fields_ : (go$ptrType(FieldList)).nil;
		this.Incomplete = Incomplete_ !== undefined ? Incomplete_ : false;
	});
	FuncType = go$pkg.FuncType = go$newType(0, "Struct", "ast.FuncType", "FuncType", "go/ast", function(Func_, Params_, Results_) {
		this.go$val = this;
		this.Func = Func_ !== undefined ? Func_ : 0;
		this.Params = Params_ !== undefined ? Params_ : (go$ptrType(FieldList)).nil;
		this.Results = Results_ !== undefined ? Results_ : (go$ptrType(FieldList)).nil;
	});
	InterfaceType = go$pkg.InterfaceType = go$newType(0, "Struct", "ast.InterfaceType", "InterfaceType", "go/ast", function(Interface_, Methods_, Incomplete_) {
		this.go$val = this;
		this.Interface = Interface_ !== undefined ? Interface_ : 0;
		this.Methods = Methods_ !== undefined ? Methods_ : (go$ptrType(FieldList)).nil;
		this.Incomplete = Incomplete_ !== undefined ? Incomplete_ : false;
	});
	MapType = go$pkg.MapType = go$newType(0, "Struct", "ast.MapType", "MapType", "go/ast", function(Map_, Key_, Value_) {
		this.go$val = this;
		this.Map = Map_ !== undefined ? Map_ : 0;
		this.Key = Key_ !== undefined ? Key_ : null;
		this.Value = Value_ !== undefined ? Value_ : null;
	});
	ChanType = go$pkg.ChanType = go$newType(0, "Struct", "ast.ChanType", "ChanType", "go/ast", function(Begin_, Arrow_, Dir_, Value_) {
		this.go$val = this;
		this.Begin = Begin_ !== undefined ? Begin_ : 0;
		this.Arrow = Arrow_ !== undefined ? Arrow_ : 0;
		this.Dir = Dir_ !== undefined ? Dir_ : 0;
		this.Value = Value_ !== undefined ? Value_ : null;
	});
	BadStmt = go$pkg.BadStmt = go$newType(0, "Struct", "ast.BadStmt", "BadStmt", "go/ast", function(From_, To_) {
		this.go$val = this;
		this.From = From_ !== undefined ? From_ : 0;
		this.To = To_ !== undefined ? To_ : 0;
	});
	DeclStmt = go$pkg.DeclStmt = go$newType(0, "Struct", "ast.DeclStmt", "DeclStmt", "go/ast", function(Decl_) {
		this.go$val = this;
		this.Decl = Decl_ !== undefined ? Decl_ : null;
	});
	EmptyStmt = go$pkg.EmptyStmt = go$newType(0, "Struct", "ast.EmptyStmt", "EmptyStmt", "go/ast", function(Semicolon_) {
		this.go$val = this;
		this.Semicolon = Semicolon_ !== undefined ? Semicolon_ : 0;
	});
	LabeledStmt = go$pkg.LabeledStmt = go$newType(0, "Struct", "ast.LabeledStmt", "LabeledStmt", "go/ast", function(Label_, Colon_, Stmt_) {
		this.go$val = this;
		this.Label = Label_ !== undefined ? Label_ : (go$ptrType(Ident)).nil;
		this.Colon = Colon_ !== undefined ? Colon_ : 0;
		this.Stmt = Stmt_ !== undefined ? Stmt_ : null;
	});
	ExprStmt = go$pkg.ExprStmt = go$newType(0, "Struct", "ast.ExprStmt", "ExprStmt", "go/ast", function(X_) {
		this.go$val = this;
		this.X = X_ !== undefined ? X_ : null;
	});
	SendStmt = go$pkg.SendStmt = go$newType(0, "Struct", "ast.SendStmt", "SendStmt", "go/ast", function(Chan_, Arrow_, Value_) {
		this.go$val = this;
		this.Chan = Chan_ !== undefined ? Chan_ : null;
		this.Arrow = Arrow_ !== undefined ? Arrow_ : 0;
		this.Value = Value_ !== undefined ? Value_ : null;
	});
	IncDecStmt = go$pkg.IncDecStmt = go$newType(0, "Struct", "ast.IncDecStmt", "IncDecStmt", "go/ast", function(X_, TokPos_, Tok_) {
		this.go$val = this;
		this.X = X_ !== undefined ? X_ : null;
		this.TokPos = TokPos_ !== undefined ? TokPos_ : 0;
		this.Tok = Tok_ !== undefined ? Tok_ : 0;
	});
	AssignStmt = go$pkg.AssignStmt = go$newType(0, "Struct", "ast.AssignStmt", "AssignStmt", "go/ast", function(Lhs_, TokPos_, Tok_, Rhs_) {
		this.go$val = this;
		this.Lhs = Lhs_ !== undefined ? Lhs_ : (go$sliceType(Expr)).nil;
		this.TokPos = TokPos_ !== undefined ? TokPos_ : 0;
		this.Tok = Tok_ !== undefined ? Tok_ : 0;
		this.Rhs = Rhs_ !== undefined ? Rhs_ : (go$sliceType(Expr)).nil;
	});
	GoStmt = go$pkg.GoStmt = go$newType(0, "Struct", "ast.GoStmt", "GoStmt", "go/ast", function(Go_, Call_) {
		this.go$val = this;
		this.Go = Go_ !== undefined ? Go_ : 0;
		this.Call = Call_ !== undefined ? Call_ : (go$ptrType(CallExpr)).nil;
	});
	DeferStmt = go$pkg.DeferStmt = go$newType(0, "Struct", "ast.DeferStmt", "DeferStmt", "go/ast", function(Defer_, Call_) {
		this.go$val = this;
		this.Defer = Defer_ !== undefined ? Defer_ : 0;
		this.Call = Call_ !== undefined ? Call_ : (go$ptrType(CallExpr)).nil;
	});
	ReturnStmt = go$pkg.ReturnStmt = go$newType(0, "Struct", "ast.ReturnStmt", "ReturnStmt", "go/ast", function(Return_, Results_) {
		this.go$val = this;
		this.Return = Return_ !== undefined ? Return_ : 0;
		this.Results = Results_ !== undefined ? Results_ : (go$sliceType(Expr)).nil;
	});
	BranchStmt = go$pkg.BranchStmt = go$newType(0, "Struct", "ast.BranchStmt", "BranchStmt", "go/ast", function(TokPos_, Tok_, Label_) {
		this.go$val = this;
		this.TokPos = TokPos_ !== undefined ? TokPos_ : 0;
		this.Tok = Tok_ !== undefined ? Tok_ : 0;
		this.Label = Label_ !== undefined ? Label_ : (go$ptrType(Ident)).nil;
	});
	BlockStmt = go$pkg.BlockStmt = go$newType(0, "Struct", "ast.BlockStmt", "BlockStmt", "go/ast", function(Lbrace_, List_, Rbrace_) {
		this.go$val = this;
		this.Lbrace = Lbrace_ !== undefined ? Lbrace_ : 0;
		this.List = List_ !== undefined ? List_ : (go$sliceType(Stmt)).nil;
		this.Rbrace = Rbrace_ !== undefined ? Rbrace_ : 0;
	});
	IfStmt = go$pkg.IfStmt = go$newType(0, "Struct", "ast.IfStmt", "IfStmt", "go/ast", function(If_, Init_, Cond_, Body_, Else_) {
		this.go$val = this;
		this.If = If_ !== undefined ? If_ : 0;
		this.Init = Init_ !== undefined ? Init_ : null;
		this.Cond = Cond_ !== undefined ? Cond_ : null;
		this.Body = Body_ !== undefined ? Body_ : (go$ptrType(BlockStmt)).nil;
		this.Else = Else_ !== undefined ? Else_ : null;
	});
	CaseClause = go$pkg.CaseClause = go$newType(0, "Struct", "ast.CaseClause", "CaseClause", "go/ast", function(Case_, List_, Colon_, Body_) {
		this.go$val = this;
		this.Case = Case_ !== undefined ? Case_ : 0;
		this.List = List_ !== undefined ? List_ : (go$sliceType(Expr)).nil;
		this.Colon = Colon_ !== undefined ? Colon_ : 0;
		this.Body = Body_ !== undefined ? Body_ : (go$sliceType(Stmt)).nil;
	});
	SwitchStmt = go$pkg.SwitchStmt = go$newType(0, "Struct", "ast.SwitchStmt", "SwitchStmt", "go/ast", function(Switch_, Init_, Tag_, Body_) {
		this.go$val = this;
		this.Switch = Switch_ !== undefined ? Switch_ : 0;
		this.Init = Init_ !== undefined ? Init_ : null;
		this.Tag = Tag_ !== undefined ? Tag_ : null;
		this.Body = Body_ !== undefined ? Body_ : (go$ptrType(BlockStmt)).nil;
	});
	TypeSwitchStmt = go$pkg.TypeSwitchStmt = go$newType(0, "Struct", "ast.TypeSwitchStmt", "TypeSwitchStmt", "go/ast", function(Switch_, Init_, Assign_, Body_) {
		this.go$val = this;
		this.Switch = Switch_ !== undefined ? Switch_ : 0;
		this.Init = Init_ !== undefined ? Init_ : null;
		this.Assign = Assign_ !== undefined ? Assign_ : null;
		this.Body = Body_ !== undefined ? Body_ : (go$ptrType(BlockStmt)).nil;
	});
	CommClause = go$pkg.CommClause = go$newType(0, "Struct", "ast.CommClause", "CommClause", "go/ast", function(Case_, Comm_, Colon_, Body_) {
		this.go$val = this;
		this.Case = Case_ !== undefined ? Case_ : 0;
		this.Comm = Comm_ !== undefined ? Comm_ : null;
		this.Colon = Colon_ !== undefined ? Colon_ : 0;
		this.Body = Body_ !== undefined ? Body_ : (go$sliceType(Stmt)).nil;
	});
	SelectStmt = go$pkg.SelectStmt = go$newType(0, "Struct", "ast.SelectStmt", "SelectStmt", "go/ast", function(Select_, Body_) {
		this.go$val = this;
		this.Select = Select_ !== undefined ? Select_ : 0;
		this.Body = Body_ !== undefined ? Body_ : (go$ptrType(BlockStmt)).nil;
	});
	ForStmt = go$pkg.ForStmt = go$newType(0, "Struct", "ast.ForStmt", "ForStmt", "go/ast", function(For_, Init_, Cond_, Post_, Body_) {
		this.go$val = this;
		this.For = For_ !== undefined ? For_ : 0;
		this.Init = Init_ !== undefined ? Init_ : null;
		this.Cond = Cond_ !== undefined ? Cond_ : null;
		this.Post = Post_ !== undefined ? Post_ : null;
		this.Body = Body_ !== undefined ? Body_ : (go$ptrType(BlockStmt)).nil;
	});
	RangeStmt = go$pkg.RangeStmt = go$newType(0, "Struct", "ast.RangeStmt", "RangeStmt", "go/ast", function(For_, Key_, Value_, TokPos_, Tok_, X_, Body_) {
		this.go$val = this;
		this.For = For_ !== undefined ? For_ : 0;
		this.Key = Key_ !== undefined ? Key_ : null;
		this.Value = Value_ !== undefined ? Value_ : null;
		this.TokPos = TokPos_ !== undefined ? TokPos_ : 0;
		this.Tok = Tok_ !== undefined ? Tok_ : 0;
		this.X = X_ !== undefined ? X_ : null;
		this.Body = Body_ !== undefined ? Body_ : (go$ptrType(BlockStmt)).nil;
	});
	Spec = go$pkg.Spec = go$newType(0, "Interface", "ast.Spec", "Spec", "go/ast", null);
	ImportSpec = go$pkg.ImportSpec = go$newType(0, "Struct", "ast.ImportSpec", "ImportSpec", "go/ast", function(Doc_, Name_, Path_, Comment_, EndPos_) {
		this.go$val = this;
		this.Doc = Doc_ !== undefined ? Doc_ : (go$ptrType(CommentGroup)).nil;
		this.Name = Name_ !== undefined ? Name_ : (go$ptrType(Ident)).nil;
		this.Path = Path_ !== undefined ? Path_ : (go$ptrType(BasicLit)).nil;
		this.Comment = Comment_ !== undefined ? Comment_ : (go$ptrType(CommentGroup)).nil;
		this.EndPos = EndPos_ !== undefined ? EndPos_ : 0;
	});
	ValueSpec = go$pkg.ValueSpec = go$newType(0, "Struct", "ast.ValueSpec", "ValueSpec", "go/ast", function(Doc_, Names_, Type_, Values_, Comment_) {
		this.go$val = this;
		this.Doc = Doc_ !== undefined ? Doc_ : (go$ptrType(CommentGroup)).nil;
		this.Names = Names_ !== undefined ? Names_ : (go$sliceType((go$ptrType(Ident)))).nil;
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Values = Values_ !== undefined ? Values_ : (go$sliceType(Expr)).nil;
		this.Comment = Comment_ !== undefined ? Comment_ : (go$ptrType(CommentGroup)).nil;
	});
	TypeSpec = go$pkg.TypeSpec = go$newType(0, "Struct", "ast.TypeSpec", "TypeSpec", "go/ast", function(Doc_, Name_, Type_, Comment_) {
		this.go$val = this;
		this.Doc = Doc_ !== undefined ? Doc_ : (go$ptrType(CommentGroup)).nil;
		this.Name = Name_ !== undefined ? Name_ : (go$ptrType(Ident)).nil;
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Comment = Comment_ !== undefined ? Comment_ : (go$ptrType(CommentGroup)).nil;
	});
	BadDecl = go$pkg.BadDecl = go$newType(0, "Struct", "ast.BadDecl", "BadDecl", "go/ast", function(From_, To_) {
		this.go$val = this;
		this.From = From_ !== undefined ? From_ : 0;
		this.To = To_ !== undefined ? To_ : 0;
	});
	GenDecl = go$pkg.GenDecl = go$newType(0, "Struct", "ast.GenDecl", "GenDecl", "go/ast", function(Doc_, TokPos_, Tok_, Lparen_, Specs_, Rparen_) {
		this.go$val = this;
		this.Doc = Doc_ !== undefined ? Doc_ : (go$ptrType(CommentGroup)).nil;
		this.TokPos = TokPos_ !== undefined ? TokPos_ : 0;
		this.Tok = Tok_ !== undefined ? Tok_ : 0;
		this.Lparen = Lparen_ !== undefined ? Lparen_ : 0;
		this.Specs = Specs_ !== undefined ? Specs_ : (go$sliceType(Spec)).nil;
		this.Rparen = Rparen_ !== undefined ? Rparen_ : 0;
	});
	FuncDecl = go$pkg.FuncDecl = go$newType(0, "Struct", "ast.FuncDecl", "FuncDecl", "go/ast", function(Doc_, Recv_, Name_, Type_, Body_) {
		this.go$val = this;
		this.Doc = Doc_ !== undefined ? Doc_ : (go$ptrType(CommentGroup)).nil;
		this.Recv = Recv_ !== undefined ? Recv_ : (go$ptrType(FieldList)).nil;
		this.Name = Name_ !== undefined ? Name_ : (go$ptrType(Ident)).nil;
		this.Type = Type_ !== undefined ? Type_ : (go$ptrType(FuncType)).nil;
		this.Body = Body_ !== undefined ? Body_ : (go$ptrType(BlockStmt)).nil;
	});
	File = go$pkg.File = go$newType(0, "Struct", "ast.File", "File", "go/ast", function(Doc_, Package_, Name_, Decls_, Scope_, Imports_, Unresolved_, Comments_) {
		this.go$val = this;
		this.Doc = Doc_ !== undefined ? Doc_ : (go$ptrType(CommentGroup)).nil;
		this.Package = Package_ !== undefined ? Package_ : 0;
		this.Name = Name_ !== undefined ? Name_ : (go$ptrType(Ident)).nil;
		this.Decls = Decls_ !== undefined ? Decls_ : (go$sliceType(Decl)).nil;
		this.Scope = Scope_ !== undefined ? Scope_ : (go$ptrType(Scope)).nil;
		this.Imports = Imports_ !== undefined ? Imports_ : (go$sliceType((go$ptrType(ImportSpec)))).nil;
		this.Unresolved = Unresolved_ !== undefined ? Unresolved_ : (go$sliceType((go$ptrType(Ident)))).nil;
		this.Comments = Comments_ !== undefined ? Comments_ : (go$sliceType((go$ptrType(CommentGroup)))).nil;
	});
	Package = go$pkg.Package = go$newType(0, "Struct", "ast.Package", "Package", "go/ast", function(Name_, Scope_, Imports_, Files_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Scope = Scope_ !== undefined ? Scope_ : (go$ptrType(Scope)).nil;
		this.Imports = Imports_ !== undefined ? Imports_ : false;
		this.Files = Files_ !== undefined ? Files_ : false;
	});
	posSpan = go$pkg.posSpan = go$newType(0, "Struct", "ast.posSpan", "posSpan", "go/ast", function(Start_, End_) {
		this.go$val = this;
		this.Start = Start_ !== undefined ? Start_ : 0;
		this.End = End_ !== undefined ? End_ : 0;
	});
	byImportSpec = go$pkg.byImportSpec = go$newType(0, "Slice", "ast.byImportSpec", "byImportSpec", "go/ast", null);
	byCommentPos = go$pkg.byCommentPos = go$newType(0, "Slice", "ast.byCommentPos", "byCommentPos", "go/ast", null);
	Scope = go$pkg.Scope = go$newType(0, "Struct", "ast.Scope", "Scope", "go/ast", function(Outer_, Objects_) {
		this.go$val = this;
		this.Outer = Outer_ !== undefined ? Outer_ : (go$ptrType(Scope)).nil;
		this.Objects = Objects_ !== undefined ? Objects_ : false;
	});
	Object = go$pkg.Object = go$newType(0, "Struct", "ast.Object", "Object", "go/ast", function(Kind_, Name_, Decl_, Data_, Type_) {
		this.go$val = this;
		this.Kind = Kind_ !== undefined ? Kind_ : 0;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Decl = Decl_ !== undefined ? Decl_ : null;
		this.Data = Data_ !== undefined ? Data_ : null;
		this.Type = Type_ !== undefined ? Type_ : null;
	});
	ObjKind = go$pkg.ObjKind = go$newType(4, "Int", "ast.ObjKind", "ObjKind", "go/ast", null);
	Visitor = go$pkg.Visitor = go$newType(0, "Interface", "ast.Visitor", "Visitor", "go/ast", null);
	inspector = go$pkg.inspector = go$newType(0, "Func", "ast.inspector", "inspector", "go/ast", null);
	Comment.Ptr.prototype.Pos = function() {
		var c;
		c = this;
		return c.Slash;
	};
	Comment.prototype.Pos = function() { return this.go$val.Pos(); };
	Comment.Ptr.prototype.End = function() {
		var c;
		c = this;
		return (((c.Slash >> 0) + c.Text.length >> 0) >> 0);
	};
	Comment.prototype.End = function() { return this.go$val.End(); };
	CommentGroup.Ptr.prototype.Pos = function() {
		var g, _slice, _index;
		g = this;
		return (_slice = g.List, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos();
	};
	CommentGroup.prototype.Pos = function() { return this.go$val.Pos(); };
	CommentGroup.Ptr.prototype.End = function() {
		var g, _slice, _index;
		g = this;
		return (_slice = g.List, _index = (g.List.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End();
	};
	CommentGroup.prototype.End = function() { return this.go$val.End(); };
	isWhitespace = function(ch) {
		return (ch === 32) || (ch === 9) || (ch === 10) || (ch === 13);
	};
	stripTrailingWhitespace = function(s) {
		var i;
		i = s.length;
		while (i > 0 && isWhitespace(s.charCodeAt((i - 1 >> 0)))) {
			i = i - 1 >> 0;
		}
		return s.substring(0, i);
	};
	CommentGroup.Ptr.prototype.Text = function() {
		var g, comments, _ref, _i, _slice, _index, c, i, _slice$1, _index$1, lines, _ref$1, _i$1, _slice$2, _index$2, c$1, _ref$2, cl, _ref$3, _i$2, _slice$3, _index$3, l, n, _ref$4, _i$3, _slice$4, _index$4, line, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7;
		g = this;
		if (g === (go$ptrType(CommentGroup)).nil) {
			return "";
		}
		comments = (go$sliceType(Go$String)).make(g.List.length, 0, function() { return ""; });
		_ref = g.List;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$1 = comments, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = c.Text) : go$throwRuntimeError("index out of range");
			_i++;
		}
		lines = (go$sliceType(Go$String)).make(0, 10, function() { return ""; });
		_ref$1 = comments;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			c$1 = (_slice$2 = _ref$1, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			_ref$2 = c$1.charCodeAt(1);
			if (_ref$2 === 47) {
				c$1 = c$1.substring(2);
				if (c$1.length > 0 && (c$1.charCodeAt(0) === 32)) {
					c$1 = c$1.substring(1);
				}
			} else if (_ref$2 === 42) {
				c$1 = c$1.substring(2, (c$1.length - 2 >> 0));
			}
			cl = strings.Split(c$1, "\n");
			_ref$3 = cl;
			_i$2 = 0;
			while (_i$2 < _ref$3.length) {
				l = (_slice$3 = _ref$3, _index$3 = _i$2, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
				lines = go$append(lines, stripTrailingWhitespace(l));
				_i$2++;
			}
			_i$1++;
		}
		n = 0;
		_ref$4 = lines;
		_i$3 = 0;
		while (_i$3 < _ref$4.length) {
			line = (_slice$4 = _ref$4, _index$4 = _i$3, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
			if (!(line === "") || n > 0 && !((_slice$5 = lines, _index$5 = (n - 1 >> 0), (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")) === "")) {
				_slice$6 = lines, _index$6 = n, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = line) : go$throwRuntimeError("index out of range");
				n = n + 1 >> 0;
			}
			_i$3++;
		}
		lines = go$subslice(lines, 0, n);
		if (n > 0 && !((_slice$7 = lines, _index$7 = (n - 1 >> 0), (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")) === "")) {
			lines = go$append(lines, "");
		}
		return strings.Join(lines, "\n");
	};
	CommentGroup.prototype.Text = function() { return this.go$val.Text(); };
	Field.Ptr.prototype.Pos = function() {
		var f, _slice, _index;
		f = this;
		if (f.Names.length > 0) {
			return (_slice = f.Names, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos();
		}
		return f.Type.Pos();
	};
	Field.prototype.Pos = function() { return this.go$val.Pos(); };
	Field.Ptr.prototype.End = function() {
		var f;
		f = this;
		if (!(f.Tag === (go$ptrType(BasicLit)).nil)) {
			return f.Tag.End();
		}
		return f.Type.End();
	};
	Field.prototype.End = function() { return this.go$val.End(); };
	FieldList.Ptr.prototype.Pos = function() {
		var f, _slice, _index;
		f = this;
		if ((new token.Pos(f.Opening)).IsValid()) {
			return f.Opening;
		}
		if (f.List.length > 0) {
			return (_slice = f.List, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos();
		}
		return 0;
	};
	FieldList.prototype.Pos = function() { return this.go$val.Pos(); };
	FieldList.Ptr.prototype.End = function() {
		var f, n, _slice, _index;
		f = this;
		if ((new token.Pos(f.Closing)).IsValid()) {
			return f.Closing + 1 >> 0;
		}
		if (n = f.List.length, n > 0) {
			return (_slice = f.List, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End();
		}
		return 0;
	};
	FieldList.prototype.End = function() { return this.go$val.End(); };
	FieldList.Ptr.prototype.NumFields = function() {
		var f, n, _ref, _i, _slice, _index, g, m;
		f = this;
		n = 0;
		if (!(f === (go$ptrType(FieldList)).nil)) {
			_ref = f.List;
			_i = 0;
			while (_i < _ref.length) {
				g = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				m = g.Names.length;
				if (m === 0) {
					m = 1;
				}
				n = n + (m) >> 0;
				_i++;
			}
		}
		return n;
	};
	FieldList.prototype.NumFields = function() { return this.go$val.NumFields(); };
	BadExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.From;
	};
	BadExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	Ident.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.NamePos;
	};
	Ident.prototype.Pos = function() { return this.go$val.Pos(); };
	Ellipsis.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Ellipsis;
	};
	Ellipsis.prototype.Pos = function() { return this.go$val.Pos(); };
	BasicLit.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.ValuePos;
	};
	BasicLit.prototype.Pos = function() { return this.go$val.Pos(); };
	FuncLit.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Type.Pos();
	};
	FuncLit.prototype.Pos = function() { return this.go$val.Pos(); };
	CompositeLit.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		if (!(go$interfaceIsEqual(x.Type, null))) {
			return x.Type.Pos();
		}
		return x.Lbrace;
	};
	CompositeLit.prototype.Pos = function() { return this.go$val.Pos(); };
	ParenExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Lparen;
	};
	ParenExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	SelectorExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.X.Pos();
	};
	SelectorExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	IndexExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.X.Pos();
	};
	IndexExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	SliceExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.X.Pos();
	};
	SliceExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	TypeAssertExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.X.Pos();
	};
	TypeAssertExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	CallExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Fun.Pos();
	};
	CallExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	StarExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Star;
	};
	StarExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	UnaryExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.OpPos;
	};
	UnaryExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	BinaryExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.X.Pos();
	};
	BinaryExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	KeyValueExpr.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Key.Pos();
	};
	KeyValueExpr.prototype.Pos = function() { return this.go$val.Pos(); };
	ArrayType.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Lbrack;
	};
	ArrayType.prototype.Pos = function() { return this.go$val.Pos(); };
	StructType.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Struct;
	};
	StructType.prototype.Pos = function() { return this.go$val.Pos(); };
	FuncType.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		if ((new token.Pos(x.Func)).IsValid() || x.Params === (go$ptrType(FieldList)).nil) {
			return x.Func;
		}
		return x.Params.Pos();
	};
	FuncType.prototype.Pos = function() { return this.go$val.Pos(); };
	InterfaceType.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Interface;
	};
	InterfaceType.prototype.Pos = function() { return this.go$val.Pos(); };
	MapType.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Map;
	};
	MapType.prototype.Pos = function() { return this.go$val.Pos(); };
	ChanType.Ptr.prototype.Pos = function() {
		var x;
		x = this;
		return x.Begin;
	};
	ChanType.prototype.Pos = function() { return this.go$val.Pos(); };
	BadExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.To;
	};
	BadExpr.prototype.End = function() { return this.go$val.End(); };
	Ident.Ptr.prototype.End = function() {
		var x;
		x = this;
		return (((x.NamePos >> 0) + x.Name.length >> 0) >> 0);
	};
	Ident.prototype.End = function() { return this.go$val.End(); };
	Ellipsis.Ptr.prototype.End = function() {
		var x;
		x = this;
		if (!(go$interfaceIsEqual(x.Elt, null))) {
			return x.Elt.End();
		}
		return x.Ellipsis + 3 >> 0;
	};
	Ellipsis.prototype.End = function() { return this.go$val.End(); };
	BasicLit.Ptr.prototype.End = function() {
		var x;
		x = this;
		return (((x.ValuePos >> 0) + x.Value.length >> 0) >> 0);
	};
	BasicLit.prototype.End = function() { return this.go$val.End(); };
	FuncLit.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Body.End();
	};
	FuncLit.prototype.End = function() { return this.go$val.End(); };
	CompositeLit.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rbrace + 1 >> 0;
	};
	CompositeLit.prototype.End = function() { return this.go$val.End(); };
	ParenExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rparen + 1 >> 0;
	};
	ParenExpr.prototype.End = function() { return this.go$val.End(); };
	SelectorExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Sel.End();
	};
	SelectorExpr.prototype.End = function() { return this.go$val.End(); };
	IndexExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rbrack + 1 >> 0;
	};
	IndexExpr.prototype.End = function() { return this.go$val.End(); };
	SliceExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rbrack + 1 >> 0;
	};
	SliceExpr.prototype.End = function() { return this.go$val.End(); };
	TypeAssertExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rparen + 1 >> 0;
	};
	TypeAssertExpr.prototype.End = function() { return this.go$val.End(); };
	CallExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Rparen + 1 >> 0;
	};
	CallExpr.prototype.End = function() { return this.go$val.End(); };
	StarExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.X.End();
	};
	StarExpr.prototype.End = function() { return this.go$val.End(); };
	UnaryExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.X.End();
	};
	UnaryExpr.prototype.End = function() { return this.go$val.End(); };
	BinaryExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Y.End();
	};
	BinaryExpr.prototype.End = function() { return this.go$val.End(); };
	KeyValueExpr.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Value.End();
	};
	KeyValueExpr.prototype.End = function() { return this.go$val.End(); };
	ArrayType.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Elt.End();
	};
	ArrayType.prototype.End = function() { return this.go$val.End(); };
	StructType.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Fields.End();
	};
	StructType.prototype.End = function() { return this.go$val.End(); };
	FuncType.Ptr.prototype.End = function() {
		var x;
		x = this;
		if (!(x.Results === (go$ptrType(FieldList)).nil)) {
			return x.Results.End();
		}
		return x.Params.End();
	};
	FuncType.prototype.End = function() { return this.go$val.End(); };
	InterfaceType.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Methods.End();
	};
	InterfaceType.prototype.End = function() { return this.go$val.End(); };
	MapType.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Value.End();
	};
	MapType.prototype.End = function() { return this.go$val.End(); };
	ChanType.Ptr.prototype.End = function() {
		var x;
		x = this;
		return x.Value.End();
	};
	ChanType.prototype.End = function() { return this.go$val.End(); };
	NewIdent = go$pkg.NewIdent = function(name) {
		return new Ident.Ptr(0, name, (go$ptrType(Object)).nil);
	};
	IsExported = go$pkg.IsExported = function(name) {
		var _tuple, ch;
		_tuple = utf8.DecodeRuneInString(name), ch = _tuple[0];
		return unicode.IsUpper(ch);
	};
	Ident.Ptr.prototype.IsExported = function() {
		var id;
		id = this;
		return IsExported(id.Name);
	};
	Ident.prototype.IsExported = function() { return this.go$val.IsExported(); };
	Ident.Ptr.prototype.String = function() {
		var id;
		id = this;
		if (!(id === (go$ptrType(Ident)).nil)) {
			return id.Name;
		}
		return "<nil>";
	};
	Ident.prototype.String = function() { return this.go$val.String(); };
	BadStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.From;
	};
	BadStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	DeclStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Decl.Pos();
	};
	DeclStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	EmptyStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Semicolon;
	};
	EmptyStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	LabeledStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Label.Pos();
	};
	LabeledStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	ExprStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.X.Pos();
	};
	ExprStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	SendStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Chan.Pos();
	};
	SendStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	IncDecStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.X.Pos();
	};
	IncDecStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	AssignStmt.Ptr.prototype.Pos = function() {
		var s, _slice, _index;
		s = this;
		return (_slice = s.Lhs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos();
	};
	AssignStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	GoStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Go;
	};
	GoStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	DeferStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Defer;
	};
	DeferStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	ReturnStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Return;
	};
	ReturnStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	BranchStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.TokPos;
	};
	BranchStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	BlockStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Lbrace;
	};
	BlockStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	IfStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.If;
	};
	IfStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	CaseClause.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Case;
	};
	CaseClause.prototype.Pos = function() { return this.go$val.Pos(); };
	SwitchStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Switch;
	};
	SwitchStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	TypeSwitchStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Switch;
	};
	TypeSwitchStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	CommClause.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Case;
	};
	CommClause.prototype.Pos = function() { return this.go$val.Pos(); };
	SelectStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Select;
	};
	SelectStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	ForStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.For;
	};
	ForStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	RangeStmt.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.For;
	};
	RangeStmt.prototype.Pos = function() { return this.go$val.Pos(); };
	BadStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.To;
	};
	BadStmt.prototype.End = function() { return this.go$val.End(); };
	DeclStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Decl.End();
	};
	DeclStmt.prototype.End = function() { return this.go$val.End(); };
	EmptyStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Semicolon + 1 >> 0;
	};
	EmptyStmt.prototype.End = function() { return this.go$val.End(); };
	LabeledStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Stmt.End();
	};
	LabeledStmt.prototype.End = function() { return this.go$val.End(); };
	ExprStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.X.End();
	};
	ExprStmt.prototype.End = function() { return this.go$val.End(); };
	SendStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Value.End();
	};
	SendStmt.prototype.End = function() { return this.go$val.End(); };
	IncDecStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.TokPos + 2 >> 0;
	};
	IncDecStmt.prototype.End = function() { return this.go$val.End(); };
	AssignStmt.Ptr.prototype.End = function() {
		var s, _slice, _index;
		s = this;
		return (_slice = s.Rhs, _index = (s.Rhs.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End();
	};
	AssignStmt.prototype.End = function() { return this.go$val.End(); };
	GoStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Call.End();
	};
	GoStmt.prototype.End = function() { return this.go$val.End(); };
	DeferStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Call.End();
	};
	DeferStmt.prototype.End = function() { return this.go$val.End(); };
	ReturnStmt.Ptr.prototype.End = function() {
		var s, n, _slice, _index;
		s = this;
		if (n = s.Results.length, n > 0) {
			return (_slice = s.Results, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End();
		}
		return s.Return + 6 >> 0;
	};
	ReturnStmt.prototype.End = function() { return this.go$val.End(); };
	BranchStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		if (!(s.Label === (go$ptrType(Ident)).nil)) {
			return s.Label.End();
		}
		return (((s.TokPos >> 0) + (new token.Token(s.Tok)).String().length >> 0) >> 0);
	};
	BranchStmt.prototype.End = function() { return this.go$val.End(); };
	BlockStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Rbrace + 1 >> 0;
	};
	BlockStmt.prototype.End = function() { return this.go$val.End(); };
	IfStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		if (!(go$interfaceIsEqual(s.Else, null))) {
			return s.Else.End();
		}
		return s.Body.End();
	};
	IfStmt.prototype.End = function() { return this.go$val.End(); };
	CaseClause.Ptr.prototype.End = function() {
		var s, n, _slice, _index;
		s = this;
		if (n = s.Body.length, n > 0) {
			return (_slice = s.Body, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End();
		}
		return s.Colon + 1 >> 0;
	};
	CaseClause.prototype.End = function() { return this.go$val.End(); };
	SwitchStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	SwitchStmt.prototype.End = function() { return this.go$val.End(); };
	TypeSwitchStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	TypeSwitchStmt.prototype.End = function() { return this.go$val.End(); };
	CommClause.Ptr.prototype.End = function() {
		var s, n, _slice, _index;
		s = this;
		if (n = s.Body.length, n > 0) {
			return (_slice = s.Body, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End();
		}
		return s.Colon + 1 >> 0;
	};
	CommClause.prototype.End = function() { return this.go$val.End(); };
	SelectStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	SelectStmt.prototype.End = function() { return this.go$val.End(); };
	ForStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	ForStmt.prototype.End = function() { return this.go$val.End(); };
	RangeStmt.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Body.End();
	};
	RangeStmt.prototype.End = function() { return this.go$val.End(); };
	ImportSpec.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		if (!(s.Name === (go$ptrType(Ident)).nil)) {
			return s.Name.Pos();
		}
		return s.Path.Pos();
	};
	ImportSpec.prototype.Pos = function() { return this.go$val.Pos(); };
	ValueSpec.Ptr.prototype.Pos = function() {
		var s, _slice, _index;
		s = this;
		return (_slice = s.Names, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos();
	};
	ValueSpec.prototype.Pos = function() { return this.go$val.Pos(); };
	TypeSpec.Ptr.prototype.Pos = function() {
		var s;
		s = this;
		return s.Name.Pos();
	};
	TypeSpec.prototype.Pos = function() { return this.go$val.Pos(); };
	ImportSpec.Ptr.prototype.End = function() {
		var s;
		s = this;
		if (!((s.EndPos === 0))) {
			return s.EndPos;
		}
		return s.Path.End();
	};
	ImportSpec.prototype.End = function() { return this.go$val.End(); };
	ValueSpec.Ptr.prototype.End = function() {
		var s, n, _slice, _index, _slice$1, _index$1;
		s = this;
		if (n = s.Values.length, n > 0) {
			return (_slice = s.Values, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End();
		}
		if (!(go$interfaceIsEqual(s.Type, null))) {
			return s.Type.End();
		}
		return (_slice$1 = s.Names, _index$1 = (s.Names.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).End();
	};
	ValueSpec.prototype.End = function() { return this.go$val.End(); };
	TypeSpec.Ptr.prototype.End = function() {
		var s;
		s = this;
		return s.Type.End();
	};
	TypeSpec.prototype.End = function() { return this.go$val.End(); };
	BadDecl.Ptr.prototype.Pos = function() {
		var d;
		d = this;
		return d.From;
	};
	BadDecl.prototype.Pos = function() { return this.go$val.Pos(); };
	GenDecl.Ptr.prototype.Pos = function() {
		var d;
		d = this;
		return d.TokPos;
	};
	GenDecl.prototype.Pos = function() { return this.go$val.Pos(); };
	FuncDecl.Ptr.prototype.Pos = function() {
		var d;
		d = this;
		return d.Type.Pos();
	};
	FuncDecl.prototype.Pos = function() { return this.go$val.Pos(); };
	BadDecl.Ptr.prototype.End = function() {
		var d;
		d = this;
		return d.To;
	};
	BadDecl.prototype.End = function() { return this.go$val.End(); };
	GenDecl.Ptr.prototype.End = function() {
		var d, _slice, _index;
		d = this;
		if ((new token.Pos(d.Rparen)).IsValid()) {
			return d.Rparen + 1 >> 0;
		}
		return (_slice = d.Specs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End();
	};
	GenDecl.prototype.End = function() { return this.go$val.End(); };
	FuncDecl.Ptr.prototype.End = function() {
		var d;
		d = this;
		if (!(d.Body === (go$ptrType(BlockStmt)).nil)) {
			return d.Body.End();
		}
		return d.Type.End();
	};
	FuncDecl.prototype.End = function() { return this.go$val.End(); };
	File.Ptr.prototype.Pos = function() {
		var f;
		f = this;
		return f.Package;
	};
	File.prototype.Pos = function() { return this.go$val.Pos(); };
	File.Ptr.prototype.End = function() {
		var f, n, _slice, _index;
		f = this;
		if (n = f.Decls.length, n > 0) {
			return (_slice = f.Decls, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End();
		}
		return f.Name.End();
	};
	File.prototype.End = function() { return this.go$val.End(); };
	Package.Ptr.prototype.Pos = function() {
		var p;
		p = this;
		return 0;
	};
	Package.prototype.Pos = function() { return this.go$val.Pos(); };
	Package.Ptr.prototype.End = function() {
		var p;
		p = this;
		return 0;
	};
	Package.prototype.End = function() { return this.go$val.End(); };
	SortImports = go$pkg.SortImports = function(fset, f) {
		var _ref, _i, _slice, _index, d, _tuple, d$1, ok, i, specs, _ref$1, _i$1, _slice$1, _index$1, s, j, _slice$2, _index$2, _slice$3, _index$3, lastSpec, lastLine, rParenLine;
		_ref = f.Decls;
		_i = 0;
		while (_i < _ref.length) {
			d = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_tuple = (d !== null && d.constructor === (go$ptrType(GenDecl)) ? [d.go$val, true] : [(go$ptrType(GenDecl)).nil, false]), d$1 = _tuple[0], ok = _tuple[1];
			if (!ok || !((d$1.Tok === 75))) {
				break;
			}
			if (!(new token.Pos(d$1.Lparen)).IsValid()) {
				_i++;
				continue;
			}
			i = 0;
			specs = go$subslice(d$1.Specs, 0, 0);
			_ref$1 = d$1.Specs;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				s = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				j = _i$1;
				if (j > i && fset.Position(s.Pos()).Line > (1 + fset.Position((_slice$2 = d$1.Specs, _index$2 = (j - 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).End()).Line >> 0)) {
					specs = go$appendSlice(specs, sortSpecs(fset, f, go$subslice(d$1.Specs, i, j)));
					i = j;
				}
				_i$1++;
			}
			specs = go$appendSlice(specs, sortSpecs(fset, f, go$subslice(d$1.Specs, i)));
			d$1.Specs = specs;
			if (d$1.Specs.length > 0) {
				lastSpec = (_slice$3 = d$1.Specs, _index$3 = (d$1.Specs.length - 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
				lastLine = fset.Position(lastSpec.Pos()).Line;
				if (rParenLine = fset.Position(d$1.Rparen).Line, rParenLine > (lastLine + 1 >> 0)) {
					fset.File(d$1.Rparen).MergeLine(rParenLine - 1 >> 0);
				}
			}
			_i++;
		}
	};
	importPath = function(s) {
		var _tuple, t, err;
		_tuple = strconv.Unquote((s !== null && s.constructor === (go$ptrType(ImportSpec)) ? s.go$val : go$typeAssertionFailed(s, (go$ptrType(ImportSpec)))).Path.Value), t = _tuple[0], err = _tuple[1];
		if (go$interfaceIsEqual(err, null)) {
			return t;
		}
		return "";
	};
	importName = function(s) {
		var n;
		n = (s !== null && s.constructor === (go$ptrType(ImportSpec)) ? s.go$val : go$typeAssertionFailed(s, (go$ptrType(ImportSpec)))).Name;
		if (n === (go$ptrType(Ident)).nil) {
			return "";
		}
		return n.Name;
	};
	importComment = function(s) {
		var c;
		c = (s !== null && s.constructor === (go$ptrType(ImportSpec)) ? s.go$val : go$typeAssertionFailed(s, (go$ptrType(ImportSpec)))).Comment;
		if (c === (go$ptrType(CommentGroup)).nil) {
			return "";
		}
		return c.Text();
	};
	collapse = function(prev, next) {
		if (!(importPath(next) === importPath(prev)) || !(importName(next) === importName(prev))) {
			return false;
		}
		return (prev !== null && prev.constructor === (go$ptrType(ImportSpec)) ? prev.go$val : go$typeAssertionFailed(prev, (go$ptrType(ImportSpec)))).Comment === (go$ptrType(CommentGroup)).nil;
	};
	sortSpecs = function(fset, f, specs) {
		var pos, _ref, _i, _slice, _index, s, i, _slice$1, _index$1, _slice$2, _index$2, lastLine, cstart, cend, _ref$1, _i$1, _slice$3, _index$3, g, i$1, _slice$4, _index$4, comments, _map, _key, importComment$1, specIndex, _ref$2, _i$2, _slice$5, _index$5, g$1, _slice$6, _index$6, x, _slice$7, _index$7, s$1, _entry, _key$1, deduped, _ref$3, _i$3, _slice$8, _index$8, s$2, i$2, _slice$9, _index$9, p, _ref$4, _i$4, _slice$10, _index$10, s$3, i$3, s$4, _slice$11, _index$11, _slice$12, _index$12, _slice$13, _index$13, _ref$5, _entry$1, _i$5, _slice$14, _index$14, g$2, _ref$6, _i$6, _slice$15, _index$15, c, _slice$16, _index$16;
		if (specs.length <= 1) {
			return specs;
		}
		pos = (go$sliceType(posSpan)).make(specs.length, 0, function() { return new posSpan.Ptr(); });
		_ref = specs;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$1 = pos, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = new posSpan.Ptr(s.Pos(), s.End())) : go$throwRuntimeError("index out of range");
			_i++;
		}
		lastLine = fset.Position((_slice$2 = pos, _index$2 = (pos.length - 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).End).Line;
		cstart = f.Comments.length;
		cend = f.Comments.length;
		_ref$1 = f.Comments;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			g = (_slice$3 = _ref$1, _index$3 = _i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			i$1 = _i$1;
			if (g.Pos() < (_slice$4 = pos, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).Start) {
				_i$1++;
				continue;
			}
			if (i$1 < cstart) {
				cstart = i$1;
			}
			if (fset.Position(g.End()).Line > lastLine) {
				cend = i$1;
				break;
			}
			_i$1++;
		}
		comments = go$subslice(f.Comments, cstart, cend);
		importComment$1 = (_map = new Go$Map(), _map);
		specIndex = 0;
		_ref$2 = comments;
		_i$2 = 0;
		while (_i$2 < _ref$2.length) {
			g$1 = (_slice$5 = _ref$2, _index$5 = _i$2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
			while ((specIndex + 1 >> 0) < specs.length && (_slice$6 = pos, _index$6 = (specIndex + 1 >> 0), (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")).Start <= g$1.Pos()) {
				specIndex = specIndex + 1 >> 0;
			}
			s$1 = (x = (_slice$7 = specs, _index$7 = specIndex, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$ptrType(ImportSpec)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(ImportSpec)))));
			_key$1 = s$1, (importComment$1 || go$throwRuntimeError("assignment to entry in nil map"))[_key$1.go$key()] = { k: _key$1, v: go$append((_entry = importComment$1[s$1.go$key()], _entry !== undefined ? _entry.v : (go$sliceType((go$ptrType(CommentGroup)))).nil), g$1) };
			_i$2++;
		}
		sort.Sort(go$subslice(new byImportSpec(specs.array), specs.offset, specs.offset + specs.length));
		deduped = go$subslice(specs, 0, 0);
		_ref$3 = specs;
		_i$3 = 0;
		while (_i$3 < _ref$3.length) {
			s$2 = (_slice$8 = _ref$3, _index$8 = _i$3, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
			i$2 = _i$3;
			if ((i$2 === (specs.length - 1 >> 0)) || !collapse(s$2, (_slice$9 = specs, _index$9 = (i$2 + 1 >> 0), (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")))) {
				deduped = go$append(deduped, s$2);
			} else {
				p = s$2.Pos();
				fset.File(p).MergeLine(fset.Position(p).Line);
			}
			_i$3++;
		}
		specs = deduped;
		_ref$4 = specs;
		_i$4 = 0;
		while (_i$4 < _ref$4.length) {
			s$3 = (_slice$10 = _ref$4, _index$10 = _i$4, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"));
			i$3 = _i$4;
			s$4 = (s$3 !== null && s$3.constructor === (go$ptrType(ImportSpec)) ? s$3.go$val : go$typeAssertionFailed(s$3, (go$ptrType(ImportSpec))));
			if (!(s$4.Name === (go$ptrType(Ident)).nil)) {
				s$4.Name.NamePos = (_slice$11 = pos, _index$11 = i$3, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")).Start;
			}
			s$4.Path.ValuePos = (_slice$12 = pos, _index$12 = i$3, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")).Start;
			s$4.EndPos = (_slice$13 = pos, _index$13 = i$3, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")).End;
			_ref$5 = (_entry$1 = importComment$1[s$4.go$key()], _entry$1 !== undefined ? _entry$1.v : (go$sliceType((go$ptrType(CommentGroup)))).nil);
			_i$5 = 0;
			while (_i$5 < _ref$5.length) {
				g$2 = (_slice$14 = _ref$5, _index$14 = _i$5, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range"));
				_ref$6 = g$2.List;
				_i$6 = 0;
				while (_i$6 < _ref$6.length) {
					c = (_slice$15 = _ref$6, _index$15 = _i$6, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range"));
					c.Slash = (_slice$16 = pos, _index$16 = i$3, (_index$16 >= 0 && _index$16 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$16] : go$throwRuntimeError("index out of range")).End;
					_i$6++;
				}
				_i$5++;
			}
			_i$4++;
		}
		sort.Sort(go$subslice(new byCommentPos(comments.array), comments.offset, comments.offset + comments.length));
		return specs;
	};
	byImportSpec.prototype.Len = function() {
		var x;
		x = this;
		return x.length;
	};
	go$ptrType(byImportSpec).prototype.Len = function() { return this.go$get().Len(); };
	byImportSpec.prototype.Swap = function(i, j) {
		var x, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		x = this;
		_tuple = [(_slice = x, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = x, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _slice$2 = x, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = x, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(byImportSpec).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	byImportSpec.prototype.Less = function(i, j) {
		var x, _slice, _index, ipath, _slice$1, _index$1, jpath, _slice$2, _index$2, iname, _slice$3, _index$3, jname, _slice$4, _index$4, _slice$5, _index$5;
		x = this;
		ipath = importPath((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
		jpath = importPath((_slice$1 = x, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
		if (!(ipath === jpath)) {
			return ipath < jpath;
		}
		iname = importName((_slice$2 = x, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")));
		jname = importName((_slice$3 = x, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")));
		if (!(iname === jname)) {
			return iname < jname;
		}
		return importComment((_slice$4 = x, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"))) < importComment((_slice$5 = x, _index$5 = j, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")));
	};
	go$ptrType(byImportSpec).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	byCommentPos.prototype.Len = function() {
		var x;
		x = this;
		return x.length;
	};
	go$ptrType(byCommentPos).prototype.Len = function() { return this.go$get().Len(); };
	byCommentPos.prototype.Swap = function(i, j) {
		var x, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		x = this;
		_tuple = [(_slice = x, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = x, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _slice$2 = x, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = x, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(byCommentPos).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	byCommentPos.prototype.Less = function(i, j) {
		var x, _slice, _index, _slice$1, _index$1;
		x = this;
		return (_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos() < (_slice$1 = x, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Pos();
	};
	go$ptrType(byCommentPos).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	NewScope = go$pkg.NewScope = function(outer) {
		return new Scope.Ptr(outer, new Go$Map());
	};
	Scope.Ptr.prototype.Lookup = function(name) {
		var s, _entry;
		s = this;
		return (_entry = s.Objects[name], _entry !== undefined ? _entry.v : (go$ptrType(Object)).nil);
	};
	Scope.prototype.Lookup = function(name) { return this.go$val.Lookup(name); };
	Scope.Ptr.prototype.Insert = function(obj) {
		var alt, s, _entry, _key;
		alt = (go$ptrType(Object)).nil;
		s = this;
		if (alt = (_entry = s.Objects[obj.Name], _entry !== undefined ? _entry.v : (go$ptrType(Object)).nil), alt === (go$ptrType(Object)).nil) {
			_key = obj.Name, (s.Objects || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: obj };
		}
		return alt;
	};
	Scope.prototype.Insert = function(obj) { return this.go$val.Insert(obj); };
	Scope.Ptr.prototype.String = function() {
		var s, buf, _ref, _i, _keys, _entry, obj;
		s = this;
		buf = new bytes.Buffer.Ptr();
		fmt.Fprintf(buf, "scope %p {", new (go$sliceType(go$emptyInterface))([s]));
		if (!(s === (go$ptrType(Scope)).nil) && go$keys(s.Objects).length > 0) {
			fmt.Fprintln(buf, new (go$sliceType(go$emptyInterface))([]));
			_ref = s.Objects;
			_i = 0;
			_keys = go$keys(_ref);
			while (_i < _keys.length) {
				_entry = _ref[_keys[_i]];
				obj = _entry.v;
				fmt.Fprintf(buf, "\t%s %s\n", new (go$sliceType(go$emptyInterface))([new ObjKind(obj.Kind), new Go$String(obj.Name)]));
				_i++;
			}
		}
		fmt.Fprintf(buf, "}\n", new (go$sliceType(go$emptyInterface))([]));
		return buf.String();
	};
	Scope.prototype.String = function() { return this.go$val.String(); };
	NewObj = go$pkg.NewObj = function(kind, name) {
		return new Object.Ptr(kind, name, null, null, null);
	};
	Object.Ptr.prototype.Pos = function() {
		var obj, name, d, _ref, _type, _ref$1, _i, _slice, _index, n, _ref$2, _i$1, _slice$1, _index$1, n$1, _ref$3, _i$2, _slice$2, _index$2, x, isIdent, ident, _tuple;
		obj = this;
		name = obj.Name;
		_ref = obj.Decl;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(Field))) {
			d = _ref.go$val;
			_ref$1 = d.Names;
			_i = 0;
			while (_i < _ref$1.length) {
				n = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (n.Name === name) {
					return n.Pos();
				}
				_i++;
			}
		} else if (_type === (go$ptrType(ImportSpec))) {
			d = _ref.go$val;
			if (!(d.Name === (go$ptrType(Ident)).nil) && d.Name.Name === name) {
				return d.Name.Pos();
			}
			return d.Path.Pos();
		} else if (_type === (go$ptrType(ValueSpec))) {
			d = _ref.go$val;
			_ref$2 = d.Names;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				n$1 = (_slice$1 = _ref$2, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				if (n$1.Name === name) {
					return n$1.Pos();
				}
				_i$1++;
			}
		} else if (_type === (go$ptrType(TypeSpec))) {
			d = _ref.go$val;
			if (d.Name.Name === name) {
				return d.Name.Pos();
			}
		} else if (_type === (go$ptrType(FuncDecl))) {
			d = _ref.go$val;
			if (d.Name.Name === name) {
				return d.Name.Pos();
			}
		} else if (_type === (go$ptrType(LabeledStmt))) {
			d = _ref.go$val;
			if (d.Label.Name === name) {
				return d.Label.Pos();
			}
		} else if (_type === (go$ptrType(AssignStmt))) {
			d = _ref.go$val;
			_ref$3 = d.Lhs;
			_i$2 = 0;
			while (_i$2 < _ref$3.length) {
				x = (_slice$2 = _ref$3, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				if (_tuple = (x !== null && x.constructor === (go$ptrType(Ident)) ? [x.go$val, true] : [(go$ptrType(Ident)).nil, false]), ident = _tuple[0], isIdent = _tuple[1], isIdent && ident.Name === name) {
					return ident.Pos();
				}
				_i$2++;
			}
		}
		return 0;
	};
	Object.prototype.Pos = function() { return this.go$val.Pos(); };
	ObjKind.prototype.String = function() {
		var kind;
		kind = this.go$val;
		return objKindStrings[kind];
	};
	go$ptrType(ObjKind).prototype.String = function() { return new ObjKind(this.go$get()).String(); };
	walkIdentList = function(v, list) {
		var _ref, _i, _slice, _index, x;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			Walk(v, x);
			_i++;
		}
	};
	walkExprList = function(v, list) {
		var _ref, _i, _slice, _index, x;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			Walk(v, x);
			_i++;
		}
	};
	walkStmtList = function(v, list) {
		var _ref, _i, _slice, _index, x;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			Walk(v, x);
			_i++;
		}
	};
	walkDeclList = function(v, list) {
		var _ref, _i, _slice, _index, x;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			Walk(v, x);
			_i++;
		}
	};
	Walk = go$pkg.Walk = function(v, node) {
		var n, _ref, _type, _ref$1, _i, _slice, _index, c, _ref$2, _i$1, _slice$1, _index$1, f, _ref$3, _i$2, _slice$2, _index$2, s, _ref$4, _i$3, _keys, _entry, f$1;
		if (v = v.Visit(node), go$interfaceIsEqual(v, null)) {
			return;
		}
		_ref = node;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(Comment))) {
			n = _ref.go$val;
		} else if (_type === (go$ptrType(CommentGroup))) {
			n = _ref.go$val;
			_ref$1 = n.List;
			_i = 0;
			while (_i < _ref$1.length) {
				c = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				Walk(v, c);
				_i++;
			}
		} else if (_type === (go$ptrType(Field))) {
			n = _ref.go$val;
			if (!(n.Doc === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Doc);
			}
			walkIdentList(v, n.Names);
			Walk(v, n.Type);
			if (!(n.Tag === (go$ptrType(BasicLit)).nil)) {
				Walk(v, n.Tag);
			}
			if (!(n.Comment === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Comment);
			}
		} else if (_type === (go$ptrType(FieldList))) {
			n = _ref.go$val;
			_ref$2 = n.List;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				f = (_slice$1 = _ref$2, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				Walk(v, f);
				_i$1++;
			}
		} else if (_type === (go$ptrType(BadExpr)) || _type === (go$ptrType(Ident)) || _type === (go$ptrType(BasicLit))) {
			n = _ref;
		} else if (_type === (go$ptrType(Ellipsis))) {
			n = _ref.go$val;
			if (!(go$interfaceIsEqual(n.Elt, null))) {
				Walk(v, n.Elt);
			}
		} else if (_type === (go$ptrType(FuncLit))) {
			n = _ref.go$val;
			Walk(v, n.Type);
			Walk(v, n.Body);
		} else if (_type === (go$ptrType(CompositeLit))) {
			n = _ref.go$val;
			if (!(go$interfaceIsEqual(n.Type, null))) {
				Walk(v, n.Type);
			}
			walkExprList(v, n.Elts);
		} else if (_type === (go$ptrType(ParenExpr))) {
			n = _ref.go$val;
			Walk(v, n.X);
		} else if (_type === (go$ptrType(SelectorExpr))) {
			n = _ref.go$val;
			Walk(v, n.X);
			Walk(v, n.Sel);
		} else if (_type === (go$ptrType(IndexExpr))) {
			n = _ref.go$val;
			Walk(v, n.X);
			Walk(v, n.Index);
		} else if (_type === (go$ptrType(SliceExpr))) {
			n = _ref.go$val;
			Walk(v, n.X);
			if (!(go$interfaceIsEqual(n.Low, null))) {
				Walk(v, n.Low);
			}
			if (!(go$interfaceIsEqual(n.High, null))) {
				Walk(v, n.High);
			}
			if (!(go$interfaceIsEqual(n.Max, null))) {
				Walk(v, n.Max);
			}
		} else if (_type === (go$ptrType(TypeAssertExpr))) {
			n = _ref.go$val;
			Walk(v, n.X);
			if (!(go$interfaceIsEqual(n.Type, null))) {
				Walk(v, n.Type);
			}
		} else if (_type === (go$ptrType(CallExpr))) {
			n = _ref.go$val;
			Walk(v, n.Fun);
			walkExprList(v, n.Args);
		} else if (_type === (go$ptrType(StarExpr))) {
			n = _ref.go$val;
			Walk(v, n.X);
		} else if (_type === (go$ptrType(UnaryExpr))) {
			n = _ref.go$val;
			Walk(v, n.X);
		} else if (_type === (go$ptrType(BinaryExpr))) {
			n = _ref.go$val;
			Walk(v, n.X);
			Walk(v, n.Y);
		} else if (_type === (go$ptrType(KeyValueExpr))) {
			n = _ref.go$val;
			Walk(v, n.Key);
			Walk(v, n.Value);
		} else if (_type === (go$ptrType(ArrayType))) {
			n = _ref.go$val;
			if (!(go$interfaceIsEqual(n.Len, null))) {
				Walk(v, n.Len);
			}
			Walk(v, n.Elt);
		} else if (_type === (go$ptrType(StructType))) {
			n = _ref.go$val;
			Walk(v, n.Fields);
		} else if (_type === (go$ptrType(FuncType))) {
			n = _ref.go$val;
			if (!(n.Params === (go$ptrType(FieldList)).nil)) {
				Walk(v, n.Params);
			}
			if (!(n.Results === (go$ptrType(FieldList)).nil)) {
				Walk(v, n.Results);
			}
		} else if (_type === (go$ptrType(InterfaceType))) {
			n = _ref.go$val;
			Walk(v, n.Methods);
		} else if (_type === (go$ptrType(MapType))) {
			n = _ref.go$val;
			Walk(v, n.Key);
			Walk(v, n.Value);
		} else if (_type === (go$ptrType(ChanType))) {
			n = _ref.go$val;
			Walk(v, n.Value);
		} else if (_type === (go$ptrType(BadStmt))) {
			n = _ref.go$val;
		} else if (_type === (go$ptrType(DeclStmt))) {
			n = _ref.go$val;
			Walk(v, n.Decl);
		} else if (_type === (go$ptrType(EmptyStmt))) {
			n = _ref.go$val;
		} else if (_type === (go$ptrType(LabeledStmt))) {
			n = _ref.go$val;
			Walk(v, n.Label);
			Walk(v, n.Stmt);
		} else if (_type === (go$ptrType(ExprStmt))) {
			n = _ref.go$val;
			Walk(v, n.X);
		} else if (_type === (go$ptrType(SendStmt))) {
			n = _ref.go$val;
			Walk(v, n.Chan);
			Walk(v, n.Value);
		} else if (_type === (go$ptrType(IncDecStmt))) {
			n = _ref.go$val;
			Walk(v, n.X);
		} else if (_type === (go$ptrType(AssignStmt))) {
			n = _ref.go$val;
			walkExprList(v, n.Lhs);
			walkExprList(v, n.Rhs);
		} else if (_type === (go$ptrType(GoStmt))) {
			n = _ref.go$val;
			Walk(v, n.Call);
		} else if (_type === (go$ptrType(DeferStmt))) {
			n = _ref.go$val;
			Walk(v, n.Call);
		} else if (_type === (go$ptrType(ReturnStmt))) {
			n = _ref.go$val;
			walkExprList(v, n.Results);
		} else if (_type === (go$ptrType(BranchStmt))) {
			n = _ref.go$val;
			if (!(n.Label === (go$ptrType(Ident)).nil)) {
				Walk(v, n.Label);
			}
		} else if (_type === (go$ptrType(BlockStmt))) {
			n = _ref.go$val;
			walkStmtList(v, n.List);
		} else if (_type === (go$ptrType(IfStmt))) {
			n = _ref.go$val;
			if (!(go$interfaceIsEqual(n.Init, null))) {
				Walk(v, n.Init);
			}
			Walk(v, n.Cond);
			Walk(v, n.Body);
			if (!(go$interfaceIsEqual(n.Else, null))) {
				Walk(v, n.Else);
			}
		} else if (_type === (go$ptrType(CaseClause))) {
			n = _ref.go$val;
			walkExprList(v, n.List);
			walkStmtList(v, n.Body);
		} else if (_type === (go$ptrType(SwitchStmt))) {
			n = _ref.go$val;
			if (!(go$interfaceIsEqual(n.Init, null))) {
				Walk(v, n.Init);
			}
			if (!(go$interfaceIsEqual(n.Tag, null))) {
				Walk(v, n.Tag);
			}
			Walk(v, n.Body);
		} else if (_type === (go$ptrType(TypeSwitchStmt))) {
			n = _ref.go$val;
			if (!(go$interfaceIsEqual(n.Init, null))) {
				Walk(v, n.Init);
			}
			Walk(v, n.Assign);
			Walk(v, n.Body);
		} else if (_type === (go$ptrType(CommClause))) {
			n = _ref.go$val;
			if (!(go$interfaceIsEqual(n.Comm, null))) {
				Walk(v, n.Comm);
			}
			walkStmtList(v, n.Body);
		} else if (_type === (go$ptrType(SelectStmt))) {
			n = _ref.go$val;
			Walk(v, n.Body);
		} else if (_type === (go$ptrType(ForStmt))) {
			n = _ref.go$val;
			if (!(go$interfaceIsEqual(n.Init, null))) {
				Walk(v, n.Init);
			}
			if (!(go$interfaceIsEqual(n.Cond, null))) {
				Walk(v, n.Cond);
			}
			if (!(go$interfaceIsEqual(n.Post, null))) {
				Walk(v, n.Post);
			}
			Walk(v, n.Body);
		} else if (_type === (go$ptrType(RangeStmt))) {
			n = _ref.go$val;
			Walk(v, n.Key);
			if (!(go$interfaceIsEqual(n.Value, null))) {
				Walk(v, n.Value);
			}
			Walk(v, n.X);
			Walk(v, n.Body);
		} else if (_type === (go$ptrType(ImportSpec))) {
			n = _ref.go$val;
			if (!(n.Doc === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Doc);
			}
			if (!(n.Name === (go$ptrType(Ident)).nil)) {
				Walk(v, n.Name);
			}
			Walk(v, n.Path);
			if (!(n.Comment === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Comment);
			}
		} else if (_type === (go$ptrType(ValueSpec))) {
			n = _ref.go$val;
			if (!(n.Doc === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Doc);
			}
			walkIdentList(v, n.Names);
			if (!(go$interfaceIsEqual(n.Type, null))) {
				Walk(v, n.Type);
			}
			walkExprList(v, n.Values);
			if (!(n.Comment === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Comment);
			}
		} else if (_type === (go$ptrType(TypeSpec))) {
			n = _ref.go$val;
			if (!(n.Doc === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Doc);
			}
			Walk(v, n.Name);
			Walk(v, n.Type);
			if (!(n.Comment === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Comment);
			}
		} else if (_type === (go$ptrType(BadDecl))) {
			n = _ref.go$val;
		} else if (_type === (go$ptrType(GenDecl))) {
			n = _ref.go$val;
			if (!(n.Doc === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Doc);
			}
			_ref$3 = n.Specs;
			_i$2 = 0;
			while (_i$2 < _ref$3.length) {
				s = (_slice$2 = _ref$3, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				Walk(v, s);
				_i$2++;
			}
		} else if (_type === (go$ptrType(FuncDecl))) {
			n = _ref.go$val;
			if (!(n.Doc === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Doc);
			}
			if (!(n.Recv === (go$ptrType(FieldList)).nil)) {
				Walk(v, n.Recv);
			}
			Walk(v, n.Name);
			Walk(v, n.Type);
			if (!(n.Body === (go$ptrType(BlockStmt)).nil)) {
				Walk(v, n.Body);
			}
		} else if (_type === (go$ptrType(File))) {
			n = _ref.go$val;
			if (!(n.Doc === (go$ptrType(CommentGroup)).nil)) {
				Walk(v, n.Doc);
			}
			Walk(v, n.Name);
			walkDeclList(v, n.Decls);
		} else if (_type === (go$ptrType(Package))) {
			n = _ref.go$val;
			_ref$4 = n.Files;
			_i$3 = 0;
			_keys = go$keys(_ref$4);
			while (_i$3 < _keys.length) {
				_entry = _ref$4[_keys[_i$3]];
				f$1 = _entry.v;
				Walk(v, f$1);
				_i$3++;
			}
		} else {
			n = _ref;
			fmt.Printf("ast.Walk: unexpected node type %T", new (go$sliceType(go$emptyInterface))([n]));
			throw go$panic(new Go$String("ast.Walk"));
		}
		v.Visit(null);
	};
	inspector.prototype.Visit = function(node) {
		var f;
		f = this.go$val;
		if (f(node)) {
			return new inspector(f);
		}
		return null;
	};
	go$ptrType(inspector).prototype.Visit = function(node) { return new inspector(this.go$get()).Visit(node); };
	Inspect = go$pkg.Inspect = function(node, f) {
		Walk(new inspector(f), node);
	};
	go$pkg.init = function() {
		Node.init([["End", "", (go$funcType([], [token.Pos], false))], ["Pos", "", (go$funcType([], [token.Pos], false))]]);
		Expr.init([["End", "", (go$funcType([], [token.Pos], false))], ["Pos", "", (go$funcType([], [token.Pos], false))], ["exprNode", "go/ast", (go$funcType([], [], false))]]);
		Stmt.init([["End", "", (go$funcType([], [token.Pos], false))], ["Pos", "", (go$funcType([], [token.Pos], false))], ["stmtNode", "go/ast", (go$funcType([], [], false))]]);
		Decl.init([["End", "", (go$funcType([], [token.Pos], false))], ["Pos", "", (go$funcType([], [token.Pos], false))], ["declNode", "go/ast", (go$funcType([], [], false))]]);
		Comment.init([["Slash", "", token.Pos, ""], ["Text", "", Go$String, ""]]);
		(go$ptrType(Comment)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false]];
		CommentGroup.init([["List", "", (go$sliceType((go$ptrType(Comment)))), ""]]);
		(go$ptrType(CommentGroup)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["Text", "", [], [Go$String], false]];
		Field.init([["Doc", "", (go$ptrType(CommentGroup)), ""], ["Names", "", (go$sliceType((go$ptrType(Ident)))), ""], ["Type", "", Expr, ""], ["Tag", "", (go$ptrType(BasicLit)), ""], ["Comment", "", (go$ptrType(CommentGroup)), ""]]);
		(go$ptrType(Field)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false]];
		FieldList.init([["Opening", "", token.Pos, ""], ["List", "", (go$sliceType((go$ptrType(Field)))), ""], ["Closing", "", token.Pos, ""]]);
		(go$ptrType(FieldList)).methods = [["End", "", [], [token.Pos], false], ["NumFields", "", [], [Go$Int], false], ["Pos", "", [], [token.Pos], false]];
		BadExpr.init([["From", "", token.Pos, ""], ["To", "", token.Pos, ""]]);
		(go$ptrType(BadExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		Ident.init([["NamePos", "", token.Pos, ""], ["Name", "", Go$String, ""], ["Obj", "", (go$ptrType(Object)), ""]]);
		(go$ptrType(Ident)).methods = [["End", "", [], [token.Pos], false], ["IsExported", "", [], [Go$Bool], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["exprNode", "go/ast", [], [], false]];
		Ellipsis.init([["Ellipsis", "", token.Pos, ""], ["Elt", "", Expr, ""]]);
		(go$ptrType(Ellipsis)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		BasicLit.init([["ValuePos", "", token.Pos, ""], ["Kind", "", token.Token, ""], ["Value", "", Go$String, ""]]);
		(go$ptrType(BasicLit)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		FuncLit.init([["Type", "", (go$ptrType(FuncType)), ""], ["Body", "", (go$ptrType(BlockStmt)), ""]]);
		(go$ptrType(FuncLit)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		CompositeLit.init([["Type", "", Expr, ""], ["Lbrace", "", token.Pos, ""], ["Elts", "", (go$sliceType(Expr)), ""], ["Rbrace", "", token.Pos, ""]]);
		(go$ptrType(CompositeLit)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		ParenExpr.init([["Lparen", "", token.Pos, ""], ["X", "", Expr, ""], ["Rparen", "", token.Pos, ""]]);
		(go$ptrType(ParenExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		SelectorExpr.init([["X", "", Expr, ""], ["Sel", "", (go$ptrType(Ident)), ""]]);
		(go$ptrType(SelectorExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		IndexExpr.init([["X", "", Expr, ""], ["Lbrack", "", token.Pos, ""], ["Index", "", Expr, ""], ["Rbrack", "", token.Pos, ""]]);
		(go$ptrType(IndexExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		SliceExpr.init([["X", "", Expr, ""], ["Lbrack", "", token.Pos, ""], ["Low", "", Expr, ""], ["High", "", Expr, ""], ["Max", "", Expr, ""], ["Slice3", "", Go$Bool, ""], ["Rbrack", "", token.Pos, ""]]);
		(go$ptrType(SliceExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		TypeAssertExpr.init([["X", "", Expr, ""], ["Lparen", "", token.Pos, ""], ["Type", "", Expr, ""], ["Rparen", "", token.Pos, ""]]);
		(go$ptrType(TypeAssertExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		CallExpr.init([["Fun", "", Expr, ""], ["Lparen", "", token.Pos, ""], ["Args", "", (go$sliceType(Expr)), ""], ["Ellipsis", "", token.Pos, ""], ["Rparen", "", token.Pos, ""]]);
		(go$ptrType(CallExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		StarExpr.init([["Star", "", token.Pos, ""], ["X", "", Expr, ""]]);
		(go$ptrType(StarExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		UnaryExpr.init([["OpPos", "", token.Pos, ""], ["Op", "", token.Token, ""], ["X", "", Expr, ""]]);
		(go$ptrType(UnaryExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		BinaryExpr.init([["X", "", Expr, ""], ["OpPos", "", token.Pos, ""], ["Op", "", token.Token, ""], ["Y", "", Expr, ""]]);
		(go$ptrType(BinaryExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		KeyValueExpr.init([["Key", "", Expr, ""], ["Colon", "", token.Pos, ""], ["Value", "", Expr, ""]]);
		(go$ptrType(KeyValueExpr)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		ArrayType.init([["Lbrack", "", token.Pos, ""], ["Len", "", Expr, ""], ["Elt", "", Expr, ""]]);
		(go$ptrType(ArrayType)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		StructType.init([["Struct", "", token.Pos, ""], ["Fields", "", (go$ptrType(FieldList)), ""], ["Incomplete", "", Go$Bool, ""]]);
		(go$ptrType(StructType)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		FuncType.init([["Func", "", token.Pos, ""], ["Params", "", (go$ptrType(FieldList)), ""], ["Results", "", (go$ptrType(FieldList)), ""]]);
		(go$ptrType(FuncType)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		InterfaceType.init([["Interface", "", token.Pos, ""], ["Methods", "", (go$ptrType(FieldList)), ""], ["Incomplete", "", Go$Bool, ""]]);
		(go$ptrType(InterfaceType)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		MapType.init([["Map", "", token.Pos, ""], ["Key", "", Expr, ""], ["Value", "", Expr, ""]]);
		(go$ptrType(MapType)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		ChanType.init([["Begin", "", token.Pos, ""], ["Arrow", "", token.Pos, ""], ["Dir", "", ChanDir, ""], ["Value", "", Expr, ""]]);
		(go$ptrType(ChanType)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["exprNode", "go/ast", [], [], false]];
		BadStmt.init([["From", "", token.Pos, ""], ["To", "", token.Pos, ""]]);
		(go$ptrType(BadStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		DeclStmt.init([["Decl", "", Decl, ""]]);
		(go$ptrType(DeclStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		EmptyStmt.init([["Semicolon", "", token.Pos, ""]]);
		(go$ptrType(EmptyStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		LabeledStmt.init([["Label", "", (go$ptrType(Ident)), ""], ["Colon", "", token.Pos, ""], ["Stmt", "", Stmt, ""]]);
		(go$ptrType(LabeledStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		ExprStmt.init([["X", "", Expr, ""]]);
		(go$ptrType(ExprStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		SendStmt.init([["Chan", "", Expr, ""], ["Arrow", "", token.Pos, ""], ["Value", "", Expr, ""]]);
		(go$ptrType(SendStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		IncDecStmt.init([["X", "", Expr, ""], ["TokPos", "", token.Pos, ""], ["Tok", "", token.Token, ""]]);
		(go$ptrType(IncDecStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		AssignStmt.init([["Lhs", "", (go$sliceType(Expr)), ""], ["TokPos", "", token.Pos, ""], ["Tok", "", token.Token, ""], ["Rhs", "", (go$sliceType(Expr)), ""]]);
		(go$ptrType(AssignStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		GoStmt.init([["Go", "", token.Pos, ""], ["Call", "", (go$ptrType(CallExpr)), ""]]);
		(go$ptrType(GoStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		DeferStmt.init([["Defer", "", token.Pos, ""], ["Call", "", (go$ptrType(CallExpr)), ""]]);
		(go$ptrType(DeferStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		ReturnStmt.init([["Return", "", token.Pos, ""], ["Results", "", (go$sliceType(Expr)), ""]]);
		(go$ptrType(ReturnStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		BranchStmt.init([["TokPos", "", token.Pos, ""], ["Tok", "", token.Token, ""], ["Label", "", (go$ptrType(Ident)), ""]]);
		(go$ptrType(BranchStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		BlockStmt.init([["Lbrace", "", token.Pos, ""], ["List", "", (go$sliceType(Stmt)), ""], ["Rbrace", "", token.Pos, ""]]);
		(go$ptrType(BlockStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		IfStmt.init([["If", "", token.Pos, ""], ["Init", "", Stmt, ""], ["Cond", "", Expr, ""], ["Body", "", (go$ptrType(BlockStmt)), ""], ["Else", "", Stmt, ""]]);
		(go$ptrType(IfStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		CaseClause.init([["Case", "", token.Pos, ""], ["List", "", (go$sliceType(Expr)), ""], ["Colon", "", token.Pos, ""], ["Body", "", (go$sliceType(Stmt)), ""]]);
		(go$ptrType(CaseClause)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		SwitchStmt.init([["Switch", "", token.Pos, ""], ["Init", "", Stmt, ""], ["Tag", "", Expr, ""], ["Body", "", (go$ptrType(BlockStmt)), ""]]);
		(go$ptrType(SwitchStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		TypeSwitchStmt.init([["Switch", "", token.Pos, ""], ["Init", "", Stmt, ""], ["Assign", "", Stmt, ""], ["Body", "", (go$ptrType(BlockStmt)), ""]]);
		(go$ptrType(TypeSwitchStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		CommClause.init([["Case", "", token.Pos, ""], ["Comm", "", Stmt, ""], ["Colon", "", token.Pos, ""], ["Body", "", (go$sliceType(Stmt)), ""]]);
		(go$ptrType(CommClause)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		SelectStmt.init([["Select", "", token.Pos, ""], ["Body", "", (go$ptrType(BlockStmt)), ""]]);
		(go$ptrType(SelectStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		ForStmt.init([["For", "", token.Pos, ""], ["Init", "", Stmt, ""], ["Cond", "", Expr, ""], ["Post", "", Stmt, ""], ["Body", "", (go$ptrType(BlockStmt)), ""]]);
		(go$ptrType(ForStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		RangeStmt.init([["For", "", token.Pos, ""], ["Key", "", Expr, ""], ["Value", "", Expr, ""], ["TokPos", "", token.Pos, ""], ["Tok", "", token.Token, ""], ["X", "", Expr, ""], ["Body", "", (go$ptrType(BlockStmt)), ""]]);
		(go$ptrType(RangeStmt)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["stmtNode", "go/ast", [], [], false]];
		Spec.init([["End", "", (go$funcType([], [token.Pos], false))], ["Pos", "", (go$funcType([], [token.Pos], false))], ["specNode", "go/ast", (go$funcType([], [], false))]]);
		ImportSpec.init([["Doc", "", (go$ptrType(CommentGroup)), ""], ["Name", "", (go$ptrType(Ident)), ""], ["Path", "", (go$ptrType(BasicLit)), ""], ["Comment", "", (go$ptrType(CommentGroup)), ""], ["EndPos", "", token.Pos, ""]]);
		(go$ptrType(ImportSpec)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["specNode", "go/ast", [], [], false]];
		ValueSpec.init([["Doc", "", (go$ptrType(CommentGroup)), ""], ["Names", "", (go$sliceType((go$ptrType(Ident)))), ""], ["Type", "", Expr, ""], ["Values", "", (go$sliceType(Expr)), ""], ["Comment", "", (go$ptrType(CommentGroup)), ""]]);
		(go$ptrType(ValueSpec)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["specNode", "go/ast", [], [], false]];
		TypeSpec.init([["Doc", "", (go$ptrType(CommentGroup)), ""], ["Name", "", (go$ptrType(Ident)), ""], ["Type", "", Expr, ""], ["Comment", "", (go$ptrType(CommentGroup)), ""]]);
		(go$ptrType(TypeSpec)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["specNode", "go/ast", [], [], false]];
		BadDecl.init([["From", "", token.Pos, ""], ["To", "", token.Pos, ""]]);
		(go$ptrType(BadDecl)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["declNode", "go/ast", [], [], false]];
		GenDecl.init([["Doc", "", (go$ptrType(CommentGroup)), ""], ["TokPos", "", token.Pos, ""], ["Tok", "", token.Token, ""], ["Lparen", "", token.Pos, ""], ["Specs", "", (go$sliceType(Spec)), ""], ["Rparen", "", token.Pos, ""]]);
		(go$ptrType(GenDecl)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["declNode", "go/ast", [], [], false]];
		FuncDecl.init([["Doc", "", (go$ptrType(CommentGroup)), ""], ["Recv", "", (go$ptrType(FieldList)), ""], ["Name", "", (go$ptrType(Ident)), ""], ["Type", "", (go$ptrType(FuncType)), ""], ["Body", "", (go$ptrType(BlockStmt)), ""]]);
		(go$ptrType(FuncDecl)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false], ["declNode", "go/ast", [], [], false]];
		File.init([["Doc", "", (go$ptrType(CommentGroup)), ""], ["Package", "", token.Pos, ""], ["Name", "", (go$ptrType(Ident)), ""], ["Decls", "", (go$sliceType(Decl)), ""], ["Scope", "", (go$ptrType(Scope)), ""], ["Imports", "", (go$sliceType((go$ptrType(ImportSpec)))), ""], ["Unresolved", "", (go$sliceType((go$ptrType(Ident)))), ""], ["Comments", "", (go$sliceType((go$ptrType(CommentGroup)))), ""]]);
		(go$ptrType(File)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false]];
		Package.init([["Name", "", Go$String, ""], ["Scope", "", (go$ptrType(Scope)), ""], ["Imports", "", (go$mapType(Go$String, (go$ptrType(Object)))), ""], ["Files", "", (go$mapType(Go$String, (go$ptrType(File)))), ""]]);
		(go$ptrType(Package)).methods = [["End", "", [], [token.Pos], false], ["Pos", "", [], [token.Pos], false]];
		posSpan.init([["Start", "", token.Pos, ""], ["End", "", token.Pos, ""]]);
		byImportSpec.init(Spec);
		byImportSpec.methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(byImportSpec)).methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		byCommentPos.init((go$ptrType(CommentGroup)));
		byCommentPos.methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(byCommentPos)).methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		Scope.init([["Outer", "", (go$ptrType(Scope)), ""], ["Objects", "", (go$mapType(Go$String, (go$ptrType(Object)))), ""]]);
		(go$ptrType(Scope)).methods = [["Insert", "", [(go$ptrType(Object))], [(go$ptrType(Object))], false], ["Lookup", "", [Go$String], [(go$ptrType(Object))], false], ["String", "", [], [Go$String], false]];
		Object.init([["Kind", "", ObjKind, ""], ["Name", "", Go$String, ""], ["Decl", "", go$emptyInterface, ""], ["Data", "", go$emptyInterface, ""], ["Type", "", go$emptyInterface, ""]]);
		(go$ptrType(Object)).methods = [["Pos", "", [], [token.Pos], false]];
		ObjKind.methods = [["String", "", [], [Go$String], false]];
		(go$ptrType(ObjKind)).methods = [["String", "", [], [Go$String], false]];
		Visitor.init([["Visit", "", (go$funcType([Node], [Visitor], false))]]);
		inspector.init([Node], [Go$Bool], false);
		inspector.methods = [["Visit", "", [Node], [Visitor], false]];
		(go$ptrType(inspector)).methods = [["Visit", "", [Node], [Visitor], false]];
		objKindStrings = go$toNativeArray("String", ["bad", "package", "const", "type", "var", "func", "label"]);
	}
	return go$pkg;
})();
go$packages["io/ioutil"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], io = go$packages["io"], os = go$packages["os"], sort = go$packages["sort"], filepath = go$packages["path/filepath"], strconv = go$packages["strconv"], sync = go$packages["sync"], time = go$packages["time"], byName, readAll, ReadFile, ReadDir, blackHoleBuf;
	byName = go$pkg.byName = go$newType(0, "Slice", "ioutil.byName", "byName", "io/ioutil", null);
	readAll = function(r, capacity) {
		var b, err, buf, _tuple, _tuple$1;
		b = (go$sliceType(Go$Uint8)).nil;
		err = null;
		var go$deferred = [];
		try {
			buf = bytes.NewBuffer((go$sliceType(Go$Uint8)).make(0, go$flatten64(capacity), function() { return 0; }));
			go$deferred.push({ fun: (function() {
				var e, ok, panicErr, _tuple;
				e = go$recover();
				if (go$interfaceIsEqual(e, null)) {
					return;
				}
				if (_tuple = (e !== null && go$error.implementedBy.indexOf(e.constructor) !== -1 ? [e, true] : [null, false]), panicErr = _tuple[0], ok = _tuple[1], ok && go$interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
					err = panicErr;
				} else {
					throw go$panic(e);
				}
			}), args: [] });
			_tuple = buf.ReadFrom(r), err = _tuple[1];
			_tuple$1 = [buf.Bytes(), err], b = _tuple$1[0], err = _tuple$1[1];
			return [b, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [b, err];
		}
	};
	ReadFile = go$pkg.ReadFile = function(filename) {
		var _tuple, f, err, n, err$1, _tuple$1, fi, size;
		var go$deferred = [];
		try {
			_tuple = os.Open(filename), f = _tuple[0], err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$sliceType(Go$Uint8)).nil, err];
			}
			go$deferred.push({ recv: f, method: "Close", args: [] });
			n = new Go$Int64(0, 0);
			if (_tuple$1 = f.Stat(), fi = _tuple$1[0], err$1 = _tuple$1[1], go$interfaceIsEqual(err$1, null)) {
				if (size = fi.Size(), (size.high < 0 || (size.high === 0 && size.low < 1000000000))) {
					n = size;
				}
			}
			return readAll(f, new Go$Int64(n.high + 0, n.low + 512));
		} catch(go$err) {
			go$pushErr(go$err);
			return [(go$sliceType(Go$Uint8)).nil, null];
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	byName.prototype.Len = function() {
		var f;
		f = this;
		return f.length;
	};
	go$ptrType(byName).prototype.Len = function() { return this.go$get().Len(); };
	byName.prototype.Less = function(i, j) {
		var f, _slice, _index, _slice$1, _index$1;
		f = this;
		return (_slice = f, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Name() < (_slice$1 = f, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Name();
	};
	go$ptrType(byName).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	byName.prototype.Swap = function(i, j) {
		var f, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		f = this;
		_tuple = [(_slice = f, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = f, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _slice$2 = f, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = f, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(byName).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	ReadDir = go$pkg.ReadDir = function(dirname) {
		var _tuple, f, err, _tuple$1, list;
		_tuple = os.Open(dirname), f = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$sliceType(os.FileInfo)).nil, err];
		}
		_tuple$1 = f.Readdir(-1), list = _tuple$1[0], err = _tuple$1[1];
		f.Close();
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$sliceType(os.FileInfo)).nil, err];
		}
		sort.Sort(go$subslice(new byName(list.array), list.offset, list.offset + list.length));
		return [list, null];
	};

			var blackHoles = [];
			go$pkg.init = function() {
		byName.init(os.FileInfo);
		byName.methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(byName)).methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		blackHoleBuf = new (go$chanType((go$sliceType(Go$Uint8)), false, false))();
	}
	return go$pkg;
})();
go$packages["go/parser"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], errors = go$packages["errors"], ast = go$packages["go/ast"], token = go$packages["go/token"], io = go$packages["io"], ioutil = go$packages["io/ioutil"], os = go$packages["os"], filepath = go$packages["path/filepath"], strings = go$packages["strings"], fmt = go$packages["fmt"], scanner = go$packages["go/scanner"], strconv = go$packages["strconv"], unicode = go$packages["unicode"], Mode, parser, bailout, parseSpecFunction, readSource, ParseFile, ParseExpr, trace, un, assert, syncStmt, syncDecl, isTypeName, isLiteralType, deref, unparen, isTypeSwitchAssert, isTypeSwitchGuard, isValidImport, unresolved;
	Mode = go$pkg.Mode = go$newType(4, "Uint", "parser.Mode", "Mode", "go/parser", null);
	parser = go$pkg.parser = go$newType(0, "Struct", "parser.parser", "parser", "go/parser", function(file_, errors_, scanner_, mode_, trace_, indent_, comments_, leadComment_, lineComment_, pos_, tok_, lit_, syncPos_, syncCnt_, exprLev_, inRhs_, pkgScope_, topScope_, unresolved_, imports_, labelScope_, targetStack_) {
		this.go$val = this;
		this.file = file_ !== undefined ? file_ : (go$ptrType(token.File)).nil;
		this.errors = errors_ !== undefined ? errors_ : scanner.ErrorList.nil;
		this.scanner = scanner_ !== undefined ? scanner_ : new scanner.Scanner.Ptr();
		this.mode = mode_ !== undefined ? mode_ : 0;
		this.trace = trace_ !== undefined ? trace_ : false;
		this.indent = indent_ !== undefined ? indent_ : 0;
		this.comments = comments_ !== undefined ? comments_ : (go$sliceType((go$ptrType(ast.CommentGroup)))).nil;
		this.leadComment = leadComment_ !== undefined ? leadComment_ : (go$ptrType(ast.CommentGroup)).nil;
		this.lineComment = lineComment_ !== undefined ? lineComment_ : (go$ptrType(ast.CommentGroup)).nil;
		this.pos = pos_ !== undefined ? pos_ : 0;
		this.tok = tok_ !== undefined ? tok_ : 0;
		this.lit = lit_ !== undefined ? lit_ : "";
		this.syncPos = syncPos_ !== undefined ? syncPos_ : 0;
		this.syncCnt = syncCnt_ !== undefined ? syncCnt_ : 0;
		this.exprLev = exprLev_ !== undefined ? exprLev_ : 0;
		this.inRhs = inRhs_ !== undefined ? inRhs_ : false;
		this.pkgScope = pkgScope_ !== undefined ? pkgScope_ : (go$ptrType(ast.Scope)).nil;
		this.topScope = topScope_ !== undefined ? topScope_ : (go$ptrType(ast.Scope)).nil;
		this.unresolved = unresolved_ !== undefined ? unresolved_ : (go$sliceType((go$ptrType(ast.Ident)))).nil;
		this.imports = imports_ !== undefined ? imports_ : (go$sliceType((go$ptrType(ast.ImportSpec)))).nil;
		this.labelScope = labelScope_ !== undefined ? labelScope_ : (go$ptrType(ast.Scope)).nil;
		this.targetStack = targetStack_ !== undefined ? targetStack_ : (go$sliceType((go$sliceType((go$ptrType(ast.Ident)))))).nil;
	});
	bailout = go$pkg.bailout = go$newType(0, "Struct", "parser.bailout", "bailout", "go/parser", function() {
		this.go$val = this;
	});
	parseSpecFunction = go$pkg.parseSpecFunction = go$newType(0, "Func", "parser.parseSpecFunction", "parseSpecFunction", "go/parser", null);
	readSource = function(filename, src) {
		var s, _ref, _type, buf, err, _tuple;
		if (!(go$interfaceIsEqual(src, null))) {
			_ref = src;
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === Go$String) {
				s = _ref.go$val;
				return [new (go$sliceType(Go$Uint8))(go$stringToBytes(s)), null];
			} else if (_type === (go$sliceType(Go$Uint8))) {
				s = _ref.go$val;
				return [s, null];
			} else if (_type === (go$ptrType(bytes.Buffer))) {
				s = _ref.go$val;
				if (!(s === (go$ptrType(bytes.Buffer)).nil)) {
					return [s.Bytes(), null];
				}
			} else if (io.Reader.implementedBy.indexOf(_type) !== -1) {
				s = _ref;
				buf = new bytes.Buffer.Ptr();
				if (_tuple = io.Copy(buf, s), err = _tuple[1], !(go$interfaceIsEqual(err, null))) {
					return [(go$sliceType(Go$Uint8)).nil, err];
				}
				return [buf.Bytes(), null];
			}
			return [(go$sliceType(Go$Uint8)).nil, errors.New("invalid source")];
		}
		return ioutil.ReadFile(filename);
	};
	ParseFile = go$pkg.ParseFile = function(fset, filename, src, mode) {
		var f, err, _tuple, text, _tuple$1, p;
		f = (go$ptrType(ast.File)).nil;
		err = null;
		var go$deferred = [];
		try {
			_tuple = readSource(filename, src), text = _tuple[0], err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				_tuple$1 = [(go$ptrType(ast.File)).nil, err], f = _tuple$1[0], err = _tuple$1[1];
				return [f, err];
			}
			p = new parser.Ptr();
			go$deferred.push({ fun: (function() {
				var e;
				if (e = go$recover(), !(go$interfaceIsEqual(e, null))) {
				}
				if (f === (go$ptrType(ast.File)).nil) {
					f = new ast.File.Ptr((go$ptrType(ast.CommentGroup)).nil, 0, new ast.Ident.Ptr(), (go$sliceType(ast.Decl)).nil, ast.NewScope((go$ptrType(ast.Scope)).nil), (go$sliceType((go$ptrType(ast.ImportSpec)))).nil, (go$sliceType((go$ptrType(ast.Ident)))).nil, (go$sliceType((go$ptrType(ast.CommentGroup)))).nil);
				}
				p.errors.Sort();
				err = p.errors.Err();
			}), args: [] });
			p.init(fset, filename, text, mode);
			f = p.parseFile();
			return [f, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [f, err];
		}
	};
	ParseExpr = go$pkg.ParseExpr = function(x) {
		var p, e;
		p = new parser.Ptr();
		p.init(token.NewFileSet(), "", new (go$sliceType(Go$Uint8))(go$stringToBytes(x)), 0);
		p.openScope();
		p.pkgScope = p.topScope;
		e = p.parseRhsOrType();
		p.closeScope();
		assert(p.topScope === (go$ptrType(ast.Scope)).nil, "unbalanced scopes");
		if (p.errors.Len() > 0) {
			p.errors.Sort();
			return [null, p.errors.Err()];
		}
		return [e, null];
	};
	parser.Ptr.prototype.init = function(fset, filename, src, mode) {
		var p, m, eh;
		p = this;
		p.file = fset.AddFile(filename, -1, src.length);
		m = 0;
		if (!((((mode & 4) >>> 0) === 0))) {
			m = 1;
		}
		eh = (function(pos, msg) {
			var v, _struct;
			(new (go$ptrType(scanner.ErrorList))(function() { return p.errors; }, function(v) { p.errors = v; })).Add((_struct = pos, new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)), msg);
		});
		p.scanner.Init(p.file, src, eh, m);
		p.mode = mode;
		p.trace = !((((mode & 8) >>> 0) === 0));
		p.next();
	};
	parser.prototype.init = function(fset, filename, src, mode) { return this.go$val.init(fset, filename, src, mode); };
	parser.Ptr.prototype.openScope = function() {
		var p;
		p = this;
		p.topScope = ast.NewScope(p.topScope);
	};
	parser.prototype.openScope = function() { return this.go$val.openScope(); };
	parser.Ptr.prototype.closeScope = function() {
		var p;
		p = this;
		p.topScope = p.topScope.Outer;
	};
	parser.prototype.closeScope = function() { return this.go$val.closeScope(); };
	parser.Ptr.prototype.openLabelScope = function() {
		var p;
		p = this;
		p.labelScope = ast.NewScope(p.labelScope);
		p.targetStack = go$append(p.targetStack, (go$sliceType((go$ptrType(ast.Ident)))).nil);
	};
	parser.prototype.openLabelScope = function() { return this.go$val.openLabelScope(); };
	parser.Ptr.prototype.closeLabelScope = function() {
		var p, n, scope, _ref, _slice, _index, _i, _slice$1, _index$1, ident;
		p = this;
		n = p.targetStack.length - 1 >> 0;
		scope = p.labelScope;
		_ref = (_slice = p.targetStack, _index = n, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		_i = 0;
		while (_i < _ref.length) {
			ident = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			ident.Obj = scope.Lookup(ident.Name);
			if (ident.Obj === (go$ptrType(ast.Object)).nil && !((((p.mode & 16) >>> 0) === 0))) {
				p.error(ident.Pos(), fmt.Sprintf("label %s undefined", new (go$sliceType(go$emptyInterface))([new Go$String(ident.Name)])));
			}
			_i++;
		}
		p.targetStack = go$subslice(p.targetStack, 0, n);
		p.labelScope = p.labelScope.Outer;
	};
	parser.prototype.closeLabelScope = function() { return this.go$val.closeLabelScope(); };
	parser.Ptr.prototype.declare = function(decl, data, scope, kind, idents) {
		var p, _ref, _i, _slice, _index, ident, obj, alt, prevDecl, pos, x;
		p = this;
		_ref = idents;
		_i = 0;
		while (_i < _ref.length) {
			ident = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			assert(ident.Obj === (go$ptrType(ast.Object)).nil, "identifier already declared or resolved");
			obj = ast.NewObj(kind, ident.Name);
			obj.Decl = decl;
			obj.Data = data;
			ident.Obj = obj;
			if (!(ident.Name === "_")) {
				if (alt = scope.Insert(obj), !(alt === (go$ptrType(ast.Object)).nil) && !((((p.mode & 16) >>> 0) === 0))) {
					prevDecl = "";
					if (pos = alt.Pos(), (new token.Pos(pos)).IsValid()) {
						prevDecl = fmt.Sprintf("\n\tprevious declaration at %s", new (go$sliceType(go$emptyInterface))([(x = p.file.Position(pos), new x.constructor.Struct(x))]));
					}
					p.error(ident.Pos(), fmt.Sprintf("%s redeclared in this block%s", new (go$sliceType(go$emptyInterface))([new Go$String(ident.Name), new Go$String(prevDecl)])));
				}
			}
			_i++;
		}
	};
	parser.prototype.declare = function(decl, data, scope, kind, idents) { return this.go$val.declare(decl, data, scope, kind, idents); };
	parser.Ptr.prototype.shortVarDecl = function(decl, list) {
		var p, n, _ref, _i, _slice, _index, x, isIdent, _tuple, ident, obj, alt, _slice$1, _index$1;
		p = this;
		n = 0;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (_tuple = (x !== null && x.constructor === (go$ptrType(ast.Ident)) ? [x.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), ident = _tuple[0], isIdent = _tuple[1], isIdent) {
				assert(ident.Obj === (go$ptrType(ast.Object)).nil, "identifier already declared or resolved");
				obj = ast.NewObj(4, ident.Name);
				obj.Decl = decl;
				ident.Obj = obj;
				if (!(ident.Name === "_")) {
					if (alt = p.topScope.Insert(obj), !(alt === (go$ptrType(ast.Object)).nil)) {
						ident.Obj = alt;
					} else {
						n = n + 1 >> 0;
					}
				}
			} else {
				p.errorExpected(x.Pos(), "identifier on left side of :=");
			}
			_i++;
		}
		if ((n === 0) && !((((p.mode & 16) >>> 0) === 0))) {
			p.error((_slice$1 = list, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Pos(), "no new variables on left side of :=");
		}
	};
	parser.prototype.shortVarDecl = function(decl, list) { return this.go$val.shortVarDecl(decl, list); };
	parser.Ptr.prototype.tryResolve = function(x, collectUnresolved) {
		var p, _tuple, ident, s, obj;
		p = this;
		_tuple = (x !== null && x.constructor === (go$ptrType(ast.Ident)) ? [x.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), ident = _tuple[0];
		if (ident === (go$ptrType(ast.Ident)).nil) {
			return;
		}
		assert(ident.Obj === (go$ptrType(ast.Object)).nil, "identifier already declared or resolved");
		if (ident.Name === "_") {
			return;
		}
		s = p.topScope;
		while (!(s === (go$ptrType(ast.Scope)).nil)) {
			if (obj = s.Lookup(ident.Name), !(obj === (go$ptrType(ast.Object)).nil)) {
				ident.Obj = obj;
				return;
			}
			s = s.Outer;
		}
		if (collectUnresolved) {
			ident.Obj = unresolved;
			p.unresolved = go$append(p.unresolved, ident);
		}
	};
	parser.prototype.tryResolve = function(x, collectUnresolved) { return this.go$val.tryResolve(x, collectUnresolved); };
	parser.Ptr.prototype.resolve = function(x) {
		var p;
		p = this;
		p.tryResolve(x, true);
	};
	parser.prototype.resolve = function(x) { return this.go$val.resolve(x); };
	parser.Ptr.prototype.printTrace = function(a) {
		var p, _struct, pos, x, x$1, i;
		p = this;
		pos = (_struct = p.file.Position(p.pos), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
		fmt.Printf("%5d:%3d: ", new (go$sliceType(go$emptyInterface))([new Go$Int(pos.Line), new Go$Int(pos.Column)]));
		i = (x = 2, x$1 = p.indent, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		while (i > 64) {
			fmt.Print(new (go$sliceType(go$emptyInterface))([new Go$String(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ")]));
			i = i - 64 >> 0;
		}
		fmt.Print(new (go$sliceType(go$emptyInterface))([new Go$String(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ".substring(0, i))]));
		fmt.Println(a);
	};
	parser.prototype.printTrace = function(a) { return this.go$val.printTrace(a); };
	trace = function(p, msg) {
		p.printTrace(new (go$sliceType(go$emptyInterface))([new Go$String(msg), new Go$String("(")]));
		p.indent = p.indent + 1 >> 0;
		return p;
	};
	un = function(p) {
		p.indent = p.indent - 1 >> 0;
		p.printTrace(new (go$sliceType(go$emptyInterface))([new Go$String(")")]));
	};
	parser.Ptr.prototype.next0 = function() {
		var p, s, _tuple;
		p = this;
		if (p.trace && (new token.Pos(p.pos)).IsValid()) {
			s = (new token.Token(p.tok)).String();
			if ((new token.Token(p.tok)).IsLiteral()) {
				p.printTrace(new (go$sliceType(go$emptyInterface))([new Go$String(s), new Go$String(p.lit)]));
			} else if ((new token.Token(p.tok)).IsOperator() || (new token.Token(p.tok)).IsKeyword()) {
				p.printTrace(new (go$sliceType(go$emptyInterface))([new Go$String("\"" + s + "\"")]));
			} else {
				p.printTrace(new (go$sliceType(go$emptyInterface))([new Go$String(s)]));
			}
		}
		_tuple = p.scanner.Scan(), p.pos = _tuple[0], p.tok = _tuple[1], p.lit = _tuple[2];
	};
	parser.prototype.next0 = function() { return this.go$val.next0(); };
	parser.Ptr.prototype.consumeComment = function() {
		var comment, endline, p, i;
		comment = (go$ptrType(ast.Comment)).nil;
		endline = 0;
		p = this;
		endline = p.file.Line(p.pos);
		if (p.lit.charCodeAt(1) === 42) {
			i = 0;
			while (i < p.lit.length) {
				if (p.lit.charCodeAt(i) === 10) {
					endline = endline + 1 >> 0;
				}
				i = i + 1 >> 0;
			}
		}
		comment = new ast.Comment.Ptr(p.pos, p.lit);
		p.next0();
		return [comment, endline];
	};
	parser.prototype.consumeComment = function() { return this.go$val.consumeComment(); };
	parser.Ptr.prototype.consumeCommentGroup = function(n) {
		var comments, endline, p, list, comment, _tuple;
		comments = (go$ptrType(ast.CommentGroup)).nil;
		endline = 0;
		p = this;
		list = (go$sliceType((go$ptrType(ast.Comment)))).nil;
		endline = p.file.Line(p.pos);
		while ((p.tok === 2) && p.file.Line(p.pos) <= (endline + n >> 0)) {
			comment = (go$ptrType(ast.Comment)).nil;
			_tuple = p.consumeComment(), comment = _tuple[0], endline = _tuple[1];
			list = go$append(list, comment);
		}
		comments = new ast.CommentGroup.Ptr(list);
		p.comments = go$append(p.comments, comments);
		return [comments, endline];
	};
	parser.prototype.consumeCommentGroup = function(n) { return this.go$val.consumeCommentGroup(n); };
	parser.Ptr.prototype.next = function() {
		var p, prev, comment, endline, _tuple, _tuple$1;
		p = this;
		p.leadComment = (go$ptrType(ast.CommentGroup)).nil;
		p.lineComment = (go$ptrType(ast.CommentGroup)).nil;
		prev = p.pos;
		p.next0();
		if (p.tok === 2) {
			comment = (go$ptrType(ast.CommentGroup)).nil;
			endline = 0;
			if (p.file.Line(p.pos) === p.file.Line(prev)) {
				_tuple = p.consumeCommentGroup(0), comment = _tuple[0], endline = _tuple[1];
				if (!((p.file.Line(p.pos) === endline))) {
					p.lineComment = comment;
				}
			}
			endline = -1;
			while (p.tok === 2) {
				_tuple$1 = p.consumeCommentGroup(1), comment = _tuple$1[0], endline = _tuple$1[1];
			}
			if ((endline + 1 >> 0) === p.file.Line(p.pos)) {
				p.leadComment = comment;
			}
		}
	};
	parser.prototype.next = function() { return this.go$val.next(); };
	parser.Ptr.prototype.error = function(pos, msg) {
		var p, _struct, epos, n, _slice, _index, x, v, _struct$1;
		p = this;
		epos = (_struct = p.file.Position(pos), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
		if (((p.mode & 32) >>> 0) === 0) {
			n = p.errors.length;
			if (n > 0 && ((_slice = p.errors, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos.Line === epos.Line)) {
				return;
			}
			if (n > 10) {
				throw go$panic((x = new bailout.Ptr(), new x.constructor.Struct(x)));
			}
		}
		(new (go$ptrType(scanner.ErrorList))(function() { return p.errors; }, function(v) { p.errors = v; })).Add((_struct$1 = epos, new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column)), msg);
	};
	parser.prototype.error = function(pos, msg) { return this.go$val.error(pos, msg); };
	parser.Ptr.prototype.errorExpected = function(pos, msg) {
		var p;
		p = this;
		msg = "expected " + msg;
		if (pos === p.pos) {
			if ((p.tok === 57) && p.lit === "\n") {
				msg = msg + ", found newline";
			} else {
				msg = msg + (", found '" + (new token.Token(p.tok)).String() + "'");
				if ((new token.Token(p.tok)).IsLiteral()) {
					msg = msg + (" " + p.lit);
				}
			}
		}
		p.error(pos, msg);
	};
	parser.prototype.errorExpected = function(pos, msg) { return this.go$val.errorExpected(pos, msg); };
	parser.Ptr.prototype.expect = function(tok) {
		var p, pos;
		p = this;
		pos = p.pos;
		if (!((p.tok === tok))) {
			p.errorExpected(pos, "'" + (new token.Token(tok)).String() + "'");
		}
		p.next();
		return pos;
	};
	parser.prototype.expect = function(tok) { return this.go$val.expect(tok); };
	parser.Ptr.prototype.expectClosing = function(tok, context) {
		var p;
		p = this;
		if (!((p.tok === tok)) && (p.tok === 57) && p.lit === "\n") {
			p.error(p.pos, "missing ',' before newline in " + context);
			p.next();
		}
		return p.expect(tok);
	};
	parser.prototype.expectClosing = function(tok, context) { return this.go$val.expectClosing(tok, context); };
	parser.Ptr.prototype.expectSemi = function() {
		var p;
		p = this;
		if (!((p.tok === 54)) && !((p.tok === 56))) {
			if (p.tok === 57) {
				p.next();
			} else {
				p.errorExpected(p.pos, "';'");
				syncStmt(p);
			}
		}
	};
	parser.prototype.expectSemi = function() { return this.go$val.expectSemi(); };
	parser.Ptr.prototype.atComma = function(context) {
		var p;
		p = this;
		if (p.tok === 52) {
			return true;
		}
		if ((p.tok === 57) && p.lit === "\n") {
			p.error(p.pos, "missing ',' before newline in " + context);
			return true;
		}
		return false;
	};
	parser.prototype.atComma = function(context) { return this.go$val.atComma(context); };
	assert = function(cond, msg) {
		if (!cond) {
			throw go$panic(new Go$String("go/parser internal error: " + msg));
		}
	};
	syncStmt = function(p) {
		var _ref;
		while (true) {
			_ref = p.tok;
			if (_ref === 61 || _ref === 64 || _ref === 65 || _ref === 67 || _ref === 69 || _ref === 70 || _ref === 72 || _ref === 73 || _ref === 74 || _ref === 80 || _ref === 81 || _ref === 83 || _ref === 84 || _ref === 85) {
				if ((p.pos === p.syncPos) && p.syncCnt < 10) {
					p.syncCnt = p.syncCnt + 1 >> 0;
					return;
				}
				if (p.pos > p.syncPos) {
					p.syncPos = p.pos;
					p.syncCnt = 0;
					return;
				}
			} else if (_ref === 1) {
				return;
			}
			p.next();
		}
	};
	syncDecl = function(p) {
		var _ref;
		while (true) {
			_ref = p.tok;
			if (_ref === 64 || _ref === 84 || _ref === 85) {
				if ((p.pos === p.syncPos) && p.syncCnt < 10) {
					p.syncCnt = p.syncCnt + 1 >> 0;
					return;
				}
				if (p.pos > p.syncPos) {
					p.syncPos = p.pos;
					p.syncCnt = 0;
					return;
				}
			} else if (_ref === 1) {
				return;
			}
			p.next();
		}
	};
	parser.Ptr.prototype.parseIdent = function() {
		var p, pos, name;
		p = this;
		pos = p.pos;
		name = "_";
		if (p.tok === 4) {
			name = p.lit;
			p.next();
		} else {
			p.expect(4);
		}
		return new ast.Ident.Ptr(pos, name, (go$ptrType(ast.Object)).nil);
	};
	parser.prototype.parseIdent = function() { return this.go$val.parseIdent(); };
	parser.Ptr.prototype.parseIdentList = function() {
		var list, p;
		list = (go$sliceType((go$ptrType(ast.Ident)))).nil;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "IdentList")] });
			}
			list = go$append(list, p.parseIdent());
			while (p.tok === 52) {
				p.next();
				list = go$append(list, p.parseIdent());
			}
			return list;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return list;
		}
	};
	parser.prototype.parseIdentList = function() { return this.go$val.parseIdentList(); };
	parser.Ptr.prototype.parseExprList = function(lhs) {
		var list, p;
		list = (go$sliceType(ast.Expr)).nil;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "ExpressionList")] });
			}
			list = go$append(list, p.checkExpr(p.parseExpr(lhs)));
			while (p.tok === 52) {
				p.next();
				list = go$append(list, p.checkExpr(p.parseExpr(lhs)));
			}
			return list;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return list;
		}
	};
	parser.prototype.parseExprList = function(lhs) { return this.go$val.parseExprList(lhs); };
	parser.Ptr.prototype.parseLhsList = function() {
		var p, old, list, _ref, _ref$1, _i, _slice, _index, x;
		p = this;
		old = p.inRhs;
		p.inRhs = false;
		list = p.parseExprList(true);
		_ref = p.tok;
		if (_ref === 47) {
		} else if (_ref === 58) {
		} else {
			_ref$1 = list;
			_i = 0;
			while (_i < _ref$1.length) {
				x = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				p.resolve(x);
				_i++;
			}
		}
		p.inRhs = old;
		return list;
	};
	parser.prototype.parseLhsList = function() { return this.go$val.parseLhsList(); };
	parser.Ptr.prototype.parseRhsList = function() {
		var p, old, list;
		p = this;
		old = p.inRhs;
		p.inRhs = true;
		list = p.parseExprList(false);
		p.inRhs = old;
		return list;
	};
	parser.prototype.parseRhsList = function() { return this.go$val.parseRhsList(); };
	parser.Ptr.prototype.parseType = function() {
		var p, typ, pos;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Type")] });
			}
			typ = p.tryType();
			if (go$interfaceIsEqual(typ, null)) {
				pos = p.pos;
				p.errorExpected(pos, "type");
				p.next();
				return new ast.BadExpr.Ptr(pos, p.pos);
			}
			return typ;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseType = function() { return this.go$val.parseType(); };
	parser.Ptr.prototype.parseTypeName = function() {
		var p, ident, sel;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "TypeName")] });
			}
			ident = p.parseIdent();
			if (p.tok === 53) {
				p.next();
				p.resolve(ident);
				sel = p.parseIdent();
				return new ast.SelectorExpr.Ptr(ident, sel);
			}
			return ident;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseTypeName = function() { return this.go$val.parseTypeName(); };
	parser.Ptr.prototype.parseArrayType = function() {
		var p, lbrack, len, elt;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "ArrayType")] });
			}
			lbrack = p.expect(50);
			len = null;
			if (p.tok === 48) {
				len = new ast.Ellipsis.Ptr(p.pos, null);
				p.next();
			} else if (!((p.tok === 55))) {
				len = p.parseRhs();
			}
			p.expect(55);
			elt = p.parseType();
			return new ast.ArrayType.Ptr(lbrack, len, elt);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseArrayType = function() { return this.go$val.parseArrayType(); };
	parser.Ptr.prototype.makeIdentList = function(list) {
		var p, idents, _ref, _i, _slice, _index, x, i, _tuple, ident, isIdent, isBad, _tuple$1, _slice$1, _index$1;
		p = this;
		idents = (go$sliceType((go$ptrType(ast.Ident)))).make(list.length, 0, function() { return (go$ptrType(ast.Ident)).nil; });
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_tuple = (x !== null && x.constructor === (go$ptrType(ast.Ident)) ? [x.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), ident = _tuple[0], isIdent = _tuple[1];
			if (!isIdent) {
				if (_tuple$1 = (x !== null && x.constructor === (go$ptrType(ast.BadExpr)) ? [x.go$val, true] : [(go$ptrType(ast.BadExpr)).nil, false]), isBad = _tuple$1[1], !isBad) {
					p.errorExpected(x.Pos(), "identifier");
				}
				ident = new ast.Ident.Ptr(x.Pos(), "_", (go$ptrType(ast.Object)).nil);
			}
			_slice$1 = idents, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = ident) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return idents;
	};
	parser.prototype.makeIdentList = function(list) { return this.go$val.makeIdentList(list); };
	parser.Ptr.prototype.parseFieldDecl = function(scope) {
		var p, doc, _tuple, list, typ, tag, idents, _slice, _index, n, pos, _slice$1, _index$1, field;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "FieldDecl")] });
			}
			doc = p.leadComment;
			_tuple = p.parseVarList(false), list = _tuple[0], typ = _tuple[1];
			tag = (go$ptrType(ast.BasicLit)).nil;
			if (p.tok === 9) {
				tag = new ast.BasicLit.Ptr(p.pos, p.tok, p.lit);
				p.next();
			}
			idents = (go$sliceType((go$ptrType(ast.Ident)))).nil;
			if (!(go$interfaceIsEqual(typ, null))) {
				idents = p.makeIdentList(list);
			} else {
				typ = (_slice = list, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (n = list.length, n > 1 || !isTypeName(deref(typ))) {
					pos = typ.Pos();
					p.errorExpected(pos, "anonymous field");
					typ = new ast.BadExpr.Ptr(pos, (_slice$1 = list, _index$1 = (n - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).End());
				}
			}
			p.expectSemi();
			field = new ast.Field.Ptr(doc, idents, typ, tag, p.lineComment);
			p.declare(field, null, scope, 4, idents);
			p.resolve(typ);
			return field;
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.Field)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseFieldDecl = function(scope) { return this.go$val.parseFieldDecl(scope); };
	parser.Ptr.prototype.parseStructType = function() {
		var p, pos, lbrace, scope, list, rbrace;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "StructType")] });
			}
			pos = p.expect(82);
			lbrace = p.expect(51);
			scope = ast.NewScope((go$ptrType(ast.Scope)).nil);
			list = (go$sliceType((go$ptrType(ast.Field)))).nil;
			while ((p.tok === 4) || (p.tok === 14) || (p.tok === 49)) {
				list = go$append(list, p.parseFieldDecl(scope));
			}
			rbrace = p.expect(56);
			return new ast.StructType.Ptr(pos, new ast.FieldList.Ptr(lbrace, list, rbrace), false);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.StructType)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseStructType = function() { return this.go$val.parseStructType(); };
	parser.Ptr.prototype.parsePointerType = function() {
		var p, star, base;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "PointerType")] });
			}
			star = p.expect(14);
			base = p.parseType();
			return new ast.StarExpr.Ptr(star, base);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.StarExpr)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parsePointerType = function() { return this.go$val.parsePointerType(); };
	parser.Ptr.prototype.tryVarType = function(isParam) {
		var p, pos, typ;
		p = this;
		if (isParam && (p.tok === 48)) {
			pos = p.pos;
			p.next();
			typ = p.tryIdentOrType();
			if (!(go$interfaceIsEqual(typ, null))) {
				p.resolve(typ);
			} else {
				p.error(pos, "'...' parameter is missing type");
				typ = new ast.BadExpr.Ptr(pos, p.pos);
			}
			return new ast.Ellipsis.Ptr(pos, typ);
		}
		return p.tryIdentOrType();
	};
	parser.prototype.tryVarType = function(isParam) { return this.go$val.tryVarType(isParam); };
	parser.Ptr.prototype.parseVarType = function(isParam) {
		var p, typ, pos;
		p = this;
		typ = p.tryVarType(isParam);
		if (go$interfaceIsEqual(typ, null)) {
			pos = p.pos;
			p.errorExpected(pos, "type");
			p.next();
			typ = new ast.BadExpr.Ptr(pos, p.pos);
		}
		return typ;
	};
	parser.prototype.parseVarType = function(isParam) { return this.go$val.parseVarType(isParam); };
	parser.Ptr.prototype.parseVarList = function(isParam) {
		var list, typ, p, typ$1;
		list = (go$sliceType(ast.Expr)).nil;
		typ = null;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "VarList")] });
			}
			typ$1 = p.parseVarType(isParam);
			while (!(go$interfaceIsEqual(typ$1, null))) {
				list = go$append(list, typ$1);
				if (!((p.tok === 52))) {
					break;
				}
				p.next();
				typ$1 = p.tryVarType(isParam);
			}
			typ = p.tryVarType(isParam);
			return [list, typ];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [list, typ];
		}
	};
	parser.prototype.parseVarList = function(isParam) { return this.go$val.parseVarList(isParam); };
	parser.Ptr.prototype.parseParameterList = function(scope, ellipsisOk) {
		var params, p, _tuple, list, typ, idents, field, idents$1, typ$1, field$1, _ref, _i, _slice, _index, typ$2, i, _slice$1, _index$1;
		params = (go$sliceType((go$ptrType(ast.Field)))).nil;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "ParameterList")] });
			}
			_tuple = p.parseVarList(ellipsisOk), list = _tuple[0], typ = _tuple[1];
			if (!(go$interfaceIsEqual(typ, null))) {
				idents = p.makeIdentList(list);
				field = new ast.Field.Ptr((go$ptrType(ast.CommentGroup)).nil, idents, typ, (go$ptrType(ast.BasicLit)).nil, (go$ptrType(ast.CommentGroup)).nil);
				params = go$append(params, field);
				p.declare(field, null, scope, 4, idents);
				p.resolve(typ);
				if (p.tok === 52) {
					p.next();
				}
				while (!((p.tok === 54)) && !((p.tok === 1))) {
					idents$1 = p.parseIdentList();
					typ$1 = p.parseVarType(ellipsisOk);
					field$1 = new ast.Field.Ptr((go$ptrType(ast.CommentGroup)).nil, idents$1, typ$1, (go$ptrType(ast.BasicLit)).nil, (go$ptrType(ast.CommentGroup)).nil);
					params = go$append(params, field$1);
					p.declare(field$1, null, scope, 4, idents$1);
					p.resolve(typ$1);
					if (!p.atComma("parameter list")) {
						break;
					}
					p.next();
				}
			} else {
				params = (go$sliceType((go$ptrType(ast.Field)))).make(list.length, 0, function() { return (go$ptrType(ast.Field)).nil; });
				_ref = list;
				_i = 0;
				while (_i < _ref.length) {
					typ$2 = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					i = _i;
					p.resolve(typ$2);
					_slice$1 = params, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = new ast.Field.Ptr((go$ptrType(ast.CommentGroup)).nil, (go$sliceType((go$ptrType(ast.Ident)))).nil, typ$2, (go$ptrType(ast.BasicLit)).nil, (go$ptrType(ast.CommentGroup)).nil)) : go$throwRuntimeError("index out of range");
					_i++;
				}
			}
			return params;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return params;
		}
	};
	parser.prototype.parseParameterList = function(scope, ellipsisOk) { return this.go$val.parseParameterList(scope, ellipsisOk); };
	parser.Ptr.prototype.parseParameters = function(scope, ellipsisOk) {
		var p, params, lparen, rparen;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Parameters")] });
			}
			params = (go$sliceType((go$ptrType(ast.Field)))).nil;
			lparen = p.expect(49);
			if (!((p.tok === 54))) {
				params = p.parseParameterList(scope, ellipsisOk);
			}
			rparen = p.expect(54);
			return new ast.FieldList.Ptr(lparen, params, rparen);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.FieldList)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseParameters = function(scope, ellipsisOk) { return this.go$val.parseParameters(scope, ellipsisOk); };
	parser.Ptr.prototype.parseResult = function(scope) {
		var p, typ, list, _slice, _index;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Result")] });
			}
			if (p.tok === 49) {
				return p.parseParameters(scope, false);
			}
			typ = p.tryType();
			if (!(go$interfaceIsEqual(typ, null))) {
				list = (go$sliceType((go$ptrType(ast.Field)))).make(1, 0, function() { return (go$ptrType(ast.Field)).nil; });
				_slice = list, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = new ast.Field.Ptr((go$ptrType(ast.CommentGroup)).nil, (go$sliceType((go$ptrType(ast.Ident)))).nil, typ, (go$ptrType(ast.BasicLit)).nil, (go$ptrType(ast.CommentGroup)).nil)) : go$throwRuntimeError("index out of range");
				return new ast.FieldList.Ptr(0, list, 0);
			}
			return (go$ptrType(ast.FieldList)).nil;
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.FieldList)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseResult = function(scope) { return this.go$val.parseResult(scope); };
	parser.Ptr.prototype.parseSignature = function(scope) {
		var params, results, p;
		params = (go$ptrType(ast.FieldList)).nil;
		results = (go$ptrType(ast.FieldList)).nil;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Signature")] });
			}
			params = p.parseParameters(scope, true);
			results = p.parseResult(scope);
			return [params, results];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [params, results];
		}
	};
	parser.prototype.parseSignature = function(scope) { return this.go$val.parseSignature(scope); };
	parser.Ptr.prototype.parseFuncType = function() {
		var p, pos, scope, _tuple, params, results;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "FuncType")] });
			}
			pos = p.expect(71);
			scope = ast.NewScope(p.topScope);
			_tuple = p.parseSignature(scope), params = _tuple[0], results = _tuple[1];
			return [new ast.FuncType.Ptr(pos, params, results), scope];
		} catch(go$err) {
			go$pushErr(go$err);
			return [(go$ptrType(ast.FuncType)).nil, (go$ptrType(ast.Scope)).nil];
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseFuncType = function() { return this.go$val.parseFuncType(); };
	parser.Ptr.prototype.parseMethodSpec = function(scope) {
		var p, doc, idents, typ, x, isIdent, _tuple, ident, scope$1, _tuple$1, params, results, spec;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "MethodSpec")] });
			}
			doc = p.leadComment;
			idents = (go$sliceType((go$ptrType(ast.Ident)))).nil;
			typ = null;
			x = p.parseTypeName();
			if (_tuple = (x !== null && x.constructor === (go$ptrType(ast.Ident)) ? [x.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), ident = _tuple[0], isIdent = _tuple[1], isIdent && (p.tok === 49)) {
				idents = new (go$sliceType((go$ptrType(ast.Ident))))([ident]);
				scope$1 = ast.NewScope((go$ptrType(ast.Scope)).nil);
				_tuple$1 = p.parseSignature(scope$1), params = _tuple$1[0], results = _tuple$1[1];
				typ = new ast.FuncType.Ptr(0, params, results);
			} else {
				typ = x;
				p.resolve(typ);
			}
			p.expectSemi();
			spec = new ast.Field.Ptr(doc, idents, typ, (go$ptrType(ast.BasicLit)).nil, p.lineComment);
			p.declare(spec, null, scope, 5, idents);
			return spec;
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.Field)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseMethodSpec = function(scope) { return this.go$val.parseMethodSpec(scope); };
	parser.Ptr.prototype.parseInterfaceType = function() {
		var p, pos, lbrace, scope, list, rbrace;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "InterfaceType")] });
			}
			pos = p.expect(76);
			lbrace = p.expect(51);
			scope = ast.NewScope((go$ptrType(ast.Scope)).nil);
			list = (go$sliceType((go$ptrType(ast.Field)))).nil;
			while (p.tok === 4) {
				list = go$append(list, p.parseMethodSpec(scope));
			}
			rbrace = p.expect(56);
			return new ast.InterfaceType.Ptr(pos, new ast.FieldList.Ptr(lbrace, list, rbrace), false);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.InterfaceType)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseInterfaceType = function() { return this.go$val.parseInterfaceType(); };
	parser.Ptr.prototype.parseMapType = function() {
		var p, pos, key, value;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "MapType")] });
			}
			pos = p.expect(77);
			p.expect(50);
			key = p.parseType();
			p.expect(55);
			value = p.parseType();
			return new ast.MapType.Ptr(pos, key, value);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.MapType)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseMapType = function() { return this.go$val.parseMapType(); };
	parser.Ptr.prototype.parseChanType = function() {
		var p, pos, dir, arrow, value;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "ChanType")] });
			}
			pos = p.pos;
			dir = 3;
			arrow = 0;
			if (p.tok === 63) {
				p.next();
				if (p.tok === 36) {
					arrow = p.pos;
					p.next();
					dir = 1;
				}
			} else {
				arrow = p.expect(36);
				p.expect(63);
				dir = 2;
			}
			value = p.parseType();
			return new ast.ChanType.Ptr(pos, arrow, dir, value);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.ChanType)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseChanType = function() { return this.go$val.parseChanType(); };
	parser.Ptr.prototype.tryIdentOrType = function() {
		var p, _ref, _tuple, typ, lparen, typ$1, rparen;
		p = this;
		_ref = p.tok;
		if (_ref === 4) {
			return p.parseTypeName();
		} else if (_ref === 50) {
			return p.parseArrayType();
		} else if (_ref === 82) {
			return p.parseStructType();
		} else if (_ref === 14) {
			return p.parsePointerType();
		} else if (_ref === 71) {
			_tuple = p.parseFuncType(), typ = _tuple[0];
			return typ;
		} else if (_ref === 76) {
			return p.parseInterfaceType();
		} else if (_ref === 77) {
			return p.parseMapType();
		} else if (_ref === 63 || _ref === 36) {
			return p.parseChanType();
		} else if (_ref === 49) {
			lparen = p.pos;
			p.next();
			typ$1 = p.parseType();
			rparen = p.expect(54);
			return new ast.ParenExpr.Ptr(lparen, typ$1, rparen);
		}
		return null;
	};
	parser.prototype.tryIdentOrType = function() { return this.go$val.tryIdentOrType(); };
	parser.Ptr.prototype.tryType = function() {
		var p, typ;
		p = this;
		typ = p.tryIdentOrType();
		if (!(go$interfaceIsEqual(typ, null))) {
			p.resolve(typ);
		}
		return typ;
	};
	parser.prototype.tryType = function() { return this.go$val.tryType(); };
	parser.Ptr.prototype.parseStmtList = function() {
		var list, p;
		list = (go$sliceType(ast.Stmt)).nil;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "StatementList")] });
			}
			while (!((p.tok === 62)) && !((p.tok === 66)) && !((p.tok === 56)) && !((p.tok === 1))) {
				list = go$append(list, p.parseStmt());
			}
			return list;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return list;
		}
	};
	parser.prototype.parseStmtList = function() { return this.go$val.parseStmtList(); };
	parser.Ptr.prototype.parseBody = function(scope) {
		var p, lbrace, list, rbrace;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Body")] });
			}
			lbrace = p.expect(51);
			p.topScope = scope;
			p.openLabelScope();
			list = p.parseStmtList();
			p.closeLabelScope();
			p.closeScope();
			rbrace = p.expect(56);
			return new ast.BlockStmt.Ptr(lbrace, list, rbrace);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.BlockStmt)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseBody = function(scope) { return this.go$val.parseBody(scope); };
	parser.Ptr.prototype.parseBlockStmt = function() {
		var p, lbrace, list, rbrace;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "BlockStmt")] });
			}
			lbrace = p.expect(51);
			p.openScope();
			list = p.parseStmtList();
			p.closeScope();
			rbrace = p.expect(56);
			return new ast.BlockStmt.Ptr(lbrace, list, rbrace);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.BlockStmt)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseBlockStmt = function() { return this.go$val.parseBlockStmt(); };
	parser.Ptr.prototype.parseFuncTypeOrLit = function() {
		var p, _tuple, typ, scope, body;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "FuncTypeOrLit")] });
			}
			_tuple = p.parseFuncType(), typ = _tuple[0], scope = _tuple[1];
			if (!((p.tok === 51))) {
				return typ;
			}
			p.exprLev = p.exprLev + 1 >> 0;
			body = p.parseBody(scope);
			p.exprLev = p.exprLev - 1 >> 0;
			return new ast.FuncLit.Ptr(typ, body);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseFuncTypeOrLit = function() { return this.go$val.parseFuncTypeOrLit(); };
	parser.Ptr.prototype.parseOperand = function(lhs) {
		var p, _ref, x, x$1, lparen, x$2, rparen, typ, _tuple, isIdent, pos;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Operand")] });
			}
			_ref = p.tok;
			if (_ref === 4) {
				x = p.parseIdent();
				if (!lhs) {
					p.resolve(x);
				}
				return x;
			} else if (_ref === 5 || _ref === 6 || _ref === 7 || _ref === 8 || _ref === 9) {
				x$1 = new ast.BasicLit.Ptr(p.pos, p.tok, p.lit);
				p.next();
				return x$1;
			} else if (_ref === 49) {
				lparen = p.pos;
				p.next();
				p.exprLev = p.exprLev + 1 >> 0;
				x$2 = p.parseRhsOrType();
				p.exprLev = p.exprLev - 1 >> 0;
				rparen = p.expect(54);
				return new ast.ParenExpr.Ptr(lparen, x$2, rparen);
			} else if (_ref === 71) {
				return p.parseFuncTypeOrLit();
			}
			if (typ = p.tryIdentOrType(), !(go$interfaceIsEqual(typ, null))) {
				_tuple = (typ !== null && typ.constructor === (go$ptrType(ast.Ident)) ? [typ.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), isIdent = _tuple[1];
				assert(!isIdent, "type cannot be identifier");
				return typ;
			}
			pos = p.pos;
			p.errorExpected(pos, "operand");
			syncStmt(p);
			return new ast.BadExpr.Ptr(pos, p.pos);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseOperand = function(lhs) { return this.go$val.parseOperand(lhs); };
	parser.Ptr.prototype.parseSelector = function(x) {
		var p, sel;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Selector")] });
			}
			sel = p.parseIdent();
			return new ast.SelectorExpr.Ptr(x, sel);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseSelector = function(x) { return this.go$val.parseSelector(x); };
	parser.Ptr.prototype.parseTypeAssertion = function(x) {
		var p, lparen, typ, rparen;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "TypeAssertion")] });
			}
			lparen = p.expect(49);
			typ = null;
			if (p.tok === 84) {
				p.next();
			} else {
				typ = p.parseType();
			}
			rparen = p.expect(54);
			return new ast.TypeAssertExpr.Ptr(x, lparen, typ, rparen);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseTypeAssertion = function(x) { return this.go$val.parseTypeAssertion(x); };
	parser.Ptr.prototype.parseIndexOrSlice = function(x) {
		var p, lbrack, index, ncolons, rbrack;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "IndexOrSlice")] });
			}
			lbrack = p.expect(50);
			p.exprLev = p.exprLev + 1 >> 0;
			index = go$makeNativeArray("Interface", 3, function() { return null; });
			if (!((p.tok === 58))) {
				index[0] = p.parseRhs();
			}
			ncolons = 0;
			while ((p.tok === 58) && ncolons < 2) {
				p.next();
				ncolons = ncolons + 1 >> 0;
				if (!((p.tok === 58)) && !((p.tok === 55)) && !((p.tok === 1))) {
					index[ncolons] = p.parseRhs();
				}
			}
			p.exprLev = p.exprLev - 1 >> 0;
			rbrack = p.expect(55);
			if (ncolons > 0) {
				return new ast.SliceExpr.Ptr(x, lbrack, index[0], index[1], index[2], ncolons === 2, rbrack);
			}
			return new ast.IndexExpr.Ptr(x, lbrack, index[0], rbrack);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseIndexOrSlice = function(x) { return this.go$val.parseIndexOrSlice(x); };
	parser.Ptr.prototype.parseCallOrConversion = function(fun) {
		var p, lparen, list, ellipsis, rparen;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "CallOrConversion")] });
			}
			lparen = p.expect(49);
			p.exprLev = p.exprLev + 1 >> 0;
			list = (go$sliceType(ast.Expr)).nil;
			ellipsis = 0;
			while (!((p.tok === 54)) && !((p.tok === 1)) && !(new token.Pos(ellipsis)).IsValid()) {
				list = go$append(list, p.parseRhsOrType());
				if (p.tok === 48) {
					ellipsis = p.pos;
					p.next();
				}
				if (!p.atComma("argument list")) {
					break;
				}
				p.next();
			}
			p.exprLev = p.exprLev - 1 >> 0;
			rparen = p.expectClosing(54, "argument list");
			return new ast.CallExpr.Ptr(fun, lparen, list, ellipsis, rparen);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.CallExpr)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseCallOrConversion = function(fun) { return this.go$val.parseCallOrConversion(fun); };
	parser.Ptr.prototype.parseElement = function(keyOk) {
		var p, x, colon;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Element")] });
			}
			if (p.tok === 51) {
				return p.parseLiteralValue(null);
			}
			x = p.checkExpr(p.parseExpr(keyOk));
			if (keyOk) {
				if (p.tok === 58) {
					colon = p.pos;
					p.next();
					p.tryResolve(x, false);
					return new ast.KeyValueExpr.Ptr(x, colon, p.parseElement(false));
				}
				p.resolve(x);
			}
			return x;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseElement = function(keyOk) { return this.go$val.parseElement(keyOk); };
	parser.Ptr.prototype.parseElementList = function() {
		var list, p;
		list = (go$sliceType(ast.Expr)).nil;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "ElementList")] });
			}
			while (!((p.tok === 56)) && !((p.tok === 1))) {
				list = go$append(list, p.parseElement(true));
				if (!p.atComma("composite literal")) {
					break;
				}
				p.next();
			}
			return list;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return list;
		}
	};
	parser.prototype.parseElementList = function() { return this.go$val.parseElementList(); };
	parser.Ptr.prototype.parseLiteralValue = function(typ) {
		var p, lbrace, elts, rbrace;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "LiteralValue")] });
			}
			lbrace = p.expect(51);
			elts = (go$sliceType(ast.Expr)).nil;
			p.exprLev = p.exprLev + 1 >> 0;
			if (!((p.tok === 56))) {
				elts = p.parseElementList();
			}
			p.exprLev = p.exprLev - 1 >> 0;
			rbrace = p.expectClosing(56, "composite literal");
			return new ast.CompositeLit.Ptr(typ, lbrace, elts, rbrace);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseLiteralValue = function(typ) { return this.go$val.parseLiteralValue(typ); };
	parser.Ptr.prototype.checkExpr = function(x) {
		var p, _ref, _type;
		p = this;
		_ref = unparen(x);
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadExpr))) {
		} else if (_type === (go$ptrType(ast.Ident))) {
		} else if (_type === (go$ptrType(ast.BasicLit))) {
		} else if (_type === (go$ptrType(ast.FuncLit))) {
		} else if (_type === (go$ptrType(ast.CompositeLit))) {
		} else if (_type === (go$ptrType(ast.ParenExpr))) {
			throw go$panic(new Go$String("unreachable"));
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
		} else if (_type === (go$ptrType(ast.IndexExpr))) {
		} else if (_type === (go$ptrType(ast.SliceExpr))) {
		} else if (_type === (go$ptrType(ast.TypeAssertExpr))) {
		} else if (_type === (go$ptrType(ast.CallExpr))) {
		} else if (_type === (go$ptrType(ast.StarExpr))) {
		} else if (_type === (go$ptrType(ast.UnaryExpr))) {
		} else if (_type === (go$ptrType(ast.BinaryExpr))) {
		} else {
			p.errorExpected(x.Pos(), "expression");
			x = new ast.BadExpr.Ptr(x.Pos(), x.End());
		}
		return x;
	};
	parser.prototype.checkExpr = function(x) { return this.go$val.checkExpr(x); };
	isTypeName = function(x) {
		var t, _ref, _type, _tuple, x$1, isIdent;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadExpr))) {
			t = _ref.go$val;
		} else if (_type === (go$ptrType(ast.Ident))) {
			t = _ref.go$val;
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			t = _ref.go$val;
			_tuple = (x$1 = t.X, (x$1 !== null && x$1.constructor === (go$ptrType(ast.Ident)) ? [x$1.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), isIdent = _tuple[1];
			return isIdent;
		} else {
			t = _ref;
			return false;
		}
		return true;
	};
	isLiteralType = function(x) {
		var t, _ref, _type, _tuple, x$1, isIdent;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadExpr))) {
			t = _ref.go$val;
		} else if (_type === (go$ptrType(ast.Ident))) {
			t = _ref.go$val;
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			t = _ref.go$val;
			_tuple = (x$1 = t.X, (x$1 !== null && x$1.constructor === (go$ptrType(ast.Ident)) ? [x$1.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), isIdent = _tuple[1];
			return isIdent;
		} else if (_type === (go$ptrType(ast.ArrayType))) {
			t = _ref.go$val;
		} else if (_type === (go$ptrType(ast.StructType))) {
			t = _ref.go$val;
		} else if (_type === (go$ptrType(ast.MapType))) {
			t = _ref.go$val;
		} else {
			t = _ref;
			return false;
		}
		return true;
	};
	deref = function(x) {
		var isPtr, _tuple, p;
		if (_tuple = (x !== null && x.constructor === (go$ptrType(ast.StarExpr)) ? [x.go$val, true] : [(go$ptrType(ast.StarExpr)).nil, false]), p = _tuple[0], isPtr = _tuple[1], isPtr) {
			x = p.X;
		}
		return x;
	};
	unparen = function(x) {
		var isParen, _tuple, p;
		if (_tuple = (x !== null && x.constructor === (go$ptrType(ast.ParenExpr)) ? [x.go$val, true] : [(go$ptrType(ast.ParenExpr)).nil, false]), p = _tuple[0], isParen = _tuple[1], isParen) {
			x = unparen(p.X);
		}
		return x;
	};
	parser.Ptr.prototype.checkExprOrType = function(x) {
		var p, t, _ref, _type, isEllipsis, _tuple, x$1, len;
		p = this;
		_ref = unparen(x);
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.ParenExpr))) {
			t = _ref.go$val;
			throw go$panic(new Go$String("unreachable"));
		} else if (_type === (go$ptrType(ast.UnaryExpr))) {
			t = _ref.go$val;
		} else if (_type === (go$ptrType(ast.ArrayType))) {
			t = _ref.go$val;
			if (_tuple = (x$1 = t.Len, (x$1 !== null && x$1.constructor === (go$ptrType(ast.Ellipsis)) ? [x$1.go$val, true] : [(go$ptrType(ast.Ellipsis)).nil, false])), len = _tuple[0], isEllipsis = _tuple[1], isEllipsis) {
				p.error(len.Pos(), "expected array length, found '...'");
				x = new ast.BadExpr.Ptr(x.Pos(), x.End());
			}
		}
		return x;
	};
	parser.prototype.checkExprOrType = function(x) { return this.go$val.checkExprOrType(x); };
	parser.Ptr.prototype.parsePrimaryExpr = function(lhs) {
		var p, x, _ref, _ref$1, pos;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "PrimaryExpr")] });
			}
			x = p.parseOperand(lhs);
			L:
			while (true) {
				_ref = p.tok;
				if (_ref === 53) {
					p.next();
					if (lhs) {
						p.resolve(x);
					}
					_ref$1 = p.tok;
					if (_ref$1 === 4) {
						x = p.parseSelector(p.checkExprOrType(x));
					} else if (_ref$1 === 49) {
						x = p.parseTypeAssertion(p.checkExpr(x));
					} else {
						pos = p.pos;
						p.errorExpected(pos, "selector or type assertion");
						p.next();
						x = new ast.BadExpr.Ptr(pos, p.pos);
					}
				} else if (_ref === 50) {
					if (lhs) {
						p.resolve(x);
					}
					x = p.parseIndexOrSlice(p.checkExpr(x));
				} else if (_ref === 49) {
					if (lhs) {
						p.resolve(x);
					}
					x = p.parseCallOrConversion(p.checkExprOrType(x));
				} else if (_ref === 51) {
					if (isLiteralType(x) && (p.exprLev >= 0 || !isTypeName(x))) {
						if (lhs) {
							p.resolve(x);
						}
						x = p.parseLiteralValue(x);
					} else {
						break L;
					}
				} else {
					break L;
				}
				lhs = false;
			}
			return x;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parsePrimaryExpr = function(lhs) { return this.go$val.parsePrimaryExpr(lhs); };
	parser.Ptr.prototype.parseUnaryExpr = function(lhs) {
		var p, _ref, _tuple, pos, op, x, arrow, x$1, ok, _tuple$1, typ, dir, _tuple$2, _tuple$3, _tuple$4, x$2, pos$1, x$3;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "UnaryExpr")] });
			}
			_ref = p.tok;
			if (_ref === 12 || _ref === 13 || _ref === 43 || _ref === 19 || _ref === 17) {
				_tuple = [p.pos, p.tok], pos = _tuple[0], op = _tuple[1];
				p.next();
				x = p.parseUnaryExpr(false);
				return new ast.UnaryExpr.Ptr(pos, op, p.checkExpr(x));
			} else if (_ref === 36) {
				arrow = p.pos;
				p.next();
				x$1 = p.parseUnaryExpr(false);
				if (_tuple$1 = (x$1 !== null && x$1.constructor === (go$ptrType(ast.ChanType)) ? [x$1.go$val, true] : [(go$ptrType(ast.ChanType)).nil, false]), typ = _tuple$1[0], ok = _tuple$1[1], ok) {
					dir = 1;
					while (ok && (dir === 1)) {
						if (typ.Dir === 2) {
							p.errorExpected(typ.Arrow, "'chan'");
						}
						_tuple$2 = [typ.Arrow, arrow, arrow], arrow = _tuple$2[0], typ.Begin = _tuple$2[1], typ.Arrow = _tuple$2[2];
						_tuple$3 = [typ.Dir, 2], dir = _tuple$3[0], typ.Dir = _tuple$3[1];
						_tuple$4 = (x$2 = typ.Value, (x$2 !== null && x$2.constructor === (go$ptrType(ast.ChanType)) ? [x$2.go$val, true] : [(go$ptrType(ast.ChanType)).nil, false])), typ = _tuple$4[0], ok = _tuple$4[1];
					}
					if (dir === 1) {
						p.errorExpected(arrow, "channel type");
					}
					return x$1;
				}
				return new ast.UnaryExpr.Ptr(arrow, 36, p.checkExpr(x$1));
			} else if (_ref === 14) {
				pos$1 = p.pos;
				p.next();
				x$3 = p.parseUnaryExpr(false);
				return new ast.StarExpr.Ptr(pos$1, p.checkExprOrType(x$3));
			}
			return p.parsePrimaryExpr(lhs);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseUnaryExpr = function(lhs) { return this.go$val.parseUnaryExpr(lhs); };
	parser.Ptr.prototype.tokPrec = function() {
		var p, tok;
		p = this;
		tok = p.tok;
		if (p.inRhs && (tok === 42)) {
			tok = 39;
		}
		return [tok, (new token.Token(tok)).Precedence()];
	};
	parser.prototype.tokPrec = function() { return this.go$val.tokPrec(); };
	parser.Ptr.prototype.parseBinaryExpr = function(lhs, prec1) {
		var p, x, _tuple, prec, _tuple$1, op, oprec, pos, y;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "BinaryExpr")] });
			}
			x = p.parseUnaryExpr(lhs);
			_tuple = p.tokPrec(), prec = _tuple[1];
			while (prec >= prec1) {
				while (true) {
					_tuple$1 = p.tokPrec(), op = _tuple$1[0], oprec = _tuple$1[1];
					if (!((oprec === prec))) {
						break;
					}
					pos = p.expect(op);
					if (lhs) {
						p.resolve(x);
						lhs = false;
					}
					y = p.parseBinaryExpr(false, prec + 1 >> 0);
					x = new ast.BinaryExpr.Ptr(p.checkExpr(x), pos, op, p.checkExpr(y));
				}
				prec = prec - 1 >> 0;
			}
			return x;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseBinaryExpr = function(lhs, prec1) { return this.go$val.parseBinaryExpr(lhs, prec1); };
	parser.Ptr.prototype.parseExpr = function(lhs) {
		var p;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Expression")] });
			}
			return p.parseBinaryExpr(lhs, 1);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseExpr = function(lhs) { return this.go$val.parseExpr(lhs); };
	parser.Ptr.prototype.parseRhs = function() {
		var p, old, x;
		p = this;
		old = p.inRhs;
		p.inRhs = true;
		x = p.checkExpr(p.parseExpr(false));
		p.inRhs = old;
		return x;
	};
	parser.prototype.parseRhs = function() { return this.go$val.parseRhs(); };
	parser.Ptr.prototype.parseRhsOrType = function() {
		var p, old, x;
		p = this;
		old = p.inRhs;
		p.inRhs = true;
		x = p.checkExprOrType(p.parseExpr(false));
		p.inRhs = old;
		return x;
	};
	parser.prototype.parseRhsOrType = function() { return this.go$val.parseRhsOrType(); };
	parser.Ptr.prototype.parseSimpleStmt = function(mode) {
		var p, x, _ref, _tuple, pos, tok, y, isRange, pos$1, as, _slice, _index, _ref$1, colon, isIdent, _tuple$1, x$1, _slice$1, _index$1, label, stmt, _slice$2, _index$2, arrow, y$1, _slice$3, _index$3, _slice$4, _index$4, s, _slice$5, _index$5;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "SimpleStmt")] });
			}
			x = p.parseLhsList();
			_ref = p.tok;
			if (_ref === 47 || _ref === 42 || _ref === 23 || _ref === 24 || _ref === 25 || _ref === 26 || _ref === 27 || _ref === 28 || _ref === 29 || _ref === 30 || _ref === 31 || _ref === 32 || _ref === 33) {
				_tuple = [p.pos, p.tok], pos = _tuple[0], tok = _tuple[1];
				p.next();
				y = (go$sliceType(ast.Expr)).nil;
				isRange = false;
				if ((mode === 2) && (p.tok === 79) && ((tok === 47) || (tok === 42))) {
					pos$1 = p.pos;
					p.next();
					y = new (go$sliceType(ast.Expr))([new ast.UnaryExpr.Ptr(pos$1, 79, p.parseRhs())]);
					isRange = true;
				} else {
					y = p.parseRhsList();
				}
				as = new ast.AssignStmt.Ptr(x, pos, tok, y);
				if (tok === 47) {
					p.shortVarDecl(as, x);
				}
				return [as, isRange];
			}
			if (x.length > 1) {
				p.errorExpected((_slice = x, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos(), "1 expression");
			}
			_ref$1 = p.tok;
			if (_ref$1 === 58) {
				colon = p.pos;
				p.next();
				if (_tuple$1 = (x$1 = (_slice$1 = x, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (x$1 !== null && x$1.constructor === (go$ptrType(ast.Ident)) ? [x$1.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), label = _tuple$1[0], isIdent = _tuple$1[1], (mode === 1) && isIdent) {
					stmt = new ast.LabeledStmt.Ptr(label, colon, p.parseStmt());
					p.declare(stmt, null, p.labelScope, 6, new (go$sliceType((go$ptrType(ast.Ident))))([label]));
					return [stmt, false];
				}
				p.error(colon, "illegal label declaration");
				return [new ast.BadStmt.Ptr((_slice$2 = x, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).Pos(), colon + 1 >> 0), false];
			} else if (_ref$1 === 36) {
				arrow = p.pos;
				p.next();
				y$1 = p.parseRhs();
				return [new ast.SendStmt.Ptr((_slice$3 = x, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), arrow, y$1), false];
			} else if (_ref$1 === 37 || _ref$1 === 38) {
				s = new ast.IncDecStmt.Ptr((_slice$4 = x, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), p.pos, p.tok);
				p.next();
				return [s, false];
			}
			return [new ast.ExprStmt.Ptr((_slice$5 = x, _index$5 = 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"))), false];
		} catch(go$err) {
			go$pushErr(go$err);
			return [null, false];
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseSimpleStmt = function(mode) { return this.go$val.parseSimpleStmt(mode); };
	parser.Ptr.prototype.parseCallExpr = function() {
		var p, x, isCall, _tuple, call, isBad, _tuple$1;
		p = this;
		x = p.parseRhsOrType();
		if (_tuple = (x !== null && x.constructor === (go$ptrType(ast.CallExpr)) ? [x.go$val, true] : [(go$ptrType(ast.CallExpr)).nil, false]), call = _tuple[0], isCall = _tuple[1], isCall) {
			return call;
		}
		if (_tuple$1 = (x !== null && x.constructor === (go$ptrType(ast.BadExpr)) ? [x.go$val, true] : [(go$ptrType(ast.BadExpr)).nil, false]), isBad = _tuple$1[1], !isBad) {
			p.errorExpected(x.Pos(), "function/method call");
		}
		return (go$ptrType(ast.CallExpr)).nil;
	};
	parser.prototype.parseCallExpr = function() { return this.go$val.parseCallExpr(); };
	parser.Ptr.prototype.parseGoStmt = function() {
		var p, pos, call;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "GoStmt")] });
			}
			pos = p.expect(72);
			call = p.parseCallExpr();
			p.expectSemi();
			if (call === (go$ptrType(ast.CallExpr)).nil) {
				return new ast.BadStmt.Ptr(pos, pos + 2 >> 0);
			}
			return new ast.GoStmt.Ptr(pos, call);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseGoStmt = function() { return this.go$val.parseGoStmt(); };
	parser.Ptr.prototype.parseDeferStmt = function() {
		var p, pos, call;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "DeferStmt")] });
			}
			pos = p.expect(67);
			call = p.parseCallExpr();
			p.expectSemi();
			if (call === (go$ptrType(ast.CallExpr)).nil) {
				return new ast.BadStmt.Ptr(pos, pos + 5 >> 0);
			}
			return new ast.DeferStmt.Ptr(pos, call);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseDeferStmt = function() { return this.go$val.parseDeferStmt(); };
	parser.Ptr.prototype.parseReturnStmt = function() {
		var p, pos, x;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "ReturnStmt")] });
			}
			pos = p.pos;
			p.expect(80);
			x = (go$sliceType(ast.Expr)).nil;
			if (!((p.tok === 57)) && !((p.tok === 56))) {
				x = p.parseRhsList();
			}
			p.expectSemi();
			return new ast.ReturnStmt.Ptr(pos, x);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.ReturnStmt)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseReturnStmt = function() { return this.go$val.parseReturnStmt(); };
	parser.Ptr.prototype.parseBranchStmt = function(tok) {
		var p, pos, label, n, _slice, _index, _slice$1, _index$1;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "BranchStmt")] });
			}
			pos = p.expect(tok);
			label = (go$ptrType(ast.Ident)).nil;
			if (!((tok === 69)) && (p.tok === 4)) {
				label = p.parseIdent();
				n = p.targetStack.length - 1 >> 0;
				_slice$1 = p.targetStack, _index$1 = n, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = go$append((_slice = p.targetStack, _index = n, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), label)) : go$throwRuntimeError("index out of range");
			}
			p.expectSemi();
			return new ast.BranchStmt.Ptr(pos, tok, label);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.BranchStmt)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseBranchStmt = function(tok) { return this.go$val.parseBranchStmt(tok); };
	parser.Ptr.prototype.makeExpr = function(s) {
		var p, isExpr, _tuple, es;
		p = this;
		if (go$interfaceIsEqual(s, null)) {
			return null;
		}
		if (_tuple = (s !== null && s.constructor === (go$ptrType(ast.ExprStmt)) ? [s.go$val, true] : [(go$ptrType(ast.ExprStmt)).nil, false]), es = _tuple[0], isExpr = _tuple[1], isExpr) {
			return p.checkExpr(es.X);
		}
		p.error(s.Pos(), "expected condition, found simple statement");
		return new ast.BadExpr.Ptr(s.Pos(), s.End());
	};
	parser.prototype.makeExpr = function(s) { return this.go$val.makeExpr(s); };
	parser.Ptr.prototype.parseIfStmt = function() {
		var p, pos, s, x, prevLev, _tuple, body, else_;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "IfStmt")] });
			}
			pos = p.expect(74);
			p.openScope();
			go$deferred.push({ recv: p, method: "closeScope", args: [] });
			s = null;
			x = null;
			prevLev = p.exprLev;
			p.exprLev = -1;
			if (p.tok === 57) {
				p.next();
				x = p.parseRhs();
			} else {
				_tuple = p.parseSimpleStmt(0), s = _tuple[0];
				if (p.tok === 57) {
					p.next();
					x = p.parseRhs();
				} else {
					x = p.makeExpr(s);
					s = null;
				}
			}
			p.exprLev = prevLev;
			body = p.parseBlockStmt();
			else_ = null;
			if (p.tok === 68) {
				p.next();
				else_ = p.parseStmt();
			} else {
				p.expectSemi();
			}
			return new ast.IfStmt.Ptr(pos, s, x, body, else_);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.IfStmt)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseIfStmt = function() { return this.go$val.parseIfStmt(); };
	parser.Ptr.prototype.parseTypeList = function() {
		var list, p;
		list = (go$sliceType(ast.Expr)).nil;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "TypeList")] });
			}
			list = go$append(list, p.parseType());
			while (p.tok === 52) {
				p.next();
				list = go$append(list, p.parseType());
			}
			return list;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return list;
		}
	};
	parser.prototype.parseTypeList = function() { return this.go$val.parseTypeList(); };
	parser.Ptr.prototype.parseCaseClause = function(typeSwitch) {
		var p, pos, list, colon, body;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "CaseClause")] });
			}
			pos = p.pos;
			list = (go$sliceType(ast.Expr)).nil;
			if (p.tok === 62) {
				p.next();
				if (typeSwitch) {
					list = p.parseTypeList();
				} else {
					list = p.parseRhsList();
				}
			} else {
				p.expect(66);
			}
			colon = p.expect(58);
			p.openScope();
			body = p.parseStmtList();
			p.closeScope();
			return new ast.CaseClause.Ptr(pos, list, colon, body);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.CaseClause)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseCaseClause = function(typeSwitch) { return this.go$val.parseCaseClause(typeSwitch); };
	isTypeSwitchAssert = function(x) {
		var _tuple, a, ok;
		_tuple = (x !== null && x.constructor === (go$ptrType(ast.TypeAssertExpr)) ? [x.go$val, true] : [(go$ptrType(ast.TypeAssertExpr)).nil, false]), a = _tuple[0], ok = _tuple[1];
		return ok && go$interfaceIsEqual(a.Type, null);
	};
	isTypeSwitchGuard = function(s) {
		var t, _ref, _type, _slice, _index;
		_ref = s;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.ExprStmt))) {
			t = _ref.go$val;
			return isTypeSwitchAssert(t.X);
		} else if (_type === (go$ptrType(ast.AssignStmt))) {
			t = _ref.go$val;
			return (t.Lhs.length === 1) && (t.Tok === 47) && (t.Rhs.length === 1) && isTypeSwitchAssert((_slice = t.Rhs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
		}
		return false;
	};
	parser.Ptr.prototype.parseSwitchStmt = function() {
		var p, pos, _tuple, s1, s2, prevLev, _tuple$1, _tuple$2, typeSwitch, lbrace, list, rbrace, body;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "SwitchStmt")] });
			}
			pos = p.expect(83);
			p.openScope();
			go$deferred.push({ recv: p, method: "closeScope", args: [] });
			_tuple = [null, null], s1 = _tuple[0], s2 = _tuple[1];
			if (!((p.tok === 51))) {
				prevLev = p.exprLev;
				p.exprLev = -1;
				if (!((p.tok === 57))) {
					_tuple$1 = p.parseSimpleStmt(0), s2 = _tuple$1[0];
				}
				if (p.tok === 57) {
					p.next();
					s1 = s2;
					s2 = null;
					if (!((p.tok === 51))) {
						p.openScope();
						go$deferred.push({ recv: p, method: "closeScope", args: [] });
						_tuple$2 = p.parseSimpleStmt(0), s2 = _tuple$2[0];
					}
				}
				p.exprLev = prevLev;
			}
			typeSwitch = isTypeSwitchGuard(s2);
			lbrace = p.expect(51);
			list = (go$sliceType(ast.Stmt)).nil;
			while ((p.tok === 62) || (p.tok === 66)) {
				list = go$append(list, p.parseCaseClause(typeSwitch));
			}
			rbrace = p.expect(56);
			p.expectSemi();
			body = new ast.BlockStmt.Ptr(lbrace, list, rbrace);
			if (typeSwitch) {
				return new ast.TypeSwitchStmt.Ptr(pos, s1, s2, body);
			}
			return new ast.SwitchStmt.Ptr(pos, s1, p.makeExpr(s2), body);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseSwitchStmt = function() { return this.go$val.parseSwitchStmt(); };
	parser.Ptr.prototype.parseCommClause = function() {
		var p, pos, comm, lhs, _slice, _index, arrow, rhs, _slice$1, _index$1, tok, _slice$2, _index$2, pos$1, rhs$1, as, _slice$3, _index$3, _slice$4, _index$4, colon, body;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "CommClause")] });
			}
			p.openScope();
			pos = p.pos;
			comm = null;
			if (p.tok === 62) {
				p.next();
				lhs = p.parseLhsList();
				if (p.tok === 36) {
					if (lhs.length > 1) {
						p.errorExpected((_slice = lhs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos(), "1 expression");
					}
					arrow = p.pos;
					p.next();
					rhs = p.parseRhs();
					comm = new ast.SendStmt.Ptr((_slice$1 = lhs, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), arrow, rhs);
				} else {
					if (tok = p.tok, (tok === 42) || (tok === 47)) {
						if (lhs.length > 2) {
							p.errorExpected((_slice$2 = lhs, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).Pos(), "1 or 2 expressions");
							lhs = go$subslice(lhs, 0, 2);
						}
						pos$1 = p.pos;
						p.next();
						rhs$1 = p.parseRhs();
						as = new ast.AssignStmt.Ptr(lhs, pos$1, tok, new (go$sliceType(ast.Expr))([rhs$1]));
						if (tok === 47) {
							p.shortVarDecl(as, lhs);
						}
						comm = as;
					} else {
						if (lhs.length > 1) {
							p.errorExpected((_slice$3 = lhs, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).Pos(), "1 expression");
						}
						comm = new ast.ExprStmt.Ptr((_slice$4 = lhs, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")));
					}
				}
			} else {
				p.expect(66);
			}
			colon = p.expect(58);
			body = p.parseStmtList();
			p.closeScope();
			return new ast.CommClause.Ptr(pos, comm, colon, body);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.CommClause)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseCommClause = function() { return this.go$val.parseCommClause(); };
	parser.Ptr.prototype.parseSelectStmt = function() {
		var p, pos, lbrace, list, rbrace, body;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "SelectStmt")] });
			}
			pos = p.expect(81);
			lbrace = p.expect(51);
			list = (go$sliceType(ast.Stmt)).nil;
			while ((p.tok === 62) || (p.tok === 66)) {
				list = go$append(list, p.parseCommClause());
			}
			rbrace = p.expect(56);
			p.expectSemi();
			body = new ast.BlockStmt.Ptr(lbrace, list, rbrace);
			return new ast.SelectStmt.Ptr(pos, body);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.SelectStmt)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseSelectStmt = function() { return this.go$val.parseSelectStmt(); };
	parser.Ptr.prototype.parseForStmt = function() {
		var p, pos, _tuple, s1, s2, s3, isRange, prevLev, _tuple$1, _tuple$2, _tuple$3, body, as, _tuple$4, key, value, _ref, _slice, _index, _slice$1, _index$1, _tuple$5, _slice$2, _index$2, _slice$3, _index$3, x, _slice$4, _index$4, x$1;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "ForStmt")] });
			}
			pos = p.expect(70);
			p.openScope();
			go$deferred.push({ recv: p, method: "closeScope", args: [] });
			_tuple = [null, null, null], s1 = _tuple[0], s2 = _tuple[1], s3 = _tuple[2];
			isRange = false;
			if (!((p.tok === 51))) {
				prevLev = p.exprLev;
				p.exprLev = -1;
				if (!((p.tok === 57))) {
					_tuple$1 = p.parseSimpleStmt(2), s2 = _tuple$1[0], isRange = _tuple$1[1];
				}
				if (!isRange && (p.tok === 57)) {
					p.next();
					s1 = s2;
					s2 = null;
					if (!((p.tok === 57))) {
						_tuple$2 = p.parseSimpleStmt(0), s2 = _tuple$2[0];
					}
					p.expectSemi();
					if (!((p.tok === 51))) {
						_tuple$3 = p.parseSimpleStmt(0), s3 = _tuple$3[0];
					}
				}
				p.exprLev = prevLev;
			}
			body = p.parseBlockStmt();
			p.expectSemi();
			if (isRange) {
				as = (s2 !== null && s2.constructor === (go$ptrType(ast.AssignStmt)) ? s2.go$val : go$typeAssertionFailed(s2, (go$ptrType(ast.AssignStmt))));
				_tuple$4 = [null, null], key = _tuple$4[0], value = _tuple$4[1];
				_ref = as.Lhs.length;
				if (_ref === 2) {
					_tuple$5 = [(_slice = as.Lhs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = as.Lhs, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], key = _tuple$5[0], value = _tuple$5[1];
				} else if (_ref === 1) {
					key = (_slice$2 = as.Lhs, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				} else {
					p.errorExpected((_slice$3 = as.Lhs, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).Pos(), "1 or 2 expressions");
					return new ast.BadStmt.Ptr(pos, body.End());
				}
				x$1 = (x = (_slice$4 = as.Rhs, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$ptrType(ast.UnaryExpr)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(ast.UnaryExpr))))).X;
				return new ast.RangeStmt.Ptr(pos, key, value, as.TokPos, as.Tok, x$1, body);
			}
			return new ast.ForStmt.Ptr(pos, s1, p.makeExpr(s2), s3, body);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseForStmt = function() { return this.go$val.parseForStmt(); };
	parser.Ptr.prototype.parseStmt = function() {
		var s, p, _ref, _tuple, isLabeledStmt, _tuple$1, pos;
		s = null;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Statement")] });
			}
			_ref = p.tok;
			if (_ref === 64 || _ref === 84 || _ref === 85) {
				s = new ast.DeclStmt.Ptr(p.parseDecl(syncStmt));
			} else if (_ref === 4 || _ref === 5 || _ref === 6 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 71 || _ref === 49 || _ref === 50 || _ref === 82 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 19 || _ref === 36 || _ref === 43) {
				_tuple = p.parseSimpleStmt(1), s = _tuple[0];
				if (_tuple$1 = (s !== null && s.constructor === (go$ptrType(ast.LabeledStmt)) ? [s.go$val, true] : [(go$ptrType(ast.LabeledStmt)).nil, false]), isLabeledStmt = _tuple$1[1], !isLabeledStmt) {
					p.expectSemi();
				}
			} else if (_ref === 72) {
				s = p.parseGoStmt();
			} else if (_ref === 67) {
				s = p.parseDeferStmt();
			} else if (_ref === 80) {
				s = p.parseReturnStmt();
			} else if (_ref === 61 || _ref === 65 || _ref === 73 || _ref === 69) {
				s = p.parseBranchStmt(p.tok);
			} else if (_ref === 51) {
				s = p.parseBlockStmt();
				p.expectSemi();
			} else if (_ref === 74) {
				s = p.parseIfStmt();
			} else if (_ref === 83) {
				s = p.parseSwitchStmt();
			} else if (_ref === 81) {
				s = p.parseSelectStmt();
			} else if (_ref === 70) {
				s = p.parseForStmt();
			} else if (_ref === 57) {
				s = new ast.EmptyStmt.Ptr(p.pos);
				p.next();
			} else if (_ref === 56) {
				s = new ast.EmptyStmt.Ptr(p.pos);
			} else {
				pos = p.pos;
				p.errorExpected(pos, "statement");
				syncStmt(p);
				s = new ast.BadStmt.Ptr(pos, p.pos);
			}
			return s;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return s;
		}
	};
	parser.prototype.parseStmt = function() { return this.go$val.parseStmt(); };
	isValidImport = function(lit) {
		var _tuple, s, _ref, _i, _rune, r;
		_tuple = strconv.Unquote(lit), s = _tuple[0];
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			r = _rune[0];
			if (!unicode.IsGraphic(r) || unicode.IsSpace(r) || strings.ContainsRune("!\"#$%&'()*,:;<=>?[\\]^{|}`\xEF\xBF\xBD", r)) {
				return false;
			}
			_i += _rune[1];
		}
		return !(s === "");
	};
	parser.Ptr.prototype.parseImportSpec = function(doc, param, param$1) {
		var p, ident, _ref, pos, path, spec;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "ImportSpec")] });
			}
			ident = (go$ptrType(ast.Ident)).nil;
			_ref = p.tok;
			if (_ref === 53) {
				ident = new ast.Ident.Ptr(p.pos, ".", (go$ptrType(ast.Object)).nil);
				p.next();
			} else if (_ref === 4) {
				ident = p.parseIdent();
			}
			pos = p.pos;
			path = "";
			if (p.tok === 9) {
				path = p.lit;
				if (!isValidImport(path)) {
					p.error(pos, "invalid import path: " + path);
				}
				p.next();
			} else {
				p.expect(9);
			}
			p.expectSemi();
			spec = new ast.ImportSpec.Ptr(doc, ident, new ast.BasicLit.Ptr(pos, 9, path), p.lineComment, 0);
			p.imports = go$append(p.imports, spec);
			return spec;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseImportSpec = function(doc, param, param$1) { return this.go$val.parseImportSpec(doc, param, param$1); };
	parser.Ptr.prototype.parseValueSpec = function(doc, keyword, iota) {
		var p, idents, typ, values, spec, kind;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, (new token.Token(keyword)).String() + "Spec")] });
			}
			idents = p.parseIdentList();
			typ = p.tryType();
			values = (go$sliceType(ast.Expr)).nil;
			if (p.tok === 42) {
				p.next();
				values = p.parseRhsList();
			}
			p.expectSemi();
			spec = new ast.ValueSpec.Ptr(doc, idents, typ, values, p.lineComment);
			kind = 2;
			if (keyword === 85) {
				kind = 4;
			}
			p.declare(spec, new Go$Int(iota), p.topScope, kind, idents);
			return spec;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseValueSpec = function(doc, keyword, iota) { return this.go$val.parseValueSpec(doc, keyword, iota); };
	parser.Ptr.prototype.parseTypeSpec = function(doc, param, param$1) {
		var p, ident, spec;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "TypeSpec")] });
			}
			ident = p.parseIdent();
			spec = new ast.TypeSpec.Ptr(doc, ident, null, (go$ptrType(ast.CommentGroup)).nil);
			p.declare(spec, null, p.topScope, 3, new (go$sliceType((go$ptrType(ast.Ident))))([ident]));
			spec.Type = p.parseType();
			p.expectSemi();
			spec.Comment = p.lineComment;
			return spec;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseTypeSpec = function(doc, param, param$1) { return this.go$val.parseTypeSpec(doc, param, param$1); };
	parser.Ptr.prototype.parseGenDecl = function(keyword, f) {
		var p, doc, pos, _tuple, lparen, rparen, list, iota;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "GenDecl(" + (new token.Token(keyword)).String() + ")")] });
			}
			doc = p.leadComment;
			pos = p.expect(keyword);
			_tuple = [0, 0], lparen = _tuple[0], rparen = _tuple[1];
			list = (go$sliceType(ast.Spec)).nil;
			if (p.tok === 49) {
				lparen = p.pos;
				p.next();
				iota = 0;
				while (!((p.tok === 54)) && !((p.tok === 1))) {
					list = go$append(list, f(p.leadComment, keyword, iota));
					iota = iota + 1 >> 0;
				}
				rparen = p.expect(54);
				p.expectSemi();
			} else {
				list = go$append(list, f((go$ptrType(ast.CommentGroup)).nil, keyword, 0));
			}
			return new ast.GenDecl.Ptr(doc, pos, keyword, lparen, list, rparen);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.GenDecl)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseGenDecl = function(keyword, f) { return this.go$val.parseGenDecl(keyword, f); };
	parser.Ptr.prototype.parseReceiver = function(scope) {
		var p, par, _slice, _index, recv, base, isIdent, _tuple, isBad, _tuple$1;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Receiver")] });
			}
			par = p.parseParameters(scope, false);
			if (!((par.NumFields() === 1))) {
				p.errorExpected(par.Opening, "exactly one receiver");
				par.List = new (go$sliceType((go$ptrType(ast.Field))))([new ast.Field.Ptr((go$ptrType(ast.CommentGroup)).nil, (go$sliceType((go$ptrType(ast.Ident)))).nil, new ast.BadExpr.Ptr(par.Opening, par.Closing + 1 >> 0), (go$ptrType(ast.BasicLit)).nil, (go$ptrType(ast.CommentGroup)).nil)]);
				return par;
			}
			recv = (_slice = par.List, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			base = deref(recv.Type);
			if (_tuple = (base !== null && base.constructor === (go$ptrType(ast.Ident)) ? [base.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), isIdent = _tuple[1], !isIdent) {
				if (_tuple$1 = (base !== null && base.constructor === (go$ptrType(ast.BadExpr)) ? [base.go$val, true] : [(go$ptrType(ast.BadExpr)).nil, false]), isBad = _tuple$1[1], !isBad) {
					p.errorExpected(base.Pos(), "(unqualified) identifier");
				}
				par.List = new (go$sliceType((go$ptrType(ast.Field))))([new ast.Field.Ptr((go$ptrType(ast.CommentGroup)).nil, (go$sliceType((go$ptrType(ast.Ident)))).nil, new ast.BadExpr.Ptr(recv.Pos(), recv.End()), (go$ptrType(ast.BasicLit)).nil, (go$ptrType(ast.CommentGroup)).nil)]);
			}
			return par;
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.FieldList)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseReceiver = function(scope) { return this.go$val.parseReceiver(scope); };
	parser.Ptr.prototype.parseFuncDecl = function() {
		var p, doc, pos, scope, recv, ident, _tuple, params, results, body, decl;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "FunctionDecl")] });
			}
			doc = p.leadComment;
			pos = p.expect(71);
			scope = ast.NewScope(p.topScope);
			recv = (go$ptrType(ast.FieldList)).nil;
			if (p.tok === 49) {
				recv = p.parseReceiver(scope);
			}
			ident = p.parseIdent();
			_tuple = p.parseSignature(scope), params = _tuple[0], results = _tuple[1];
			body = (go$ptrType(ast.BlockStmt)).nil;
			if (p.tok === 51) {
				body = p.parseBody(scope);
			}
			p.expectSemi();
			decl = new ast.FuncDecl.Ptr(doc, recv, ident, new ast.FuncType.Ptr(pos, params, results), body);
			if (recv === (go$ptrType(ast.FieldList)).nil) {
				if (!(ident.Name === "init")) {
					p.declare(decl, null, p.pkgScope, 5, new (go$sliceType((go$ptrType(ast.Ident))))([ident]));
				}
			}
			return decl;
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.FuncDecl)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseFuncDecl = function() { return this.go$val.parseFuncDecl(); };
	parser.Ptr.prototype.parseDecl = function(sync) {
		var p, f, _ref, doc, keyword, iota, _recv, doc$1, _, _$1, _recv$1, pos;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "Declaration")] });
			}
			f = go$throwNilPointerError;
			_ref = p.tok;
			if (_ref === 64 || _ref === 85) {
				f = (_recv = p, function(doc, keyword, iota) { return _recv.parseValueSpec(doc, keyword, iota); });
			} else if (_ref === 84) {
				f = (_recv$1 = p, function(doc$1, _, _$1) { return _recv$1.parseTypeSpec(doc$1, _, _$1); });
			} else if (_ref === 71) {
				return p.parseFuncDecl();
			} else {
				pos = p.pos;
				p.errorExpected(pos, "declaration");
				sync(p);
				return new ast.BadDecl.Ptr(pos, p.pos);
			}
			return p.parseGenDecl(p.tok, f);
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseDecl = function(sync) { return this.go$val.parseDecl(sync); };
	parser.Ptr.prototype.parseFile = function() {
		var p, doc, pos, ident, decls, doc$1, _, _$1, _recv, i, _ref, _i, _slice, _index, ident$1, _slice$1, _index$1;
		var go$deferred = [];
		try {
			p = this;
			if (p.trace) {
				go$deferred.push({ fun: un, args: [trace(p, "File")] });
			}
			if (!((p.errors.Len() === 0))) {
				return (go$ptrType(ast.File)).nil;
			}
			doc = p.leadComment;
			pos = p.expect(78);
			ident = p.parseIdent();
			if (ident.Name === "_" && !((((p.mode & 16) >>> 0) === 0))) {
				p.error(p.pos, "invalid package name _");
			}
			p.expectSemi();
			if (!((p.errors.Len() === 0))) {
				return (go$ptrType(ast.File)).nil;
			}
			p.openScope();
			p.pkgScope = p.topScope;
			decls = (go$sliceType(ast.Decl)).nil;
			if (((p.mode & 1) >>> 0) === 0) {
				while (p.tok === 75) {
					decls = go$append(decls, p.parseGenDecl(75, (_recv = p, function(doc$1, _, _$1) { return _recv.parseImportSpec(doc$1, _, _$1); })));
				}
				if (((p.mode & 2) >>> 0) === 0) {
					while (!((p.tok === 1))) {
						decls = go$append(decls, p.parseDecl(syncDecl));
					}
				}
			}
			p.closeScope();
			assert(p.topScope === (go$ptrType(ast.Scope)).nil, "unbalanced scopes");
			assert(p.labelScope === (go$ptrType(ast.Scope)).nil, "unbalanced label scopes");
			i = 0;
			_ref = p.unresolved;
			_i = 0;
			while (_i < _ref.length) {
				ident$1 = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				assert(ident$1.Obj === unresolved, "object already resolved");
				ident$1.Obj = p.pkgScope.Lookup(ident$1.Name);
				if (ident$1.Obj === (go$ptrType(ast.Object)).nil) {
					_slice$1 = p.unresolved, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = ident$1) : go$throwRuntimeError("index out of range");
					i = i + 1 >> 0;
				}
				_i++;
			}
			return new ast.File.Ptr(doc, pos, ident, decls, p.pkgScope, p.imports, go$subslice(p.unresolved, 0, i), p.comments);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(ast.File)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	parser.prototype.parseFile = function() { return this.go$val.parseFile(); };
	go$pkg.init = function() {
		parser.init([["file", "go/parser", (go$ptrType(token.File)), ""], ["errors", "go/parser", scanner.ErrorList, ""], ["scanner", "go/parser", scanner.Scanner, ""], ["mode", "go/parser", Mode, ""], ["trace", "go/parser", Go$Bool, ""], ["indent", "go/parser", Go$Int, ""], ["comments", "go/parser", (go$sliceType((go$ptrType(ast.CommentGroup)))), ""], ["leadComment", "go/parser", (go$ptrType(ast.CommentGroup)), ""], ["lineComment", "go/parser", (go$ptrType(ast.CommentGroup)), ""], ["pos", "go/parser", token.Pos, ""], ["tok", "go/parser", token.Token, ""], ["lit", "go/parser", Go$String, ""], ["syncPos", "go/parser", token.Pos, ""], ["syncCnt", "go/parser", Go$Int, ""], ["exprLev", "go/parser", Go$Int, ""], ["inRhs", "go/parser", Go$Bool, ""], ["pkgScope", "go/parser", (go$ptrType(ast.Scope)), ""], ["topScope", "go/parser", (go$ptrType(ast.Scope)), ""], ["unresolved", "go/parser", (go$sliceType((go$ptrType(ast.Ident)))), ""], ["imports", "go/parser", (go$sliceType((go$ptrType(ast.ImportSpec)))), ""], ["labelScope", "go/parser", (go$ptrType(ast.Scope)), ""], ["targetStack", "go/parser", (go$sliceType((go$sliceType((go$ptrType(ast.Ident)))))), ""]]);
		(go$ptrType(parser)).methods = [["atComma", "go/parser", [Go$String], [Go$Bool], false], ["checkExpr", "go/parser", [ast.Expr], [ast.Expr], false], ["checkExprOrType", "go/parser", [ast.Expr], [ast.Expr], false], ["closeLabelScope", "go/parser", [], [], false], ["closeScope", "go/parser", [], [], false], ["consumeComment", "go/parser", [], [(go$ptrType(ast.Comment)), Go$Int], false], ["consumeCommentGroup", "go/parser", [Go$Int], [(go$ptrType(ast.CommentGroup)), Go$Int], false], ["declare", "go/parser", [go$emptyInterface, go$emptyInterface, (go$ptrType(ast.Scope)), ast.ObjKind, (go$sliceType((go$ptrType(ast.Ident))))], [], true], ["error", "go/parser", [token.Pos, Go$String], [], false], ["errorExpected", "go/parser", [token.Pos, Go$String], [], false], ["expect", "go/parser", [token.Token], [token.Pos], false], ["expectClosing", "go/parser", [token.Token, Go$String], [token.Pos], false], ["expectSemi", "go/parser", [], [], false], ["init", "go/parser", [(go$ptrType(token.FileSet)), Go$String, (go$sliceType(Go$Uint8)), Mode], [], false], ["makeExpr", "go/parser", [ast.Stmt], [ast.Expr], false], ["makeIdentList", "go/parser", [(go$sliceType(ast.Expr))], [(go$sliceType((go$ptrType(ast.Ident))))], false], ["next", "go/parser", [], [], false], ["next0", "go/parser", [], [], false], ["openLabelScope", "go/parser", [], [], false], ["openScope", "go/parser", [], [], false], ["parseArrayType", "go/parser", [], [ast.Expr], false], ["parseBinaryExpr", "go/parser", [Go$Bool, Go$Int], [ast.Expr], false], ["parseBlockStmt", "go/parser", [], [(go$ptrType(ast.BlockStmt))], false], ["parseBody", "go/parser", [(go$ptrType(ast.Scope))], [(go$ptrType(ast.BlockStmt))], false], ["parseBranchStmt", "go/parser", [token.Token], [(go$ptrType(ast.BranchStmt))], false], ["parseCallExpr", "go/parser", [], [(go$ptrType(ast.CallExpr))], false], ["parseCallOrConversion", "go/parser", [ast.Expr], [(go$ptrType(ast.CallExpr))], false], ["parseCaseClause", "go/parser", [Go$Bool], [(go$ptrType(ast.CaseClause))], false], ["parseChanType", "go/parser", [], [(go$ptrType(ast.ChanType))], false], ["parseCommClause", "go/parser", [], [(go$ptrType(ast.CommClause))], false], ["parseDecl", "go/parser", [(go$funcType([(go$ptrType(parser))], [], false))], [ast.Decl], false], ["parseDeferStmt", "go/parser", [], [ast.Stmt], false], ["parseElement", "go/parser", [Go$Bool], [ast.Expr], false], ["parseElementList", "go/parser", [], [(go$sliceType(ast.Expr))], false], ["parseExpr", "go/parser", [Go$Bool], [ast.Expr], false], ["parseExprList", "go/parser", [Go$Bool], [(go$sliceType(ast.Expr))], false], ["parseFieldDecl", "go/parser", [(go$ptrType(ast.Scope))], [(go$ptrType(ast.Field))], false], ["parseFile", "go/parser", [], [(go$ptrType(ast.File))], false], ["parseForStmt", "go/parser", [], [ast.Stmt], false], ["parseFuncDecl", "go/parser", [], [(go$ptrType(ast.FuncDecl))], false], ["parseFuncType", "go/parser", [], [(go$ptrType(ast.FuncType)), (go$ptrType(ast.Scope))], false], ["parseFuncTypeOrLit", "go/parser", [], [ast.Expr], false], ["parseGenDecl", "go/parser", [token.Token, parseSpecFunction], [(go$ptrType(ast.GenDecl))], false], ["parseGoStmt", "go/parser", [], [ast.Stmt], false], ["parseIdent", "go/parser", [], [(go$ptrType(ast.Ident))], false], ["parseIdentList", "go/parser", [], [(go$sliceType((go$ptrType(ast.Ident))))], false], ["parseIfStmt", "go/parser", [], [(go$ptrType(ast.IfStmt))], false], ["parseImportSpec", "go/parser", [(go$ptrType(ast.CommentGroup)), token.Token, Go$Int], [ast.Spec], false], ["parseIndexOrSlice", "go/parser", [ast.Expr], [ast.Expr], false], ["parseInterfaceType", "go/parser", [], [(go$ptrType(ast.InterfaceType))], false], ["parseLhsList", "go/parser", [], [(go$sliceType(ast.Expr))], false], ["parseLiteralValue", "go/parser", [ast.Expr], [ast.Expr], false], ["parseMapType", "go/parser", [], [(go$ptrType(ast.MapType))], false], ["parseMethodSpec", "go/parser", [(go$ptrType(ast.Scope))], [(go$ptrType(ast.Field))], false], ["parseOperand", "go/parser", [Go$Bool], [ast.Expr], false], ["parseParameterList", "go/parser", [(go$ptrType(ast.Scope)), Go$Bool], [(go$sliceType((go$ptrType(ast.Field))))], false], ["parseParameters", "go/parser", [(go$ptrType(ast.Scope)), Go$Bool], [(go$ptrType(ast.FieldList))], false], ["parsePointerType", "go/parser", [], [(go$ptrType(ast.StarExpr))], false], ["parsePrimaryExpr", "go/parser", [Go$Bool], [ast.Expr], false], ["parseReceiver", "go/parser", [(go$ptrType(ast.Scope))], [(go$ptrType(ast.FieldList))], false], ["parseResult", "go/parser", [(go$ptrType(ast.Scope))], [(go$ptrType(ast.FieldList))], false], ["parseReturnStmt", "go/parser", [], [(go$ptrType(ast.ReturnStmt))], false], ["parseRhs", "go/parser", [], [ast.Expr], false], ["parseRhsList", "go/parser", [], [(go$sliceType(ast.Expr))], false], ["parseRhsOrType", "go/parser", [], [ast.Expr], false], ["parseSelectStmt", "go/parser", [], [(go$ptrType(ast.SelectStmt))], false], ["parseSelector", "go/parser", [ast.Expr], [ast.Expr], false], ["parseSignature", "go/parser", [(go$ptrType(ast.Scope))], [(go$ptrType(ast.FieldList)), (go$ptrType(ast.FieldList))], false], ["parseSimpleStmt", "go/parser", [Go$Int], [ast.Stmt, Go$Bool], false], ["parseStmt", "go/parser", [], [ast.Stmt], false], ["parseStmtList", "go/parser", [], [(go$sliceType(ast.Stmt))], false], ["parseStructType", "go/parser", [], [(go$ptrType(ast.StructType))], false], ["parseSwitchStmt", "go/parser", [], [ast.Stmt], false], ["parseType", "go/parser", [], [ast.Expr], false], ["parseTypeAssertion", "go/parser", [ast.Expr], [ast.Expr], false], ["parseTypeList", "go/parser", [], [(go$sliceType(ast.Expr))], false], ["parseTypeName", "go/parser", [], [ast.Expr], false], ["parseTypeSpec", "go/parser", [(go$ptrType(ast.CommentGroup)), token.Token, Go$Int], [ast.Spec], false], ["parseUnaryExpr", "go/parser", [Go$Bool], [ast.Expr], false], ["parseValueSpec", "go/parser", [(go$ptrType(ast.CommentGroup)), token.Token, Go$Int], [ast.Spec], false], ["parseVarList", "go/parser", [Go$Bool], [(go$sliceType(ast.Expr)), ast.Expr], false], ["parseVarType", "go/parser", [Go$Bool], [ast.Expr], false], ["printTrace", "go/parser", [(go$sliceType(go$emptyInterface))], [], true], ["resolve", "go/parser", [ast.Expr], [], false], ["shortVarDecl", "go/parser", [(go$ptrType(ast.AssignStmt)), (go$sliceType(ast.Expr))], [], false], ["tokPrec", "go/parser", [], [token.Token, Go$Int], false], ["tryIdentOrType", "go/parser", [], [ast.Expr], false], ["tryResolve", "go/parser", [ast.Expr, Go$Bool], [], false], ["tryType", "go/parser", [], [ast.Expr], false], ["tryVarType", "go/parser", [Go$Bool], [ast.Expr], false]];
		bailout.init([]);
		parseSpecFunction.init([(go$ptrType(ast.CommentGroup)), token.Token, Go$Int], [ast.Spec], false);
		unresolved = new ast.Object.Ptr();
	}
	return go$pkg;
})();
go$packages["code.google.com/p/go.tools/go/types"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], fmt = go$packages["fmt"], ast = go$packages["go/ast"], token = go$packages["go/token"], exact = go$packages["code.google.com/p/go.tools/go/exact"], strings = go$packages["strings"], parser = go$packages["go/parser"], math = go$packages["math"], sort = go$packages["sort"], sync = go$packages["sync"], errors = go$packages["errors"], strconv = go$packages["strconv"], unicode = go$packages["unicode"], io = go$packages["io"], Error, Importer, Config, TypeAndValue, Info, Initializer, getter, exprInfo, context, checker, bailout, funcInfo, opPredicates, exprKind, block, embeddedType, MethodSet, fieldSet, methodSet, byUniqueName, Object, object, PkgName, Const, TypeName, Var, Func, Label, Builtin, Nil, objset, operandMode, operand, Package, ifacePair, declInfo, inSourceOrder, Scope, SelectionKind, Selection, Sizes, StdSizes, stmtContext, Type, BasicKind, BasicInfo, Basic, Array, Slice, Struct, Pointer, Tuple, Signature, Interface, Map, Chan, ChanDir, Named, byUniqueTypeName, byUniqueMethodName, builtinId, AssignableTo, Implements, makeSig, implicitArrayDeref, unparen, unpack, newChecker, isUintptr, isUnsafePointer, isPointer, isBytesOrRunes, underlying, assert, unreachable, New, Eval, EvalNode, isShift, isComparison, fitsFloat32, roundFloat32, fitsFloat64, roundFloat64, representableConst, ExprString, WriteExpr, writeSigExpr, writeFieldList, slice3, sliceMax, LookupFieldOrMethod, lookupFieldOrMethod, consolidateMultiples, MissingMethod, deref, derefStructPtr, concat, fieldIndex, lookupMethod, NewMethodSet, ptrRecv, Id, NewPkgName, NewConst, NewTypeName, NewVar, NewParam, NewField, NewFunc, NewLabel, newBuiltin, writeObject, ObjectString, writeFuncName, NewPackage, isNamed, isBoolean, isInteger, isUnsigned, isFloat, isComplex, isNumeric, isString, isTyped, isUntyped, isOrdered, isConstType, isInterface, Comparable, hasNil, Identical, identical, defaultType, validatedImportPath, objectsOf, hasBreak, hasBreakList, NewScope, SelectionString, align, assignOp, NewArray, NewSlice, NewStruct, NewPointer, NewTuple, NewSignature, NewInterface, NewMap, NewChan, NewNamed, TypeString, WriteType, writeType, writeTuple, WriteSignature, writeSignature, anonymousFieldIdent, defPredeclaredTypes, defPredeclaredConsts, defPredeclaredNil, defPredeclaredFuncs, def, unaryOpPredicates, binaryOpPredicates, emptyMethodSet, operandModeString, basicSizes, stdSizes, universeIota, aliases, predeclaredConsts, predeclaredFuncs;
	Error = go$pkg.Error = go$newType(0, "Struct", "types.Error", "Error", "code.google.com/p/go.tools/go/types", function(Fset_, Pos_, Msg_) {
		this.go$val = this;
		this.Fset = Fset_ !== undefined ? Fset_ : (go$ptrType(token.FileSet)).nil;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Msg = Msg_ !== undefined ? Msg_ : "";
	});
	Importer = go$pkg.Importer = go$newType(0, "Func", "types.Importer", "Importer", "code.google.com/p/go.tools/go/types", null);
	Config = go$pkg.Config = go$newType(0, "Struct", "types.Config", "Config", "code.google.com/p/go.tools/go/types", function(IgnoreFuncBodies_, FakeImportC_, Packages_, Error_, Import_, Sizes_) {
		this.go$val = this;
		this.IgnoreFuncBodies = IgnoreFuncBodies_ !== undefined ? IgnoreFuncBodies_ : false;
		this.FakeImportC = FakeImportC_ !== undefined ? FakeImportC_ : false;
		this.Packages = Packages_ !== undefined ? Packages_ : false;
		this.Error = Error_ !== undefined ? Error_ : go$throwNilPointerError;
		this.Import = Import_ !== undefined ? Import_ : go$throwNilPointerError;
		this.Sizes = Sizes_ !== undefined ? Sizes_ : null;
	});
	TypeAndValue = go$pkg.TypeAndValue = go$newType(0, "Struct", "types.TypeAndValue", "TypeAndValue", "code.google.com/p/go.tools/go/types", function(Type_, Value_) {
		this.go$val = this;
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Value = Value_ !== undefined ? Value_ : null;
	});
	Info = go$pkg.Info = go$newType(0, "Struct", "types.Info", "Info", "code.google.com/p/go.tools/go/types", function(Types_, Defs_, Uses_, Implicits_, Selections_, Scopes_, InitOrder_) {
		this.go$val = this;
		this.Types = Types_ !== undefined ? Types_ : false;
		this.Defs = Defs_ !== undefined ? Defs_ : false;
		this.Uses = Uses_ !== undefined ? Uses_ : false;
		this.Implicits = Implicits_ !== undefined ? Implicits_ : false;
		this.Selections = Selections_ !== undefined ? Selections_ : false;
		this.Scopes = Scopes_ !== undefined ? Scopes_ : false;
		this.InitOrder = InitOrder_ !== undefined ? InitOrder_ : (go$sliceType((go$ptrType(Initializer)))).nil;
	});
	Initializer = go$pkg.Initializer = go$newType(0, "Struct", "types.Initializer", "Initializer", "code.google.com/p/go.tools/go/types", function(Lhs_, Rhs_) {
		this.go$val = this;
		this.Lhs = Lhs_ !== undefined ? Lhs_ : (go$sliceType((go$ptrType(Var)))).nil;
		this.Rhs = Rhs_ !== undefined ? Rhs_ : null;
	});
	getter = go$pkg.getter = go$newType(0, "Func", "types.getter", "getter", "code.google.com/p/go.tools/go/types", null);
	exprInfo = go$pkg.exprInfo = go$newType(0, "Struct", "types.exprInfo", "exprInfo", "code.google.com/p/go.tools/go/types", function(isLhs_, typ_, val_) {
		this.go$val = this;
		this.isLhs = isLhs_ !== undefined ? isLhs_ : false;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(Basic)).nil;
		this.val = val_ !== undefined ? val_ : null;
	});
	context = go$pkg.context = go$newType(0, "Struct", "types.context", "context", "code.google.com/p/go.tools/go/types", function(decl_, scope_, iota_, sig_, hasLabel_, hasCallOrRecv_) {
		this.go$val = this;
		this.decl = decl_ !== undefined ? decl_ : (go$ptrType(declInfo)).nil;
		this.scope = scope_ !== undefined ? scope_ : (go$ptrType(Scope)).nil;
		this.iota = iota_ !== undefined ? iota_ : null;
		this.sig = sig_ !== undefined ? sig_ : (go$ptrType(Signature)).nil;
		this.hasLabel = hasLabel_ !== undefined ? hasLabel_ : false;
		this.hasCallOrRecv = hasCallOrRecv_ !== undefined ? hasCallOrRecv_ : false;
	});
	checker = go$pkg.checker = go$newType(0, "Struct", "types.checker", "checker", "code.google.com/p/go.tools/go/types", function(conf_, fset_, pkg_, Info_, firstErr_, methods_, untyped_, funcs_, delayed_, objMap_, initMap_, context_, indent_) {
		this.go$val = this;
		this.conf = conf_ !== undefined ? conf_ : (go$ptrType(Config)).nil;
		this.fset = fset_ !== undefined ? fset_ : (go$ptrType(token.FileSet)).nil;
		this.pkg = pkg_ !== undefined ? pkg_ : (go$ptrType(Package)).nil;
		this.Info = Info_ !== undefined ? Info_ : (go$ptrType(Info)).nil;
		this.firstErr = firstErr_ !== undefined ? firstErr_ : null;
		this.methods = methods_ !== undefined ? methods_ : false;
		this.untyped = untyped_ !== undefined ? untyped_ : false;
		this.funcs = funcs_ !== undefined ? funcs_ : (go$sliceType(funcInfo)).nil;
		this.delayed = delayed_ !== undefined ? delayed_ : (go$sliceType((go$funcType([], [], false)))).nil;
		this.objMap = objMap_ !== undefined ? objMap_ : false;
		this.initMap = initMap_ !== undefined ? initMap_ : false;
		this.context = context_ !== undefined ? context_ : new context.Ptr();
		this.indent = indent_ !== undefined ? indent_ : 0;
	});
	bailout = go$pkg.bailout = go$newType(0, "Struct", "types.bailout", "bailout", "code.google.com/p/go.tools/go/types", function() {
		this.go$val = this;
	});
	funcInfo = go$pkg.funcInfo = go$newType(0, "Struct", "types.funcInfo", "funcInfo", "code.google.com/p/go.tools/go/types", function(name_, decl_, sig_, body_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.decl = decl_ !== undefined ? decl_ : (go$ptrType(declInfo)).nil;
		this.sig = sig_ !== undefined ? sig_ : (go$ptrType(Signature)).nil;
		this.body = body_ !== undefined ? body_ : (go$ptrType(ast.BlockStmt)).nil;
	});
	opPredicates = go$pkg.opPredicates = go$newType(0, "Map", "types.opPredicates", "opPredicates", "code.google.com/p/go.tools/go/types", null);
	exprKind = go$pkg.exprKind = go$newType(4, "Int", "types.exprKind", "exprKind", "code.google.com/p/go.tools/go/types", null);
	block = go$pkg.block = go$newType(0, "Struct", "types.block", "block", "code.google.com/p/go.tools/go/types", function(parent_, lstmt_, labels_) {
		this.go$val = this;
		this.parent = parent_ !== undefined ? parent_ : (go$ptrType(block)).nil;
		this.lstmt = lstmt_ !== undefined ? lstmt_ : (go$ptrType(ast.LabeledStmt)).nil;
		this.labels = labels_ !== undefined ? labels_ : false;
	});
	embeddedType = go$pkg.embeddedType = go$newType(0, "Struct", "types.embeddedType", "embeddedType", "code.google.com/p/go.tools/go/types", function(typ_, index_, indirect_, multiples_) {
		this.go$val = this;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(Named)).nil;
		this.index = index_ !== undefined ? index_ : (go$sliceType(Go$Int)).nil;
		this.indirect = indirect_ !== undefined ? indirect_ : false;
		this.multiples = multiples_ !== undefined ? multiples_ : false;
	});
	MethodSet = go$pkg.MethodSet = go$newType(0, "Struct", "types.MethodSet", "MethodSet", "code.google.com/p/go.tools/go/types", function(list_) {
		this.go$val = this;
		this.list = list_ !== undefined ? list_ : (go$sliceType((go$ptrType(Selection)))).nil;
	});
	fieldSet = go$pkg.fieldSet = go$newType(0, "Map", "types.fieldSet", "fieldSet", "code.google.com/p/go.tools/go/types", null);
	methodSet = go$pkg.methodSet = go$newType(0, "Map", "types.methodSet", "methodSet", "code.google.com/p/go.tools/go/types", null);
	byUniqueName = go$pkg.byUniqueName = go$newType(0, "Slice", "types.byUniqueName", "byUniqueName", "code.google.com/p/go.tools/go/types", null);
	Object = go$pkg.Object = go$newType(0, "Interface", "types.Object", "Object", "code.google.com/p/go.tools/go/types", null);
	object = go$pkg.object = go$newType(0, "Struct", "types.object", "object", "code.google.com/p/go.tools/go/types", function(parent_, pos_, pkg_, name_, typ_, used_) {
		this.go$val = this;
		this.parent = parent_ !== undefined ? parent_ : (go$ptrType(Scope)).nil;
		this.pos = pos_ !== undefined ? pos_ : 0;
		this.pkg = pkg_ !== undefined ? pkg_ : (go$ptrType(Package)).nil;
		this.name = name_ !== undefined ? name_ : "";
		this.typ = typ_ !== undefined ? typ_ : null;
		this.used = used_ !== undefined ? used_ : false;
	});
	PkgName = go$pkg.PkgName = go$newType(0, "Struct", "types.PkgName", "PkgName", "code.google.com/p/go.tools/go/types", function(object_) {
		this.go$val = this;
		this.object = object_ !== undefined ? object_ : new object.Ptr();
	});
	PkgName.prototype.Exported = function() { return this.go$val.Exported(); };
	PkgName.Ptr.prototype.Exported = function() { return this.object.Exported(); };
	PkgName.prototype.Id = function() { return this.go$val.Id(); };
	PkgName.Ptr.prototype.Id = function() { return this.object.Id(); };
	PkgName.prototype.Name = function() { return this.go$val.Name(); };
	PkgName.Ptr.prototype.Name = function() { return this.object.Name(); };
	PkgName.prototype.Parent = function() { return this.go$val.Parent(); };
	PkgName.Ptr.prototype.Parent = function() { return this.object.Parent(); };
	PkgName.prototype.Pkg = function() { return this.go$val.Pkg(); };
	PkgName.Ptr.prototype.Pkg = function() { return this.object.Pkg(); };
	PkgName.prototype.Pos = function() { return this.go$val.Pos(); };
	PkgName.Ptr.prototype.Pos = function() { return this.object.Pos(); };
	PkgName.prototype.String = function() { return this.go$val.String(); };
	PkgName.Ptr.prototype.String = function() { return this.object.String(); };
	PkgName.prototype.Type = function() { return this.go$val.Type(); };
	PkgName.Ptr.prototype.Type = function() { return this.object.Type(); };
	PkgName.prototype.isUsed = function() { return this.go$val.isUsed(); };
	PkgName.Ptr.prototype.isUsed = function() { return this.object.isUsed(); };
	PkgName.prototype.sameId = function(pkg, name) { return this.go$val.sameId(pkg, name); };
	PkgName.Ptr.prototype.sameId = function(pkg, name) { return this.object.sameId(pkg, name); };
	PkgName.prototype.setParent = function(parent) { return this.go$val.setParent(parent); };
	PkgName.Ptr.prototype.setParent = function(parent) { return this.object.setParent(parent); };
	Const = go$pkg.Const = go$newType(0, "Struct", "types.Const", "Const", "code.google.com/p/go.tools/go/types", function(object_, val_, visited_) {
		this.go$val = this;
		this.object = object_ !== undefined ? object_ : new object.Ptr();
		this.val = val_ !== undefined ? val_ : null;
		this.visited = visited_ !== undefined ? visited_ : false;
	});
	Const.prototype.Exported = function() { return this.go$val.Exported(); };
	Const.Ptr.prototype.Exported = function() { return this.object.Exported(); };
	Const.prototype.Id = function() { return this.go$val.Id(); };
	Const.Ptr.prototype.Id = function() { return this.object.Id(); };
	Const.prototype.Name = function() { return this.go$val.Name(); };
	Const.Ptr.prototype.Name = function() { return this.object.Name(); };
	Const.prototype.Parent = function() { return this.go$val.Parent(); };
	Const.Ptr.prototype.Parent = function() { return this.object.Parent(); };
	Const.prototype.Pkg = function() { return this.go$val.Pkg(); };
	Const.Ptr.prototype.Pkg = function() { return this.object.Pkg(); };
	Const.prototype.Pos = function() { return this.go$val.Pos(); };
	Const.Ptr.prototype.Pos = function() { return this.object.Pos(); };
	Const.prototype.String = function() { return this.go$val.String(); };
	Const.Ptr.prototype.String = function() { return this.object.String(); };
	Const.prototype.Type = function() { return this.go$val.Type(); };
	Const.Ptr.prototype.Type = function() { return this.object.Type(); };
	Const.prototype.isUsed = function() { return this.go$val.isUsed(); };
	Const.Ptr.prototype.isUsed = function() { return this.object.isUsed(); };
	Const.prototype.sameId = function(pkg, name) { return this.go$val.sameId(pkg, name); };
	Const.Ptr.prototype.sameId = function(pkg, name) { return this.object.sameId(pkg, name); };
	Const.prototype.setParent = function(parent) { return this.go$val.setParent(parent); };
	Const.Ptr.prototype.setParent = function(parent) { return this.object.setParent(parent); };
	TypeName = go$pkg.TypeName = go$newType(0, "Struct", "types.TypeName", "TypeName", "code.google.com/p/go.tools/go/types", function(object_) {
		this.go$val = this;
		this.object = object_ !== undefined ? object_ : new object.Ptr();
	});
	TypeName.prototype.Exported = function() { return this.go$val.Exported(); };
	TypeName.Ptr.prototype.Exported = function() { return this.object.Exported(); };
	TypeName.prototype.Id = function() { return this.go$val.Id(); };
	TypeName.Ptr.prototype.Id = function() { return this.object.Id(); };
	TypeName.prototype.Name = function() { return this.go$val.Name(); };
	TypeName.Ptr.prototype.Name = function() { return this.object.Name(); };
	TypeName.prototype.Parent = function() { return this.go$val.Parent(); };
	TypeName.Ptr.prototype.Parent = function() { return this.object.Parent(); };
	TypeName.prototype.Pkg = function() { return this.go$val.Pkg(); };
	TypeName.Ptr.prototype.Pkg = function() { return this.object.Pkg(); };
	TypeName.prototype.Pos = function() { return this.go$val.Pos(); };
	TypeName.Ptr.prototype.Pos = function() { return this.object.Pos(); };
	TypeName.prototype.String = function() { return this.go$val.String(); };
	TypeName.Ptr.prototype.String = function() { return this.object.String(); };
	TypeName.prototype.Type = function() { return this.go$val.Type(); };
	TypeName.Ptr.prototype.Type = function() { return this.object.Type(); };
	TypeName.prototype.isUsed = function() { return this.go$val.isUsed(); };
	TypeName.Ptr.prototype.isUsed = function() { return this.object.isUsed(); };
	TypeName.prototype.sameId = function(pkg, name) { return this.go$val.sameId(pkg, name); };
	TypeName.Ptr.prototype.sameId = function(pkg, name) { return this.object.sameId(pkg, name); };
	TypeName.prototype.setParent = function(parent) { return this.go$val.setParent(parent); };
	TypeName.Ptr.prototype.setParent = function(parent) { return this.object.setParent(parent); };
	Var = go$pkg.Var = go$newType(0, "Struct", "types.Var", "Var", "code.google.com/p/go.tools/go/types", function(object_, anonymous_, visited_, isField_) {
		this.go$val = this;
		this.object = object_ !== undefined ? object_ : new object.Ptr();
		this.anonymous = anonymous_ !== undefined ? anonymous_ : false;
		this.visited = visited_ !== undefined ? visited_ : false;
		this.isField = isField_ !== undefined ? isField_ : false;
	});
	Var.prototype.Exported = function() { return this.go$val.Exported(); };
	Var.Ptr.prototype.Exported = function() { return this.object.Exported(); };
	Var.prototype.Id = function() { return this.go$val.Id(); };
	Var.Ptr.prototype.Id = function() { return this.object.Id(); };
	Var.prototype.Name = function() { return this.go$val.Name(); };
	Var.Ptr.prototype.Name = function() { return this.object.Name(); };
	Var.prototype.Parent = function() { return this.go$val.Parent(); };
	Var.Ptr.prototype.Parent = function() { return this.object.Parent(); };
	Var.prototype.Pkg = function() { return this.go$val.Pkg(); };
	Var.Ptr.prototype.Pkg = function() { return this.object.Pkg(); };
	Var.prototype.Pos = function() { return this.go$val.Pos(); };
	Var.Ptr.prototype.Pos = function() { return this.object.Pos(); };
	Var.prototype.String = function() { return this.go$val.String(); };
	Var.Ptr.prototype.String = function() { return this.object.String(); };
	Var.prototype.Type = function() { return this.go$val.Type(); };
	Var.Ptr.prototype.Type = function() { return this.object.Type(); };
	Var.prototype.isUsed = function() { return this.go$val.isUsed(); };
	Var.Ptr.prototype.isUsed = function() { return this.object.isUsed(); };
	Var.prototype.sameId = function(pkg, name) { return this.go$val.sameId(pkg, name); };
	Var.Ptr.prototype.sameId = function(pkg, name) { return this.object.sameId(pkg, name); };
	Var.prototype.setParent = function(parent) { return this.go$val.setParent(parent); };
	Var.Ptr.prototype.setParent = function(parent) { return this.object.setParent(parent); };
	Func = go$pkg.Func = go$newType(0, "Struct", "types.Func", "Func", "code.google.com/p/go.tools/go/types", function(object_) {
		this.go$val = this;
		this.object = object_ !== undefined ? object_ : new object.Ptr();
	});
	Func.prototype.Exported = function() { return this.go$val.Exported(); };
	Func.Ptr.prototype.Exported = function() { return this.object.Exported(); };
	Func.prototype.Id = function() { return this.go$val.Id(); };
	Func.Ptr.prototype.Id = function() { return this.object.Id(); };
	Func.prototype.Name = function() { return this.go$val.Name(); };
	Func.Ptr.prototype.Name = function() { return this.object.Name(); };
	Func.prototype.Parent = function() { return this.go$val.Parent(); };
	Func.Ptr.prototype.Parent = function() { return this.object.Parent(); };
	Func.prototype.Pkg = function() { return this.go$val.Pkg(); };
	Func.Ptr.prototype.Pkg = function() { return this.object.Pkg(); };
	Func.prototype.Pos = function() { return this.go$val.Pos(); };
	Func.Ptr.prototype.Pos = function() { return this.object.Pos(); };
	Func.prototype.String = function() { return this.go$val.String(); };
	Func.Ptr.prototype.String = function() { return this.object.String(); };
	Func.prototype.Type = function() { return this.go$val.Type(); };
	Func.Ptr.prototype.Type = function() { return this.object.Type(); };
	Func.prototype.isUsed = function() { return this.go$val.isUsed(); };
	Func.Ptr.prototype.isUsed = function() { return this.object.isUsed(); };
	Func.prototype.sameId = function(pkg, name) { return this.go$val.sameId(pkg, name); };
	Func.Ptr.prototype.sameId = function(pkg, name) { return this.object.sameId(pkg, name); };
	Func.prototype.setParent = function(parent) { return this.go$val.setParent(parent); };
	Func.Ptr.prototype.setParent = function(parent) { return this.object.setParent(parent); };
	Label = go$pkg.Label = go$newType(0, "Struct", "types.Label", "Label", "code.google.com/p/go.tools/go/types", function(object_) {
		this.go$val = this;
		this.object = object_ !== undefined ? object_ : new object.Ptr();
	});
	Label.prototype.Exported = function() { return this.go$val.Exported(); };
	Label.Ptr.prototype.Exported = function() { return this.object.Exported(); };
	Label.prototype.Id = function() { return this.go$val.Id(); };
	Label.Ptr.prototype.Id = function() { return this.object.Id(); };
	Label.prototype.Name = function() { return this.go$val.Name(); };
	Label.Ptr.prototype.Name = function() { return this.object.Name(); };
	Label.prototype.Parent = function() { return this.go$val.Parent(); };
	Label.Ptr.prototype.Parent = function() { return this.object.Parent(); };
	Label.prototype.Pkg = function() { return this.go$val.Pkg(); };
	Label.Ptr.prototype.Pkg = function() { return this.object.Pkg(); };
	Label.prototype.Pos = function() { return this.go$val.Pos(); };
	Label.Ptr.prototype.Pos = function() { return this.object.Pos(); };
	Label.prototype.String = function() { return this.go$val.String(); };
	Label.Ptr.prototype.String = function() { return this.object.String(); };
	Label.prototype.Type = function() { return this.go$val.Type(); };
	Label.Ptr.prototype.Type = function() { return this.object.Type(); };
	Label.prototype.isUsed = function() { return this.go$val.isUsed(); };
	Label.Ptr.prototype.isUsed = function() { return this.object.isUsed(); };
	Label.prototype.sameId = function(pkg, name) { return this.go$val.sameId(pkg, name); };
	Label.Ptr.prototype.sameId = function(pkg, name) { return this.object.sameId(pkg, name); };
	Label.prototype.setParent = function(parent) { return this.go$val.setParent(parent); };
	Label.Ptr.prototype.setParent = function(parent) { return this.object.setParent(parent); };
	Builtin = go$pkg.Builtin = go$newType(0, "Struct", "types.Builtin", "Builtin", "code.google.com/p/go.tools/go/types", function(object_, id_) {
		this.go$val = this;
		this.object = object_ !== undefined ? object_ : new object.Ptr();
		this.id = id_ !== undefined ? id_ : 0;
	});
	Builtin.prototype.Exported = function() { return this.go$val.Exported(); };
	Builtin.Ptr.prototype.Exported = function() { return this.object.Exported(); };
	Builtin.prototype.Id = function() { return this.go$val.Id(); };
	Builtin.Ptr.prototype.Id = function() { return this.object.Id(); };
	Builtin.prototype.Name = function() { return this.go$val.Name(); };
	Builtin.Ptr.prototype.Name = function() { return this.object.Name(); };
	Builtin.prototype.Parent = function() { return this.go$val.Parent(); };
	Builtin.Ptr.prototype.Parent = function() { return this.object.Parent(); };
	Builtin.prototype.Pkg = function() { return this.go$val.Pkg(); };
	Builtin.Ptr.prototype.Pkg = function() { return this.object.Pkg(); };
	Builtin.prototype.Pos = function() { return this.go$val.Pos(); };
	Builtin.Ptr.prototype.Pos = function() { return this.object.Pos(); };
	Builtin.prototype.String = function() { return this.go$val.String(); };
	Builtin.Ptr.prototype.String = function() { return this.object.String(); };
	Builtin.prototype.Type = function() { return this.go$val.Type(); };
	Builtin.Ptr.prototype.Type = function() { return this.object.Type(); };
	Builtin.prototype.isUsed = function() { return this.go$val.isUsed(); };
	Builtin.Ptr.prototype.isUsed = function() { return this.object.isUsed(); };
	Builtin.prototype.sameId = function(pkg, name) { return this.go$val.sameId(pkg, name); };
	Builtin.Ptr.prototype.sameId = function(pkg, name) { return this.object.sameId(pkg, name); };
	Builtin.prototype.setParent = function(parent) { return this.go$val.setParent(parent); };
	Builtin.Ptr.prototype.setParent = function(parent) { return this.object.setParent(parent); };
	Nil = go$pkg.Nil = go$newType(0, "Struct", "types.Nil", "Nil", "code.google.com/p/go.tools/go/types", function(object_) {
		this.go$val = this;
		this.object = object_ !== undefined ? object_ : new object.Ptr();
	});
	Nil.prototype.Exported = function() { return this.go$val.Exported(); };
	Nil.Ptr.prototype.Exported = function() { return this.object.Exported(); };
	Nil.prototype.Id = function() { return this.go$val.Id(); };
	Nil.Ptr.prototype.Id = function() { return this.object.Id(); };
	Nil.prototype.Name = function() { return this.go$val.Name(); };
	Nil.Ptr.prototype.Name = function() { return this.object.Name(); };
	Nil.prototype.Parent = function() { return this.go$val.Parent(); };
	Nil.Ptr.prototype.Parent = function() { return this.object.Parent(); };
	Nil.prototype.Pkg = function() { return this.go$val.Pkg(); };
	Nil.Ptr.prototype.Pkg = function() { return this.object.Pkg(); };
	Nil.prototype.Pos = function() { return this.go$val.Pos(); };
	Nil.Ptr.prototype.Pos = function() { return this.object.Pos(); };
	Nil.prototype.String = function() { return this.go$val.String(); };
	Nil.Ptr.prototype.String = function() { return this.object.String(); };
	Nil.prototype.Type = function() { return this.go$val.Type(); };
	Nil.Ptr.prototype.Type = function() { return this.object.Type(); };
	Nil.prototype.isUsed = function() { return this.go$val.isUsed(); };
	Nil.Ptr.prototype.isUsed = function() { return this.object.isUsed(); };
	Nil.prototype.sameId = function(pkg, name) { return this.go$val.sameId(pkg, name); };
	Nil.Ptr.prototype.sameId = function(pkg, name) { return this.object.sameId(pkg, name); };
	Nil.prototype.setParent = function(parent) { return this.go$val.setParent(parent); };
	Nil.Ptr.prototype.setParent = function(parent) { return this.object.setParent(parent); };
	objset = go$pkg.objset = go$newType(0, "Map", "types.objset", "objset", "code.google.com/p/go.tools/go/types", null);
	operandMode = go$pkg.operandMode = go$newType(4, "Int", "types.operandMode", "operandMode", "code.google.com/p/go.tools/go/types", null);
	operand = go$pkg.operand = go$newType(0, "Struct", "types.operand", "operand", "code.google.com/p/go.tools/go/types", function(mode_, expr_, typ_, val_, id_) {
		this.go$val = this;
		this.mode = mode_ !== undefined ? mode_ : 0;
		this.expr = expr_ !== undefined ? expr_ : null;
		this.typ = typ_ !== undefined ? typ_ : null;
		this.val = val_ !== undefined ? val_ : null;
		this.id = id_ !== undefined ? id_ : 0;
	});
	Package = go$pkg.Package = go$newType(0, "Struct", "types.Package", "Package", "code.google.com/p/go.tools/go/types", function(path_, name_, scope_, complete_, imports_, fake_) {
		this.go$val = this;
		this.path = path_ !== undefined ? path_ : "";
		this.name = name_ !== undefined ? name_ : "";
		this.scope = scope_ !== undefined ? scope_ : (go$ptrType(Scope)).nil;
		this.complete = complete_ !== undefined ? complete_ : false;
		this.imports = imports_ !== undefined ? imports_ : (go$sliceType((go$ptrType(Package)))).nil;
		this.fake = fake_ !== undefined ? fake_ : false;
	});
	ifacePair = go$pkg.ifacePair = go$newType(0, "Struct", "types.ifacePair", "ifacePair", "code.google.com/p/go.tools/go/types", function(x_, y_, prev_) {
		this.go$val = this;
		this.x = x_ !== undefined ? x_ : (go$ptrType(Interface)).nil;
		this.y = y_ !== undefined ? y_ : (go$ptrType(Interface)).nil;
		this.prev = prev_ !== undefined ? prev_ : (go$ptrType(ifacePair)).nil;
	});
	declInfo = go$pkg.declInfo = go$newType(0, "Struct", "types.declInfo", "declInfo", "code.google.com/p/go.tools/go/types", function(file_, lhs_, typ_, init_, fdecl_, deps_, mark_) {
		this.go$val = this;
		this.file = file_ !== undefined ? file_ : (go$ptrType(Scope)).nil;
		this.lhs = lhs_ !== undefined ? lhs_ : (go$sliceType((go$ptrType(Var)))).nil;
		this.typ = typ_ !== undefined ? typ_ : null;
		this.init = init_ !== undefined ? init_ : null;
		this.fdecl = fdecl_ !== undefined ? fdecl_ : (go$ptrType(ast.FuncDecl)).nil;
		this.deps = deps_ !== undefined ? deps_ : false;
		this.mark = mark_ !== undefined ? mark_ : 0;
	});
	inSourceOrder = go$pkg.inSourceOrder = go$newType(0, "Slice", "types.inSourceOrder", "inSourceOrder", "code.google.com/p/go.tools/go/types", null);
	Scope = go$pkg.Scope = go$newType(0, "Struct", "types.Scope", "Scope", "code.google.com/p/go.tools/go/types", function(parent_, children_, elems_) {
		this.go$val = this;
		this.parent = parent_ !== undefined ? parent_ : (go$ptrType(Scope)).nil;
		this.children = children_ !== undefined ? children_ : (go$sliceType((go$ptrType(Scope)))).nil;
		this.elems = elems_ !== undefined ? elems_ : false;
	});
	SelectionKind = go$pkg.SelectionKind = go$newType(4, "Int", "types.SelectionKind", "SelectionKind", "code.google.com/p/go.tools/go/types", null);
	Selection = go$pkg.Selection = go$newType(0, "Struct", "types.Selection", "Selection", "code.google.com/p/go.tools/go/types", function(kind_, recv_, obj_, index_, indirect_) {
		this.go$val = this;
		this.kind = kind_ !== undefined ? kind_ : 0;
		this.recv = recv_ !== undefined ? recv_ : null;
		this.obj = obj_ !== undefined ? obj_ : null;
		this.index = index_ !== undefined ? index_ : (go$sliceType(Go$Int)).nil;
		this.indirect = indirect_ !== undefined ? indirect_ : false;
	});
	Sizes = go$pkg.Sizes = go$newType(0, "Interface", "types.Sizes", "Sizes", "code.google.com/p/go.tools/go/types", null);
	StdSizes = go$pkg.StdSizes = go$newType(0, "Struct", "types.StdSizes", "StdSizes", "code.google.com/p/go.tools/go/types", function(WordSize_, MaxAlign_) {
		this.go$val = this;
		this.WordSize = WordSize_ !== undefined ? WordSize_ : new Go$Int64(0, 0);
		this.MaxAlign = MaxAlign_ !== undefined ? MaxAlign_ : new Go$Int64(0, 0);
	});
	stmtContext = go$pkg.stmtContext = go$newType(4, "Uint", "types.stmtContext", "stmtContext", "code.google.com/p/go.tools/go/types", null);
	Type = go$pkg.Type = go$newType(0, "Interface", "types.Type", "Type", "code.google.com/p/go.tools/go/types", null);
	BasicKind = go$pkg.BasicKind = go$newType(4, "Int", "types.BasicKind", "BasicKind", "code.google.com/p/go.tools/go/types", null);
	BasicInfo = go$pkg.BasicInfo = go$newType(4, "Int", "types.BasicInfo", "BasicInfo", "code.google.com/p/go.tools/go/types", null);
	Basic = go$pkg.Basic = go$newType(0, "Struct", "types.Basic", "Basic", "code.google.com/p/go.tools/go/types", function(kind_, info_, name_) {
		this.go$val = this;
		this.kind = kind_ !== undefined ? kind_ : 0;
		this.info = info_ !== undefined ? info_ : 0;
		this.name = name_ !== undefined ? name_ : "";
	});
	Array = go$pkg.Array = go$newType(0, "Struct", "types.Array", "Array", "code.google.com/p/go.tools/go/types", function(len_, elem_) {
		this.go$val = this;
		this.len = len_ !== undefined ? len_ : new Go$Int64(0, 0);
		this.elem = elem_ !== undefined ? elem_ : null;
	});
	Slice = go$pkg.Slice = go$newType(0, "Struct", "types.Slice", "Slice", "code.google.com/p/go.tools/go/types", function(elem_) {
		this.go$val = this;
		this.elem = elem_ !== undefined ? elem_ : null;
	});
	Struct = go$pkg.Struct = go$newType(0, "Struct", "types.Struct", "Struct", "code.google.com/p/go.tools/go/types", function(fields_, tags_, offsets_) {
		this.go$val = this;
		this.fields = fields_ !== undefined ? fields_ : (go$sliceType((go$ptrType(Var)))).nil;
		this.tags = tags_ !== undefined ? tags_ : (go$sliceType(Go$String)).nil;
		this.offsets = offsets_ !== undefined ? offsets_ : (go$sliceType(Go$Int64)).nil;
	});
	Pointer = go$pkg.Pointer = go$newType(0, "Struct", "types.Pointer", "Pointer", "code.google.com/p/go.tools/go/types", function(base_) {
		this.go$val = this;
		this.base = base_ !== undefined ? base_ : null;
	});
	Tuple = go$pkg.Tuple = go$newType(0, "Struct", "types.Tuple", "Tuple", "code.google.com/p/go.tools/go/types", function(vars_) {
		this.go$val = this;
		this.vars = vars_ !== undefined ? vars_ : (go$sliceType((go$ptrType(Var)))).nil;
	});
	Signature = go$pkg.Signature = go$newType(0, "Struct", "types.Signature", "Signature", "code.google.com/p/go.tools/go/types", function(scope_, recv_, params_, results_, variadic_) {
		this.go$val = this;
		this.scope = scope_ !== undefined ? scope_ : (go$ptrType(Scope)).nil;
		this.recv = recv_ !== undefined ? recv_ : (go$ptrType(Var)).nil;
		this.params = params_ !== undefined ? params_ : (go$ptrType(Tuple)).nil;
		this.results = results_ !== undefined ? results_ : (go$ptrType(Tuple)).nil;
		this.variadic = variadic_ !== undefined ? variadic_ : false;
	});
	Interface = go$pkg.Interface = go$newType(0, "Struct", "types.Interface", "Interface", "code.google.com/p/go.tools/go/types", function(methods_, embeddeds_, allMethods_) {
		this.go$val = this;
		this.methods = methods_ !== undefined ? methods_ : (go$sliceType((go$ptrType(Func)))).nil;
		this.embeddeds = embeddeds_ !== undefined ? embeddeds_ : (go$sliceType((go$ptrType(Named)))).nil;
		this.allMethods = allMethods_ !== undefined ? allMethods_ : (go$sliceType((go$ptrType(Func)))).nil;
	});
	Map = go$pkg.Map = go$newType(0, "Struct", "types.Map", "Map", "code.google.com/p/go.tools/go/types", function(key_, elem_) {
		this.go$val = this;
		this.key = key_ !== undefined ? key_ : null;
		this.elem = elem_ !== undefined ? elem_ : null;
	});
	Chan = go$pkg.Chan = go$newType(0, "Struct", "types.Chan", "Chan", "code.google.com/p/go.tools/go/types", function(dir_, elem_) {
		this.go$val = this;
		this.dir = dir_ !== undefined ? dir_ : 0;
		this.elem = elem_ !== undefined ? elem_ : null;
	});
	ChanDir = go$pkg.ChanDir = go$newType(4, "Int", "types.ChanDir", "ChanDir", "code.google.com/p/go.tools/go/types", null);
	Named = go$pkg.Named = go$newType(0, "Struct", "types.Named", "Named", "code.google.com/p/go.tools/go/types", function(obj_, underlying_, methods_) {
		this.go$val = this;
		this.obj = obj_ !== undefined ? obj_ : (go$ptrType(TypeName)).nil;
		this.underlying = underlying_ !== undefined ? underlying_ : null;
		this.methods = methods_ !== undefined ? methods_ : (go$sliceType((go$ptrType(Func)))).nil;
	});
	byUniqueTypeName = go$pkg.byUniqueTypeName = go$newType(0, "Slice", "types.byUniqueTypeName", "byUniqueTypeName", "code.google.com/p/go.tools/go/types", null);
	byUniqueMethodName = go$pkg.byUniqueMethodName = go$newType(0, "Slice", "types.byUniqueMethodName", "byUniqueMethodName", "code.google.com/p/go.tools/go/types", null);
	builtinId = go$pkg.builtinId = go$newType(4, "Int", "types.builtinId", "builtinId", "code.google.com/p/go.tools/go/types", null);
	Error.Ptr.prototype.Error = function() {
		var _struct, err, x;
		err = (_struct = this, new Error.Ptr(_struct.Fset, _struct.Pos, _struct.Msg));
		return fmt.Sprintf("%s: %s", new (go$sliceType(go$emptyInterface))([(x = err.Fset.Position(err.Pos), new x.constructor.Struct(x)), new Go$String(err.Msg)]));
	};
	Error.prototype.Error = function() { return this.go$val.Error(); };
	Initializer.Ptr.prototype.String = function() {
		var init, buf, _ref, _i, _slice, _index, lhs, i;
		init = this;
		buf = new bytes.Buffer.Ptr();
		_ref = init.Lhs;
		_i = 0;
		while (_i < _ref.length) {
			lhs = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				buf.WriteString(", ");
			}
			buf.WriteString(lhs.object.Name());
			_i++;
		}
		buf.WriteString(" = ");
		WriteExpr(buf, init.Rhs);
		return buf.String();
	};
	Initializer.prototype.String = function() { return this.go$val.String(); };
	Config.Ptr.prototype.Check = function(path, fset, files, info) {
		var conf, pkg;
		conf = this;
		pkg = NewPackage(path, "");
		return [pkg, newChecker(conf, fset, pkg, info).files(files)];
	};
	Config.prototype.Check = function(path, fset, files, info) { return this.go$val.Check(path, fset, files, info); };
	AssignableTo = go$pkg.AssignableTo = function(V, T) {
		var x;
		x = new operand.Ptr(7, null, V, null, 0);
		return x.assignableTo((go$ptrType(Config)).nil, T);
	};
	Implements = go$pkg.Implements = function(V, T) {
		var _tuple, f;
		_tuple = MissingMethod(V, T, true), f = _tuple[0];
		return f === (go$ptrType(Func)).nil;
	};
	checker.Ptr.prototype.assignment = function(x, T) {
		var check, _ref, t, _tuple, x$1, target;
		check = this;
		_ref = x.mode;
		if (_ref === 0) {
			return true;
		} else if (_ref === 4 || _ref === 5 || _ref === 6 || _ref === 7 || _ref === 8) {
		} else {
			unreachable();
		}
		if (_tuple = (x$1 = x.typ, (x$1 !== null && x$1.constructor === (go$ptrType(Tuple)) ? [x$1.go$val, true] : [(go$ptrType(Tuple)).nil, false])), t = _tuple[0], !(t === (go$ptrType(Tuple)).nil)) {
			assert(t.Len() > 1);
			check.errorf(x.pos(), "%d-valued expression %s used as single value", new (go$sliceType(go$emptyInterface))([new Go$Int(t.Len()), x]));
			x.mode = 0;
			return false;
		}
		if (isUntyped(x.typ)) {
			target = T;
			if (go$interfaceIsEqual(T, null) || isInterface(T)) {
				if (go$interfaceIsEqual(T, null) && go$interfaceIsEqual(x.typ, go$pkg.Typ[25])) {
					check.errorf(x.pos(), "use of untyped nil", new (go$sliceType(go$emptyInterface))([]));
					x.mode = 0;
					return false;
				}
				target = defaultType(x.typ);
			}
			check.convertUntyped(x, target);
			if (x.mode === 0) {
				return false;
			}
		}
		return go$interfaceIsEqual(T, null) || x.assignableTo(check.conf, T);
	};
	checker.prototype.assignment = function(x, T) { return this.go$val.assignment(x, T); };
	checker.Ptr.prototype.initConst = function(lhs, x) {
		var check;
		check = this;
		if ((x.mode === 0) || go$interfaceIsEqual(x.typ, go$pkg.Typ[0]) || go$interfaceIsEqual(lhs.object.typ, go$pkg.Typ[0])) {
			if (go$interfaceIsEqual(lhs.object.typ, null)) {
				lhs.object.typ = go$pkg.Typ[0];
			}
			return;
		}
		if (!((x.mode === 4))) {
			check.errorf(x.pos(), "%s is not constant", new (go$sliceType(go$emptyInterface))([x]));
			if (go$interfaceIsEqual(lhs.object.typ, null)) {
				lhs.object.typ = go$pkg.Typ[0];
			}
			return;
		}
		assert(isConstType(x.typ));
		if (go$interfaceIsEqual(lhs.object.typ, null)) {
			lhs.object.typ = x.typ;
		}
		if (!check.assignment(x, lhs.object.typ)) {
			if (!((x.mode === 0))) {
				check.errorf(x.pos(), "cannot define constant %s (type %s) as %s", new (go$sliceType(go$emptyInterface))([new Go$String(lhs.object.Name()), lhs.object.typ, x]));
			}
			lhs.val = exact.MakeUnknown();
			return;
		}
		lhs.val = x.val;
	};
	checker.prototype.initConst = function(lhs, x) { return this.go$val.initConst(lhs, x); };
	checker.Ptr.prototype.initVar = function(lhs, x) {
		var check, typ;
		check = this;
		if ((x.mode === 0) || go$interfaceIsEqual(x.typ, go$pkg.Typ[0]) || go$interfaceIsEqual(lhs.object.typ, go$pkg.Typ[0])) {
			if (go$interfaceIsEqual(lhs.object.typ, null)) {
				lhs.object.typ = go$pkg.Typ[0];
			}
			return null;
		}
		if (go$interfaceIsEqual(lhs.object.typ, null)) {
			typ = x.typ;
			if (isUntyped(typ)) {
				if (go$interfaceIsEqual(typ, go$pkg.Typ[25])) {
					check.errorf(x.pos(), "use of untyped nil", new (go$sliceType(go$emptyInterface))([]));
					lhs.object.typ = go$pkg.Typ[0];
					return null;
				}
				typ = defaultType(typ);
			}
			lhs.object.typ = typ;
		}
		if (!check.assignment(x, lhs.object.typ)) {
			if (!((x.mode === 0))) {
				check.errorf(x.pos(), "cannot initialize variable %s (type %s) with %s", new (go$sliceType(go$emptyInterface))([new Go$String(lhs.object.Name()), lhs.object.typ, x]));
			}
			return null;
		}
		return x.typ;
	};
	checker.prototype.initVar = function(lhs, x) { return this.go$val.initVar(lhs, x); };
	checker.Ptr.prototype.assignVar = function(lhs, x) {
		var check, _tuple, x$1, ident, v, v_used, obj, _tuple$1, z, _ref;
		check = this;
		if ((x.mode === 0) || go$interfaceIsEqual(x.typ, go$pkg.Typ[0])) {
			return null;
		}
		_tuple = (x$1 = unparen(lhs), (x$1 !== null && x$1.constructor === (go$ptrType(ast.Ident)) ? [x$1.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), ident = _tuple[0];
		if (!(ident === (go$ptrType(ast.Ident)).nil) && ident.Name === "_") {
			check.recordDef(ident, null);
			if (!check.assignment(x, null)) {
				assert(x.mode === 0);
				x.typ = null;
			}
			return x.typ;
		}
		v = (go$ptrType(Var)).nil;
		v_used = false;
		if (!(ident === (go$ptrType(ast.Ident)).nil)) {
			if (obj = check.context.scope.LookupParent(ident.Name), !(go$interfaceIsEqual(obj, null))) {
				_tuple$1 = (obj !== null && obj.constructor === (go$ptrType(Var)) ? [obj.go$val, true] : [(go$ptrType(Var)).nil, false]), v = _tuple$1[0];
				if (!(v === (go$ptrType(Var)).nil)) {
					v_used = v.object.used;
				}
			}
		}
		z = new operand.Ptr();
		check.expr(z, lhs);
		if (!(v === (go$ptrType(Var)).nil)) {
			v.object.used = v_used;
		}
		if ((z.mode === 0) || go$interfaceIsEqual(z.typ, go$pkg.Typ[0])) {
			return null;
		}
		_ref = z.mode;
		if (_ref === 0) {
			return null;
		} else if (_ref === 5 || _ref === 6) {
		} else {
			check.errorf(z.pos(), "cannot assign to %s", new (go$sliceType(go$emptyInterface))([z]));
			return null;
		}
		if (!check.assignment(x, z.typ)) {
			if (!((x.mode === 0))) {
				check.errorf(x.pos(), "cannot assign %s to %s", new (go$sliceType(go$emptyInterface))([x, z]));
			}
			return null;
		}
		return x.typ;
	};
	checker.prototype.assignVar = function(lhs, x) { return this.go$val.assignVar(lhs, x); };
	checker.Ptr.prototype.initVars = function(lhs, rhs, returnPos) {
		var check, l, _tuple, get, r, commaOk, _ref, _i, _slice, _index, obj, _slice$1, _index$1, x, a, _ref$1, _i$1, i, _slice$2, _index$2, _slice$3, _index$3, _ref$2, _i$2, _slice$4, _index$4, lhs$1, i$1;
		check = this;
		l = lhs.length;
		_tuple = unpack((function(x, i) {
			var _slice, _index;
			check.expr(x, (_slice = rhs, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
		}), rhs.length, (l === 2) && !(new token.Pos(returnPos)).IsValid()), get = _tuple[0], r = _tuple[1], commaOk = _tuple[2];
		if (!((l === r))) {
			_ref = lhs;
			_i = 0;
			while (_i < _ref.length) {
				obj = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (go$interfaceIsEqual(obj.object.typ, null)) {
					obj.object.typ = go$pkg.Typ[0];
				}
				_i++;
			}
			if ((new token.Pos(returnPos)).IsValid()) {
				check.errorf(returnPos, "wrong number of return values (want %d, got %d)", new (go$sliceType(go$emptyInterface))([new Go$Int(l), new Go$Int(r)]));
				return;
			}
			check.errorf((_slice$1 = rhs, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Pos(), "assignment count mismatch (%d vs %d)", new (go$sliceType(go$emptyInterface))([new Go$Int(l), new Go$Int(r)]));
			return;
		}
		x = new operand.Ptr();
		if (commaOk) {
			a = go$makeNativeArray("Interface", 2, function() { return null; });
			_ref$1 = a;
			_i$1 = 0;
			while (_i$1 < 2) {
				i = _i$1;
				get(x, i);
				a[i] = check.initVar((_slice$2 = lhs, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), x);
				_i$1++;
			}
			check.recordCommaOkTypes((_slice$3 = rhs, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), go$mapArray(a, function(entry) { return entry; }));
			return;
		}
		_ref$2 = lhs;
		_i$2 = 0;
		while (_i$2 < _ref$2.length) {
			lhs$1 = (_slice$4 = _ref$2, _index$4 = _i$2, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
			i$1 = _i$2;
			get(x, i$1);
			check.initVar(lhs$1, x);
			_i$2++;
		}
	};
	checker.prototype.initVars = function(lhs, rhs, returnPos) { return this.go$val.initVars(lhs, rhs, returnPos); };
	checker.Ptr.prototype.assignVars = function(lhs, rhs) {
		var check, l, _tuple, get, r, commaOk, _slice, _index, x, a, _ref, _i, i, _slice$1, _index$1, _slice$2, _index$2, _ref$1, _i$1, _slice$3, _index$3, lhs$1, i$1;
		check = this;
		l = lhs.length;
		_tuple = unpack((function(x, i) {
			var _slice, _index;
			check.expr(x, (_slice = rhs, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
		}), rhs.length, l === 2), get = _tuple[0], r = _tuple[1], commaOk = _tuple[2];
		if (!((l === r))) {
			check.errorf((_slice = rhs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos(), "assignment count mismatch (%d vs %d)", new (go$sliceType(go$emptyInterface))([new Go$Int(l), new Go$Int(r)]));
			return;
		}
		x = new operand.Ptr();
		if (commaOk) {
			a = go$makeNativeArray("Interface", 2, function() { return null; });
			_ref = a;
			_i = 0;
			while (_i < 2) {
				i = _i;
				get(x, i);
				a[i] = check.assignVar((_slice$1 = lhs, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), x);
				_i++;
			}
			check.recordCommaOkTypes((_slice$2 = rhs, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), go$mapArray(a, function(entry) { return entry; }));
			return;
		}
		_ref$1 = lhs;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			lhs$1 = (_slice$3 = _ref$1, _index$3 = _i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			i$1 = _i$1;
			get(x, i$1);
			check.assignVar(lhs$1, x);
			_i$1++;
		}
	};
	checker.prototype.assignVars = function(lhs, rhs) { return this.go$val.assignVars(lhs, rhs); };
	checker.Ptr.prototype.shortVarDecl = function(pos, lhs, rhs) {
		var check, scope, newVars, lhsVars, _ref, _i, _slice, _index, lhs$1, i, obj, ident, _tuple, alt, alt$1, _tuple$1, _slice$1, _index$1, _ref$1, _i$1, _slice$2, _index$2, obj$1;
		check = this;
		scope = check.context.scope;
		newVars = (go$sliceType((go$ptrType(Var)))).nil;
		lhsVars = (go$sliceType((go$ptrType(Var)))).make(lhs.length, 0, function() { return (go$ptrType(Var)).nil; });
		_ref = lhs;
		_i = 0;
		while (_i < _ref.length) {
			lhs$1 = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			obj = (go$ptrType(Var)).nil;
			if (_tuple = (lhs$1 !== null && lhs$1.constructor === (go$ptrType(ast.Ident)) ? [lhs$1.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), ident = _tuple[0], !(ident === (go$ptrType(ast.Ident)).nil)) {
				if (alt = scope.Lookup(ident.Name), !(go$interfaceIsEqual(alt, null))) {
					if (_tuple$1 = (alt !== null && alt.constructor === (go$ptrType(Var)) ? [alt.go$val, true] : [(go$ptrType(Var)).nil, false]), alt$1 = _tuple$1[0], !(alt$1 === (go$ptrType(Var)).nil)) {
						obj = alt$1;
					} else {
						check.errorf(lhs$1.Pos(), "cannot assign to %s", new (go$sliceType(go$emptyInterface))([lhs$1]));
					}
				} else {
					obj = NewVar(ident.Pos(), check.pkg, ident.Name, null);
					newVars = go$append(newVars, obj);
				}
				if (!(obj === (go$ptrType(Var)).nil)) {
					check.recordDef(ident, obj);
				}
			} else {
				check.errorf(lhs$1.Pos(), "cannot declare %s", new (go$sliceType(go$emptyInterface))([lhs$1]));
			}
			if (obj === (go$ptrType(Var)).nil) {
				obj = NewVar(lhs$1.Pos(), check.pkg, "_", null);
			}
			_slice$1 = lhsVars, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = obj) : go$throwRuntimeError("index out of range");
			_i++;
		}
		check.initVars(lhsVars, rhs, 0);
		if (newVars.length > 0) {
			_ref$1 = newVars;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				obj$1 = (_slice$2 = _ref$1, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				check.declare(scope, (go$ptrType(ast.Ident)).nil, obj$1);
				_i$1++;
			}
		} else {
			check.errorf(pos, "no new variables on left side of :=", new (go$sliceType(go$emptyInterface))([]));
		}
	};
	checker.prototype.shortVarDecl = function(pos, lhs, rhs) { return this.go$val.shortVarDecl(pos, lhs, rhs); };
	checker.Ptr.prototype.builtin = function(x, call, id) {
		var _, check, _struct, bin, arg, nargs, _ref, _tuple, msg, _ref$1, S, T, s, _tuple$1, x$1, _struct$1, alist, sig, _struct$2, sig$1, mode, typ, val, t, _ref$2, _type, _tuple$2, x$2, c, y, realT, complexT, _ref$3, x$3, x$4, dst, t$1, _tuple$3, x$5, y$1, src, t$2, _ref$4, _type$1, S$1, _tuple$4, x$6, m, k, _ref$5, x$7, _slice, _index, arg0, T$1, min, _ref$6, _type$2, sizes, _ref$7, _i, _slice$1, _index$1, arg$1, ok, s$1, _tuple$5, x$8, _slice$2, _index$2, x$9, _slice$3, _index$3, _slice$4, _index$4, params, _slice$5, _index$5, T$2, T$3, params$1, i, _slice$6, _index$6, _slice$7, _index$7, arg0$1, _tuple$6, x$10, selx, base, sel, _tuple$7, obj, index, indirect, _ref$8, _type$3, offs, t$3, x1, _ref$9, _i$1, _slice$8, _index$8, arg$2;
		_ = false;
		var go$deferred = [];
		try {
			check = this;
			bin = (_struct = predeclaredFuncs[id], new _struct.constructor(_struct.name, _struct.nargs, _struct.variadic, _struct.kind));
			if ((new token.Pos(call.Ellipsis)).IsValid() && !((id === 0))) {
				check.invalidOp(call.Ellipsis, "invalid use of ... with built-in %s", new (go$sliceType(go$emptyInterface))([new Go$String(bin.name)]));
				check.use(call.Args);
				return _;
			}
			if ((id === 7) || (id === 1)) {
				go$deferred.push({ fun: (function(b) {
					check.context.hasCallOrRecv = b;
				}), args: [check.context.hasCallOrRecv] });
				check.context.hasCallOrRecv = false;
			}
			arg = go$throwNilPointerError;
			nargs = call.Args.length;
			_ref = id;
			if (_ref === 8 || _ref === 9 || _ref === 16 || _ref === 19) {
			} else {
				_tuple = unpack((function(x$1, i) {
					var _slice, _index;
					check.expr(x$1, (_slice = call.Args, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
				}), nargs, false), arg = _tuple[0], nargs = _tuple[1];
				if (nargs > 0) {
					arg(x, 0);
					if (x.mode === 0) {
						return _;
					}
				}
			}
			msg = "";
			if (nargs < bin.nargs) {
				msg = "not enough";
			} else if (!bin.variadic && nargs > bin.nargs) {
				msg = "too many";
			}
			if (!(msg === "")) {
				check.invalidOp(call.Rparen, "%s arguments for %s (expected %d, found %d)", new (go$sliceType(go$emptyInterface))([new Go$String(msg), call, new Go$Int(bin.nargs), new Go$Int(nargs)]));
				return _;
			}
			_ref$1 = id;
			switch (0) { default: if (_ref$1 === 0) {
				S = x.typ;
				T = null;
				if (_tuple$1 = (x$1 = S.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(Slice)) ? [x$1.go$val, true] : [(go$ptrType(Slice)).nil, false])), s = _tuple$1[0], !(s === (go$ptrType(Slice)).nil)) {
					T = s.elem;
				} else {
					check.invalidArg(x.pos(), "%s is not a slice", new (go$sliceType(go$emptyInterface))([x]));
					return _;
				}
				alist = new (go$sliceType(operand))([(_struct$1 = x, new operand.Ptr(_struct$1.mode, _struct$1.expr, _struct$1.typ, _struct$1.val, _struct$1.id))]);
				if ((nargs === 2) && (new token.Pos(call.Ellipsis)).IsValid() && x.assignableTo(check.conf, NewSlice(go$pkg.UniverseByte))) {
					arg(x, 1);
					if (x.mode === 0) {
						return _;
					}
					if (isString(x.typ)) {
						if (!(check.Info.Types === false)) {
							sig = makeSig(S, new (go$sliceType(Type))([S, NewSlice(go$pkg.UniverseByte)]));
							sig.variadic = true;
							check.recordBuiltinType(call.Fun, sig);
						}
						x.mode = 7;
						x.typ = S;
						break;
					}
					alist = go$append(alist, (_struct$2 = x, new operand.Ptr(_struct$2.mode, _struct$2.expr, _struct$2.typ, _struct$2.val, _struct$2.id)));
				}
				sig$1 = makeSig(S, new (go$sliceType(Type))([S, NewSlice(T)]));
				sig$1.variadic = true;
				check.arguments$(x, call, sig$1, (function(x$2, i) {
					var _slice, _index, _struct$3, l, r;
					if (i < alist.length) {
						l = x$2, r = (_struct$3 = (_slice = alist, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new operand.Ptr(_struct$3.mode, _struct$3.expr, _struct$3.typ, _struct$3.val, _struct$3.id)), l.mode = r.mode, l.expr = r.expr, l.typ = r.typ, l.val = r.val, l.id = r.id;
						return;
					}
					arg(x$2, i);
				}), nargs);
				x.mode = 7;
				x.typ = S;
				if (!(check.Info.Types === false)) {
					check.recordBuiltinType(call.Fun, sig$1);
				}
			} else if (_ref$1 === 1 || _ref$1 === 7) {
				mode = 0;
				typ = null;
				val = null;
				typ = implicitArrayDeref(x.typ.Underlying());
				_ref$2 = typ;
				_type = _ref$2 !== null ? _ref$2.constructor : null;
				if (_type === (go$ptrType(Basic))) {
					t = _ref$2.go$val;
					if (isString(t) && (id === 7)) {
						if (x.mode === 4) {
							mode = 4;
							val = exact.MakeInt64(new Go$Int64(0, exact.StringVal(x.val).length));
						} else {
							mode = 7;
						}
					}
				} else if (_type === (go$ptrType(Array))) {
					t = _ref$2.go$val;
					mode = 7;
					if (!check.context.hasCallOrRecv) {
						mode = 4;
						val = exact.MakeInt64(t.len);
					}
				} else if (_type === (go$ptrType(Slice)) || _type === (go$ptrType(Chan))) {
					t = _ref$2;
					mode = 7;
				} else if (_type === (go$ptrType(Map))) {
					t = _ref$2.go$val;
					if (id === 7) {
						mode = 7;
					}
				}
				if (mode === 0) {
					check.invalidArg(x.pos(), "%s for %s", new (go$sliceType(go$emptyInterface))([x, new Go$String(bin.name)]));
					return _;
				}
				x.mode = mode;
				x.typ = go$pkg.Typ[2];
				x.val = val;
				if (!(check.Info.Types === false) && !((mode === 4))) {
					check.recordBuiltinType(call.Fun, makeSig(x.typ, new (go$sliceType(Type))([typ])));
				}
			} else if (_ref$1 === 2) {
				_tuple$2 = (x$2 = x.typ.Underlying(), (x$2 !== null && x$2.constructor === (go$ptrType(Chan)) ? [x$2.go$val, true] : [(go$ptrType(Chan)).nil, false])), c = _tuple$2[0];
				if (c === (go$ptrType(Chan)).nil) {
					check.invalidArg(x.pos(), "%s is not a channel", new (go$sliceType(go$emptyInterface))([x]));
					return _;
				}
				if (c.dir === 2) {
					check.invalidArg(x.pos(), "%s must not be a receive-only channel", new (go$sliceType(go$emptyInterface))([x]));
					return _;
				}
				x.mode = 1;
				if (!(check.Info.Types === false)) {
					check.recordBuiltinType(call.Fun, makeSig(null, new (go$sliceType(Type))([c])));
				}
			} else if (_ref$1 === 3) {
				if (!check.complexArg(x)) {
					return _;
				}
				y = new operand.Ptr();
				arg(y, 1);
				if (y.mode === 0) {
					return _;
				}
				if (!check.complexArg(y)) {
					return _;
				}
				check.convertUntyped(x, y.typ);
				if (x.mode === 0) {
					return _;
				}
				check.convertUntyped(y, x.typ);
				if (y.mode === 0) {
					return _;
				}
				if (!Identical(x.typ, y.typ)) {
					check.invalidArg(x.pos(), "mismatched types %s and %s", new (go$sliceType(go$emptyInterface))([x.typ, y.typ]));
					return _;
				}
				if ((x.mode === 4) && (y.mode === 4)) {
					x.val = exact.BinaryOp(x.val, 12, exact.MakeImag(y.val));
				} else {
					x.mode = 7;
				}
				realT = x.typ;
				complexT = go$pkg.Typ[0];
				_ref$3 = (x$3 = realT.Underlying(), (x$3 !== null && x$3.constructor === (go$ptrType(Basic)) ? x$3.go$val : go$typeAssertionFailed(x$3, (go$ptrType(Basic))))).kind;
				if (_ref$3 === 13) {
					complexT = go$pkg.Typ[15];
				} else if (_ref$3 === 14) {
					complexT = go$pkg.Typ[16];
				} else if (_ref$3 === 20 || _ref$3 === 21 || _ref$3 === 22) {
					if (x.mode === 4) {
						realT = (x$4 = defaultType(realT), (x$4 !== null && x$4.constructor === (go$ptrType(Basic)) ? x$4.go$val : go$typeAssertionFailed(x$4, (go$ptrType(Basic)))));
						complexT = go$pkg.Typ[23];
					} else {
						realT = go$pkg.Typ[14];
						complexT = go$pkg.Typ[16];
					}
				} else {
					check.invalidArg(x.pos(), "float32 or float64 arguments expected", new (go$sliceType(go$emptyInterface))([]));
					return _;
				}
				x.typ = complexT;
				if (!(check.Info.Types === false) && !((x.mode === 4))) {
					check.recordBuiltinType(call.Fun, makeSig(complexT, new (go$sliceType(Type))([realT, realT])));
				}
				if (!((x.mode === 4))) {
					check.updateExprType(x.expr, realT, true);
					check.updateExprType(y.expr, realT, true);
				}
			} else if (_ref$1 === 4) {
				dst = null;
				if (_tuple$3 = (x$5 = x.typ.Underlying(), (x$5 !== null && x$5.constructor === (go$ptrType(Slice)) ? [x$5.go$val, true] : [(go$ptrType(Slice)).nil, false])), t$1 = _tuple$3[0], !(t$1 === (go$ptrType(Slice)).nil)) {
					dst = t$1.elem;
				}
				y$1 = new operand.Ptr();
				arg(y$1, 1);
				if (y$1.mode === 0) {
					return _;
				}
				src = null;
				_ref$4 = y$1.typ.Underlying();
				_type$1 = _ref$4 !== null ? _ref$4.constructor : null;
				if (_type$1 === (go$ptrType(Basic))) {
					t$2 = _ref$4.go$val;
					if (isString(y$1.typ)) {
						src = go$pkg.UniverseByte;
					}
				} else if (_type$1 === (go$ptrType(Slice))) {
					t$2 = _ref$4.go$val;
					src = t$2.elem;
				}
				if (go$interfaceIsEqual(dst, null) || go$interfaceIsEqual(src, null)) {
					check.invalidArg(x.pos(), "copy expects slice arguments; found %s and %s", new (go$sliceType(go$emptyInterface))([x, y$1]));
					return _;
				}
				if (!Identical(dst, src)) {
					check.invalidArg(x.pos(), "arguments to copy %s and %s have different element types %s and %s", new (go$sliceType(go$emptyInterface))([x, y$1, dst, src]));
					return _;
				}
				x.mode = 7;
				x.typ = go$pkg.Typ[2];
				if (!(check.Info.Types === false)) {
					S$1 = NewSlice(dst);
					check.recordBuiltinType(call.Fun, makeSig(x.typ, new (go$sliceType(Type))([S$1, S$1])));
				}
			} else if (_ref$1 === 5) {
				_tuple$4 = (x$6 = x.typ.Underlying(), (x$6 !== null && x$6.constructor === (go$ptrType(Map)) ? [x$6.go$val, true] : [(go$ptrType(Map)).nil, false])), m = _tuple$4[0];
				if (m === (go$ptrType(Map)).nil) {
					check.invalidArg(x.pos(), "%s is not a map", new (go$sliceType(go$emptyInterface))([x]));
					return _;
				}
				arg(x, 1);
				if (x.mode === 0) {
					return _;
				}
				if (!x.assignableTo(check.conf, m.key)) {
					check.invalidArg(x.pos(), "%s is not assignable to %s", new (go$sliceType(go$emptyInterface))([x, m.key]));
					return _;
				}
				x.mode = 1;
				if (!(check.Info.Types === false)) {
					check.recordBuiltinType(call.Fun, makeSig(null, new (go$sliceType(Type))([m, m.key])));
				}
			} else if (_ref$1 === 6 || _ref$1 === 13) {
				if (!isComplex(x.typ)) {
					check.invalidArg(x.pos(), "%s must be a complex number", new (go$sliceType(go$emptyInterface))([x]));
					return _;
				}
				if (x.mode === 4) {
					if (id === 13) {
						x.val = exact.Real(x.val);
					} else {
						x.val = exact.Imag(x.val);
					}
				} else {
					x.mode = 7;
				}
				k = 0;
				_ref$5 = (x$7 = x.typ.Underlying(), (x$7 !== null && x$7.constructor === (go$ptrType(Basic)) ? x$7.go$val : go$typeAssertionFailed(x$7, (go$ptrType(Basic))))).kind;
				if (_ref$5 === 15) {
					k = 13;
				} else if (_ref$5 === 16) {
					k = 14;
				} else if (_ref$5 === 23) {
					k = 22;
				} else {
					unreachable();
				}
				if (!(check.Info.Types === false) && !((x.mode === 4))) {
					check.recordBuiltinType(call.Fun, makeSig(go$pkg.Typ[k], new (go$sliceType(Type))([x.typ])));
				}
				x.typ = go$pkg.Typ[k];
			} else if (_ref$1 === 8) {
				arg0 = (_slice = call.Args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				T$1 = check.typ(arg0);
				if (go$interfaceIsEqual(T$1, go$pkg.Typ[0])) {
					return _;
				}
				min = 0;
				_ref$6 = T$1.Underlying();
				_type$2 = _ref$6 !== null ? _ref$6.constructor : null;
				if (_type$2 === (go$ptrType(Slice))) {
					min = 2;
				} else if (_type$2 === (go$ptrType(Map)) || _type$2 === (go$ptrType(Chan))) {
					min = 1;
				} else {
					check.invalidArg(arg0.Pos(), "cannot make %s; type must be slice, map, or channel", new (go$sliceType(go$emptyInterface))([arg0]));
					return _;
				}
				if (nargs < min || (min + 1 >> 0) < nargs) {
					check.errorf(call.Pos(), "%s expects %d or %d arguments; found %d", new (go$sliceType(go$emptyInterface))([call, new Go$Int(min), new Go$Int((min + 1 >> 0)), new Go$Int(nargs)]));
					return _;
				}
				sizes = (go$sliceType(Go$Int64)).nil;
				_ref$7 = go$subslice(call.Args, 1);
				_i = 0;
				while (_i < _ref$7.length) {
					arg$1 = (_slice$1 = _ref$7, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					if (_tuple$5 = check.index(arg$1, new Go$Int64(-1, 4294967295)), s$1 = _tuple$5[0], ok = _tuple$5[1], ok && (s$1.high > 0 || (s$1.high === 0 && s$1.low >= 0))) {
						sizes = go$append(sizes, s$1);
					}
					_i++;
				}
				if ((sizes.length === 2) && (x$8 = (_slice$2 = sizes, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), x$9 = (_slice$3 = sizes, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), (x$8.high > x$9.high || (x$8.high === x$9.high && x$8.low > x$9.low)))) {
					check.invalidArg((_slice$4 = call.Args, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).Pos(), "length and capacity swapped", new (go$sliceType(go$emptyInterface))([]));
				}
				x.mode = 5;
				x.typ = T$1;
				if (!(check.Info.Types === false)) {
					params = go$toNativeArray("Interface", [T$1, go$pkg.Typ[2], go$pkg.Typ[2]]);
					check.recordBuiltinType(call.Fun, makeSig(x.typ, go$subslice(new (go$sliceType(Type))(params), 0, (1 + sizes.length >> 0))));
				}
			} else if (_ref$1 === 9) {
				T$2 = check.typ((_slice$5 = call.Args, _index$5 = 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")));
				if (go$interfaceIsEqual(T$2, go$pkg.Typ[0])) {
					return _;
				}
				x.mode = 5;
				x.typ = new Pointer.Ptr(T$2);
				if (!(check.Info.Types === false)) {
					check.recordBuiltinType(call.Fun, makeSig(x.typ, new (go$sliceType(Type))([T$2])));
				}
			} else if (_ref$1 === 10) {
				T$3 = new Interface.Ptr();
				if (!check.assignment(x, T$3)) {
					assert(x.mode === 0);
					return _;
				}
				x.mode = 1;
				if (!(check.Info.Types === false)) {
					check.recordBuiltinType(call.Fun, makeSig(null, new (go$sliceType(Type))([T$3])));
				}
			} else if (_ref$1 === 11 || _ref$1 === 12) {
				params$1 = (go$sliceType(Type)).nil;
				if (nargs > 0) {
					params$1 = (go$sliceType(Type)).make(nargs, 0, function() { return null; });
					i = 0;
					while (i < nargs) {
						if (i > 0) {
							arg(x, i);
						}
						if (!check.assignment(x, null)) {
							assert(x.mode === 0);
							return _;
						}
						_slice$6 = params$1, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = x.typ) : go$throwRuntimeError("index out of range");
						i = i + 1 >> 0;
					}
				}
				x.mode = 1;
				if (!(check.Info.Types === false)) {
					check.recordBuiltinType(call.Fun, makeSig(null, params$1));
				}
			} else if (_ref$1 === 14) {
				x.mode = 7;
				x.typ = new Interface.Ptr();
				if (!(check.Info.Types === false)) {
					check.recordBuiltinType(call.Fun, makeSig(x.typ, new (go$sliceType(Type))([])));
				}
			} else if (_ref$1 === 15) {
				if (!check.assignment(x, null)) {
					assert(x.mode === 0);
					return _;
				}
				x.mode = 4;
				x.val = exact.MakeInt64(check.conf.alignof(x.typ));
				x.typ = go$pkg.Typ[12];
			} else if (_ref$1 === 16) {
				arg0$1 = (_slice$7 = call.Args, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"));
				_tuple$6 = (x$10 = unparen(arg0$1), (x$10 !== null && x$10.constructor === (go$ptrType(ast.SelectorExpr)) ? [x$10.go$val, true] : [(go$ptrType(ast.SelectorExpr)).nil, false])), selx = _tuple$6[0];
				if (selx === (go$ptrType(ast.SelectorExpr)).nil) {
					check.invalidArg(arg0$1.Pos(), "%s is not a selector expression", new (go$sliceType(go$emptyInterface))([arg0$1]));
					check.rawExpr(x, arg0$1, null);
					return _;
				}
				check.expr(x, selx.X);
				if (x.mode === 0) {
					return _;
				}
				base = derefStructPtr(x.typ);
				sel = selx.Sel.Name;
				_tuple$7 = LookupFieldOrMethod(base, check.pkg, sel), obj = _tuple$7[0], index = _tuple$7[1], indirect = _tuple$7[2];
				_ref$8 = obj;
				_type$3 = _ref$8 !== null ? _ref$8.constructor : null;
				if (_type$3 === null) {
					check.invalidArg(x.pos(), "%s has no single field %s", new (go$sliceType(go$emptyInterface))([base, new Go$String(sel)]));
					return _;
				} else if (_type$3 === (go$ptrType(Func))) {
					check.invalidArg(arg0$1.Pos(), "%s is a method value", new (go$sliceType(go$emptyInterface))([arg0$1]));
					return _;
				}
				if (indirect) {
					check.invalidArg(x.pos(), "field %s is embedded via a pointer in %s", new (go$sliceType(go$emptyInterface))([new Go$String(sel), base]));
					return _;
				}
				check.recordSelection(selx, 0, base, obj, index, false);
				offs = check.conf.offsetof(base, index);
				x.mode = 4;
				x.val = exact.MakeInt64(offs);
				x.typ = go$pkg.Typ[12];
			} else if (_ref$1 === 17) {
				if (!check.assignment(x, null)) {
					assert(x.mode === 0);
					return _;
				}
				x.mode = 4;
				x.val = exact.MakeInt64(check.conf.sizeof(x.typ));
				x.typ = go$pkg.Typ[12];
			} else if (_ref$1 === 18) {
				if (!((x.mode === 4)) || !isBoolean(x.typ)) {
					check.invalidArg(x.pos(), "%s is not a boolean constant", new (go$sliceType(go$emptyInterface))([x]));
					return _;
				}
				if (!((x.val.Kind() === 1))) {
					check.errorf(x.pos(), "internal error: value of %s should be a boolean constant", new (go$sliceType(go$emptyInterface))([x]));
					return _;
				}
				if (!exact.BoolVal(x.val)) {
					check.errorf(call.Pos(), "%s failed", new (go$sliceType(go$emptyInterface))([call]));
				}
			} else if (_ref$1 === 19) {
				if (nargs === 0) {
					check.dump("%s: trace() without arguments", new (go$sliceType(go$emptyInterface))([new token.Pos(call.Pos())]));
					x.mode = 1;
					break;
				}
				t$3 = new operand.Ptr();
				x1 = x;
				_ref$9 = call.Args;
				_i$1 = 0;
				while (_i$1 < _ref$9.length) {
					arg$2 = (_slice$8 = _ref$9, _index$8 = _i$1, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
					check.rawExpr(x1, arg$2, null);
					check.dump("%s: %s", new (go$sliceType(go$emptyInterface))([new token.Pos(x1.pos()), x1]));
					x1 = t$3;
					_i$1++;
				}
			} else {
				unreachable();
			} }
			_ = true;
			return _;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return _;
		}
	};
	checker.prototype.builtin = function(x, call, id) { return this.go$val.builtin(x, call, id); };
	makeSig = function(res, args) {
		var list, _ref, _i, _slice, _index, param, i, _slice$1, _index$1, params, result;
		list = (go$sliceType((go$ptrType(Var)))).make(args.length, 0, function() { return (go$ptrType(Var)).nil; });
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			param = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$1 = list, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = NewVar(0, (go$ptrType(Package)).nil, "", defaultType(param))) : go$throwRuntimeError("index out of range");
			_i++;
		}
		params = NewTuple(list);
		result = (go$ptrType(Tuple)).nil;
		if (!(go$interfaceIsEqual(res, null))) {
			assert(!isUntyped(res));
			result = NewTuple(new (go$sliceType((go$ptrType(Var))))([NewVar(0, (go$ptrType(Package)).nil, "", res)]));
		}
		return new Signature.Ptr((go$ptrType(Scope)).nil, (go$ptrType(Var)).nil, params, result, false);
	};
	implicitArrayDeref = function(typ) {
		var ok, _tuple, p, ok$1, _tuple$1, x, a;
		if (_tuple = (typ !== null && typ.constructor === (go$ptrType(Pointer)) ? [typ.go$val, true] : [(go$ptrType(Pointer)).nil, false]), p = _tuple[0], ok = _tuple[1], ok) {
			if (_tuple$1 = (x = p.base.Underlying(), (x !== null && x.constructor === (go$ptrType(Array)) ? [x.go$val, true] : [(go$ptrType(Array)).nil, false])), a = _tuple$1[0], ok$1 = _tuple$1[1], ok$1) {
				return a;
			}
		}
		return typ;
	};
	unparen = function(x) {
		var ok, _tuple, p;
		if (_tuple = (x !== null && x.constructor === (go$ptrType(ast.ParenExpr)) ? [x.go$val, true] : [(go$ptrType(ast.ParenExpr)).nil, false]), p = _tuple[0], ok = _tuple[1], ok) {
			return unparen(p.X);
		}
		return x;
	};
	checker.Ptr.prototype.complexArg = function(x) {
		var check, _tuple, x$1, t;
		check = this;
		_tuple = (x$1 = x.typ.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(Basic)) ? [x$1.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0];
		if (!(t === (go$ptrType(Basic)).nil) && (!(((t.info & 8) === 0)) || (t.kind === 20) || (t.kind === 21))) {
			return true;
		}
		check.invalidArg(x.pos(), "%s must be a float32, float64, or an untyped non-complex numeric constant", new (go$sliceType(go$emptyInterface))([x]));
		return false;
	};
	checker.prototype.complexArg = function(x) { return this.go$val.complexArg(x); };
	checker.Ptr.prototype.call = function(x, e) {
		var check, _ref, T, n, _ref$1, _slice, _index, _slice$1, _index$1, id, _tuple, x$1, sig, _tuple$1, arg, n$1, _ref$2, _slice$2, _index$2;
		check = this;
		check.exprOrType(x, e.Fun);
		_ref = x.mode;
		if (_ref === 0) {
			check.use(e.Args);
			x.mode = 0;
			x.expr = e;
			return 2;
		} else if (_ref === 3) {
			T = x.typ;
			x.mode = 0;
			n = e.Args.length;
			_ref$1 = n;
			if (_ref$1 === 0) {
				check.errorf(e.Rparen, "missing argument in conversion to %s", new (go$sliceType(go$emptyInterface))([T]));
			} else if (_ref$1 === 1) {
				check.expr(x, (_slice = e.Args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
				if (!((x.mode === 0))) {
					check.conversion(x, T);
				}
			} else {
				check.errorf((_slice$1 = e.Args, _index$1 = (n - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Pos(), "too many arguments in conversion to %s", new (go$sliceType(go$emptyInterface))([T]));
			}
			x.expr = e;
			return 0;
		} else if (_ref === 2) {
			id = x.id;
			if (!check.builtin(x, e, id)) {
				x.mode = 0;
			}
			x.expr = e;
			check.context.hasCallOrRecv = true;
			return predeclaredFuncs[id].kind;
		} else {
			_tuple = (x$1 = x.typ.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(Signature)) ? [x$1.go$val, true] : [(go$ptrType(Signature)).nil, false])), sig = _tuple[0];
			if (sig === (go$ptrType(Signature)).nil) {
				check.invalidOp(x.pos(), "cannot call non-function %s", new (go$sliceType(go$emptyInterface))([x]));
				x.mode = 0;
				x.expr = e;
				return 2;
			}
			_tuple$1 = unpack((function(x$2, i) {
				var _slice$2, _index$2;
				check.expr(x$2, (_slice$2 = e.Args, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")));
			}), e.Args.length, false), arg = _tuple$1[0], n$1 = _tuple$1[1];
			check.arguments$(x, e, sig, arg, n$1);
			_ref$2 = sig.results.Len();
			if (_ref$2 === 0) {
				x.mode = 1;
			} else if (_ref$2 === 1) {
				x.mode = 7;
				x.typ = (_slice$2 = sig.results.vars, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).object.typ;
			} else {
				x.mode = 7;
				x.typ = sig.results;
			}
			x.expr = e;
			check.context.hasCallOrRecv = true;
			return 2;
		}
	};
	checker.prototype.call = function(x, e) { return this.go$val.call(x, e); };
	checker.Ptr.prototype.use = function(list) {
		var check, x, _ref, _i, _slice, _index, e;
		check = this;
		x = new operand.Ptr();
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			e = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			check.rawExpr(x, e, null);
			_i++;
		}
	};
	checker.prototype.use = function(list) { return this.go$val.use(list); };
	unpack = function(get, n, allowCommaOk) {
		var x0, ok, _tuple, x, t, a;
		if (n === 1) {
			x0 = new operand.Ptr();
			get(x0, 0);
			if (x0.mode === 0) {
				return [(function(x, i) {
					if (!((i === 0))) {
						unreachable();
					}
					x.mode = 0;
				}), 1, false];
			}
			if (_tuple = (x = x0.typ, (x !== null && x.constructor === (go$ptrType(Tuple)) ? [x.go$val, true] : [(go$ptrType(Tuple)).nil, false])), t = _tuple[0], ok = _tuple[1], ok) {
				return [(function(x$1, i) {
					x$1.mode = 7;
					x$1.expr = x0.expr;
					x$1.typ = t.At(i).object.typ;
				}), t.Len(), false];
			}
			if ((x0.mode === 6) || (x0.mode === 8)) {
				if (allowCommaOk) {
					a = go$toNativeArray("Interface", [x0.typ, go$pkg.Typ[19]]);
					return [(function(x$1, i) {
						x$1.mode = 7;
						x$1.expr = x0.expr;
						x$1.typ = a[i];
					}), 2, true];
				}
				x0.mode = 7;
			}
			return [(function(x$1, i) {
				var _struct, l, r;
				if (!((i === 0))) {
					unreachable();
				}
				l = x$1, r = (_struct = x0, new operand.Ptr(_struct.mode, _struct.expr, _struct.typ, _struct.val, _struct.id)), l.mode = r.mode, l.expr = r.expr, l.typ = r.typ, l.val = r.val, l.id = r.id;
			}), 1, false];
		}
		return [get, n, false];
	};
	checker.Ptr.prototype.arguments$ = function(x, call, sig, arg, n) {
		var check, passSlice, i;
		check = this;
		passSlice = false;
		if ((new token.Pos(call.Ellipsis)).IsValid()) {
			if (sig.variadic) {
				passSlice = true;
			} else {
				check.errorf(call.Ellipsis, "cannot use ... in call to non-variadic %s", new (go$sliceType(go$emptyInterface))([call.Fun]));
			}
		}
		i = 0;
		while (i < n) {
			arg(x, i);
			if (!((x.mode === 0))) {
				check.argument(sig, i, x, passSlice && (i === (n - 1 >> 0)));
			}
			i = i + 1 >> 0;
		}
		if (sig.variadic) {
			n = n + 1 >> 0;
		}
		if (n < sig.params.Len()) {
			check.errorf(call.Rparen, "too few arguments in call to %s", new (go$sliceType(go$emptyInterface))([call.Fun]));
		}
	};
	checker.prototype.arguments$ = function(x, call, sig, arg, n) { return this.go$val.arguments$(x, call, sig, arg, n); };
	checker.Ptr.prototype.argument = function(sig, i, x, passSlice) {
		var check, n, typ, _slice, _index, _slice$1, _index$1, ok, _tuple, x$1;
		check = this;
		n = sig.params.Len();
		typ = null;
		if (i < n) {
			typ = (_slice = sig.params.vars, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).object.typ;
		} else if (sig.variadic) {
			typ = (_slice$1 = sig.params.vars, _index$1 = (n - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).object.typ;
		} else {
			check.errorf(x.pos(), "too many arguments", new (go$sliceType(go$emptyInterface))([]));
			return;
		}
		if (passSlice) {
			if (!((i === (n - 1 >> 0)))) {
				check.errorf(x.pos(), "can only use ... with matching parameter", new (go$sliceType(go$emptyInterface))([]));
				return;
			}
			if (_tuple = (x$1 = x.typ.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(Slice)) ? [x$1.go$val, true] : [(go$ptrType(Slice)).nil, false])), ok = _tuple[1], !ok) {
				check.errorf(x.pos(), "cannot use %s as parameter of type %s", new (go$sliceType(go$emptyInterface))([x, typ]));
				return;
			}
		} else if (sig.variadic && i >= (n - 1 >> 0)) {
			typ = (typ !== null && typ.constructor === (go$ptrType(Slice)) ? typ.go$val : go$typeAssertionFailed(typ, (go$ptrType(Slice)))).elem;
		}
		if (!check.assignment(x, typ) && !((x.mode === 0))) {
			check.errorf(x.pos(), "cannot pass argument %s to parameter of type %s", new (go$sliceType(go$emptyInterface))([x, typ]));
		}
	};
	checker.prototype.argument = function(sig, i, x, passSlice) { return this.go$val.argument(sig, i, x, passSlice); };
	checker.Ptr.prototype.selector = function(x, e) {
		var check, obj, index, indirect, sel, ok, _tuple, x$1, ident, pkg, _tuple$1, x$2, exp, exp$1, _ref, _type, _tuple$2, _tuple$3, m, params, x$3, sig, obj$1, _ref$1, _type$1, x$4, _struct, sig$1;
		check = this;
		obj = null, index = (go$sliceType(Go$Int)).nil, indirect = false;
		sel = e.Sel.Name;
		if (_tuple = (x$1 = e.X, (x$1 !== null && x$1.constructor === (go$ptrType(ast.Ident)) ? [x$1.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), ident = _tuple[0], ok = _tuple[1], ok) {
			if (_tuple$1 = (x$2 = check.context.scope.LookupParent(ident.Name), (x$2 !== null && x$2.constructor === (go$ptrType(PkgName)) ? [x$2.go$val, true] : [(go$ptrType(PkgName)).nil, false])), pkg = _tuple$1[0], !(pkg === (go$ptrType(PkgName)).nil)) {
				check.recordUse(ident, pkg);
				pkg.object.used = true;
				exp = pkg.object.pkg.scope.Lookup(sel);
				if (go$interfaceIsEqual(exp, null)) {
					if (!pkg.object.pkg.fake) {
						check.errorf(e.Pos(), "%s not declared by package %s", new (go$sliceType(go$emptyInterface))([new Go$String(sel), ident]));
					}
					x.mode = 0;
					x.expr = e;
					return;
				}
				if (!exp.Exported()) {
					check.errorf(e.Pos(), "%s not exported by package %s", new (go$sliceType(go$emptyInterface))([new Go$String(sel), ident]));
				}
				check.recordSelection(e, 3, null, exp, (go$sliceType(Go$Int)).nil, false);
				_ref = exp;
				_type = _ref !== null ? _ref.constructor : null;
				if (_type === (go$ptrType(Const))) {
					exp$1 = _ref.go$val;
					assert(!(go$interfaceIsEqual(exp$1.Val(), null)));
					x.mode = 4;
					x.typ = exp$1.object.typ;
					x.val = exp$1.val;
				} else if (_type === (go$ptrType(TypeName))) {
					exp$1 = _ref.go$val;
					x.mode = 3;
					x.typ = exp$1.object.typ;
				} else if (_type === (go$ptrType(Var))) {
					exp$1 = _ref.go$val;
					x.mode = 5;
					x.typ = exp$1.object.typ;
				} else if (_type === (go$ptrType(Func))) {
					exp$1 = _ref.go$val;
					x.mode = 7;
					x.typ = exp$1.object.typ;
				} else if (_type === (go$ptrType(Builtin))) {
					exp$1 = _ref.go$val;
					x.mode = 2;
					x.typ = exp$1.object.typ;
					x.id = exp$1.id;
				} else {
					exp$1 = _ref;
					unreachable();
				}
				x.expr = e;
				return;
			}
		}
		check.exprOrType(x, e.X);
		if (x.mode === 0) {
			x.mode = 0;
			x.expr = e;
			return;
		}
		_tuple$2 = LookupFieldOrMethod(x.typ, check.pkg, sel), obj = _tuple$2[0], index = _tuple$2[1], indirect = _tuple$2[2];
		if (go$interfaceIsEqual(obj, null)) {
			if (!(index === (go$sliceType(Go$Int)).nil)) {
				check.invalidOp(e.Pos(), "ambiguous selector %s", new (go$sliceType(go$emptyInterface))([new Go$String(sel)]));
			} else {
				check.invalidOp(e.Pos(), "%s has no field or method %s", new (go$sliceType(go$emptyInterface))([x, new Go$String(sel)]));
			}
			x.mode = 0;
			x.expr = e;
			return;
		}
		if (x.mode === 3) {
			_tuple$3 = (obj !== null && obj.constructor === (go$ptrType(Func)) ? [obj.go$val, true] : [(go$ptrType(Func)).nil, false]), m = _tuple$3[0];
			if (m === (go$ptrType(Func)).nil) {
				check.invalidOp(e.Pos(), "%s has no method %s", new (go$sliceType(go$emptyInterface))([x, new Go$String(sel)]));
				x.mode = 0;
				x.expr = e;
				return;
			}
			if (!indirect && ptrRecv(m)) {
				check.invalidOp(e.Pos(), "%s is not in method set of %s", new (go$sliceType(go$emptyInterface))([new Go$String(sel), x.typ]));
				x.mode = 0;
				x.expr = e;
				return;
			}
			check.recordSelection(e, 2, x.typ, m, index, indirect);
			params = (go$sliceType((go$ptrType(Var)))).nil;
			sig = (x$3 = m.object.typ, (x$3 !== null && x$3.constructor === (go$ptrType(Signature)) ? x$3.go$val : go$typeAssertionFailed(x$3, (go$ptrType(Signature)))));
			if (!(sig.params === (go$ptrType(Tuple)).nil)) {
				params = sig.params.vars;
			}
			x.mode = 7;
			x.typ = new Signature.Ptr((go$ptrType(Scope)).nil, (go$ptrType(Var)).nil, NewTuple(go$appendSlice(new (go$sliceType((go$ptrType(Var))))([NewVar(0, check.pkg, "", x.typ)]), params)), sig.results, sig.variadic);
			check.addDeclDep(m);
		} else {
			_ref$1 = obj;
			_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
			if (_type$1 === (go$ptrType(Var))) {
				obj$1 = _ref$1.go$val;
				check.recordSelection(e, 0, x.typ, obj$1, index, indirect);
				if ((x.mode === 5) || indirect) {
					x.mode = 5;
				} else {
					x.mode = 7;
				}
				x.typ = obj$1.object.typ;
			} else if (_type$1 === (go$ptrType(Func))) {
				obj$1 = _ref$1.go$val;
				if (!indirect && !((x.mode === 5)) && ptrRecv(obj$1)) {
					check.invalidOp(e.Pos(), "%s is not in method set of %s", new (go$sliceType(go$emptyInterface))([new Go$String(sel), x]));
					x.mode = 0;
					x.expr = e;
					return;
				}
				check.recordSelection(e, 1, x.typ, obj$1, index, indirect);
				x.mode = 7;
				sig$1 = (_struct = (x$4 = obj$1.object.typ, (x$4 !== null && x$4.constructor === (go$ptrType(Signature)) ? x$4.go$val : go$typeAssertionFailed(x$4, (go$ptrType(Signature))))), new Signature.Ptr(_struct.scope, _struct.recv, _struct.params, _struct.results, _struct.variadic));
				sig$1.recv = (go$ptrType(Var)).nil;
				x.typ = sig$1;
			} else {
				obj$1 = _ref$1;
				unreachable();
			}
		}
		x.expr = e;
	};
	checker.prototype.selector = function(x, e) { return this.go$val.selector(x, e); };
	checker.Ptr.prototype.assocMethod = function(tname, meth) {
		var check, m, _entry, _key;
		check = this;
		m = check.methods;
		if (m === false) {
			m = new Go$Map();
			check.methods = m;
		}
		_key = tname, (m || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: go$append((_entry = m[tname], _entry !== undefined ? _entry.v : (go$sliceType((go$ptrType(Func)))).nil), meth) };
	};
	checker.prototype.assocMethod = function(tname, meth) { return this.go$val.assocMethod(tname, meth); };
	checker.Ptr.prototype.rememberUntyped = function(e, lhs, typ, val) {
		var check, m, _key;
		check = this;
		m = check.untyped;
		if (m === false) {
			m = new Go$Map();
			check.untyped = m;
		}
		_key = e, (m || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: new exprInfo.Ptr(lhs, typ, val) };
	};
	checker.prototype.rememberUntyped = function(e, lhs, typ, val) { return this.go$val.rememberUntyped(e, lhs, typ, val); };
	checker.Ptr.prototype.delay = function(f) {
		var check;
		check = this;
		check.delayed = go$append(check.delayed, f);
	};
	checker.prototype.delay = function(f) { return this.go$val.delay(f); };
	newChecker = function(conf, fset, pkg, info) {
		if (conf === (go$ptrType(Config)).nil) {
			conf = new Config.Ptr();
		}
		if (conf.Packages === false) {
			conf.Packages = new Go$Map();
		}
		if (info === (go$ptrType(Info)).nil) {
			info = new Info.Ptr();
		}
		return new checker.Ptr(conf, fset, pkg, info, null, false, false, (go$sliceType(funcInfo)).nil, (go$sliceType((go$funcType([], [], false)))).nil, false, false, new context.Ptr(), 0);
	};
	checker.Ptr.prototype.handleBailout = function(err) {
		var check, p, _ref, _type;
		check = this;
		_ref = go$recover();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === null || _type === bailout) {
			p = _ref;
			err.go$set(check.firstErr);
		} else {
			p = _ref;
			throw go$panic(p);
		}
	};
	checker.prototype.handleBailout = function(err) { return this.go$val.handleBailout(err); };
	checker.Ptr.prototype.files = function(files) {
		var err, check, v, pkg, i, _ref, _i, _slice, _index, file, name, _ref$1, _slice$1, _index$1, _slice$2, _index$2, _ref$2, _i$1, _slice$3, _index$3, f, _ref$3, _i$2, _keys, _entry, info, x;
		err = null;
		var go$deferred = [];
		try {
			check = this;
			go$deferred.push({ recv: check, method: "handleBailout", args: [new (go$ptrType(go$error))(function() { return err; }, function(v) { err = v; })] });
			pkg = check.pkg;
			i = 0;
			_ref = files;
			_i = 0;
			while (_i < _ref.length) {
				file = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				name = file.Name.Name;
				_ref$1 = pkg.name;
				if (_ref$1 === "") {
					pkg.name = name;
					_slice$1 = files, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = file) : go$throwRuntimeError("index out of range");
					i = i + 1 >> 0;
				} else if (_ref$1 === name) {
					_slice$2 = files, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = file) : go$throwRuntimeError("index out of range");
					i = i + 1 >> 0;
				} else {
					check.errorf(file.Package, "package %s; expected %s", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$String(pkg.name)]));
				}
				_i++;
			}
			check.resolveFiles(go$subslice(files, 0, i));
			_ref$2 = check.delayed;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				f = (_slice$3 = _ref$2, _index$3 = _i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
				f();
				_i$1++;
			}
			check.delayed = (go$sliceType((go$funcType([], [], false)))).nil;
			if (!(check.Info.Types === false)) {
				_ref$3 = check.untyped;
				_i$2 = 0;
				_keys = go$keys(_ref$3);
				while (_i$2 < _keys.length) {
					_entry = _ref$3[_keys[_i$2]];
					info = _entry.v;
					x = _entry.k;
					check.recordTypeAndValue(x, info.typ, info.val);
					_i$2++;
				}
			}
			pkg.complete = true;
			return err;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return err;
		}
	};
	checker.prototype.files = function(files) { return this.go$val.files(files); };
	checker.Ptr.prototype.addDeclDep = function(to) {
		var check, from, _entry, init, m, _key;
		check = this;
		from = check.context.decl;
		if (from === (go$ptrType(declInfo)).nil) {
			return;
		}
		init = (_entry = check.initMap[(to || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : (go$ptrType(declInfo)).nil);
		if (init === (go$ptrType(declInfo)).nil) {
			return;
		}
		m = from.deps;
		if (m === false) {
			m = new Go$Map();
			from.deps = m;
		}
		_key = to, (m || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: init };
	};
	checker.prototype.addDeclDep = function(to) { return this.go$val.addDeclDep(to); };
	checker.Ptr.prototype.recordTypeAndValue = function(x, typ, val) {
		var check, m, _key;
		check = this;
		assert(!(go$interfaceIsEqual(x, null)) && !(go$interfaceIsEqual(typ, null)));
		if (!(go$interfaceIsEqual(val, null))) {
			assert(isConstType(typ));
		}
		if (m = check.Info.Types, !(m === false)) {
			_key = x, (m || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: new TypeAndValue.Ptr(typ, val) };
		}
	};
	checker.prototype.recordTypeAndValue = function(x, typ, val) { return this.go$val.recordTypeAndValue(x, typ, val); };
	checker.Ptr.prototype.recordBuiltinType = function(f, sig) {
		var check, p, _ref, _type;
		check = this;
		while (true) {
			check.recordTypeAndValue(f, sig, null);
			_ref = f;
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === (go$ptrType(ast.Ident))) {
				p = _ref.go$val;
				return;
			} else if (_type === (go$ptrType(ast.ParenExpr))) {
				p = _ref.go$val;
				f = p.X;
			} else {
				p = _ref;
				unreachable();
			}
		}
	};
	checker.prototype.recordBuiltinType = function(f, sig) { return this.go$val.recordBuiltinType(f, sig); };
	checker.Ptr.prototype.recordCommaOkTypes = function(x, a) {
		var check, m, _entry, _struct, tv, pos, _struct$1, _key, _tuple, p;
		check = this;
		assert(!(go$interfaceIsEqual(x, null)));
		if (go$interfaceIsEqual(a[0], null) || go$interfaceIsEqual(a[1], null)) {
			return;
		}
		assert(isTyped(a[0]) && isTyped(a[1]) && isBoolean(a[1]));
		if (m = check.Info.Types, !(m === false)) {
			while (true) {
				tv = (_struct = (_entry = m[(x || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new TypeAndValue.Ptr()), new TypeAndValue.Ptr(_struct.Type, _struct.Value));
				assert(!(go$interfaceIsEqual(tv.Type, null)));
				pos = x.Pos();
				tv.Type = NewTuple(new (go$sliceType((go$ptrType(Var))))([NewVar(pos, check.pkg, "", a[0]), NewVar(pos, check.pkg, "", a[1])]));
				_key = x, (m || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: (_struct$1 = tv, new TypeAndValue.Ptr(_struct$1.Type, _struct$1.Value)) };
				_tuple = (x !== null && x.constructor === (go$ptrType(ast.ParenExpr)) ? [x.go$val, true] : [(go$ptrType(ast.ParenExpr)).nil, false]), p = _tuple[0];
				if (p === (go$ptrType(ast.ParenExpr)).nil) {
					break;
				}
				x = p.X;
			}
		}
	};
	checker.prototype.recordCommaOkTypes = function(x, a) { return this.go$val.recordCommaOkTypes(x, a); };
	checker.Ptr.prototype.recordDef = function(id, obj) {
		var check, m, _key;
		check = this;
		assert(!(id === (go$ptrType(ast.Ident)).nil));
		if (m = check.Info.Defs, !(m === false)) {
			_key = id, (m || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: obj };
		}
	};
	checker.prototype.recordDef = function(id, obj) { return this.go$val.recordDef(id, obj); };
	checker.Ptr.prototype.recordUse = function(id, obj) {
		var check, m, _key;
		check = this;
		assert(!(id === (go$ptrType(ast.Ident)).nil));
		assert(!(go$interfaceIsEqual(obj, null)));
		if (m = check.Info.Uses, !(m === false)) {
			_key = id, (m || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: obj };
		}
	};
	checker.prototype.recordUse = function(id, obj) { return this.go$val.recordUse(id, obj); };
	checker.Ptr.prototype.recordImplicit = function(node, obj) {
		var check, m, _key;
		check = this;
		assert(!(go$interfaceIsEqual(node, null)) && !(go$interfaceIsEqual(obj, null)));
		if (m = check.Info.Implicits, !(m === false)) {
			_key = node, (m || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: obj };
		}
	};
	checker.prototype.recordImplicit = function(node, obj) { return this.go$val.recordImplicit(node, obj); };
	checker.Ptr.prototype.recordSelection = function(x, kind, recv, obj, index, indirect) {
		var check, m, _key;
		check = this;
		assert(!(go$interfaceIsEqual(obj, null)) && (go$interfaceIsEqual(recv, null) || index.length > 0));
		check.recordUse(x.Sel, obj);
		if (m = check.Info.Selections, !(m === false)) {
			_key = x, (m || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: new Selection.Ptr(kind, recv, obj, index, indirect) };
		}
	};
	checker.prototype.recordSelection = function(x, kind, recv, obj, index, indirect) { return this.go$val.recordSelection(x, kind, recv, obj, index, indirect); };
	checker.Ptr.prototype.recordScope = function(node, scope) {
		var check, m, _key;
		check = this;
		assert(!(go$interfaceIsEqual(node, null)) && !(scope === (go$ptrType(Scope)).nil));
		if (m = check.Info.Scopes, !(m === false)) {
			_key = node, (m || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: scope };
		}
	};
	checker.prototype.recordScope = function(node, scope) { return this.go$val.recordScope(node, scope); };
	checker.Ptr.prototype.conversion = function(x, T) {
		var check, constArg, ok, x$1, t, v, codepoint, ok$1, _tuple, i, final$1;
		check = this;
		constArg = x.mode === 4;
		ok = false;
		if (constArg && isConstType(T)) {
			t = (x$1 = T.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(Basic)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(Basic)))));
			if (representableConst(x.val, check.conf, t.kind, new (go$ptrType(exact.Value))(function() { return x.val; }, function(v) { x.val = v; }))) {
				ok = true;
			} else if (x.isInteger() && isString(t)) {
				codepoint = new Go$Int64(-1, 4294967295);
				if (_tuple = exact.Int64Val(x.val), i = _tuple[0], ok$1 = _tuple[1], ok$1) {
					codepoint = i;
				}
				x.val = exact.MakeString(go$encodeRune(codepoint.low));
				ok = true;
			}
		} else if (x.convertibleTo(check.conf, T)) {
			x.mode = 7;
			ok = true;
		}
		if (!ok) {
			check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, T]));
			x.mode = 0;
			return;
		}
		final$1 = x.typ;
		if (isUntyped(x.typ)) {
			final$1 = T;
			if (isInterface(T) || constArg && !isConstType(T)) {
				final$1 = defaultType(x.typ);
			}
		}
		x.typ = T;
		check.updateExprType(x.expr, final$1, true);
	};
	checker.prototype.conversion = function(x, T) { return this.go$val.conversion(x, T); };
	operand.Ptr.prototype.convertibleTo = function(conf, T) {
		var x, V, Vu, Tu, ok, _tuple, V$1, ok$1, _tuple$1, T$1;
		x = this;
		if (x.assignableTo(conf, T)) {
			return true;
		}
		V = x.typ;
		Vu = V.Underlying();
		Tu = T.Underlying();
		if (Identical(Vu, Tu)) {
			return true;
		}
		if (_tuple = (V !== null && V.constructor === (go$ptrType(Pointer)) ? [V.go$val, true] : [(go$ptrType(Pointer)).nil, false]), V$1 = _tuple[0], ok = _tuple[1], ok) {
			if (_tuple$1 = (T !== null && T.constructor === (go$ptrType(Pointer)) ? [T.go$val, true] : [(go$ptrType(Pointer)).nil, false]), T$1 = _tuple$1[0], ok$1 = _tuple$1[1], ok$1) {
				if (Identical(V$1.base.Underlying(), T$1.base.Underlying())) {
					return true;
				}
			}
		}
		if ((isInteger(V) || isFloat(V)) && (isInteger(T) || isFloat(T))) {
			return true;
		}
		if (isComplex(V) && isComplex(T)) {
			return true;
		}
		if ((isInteger(V) || isBytesOrRunes(Vu)) && isString(T)) {
			return true;
		}
		if (isString(V) && isBytesOrRunes(Tu)) {
			return true;
		}
		if ((isPointer(Vu) || isUintptr(Vu)) && isUnsafePointer(T)) {
			return true;
		}
		if (isUnsafePointer(V) && (isPointer(Tu) || isUintptr(Tu))) {
			return true;
		}
		return false;
	};
	operand.prototype.convertibleTo = function(conf, T) { return this.go$val.convertibleTo(conf, T); };
	isUintptr = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && (t.kind === 12);
	};
	isUnsafePointer = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && (t.kind === 18);
	};
	isPointer = function(typ) {
		var _tuple, x, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Pointer)) ? [x.go$val, true] : [(go$ptrType(Pointer)).nil, false])), ok = _tuple[1];
		return ok;
	};
	isBytesOrRunes = function(typ) {
		var ok, _tuple, s, _tuple$1, x, t, ok$1;
		if (_tuple = (typ !== null && typ.constructor === (go$ptrType(Slice)) ? [typ.go$val, true] : [(go$ptrType(Slice)).nil, false]), s = _tuple[0], ok = _tuple[1], ok) {
			_tuple$1 = (x = s.elem.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple$1[0], ok$1 = _tuple$1[1];
			return ok$1 && ((t.kind === 8) || (t.kind === 5));
		}
		return false;
	};
	checker.Ptr.prototype.reportAltDecl = function(obj) {
		var check, pos;
		check = this;
		if (pos = obj.Pos(), (new token.Pos(pos)).IsValid()) {
			check.errorf(pos, "\tother declaration of %s", new (go$sliceType(go$emptyInterface))([new Go$String(obj.Name())]));
		}
	};
	checker.prototype.reportAltDecl = function(obj) { return this.go$val.reportAltDecl(obj); };
	checker.Ptr.prototype.declare = function(scope, id, obj) {
		var check, alt;
		check = this;
		if (alt = scope.Insert(obj), !(go$interfaceIsEqual(alt, null))) {
			check.errorf(obj.Pos(), "%s redeclared in this block", new (go$sliceType(go$emptyInterface))([new Go$String(obj.Name())]));
			check.reportAltDecl(alt);
			return;
		}
		if (!(id === (go$ptrType(ast.Ident)).nil)) {
			check.recordDef(id, obj);
		}
	};
	checker.prototype.declare = function(scope, id, obj) { return this.go$val.declare(scope, id, obj); };
	checker.Ptr.prototype.objDecl = function(obj, def$1, path) {
		var check, _entry, d, _struct, obj$1, _ref, _type;
		var go$deferred = [];
		try {
			check = this;
			if (!(go$interfaceIsEqual(obj.Type(), null))) {
				return;
			}
			d = (_entry = check.objMap[(obj || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : (go$ptrType(declInfo)).nil);
			go$deferred.push({ fun: (function(ctxt) {
				var _struct$1;
				check.context = (_struct$1 = ctxt, new context.Ptr(_struct$1.decl, _struct$1.scope, _struct$1.iota, _struct$1.sig, _struct$1.hasLabel, _struct$1.hasCallOrRecv));
			}), args: [(_struct = check.context, new context.Ptr(_struct.decl, _struct.scope, _struct.iota, _struct.sig, _struct.hasLabel, _struct.hasCallOrRecv))] });
			check.context = new context.Ptr((go$ptrType(declInfo)).nil, d.file, null, (go$ptrType(Signature)).nil, false, false);
			_ref = obj;
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === (go$ptrType(Const))) {
				obj$1 = _ref.go$val;
				check.context.decl = d;
				check.constDecl(obj$1, d.typ, d.init);
			} else if (_type === (go$ptrType(Var))) {
				obj$1 = _ref.go$val;
				check.context.decl = d;
				check.varDecl(obj$1, d.lhs, d.typ, d.init);
			} else if (_type === (go$ptrType(TypeName))) {
				obj$1 = _ref.go$val;
				check.typeDecl(obj$1, d.typ, def$1, path);
			} else if (_type === (go$ptrType(Func))) {
				obj$1 = _ref.go$val;
				check.funcDecl(obj$1, d);
			} else {
				obj$1 = _ref;
				unreachable();
			}
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	checker.prototype.objDecl = function(obj, def$1, path) { return this.go$val.objDecl(obj, def$1, path); };
	checker.Ptr.prototype.constDecl = function(obj, typ, init) {
		var check, t, x;
		var go$deferred = [];
		try {
			check = this;
			assert(go$interfaceIsEqual(obj.object.typ, null));
			if (obj.visited) {
				obj.object.typ = go$pkg.Typ[0];
				return;
			}
			obj.visited = true;
			assert(go$interfaceIsEqual(check.context.iota, null));
			check.context.iota = obj.val;
			go$deferred.push({ fun: (function() {
				check.context.iota = null;
			}), args: [] });
			if (!(go$interfaceIsEqual(typ, null))) {
				t = check.typ(typ);
				if (!isConstType(t)) {
					check.errorf(typ.Pos(), "invalid constant type %s", new (go$sliceType(go$emptyInterface))([t]));
					obj.object.typ = go$pkg.Typ[0];
					return;
				}
				obj.object.typ = t;
			}
			x = new operand.Ptr();
			if (!(go$interfaceIsEqual(init, null))) {
				check.expr(x, init);
			}
			check.initConst(obj, x);
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	checker.prototype.constDecl = function(obj, typ, init) { return this.go$val.constDecl(obj, typ, init); };
	checker.Ptr.prototype.varDecl = function(obj, lhs, typ, init) {
		var check, _slice, _index, x;
		check = this;
		assert(go$interfaceIsEqual(obj.object.typ, null));
		if (obj.visited) {
			obj.object.typ = go$pkg.Typ[0];
			return;
		}
		obj.visited = true;
		assert(go$interfaceIsEqual(check.context.iota, null));
		if (!(go$interfaceIsEqual(typ, null))) {
			obj.object.typ = check.typ(typ);
		}
		if (go$interfaceIsEqual(init, null)) {
			if (go$interfaceIsEqual(typ, null)) {
				obj.object.typ = go$pkg.Typ[0];
			}
			return;
		}
		if (lhs === (go$sliceType((go$ptrType(Var)))).nil || (lhs.length === 1)) {
			assert(lhs === (go$sliceType((go$ptrType(Var)))).nil || (_slice = lhs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === obj);
			x = new operand.Ptr();
			check.expr(x, init);
			check.initVar(obj, x);
			return;
		}
		check.initVars(lhs, new (go$sliceType(ast.Expr))([init]), 0);
	};
	checker.prototype.varDecl = function(obj, lhs, typ, init) { return this.go$val.varDecl(obj, lhs, typ, init); };
	underlying = function(typ) {
		var _tuple, n;
		while (true) {
			_tuple = (typ !== null && typ.constructor === (go$ptrType(Named)) ? [typ.go$val, true] : [(go$ptrType(Named)).nil, false]), n = _tuple[0];
			if (n === (go$ptrType(Named)).nil) {
				break;
			}
			typ = n.underlying;
		}
		return typ;
	};
	Named.Ptr.prototype.setUnderlying = function(typ) {
		var n;
		n = this;
		if (!(n === (go$ptrType(Named)).nil)) {
			n.underlying = typ;
		}
	};
	Named.prototype.setUnderlying = function(typ) { return this.go$val.setUnderlying(typ); };
	checker.Ptr.prototype.typeDecl = function(obj, typ, def$1, path) {
		var check, named, _entry, methods, mset, t, _tuple, x, _ref, _i, _slice, _index, fld, v, _ref$1, _i$1, _slice$1, _index$1, m, alt, v$1, _ref$2, _type, _entry$1;
		check = this;
		assert(go$interfaceIsEqual(obj.object.typ, null));
		assert(go$interfaceIsEqual(check.context.iota, null));
		named = new Named.Ptr(obj, null, (go$sliceType((go$ptrType(Func)))).nil);
		def$1.setUnderlying(named);
		obj.object.typ = named;
		check.typExpr(typ, named, go$append(path, obj));
		named.underlying = underlying(named.underlying);
		methods = (_entry = check.methods[obj.object.name], _entry !== undefined ? _entry.v : (go$sliceType((go$ptrType(Func)))).nil);
		if (methods.length === 0) {
			return;
		}
		mset = false;
		if (_tuple = (x = named.underlying, (x !== null && x.constructor === (go$ptrType(Struct)) ? [x.go$val, true] : [(go$ptrType(Struct)).nil, false])), t = _tuple[0], !(t === (go$ptrType(Struct)).nil)) {
			_ref = t.fields;
			_i = 0;
			while (_i < _ref.length) {
				fld = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (!(fld.object.name === "_")) {
					assert(go$interfaceIsEqual((new (go$ptrType(objset))(function() { return mset; }, function(v) { mset = v; })).insert(fld), null));
				}
				_i++;
			}
		}
		_ref$1 = methods;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			m = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (!(m.object.name === "_")) {
				if (alt = (new (go$ptrType(objset))(function() { return mset; }, function(v$1) { mset = v$1; })).insert(m), !(go$interfaceIsEqual(alt, null))) {
					_ref$2 = alt;
					_type = _ref$2 !== null ? _ref$2.constructor : null;
					if (_type === (go$ptrType(Var))) {
						check.errorf(m.object.pos, "field and method with the same name %s", new (go$sliceType(go$emptyInterface))([new Go$String(m.object.name)]));
					} else if (_type === (go$ptrType(Func))) {
						check.errorf(m.object.pos, "method %s already declared for %s", new (go$sliceType(go$emptyInterface))([new Go$String(m.object.name), named]));
					} else {
						unreachable();
					}
					check.reportAltDecl(alt);
					_i$1++;
					continue;
				}
			}
			check.recordDef((_entry$1 = check.objMap[(m || go$interfaceNil).go$key()], _entry$1 !== undefined ? _entry$1.v : (go$ptrType(declInfo)).nil).fdecl.Name, m);
			check.objDecl(m, (go$ptrType(Named)).nil, (go$sliceType((go$ptrType(TypeName)))).nil);
			if (!(m.object.name === "_")) {
				named.methods = go$append(named.methods, m);
			}
			_i$1++;
		}
		delete check.methods[obj.object.name];
	};
	checker.prototype.typeDecl = function(obj, typ, def$1, path) { return this.go$val.typeDecl(obj, typ, def$1, path); };
	checker.Ptr.prototype.funcDecl = function(obj, decl) {
		var check, sig, fdecl;
		check = this;
		assert(go$interfaceIsEqual(obj.object.typ, null));
		assert(go$interfaceIsEqual(check.context.iota, null));
		sig = new Signature.Ptr();
		obj.object.typ = sig;
		fdecl = decl.fdecl;
		check.funcType(sig, fdecl.Recv, fdecl.Type);
		if (sig.recv === (go$ptrType(Var)).nil && obj.object.name === "init" && (sig.params.Len() > 0 || sig.results.Len() > 0)) {
			check.errorf(fdecl.Pos(), "func init must have no arguments and no return values", new (go$sliceType(go$emptyInterface))([]));
		}
		if (!check.conf.IgnoreFuncBodies && !(fdecl.Body === (go$ptrType(ast.BlockStmt)).nil)) {
			check.funcs = go$append(check.funcs, new funcInfo.Ptr(obj.object.name, decl, sig, fdecl.Body));
		}
	};
	checker.prototype.funcDecl = function(obj, decl) { return this.go$val.funcDecl(obj, decl); };
	checker.Ptr.prototype.declStmt = function(decl) {
		var check, pkg, d, _ref, _type, last, _ref$1, _i, _slice, _index, spec, iota, s, _ref$2, _type$1, _ref$3, lhs, _ref$4, _i$1, _slice$1, _index$1, name, i, obj, _slice$2, _index$2, init, _slice$3, _index$3, _ref$5, _i$2, _slice$4, _index$4, name$1, i$1, _slice$5, _index$5, lhs0, _ref$6, _i$3, _slice$6, _index$6, name$2, i$2, _slice$7, _index$7, _ref$7, _i$4, _slice$8, _index$8, obj$1, i$3, lhs$1, init$1, _ref$8, _slice$9, _index$9, _slice$10, _index$10, _slice$11, _index$11, _ref$9, _i$5, _slice$12, _index$12, name$3, i$4, _slice$13, _index$13, obj$2;
		check = this;
		pkg = check.pkg;
		_ref = decl;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadDecl))) {
			d = _ref.go$val;
		} else if (_type === (go$ptrType(ast.GenDecl))) {
			d = _ref.go$val;
			last = (go$ptrType(ast.ValueSpec)).nil;
			_ref$1 = d.Specs;
			_i = 0;
			while (_i < _ref$1.length) {
				spec = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				iota = _i;
				_ref$2 = spec;
				_type$1 = _ref$2 !== null ? _ref$2.constructor : null;
				if (_type$1 === (go$ptrType(ast.ValueSpec))) {
					s = _ref$2.go$val;
					_ref$3 = d.Tok;
					if (_ref$3 === 64) {
						if (!(go$interfaceIsEqual(s.Type, null)) || s.Values.length > 0) {
							last = s;
						} else if (last === (go$ptrType(ast.ValueSpec)).nil) {
							last = new ast.ValueSpec.Ptr();
						}
						lhs = (go$sliceType((go$ptrType(Const)))).make(s.Names.length, 0, function() { return (go$ptrType(Const)).nil; });
						_ref$4 = s.Names;
						_i$1 = 0;
						while (_i$1 < _ref$4.length) {
							name = (_slice$1 = _ref$4, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
							i = _i$1;
							obj = NewConst(name.Pos(), pkg, name.Name, null, exact.MakeInt64(new Go$Int64(0, iota)));
							_slice$2 = lhs, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = obj) : go$throwRuntimeError("index out of range");
							init = null;
							if (i < last.Values.length) {
								init = (_slice$3 = last.Values, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
							}
							check.constDecl(obj, last.Type, init);
							_i$1++;
						}
						check.arityMatch(s, last);
						_ref$5 = s.Names;
						_i$2 = 0;
						while (_i$2 < _ref$5.length) {
							name$1 = (_slice$4 = _ref$5, _index$4 = _i$2, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
							i$1 = _i$2;
							check.declare(check.context.scope, name$1, (_slice$5 = lhs, _index$5 = i$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")));
							_i$2++;
						}
					} else if (_ref$3 === 85) {
						lhs0 = (go$sliceType((go$ptrType(Var)))).make(s.Names.length, 0, function() { return (go$ptrType(Var)).nil; });
						_ref$6 = s.Names;
						_i$3 = 0;
						while (_i$3 < _ref$6.length) {
							name$2 = (_slice$6 = _ref$6, _index$6 = _i$3, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
							i$2 = _i$3;
							_slice$7 = lhs0, _index$7 = i$2, (_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = NewVar(name$2.Pos(), pkg, name$2.Name, null)) : go$throwRuntimeError("index out of range");
							_i$3++;
						}
						_ref$7 = lhs0;
						_i$4 = 0;
						while (_i$4 < _ref$7.length) {
							obj$1 = (_slice$8 = _ref$7, _index$8 = _i$4, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
							i$3 = _i$4;
							lhs$1 = (go$sliceType((go$ptrType(Var)))).nil;
							init$1 = null;
							_ref$8 = s.Values.length;
							if (_ref$8 === s.Names.length) {
								init$1 = (_slice$9 = s.Values, _index$9 = i$3, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"));
							} else if (_ref$8 === 1) {
								lhs$1 = lhs0;
								init$1 = (_slice$10 = s.Values, _index$10 = 0, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"));
							} else {
								if (i$3 < s.Values.length) {
									init$1 = (_slice$11 = s.Values, _index$11 = i$3, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range"));
								}
							}
							check.varDecl(obj$1, lhs$1, s.Type, init$1);
							if (s.Values.length === 1) {
								break;
							}
							_i$4++;
						}
						check.arityMatch(s, (go$ptrType(ast.ValueSpec)).nil);
						_ref$9 = s.Names;
						_i$5 = 0;
						while (_i$5 < _ref$9.length) {
							name$3 = (_slice$12 = _ref$9, _index$12 = _i$5, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range"));
							i$4 = _i$5;
							check.declare(check.context.scope, name$3, (_slice$13 = lhs0, _index$13 = i$4, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")));
							_i$5++;
						}
					} else {
						check.invalidAST(s.Pos(), "invalid token %s", new (go$sliceType(go$emptyInterface))([new token.Token(d.Tok)]));
					}
				} else if (_type$1 === (go$ptrType(ast.TypeSpec))) {
					s = _ref$2.go$val;
					obj$2 = NewTypeName(s.Name.Pos(), pkg, s.Name.Name, null);
					check.declare(check.context.scope, s.Name, obj$2);
					check.typeDecl(obj$2, s.Type, (go$ptrType(Named)).nil, (go$sliceType((go$ptrType(TypeName)))).nil);
				} else {
					s = _ref$2;
					check.invalidAST(s.Pos(), "const, type, or var declaration expected", new (go$sliceType(go$emptyInterface))([]));
				}
				_i++;
			}
		} else {
			d = _ref;
			check.invalidAST(d.Pos(), "unknown ast.Decl node %T", new (go$sliceType(go$emptyInterface))([d]));
		}
	};
	checker.prototype.declStmt = function(decl) { return this.go$val.declStmt(decl); };
	assert = function(p) {
		if (!p) {
			throw go$panic(new Go$String("assertion failed"));
		}
	};
	unreachable = function() {
		throw go$panic(new Go$String("unreachable"));
	};
	checker.Ptr.prototype.sprintf = function(format, args) {
		var check, _ref, _i, _slice, _index, arg, i, a, _ref$1, _type, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4;
		check = this;
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			arg = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_ref$1 = arg;
			_type = _ref$1 !== null ? _ref$1.constructor : null;
			if (_type === null) {
				a = _ref$1;
				_slice$1 = args, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = new Go$String("<nil>")) : go$throwRuntimeError("index out of range");
			} else if (_type === operand) {
				a = _ref$1.go$val;
				throw go$panic(new Go$String("internal error: should always pass *operand"));
			} else if (_type === token.Pos) {
				a = _ref$1.go$val;
				_slice$2 = args, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = new Go$String(check.fset.Position(a).String())) : go$throwRuntimeError("index out of range");
			} else if (ast.Expr.implementedBy.indexOf(_type) !== -1) {
				a = _ref$1;
				_slice$3 = args, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = new Go$String(ExprString(a))) : go$throwRuntimeError("index out of range");
			} else if (Type.implementedBy.indexOf(_type) !== -1) {
				a = _ref$1;
				_slice$4 = args, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = new Go$String(TypeString(check.pkg, a))) : go$throwRuntimeError("index out of range");
			}
			_i++;
		}
		return fmt.Sprintf(format, args);
	};
	checker.prototype.sprintf = function(format, args) { return this.go$val.sprintf(format, args); };
	checker.Ptr.prototype.dump = function(format, args) {
		var check;
		check = this;
		fmt.Println(new (go$sliceType(go$emptyInterface))([new Go$String(check.sprintf(format, args))]));
	};
	checker.prototype.dump = function(format, args) { return this.go$val.dump(format, args); };
	checker.Ptr.prototype.err = function(pos, msg) {
		var check, err, f, x;
		check = this;
		err = new Error.Ptr(check.fset, pos, msg);
		if (go$interfaceIsEqual(check.firstErr, null)) {
			check.firstErr = new err.constructor.Struct(err);
		}
		f = check.conf.Error;
		if (f === go$throwNilPointerError) {
			throw go$panic((x = new bailout.Ptr(), new x.constructor.Struct(x)));
		}
		f(new err.constructor.Struct(err));
	};
	checker.prototype.err = function(pos, msg) { return this.go$val.err(pos, msg); };
	checker.Ptr.prototype.errorf = function(pos, format, args) {
		var check;
		check = this;
		check.err(pos, check.sprintf(format, args));
	};
	checker.prototype.errorf = function(pos, format, args) { return this.go$val.errorf(pos, format, args); };
	checker.Ptr.prototype.invalidAST = function(pos, format, args) {
		var check;
		check = this;
		check.errorf(pos, "invalid AST: " + format, args);
	};
	checker.prototype.invalidAST = function(pos, format, args) { return this.go$val.invalidAST(pos, format, args); };
	checker.Ptr.prototype.invalidArg = function(pos, format, args) {
		var check;
		check = this;
		check.errorf(pos, "invalid argument: " + format, args);
	};
	checker.prototype.invalidArg = function(pos, format, args) { return this.go$val.invalidArg(pos, format, args); };
	checker.Ptr.prototype.invalidOp = function(pos, format, args) {
		var check;
		check = this;
		check.errorf(pos, "invalid operation: " + format, args);
	};
	checker.prototype.invalidOp = function(pos, format, args) { return this.go$val.invalidOp(pos, format, args); };
	New = go$pkg.New = function(str) {
		var _tuple, typ, err;
		_tuple = Eval(str, (go$ptrType(Package)).nil, (go$ptrType(Scope)).nil), typ = _tuple[0], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			throw go$panic(err);
		}
		return typ;
	};
	Eval = go$pkg.Eval = function(str, pkg, scope) {
		var typ, val, err, _tuple, node, _tuple$1, fset, _tuple$2;
		typ = null;
		val = null;
		err = null;
		_tuple = parser.ParseExpr(str), node = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [null, null, err], typ = _tuple$1[0], val = _tuple$1[1], err = _tuple$1[2];
			return [typ, val, err];
		}
		fset = token.NewFileSet();
		fset.AddFile("", str.length, fset.Base()).SetLinesForContent(new (go$sliceType(Go$Uint8))(go$stringToBytes(str)));
		_tuple$2 = EvalNode(fset, node, pkg, scope), typ = _tuple$2[0], val = _tuple$2[1], err = _tuple$2[2];
		return [typ, val, err];
	};
	EvalNode = go$pkg.EvalNode = function(fset, node, pkg, scope) {
		var typ, val, err, s, _tuple, check, v, x, _ref;
		typ = null;
		val = null;
		err = null;
		var go$deferred = [];
		try {
			if (pkg === (go$ptrType(Package)).nil) {
				scope = go$pkg.Universe;
			} else {
				s = scope;
				while (!(s === (go$ptrType(Scope)).nil) && !(s === pkg.scope)) {
					s = s.parent;
				}
				if (s === (go$ptrType(Scope)).nil) {
					_tuple = [null, null, fmt.Errorf("scope does not belong to package %s", new (go$sliceType(go$emptyInterface))([new Go$String(pkg.name)]))], typ = _tuple[0], val = _tuple[1], err = _tuple[2];
					return [typ, val, err];
				}
			}
			check = newChecker((go$ptrType(Config)).nil, fset, pkg, (go$ptrType(Info)).nil);
			check.context.scope = scope;
			go$deferred.push({ recv: check, method: "handleBailout", args: [new (go$ptrType(go$error))(function() { return err; }, function(v) { err = v; })] });
			x = new operand.Ptr();
			check.exprOrType(x, node);
			_ref = x.mode;
			if (_ref === 0 || _ref === 1) {
				unreachable();
			} else if (_ref === 4) {
				val = x.val;
				typ = x.typ;
			} else if (_ref === 3 || _ref === 5 || _ref === 6 || _ref === 7 || _ref === 8) {
				typ = x.typ;
			} else {
				unreachable();
			}
			return [typ, val, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [typ, val, err];
		}
	};
	checker.Ptr.prototype.op = function(m, x, op) {
		var check, pred, _entry;
		check = this;
		if (pred = (_entry = m[op], _entry !== undefined ? _entry.v : go$throwNilPointerError), !(pred === go$throwNilPointerError)) {
			if (!pred(x.typ)) {
				check.invalidOp(x.pos(), "operator %s not defined for %s", new (go$sliceType(go$emptyInterface))([new token.Token(op), x]));
				return false;
			}
		} else {
			check.invalidAST(x.pos(), "unknown operator %s", new (go$sliceType(go$emptyInterface))([new token.Token(op)]));
			return false;
		}
		return true;
	};
	checker.prototype.op = function(m, x, op) { return this.go$val.op(m, x, op); };
	checker.Ptr.prototype.unary = function(x, op) {
		var check, _ref, ok, _tuple, x$1, _tuple$1, x$2, typ, ok$1, x$3, typ$1, size, x$4;
		check = this;
		_ref = op;
		if (_ref === 17) {
			if (_tuple = (x$1 = unparen(x.expr), (x$1 !== null && x$1.constructor === (go$ptrType(ast.CompositeLit)) ? [x$1.go$val, true] : [(go$ptrType(ast.CompositeLit)).nil, false])), ok = _tuple[1], ok) {
				x.mode = 5;
			}
			if (!((x.mode === 5))) {
				check.invalidOp(x.pos(), "cannot take address of %s", new (go$sliceType(go$emptyInterface))([x]));
				x.mode = 0;
				return;
			}
			x.typ = new Pointer.Ptr(x.typ);
			return;
		} else if (_ref === 36) {
			_tuple$1 = (x$2 = x.typ.Underlying(), (x$2 !== null && x$2.constructor === (go$ptrType(Chan)) ? [x$2.go$val, true] : [(go$ptrType(Chan)).nil, false])), typ = _tuple$1[0], ok$1 = _tuple$1[1];
			if (!ok$1) {
				check.invalidOp(x.pos(), "cannot receive from non-channel %s", new (go$sliceType(go$emptyInterface))([x]));
				x.mode = 0;
				return;
			}
			if (typ.dir === 1) {
				check.invalidOp(x.pos(), "cannot receive from send-only channel %s", new (go$sliceType(go$emptyInterface))([x]));
				x.mode = 0;
				return;
			}
			x.mode = 8;
			x.typ = typ.elem;
			check.context.hasCallOrRecv = true;
			return;
		}
		if (!check.op(unaryOpPredicates, x, op)) {
			x.mode = 0;
			return;
		}
		if (x.mode === 4) {
			typ$1 = (x$3 = x.typ.Underlying(), (x$3 !== null && x$3.constructor === (go$ptrType(Basic)) ? x$3.go$val : go$typeAssertionFailed(x$3, (go$ptrType(Basic)))));
			size = -1;
			if (isUnsigned(typ$1)) {
				size = ((x$4 = check.conf.sizeof(typ$1), x$4.low + ((x$4.high >> 31) * 4294967296)) >> 0);
			}
			x.val = exact.UnaryOp(op, x.val, size);
			if (isTyped(typ$1)) {
				check.representable(x, typ$1);
			}
			return;
		}
		x.mode = 7;
	};
	checker.prototype.unary = function(x, op) { return this.go$val.unary(x, op); };
	isShift = function(op) {
		return (op === 20) || (op === 21);
	};
	isComparison = function(op) {
		var _ref;
		_ref = op;
		if (_ref === 39 || _ref === 44 || _ref === 40 || _ref === 45 || _ref === 41 || _ref === 46) {
			return true;
		}
		return false;
	};
	fitsFloat32 = function(x) {
		var _tuple, f;
		_tuple = exact.Float64Val(x), f = _tuple[0];
		return !math.IsInf(go$float32frombits(go$float32bits(f)), 0);
	};
	roundFloat32 = function(x) {
		var _tuple, f;
		_tuple = exact.Float64Val(x), f = _tuple[0];
		f = go$float32frombits(go$float32bits(f));
		if (!math.IsInf(f, 0)) {
			return exact.MakeFloat64(f);
		}
		return null;
	};
	fitsFloat64 = function(x) {
		var _tuple, f;
		_tuple = exact.Float64Val(x), f = _tuple[0];
		return !math.IsInf(f, 0);
	};
	roundFloat64 = function(x) {
		var _tuple, f;
		_tuple = exact.Float64Val(x), f = _tuple[0];
		if (!math.IsInf(f, 0)) {
			return exact.MakeFloat64(f);
		}
		return null;
	};
	representableConst = function(x, conf, as, rounded) {
		var _ref, ok, _tuple, x$1, _ref$1, x$2, x$3, s, x$4, x$5, x$6, s$1, x$7, x$8, x$9, x$10, n, _ref$2, x$11, x$12, s$2, r, r$1, _ref$3, r$2, r$3, _ref$4, re, im, re$1, im$1;
		_ref = x.Kind();
		if (_ref === 0) {
			return true;
		} else if (_ref === 1) {
			return (as === 1) || (as === 19);
		} else if (_ref === 3) {
			if (_tuple = exact.Int64Val(x), x$1 = _tuple[0], ok = _tuple[1], ok) {
				_ref$1 = as;
				if (_ref$1 === 2) {
					s = (x$2 = (conf.sizeof(go$pkg.Typ[as]).low >>> 0), x$3 = 8, (((x$2 >>> 16 << 16) * x$3 >>> 0) + (x$2 << 16 >>> 16) * x$3) >>> 0);
					return (x$4 = go$shiftLeft64(new Go$Int64(-1, 4294967295), ((s - 1 >>> 0))), (x$4.high < x$1.high || (x$4.high === x$1.high && x$4.low <= x$1.low))) && (x$5 = (x$6 = go$shiftLeft64(new Go$Int64(0, 1), ((s - 1 >>> 0))), new Go$Int64(x$6.high - 0, x$6.low - 1)), (x$1.high < x$5.high || (x$1.high === x$5.high && x$1.low <= x$5.low)));
				} else if (_ref$1 === 3) {
					return (-1 < x$1.high || (-1 === x$1.high && 4294967168 <= x$1.low)) && (x$1.high < 0 || (x$1.high === 0 && x$1.low <= 127));
				} else if (_ref$1 === 4) {
					return (-1 < x$1.high || (-1 === x$1.high && 4294934528 <= x$1.low)) && (x$1.high < 0 || (x$1.high === 0 && x$1.low <= 32767));
				} else if (_ref$1 === 5) {
					return (-1 < x$1.high || (-1 === x$1.high && 2147483648 <= x$1.low)) && (x$1.high < 0 || (x$1.high === 0 && x$1.low <= 2147483647));
				} else if (_ref$1 === 6) {
					return true;
				} else if (_ref$1 === 7 || _ref$1 === 12) {
					if (s$1 = (x$7 = (conf.sizeof(go$pkg.Typ[as]).low >>> 0), x$8 = 8, (((x$7 >>> 16 << 16) * x$8 >>> 0) + (x$7 << 16 >>> 16) * x$8) >>> 0), s$1 < 64) {
						return (0 < x$1.high || (0 === x$1.high && 0 <= x$1.low)) && (x$9 = (x$10 = go$shiftLeft64(new Go$Int64(0, 1), s$1), new Go$Int64(x$10.high - 0, x$10.low - 1)), (x$1.high < x$9.high || (x$1.high === x$9.high && x$1.low <= x$9.low)));
					}
					return (0 < x$1.high || (0 === x$1.high && 0 <= x$1.low));
				} else if (_ref$1 === 8) {
					return (0 < x$1.high || (0 === x$1.high && 0 <= x$1.low)) && (x$1.high < 0 || (x$1.high === 0 && x$1.low <= 255));
				} else if (_ref$1 === 9) {
					return (0 < x$1.high || (0 === x$1.high && 0 <= x$1.low)) && (x$1.high < 0 || (x$1.high === 0 && x$1.low <= 65535));
				} else if (_ref$1 === 10) {
					return (0 < x$1.high || (0 === x$1.high && 0 <= x$1.low)) && (x$1.high < 0 || (x$1.high === 0 && x$1.low <= 4294967295));
				} else if (_ref$1 === 11) {
					return (0 < x$1.high || (0 === x$1.high && 0 <= x$1.low));
				} else if (_ref$1 === 13 || _ref$1 === 14 || _ref$1 === 15 || _ref$1 === 16 || _ref$1 === 20 || _ref$1 === 22 || _ref$1 === 23) {
					return true;
				}
			}
			n = exact.BitLen(x);
			_ref$2 = as;
			if (_ref$2 === 7 || _ref$2 === 12) {
				s$2 = (x$11 = (conf.sizeof(go$pkg.Typ[as]).low >>> 0), x$12 = 8, (((x$11 >>> 16 << 16) * x$12 >>> 0) + (x$11 << 16 >>> 16) * x$12) >>> 0);
				return exact.Sign(x) >= 0 && n <= (s$2 >> 0);
			} else if (_ref$2 === 11) {
				return exact.Sign(x) >= 0 && n <= 64;
			} else if (_ref$2 === 13 || _ref$2 === 15) {
				if (rounded === (go$ptrType(exact.Value)).nil) {
					return fitsFloat32(x);
				}
				r = roundFloat32(x);
				if (!(go$interfaceIsEqual(r, null))) {
					rounded.go$set(r);
					return true;
				}
			} else if (_ref$2 === 14 || _ref$2 === 16) {
				if (rounded === (go$ptrType(exact.Value)).nil) {
					return fitsFloat64(x);
				}
				r$1 = roundFloat64(x);
				if (!(go$interfaceIsEqual(r$1, null))) {
					rounded.go$set(r$1);
					return true;
				}
			} else if (_ref$2 === 20 || _ref$2 === 22 || _ref$2 === 23) {
				return true;
			}
		} else if (_ref === 4) {
			_ref$3 = as;
			if (_ref$3 === 13 || _ref$3 === 15) {
				if (rounded === (go$ptrType(exact.Value)).nil) {
					return fitsFloat32(x);
				}
				r$2 = roundFloat32(x);
				if (!(go$interfaceIsEqual(r$2, null))) {
					rounded.go$set(r$2);
					return true;
				}
			} else if (_ref$3 === 14 || _ref$3 === 16) {
				if (rounded === (go$ptrType(exact.Value)).nil) {
					return fitsFloat64(x);
				}
				r$3 = roundFloat64(x);
				if (!(go$interfaceIsEqual(r$3, null))) {
					rounded.go$set(r$3);
					return true;
				}
			} else if (_ref$3 === 22 || _ref$3 === 23) {
				return true;
			}
		} else if (_ref === 5) {
			_ref$4 = as;
			if (_ref$4 === 15) {
				if (rounded === (go$ptrType(exact.Value)).nil) {
					return fitsFloat32(exact.Real(x)) && fitsFloat32(exact.Imag(x));
				}
				re = roundFloat32(exact.Real(x));
				im = roundFloat32(exact.Imag(x));
				if (!(go$interfaceIsEqual(re, null)) && !(go$interfaceIsEqual(im, null))) {
					rounded.go$set(exact.BinaryOp(re, 12, exact.MakeImag(im)));
					return true;
				}
			} else if (_ref$4 === 16) {
				if (rounded === (go$ptrType(exact.Value)).nil) {
					return fitsFloat64(exact.Real(x)) && fitsFloat64(exact.Imag(x));
				}
				re$1 = roundFloat64(exact.Real(x));
				im$1 = roundFloat64(exact.Imag(x));
				if (!(go$interfaceIsEqual(re$1, null)) && !(go$interfaceIsEqual(im$1, null))) {
					rounded.go$set(exact.BinaryOp(re$1, 12, exact.MakeImag(im$1)));
					return true;
				}
			} else if (_ref$4 === 23) {
				return true;
			}
		} else if (_ref === 2) {
			return (as === 17) || (as === 24);
		} else {
			unreachable();
		}
		return false;
	};
	checker.Ptr.prototype.representable = function(x, typ) {
		var check, v, msg;
		check = this;
		assert(x.mode === 4);
		if (!representableConst(x.val, check.conf, typ.kind, new (go$ptrType(exact.Value))(function() { return x.val; }, function(v) { x.val = v; }))) {
			msg = "";
			if (isNumeric(x.typ) && isNumeric(typ)) {
				if (!isInteger(x.typ) && isInteger(typ)) {
					msg = "%s truncated to %s";
				} else {
					msg = "%s overflows %s";
				}
			} else {
				msg = "cannot convert %s to %s";
			}
			check.errorf(x.pos(), msg, new (go$sliceType(go$emptyInterface))([x, typ]));
			x.mode = 0;
		}
	};
	checker.prototype.representable = function(x, typ) { return this.go$val.representable(x, typ); };
	checker.Ptr.prototype.updateExprType = function(x, typ, final$1) {
		var check, _tuple, _entry, _struct, old, found, x$1, _ref, _type, x$2, _struct$1, _key;
		check = this;
		_tuple = (_entry = check.untyped[(x || go$interfaceNil).go$key()], _entry !== undefined ? [_entry.v, true] : [new exprInfo.Ptr(), false]), old = (_struct = _tuple[0], new exprInfo.Ptr(_struct.isLhs, _struct.typ, _struct.val)), found = _tuple[1];
		if (!found) {
			return;
		}
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		switch (0) { default: if (_type === (go$ptrType(ast.BadExpr)) || _type === (go$ptrType(ast.FuncLit)) || _type === (go$ptrType(ast.CompositeLit)) || _type === (go$ptrType(ast.IndexExpr)) || _type === (go$ptrType(ast.SliceExpr)) || _type === (go$ptrType(ast.TypeAssertExpr)) || _type === (go$ptrType(ast.StarExpr)) || _type === (go$ptrType(ast.KeyValueExpr)) || _type === (go$ptrType(ast.ArrayType)) || _type === (go$ptrType(ast.StructType)) || _type === (go$ptrType(ast.FuncType)) || _type === (go$ptrType(ast.InterfaceType)) || _type === (go$ptrType(ast.MapType)) || _type === (go$ptrType(ast.ChanType))) {
			x$1 = _ref;
			return;
		} else if (_type === (go$ptrType(ast.CallExpr))) {
			x$1 = _ref.go$val;
		} else if (_type === (go$ptrType(ast.Ident)) || _type === (go$ptrType(ast.BasicLit)) || _type === (go$ptrType(ast.SelectorExpr))) {
			x$1 = _ref;
		} else if (_type === (go$ptrType(ast.ParenExpr))) {
			x$1 = _ref.go$val;
			check.updateExprType(x$1.X, typ, final$1);
		} else if (_type === (go$ptrType(ast.UnaryExpr))) {
			x$1 = _ref.go$val;
			if (!(go$interfaceIsEqual(old.val, null))) {
				break;
			}
			check.updateExprType(x$1.X, typ, final$1);
		} else if (_type === (go$ptrType(ast.BinaryExpr))) {
			x$1 = _ref.go$val;
			if (!(go$interfaceIsEqual(old.val, null))) {
				break;
			}
			if (isComparison(x$1.Op)) {
			} else if (isShift(x$1.Op)) {
				check.updateExprType(x$1.X, typ, final$1);
			} else {
				check.updateExprType(x$1.X, typ, final$1);
				check.updateExprType(x$1.Y, typ, final$1);
			}
		} else {
			x$1 = _ref;
			unreachable();
		} }
		if (!final$1 && isUntyped(typ)) {
			old.typ = (x$2 = typ.Underlying(), (x$2 !== null && x$2.constructor === (go$ptrType(Basic)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(Basic)))));
			_key = x, (check.untyped || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: (_struct$1 = old, new exprInfo.Ptr(_struct$1.isLhs, _struct$1.typ, _struct$1.val)) };
			return;
		}
		delete check.untyped[(x || go$interfaceNil).go$key()];
		if (old.isLhs && !isInteger(typ)) {
			check.invalidOp(x.Pos(), "shifted operand %s (type %s) must be integer", new (go$sliceType(go$emptyInterface))([x, typ]));
			return;
		}
		check.recordTypeAndValue(x, typ, old.val);
	};
	checker.prototype.updateExprType = function(x, typ, final$1) { return this.go$val.updateExprType(x, typ, final$1); };
	checker.Ptr.prototype.convertUntyped = function(x, target) {
		var check, x$1, xkind, tkind, t, _ref, _type, _ref$1, x$2;
		check = this;
		if ((x.mode === 0) || isTyped(x.typ) || go$interfaceIsEqual(target, go$pkg.Typ[0])) {
			return;
		}
		if (isUntyped(target)) {
			xkind = (x$1 = x.typ, (x$1 !== null && x$1.constructor === (go$ptrType(Basic)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(Basic))))).kind;
			tkind = (target !== null && target.constructor === (go$ptrType(Basic)) ? target.go$val : go$typeAssertionFailed(target, (go$ptrType(Basic)))).kind;
			if (isNumeric(x.typ) && isNumeric(target)) {
				if (xkind < tkind) {
					x.typ = target;
					check.updateExprType(x.expr, target, false);
				}
			} else if (!((xkind === tkind))) {
				check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, target]));
				x.mode = 0;
				return;
			}
			return;
		}
		_ref = target.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(Basic))) {
			t = _ref.go$val;
			if (x.mode === 4) {
				check.representable(x, t);
				if (x.mode === 0) {
					return;
				}
			} else {
				_ref$1 = (x$2 = x.typ, (x$2 !== null && x$2.constructor === (go$ptrType(Basic)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(Basic))))).kind;
				if (_ref$1 === 19) {
					if (!isBoolean(target)) {
						check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, target]));
						x.mode = 0;
						return;
					}
				} else if (_ref$1 === 20 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23) {
					if (!isNumeric(target)) {
						check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, target]));
						x.mode = 0;
						return;
					}
				} else if (_ref$1 === 24) {
					unreachable();
				} else if (_ref$1 === 25) {
					if (!hasNil(target)) {
						check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, target]));
						x.mode = 0;
						return;
					}
				} else {
					check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, target]));
					x.mode = 0;
					return;
				}
			}
		} else if (_type === (go$ptrType(Interface))) {
			t = _ref.go$val;
			if (!x.isNil() && !t.Empty()) {
				check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, target]));
				x.mode = 0;
				return;
			}
			if (x.isNil()) {
				target = go$pkg.Typ[25];
			} else {
				if (!t.Empty()) {
					check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, target]));
					x.mode = 0;
					return;
				}
				target = defaultType(x.typ);
			}
		} else if (_type === (go$ptrType(Pointer)) || _type === (go$ptrType(Signature)) || _type === (go$ptrType(Slice)) || _type === (go$ptrType(Map)) || _type === (go$ptrType(Chan))) {
			t = _ref;
			if (!x.isNil()) {
				check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, target]));
				x.mode = 0;
				return;
			}
			target = go$pkg.Typ[25];
		} else {
			t = _ref;
			check.errorf(x.pos(), "cannot convert %s to %s", new (go$sliceType(go$emptyInterface))([x, target]));
			x.mode = 0;
			return;
		}
		x.typ = target;
		check.updateExprType(x.expr, target, true);
	};
	checker.prototype.convertUntyped = function(x, target) { return this.go$val.convertUntyped(x, target); };
	checker.Ptr.prototype.comparison = function(x, y, op) {
		var check, err, defined, _ref, typ;
		check = this;
		err = "";
		if (x.assignableTo(check.conf, y.typ) || y.assignableTo(check.conf, x.typ)) {
			defined = false;
			_ref = op;
			if (_ref === 39 || _ref === 44) {
				defined = Comparable(x.typ) || x.isNil() && hasNil(y.typ) || y.isNil() && hasNil(x.typ);
			} else if (_ref === 40 || _ref === 45 || _ref === 41 || _ref === 46) {
				defined = isOrdered(x.typ);
			} else {
				unreachable();
			}
			if (!defined) {
				typ = x.typ;
				if (x.isNil()) {
					typ = y.typ;
				}
				err = check.sprintf("operator %s not defined for %s", new (go$sliceType(go$emptyInterface))([new token.Token(op), typ]));
			}
		} else {
			err = check.sprintf("mismatched types %s and %s", new (go$sliceType(go$emptyInterface))([x.typ, y.typ]));
		}
		if (!(err === "")) {
			check.errorf(x.pos(), "cannot compare %s %s %s (%s)", new (go$sliceType(go$emptyInterface))([x.expr, new token.Token(op), y.expr, new Go$String(err)]));
			x.mode = 0;
			return;
		}
		if ((x.mode === 4) && (y.mode === 4)) {
			x.val = exact.MakeBool(exact.Compare(x.val, op, y.val));
		} else {
			x.mode = 7;
			check.updateExprType(x.expr, defaultType(x.typ), true);
			check.updateExprType(y.expr, defaultType(y.typ), true);
		}
		x.typ = go$pkg.Typ[19];
	};
	checker.prototype.comparison = function(x, y, op) { return this.go$val.comparison(x, y, op); };
	checker.Ptr.prototype.shift = function(x, y, op) {
		var check, untypedx, _tuple, s, ok, _tuple$1, _entry, _struct, info, found, _struct$1, _key;
		check = this;
		untypedx = isUntyped(x.typ);
		if (!isInteger(x.typ) && (!untypedx || !representableConst(x.val, (go$ptrType(Config)).nil, 20, (go$ptrType(exact.Value)).nil))) {
			check.invalidOp(x.pos(), "shifted operand %s must be integer", new (go$sliceType(go$emptyInterface))([x]));
			x.mode = 0;
			return;
		}
		if (isInteger(y.typ) && isUnsigned(y.typ)) {
		} else if (isUntyped(y.typ)) {
			check.convertUntyped(y, go$pkg.Typ[20]);
			if (y.mode === 0) {
				x.mode = 0;
				return;
			}
		} else {
			check.invalidOp(y.pos(), "shift count %s must be unsigned integer", new (go$sliceType(go$emptyInterface))([y]));
			x.mode = 0;
			return;
		}
		if (x.mode === 4) {
			if (y.mode === 4) {
				_tuple = exact.Uint64Val(y.val), s = _tuple[0], ok = _tuple[1];
				if (!ok || (s.high > 0 || (s.high === 0 && s.low > 1074))) {
					check.invalidOp(y.pos(), "stupid shift count %s", new (go$sliceType(go$emptyInterface))([y]));
					x.mode = 0;
					return;
				}
				if (!isInteger(x.typ)) {
					x.typ = go$pkg.Typ[20];
				}
				x.val = exact.Shift(x.val, op, (s.low >>> 0));
				return;
			}
			if (untypedx) {
				_tuple$1 = (_entry = check.untyped[(x.expr || go$interfaceNil).go$key()], _entry !== undefined ? [_entry.v, true] : [new exprInfo.Ptr(), false]), info = (_struct = _tuple$1[0], new exprInfo.Ptr(_struct.isLhs, _struct.typ, _struct.val)), found = _tuple$1[1];
				assert(found);
				info.isLhs = true;
				_key = x.expr, (check.untyped || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: (_struct$1 = info, new exprInfo.Ptr(_struct$1.isLhs, _struct$1.typ, _struct$1.val)) };
				x.mode = 7;
				return;
			}
		}
		if ((y.mode === 4) && exact.Sign(y.val) < 0) {
			check.invalidOp(y.pos(), "shift count %s must not be negative", new (go$sliceType(go$emptyInterface))([y]));
		}
		if (!isInteger(x.typ)) {
			check.invalidOp(x.pos(), "shifted operand %s must be integer", new (go$sliceType(go$emptyInterface))([x]));
			x.mode = 0;
			return;
		}
		x.mode = 7;
	};
	checker.prototype.shift = function(x, y, op) { return this.go$val.shift(x, y, op); };
	checker.Ptr.prototype.binary = function(x, lhs, rhs, op) {
		var check, y, x$1, typ;
		check = this;
		y = new operand.Ptr();
		check.expr(x, lhs);
		check.expr(y, rhs);
		if (x.mode === 0) {
			return;
		}
		if (y.mode === 0) {
			x.mode = 0;
			x.expr = y.expr;
			return;
		}
		if (isShift(op)) {
			check.shift(x, y, op);
			return;
		}
		check.convertUntyped(x, y.typ);
		if (x.mode === 0) {
			return;
		}
		check.convertUntyped(y, x.typ);
		if (y.mode === 0) {
			x.mode = 0;
			return;
		}
		if (isComparison(op)) {
			check.comparison(x, y, op);
			return;
		}
		if (!Identical(x.typ, y.typ)) {
			if (!(go$interfaceIsEqual(x.typ, go$pkg.Typ[0])) && !(go$interfaceIsEqual(y.typ, go$pkg.Typ[0]))) {
				check.invalidOp(x.pos(), "mismatched types %s and %s", new (go$sliceType(go$emptyInterface))([x.typ, y.typ]));
			}
			x.mode = 0;
			return;
		}
		if (!check.op(binaryOpPredicates, x, op)) {
			x.mode = 0;
			return;
		}
		if (((op === 15) || (op === 16)) && ((x.mode === 4) || isInteger(x.typ)) && (y.mode === 4) && (exact.Sign(y.val) === 0)) {
			check.invalidOp(y.pos(), "division by zero", new (go$sliceType(go$emptyInterface))([]));
			x.mode = 0;
			return;
		}
		if ((x.mode === 4) && (y.mode === 4)) {
			typ = (x$1 = x.typ.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(Basic)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(Basic)))));
			if ((op === 15) && isInteger(typ)) {
				op = 26;
			}
			x.val = exact.BinaryOp(x.val, op, y.val);
			if (isTyped(typ)) {
				check.representable(x, typ);
			}
			return;
		}
		x.mode = 7;
	};
	checker.prototype.binary = function(x, lhs, rhs, op) { return this.go$val.binary(x, lhs, rhs, op); };
	checker.Ptr.prototype.index = function(index, max) {
		var i, valid, check, x, _tuple, _tuple$1, _tuple$2, _tuple$3;
		i = new Go$Int64(0, 0);
		valid = false;
		check = this;
		x = new operand.Ptr();
		check.expr(x, index);
		if (x.mode === 0) {
			return [i, valid];
		}
		check.convertUntyped(x, go$pkg.Typ[2]);
		if (x.mode === 0) {
			return [i, valid];
		}
		if (!isInteger(x.typ)) {
			check.invalidArg(x.pos(), "index %s must be integer", new (go$sliceType(go$emptyInterface))([x]));
			return [i, valid];
		}
		if (x.mode === 4) {
			if (exact.Sign(x.val) < 0) {
				check.invalidArg(x.pos(), "index %s must not be negative", new (go$sliceType(go$emptyInterface))([x]));
				return [i, valid];
			}
			_tuple = exact.Int64Val(x.val), i = _tuple[0], valid = _tuple[1];
			if (!valid || (max.high > 0 || (max.high === 0 && max.low >= 0)) && (i.high > max.high || (i.high === max.high && i.low >= max.low))) {
				check.errorf(x.pos(), "index %s is out of bounds", new (go$sliceType(go$emptyInterface))([x]));
				_tuple$1 = [i, false], i = _tuple$1[0], valid = _tuple$1[1];
				return [i, valid];
			}
			_tuple$2 = [i, true], i = _tuple$2[0], valid = _tuple$2[1];
			return [i, valid];
		}
		_tuple$3 = [new Go$Int64(-1, 4294967295), true], i = _tuple$3[0], valid = _tuple$3[1];
		return [i, valid];
	};
	checker.prototype.index = function(index, max) { return this.go$val.index(index, max); };
	checker.Ptr.prototype.indexedElts = function(elts, typ, length) {
		var check, visited, _tuple, index, max, _ref, _i, _slice, _index, e, validIndex, eval$1, kv, _tuple$1, ok, _tuple$2, i, _entry, _key, x;
		check = this;
		visited = new Go$Map();
		_tuple = [new Go$Int64(0, 0), new Go$Int64(0, 0)], index = _tuple[0], max = _tuple[1];
		_ref = elts;
		_i = 0;
		while (_i < _ref.length) {
			e = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			validIndex = false;
			eval$1 = e;
			if (_tuple$1 = (e !== null && e.constructor === (go$ptrType(ast.KeyValueExpr)) ? [e.go$val, true] : [(go$ptrType(ast.KeyValueExpr)).nil, false]), kv = _tuple$1[0], !(kv === (go$ptrType(ast.KeyValueExpr)).nil)) {
				if (_tuple$2 = check.index(kv.Key, length), i = _tuple$2[0], ok = _tuple$2[1], ok) {
					if ((i.high > 0 || (i.high === 0 && i.low >= 0))) {
						index = i;
						validIndex = true;
					} else {
						check.errorf(e.Pos(), "index %s must be integer constant", new (go$sliceType(go$emptyInterface))([kv.Key]));
					}
				}
				eval$1 = kv.Value;
			} else if ((length.high > 0 || (length.high === 0 && length.low >= 0)) && (index.high > length.high || (index.high === length.high && index.low >= length.low))) {
				check.errorf(e.Pos(), "index %d is out of bounds (>= %d)", new (go$sliceType(go$emptyInterface))([index, length]));
			} else {
				validIndex = true;
			}
			if (validIndex) {
				if ((_entry = visited[index.go$key()], _entry !== undefined ? _entry.v : false)) {
					check.errorf(e.Pos(), "duplicate index %d in array or slice literal", new (go$sliceType(go$emptyInterface))([index]));
				}
				_key = index, (visited || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: true };
			}
			index = new Go$Int64(index.high + 0, index.low + 1);
			if ((index.high > max.high || (index.high === max.high && index.low > max.low))) {
				max = index;
			}
			x = new operand.Ptr();
			check.exprWithHint(x, eval$1, typ);
			if (!check.assignment(x, typ) && !((x.mode === 0))) {
				check.errorf(x.pos(), "cannot use %s as %s value in array or slice literal", new (go$sliceType(go$emptyInterface))([x, typ]));
			}
			_i++;
		}
		return max;
	};
	checker.prototype.indexedElts = function(elts, typ, length) { return this.go$val.indexedElts(elts, typ, length); };
	checker.Ptr.prototype.rawExpr = function(x, e, hint) {
		var check, kind, typ, val, _ref;
		var go$deferred = [];
		try {
			check = this;
			kind = check.exprInternal(x, e, hint);
			typ = null;
			val = null;
			_ref = x.mode;
			if (_ref === 0) {
				typ = go$pkg.Typ[0];
			} else if (_ref === 1) {
				typ = (go$ptrType(Tuple)).nil;
			} else if (_ref === 4) {
				typ = x.typ;
				val = x.val;
			} else {
				typ = x.typ;
			}
			assert(!(go$interfaceIsEqual(x.expr, null)) && !(go$interfaceIsEqual(typ, null)));
			if (isUntyped(typ)) {
				check.rememberUntyped(x.expr, false, (typ !== null && typ.constructor === (go$ptrType(Basic)) ? typ.go$val : go$typeAssertionFailed(typ, (go$ptrType(Basic)))), val);
			} else {
				check.recordTypeAndValue(e, typ, val);
			}
			return kind;
		} catch(go$err) {
			go$pushErr(go$err);
			return 0;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	checker.prototype.rawExpr = function(x, e, hint) { return this.go$val.rawExpr(x, e, hint); };
	checker.Ptr.prototype.exprInternal = function(x, e, hint) {
		var check, e$1, _ref, _type, ok, _tuple, x$1, sig, typ, openArray, atyp, _tuple$1, x$2, ellip, _tuple$2, x$3, _tuple$3, typ$1, utyp, _ref$1, _type$1, fields, ok$1, _tuple$4, x$4, _slice, _index, visited, _ref$2, _i, _slice$1, _index$1, e$2, _tuple$5, kv, _tuple$6, x$5, key, i, _slice$2, _index$2, fld, _slice$3, _index$3, _slice$4, _index$4, etyp, _ref$3, _i$1, _slice$5, _index$5, e$3, i$1, kv$1, _tuple$7, _slice$6, _index$6, etyp$1, n, visited$1, _ref$4, _i$2, _slice$7, _index$7, e$4, _tuple$8, kv$2, _entry, _key, kind, valid, length, typ$2, _ref$5, _type$2, typ$3, _tuple$9, x$6, key$1, valid$1, length$1, typ$4, _ref$6, _type$3, typ$5, _tuple$10, x$7, ind, _ref$7, _i$3, _slice$8, _index$8, expr, i$2, x$8, max, ok$2, t, _tuple$11, _ref$8, _i$4, _slice$9, _index$9, x$9, i$3, _ref$9, _i$5, _slice$10, _index$10, y, _tuple$12, x$10, xtyp, T, _ref$10, ok$3, _tuple$13, x$11, typ$6;
		check = this;
		x.mode = 0;
		x.typ = go$pkg.Typ[0];
		_ref = e;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadExpr))) {
			e$1 = _ref.go$val;
			x.mode = 0;
			x.expr = e$1;
			return 2;
		} else if (_type === (go$ptrType(ast.Ident))) {
			e$1 = _ref.go$val;
			check.ident(x, e$1, (go$ptrType(Named)).nil, (go$sliceType((go$ptrType(TypeName)))).nil);
		} else if (_type === (go$ptrType(ast.Ellipsis))) {
			e$1 = _ref.go$val;
			check.errorf(e$1.Pos(), "invalid use of '...'", new (go$sliceType(go$emptyInterface))([]));
			x.mode = 0;
			x.expr = e$1;
			return 2;
		} else if (_type === (go$ptrType(ast.BasicLit))) {
			e$1 = _ref.go$val;
			x.setConst(e$1.Kind, e$1.Value);
			if (x.mode === 0) {
				check.invalidAST(e$1.Pos(), "invalid literal %v", new (go$sliceType(go$emptyInterface))([new Go$String(e$1.Value)]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
		} else if (_type === (go$ptrType(ast.FuncLit))) {
			e$1 = _ref.go$val;
			if (_tuple = (x$1 = check.typ(e$1.Type), (x$1 !== null && x$1.constructor === (go$ptrType(Signature)) ? [x$1.go$val, true] : [(go$ptrType(Signature)).nil, false])), sig = _tuple[0], ok = _tuple[1], ok) {
				check.funcBody(check.context.decl, "", sig, e$1.Body);
				x.mode = 7;
				x.typ = sig;
			} else {
				check.invalidAST(e$1.Pos(), "invalid function literal %s", new (go$sliceType(go$emptyInterface))([e$1]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
		} else if (_type === (go$ptrType(ast.CompositeLit))) {
			e$1 = _ref.go$val;
			typ = hint;
			openArray = false;
			if (!(go$interfaceIsEqual(e$1.Type, null))) {
				typ = null;
				if (_tuple$1 = (x$2 = e$1.Type, (x$2 !== null && x$2.constructor === (go$ptrType(ast.ArrayType)) ? [x$2.go$val, true] : [(go$ptrType(ast.ArrayType)).nil, false])), atyp = _tuple$1[0], !(atyp === (go$ptrType(ast.ArrayType)).nil) && !(go$interfaceIsEqual(atyp.Len, null))) {
					if (_tuple$2 = (x$3 = atyp.Len, (x$3 !== null && x$3.constructor === (go$ptrType(ast.Ellipsis)) ? [x$3.go$val, true] : [(go$ptrType(ast.Ellipsis)).nil, false])), ellip = _tuple$2[0], !(ellip === (go$ptrType(ast.Ellipsis)).nil) && go$interfaceIsEqual(ellip.Elt, null)) {
						typ = new Array.Ptr(new Go$Int64(-1, 4294967295), check.typ(atyp.Elt));
						openArray = true;
					}
				}
				if (go$interfaceIsEqual(typ, null)) {
					typ = check.typ(e$1.Type);
				}
			}
			if (go$interfaceIsEqual(typ, null)) {
				check.errorf(e$1.Pos(), "missing type in composite literal", new (go$sliceType(go$emptyInterface))([]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			_tuple$3 = deref(typ), typ$1 = _tuple$3[0];
			_ref$1 = typ$1.Underlying();
			_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
			switch (0) { default: if (_type$1 === (go$ptrType(Struct))) {
				utyp = _ref$1.go$val;
				if (e$1.Elts.length === 0) {
					break;
				}
				fields = utyp.fields;
				if (_tuple$4 = (x$4 = (_slice = e$1.Elts, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x$4 !== null && x$4.constructor === (go$ptrType(ast.KeyValueExpr)) ? [x$4.go$val, true] : [(go$ptrType(ast.KeyValueExpr)).nil, false])), ok$1 = _tuple$4[1], ok$1) {
					visited = (go$sliceType(Go$Bool)).make(fields.length, 0, function() { return false; });
					_ref$2 = e$1.Elts;
					_i = 0;
					while (_i < _ref$2.length) {
						e$2 = (_slice$1 = _ref$2, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
						_tuple$5 = (e$2 !== null && e$2.constructor === (go$ptrType(ast.KeyValueExpr)) ? [e$2.go$val, true] : [(go$ptrType(ast.KeyValueExpr)).nil, false]), kv = _tuple$5[0];
						if (kv === (go$ptrType(ast.KeyValueExpr)).nil) {
							check.errorf(e$2.Pos(), "mixture of field:value and value elements in struct literal", new (go$sliceType(go$emptyInterface))([]));
							_i++;
							continue;
						}
						_tuple$6 = (x$5 = kv.Key, (x$5 !== null && x$5.constructor === (go$ptrType(ast.Ident)) ? [x$5.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), key = _tuple$6[0];
						if (key === (go$ptrType(ast.Ident)).nil) {
							check.errorf(kv.Pos(), "invalid field name %s in struct literal", new (go$sliceType(go$emptyInterface))([kv.Key]));
							_i++;
							continue;
						}
						i = fieldIndex(utyp.fields, check.pkg, key.Name);
						if (i < 0) {
							check.errorf(kv.Pos(), "unknown field %s in struct literal", new (go$sliceType(go$emptyInterface))([new Go$String(key.Name)]));
							_i++;
							continue;
						}
						fld = (_slice$2 = fields, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
						check.recordUse(key, fld);
						if ((_slice$3 = visited, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))) {
							check.errorf(kv.Pos(), "duplicate field name %s in struct literal", new (go$sliceType(go$emptyInterface))([new Go$String(key.Name)]));
							_i++;
							continue;
						}
						_slice$4 = visited, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = true) : go$throwRuntimeError("index out of range");
						check.expr(x, kv.Value);
						etyp = fld.object.typ;
						if (!check.assignment(x, etyp)) {
							if (!((x.mode === 0))) {
								check.errorf(x.pos(), "cannot use %s as %s value in struct literal", new (go$sliceType(go$emptyInterface))([x, etyp]));
							}
							_i++;
							continue;
						}
						_i++;
					}
				} else {
					_ref$3 = e$1.Elts;
					_i$1 = 0;
					while (_i$1 < _ref$3.length) {
						e$3 = (_slice$5 = _ref$3, _index$5 = _i$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
						i$1 = _i$1;
						if (_tuple$7 = (e$3 !== null && e$3.constructor === (go$ptrType(ast.KeyValueExpr)) ? [e$3.go$val, true] : [(go$ptrType(ast.KeyValueExpr)).nil, false]), kv$1 = _tuple$7[0], !(kv$1 === (go$ptrType(ast.KeyValueExpr)).nil)) {
							check.errorf(kv$1.Pos(), "mixture of field:value and value elements in struct literal", new (go$sliceType(go$emptyInterface))([]));
							_i$1++;
							continue;
						}
						check.expr(x, e$3);
						if (i$1 >= fields.length) {
							check.errorf(x.pos(), "too many values in struct literal", new (go$sliceType(go$emptyInterface))([]));
							break;
						}
						etyp$1 = (_slice$6 = fields, _index$6 = i$1, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")).object.typ;
						if (!check.assignment(x, etyp$1)) {
							if (!((x.mode === 0))) {
								check.errorf(x.pos(), "cannot use %s as %s value in struct literal", new (go$sliceType(go$emptyInterface))([x, etyp$1]));
							}
							_i$1++;
							continue;
						}
						_i$1++;
					}
					if (e$1.Elts.length < fields.length) {
						check.errorf(e$1.Rbrace, "too few values in struct literal", new (go$sliceType(go$emptyInterface))([]));
					}
				}
			} else if (_type$1 === (go$ptrType(Array))) {
				utyp = _ref$1.go$val;
				n = check.indexedElts(e$1.Elts, utyp.elem, utyp.len);
				if (openArray) {
					utyp.len = n;
				}
			} else if (_type$1 === (go$ptrType(Slice))) {
				utyp = _ref$1.go$val;
				check.indexedElts(e$1.Elts, utyp.elem, new Go$Int64(-1, 4294967295));
			} else if (_type$1 === (go$ptrType(Map))) {
				utyp = _ref$1.go$val;
				visited$1 = new Go$Map();
				_ref$4 = e$1.Elts;
				_i$2 = 0;
				while (_i$2 < _ref$4.length) {
					e$4 = (_slice$7 = _ref$4, _index$7 = _i$2, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"));
					_tuple$8 = (e$4 !== null && e$4.constructor === (go$ptrType(ast.KeyValueExpr)) ? [e$4.go$val, true] : [(go$ptrType(ast.KeyValueExpr)).nil, false]), kv$2 = _tuple$8[0];
					if (kv$2 === (go$ptrType(ast.KeyValueExpr)).nil) {
						check.errorf(e$4.Pos(), "missing key in map literal", new (go$sliceType(go$emptyInterface))([]));
						_i$2++;
						continue;
					}
					check.expr(x, kv$2.Key);
					if (!check.assignment(x, utyp.key)) {
						if (!((x.mode === 0))) {
							check.errorf(x.pos(), "cannot use %s as %s key in map literal", new (go$sliceType(go$emptyInterface))([x, utyp.key]));
						}
						_i$2++;
						continue;
					}
					if (x.mode === 4) {
						if ((_entry = visited$1[(x.val || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : false)) {
							check.errorf(x.pos(), "duplicate key %s in map literal", new (go$sliceType(go$emptyInterface))([x.val]));
							_i$2++;
							continue;
						}
						_key = x.val, (visited$1 || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: true };
					}
					check.exprWithHint(x, kv$2.Value, utyp.elem);
					if (!check.assignment(x, utyp.elem)) {
						if (!((x.mode === 0))) {
							check.errorf(x.pos(), "cannot use %s as %s value in map literal", new (go$sliceType(go$emptyInterface))([x, utyp.elem]));
						}
						_i$2++;
						continue;
					}
					_i$2++;
				}
			} else {
				utyp = _ref$1;
				check.errorf(e$1.Pos(), "invalid composite literal type %s", new (go$sliceType(go$emptyInterface))([typ$1]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			} }
			x.mode = 7;
			x.typ = typ;
		} else if (_type === (go$ptrType(ast.ParenExpr))) {
			e$1 = _ref.go$val;
			kind = check.rawExpr(x, e$1.X, null);
			x.expr = e$1;
			return kind;
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			e$1 = _ref.go$val;
			check.selector(x, e$1);
		} else if (_type === (go$ptrType(ast.IndexExpr))) {
			e$1 = _ref.go$val;
			check.expr(x, e$1.X);
			if (x.mode === 0) {
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			valid = false;
			length = new Go$Int64(-1, 4294967295);
			_ref$5 = x.typ.Underlying();
			_type$2 = _ref$5 !== null ? _ref$5.constructor : null;
			if (_type$2 === (go$ptrType(Basic))) {
				typ$2 = _ref$5.go$val;
				if (isString(typ$2)) {
					valid = true;
					if (x.mode === 4) {
						length = new Go$Int64(0, exact.StringVal(x.val).length);
					}
					x.mode = 7;
					x.typ = go$pkg.UniverseByte;
				}
			} else if (_type$2 === (go$ptrType(Array))) {
				typ$2 = _ref$5.go$val;
				valid = true;
				length = typ$2.len;
				if (!((x.mode === 5))) {
					x.mode = 7;
				}
				x.typ = typ$2.elem;
			} else if (_type$2 === (go$ptrType(Pointer))) {
				typ$2 = _ref$5.go$val;
				if (_tuple$9 = (x$6 = typ$2.base.Underlying(), (x$6 !== null && x$6.constructor === (go$ptrType(Array)) ? [x$6.go$val, true] : [(go$ptrType(Array)).nil, false])), typ$3 = _tuple$9[0], !(typ$3 === (go$ptrType(Array)).nil)) {
					valid = true;
					length = typ$3.len;
					x.mode = 5;
					x.typ = typ$3.elem;
				}
			} else if (_type$2 === (go$ptrType(Slice))) {
				typ$2 = _ref$5.go$val;
				valid = true;
				x.mode = 5;
				x.typ = typ$2.elem;
			} else if (_type$2 === (go$ptrType(Map))) {
				typ$2 = _ref$5.go$val;
				key$1 = new operand.Ptr();
				check.expr(key$1, e$1.Index);
				if (!check.assignment(key$1, typ$2.key)) {
					if (!((key$1.mode === 0))) {
						check.invalidOp(key$1.pos(), "cannot use %s as map index of type %s", new (go$sliceType(go$emptyInterface))([key$1, typ$2.key]));
					}
					x.mode = 0;
					x.expr = e$1;
					return 2;
				}
				x.mode = 6;
				x.typ = typ$2.elem;
				x.expr = e$1;
				return 1;
			}
			if (!valid) {
				check.invalidOp(x.pos(), "cannot index %s", new (go$sliceType(go$emptyInterface))([x]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			if (go$interfaceIsEqual(e$1.Index, null)) {
				check.invalidAST(e$1.Pos(), "missing index for %s", new (go$sliceType(go$emptyInterface))([x]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			check.index(e$1.Index, length);
		} else if (_type === (go$ptrType(ast.SliceExpr))) {
			e$1 = _ref.go$val;
			check.expr(x, e$1.X);
			if (x.mode === 0) {
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			valid$1 = false;
			length$1 = new Go$Int64(-1, 4294967295);
			_ref$6 = x.typ.Underlying();
			_type$3 = _ref$6 !== null ? _ref$6.constructor : null;
			if (_type$3 === (go$ptrType(Basic))) {
				typ$4 = _ref$6.go$val;
				if (isString(typ$4)) {
					if (slice3(e$1)) {
						check.invalidOp(x.pos(), "3-index slice of string", new (go$sliceType(go$emptyInterface))([]));
						x.mode = 0;
						x.expr = e$1;
						return 2;
					}
					valid$1 = true;
					if (x.mode === 4) {
						length$1 = new Go$Int64(0, exact.StringVal(x.val).length);
					}
					x.mode = 7;
					if (typ$4.kind === 24) {
						x.typ = go$pkg.Typ[17];
					}
				}
			} else if (_type$3 === (go$ptrType(Array))) {
				typ$4 = _ref$6.go$val;
				valid$1 = true;
				length$1 = typ$4.len;
				if (!((x.mode === 5))) {
					check.invalidOp(x.pos(), "cannot slice %s (value not addressable)", new (go$sliceType(go$emptyInterface))([x]));
					x.mode = 0;
					x.expr = e$1;
					return 2;
				}
				x.typ = new Slice.Ptr(typ$4.elem);
			} else if (_type$3 === (go$ptrType(Pointer))) {
				typ$4 = _ref$6.go$val;
				if (_tuple$10 = (x$7 = typ$4.base.Underlying(), (x$7 !== null && x$7.constructor === (go$ptrType(Array)) ? [x$7.go$val, true] : [(go$ptrType(Array)).nil, false])), typ$5 = _tuple$10[0], !(typ$5 === (go$ptrType(Array)).nil)) {
					valid$1 = true;
					length$1 = typ$5.len;
					x.mode = 5;
					x.typ = new Slice.Ptr(typ$5.elem);
				}
			} else if (_type$3 === (go$ptrType(Slice))) {
				typ$4 = _ref$6.go$val;
				valid$1 = true;
				x.mode = 5;
			}
			if (!valid$1) {
				check.invalidOp(x.pos(), "cannot slice %s", new (go$sliceType(go$emptyInterface))([x]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			if (slice3(e$1) && (go$interfaceIsEqual(e$1.High, null) || go$interfaceIsEqual(sliceMax(e$1), null))) {
				check.errorf(e$1.Rbrack, "2nd and 3rd index required in 3-index slice", new (go$sliceType(go$emptyInterface))([]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			ind = go$makeNativeArray("Int64", 3, function() { return new Go$Int64(0, 0); });
			_ref$7 = new (go$sliceType(ast.Expr))([e$1.Low, e$1.High, sliceMax(e$1)]);
			_i$3 = 0;
			while (_i$3 < _ref$7.length) {
				expr = (_slice$8 = _ref$7, _index$8 = _i$3, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
				i$2 = _i$3;
				x$8 = new Go$Int64(-1, 4294967295);
				if (!(go$interfaceIsEqual(expr, null))) {
					max = new Go$Int64(-1, 4294967295);
					if ((length$1.high > 0 || (length$1.high === 0 && length$1.low >= 0))) {
						max = new Go$Int64(length$1.high + 0, length$1.low + 1);
					}
					if (_tuple$11 = check.index(expr, max), t = _tuple$11[0], ok$2 = _tuple$11[1], ok$2 && (t.high > 0 || (t.high === 0 && t.low >= 0))) {
						x$8 = t;
					}
				} else if (i$2 === 0) {
					x$8 = new Go$Int64(0, 0);
				} else if ((length$1.high > 0 || (length$1.high === 0 && length$1.low >= 0))) {
					x$8 = length$1;
				}
				ind[i$2] = x$8;
				_i$3++;
			}
			_ref$8 = go$subslice(new (go$sliceType(Go$Int64))(ind), 0, 2);
			_i$4 = 0;
			L:
			while (_i$4 < _ref$8.length) {
				x$9 = (_slice$9 = _ref$8, _index$9 = _i$4, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"));
				i$3 = _i$4;
				if ((x$9.high > 0 || (x$9.high === 0 && x$9.low > 0))) {
					_ref$9 = go$subslice(new (go$sliceType(Go$Int64))(ind), (i$3 + 1 >> 0));
					_i$5 = 0;
					while (_i$5 < _ref$9.length) {
						y = (_slice$10 = _ref$9, _index$10 = _i$5, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"));
						if ((y.high > 0 || (y.high === 0 && y.low >= 0)) && (x$9.high > y.high || (x$9.high === y.high && x$9.low > y.low))) {
							check.errorf(e$1.Rbrack, "invalid slice indices: %d > %d", new (go$sliceType(go$emptyInterface))([x$9, y]));
							break L;
						}
						_i$5++;
					}
				}
				_i$4++;
			}
		} else if (_type === (go$ptrType(ast.TypeAssertExpr))) {
			e$1 = _ref.go$val;
			check.expr(x, e$1.X);
			if (x.mode === 0) {
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			_tuple$12 = (x$10 = x.typ.Underlying(), (x$10 !== null && x$10.constructor === (go$ptrType(Interface)) ? [x$10.go$val, true] : [(go$ptrType(Interface)).nil, false])), xtyp = _tuple$12[0];
			if (xtyp === (go$ptrType(Interface)).nil) {
				check.invalidOp(x.pos(), "%s is not an interface", new (go$sliceType(go$emptyInterface))([x]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			if (go$interfaceIsEqual(e$1.Type, null)) {
				check.invalidAST(e$1.Pos(), "use of .(type) outside type switch", new (go$sliceType(go$emptyInterface))([]));
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			T = check.typ(e$1.Type);
			if (go$interfaceIsEqual(T, go$pkg.Typ[0])) {
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			check.typeAssertion(x.pos(), x, xtyp, T);
			x.mode = 8;
			x.typ = T;
		} else if (_type === (go$ptrType(ast.CallExpr))) {
			e$1 = _ref.go$val;
			return check.call(x, e$1);
		} else if (_type === (go$ptrType(ast.StarExpr))) {
			e$1 = _ref.go$val;
			check.exprOrType(x, e$1.X);
			_ref$10 = x.mode;
			if (_ref$10 === 0) {
				x.mode = 0;
				x.expr = e$1;
				return 2;
			} else if (_ref$10 === 3) {
				x.typ = new Pointer.Ptr(x.typ);
			} else {
				if (_tuple$13 = (x$11 = x.typ.Underlying(), (x$11 !== null && x$11.constructor === (go$ptrType(Pointer)) ? [x$11.go$val, true] : [(go$ptrType(Pointer)).nil, false])), typ$6 = _tuple$13[0], ok$3 = _tuple$13[1], ok$3) {
					x.mode = 5;
					x.typ = typ$6.base;
				} else {
					check.invalidOp(x.pos(), "cannot indirect %s", new (go$sliceType(go$emptyInterface))([x]));
					x.mode = 0;
					x.expr = e$1;
					return 2;
				}
			}
		} else if (_type === (go$ptrType(ast.UnaryExpr))) {
			e$1 = _ref.go$val;
			check.expr(x, e$1.X);
			if (x.mode === 0) {
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			check.unary(x, e$1.Op);
			if (x.mode === 0) {
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
			if (e$1.Op === 36) {
				x.expr = e$1;
				return 2;
			}
		} else if (_type === (go$ptrType(ast.BinaryExpr))) {
			e$1 = _ref.go$val;
			check.binary(x, e$1.X, e$1.Y, e$1.Op);
			if (x.mode === 0) {
				x.mode = 0;
				x.expr = e$1;
				return 2;
			}
		} else if (_type === (go$ptrType(ast.KeyValueExpr))) {
			e$1 = _ref.go$val;
			check.invalidAST(e$1.Pos(), "no key:value expected", new (go$sliceType(go$emptyInterface))([]));
			x.mode = 0;
			x.expr = e$1;
			return 2;
		} else if (_type === (go$ptrType(ast.ArrayType)) || _type === (go$ptrType(ast.StructType)) || _type === (go$ptrType(ast.FuncType)) || _type === (go$ptrType(ast.InterfaceType)) || _type === (go$ptrType(ast.MapType)) || _type === (go$ptrType(ast.ChanType))) {
			e$1 = _ref;
			x.mode = 3;
			x.typ = check.typ(e$1);
		} else {
			e$1 = _ref;
			unreachable();
		}
		x.expr = e;
		return 1;
	};
	checker.prototype.exprInternal = function(x, e, hint) { return this.go$val.exprInternal(x, e, hint); };
	checker.Ptr.prototype.typeAssertion = function(pos, x, xtyp, T) {
		var check, _tuple, method, wrongType, msg;
		check = this;
		_tuple = MissingMethod(T, xtyp, false), method = _tuple[0], wrongType = _tuple[1];
		if (method === (go$ptrType(Func)).nil) {
			return;
		}
		msg = "";
		if (wrongType) {
			msg = "wrong type for method";
		} else {
			msg = "missing method";
		}
		check.errorf(pos, "%s cannot have dynamic type %s (%s %s)", new (go$sliceType(go$emptyInterface))([x, T, new Go$String(msg), new Go$String(method.object.name)]));
	};
	checker.prototype.typeAssertion = function(pos, x, xtyp, T) { return this.go$val.typeAssertion(pos, x, xtyp, T); };
	checker.Ptr.prototype.expr = function(x, e) {
		var check, msg, _ref;
		check = this;
		check.rawExpr(x, e, null);
		msg = "";
		_ref = x.mode;
		if (_ref === 1) {
			msg = "used as value";
		} else if (_ref === 2) {
			msg = "must be called";
		} else if (_ref === 3) {
			msg = "is not an expression";
		} else {
			return;
		}
		check.errorf(x.pos(), "%s %s", new (go$sliceType(go$emptyInterface))([x, new Go$String(msg)]));
		x.mode = 0;
	};
	checker.prototype.expr = function(x, e) { return this.go$val.expr(x, e); };
	checker.Ptr.prototype.exprWithHint = function(x, e, hint) {
		var check, msg, _ref;
		check = this;
		assert(!(go$interfaceIsEqual(hint, null)));
		check.rawExpr(x, e, hint);
		msg = "";
		_ref = x.mode;
		if (_ref === 1) {
			msg = "used as value";
		} else if (_ref === 2) {
			msg = "must be called";
		} else if (_ref === 3) {
			msg = "is not an expression";
		} else {
			return;
		}
		check.errorf(x.pos(), "%s %s", new (go$sliceType(go$emptyInterface))([x, new Go$String(msg)]));
		x.mode = 0;
	};
	checker.prototype.exprWithHint = function(x, e, hint) { return this.go$val.exprWithHint(x, e, hint); };
	checker.Ptr.prototype.exprOrType = function(x, e) {
		var check;
		check = this;
		check.rawExpr(x, e, null);
		if (x.mode === 1) {
			check.errorf(x.pos(), "%s used as value or type", new (go$sliceType(go$emptyInterface))([x]));
			x.mode = 0;
		}
	};
	checker.prototype.exprOrType = function(x, e) { return this.go$val.exprOrType(x, e); };
	ExprString = go$pkg.ExprString = function(x) {
		var buf;
		buf = new bytes.Buffer.Ptr();
		WriteExpr(buf, x);
		return buf.String();
	};
	WriteExpr = go$pkg.WriteExpr = function(buf, x) {
		var x$1, _ref, _type, _ref$1, _i, _slice, _index, arg, i, s, _ref$2;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.Ident))) {
			x$1 = _ref.go$val;
			buf.WriteString(x$1.Name);
		} else if (_type === (go$ptrType(ast.Ellipsis))) {
			x$1 = _ref.go$val;
			buf.WriteString("...");
			if (!(go$interfaceIsEqual(x$1.Elt, null))) {
				WriteExpr(buf, x$1.Elt);
			}
		} else if (_type === (go$ptrType(ast.BasicLit))) {
			x$1 = _ref.go$val;
			buf.WriteString(x$1.Value);
		} else if (_type === (go$ptrType(ast.FuncLit))) {
			x$1 = _ref.go$val;
			buf.WriteByte(40);
			WriteExpr(buf, x$1.Type);
			buf.WriteString(" literal)");
		} else if (_type === (go$ptrType(ast.CompositeLit))) {
			x$1 = _ref.go$val;
			buf.WriteByte(40);
			WriteExpr(buf, x$1.Type);
			buf.WriteString(" literal)");
		} else if (_type === (go$ptrType(ast.ParenExpr))) {
			x$1 = _ref.go$val;
			buf.WriteByte(40);
			WriteExpr(buf, x$1.X);
			buf.WriteByte(41);
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			x$1 = _ref.go$val;
			WriteExpr(buf, x$1.X);
			buf.WriteByte(46);
			buf.WriteString(x$1.Sel.Name);
		} else if (_type === (go$ptrType(ast.IndexExpr))) {
			x$1 = _ref.go$val;
			WriteExpr(buf, x$1.X);
			buf.WriteByte(91);
			WriteExpr(buf, x$1.Index);
			buf.WriteByte(93);
		} else if (_type === (go$ptrType(ast.SliceExpr))) {
			x$1 = _ref.go$val;
			WriteExpr(buf, x$1.X);
			buf.WriteByte(91);
			if (!(go$interfaceIsEqual(x$1.Low, null))) {
				WriteExpr(buf, x$1.Low);
			}
			buf.WriteByte(58);
			if (!(go$interfaceIsEqual(x$1.High, null))) {
				WriteExpr(buf, x$1.High);
			}
			if (x$1.Slice3) {
				buf.WriteByte(58);
				if (!(go$interfaceIsEqual(x$1.Max, null))) {
					WriteExpr(buf, x$1.Max);
				}
			}
			buf.WriteByte(93);
		} else if (_type === (go$ptrType(ast.TypeAssertExpr))) {
			x$1 = _ref.go$val;
			WriteExpr(buf, x$1.X);
			buf.WriteString(".(");
			WriteExpr(buf, x$1.Type);
			buf.WriteByte(41);
		} else if (_type === (go$ptrType(ast.CallExpr))) {
			x$1 = _ref.go$val;
			WriteExpr(buf, x$1.Fun);
			buf.WriteByte(40);
			_ref$1 = x$1.Args;
			_i = 0;
			while (_i < _ref$1.length) {
				arg = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (i > 0) {
					buf.WriteString(", ");
				}
				WriteExpr(buf, arg);
				_i++;
			}
			if ((new token.Pos(x$1.Ellipsis)).IsValid()) {
				buf.WriteString("...");
			}
			buf.WriteByte(41);
		} else if (_type === (go$ptrType(ast.StarExpr))) {
			x$1 = _ref.go$val;
			buf.WriteByte(42);
			WriteExpr(buf, x$1.X);
		} else if (_type === (go$ptrType(ast.UnaryExpr))) {
			x$1 = _ref.go$val;
			buf.WriteString((new token.Token(x$1.Op)).String());
			WriteExpr(buf, x$1.X);
		} else if (_type === (go$ptrType(ast.BinaryExpr))) {
			x$1 = _ref.go$val;
			WriteExpr(buf, x$1.X);
			buf.WriteByte(32);
			buf.WriteString((new token.Token(x$1.Op)).String());
			buf.WriteByte(32);
			WriteExpr(buf, x$1.Y);
		} else if (_type === (go$ptrType(ast.ArrayType))) {
			x$1 = _ref.go$val;
			buf.WriteByte(91);
			if (!(go$interfaceIsEqual(x$1.Len, null))) {
				WriteExpr(buf, x$1.Len);
			}
			buf.WriteByte(93);
			WriteExpr(buf, x$1.Elt);
		} else if (_type === (go$ptrType(ast.StructType))) {
			x$1 = _ref.go$val;
			buf.WriteString("struct{");
			writeFieldList(buf, x$1.Fields, "; ", false);
			buf.WriteByte(125);
		} else if (_type === (go$ptrType(ast.FuncType))) {
			x$1 = _ref.go$val;
			buf.WriteString("func");
			writeSigExpr(buf, x$1);
		} else if (_type === (go$ptrType(ast.InterfaceType))) {
			x$1 = _ref.go$val;
			buf.WriteString("interface{");
			writeFieldList(buf, x$1.Methods, "; ", true);
			buf.WriteByte(125);
		} else if (_type === (go$ptrType(ast.MapType))) {
			x$1 = _ref.go$val;
			buf.WriteString("map[");
			WriteExpr(buf, x$1.Key);
			buf.WriteByte(93);
			WriteExpr(buf, x$1.Value);
		} else if (_type === (go$ptrType(ast.ChanType))) {
			x$1 = _ref.go$val;
			s = "";
			_ref$2 = x$1.Dir;
			if (_ref$2 === 1) {
				s = "chan<- ";
			} else if (_ref$2 === 2) {
				s = "<-chan ";
			} else {
				s = "chan ";
			}
			buf.WriteString(s);
			WriteExpr(buf, x$1.Value);
		} else {
			x$1 = _ref;
			buf.WriteString("(bad expr)");
		}
	};
	writeSigExpr = function(buf, sig) {
		var res, n, _slice, _index, _slice$1, _index$1;
		buf.WriteByte(40);
		writeFieldList(buf, sig.Params, ", ", false);
		buf.WriteByte(41);
		res = sig.Results;
		n = res.NumFields();
		if (n === 0) {
			return;
		}
		buf.WriteByte(32);
		if ((n === 1) && ((_slice = res.List, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Names.length === 0)) {
			WriteExpr(buf, (_slice$1 = res.List, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Type);
			return;
		}
		buf.WriteByte(40);
		writeFieldList(buf, res, ", ", false);
		buf.WriteByte(41);
	};
	writeFieldList = function(buf, fields, sep, iface) {
		var _ref, _i, _slice, _index, f, i, _ref$1, _i$1, _slice$1, _index$1, name, i$1, sig, _tuple, x;
		_ref = fields.List;
		_i = 0;
		while (_i < _ref.length) {
			f = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				buf.WriteString(sep);
			}
			_ref$1 = f.Names;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				name = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				i$1 = _i$1;
				if (i$1 > 0) {
					buf.WriteString(", ");
				}
				buf.WriteString(name.Name);
				_i$1++;
			}
			if (_tuple = (x = f.Type, (x !== null && x.constructor === (go$ptrType(ast.FuncType)) ? [x.go$val, true] : [(go$ptrType(ast.FuncType)).nil, false])), sig = _tuple[0], !(sig === (go$ptrType(ast.FuncType)).nil) && iface) {
				writeSigExpr(buf, sig);
				_i++;
				continue;
			}
			if (f.Names.length > 0) {
				buf.WriteByte(32);
			}
			WriteExpr(buf, f.Type);
			_i++;
		}
	};
	slice3 = function(x) {
		return false;
	};
	sliceMax = function(x) {
		return null;
	};
	checker.Ptr.prototype.labels = function(body) {
		var check, all, fwdJumps, _ref, _i, _slice, _index, jmp, msg, name, alt, _ref$1, _i$1, _keys, _entry, obj, lbl;
		check = this;
		all = NewScope((go$ptrType(Scope)).nil);
		fwdJumps = check.blockBranches(all, (go$ptrType(block)).nil, (go$ptrType(ast.LabeledStmt)).nil, body.List);
		_ref = fwdJumps;
		_i = 0;
		while (_i < _ref.length) {
			jmp = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			msg = "";
			name = jmp.Label.Name;
			if (alt = all.Lookup(name), !(go$interfaceIsEqual(alt, null))) {
				msg = "goto %s jumps into block";
				(alt !== null && alt.constructor === (go$ptrType(Label)) ? alt.go$val : go$typeAssertionFailed(alt, (go$ptrType(Label)))).object.used = true;
			} else {
				msg = "label %s not declared";
			}
			check.errorf(jmp.Label.Pos(), msg, new (go$sliceType(go$emptyInterface))([new Go$String(name)]));
			_i++;
		}
		_ref$1 = all.elems;
		_i$1 = 0;
		_keys = go$keys(_ref$1);
		while (_i$1 < _keys.length) {
			_entry = _ref$1[_keys[_i$1]];
			obj = _entry.v;
			if (lbl = (obj !== null && obj.constructor === (go$ptrType(Label)) ? obj.go$val : go$typeAssertionFailed(obj, (go$ptrType(Label)))), !lbl.object.used) {
				check.errorf(lbl.object.pos, "label %s declared but not used", new (go$sliceType(go$emptyInterface))([new Go$String(lbl.object.name)]));
			}
			_i$1++;
		}
	};
	checker.prototype.labels = function(body) { return this.go$val.labels(body); };
	block.Ptr.prototype.insert = function(s) {
		var b, name, labels, _key;
		b = this;
		name = s.Label.Name;
		labels = b.labels;
		if (labels === false) {
			labels = new Go$Map();
			b.labels = labels;
		}
		_key = name, (labels || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: s };
	};
	block.prototype.insert = function(s) { return this.go$val.insert(s); };
	block.Ptr.prototype.gotoTarget = function(name) {
		var b, s, t, _entry;
		b = this;
		s = b;
		while (!(s === (go$ptrType(block)).nil)) {
			if (t = (_entry = s.labels[name], _entry !== undefined ? _entry.v : (go$ptrType(ast.LabeledStmt)).nil), !(t === (go$ptrType(ast.LabeledStmt)).nil)) {
				return t;
			}
			s = s.parent;
		}
		return (go$ptrType(ast.LabeledStmt)).nil;
	};
	block.prototype.gotoTarget = function(name) { return this.go$val.gotoTarget(name); };
	block.Ptr.prototype.enclosingTarget = function(name) {
		var b, s, t;
		b = this;
		s = b;
		while (!(s === (go$ptrType(block)).nil)) {
			if (t = s.lstmt, !(t === (go$ptrType(ast.LabeledStmt)).nil) && t.Label.Name === name) {
				return t;
			}
			s = s.parent;
		}
		return (go$ptrType(ast.LabeledStmt)).nil;
	};
	block.prototype.enclosingTarget = function(name) { return this.go$val.enclosingTarget(name); };
	checker.Ptr.prototype.blockBranches = function(all, parent, lstmt, list) {
		var check, b, varDeclPos, _tuple, fwdJumps, badJumps, recordVarDecl, jumpsOverVarDecl, blockBranches, stmtBranches, _ref, _i, _slice, _index, s;
		check = this;
		b = new block.Ptr(parent, lstmt, false);
		varDeclPos = 0, _tuple = [(go$sliceType((go$ptrType(ast.BranchStmt)))).nil, (go$sliceType((go$ptrType(ast.BranchStmt)))).nil], fwdJumps = _tuple[0], badJumps = _tuple[1];
		recordVarDecl = (function(pos) {
			varDeclPos = pos;
			badJumps = go$appendSlice(go$subslice(badJumps, 0, 0), fwdJumps);
		});
		jumpsOverVarDecl = (function(jmp) {
			var _ref, _i, _slice, _index, bad;
			if ((new token.Pos(varDeclPos)).IsValid()) {
				_ref = badJumps;
				_i = 0;
				while (_i < _ref.length) {
					bad = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					if (jmp === bad) {
						return true;
					}
					_i++;
				}
			}
			return false;
		});
		blockBranches = (function(lstmt$1, list$1) {
			fwdJumps = go$appendSlice(fwdJumps, check.blockBranches(all, b, lstmt$1, list$1));
		});
		stmtBranches = go$throwNilPointerError;
		stmtBranches = (function(s) {
			var s$1, _ref, _type, d, _tuple$1, x, name, lbl, alt, i, _ref$1, _i, _slice, _index, jmp, _slice$1, _index$1, name$1, _ref$2, valid, t, _ref$3, _type$1, valid$1, t$1, _ref$4, _type$2, obj;
			_ref = s;
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === (go$ptrType(ast.DeclStmt))) {
				s$1 = _ref.go$val;
				if (_tuple$1 = (x = s$1.Decl, (x !== null && x.constructor === (go$ptrType(ast.GenDecl)) ? [x.go$val, true] : [(go$ptrType(ast.GenDecl)).nil, false])), d = _tuple$1[0], !(d === (go$ptrType(ast.GenDecl)).nil) && (d.Tok === 85)) {
					recordVarDecl(d.Pos());
				}
			} else if (_type === (go$ptrType(ast.LabeledStmt))) {
				s$1 = _ref.go$val;
				name = s$1.Label.Name;
				lbl = NewLabel(s$1.Label.Pos(), name);
				if (alt = all.Insert(lbl), !(go$interfaceIsEqual(alt, null))) {
					check.errorf(lbl.object.pos, "label %s already declared", new (go$sliceType(go$emptyInterface))([new Go$String(name)]));
					check.reportAltDecl(alt);
				} else {
					b.insert(s$1);
					check.recordDef(s$1.Label, lbl);
				}
				i = 0;
				_ref$1 = fwdJumps;
				_i = 0;
				while (_i < _ref$1.length) {
					jmp = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					if (jmp.Label.Name === name) {
						lbl.object.used = true;
						check.recordUse(jmp.Label, lbl);
						if (jumpsOverVarDecl(jmp)) {
							check.errorf(jmp.Label.Pos(), "goto %s jumps over variable declaration at line %d", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$Int(check.fset.Position(varDeclPos).Line)]));
						}
					} else {
						_slice$1 = fwdJumps, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = jmp) : go$throwRuntimeError("index out of range");
						i = i + 1 >> 0;
					}
					_i++;
				}
				fwdJumps = go$subslice(fwdJumps, 0, i);
				lstmt = s$1;
				stmtBranches(s$1.Stmt);
			} else if (_type === (go$ptrType(ast.BranchStmt))) {
				s$1 = _ref.go$val;
				if (s$1.Label === (go$ptrType(ast.Ident)).nil) {
					return;
				}
				name$1 = s$1.Label.Name;
				_ref$2 = s$1.Tok;
				if (_ref$2 === 61) {
					valid = false;
					if (t = b.enclosingTarget(name$1), !(t === (go$ptrType(ast.LabeledStmt)).nil)) {
						_ref$3 = t.Stmt;
						_type$1 = _ref$3 !== null ? _ref$3.constructor : null;
						if (_type$1 === (go$ptrType(ast.SwitchStmt)) || _type$1 === (go$ptrType(ast.TypeSwitchStmt)) || _type$1 === (go$ptrType(ast.SelectStmt)) || _type$1 === (go$ptrType(ast.ForStmt)) || _type$1 === (go$ptrType(ast.RangeStmt))) {
							valid = true;
						}
					}
					if (!valid) {
						check.errorf(s$1.Label.Pos(), "invalid break label %s", new (go$sliceType(go$emptyInterface))([new Go$String(name$1)]));
						return;
					}
				} else if (_ref$2 === 65) {
					valid$1 = false;
					if (t$1 = b.enclosingTarget(name$1), !(t$1 === (go$ptrType(ast.LabeledStmt)).nil)) {
						_ref$4 = t$1.Stmt;
						_type$2 = _ref$4 !== null ? _ref$4.constructor : null;
						if (_type$2 === (go$ptrType(ast.ForStmt)) || _type$2 === (go$ptrType(ast.RangeStmt))) {
							valid$1 = true;
						}
					}
					if (!valid$1) {
						check.errorf(s$1.Label.Pos(), "invalid continue label %s", new (go$sliceType(go$emptyInterface))([new Go$String(name$1)]));
						return;
					}
				} else if (_ref$2 === 73) {
					if (b.gotoTarget(name$1) === (go$ptrType(ast.LabeledStmt)).nil) {
						fwdJumps = go$append(fwdJumps, s$1);
						return;
					}
				} else {
					check.invalidAST(s$1.Pos(), "branch statement: %s %s", new (go$sliceType(go$emptyInterface))([new token.Token(s$1.Tok), new Go$String(name$1)]));
					return;
				}
				obj = all.Lookup(name$1);
				(obj !== null && obj.constructor === (go$ptrType(Label)) ? obj.go$val : go$typeAssertionFailed(obj, (go$ptrType(Label)))).object.used = true;
				check.recordUse(s$1.Label, obj);
			} else if (_type === (go$ptrType(ast.AssignStmt))) {
				s$1 = _ref.go$val;
				if (s$1.Tok === 47) {
					recordVarDecl(s$1.Pos());
				}
			} else if (_type === (go$ptrType(ast.BlockStmt))) {
				s$1 = _ref.go$val;
				blockBranches(lstmt, s$1.List);
			} else if (_type === (go$ptrType(ast.IfStmt))) {
				s$1 = _ref.go$val;
				stmtBranches(s$1.Body);
				if (!(go$interfaceIsEqual(s$1.Else, null))) {
					stmtBranches(s$1.Else);
				}
			} else if (_type === (go$ptrType(ast.CaseClause))) {
				s$1 = _ref.go$val;
				blockBranches((go$ptrType(ast.LabeledStmt)).nil, s$1.Body);
			} else if (_type === (go$ptrType(ast.SwitchStmt))) {
				s$1 = _ref.go$val;
				stmtBranches(s$1.Body);
			} else if (_type === (go$ptrType(ast.TypeSwitchStmt))) {
				s$1 = _ref.go$val;
				stmtBranches(s$1.Body);
			} else if (_type === (go$ptrType(ast.CommClause))) {
				s$1 = _ref.go$val;
				blockBranches((go$ptrType(ast.LabeledStmt)).nil, s$1.Body);
			} else if (_type === (go$ptrType(ast.SelectStmt))) {
				s$1 = _ref.go$val;
				stmtBranches(s$1.Body);
			} else if (_type === (go$ptrType(ast.ForStmt))) {
				s$1 = _ref.go$val;
				stmtBranches(s$1.Body);
			} else if (_type === (go$ptrType(ast.RangeStmt))) {
				s$1 = _ref.go$val;
				stmtBranches(s$1.Body);
			}
		});
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			stmtBranches(s);
			_i++;
		}
		return fwdJumps;
	};
	checker.prototype.blockBranches = function(all, parent, lstmt, list) { return this.go$val.blockBranches(all, parent, lstmt, list); };
	LookupFieldOrMethod = go$pkg.LookupFieldOrMethod = function(T, pkg, name) {
		var obj, index, indirect, _tuple, t, _tuple$1, u, ok, _tuple$2, obj2, _tuple$3, index2, indirect2, ok$1, _tuple$4, _tuple$5;
		obj = null;
		index = (go$sliceType(Go$Int)).nil;
		indirect = false;
		_tuple = lookupFieldOrMethod(T, pkg, name), obj = _tuple[0], index = _tuple[1], indirect = _tuple[2];
		if (!(go$interfaceIsEqual(obj, null))) {
			return [obj, index, indirect];
		}
		if (_tuple$1 = (T !== null && T.constructor === (go$ptrType(Named)) ? [T.go$val, true] : [(go$ptrType(Named)).nil, false]), t = _tuple$1[0], !(t === (go$ptrType(Named)).nil)) {
			u = t.underlying;
			if (_tuple$2 = (u !== null && u.constructor === (go$ptrType(Pointer)) ? [u.go$val, true] : [(go$ptrType(Pointer)).nil, false]), ok = _tuple$2[1], ok) {
				if (_tuple$3 = lookupFieldOrMethod(u, pkg, name), obj2 = _tuple$3[0], index2 = _tuple$3[1], indirect2 = _tuple$3[2], !(go$interfaceIsEqual(obj2, null))) {
					if (_tuple$4 = (obj2 !== null && obj2.constructor === (go$ptrType(Var)) ? [obj2.go$val, true] : [(go$ptrType(Var)).nil, false]), ok$1 = _tuple$4[1], ok$1) {
						_tuple$5 = [obj2, index2, indirect2], obj = _tuple$5[0], index = _tuple$5[1], indirect = _tuple$5[2];
						return [obj, index, indirect];
					}
				}
			}
		}
		return [obj, index, indirect];
	};
	lookupFieldOrMethod = function(T, pkg, name) {
		var obj, index, indirect, _tuple, typ, isPtr, _tuple$1, named, utyp, ok, _tuple$2, current, seen, next, _ref, _i, _slice, _index, _struct, e, _entry, _key, m, _tuple$3, i, t, _ref$1, _type, _ref$2, _i$1, _slice$1, _index$1, f, i$1, _tuple$4, typ$1, isPtr$1, t$1, _tuple$5, m$1, _tuple$6, i$2;
		obj = null;
		index = (go$sliceType(Go$Int)).nil;
		indirect = false;
		if (name === "_") {
			return [obj, index, indirect];
		}
		_tuple = deref(T), typ = _tuple[0], isPtr = _tuple[1];
		_tuple$1 = (typ !== null && typ.constructor === (go$ptrType(Named)) ? [typ.go$val, true] : [(go$ptrType(Named)).nil, false]), named = _tuple$1[0];
		if (isPtr) {
			utyp = typ;
			if (!(named === (go$ptrType(Named)).nil)) {
				utyp = named.underlying;
			}
			if (_tuple$2 = (utyp !== null && utyp.constructor === (go$ptrType(Interface)) ? [utyp.go$val, true] : [(go$ptrType(Interface)).nil, false]), ok = _tuple$2[1], ok) {
				return [obj, index, indirect];
			}
		}
		current = new (go$sliceType(embeddedType))([new embeddedType.Ptr(named, (go$sliceType(Go$Int)).nil, isPtr, false)]);
		seen = false;
		while (current.length > 0) {
			next = (go$sliceType(embeddedType)).nil;
			_ref = current;
			_i = 0;
			while (_i < _ref.length) {
				e = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new embeddedType.Ptr(_struct.typ, _struct.index, _struct.indirect, _struct.multiples));
				if (!(e.typ === (go$ptrType(Named)).nil)) {
					if ((_entry = seen[e.typ.go$key()], _entry !== undefined ? _entry.v : false)) {
						_i++;
						continue;
					}
					if (seen === false) {
						seen = new Go$Map();
					}
					_key = e.typ, (seen || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: true };
					if (_tuple$3 = lookupMethod(e.typ.methods, pkg, name), i = _tuple$3[0], m = _tuple$3[1], !(m === (go$ptrType(Func)).nil)) {
						assert(!(go$interfaceIsEqual(m.object.typ, null)));
						index = concat(e.index, i);
						if (!(go$interfaceIsEqual(obj, null)) || e.multiples) {
							obj = null;
							return [obj, index, indirect];
						}
						obj = m;
						indirect = e.indirect;
						_i++;
						continue;
					}
					typ = e.typ.underlying;
				}
				_ref$1 = typ;
				_type = _ref$1 !== null ? _ref$1.constructor : null;
				if (_type === (go$ptrType(Struct))) {
					t = _ref$1.go$val;
					_ref$2 = t.fields;
					_i$1 = 0;
					while (_i$1 < _ref$2.length) {
						f = (_slice$1 = _ref$2, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
						i$1 = _i$1;
						if (f.object.sameId(pkg, name)) {
							assert(!(go$interfaceIsEqual(f.object.typ, null)));
							index = concat(e.index, i$1);
							if (!(go$interfaceIsEqual(obj, null)) || e.multiples) {
								obj = null;
								return [obj, index, indirect];
							}
							obj = f;
							indirect = e.indirect;
							_i$1++;
							continue;
						}
						if (go$interfaceIsEqual(obj, null) && f.anonymous) {
							_tuple$4 = deref(f.object.typ), typ$1 = _tuple$4[0], isPtr$1 = _tuple$4[1];
							if (_tuple$5 = (typ$1 !== null && typ$1.constructor === (go$ptrType(Named)) ? [typ$1.go$val, true] : [(go$ptrType(Named)).nil, false]), t$1 = _tuple$5[0], !(t$1 === (go$ptrType(Named)).nil)) {
								next = go$append(next, new embeddedType.Ptr(t$1, concat(e.index, i$1), e.indirect || isPtr$1, e.multiples));
							}
						}
						_i$1++;
					}
				} else if (_type === (go$ptrType(Interface))) {
					t = _ref$1.go$val;
					if (_tuple$6 = lookupMethod(t.allMethods, pkg, name), i$2 = _tuple$6[0], m$1 = _tuple$6[1], !(m$1 === (go$ptrType(Func)).nil)) {
						assert(!(go$interfaceIsEqual(m$1.object.typ, null)));
						index = concat(e.index, i$2);
						if (!(go$interfaceIsEqual(obj, null)) || e.multiples) {
							obj = null;
							return [obj, index, indirect];
						}
						obj = m$1;
						indirect = e.indirect;
					}
				}
				_i++;
			}
			if (!(go$interfaceIsEqual(obj, null))) {
				return [obj, index, indirect];
			}
			current = consolidateMultiples(next);
		}
		index = (go$sliceType(Go$Int)).nil;
		indirect = false;
		return [obj, index, indirect];
	};
	consolidateMultiples = function(list) {
		var n, prev, _ref, _i, _slice, _index, _struct, e, found, _tuple, _entry, i, _slice$1, _index$1, _key, _struct$1, _slice$2, _index$2;
		if (list.length <= 1) {
			return list;
		}
		n = 0;
		prev = new Go$Map();
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			e = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new embeddedType.Ptr(_struct.typ, _struct.index, _struct.indirect, _struct.multiples));
			if (_tuple = (_entry = prev[e.typ.go$key()], _entry !== undefined ? [_entry.v, true] : [0, false]), i = _tuple[0], found = _tuple[1], found) {
				(_slice$1 = list, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).multiples = true;
			} else {
				_key = e.typ, (prev || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: n };
				_slice$2 = list, _index$2 = n, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (_struct$1 = e, new embeddedType.Ptr(_struct$1.typ, _struct$1.index, _struct$1.indirect, _struct$1.multiples))) : go$throwRuntimeError("index out of range");
				n = n + 1 >> 0;
			}
			_i++;
		}
		return go$subslice(list, 0, n);
	};
	MissingMethod = go$pkg.MissingMethod = function(V, T, static$1) {
		var method, wrongType, ityp, _tuple, x, _ref, _i, _slice, _index, m, _tuple$1, obj, _tuple$2, _tuple$3, _ref$1, _i$1, _slice$1, _index$1, m$1, _tuple$4, obj$1, indirect, _tuple$5, _tuple$6, f, _tuple$7, _tuple$8, _tuple$9;
		method = (go$ptrType(Func)).nil;
		wrongType = false;
		if (T.Empty()) {
			return [method, wrongType];
		}
		if (_tuple = (x = V.Underlying(), (x !== null && x.constructor === (go$ptrType(Interface)) ? [x.go$val, true] : [(go$ptrType(Interface)).nil, false])), ityp = _tuple[0], !(ityp === (go$ptrType(Interface)).nil)) {
			_ref = T.allMethods;
			_i = 0;
			while (_i < _ref.length) {
				m = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				_tuple$1 = lookupMethod(ityp.allMethods, m.object.pkg, m.object.name), obj = _tuple$1[1];
				if (obj === (go$ptrType(Func)).nil) {
					if (static$1) {
						_tuple$2 = [m, false], method = _tuple$2[0], wrongType = _tuple$2[1];
						return [method, wrongType];
					}
				} else if (!Identical(obj.object.Type(), m.object.typ)) {
					_tuple$3 = [m, true], method = _tuple$3[0], wrongType = _tuple$3[1];
					return [method, wrongType];
				}
				_i++;
			}
			return [method, wrongType];
		}
		_ref$1 = T.allMethods;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			m$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			_tuple$4 = lookupFieldOrMethod(V, m$1.object.pkg, m$1.object.name), obj$1 = _tuple$4[0], indirect = _tuple$4[2];
			if (go$interfaceIsEqual(obj$1, null)) {
				_tuple$5 = [m$1, false], method = _tuple$5[0], wrongType = _tuple$5[1];
				return [method, wrongType];
			}
			_tuple$6 = (obj$1 !== null && obj$1.constructor === (go$ptrType(Func)) ? [obj$1.go$val, true] : [(go$ptrType(Func)).nil, false]), f = _tuple$6[0];
			if (f === (go$ptrType(Func)).nil) {
				_tuple$7 = [m$1, false], method = _tuple$7[0], wrongType = _tuple$7[1];
				return [method, wrongType];
			}
			if (!indirect && ptrRecv(f)) {
				_tuple$8 = [m$1, false], method = _tuple$8[0], wrongType = _tuple$8[1];
				return [method, wrongType];
			}
			if (!Identical(obj$1.Type(), m$1.object.typ)) {
				_tuple$9 = [m$1, true], method = _tuple$9[0], wrongType = _tuple$9[1];
				return [method, wrongType];
			}
			_i$1++;
		}
		return [method, wrongType];
	};
	deref = function(typ) {
		var p, _tuple;
		if (_tuple = (typ !== null && typ.constructor === (go$ptrType(Pointer)) ? [typ.go$val, true] : [(go$ptrType(Pointer)).nil, false]), p = _tuple[0], !(p === (go$ptrType(Pointer)).nil)) {
			return [p.base, true];
		}
		return [typ, false];
	};
	derefStructPtr = function(typ) {
		var p, _tuple, x, ok, _tuple$1, x$1;
		if (_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Pointer)) ? [x.go$val, true] : [(go$ptrType(Pointer)).nil, false])), p = _tuple[0], !(p === (go$ptrType(Pointer)).nil)) {
			if (_tuple$1 = (x$1 = p.base.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(Struct)) ? [x$1.go$val, true] : [(go$ptrType(Struct)).nil, false])), ok = _tuple$1[1], ok) {
				return p.base;
			}
		}
		return typ;
	};
	concat = function(list, i) {
		var t;
		t = (go$sliceType(Go$Int)).nil;
		t = go$appendSlice(t, list);
		return go$append(t, i);
	};
	fieldIndex = function(fields, pkg, name) {
		var _ref, _i, _slice, _index, f, i;
		if (!(name === "_")) {
			_ref = fields;
			_i = 0;
			while (_i < _ref.length) {
				f = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (f.object.sameId(pkg, name)) {
					return i;
				}
				_i++;
			}
		}
		return -1;
	};
	lookupMethod = function(methods, pkg, name) {
		var _ref, _i, _slice, _index, m, i;
		if (!(name === "_")) {
			_ref = methods;
			_i = 0;
			while (_i < _ref.length) {
				m = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (m.object.sameId(pkg, name)) {
					return [i, m];
				}
				_i++;
			}
		}
		return [-1, (go$ptrType(Func)).nil];
	};
	MethodSet.Ptr.prototype.String = function() {
		var s, buf, _ref, _i, _slice, _index, f;
		s = this;
		if (s.Len() === 0) {
			return "MethodSet {}";
		}
		buf = new bytes.Buffer.Ptr();
		fmt.Fprintln(buf, new (go$sliceType(go$emptyInterface))([new Go$String("MethodSet {")]));
		_ref = s.list;
		_i = 0;
		while (_i < _ref.length) {
			f = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			fmt.Fprintf(buf, "\t%s\n", new (go$sliceType(go$emptyInterface))([f]));
			_i++;
		}
		fmt.Fprintln(buf, new (go$sliceType(go$emptyInterface))([new Go$String("}")]));
		return buf.String();
	};
	MethodSet.prototype.String = function() { return this.go$val.String(); };
	MethodSet.Ptr.prototype.Len = function() {
		var s;
		s = this;
		return s.list.length;
	};
	MethodSet.prototype.Len = function() { return this.go$val.Len(); };
	MethodSet.Ptr.prototype.At = function(i) {
		var s, _slice, _index;
		s = this;
		return (_slice = s.list, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
	};
	MethodSet.prototype.At = function(i) { return this.go$val.At(i); };
	MethodSet.Ptr.prototype.Lookup = function(pkg, name) {
		var s, key, i, _slice, _index, m;
		s = this;
		if (s.Len() === 0) {
			return (go$ptrType(Selection)).nil;
		}
		key = Id(pkg, name);
		i = sort.Search(s.list.length, (function(i) {
			var _slice, _index, m;
			m = (_slice = s.list, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			return m.obj.Id() >= key;
		}));
		if (i < s.list.length) {
			m = (_slice = s.list, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (m.obj.Id() === key) {
				return m;
			}
		}
		return (go$ptrType(Selection)).nil;
	};
	MethodSet.prototype.Lookup = function(pkg, name) { return this.go$val.Lookup(pkg, name); };
	NewMethodSet = go$pkg.NewMethodSet = function(T) {
		var base, _tuple, typ, isPtr, _tuple$1, named, utyp, ok, _tuple$2, current, seen, next, fset, mset, _ref, _i, _slice, _index, _struct, e, _entry, _key, t, _ref$1, _type, _ref$2, _i$1, _slice$1, _index$1, f, i, _tuple$3, typ$1, isPtr$1, t$1, _tuple$4, _ref$3, _i$2, _keys, _entry$1, m, k, found, _tuple$5, _entry$2, found$1, _tuple$6, _entry$3, _key$1, _ref$4, _i$3, _keys$1, _entry$4, f$1, k$1, found$2, _tuple$7, _entry$5, _key$2, list, _ref$5, _i$4, _keys$2, _entry$6, m$1;
		base = false;
		_tuple = deref(T), typ = _tuple[0], isPtr = _tuple[1];
		_tuple$1 = (typ !== null && typ.constructor === (go$ptrType(Named)) ? [typ.go$val, true] : [(go$ptrType(Named)).nil, false]), named = _tuple$1[0];
		if (isPtr) {
			utyp = typ;
			if (!(named === (go$ptrType(Named)).nil)) {
				utyp = named.underlying;
			}
			if (_tuple$2 = (utyp !== null && utyp.constructor === (go$ptrType(Interface)) ? [utyp.go$val, true] : [(go$ptrType(Interface)).nil, false]), ok = _tuple$2[1], ok) {
				return emptyMethodSet;
			}
		}
		current = new (go$sliceType(embeddedType))([new embeddedType.Ptr(named, (go$sliceType(Go$Int)).nil, isPtr, false)]);
		seen = false;
		while (current.length > 0) {
			next = (go$sliceType(embeddedType)).nil;
			fset = false;
			mset = false;
			_ref = current;
			_i = 0;
			while (_i < _ref.length) {
				e = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new embeddedType.Ptr(_struct.typ, _struct.index, _struct.indirect, _struct.multiples));
				if (!(e.typ === (go$ptrType(Named)).nil)) {
					if ((_entry = seen[e.typ.go$key()], _entry !== undefined ? _entry.v : false)) {
						_i++;
						continue;
					}
					if (seen === false) {
						seen = new Go$Map();
					}
					_key = e.typ, (seen || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: true };
					mset = (new methodSet(mset)).add(e.typ.methods, e.index, e.indirect, e.multiples);
					typ = e.typ.underlying;
				}
				_ref$1 = typ;
				_type = _ref$1 !== null ? _ref$1.constructor : null;
				if (_type === (go$ptrType(Struct))) {
					t = _ref$1.go$val;
					_ref$2 = t.fields;
					_i$1 = 0;
					while (_i$1 < _ref$2.length) {
						f = (_slice$1 = _ref$2, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
						i = _i$1;
						fset = (new fieldSet(fset)).add(f, e.multiples);
						if (f.anonymous) {
							_tuple$3 = deref(f.object.typ), typ$1 = _tuple$3[0], isPtr$1 = _tuple$3[1];
							if (_tuple$4 = (typ$1 !== null && typ$1.constructor === (go$ptrType(Named)) ? [typ$1.go$val, true] : [(go$ptrType(Named)).nil, false]), t$1 = _tuple$4[0], !(t$1 === (go$ptrType(Named)).nil)) {
								next = go$append(next, new embeddedType.Ptr(t$1, concat(e.index, i), e.indirect || isPtr$1, e.multiples));
							}
						}
						_i$1++;
					}
				} else if (_type === (go$ptrType(Interface))) {
					t = _ref$1.go$val;
					mset = (new methodSet(mset)).add(t.allMethods, e.index, true, e.multiples);
				}
				_i++;
			}
			_ref$3 = mset;
			_i$2 = 0;
			_keys = go$keys(_ref$3);
			while (_i$2 < _keys.length) {
				_entry$1 = _ref$3[_keys[_i$2]];
				m = _entry$1.v;
				k = _entry$1.k;
				if (_tuple$5 = (_entry$2 = base[k], _entry$2 !== undefined ? [_entry$2.v, true] : [(go$ptrType(Selection)).nil, false]), found = _tuple$5[1], !found) {
					if (_tuple$6 = (_entry$3 = fset[k], _entry$3 !== undefined ? [_entry$3.v, true] : [(go$ptrType(Var)).nil, false]), found$1 = _tuple$6[1], found$1) {
						m = (go$ptrType(Selection)).nil;
					}
					if (base === false) {
						base = new Go$Map();
					}
					_key$1 = k, (base || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: m };
				}
				_i$2++;
			}
			_ref$4 = fset;
			_i$3 = 0;
			_keys$1 = go$keys(_ref$4);
			while (_i$3 < _keys$1.length) {
				_entry$4 = _ref$4[_keys$1[_i$3]];
				f$1 = _entry$4.v;
				k$1 = _entry$4.k;
				if (f$1 === (go$ptrType(Var)).nil) {
					if (_tuple$7 = (_entry$5 = base[k$1], _entry$5 !== undefined ? [_entry$5.v, true] : [(go$ptrType(Selection)).nil, false]), found$2 = _tuple$7[1], !found$2) {
						if (base === false) {
							base = new Go$Map();
						}
						_key$2 = k$1, (base || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: (go$ptrType(Selection)).nil };
					}
				}
				_i$3++;
			}
			current = consolidateMultiples(next);
		}
		if (go$keys(base).length === 0) {
			return emptyMethodSet;
		}
		list = (go$sliceType((go$ptrType(Selection)))).nil;
		_ref$5 = base;
		_i$4 = 0;
		_keys$2 = go$keys(_ref$5);
		while (_i$4 < _keys$2.length) {
			_entry$6 = _ref$5[_keys$2[_i$4]];
			m$1 = _entry$6.v;
			if (!(m$1 === (go$ptrType(Selection)).nil)) {
				m$1.recv = T;
				list = go$append(list, m$1);
			}
			_i$4++;
		}
		sort.Sort(go$subslice(new byUniqueName(list.array), list.offset, list.offset + list.length));
		return new MethodSet.Ptr(list);
	};
	fieldSet.prototype.add = function(f, multiples) {
		var s, key, found, _tuple, _entry, _key, _key$1;
		s = this.go$val;
		if (s === false) {
			s = new Go$Map();
		}
		key = f.object.Id();
		if (!multiples) {
			if (_tuple = (_entry = s[key], _entry !== undefined ? [_entry.v, true] : [(go$ptrType(Var)).nil, false]), found = _tuple[1], !found) {
				_key = key, (s || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: f };
				return s;
			}
		}
		_key$1 = key, (s || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: (go$ptrType(Var)).nil };
		return s;
	};
	go$ptrType(fieldSet).prototype.add = function(f, multiples) { return new fieldSet(this.go$get()).add(f, multiples); };
	methodSet.prototype.add = function(list, index, indirect, multiples) {
		var s, _ref, _i, _slice, _index, f, i, key, found, _tuple, _entry, _key, _key$1;
		s = this.go$val;
		if (list.length === 0) {
			return s;
		}
		if (s === false) {
			s = new Go$Map();
		}
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			f = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			key = f.object.Id();
			if (!multiples) {
				if (_tuple = (_entry = s[key], _entry !== undefined ? [_entry.v, true] : [(go$ptrType(Selection)).nil, false]), found = _tuple[1], !found && (indirect || !ptrRecv(f))) {
					_key = key, (s || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: new Selection.Ptr(1, null, f, concat(index, i), indirect) };
					_i++;
					continue;
				}
			}
			_key$1 = key, (s || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: (go$ptrType(Selection)).nil };
			_i++;
		}
		return s;
	};
	go$ptrType(methodSet).prototype.add = function(list, index, indirect, multiples) { return new methodSet(this.go$get()).add(list, index, indirect, multiples); };
	ptrRecv = function(f) {
		var _tuple, x, isPtr;
		_tuple = deref((x = f.object.typ, (x !== null && x.constructor === (go$ptrType(Signature)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Signature))))).recv.object.typ), isPtr = _tuple[1];
		return isPtr;
	};
	byUniqueName.prototype.Len = function() {
		var a;
		a = this;
		return a.length;
	};
	go$ptrType(byUniqueName).prototype.Len = function() { return this.go$get().Len(); };
	byUniqueName.prototype.Less = function(i, j) {
		var a, _slice, _index, _slice$1, _index$1;
		a = this;
		return (_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).obj.Id() < (_slice$1 = a, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).obj.Id();
	};
	go$ptrType(byUniqueName).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	byUniqueName.prototype.Swap = function(i, j) {
		var a, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		a = this;
		_tuple = [(_slice = a, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = a, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _slice$2 = a, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = a, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(byUniqueName).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	Id = go$pkg.Id = function(pkg, name) {
		var path;
		if (ast.IsExported(name)) {
			return name;
		}
		path = "_";
		if (!(pkg === (go$ptrType(Package)).nil)) {
			path = pkg.path;
			if (path === "") {
				path = "_";
			}
		}
		return path + "." + name;
	};
	object.Ptr.prototype.Parent = function() {
		var obj;
		obj = this;
		return obj.parent;
	};
	object.prototype.Parent = function() { return this.go$val.Parent(); };
	object.Ptr.prototype.Pos = function() {
		var obj;
		obj = this;
		return obj.pos;
	};
	object.prototype.Pos = function() { return this.go$val.Pos(); };
	object.Ptr.prototype.Pkg = function() {
		var obj;
		obj = this;
		return obj.pkg;
	};
	object.prototype.Pkg = function() { return this.go$val.Pkg(); };
	object.Ptr.prototype.Name = function() {
		var obj;
		obj = this;
		return obj.name;
	};
	object.prototype.Name = function() { return this.go$val.Name(); };
	object.Ptr.prototype.Type = function() {
		var obj;
		obj = this;
		return obj.typ;
	};
	object.prototype.Type = function() { return this.go$val.Type(); };
	object.Ptr.prototype.Exported = function() {
		var obj;
		obj = this;
		return ast.IsExported(obj.name);
	};
	object.prototype.Exported = function() { return this.go$val.Exported(); };
	object.Ptr.prototype.Id = function() {
		var obj;
		obj = this;
		return Id(obj.pkg, obj.name);
	};
	object.prototype.Id = function() { return this.go$val.Id(); };
	object.Ptr.prototype.String = function() {
		var obj;
		obj = this;
		throw go$panic(new Go$String("abstract"));
	};
	object.prototype.String = function() { return this.go$val.String(); };
	object.Ptr.prototype.isUsed = function() {
		var obj;
		obj = this;
		return obj.used;
	};
	object.prototype.isUsed = function() { return this.go$val.isUsed(); };
	object.Ptr.prototype.setParent = function(parent) {
		var obj;
		obj = this;
		obj.parent = parent;
	};
	object.prototype.setParent = function(parent) { return this.go$val.setParent(parent); };
	object.Ptr.prototype.sameId = function(pkg, name) {
		var obj;
		obj = this;
		if (!(name === obj.name)) {
			return false;
		}
		if (obj.Exported()) {
			return true;
		}
		if (pkg === (go$ptrType(Package)).nil || obj.pkg === (go$ptrType(Package)).nil) {
			return pkg === obj.pkg;
		}
		return pkg.path === obj.pkg.path;
	};
	object.prototype.sameId = function(pkg, name) { return this.go$val.sameId(pkg, name); };
	NewPkgName = go$pkg.NewPkgName = function(pos, pkg, name) {
		return new PkgName.Ptr(new object.Ptr((go$ptrType(Scope)).nil, pos, pkg, name, go$pkg.Typ[0], false));
	};
	NewConst = go$pkg.NewConst = function(pos, pkg, name, typ, val) {
		return new Const.Ptr(new object.Ptr((go$ptrType(Scope)).nil, pos, pkg, name, typ, false), val, false);
	};
	Const.Ptr.prototype.Val = function() {
		var obj;
		obj = this;
		return obj.val;
	};
	Const.prototype.Val = function() { return this.go$val.Val(); };
	NewTypeName = go$pkg.NewTypeName = function(pos, pkg, name, typ) {
		return new TypeName.Ptr(new object.Ptr((go$ptrType(Scope)).nil, pos, pkg, name, typ, false));
	};
	NewVar = go$pkg.NewVar = function(pos, pkg, name, typ) {
		return new Var.Ptr(new object.Ptr((go$ptrType(Scope)).nil, pos, pkg, name, typ, false), false, false, false);
	};
	NewParam = go$pkg.NewParam = function(pos, pkg, name, typ) {
		return new Var.Ptr(new object.Ptr((go$ptrType(Scope)).nil, pos, pkg, name, typ, true), false, false, false);
	};
	NewField = go$pkg.NewField = function(pos, pkg, name, typ, anonymous) {
		return new Var.Ptr(new object.Ptr((go$ptrType(Scope)).nil, pos, pkg, name, typ, false), anonymous, false, true);
	};
	Var.Ptr.prototype.Anonymous = function() {
		var obj;
		obj = this;
		return obj.anonymous;
	};
	Var.prototype.Anonymous = function() { return this.go$val.Anonymous(); };
	Var.Ptr.prototype.IsField = function() {
		var obj;
		obj = this;
		return obj.isField;
	};
	Var.prototype.IsField = function() { return this.go$val.IsField(); };
	NewFunc = go$pkg.NewFunc = function(pos, pkg, name, sig) {
		var typ;
		typ = null;
		if (!(sig === (go$ptrType(Signature)).nil)) {
			typ = sig;
		}
		return new Func.Ptr(new object.Ptr((go$ptrType(Scope)).nil, pos, pkg, name, typ, false));
	};
	Func.Ptr.prototype.FullName = function() {
		var obj, buf;
		obj = this;
		buf = new bytes.Buffer.Ptr();
		writeFuncName(buf, (go$ptrType(Package)).nil, obj);
		return buf.String();
	};
	Func.prototype.FullName = function() { return this.go$val.FullName(); };
	Func.Ptr.prototype.Scope = function() {
		var obj, x;
		obj = this;
		return (x = obj.object.typ, (x !== null && x.constructor === (go$ptrType(Signature)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Signature))))).scope;
	};
	Func.prototype.Scope = function() { return this.go$val.Scope(); };
	NewLabel = go$pkg.NewLabel = function(pos, name) {
		return new Label.Ptr(new object.Ptr((go$ptrType(Scope)).nil, pos, (go$ptrType(Package)).nil, name, go$pkg.Typ[0], false));
	};
	newBuiltin = function(id) {
		return new Builtin.Ptr(new object.Ptr((go$ptrType(Scope)).nil, 0, (go$ptrType(Package)).nil, predeclaredFuncs[id].name, go$pkg.Typ[0], false), id);
	};
	writeObject = function(buf, this$1, obj) {
		var typ, obj$1, _ref, _type, path, pkg;
		typ = obj.Type();
		_ref = obj;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(PkgName))) {
			obj$1 = _ref.go$val;
			fmt.Fprintf(buf, "package %s", new (go$sliceType(go$emptyInterface))([new Go$String(obj$1.object.Name())]));
			if (path = obj$1.object.Pkg().path, !(path === "") && !(path === obj$1.object.Name())) {
				fmt.Fprintf(buf, " (%q)", new (go$sliceType(go$emptyInterface))([new Go$String(path)]));
			}
			return;
		} else if (_type === (go$ptrType(Const))) {
			obj$1 = _ref.go$val;
			buf.WriteString("const");
		} else if (_type === (go$ptrType(TypeName))) {
			obj$1 = _ref.go$val;
			buf.WriteString("type");
			typ = typ.Underlying();
		} else if (_type === (go$ptrType(Var))) {
			obj$1 = _ref.go$val;
			if (obj$1.isField) {
				buf.WriteString("field");
			} else {
				buf.WriteString("var");
			}
		} else if (_type === (go$ptrType(Func))) {
			obj$1 = _ref.go$val;
			buf.WriteString("func ");
			writeFuncName(buf, this$1, obj$1);
			if (!(go$interfaceIsEqual(typ, null))) {
				WriteSignature(buf, this$1, (typ !== null && typ.constructor === (go$ptrType(Signature)) ? typ.go$val : go$typeAssertionFailed(typ, (go$ptrType(Signature)))));
			}
			return;
		} else if (_type === (go$ptrType(Label))) {
			obj$1 = _ref.go$val;
			buf.WriteString("label");
			typ = null;
		} else if (_type === (go$ptrType(Builtin))) {
			obj$1 = _ref.go$val;
			buf.WriteString("builtin");
			typ = null;
		} else if (_type === (go$ptrType(Nil))) {
			obj$1 = _ref.go$val;
			buf.WriteString("nil");
			return;
		} else {
			obj$1 = _ref;
			throw go$panic(new Go$String(fmt.Sprintf("writeObject(%T)", new (go$sliceType(go$emptyInterface))([obj$1]))));
		}
		buf.WriteByte(32);
		if (pkg = obj.Pkg(), !(pkg === (go$ptrType(Package)).nil) && !(this$1 === pkg) && go$interfaceIsEqual(pkg.scope.Lookup(obj.Name()), obj)) {
			buf.WriteString(pkg.path);
			buf.WriteByte(46);
		}
		buf.WriteString(obj.Name());
		if (!(go$interfaceIsEqual(typ, null))) {
			buf.WriteByte(32);
			WriteType(buf, this$1, typ);
		}
	};
	ObjectString = go$pkg.ObjectString = function(this$1, obj) {
		var buf;
		buf = new bytes.Buffer.Ptr();
		writeObject(buf, this$1, obj);
		return buf.String();
	};
	PkgName.Ptr.prototype.String = function() {
		var obj;
		obj = this;
		return ObjectString((go$ptrType(Package)).nil, obj);
	};
	PkgName.prototype.String = function() { return this.go$val.String(); };
	Const.Ptr.prototype.String = function() {
		var obj;
		obj = this;
		return ObjectString((go$ptrType(Package)).nil, obj);
	};
	Const.prototype.String = function() { return this.go$val.String(); };
	TypeName.Ptr.prototype.String = function() {
		var obj;
		obj = this;
		return ObjectString((go$ptrType(Package)).nil, obj);
	};
	TypeName.prototype.String = function() { return this.go$val.String(); };
	Var.Ptr.prototype.String = function() {
		var obj;
		obj = this;
		return ObjectString((go$ptrType(Package)).nil, obj);
	};
	Var.prototype.String = function() { return this.go$val.String(); };
	Func.Ptr.prototype.String = function() {
		var obj;
		obj = this;
		return ObjectString((go$ptrType(Package)).nil, obj);
	};
	Func.prototype.String = function() { return this.go$val.String(); };
	Label.Ptr.prototype.String = function() {
		var obj;
		obj = this;
		return ObjectString((go$ptrType(Package)).nil, obj);
	};
	Label.prototype.String = function() { return this.go$val.String(); };
	Builtin.Ptr.prototype.String = function() {
		var obj;
		obj = this;
		return ObjectString((go$ptrType(Package)).nil, obj);
	};
	Builtin.prototype.String = function() { return this.go$val.String(); };
	Nil.Ptr.prototype.String = function() {
		var obj;
		obj = this;
		return ObjectString((go$ptrType(Package)).nil, obj);
	};
	Nil.prototype.String = function() { return this.go$val.String(); };
	writeFuncName = function(buf, this$1, f) {
		var x, sig, recv, ok, _tuple, x$1;
		if (!(go$interfaceIsEqual(f.object.typ, null))) {
			sig = (x = f.object.typ, (x !== null && x.constructor === (go$ptrType(Signature)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Signature)))));
			if (recv = sig.Recv(), !(recv === (go$ptrType(Var)).nil)) {
				buf.WriteByte(40);
				if (_tuple = (x$1 = recv.object.Type(), (x$1 !== null && x$1.constructor === (go$ptrType(Interface)) ? [x$1.go$val, true] : [(go$ptrType(Interface)).nil, false])), ok = _tuple[1], ok) {
					buf.WriteString("interface");
				} else {
					WriteType(buf, this$1, recv.object.Type());
				}
				buf.WriteByte(41);
				buf.WriteByte(46);
			} else if (!(f.object.pkg === (go$ptrType(Package)).nil) && !(f.object.pkg === this$1)) {
				buf.WriteString(f.object.pkg.path);
				buf.WriteByte(46);
			}
		}
		buf.WriteString(f.object.name);
	};
	go$ptrType(objset).prototype.insert = function(obj) {
		var s, id, alt, _entry, _key;
		s = this;
		id = obj.Id();
		if (alt = (_entry = (s.go$get())[id], _entry !== undefined ? _entry.v : null), !(go$interfaceIsEqual(alt, null))) {
			return alt;
		}
		if (s.go$get() === false) {
			s.go$set(new Go$Map());
		}
		_key = id, (s.go$get() || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: obj };
		return null;
	};
	objset.prototype.insert = function(obj) { var obj = this.go$val; return (new (go$ptrType(objset))(function() { return obj; }, null)).insert(obj); };
	operand.Ptr.prototype.pos = function() {
		var x;
		x = this;
		if (go$interfaceIsEqual(x.expr, null)) {
			return 0;
		}
		return x.expr.Pos();
	};
	operand.prototype.pos = function() { return this.go$val.pos(); };
	operand.Ptr.prototype.String = function() {
		var x, buf, expr, _ref, hasType, _ref$1, x$1, s;
		x = this;
		buf = new bytes.Buffer.Ptr();
		expr = "";
		if (!(go$interfaceIsEqual(x.expr, null))) {
			expr = ExprString(x.expr);
		} else {
			_ref = x.mode;
			if (_ref === 2) {
				expr = predeclaredFuncs[x.id].name;
			} else if (_ref === 3) {
				expr = TypeString((go$ptrType(Package)).nil, x.typ);
			} else if (_ref === 4) {
				expr = x.val.String();
			}
		}
		if (!(expr === "")) {
			buf.WriteString(expr);
			buf.WriteString(" (");
		}
		hasType = false;
		_ref$1 = x.mode;
		switch (0) { default: if (_ref$1 === 0 || _ref$1 === 1 || _ref$1 === 2 || _ref$1 === 3) {
		} else {
			if (isUntyped(x.typ)) {
				buf.WriteString((x$1 = x.typ, (x$1 !== null && x$1.constructor === (go$ptrType(Basic)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(Basic))))).name);
				buf.WriteByte(32);
				break;
			}
			hasType = true;
		} }
		buf.WriteString(operandModeString[x.mode]);
		if (x.mode === 4) {
			if (s = x.val.String(), !(s === expr)) {
				buf.WriteByte(32);
				buf.WriteString(s);
			}
		}
		if (hasType) {
			if (!(go$interfaceIsEqual(x.typ, go$pkg.Typ[0]))) {
				buf.WriteString(" of type ");
				WriteType(buf, (go$ptrType(Package)).nil, x.typ);
			} else {
				buf.WriteString(" with invalid type");
			}
		}
		if (!(expr === "")) {
			buf.WriteByte(41);
		}
		return buf.String();
	};
	operand.prototype.String = function() { return this.go$val.String(); };
	operand.Ptr.prototype.setConst = function(tok, lit) {
		var x, val, kind, _ref;
		x = this;
		val = exact.MakeFromLiteral(lit, tok);
		if (go$interfaceIsEqual(val, null)) {
			x.mode = 0;
			return;
		}
		kind = 0;
		_ref = tok;
		if (_ref === 5) {
			kind = 20;
		} else if (_ref === 6) {
			kind = 22;
		} else if (_ref === 7) {
			kind = 23;
		} else if (_ref === 8) {
			kind = 21;
		} else if (_ref === 9) {
			kind = 24;
		}
		x.mode = 4;
		x.typ = go$pkg.Typ[kind];
		x.val = val;
	};
	operand.prototype.setConst = function(tok, lit) { return this.go$val.setConst(tok, lit); };
	operand.Ptr.prototype.isNil = function() {
		var x;
		x = this;
		return (x.mode === 7) && go$interfaceIsEqual(x.typ, go$pkg.Typ[25]);
	};
	operand.prototype.isNil = function() { return this.go$val.isNil(); };
	operand.Ptr.prototype.assignableTo = function(conf, T) {
		var x, V, Vu, Tu, ok, _tuple, Ti, ok$1, Vc, _tuple$1, ok$2, Tc, _tuple$2, t, _ref, _type, t$1, _ref$1, _type$1, Vb, _tuple$3;
		x = this;
		if ((x.mode === 0) || go$interfaceIsEqual(T, go$pkg.Typ[0])) {
			return true;
		}
		V = x.typ;
		if (Identical(V, T)) {
			return true;
		}
		Vu = V.Underlying();
		Tu = T.Underlying();
		if (_tuple = (Tu !== null && Tu.constructor === (go$ptrType(Interface)) ? [Tu.go$val, true] : [(go$ptrType(Interface)).nil, false]), Ti = _tuple[0], ok = _tuple[1], ok) {
			if (Implements(x.typ, Ti)) {
				return true;
			}
		}
		if (Identical(Vu, Tu) && (!isNamed(V) || !isNamed(T))) {
			return true;
		}
		if (_tuple$1 = (Vu !== null && Vu.constructor === (go$ptrType(Chan)) ? [Vu.go$val, true] : [(go$ptrType(Chan)).nil, false]), Vc = _tuple$1[0], ok$1 = _tuple$1[1], ok$1 && (Vc.dir === 0)) {
			if (_tuple$2 = (Tu !== null && Tu.constructor === (go$ptrType(Chan)) ? [Tu.go$val, true] : [(go$ptrType(Chan)).nil, false]), Tc = _tuple$2[0], ok$2 = _tuple$2[1], ok$2 && Identical(Vc.elem, Tc.elem)) {
				return !isNamed(V) || !isNamed(T);
			}
		}
		if (x.isNil()) {
			_ref = Tu;
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === (go$ptrType(Basic))) {
				t = _ref.go$val;
				if (t.kind === 18) {
					return true;
				}
			} else if (_type === (go$ptrType(Pointer)) || _type === (go$ptrType(Signature)) || _type === (go$ptrType(Slice)) || _type === (go$ptrType(Map)) || _type === (go$ptrType(Chan)) || _type === (go$ptrType(Interface))) {
				t = _ref;
				return true;
			}
			return false;
		}
		if (isUntyped(Vu)) {
			_ref$1 = Tu;
			_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
			if (_type$1 === (go$ptrType(Basic))) {
				t$1 = _ref$1.go$val;
				if (x.mode === 4) {
					return representableConst(x.val, conf, t$1.kind, (go$ptrType(exact.Value)).nil);
				}
				if (_tuple$3 = (Vu !== null && Vu.constructor === (go$ptrType(Basic)) ? [Vu.go$val, true] : [(go$ptrType(Basic)).nil, false]), Vb = _tuple$3[0], !(Vb === (go$ptrType(Basic)).nil)) {
					return (Vb.kind === 19) && isBoolean(Tu);
				}
			} else if (_type$1 === (go$ptrType(Interface))) {
				t$1 = _ref$1.go$val;
				return x.isNil() || t$1.Empty();
			} else if (_type$1 === (go$ptrType(Pointer)) || _type$1 === (go$ptrType(Signature)) || _type$1 === (go$ptrType(Slice)) || _type$1 === (go$ptrType(Map)) || _type$1 === (go$ptrType(Chan))) {
				t$1 = _ref$1;
				return x.isNil();
			}
		}
		return false;
	};
	operand.prototype.assignableTo = function(conf, T) { return this.go$val.assignableTo(conf, T); };
	operand.Ptr.prototype.isInteger = function() {
		var x;
		x = this;
		return (x.mode === 0) || isInteger(x.typ) || (x.mode === 4) && representableConst(x.val, (go$ptrType(Config)).nil, 20, (go$ptrType(exact.Value)).nil);
	};
	operand.prototype.isInteger = function() { return this.go$val.isInteger(); };
	NewPackage = go$pkg.NewPackage = function(path, name) {
		return new Package.Ptr(path, name, NewScope(go$pkg.Universe), false, (go$sliceType((go$ptrType(Package)))).nil, false);
	};
	Package.Ptr.prototype.Path = function() {
		var pkg;
		pkg = this;
		return pkg.path;
	};
	Package.prototype.Path = function() { return this.go$val.Path(); };
	Package.Ptr.prototype.Name = function() {
		var pkg;
		pkg = this;
		return pkg.name;
	};
	Package.prototype.Name = function() { return this.go$val.Name(); };
	Package.Ptr.prototype.Scope = function() {
		var pkg;
		pkg = this;
		return pkg.scope;
	};
	Package.prototype.Scope = function() { return this.go$val.Scope(); };
	Package.Ptr.prototype.Complete = function() {
		var pkg;
		pkg = this;
		return pkg.complete;
	};
	Package.prototype.Complete = function() { return this.go$val.Complete(); };
	Package.Ptr.prototype.MarkComplete = function() {
		var pkg;
		pkg = this;
		pkg.complete = true;
	};
	Package.prototype.MarkComplete = function() { return this.go$val.MarkComplete(); };
	Package.Ptr.prototype.Imports = function() {
		var pkg;
		pkg = this;
		return pkg.imports;
	};
	Package.prototype.Imports = function() { return this.go$val.Imports(); };
	Package.Ptr.prototype.SetImports = function(list) {
		var pkg;
		pkg = this;
		pkg.imports = list;
	};
	Package.prototype.SetImports = function(list) { return this.go$val.SetImports(list); };
	Package.Ptr.prototype.String = function() {
		var pkg;
		pkg = this;
		return fmt.Sprintf("package %s (%q)", new (go$sliceType(go$emptyInterface))([new Go$String(pkg.name), new Go$String(pkg.path)]));
	};
	Package.prototype.String = function() { return this.go$val.String(); };
	isNamed = function(typ) {
		var ok, _tuple, _tuple$1, ok$1;
		if (_tuple = (typ !== null && typ.constructor === (go$ptrType(Basic)) ? [typ.go$val, true] : [(go$ptrType(Basic)).nil, false]), ok = _tuple[1], ok) {
			return ok;
		}
		_tuple$1 = (typ !== null && typ.constructor === (go$ptrType(Named)) ? [typ.go$val, true] : [(go$ptrType(Named)).nil, false]), ok$1 = _tuple$1[1];
		return ok$1;
	};
	isBoolean = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 1) === 0));
	};
	isInteger = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 2) === 0));
	};
	isUnsigned = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 4) === 0));
	};
	isFloat = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 8) === 0));
	};
	isComplex = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 16) === 0));
	};
	isNumeric = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 26) === 0));
	};
	isString = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 32) === 0));
	};
	isTyped = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return !ok || ((t.info & 64) === 0);
	};
	isUntyped = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 64) === 0));
	};
	isOrdered = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 42) === 0));
	};
	isConstType = function(typ) {
		var _tuple, x, t, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Basic)) ? [x.go$val, true] : [(go$ptrType(Basic)).nil, false])), t = _tuple[0], ok = _tuple[1];
		return ok && !(((t.info & 59) === 0));
	};
	isInterface = function(typ) {
		var _tuple, x, ok;
		_tuple = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Interface)) ? [x.go$val, true] : [(go$ptrType(Interface)).nil, false])), ok = _tuple[1];
		return ok;
	};
	Comparable = go$pkg.Comparable = function(T) {
		var t, _ref, _type, _ref$1, _i, _slice, _index, f;
		_ref = T.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(Basic))) {
			t = _ref.go$val;
			return !((t.kind === 25));
		} else if (_type === (go$ptrType(Pointer)) || _type === (go$ptrType(Interface)) || _type === (go$ptrType(Chan))) {
			t = _ref;
			return true;
		} else if (_type === (go$ptrType(Struct))) {
			t = _ref.go$val;
			_ref$1 = t.fields;
			_i = 0;
			while (_i < _ref$1.length) {
				f = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (!Comparable(f.object.typ)) {
					return false;
				}
				_i++;
			}
			return true;
		} else if (_type === (go$ptrType(Array))) {
			t = _ref.go$val;
			return Comparable(t.elem);
		}
		return false;
	};
	hasNil = function(typ) {
		var t, _ref, _type;
		_ref = typ.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(Basic))) {
			t = _ref.go$val;
			return t.kind === 18;
		} else if (_type === (go$ptrType(Slice)) || _type === (go$ptrType(Pointer)) || _type === (go$ptrType(Signature)) || _type === (go$ptrType(Interface)) || _type === (go$ptrType(Map)) || _type === (go$ptrType(Chan))) {
			t = _ref;
			return true;
		}
		return false;
	};
	Identical = go$pkg.Identical = function(x, y) {
		return identical(x, y, (go$ptrType(ifacePair)).nil);
	};
	ifacePair.Ptr.prototype.identical = function(q) {
		var p;
		p = this;
		return p.x === q.x && p.y === q.y || p.x === q.y && p.y === q.x;
	};
	ifacePair.prototype.identical = function(q) { return this.go$val.identical(q); };
	identical = function(x, y, p) {
		var x$1, _ref, _type, ok, _tuple, y$1, ok$1, _tuple$1, y$2, x$2, x$3, ok$2, _tuple$2, y$3, ok$3, _tuple$3, y$4, _ref$1, _i, _slice, _index, f, i, _slice$1, _index$1, g, ok$4, _tuple$4, y$5, ok$5, _tuple$5, y$6, _ref$2, _i$1, _slice$2, _index$2, v, i$1, _slice$3, _index$3, w, ok$6, _tuple$6, y$7, ok$7, _tuple$7, y$8, a, b, q, _ref$3, _i$2, _slice$4, _index$4, f$1, i$2, _slice$5, _index$5, g$1, ok$8, _tuple$8, y$9, ok$9, _tuple$9, y$10, ok$10, _tuple$10, y$11;
		if (go$interfaceIsEqual(x, y)) {
			return true;
		}
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(Basic))) {
			x$1 = _ref.go$val;
			if (_tuple = (y !== null && y.constructor === (go$ptrType(Basic)) ? [y.go$val, true] : [(go$ptrType(Basic)).nil, false]), y$1 = _tuple[0], ok = _tuple[1], ok) {
				return x$1.kind === y$1.kind;
			}
		} else if (_type === (go$ptrType(Array))) {
			x$1 = _ref.go$val;
			if (_tuple$1 = (y !== null && y.constructor === (go$ptrType(Array)) ? [y.go$val, true] : [(go$ptrType(Array)).nil, false]), y$2 = _tuple$1[0], ok$1 = _tuple$1[1], ok$1) {
				return (x$2 = x$1.len, x$3 = y$2.len, (x$2.high === x$3.high && x$2.low === x$3.low)) && identical(x$1.elem, y$2.elem, p);
			}
		} else if (_type === (go$ptrType(Slice))) {
			x$1 = _ref.go$val;
			if (_tuple$2 = (y !== null && y.constructor === (go$ptrType(Slice)) ? [y.go$val, true] : [(go$ptrType(Slice)).nil, false]), y$3 = _tuple$2[0], ok$2 = _tuple$2[1], ok$2) {
				return identical(x$1.elem, y$3.elem, p);
			}
		} else if (_type === (go$ptrType(Struct))) {
			x$1 = _ref.go$val;
			if (_tuple$3 = (y !== null && y.constructor === (go$ptrType(Struct)) ? [y.go$val, true] : [(go$ptrType(Struct)).nil, false]), y$4 = _tuple$3[0], ok$3 = _tuple$3[1], ok$3) {
				if (x$1.NumFields() === y$4.NumFields()) {
					_ref$1 = x$1.fields;
					_i = 0;
					while (_i < _ref$1.length) {
						f = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
						i = _i;
						g = (_slice$1 = y$4.fields, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
						if (!(f.anonymous === g.anonymous) || !(x$1.Tag(i) === y$4.Tag(i)) || !f.object.sameId(g.object.pkg, g.object.name) || !identical(f.object.typ, g.object.typ, p)) {
							return false;
						}
						_i++;
					}
					return true;
				}
			}
		} else if (_type === (go$ptrType(Pointer))) {
			x$1 = _ref.go$val;
			if (_tuple$4 = (y !== null && y.constructor === (go$ptrType(Pointer)) ? [y.go$val, true] : [(go$ptrType(Pointer)).nil, false]), y$5 = _tuple$4[0], ok$4 = _tuple$4[1], ok$4) {
				return identical(x$1.base, y$5.base, p);
			}
		} else if (_type === (go$ptrType(Tuple))) {
			x$1 = _ref.go$val;
			if (_tuple$5 = (y !== null && y.constructor === (go$ptrType(Tuple)) ? [y.go$val, true] : [(go$ptrType(Tuple)).nil, false]), y$6 = _tuple$5[0], ok$5 = _tuple$5[1], ok$5) {
				if (x$1.Len() === y$6.Len()) {
					if (!(x$1 === (go$ptrType(Tuple)).nil)) {
						_ref$2 = x$1.vars;
						_i$1 = 0;
						while (_i$1 < _ref$2.length) {
							v = (_slice$2 = _ref$2, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
							i$1 = _i$1;
							w = (_slice$3 = y$6.vars, _index$3 = i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
							if (!identical(v.object.typ, w.object.typ, p)) {
								return false;
							}
							_i$1++;
						}
					}
					return true;
				}
			}
		} else if (_type === (go$ptrType(Signature))) {
			x$1 = _ref.go$val;
			if (_tuple$6 = (y !== null && y.constructor === (go$ptrType(Signature)) ? [y.go$val, true] : [(go$ptrType(Signature)).nil, false]), y$7 = _tuple$6[0], ok$6 = _tuple$6[1], ok$6) {
				return x$1.variadic === y$7.variadic && identical(x$1.params, y$7.params, p) && identical(x$1.results, y$7.results, p);
			}
		} else if (_type === (go$ptrType(Interface))) {
			x$1 = _ref.go$val;
			if (_tuple$7 = (y !== null && y.constructor === (go$ptrType(Interface)) ? [y.go$val, true] : [(go$ptrType(Interface)).nil, false]), y$8 = _tuple$7[0], ok$7 = _tuple$7[1], ok$7) {
				a = x$1.allMethods;
				b = y$8.allMethods;
				if (a.length === b.length) {
					q = new ifacePair.Ptr(x$1, y$8, p);
					while (!(p === (go$ptrType(ifacePair)).nil)) {
						if (p.identical(q)) {
							return true;
						}
						p = p.prev;
					}
					_ref$3 = a;
					_i$2 = 0;
					while (_i$2 < _ref$3.length) {
						f$1 = (_slice$4 = _ref$3, _index$4 = _i$2, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
						i$2 = _i$2;
						g$1 = (_slice$5 = b, _index$5 = i$2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
						if (!(f$1.object.Id() === g$1.object.Id()) || !identical(f$1.object.typ, g$1.object.typ, q)) {
							return false;
						}
						_i$2++;
					}
					return true;
				}
			}
		} else if (_type === (go$ptrType(Map))) {
			x$1 = _ref.go$val;
			if (_tuple$8 = (y !== null && y.constructor === (go$ptrType(Map)) ? [y.go$val, true] : [(go$ptrType(Map)).nil, false]), y$9 = _tuple$8[0], ok$8 = _tuple$8[1], ok$8) {
				return identical(x$1.key, y$9.key, p) && identical(x$1.elem, y$9.elem, p);
			}
		} else if (_type === (go$ptrType(Chan))) {
			x$1 = _ref.go$val;
			if (_tuple$9 = (y !== null && y.constructor === (go$ptrType(Chan)) ? [y.go$val, true] : [(go$ptrType(Chan)).nil, false]), y$10 = _tuple$9[0], ok$9 = _tuple$9[1], ok$9) {
				return (x$1.dir === y$10.dir) && identical(x$1.elem, y$10.elem, p);
			}
		} else if (_type === (go$ptrType(Named))) {
			x$1 = _ref.go$val;
			if (_tuple$10 = (y !== null && y.constructor === (go$ptrType(Named)) ? [y.go$val, true] : [(go$ptrType(Named)).nil, false]), y$11 = _tuple$10[0], ok$10 = _tuple$10[1], ok$10) {
				return x$1.obj === y$11.obj;
			}
		} else {
			x$1 = _ref;
			unreachable();
		}
		return false;
	};
	defaultType = function(typ) {
		var ok, _tuple, t, _ref;
		if (_tuple = (typ !== null && typ.constructor === (go$ptrType(Basic)) ? [typ.go$val, true] : [(go$ptrType(Basic)).nil, false]), t = _tuple[0], ok = _tuple[1], ok) {
			_ref = t.kind;
			if (_ref === 19) {
				return go$pkg.Typ[1];
			} else if (_ref === 20) {
				return go$pkg.Typ[2];
			} else if (_ref === 21) {
				return go$pkg.UniverseRune;
			} else if (_ref === 22) {
				return go$pkg.Typ[14];
			} else if (_ref === 23) {
				return go$pkg.Typ[16];
			} else if (_ref === 24) {
				return go$pkg.Typ[17];
			}
		}
		return typ;
	};
	checker.Ptr.prototype.arityMatch = function(s, init) {
		var check, l, r, _slice, _index, n, _slice$1, _index$1, n$1;
		check = this;
		l = s.Names.length;
		r = s.Values.length;
		if (!(init === (go$ptrType(ast.ValueSpec)).nil)) {
			r = init.Values.length;
		}
		if (init === (go$ptrType(ast.ValueSpec)).nil && (r === 0)) {
			if (go$interfaceIsEqual(s.Type, null)) {
				check.errorf(s.Pos(), "missing type or init expr", new (go$sliceType(go$emptyInterface))([]));
			}
		} else if (l < r) {
			if (l < s.Values.length) {
				n = (_slice = s.Values, _index = l, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				check.errorf(n.Pos(), "extra init expr %s", new (go$sliceType(go$emptyInterface))([n]));
			} else {
				check.errorf(s.Pos(), "extra init expr at %s", new (go$sliceType(go$emptyInterface))([new token.Pos(init.Pos())]));
			}
		} else if (l > r && (!(init === (go$ptrType(ast.ValueSpec)).nil) || !((r === 1)))) {
			n$1 = (_slice$1 = s.Names, _index$1 = r, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			check.errorf(n$1.Pos(), "missing init expr for %s", new (go$sliceType(go$emptyInterface))([n$1]));
		}
	};
	checker.prototype.arityMatch = function(s, init) { return this.go$val.arityMatch(s, init); };
	validatedImportPath = function(path) {
		var _tuple, s, err, _ref, _i, _rune, r;
		_tuple = strconv.Unquote(path), s = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return ["", err];
		}
		if (s === "") {
			return ["", fmt.Errorf("empty string", new (go$sliceType(go$emptyInterface))([]))];
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			r = _rune[0];
			if (!unicode.IsGraphic(r) || unicode.IsSpace(r) || strings.ContainsRune("!\"#$%&'()*,:;<=>?[\\]^{|}`\xEF\xBF\xBD", r)) {
				return [s, fmt.Errorf("invalid character %#U", new (go$sliceType(go$emptyInterface))([new Go$Int32(r)]))];
			}
			_i += _rune[1];
		}
		return [s, null];
	};
	checker.Ptr.prototype.resolveFiles = function(files) {
		var check, pkg, objMap, initMap, declare, importer, seenPkgs, fileScopes, dotImports, _ref, _i, _slice, _index, file, fileScope, _ref$1, _i$1, _slice$1, _index$1, decl, d, _ref$2, _type, last, _ref$3, _i$2, _slice$2, _index$2, spec, iota, s, _ref$4, _type$1, imp, _tuple, path, err, err$1, _tuple$1, _entry, _key, name, obj, _ref$5, _i$3, _keys, _entry$1, obj$1, _slice$3, _index$3, posSet, _slice$4, _index$4, _key$1, _ref$6, _ref$7, _i$4, _slice$5, _index$5, name$1, i, obj$2, init, _slice$6, _index$6, d$1, _key$2, lhs, d1, _slice$7, _index$7, _ref$8, _i$5, _slice$8, _index$8, name$2, i$1, obj$3, _slice$9, _index$9, d$2, init$1, _slice$10, _index$10, _key$3, obj$4, name$3, obj$5, list, _slice$11, _index$11, typ, ptr, _tuple$2, base, _tuple$3, info, _key$4, _key$5, _ref$9, _i$6, _slice$12, _index$12, scope, _ref$10, _i$7, _keys$1, _entry$2, obj$6, alt, typePath, _ref$11, _i$8, _slice$13, _index$13, obj$7, _ref$12, _i$9, _slice$14, _index$14, _struct, f, initPath, _ref$13, _i$10, _slice$15, _index$15, obj$8, _ref$14, _type$2, init$2, _entry$3, _ref$15, _i$11, _slice$16, _index$16, scope$1, i$2, usedDotImports, _ref$16, _i$12, _keys$2, _entry$4, obj$9, obj$10, _ref$17, _type$3, _key$6, _ref$18, _slice$17, _index$17, _i$13, _keys$3, _entry$5, pos, pkg$1, _entry$6;
		check = this;
		pkg = check.pkg;
		objMap = new Go$Map(), initMap = new Go$Map();
		declare = (function(ident, obj, d) {
			var _key;
			assert(ident.Name === obj.Name());
			if (ident.Name === "init") {
				check.errorf(ident.Pos(), "cannot declare init - must be func", new (go$sliceType(go$emptyInterface))([]));
				return;
			}
			check.declare(pkg.scope, ident, obj);
			_key = obj, (objMap || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: d };
		});
		importer = check.conf.Import;
		if (importer === go$throwNilPointerError) {
			if (go$pkg.DefaultImport === go$throwNilPointerError) {
				throw go$panic(new Go$String("no Config.Import or DefaultImport (missing import _ \"code.google.com/p/go.tools/go/gcimporter\"?)"));
			}
			importer = go$pkg.DefaultImport;
		}
		seenPkgs = new Go$Map(), fileScopes = (go$sliceType((go$ptrType(Scope)))).nil, dotImports = (go$sliceType((go$mapType((go$ptrType(Package)), token.Pos)))).nil;
		_ref = files;
		_i = 0;
		while (_i < _ref.length) {
			file = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			check.recordDef(file.Name, null);
			fileScope = NewScope(pkg.scope);
			check.recordScope(file, fileScope);
			fileScopes = go$append(fileScopes, fileScope);
			dotImports = go$append(dotImports, false);
			_ref$1 = file.Decls;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				decl = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				_ref$2 = decl;
				_type = _ref$2 !== null ? _ref$2.constructor : null;
				if (_type === (go$ptrType(ast.BadDecl))) {
					d = _ref$2.go$val;
				} else if (_type === (go$ptrType(ast.GenDecl))) {
					d = _ref$2.go$val;
					last = (go$ptrType(ast.ValueSpec)).nil;
					_ref$3 = d.Specs;
					_i$2 = 0;
					while (_i$2 < _ref$3.length) {
						spec = (_slice$2 = _ref$3, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
						iota = _i$2;
						_ref$4 = spec;
						_type$1 = _ref$4 !== null ? _ref$4.constructor : null;
						if (_type$1 === (go$ptrType(ast.ImportSpec))) {
							s = _ref$4.go$val;
							imp = (go$ptrType(Package)).nil;
							_tuple = validatedImportPath(s.Path.Value), path = _tuple[0], err = _tuple[1];
							if (!(go$interfaceIsEqual(err, null))) {
								check.errorf(s.Path.Pos(), "invalid import path (%s)", new (go$sliceType(go$emptyInterface))([err]));
								_i$2++;
								continue;
							}
							if (path === "C" && check.conf.FakeImportC) {
								imp = NewPackage("C", "C");
								imp.fake = true;
							} else {
								err$1 = null;
								_tuple$1 = importer(check.conf.Packages, path), imp = _tuple$1[0], err$1 = _tuple$1[1];
								if (imp === (go$ptrType(Package)).nil && go$interfaceIsEqual(err$1, null)) {
									err$1 = errors.New("Config.Import returned nil but no error");
								}
								if (!(go$interfaceIsEqual(err$1, null))) {
									check.errorf(s.Path.Pos(), "could not import %s (%s)", new (go$sliceType(go$emptyInterface))([new Go$String(path), err$1]));
									_i$2++;
									continue;
								}
							}
							if (!(_entry = seenPkgs[imp.go$key()], _entry !== undefined ? _entry.v : false)) {
								_key = imp, (seenPkgs || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: true };
								if (!(imp === go$pkg.Unsafe)) {
									pkg.imports = go$append(pkg.imports, imp);
								}
							}
							name = imp.name;
							if (!(s.Name === (go$ptrType(ast.Ident)).nil)) {
								name = s.Name.Name;
								if (name === "init") {
									check.errorf(s.Name.Pos(), "cannot declare init - must be func", new (go$sliceType(go$emptyInterface))([]));
									_i$2++;
									continue;
								}
							}
							obj = NewPkgName(s.Pos(), imp, name);
							if (!(s.Name === (go$ptrType(ast.Ident)).nil)) {
								check.recordDef(s.Name, obj);
							} else {
								check.recordImplicit(s, obj);
							}
							if (name === ".") {
								_ref$5 = imp.scope.elems;
								_i$3 = 0;
								_keys = go$keys(_ref$5);
								while (_i$3 < _keys.length) {
									_entry$1 = _ref$5[_keys[_i$3]];
									obj$1 = _entry$1.v;
									if (obj$1.Exported()) {
										check.declare(fileScope, (go$ptrType(ast.Ident)).nil, obj$1);
										check.recordImplicit(s, obj$1);
									}
									_i$3++;
								}
								posSet = (_slice$3 = dotImports, _index$3 = (dotImports.length - 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
								if (posSet === false) {
									posSet = new Go$Map();
									_slice$4 = dotImports, _index$4 = dotImports.length - 1 >> 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = posSet) : go$throwRuntimeError("index out of range");
								}
								_key$1 = imp, (posSet || go$throwRuntimeError("assignment to entry in nil map"))[_key$1.go$key()] = { k: _key$1, v: s.Pos() };
							} else {
								check.declare(fileScope, (go$ptrType(ast.Ident)).nil, obj);
							}
						} else if (_type$1 === (go$ptrType(ast.ValueSpec))) {
							s = _ref$4.go$val;
							_ref$6 = d.Tok;
							if (_ref$6 === 64) {
								if (!(go$interfaceIsEqual(s.Type, null)) || s.Values.length > 0) {
									last = s;
								} else if (last === (go$ptrType(ast.ValueSpec)).nil) {
									last = new ast.ValueSpec.Ptr();
								}
								_ref$7 = s.Names;
								_i$4 = 0;
								while (_i$4 < _ref$7.length) {
									name$1 = (_slice$5 = _ref$7, _index$5 = _i$4, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
									i = _i$4;
									obj$2 = NewConst(name$1.Pos(), pkg, name$1.Name, null, exact.MakeInt64(new Go$Int64(0, iota)));
									init = null;
									if (i < last.Values.length) {
										init = (_slice$6 = last.Values, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
									}
									d$1 = new declInfo.Ptr(fileScope, (go$sliceType((go$ptrType(Var)))).nil, last.Type, init, (go$ptrType(ast.FuncDecl)).nil, false, 0);
									declare(name$1, obj$2, d$1);
									_key$2 = obj$2, (initMap || go$throwRuntimeError("assignment to entry in nil map"))[(_key$2 || go$interfaceNil).go$key()] = { k: _key$2, v: d$1 };
									_i$4++;
								}
								check.arityMatch(s, last);
							} else if (_ref$6 === 85) {
								lhs = (go$sliceType((go$ptrType(Var)))).make(s.Names.length, 0, function() { return (go$ptrType(Var)).nil; });
								d1 = (go$ptrType(declInfo)).nil;
								if (s.Values.length === 1) {
									d1 = new declInfo.Ptr(fileScope, lhs, s.Type, (_slice$7 = s.Values, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), (go$ptrType(ast.FuncDecl)).nil, false, 0);
								}
								_ref$8 = s.Names;
								_i$5 = 0;
								while (_i$5 < _ref$8.length) {
									name$2 = (_slice$8 = _ref$8, _index$8 = _i$5, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
									i$1 = _i$5;
									obj$3 = NewVar(name$2.Pos(), pkg, name$2.Name, null);
									_slice$9 = lhs, _index$9 = i$1, (_index$9 >= 0 && _index$9 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$9] = obj$3) : go$throwRuntimeError("index out of range");
									d$2 = d1;
									init$1 = null;
									if (d$2 === (go$ptrType(declInfo)).nil) {
										if (i$1 < s.Values.length) {
											init$1 = (_slice$10 = s.Values, _index$10 = i$1, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"));
										}
										d$2 = new declInfo.Ptr(fileScope, (go$sliceType((go$ptrType(Var)))).nil, s.Type, init$1, (go$ptrType(ast.FuncDecl)).nil, false, 0);
									}
									declare(name$2, obj$3, d$2);
									if (!(d1 === (go$ptrType(declInfo)).nil) || !(go$interfaceIsEqual(init$1, null))) {
										_key$3 = obj$3, (initMap || go$throwRuntimeError("assignment to entry in nil map"))[(_key$3 || go$interfaceNil).go$key()] = { k: _key$3, v: d$2 };
									}
									_i$5++;
								}
								check.arityMatch(s, (go$ptrType(ast.ValueSpec)).nil);
							} else {
								check.invalidAST(s.Pos(), "invalid token %s", new (go$sliceType(go$emptyInterface))([new token.Token(d.Tok)]));
							}
						} else if (_type$1 === (go$ptrType(ast.TypeSpec))) {
							s = _ref$4.go$val;
							obj$4 = NewTypeName(s.Name.Pos(), pkg, s.Name.Name, null);
							declare(s.Name, obj$4, new declInfo.Ptr(fileScope, (go$sliceType((go$ptrType(Var)))).nil, s.Type, null, (go$ptrType(ast.FuncDecl)).nil, false, 0));
						} else {
							s = _ref$4;
							check.invalidAST(s.Pos(), "unknown ast.Spec node %T", new (go$sliceType(go$emptyInterface))([s]));
						}
						_i$2++;
					}
				} else if (_type === (go$ptrType(ast.FuncDecl))) {
					d = _ref$2.go$val;
					name$3 = d.Name.Name;
					obj$5 = NewFunc(d.Name.Pos(), pkg, name$3, (go$ptrType(Signature)).nil);
					if (d.Recv === (go$ptrType(ast.FieldList)).nil) {
						if (name$3 === "init") {
							obj$5.object.parent = pkg.scope;
							check.recordDef(d.Name, obj$5);
							if (d.Body === (go$ptrType(ast.BlockStmt)).nil) {
								check.errorf(obj$5.object.pos, "missing function body", new (go$sliceType(go$emptyInterface))([]));
							}
						} else {
							check.declare(pkg.scope, d.Name, obj$5);
						}
					} else {
						if (list = d.Recv.List, list.length > 0) {
							typ = (_slice$11 = list, _index$11 = 0, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")).Type;
							if (_tuple$2 = (typ !== null && typ.constructor === (go$ptrType(ast.StarExpr)) ? [typ.go$val, true] : [(go$ptrType(ast.StarExpr)).nil, false]), ptr = _tuple$2[0], !(ptr === (go$ptrType(ast.StarExpr)).nil)) {
								typ = ptr.X;
							}
							if (_tuple$3 = (typ !== null && typ.constructor === (go$ptrType(ast.Ident)) ? [typ.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), base = _tuple$3[0], !(base === (go$ptrType(ast.Ident)).nil) && !(base.Name === "_")) {
								check.assocMethod(base.Name, obj$5);
							}
						}
					}
					info = new declInfo.Ptr(fileScope, (go$sliceType((go$ptrType(Var)))).nil, null, null, d, false, 0);
					_key$4 = obj$5, (objMap || go$throwRuntimeError("assignment to entry in nil map"))[(_key$4 || go$interfaceNil).go$key()] = { k: _key$4, v: info };
					if (!(d.Body === (go$ptrType(ast.BlockStmt)).nil)) {
						_key$5 = obj$5, (initMap || go$throwRuntimeError("assignment to entry in nil map"))[(_key$5 || go$interfaceNil).go$key()] = { k: _key$5, v: info };
					}
				} else {
					d = _ref$2;
					check.invalidAST(d.Pos(), "unknown ast.Decl node %T", new (go$sliceType(go$emptyInterface))([d]));
				}
				_i$1++;
			}
			_i++;
		}
		seenPkgs = false;
		_ref$9 = fileScopes;
		_i$6 = 0;
		while (_i$6 < _ref$9.length) {
			scope = (_slice$12 = _ref$9, _index$12 = _i$6, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range"));
			_ref$10 = scope.elems;
			_i$7 = 0;
			_keys$1 = go$keys(_ref$10);
			while (_i$7 < _keys$1.length) {
				_entry$2 = _ref$10[_keys$1[_i$7]];
				obj$6 = _entry$2.v;
				if (alt = pkg.scope.Lookup(obj$6.Name()), !(go$interfaceIsEqual(alt, null))) {
					check.errorf(alt.Pos(), "%s already declared in this file through import of package %s", new (go$sliceType(go$emptyInterface))([new Go$String(obj$6.Name()), new Go$String(obj$6.Pkg().Name())]));
				}
				_i$7++;
			}
			_i$6++;
		}
		check.initMap = initMap;
		check.objMap = objMap;
		typePath = (go$sliceType((go$ptrType(TypeName)))).make(0, 8, function() { return (go$ptrType(TypeName)).nil; });
		_ref$11 = objectsOf(check.objMap);
		_i$8 = 0;
		while (_i$8 < _ref$11.length) {
			obj$7 = (_slice$13 = _ref$11, _index$13 = _i$8, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range"));
			check.objDecl(obj$7, (go$ptrType(Named)).nil, typePath);
			_i$8++;
		}
		check.objMap = false;
		check.methods = false;
		_ref$12 = check.funcs;
		_i$9 = 0;
		while (_i$9 < _ref$12.length) {
			f = (_struct = (_slice$14 = _ref$12, _index$14 = _i$9, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range")), new funcInfo.Ptr(_struct.name, _struct.decl, _struct.sig, _struct.body));
			check.funcBody(f.decl, f.name, f.sig, f.body);
			_i$9++;
		}
		initPath = (go$sliceType(Object)).make(0, 8, function() { return null; });
		_ref$13 = objectsOf(initMap);
		_i$10 = 0;
		while (_i$10 < _ref$13.length) {
			obj$8 = (_slice$15 = _ref$13, _index$15 = _i$10, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range"));
			_ref$14 = obj$8;
			_type$2 = _ref$14 !== null ? _ref$14.constructor : null;
			if (_type$2 === (go$ptrType(Const)) || _type$2 === (go$ptrType(Var))) {
				if (init$2 = (_entry$3 = initMap[(obj$8 || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : (go$ptrType(declInfo)).nil), !(init$2 === (go$ptrType(declInfo)).nil)) {
					check.dependencies(obj$8, init$2, initPath);
				}
			}
			_i$10++;
		}
		check.initMap = false;
		if (check.conf.IgnoreFuncBodies) {
			return;
		}
		_ref$15 = fileScopes;
		_i$11 = 0;
		while (_i$11 < _ref$15.length) {
			scope$1 = (_slice$16 = _ref$15, _index$16 = _i$11, (_index$16 >= 0 && _index$16 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$16] : go$throwRuntimeError("index out of range"));
			i$2 = _i$11;
			usedDotImports = false;
			_ref$16 = scope$1.elems;
			_i$12 = 0;
			_keys$2 = go$keys(_ref$16);
			while (_i$12 < _keys$2.length) {
				_entry$4 = _ref$16[_keys$2[_i$12]];
				obj$9 = _entry$4.v;
				_ref$17 = obj$9;
				_type$3 = _ref$17 !== null ? _ref$17.constructor : null;
				if (_type$3 === (go$ptrType(PkgName))) {
					obj$10 = _ref$17.go$val;
					if (!obj$10.object.used) {
						check.errorf(obj$10.object.pos, "%q imported but not used", new (go$sliceType(go$emptyInterface))([new Go$String(obj$10.object.pkg.path)]));
					}
				} else {
					obj$10 = _ref$17;
					if (obj$10.isUsed()) {
						if (usedDotImports === false) {
							usedDotImports = new Go$Map();
						}
						_key$6 = obj$10.Pkg(), (usedDotImports || go$throwRuntimeError("assignment to entry in nil map"))[_key$6.go$key()] = { k: _key$6, v: true };
					}
				}
				_i$12++;
			}
			_ref$18 = (_slice$17 = dotImports, _index$17 = i$2, (_index$17 >= 0 && _index$17 < _slice$17.length) ? _slice$17.array[_slice$17.offset + _index$17] : go$throwRuntimeError("index out of range"));
			_i$13 = 0;
			_keys$3 = go$keys(_ref$18);
			while (_i$13 < _keys$3.length) {
				_entry$5 = _ref$18[_keys$3[_i$13]];
				pos = _entry$5.v;
				pkg$1 = _entry$5.k;
				if (!(_entry$6 = usedDotImports[pkg$1.go$key()], _entry$6 !== undefined ? _entry$6.v : false)) {
					check.errorf(pos, "%q imported but not used", new (go$sliceType(go$emptyInterface))([new Go$String(pkg$1.path)]));
				}
				_i$13++;
			}
			_i$11++;
		}
	};
	checker.prototype.resolveFiles = function(files) { return this.go$val.resolveFiles(files); };
	objectsOf = function(m) {
		var list, i, _ref, _i, _keys, _entry, obj, _slice, _index;
		list = (go$sliceType(Object)).make(go$keys(m).length, 0, function() { return null; });
		i = 0;
		_ref = m;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			obj = _entry.k;
			_slice = list, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = obj) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
			_i++;
		}
		sort.Sort(go$subslice(new inSourceOrder(list.array), list.offset, list.offset + list.length));
		return list;
	};
	inSourceOrder.prototype.Len = function() {
		var a;
		a = this;
		return a.length;
	};
	go$ptrType(inSourceOrder).prototype.Len = function() { return this.go$get().Len(); };
	inSourceOrder.prototype.Less = function(i, j) {
		var a, _slice, _index, _slice$1, _index$1;
		a = this;
		return (_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos() < (_slice$1 = a, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Pos();
	};
	go$ptrType(inSourceOrder).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	inSourceOrder.prototype.Swap = function(i, j) {
		var a, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		a = this;
		_tuple = [(_slice = a, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = a, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _slice$2 = a, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = a, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(inSourceOrder).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	checker.Ptr.prototype.dependencies = function(obj, init, path) {
		var check, first, cycle, _ref, _i, _slice, _index, obj$1, i, _ref$1, _type, _slice$1, _index$1, obj$2, i$1, _ref$2, _i$1, _slice$2, _index$2, _ref$3, _i$2, _slice$3, _index$3, obj$3, _entry, dep, this$1, _tuple, initLhs;
		check = this;
		if (init.mark < 0) {
			return;
		}
		if (init.mark > 0) {
			first = -1;
			cycle = go$subslice(path, (init.mark - 1 >> 0));
			_ref = cycle;
			_i = 0;
			L:
			while (_i < _ref.length) {
				obj$1 = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				_ref$1 = obj$1;
				_type = _ref$1 !== null ? _ref$1.constructor : null;
				if (_type === (go$ptrType(Const)) || _type === (go$ptrType(Var))) {
					first = i;
					break L;
				}
				_i++;
			}
			if (first >= 0) {
				obj$2 = (_slice$1 = cycle, _index$1 = first, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				check.errorf(obj$2.Pos(), "initialization cycle for %s", new (go$sliceType(go$emptyInterface))([new Go$String(obj$2.Name())]));
				i$1 = first;
				_ref$2 = cycle;
				_i$1 = 0;
				while (_i$1 < _ref$2.length) {
					check.errorf(obj$2.Pos(), "\t%s refers to", new (go$sliceType(go$emptyInterface))([new Go$String(obj$2.Name())]));
					i$1 = i$1 + 1 >> 0;
					if (i$1 >= cycle.length) {
						i$1 = 0;
					}
					obj$2 = (_slice$2 = cycle, _index$2 = i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
					_i$1++;
				}
				check.errorf(obj$2.Pos(), "\t%s", new (go$sliceType(go$emptyInterface))([new Go$String(obj$2.Name())]));
			}
			init.mark = -1;
			return;
		}
		path = go$append(path, obj);
		init.mark = path.length;
		_ref$3 = objectsOf(init.deps);
		_i$2 = 0;
		while (_i$2 < _ref$3.length) {
			obj$3 = (_slice$3 = _ref$3, _index$3 = _i$2, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			dep = (_entry = init.deps[(obj$3 || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : (go$ptrType(declInfo)).nil);
			check.dependencies(obj$3, dep, path);
			_i$2++;
		}
		init.mark = -1;
		if (_tuple = (obj !== null && obj.constructor === (go$ptrType(Var)) ? [obj.go$val, true] : [(go$ptrType(Var)).nil, false]), this$1 = _tuple[0], !(this$1 === (go$ptrType(Var)).nil)) {
			initLhs = init.lhs;
			if (initLhs === (go$sliceType((go$ptrType(Var)))).nil) {
				initLhs = new (go$sliceType((go$ptrType(Var))))([this$1]);
			}
			check.Info.InitOrder = go$append(check.Info.InitOrder, new Initializer.Ptr(initLhs, init.init));
		}
	};
	checker.prototype.dependencies = function(obj, init, path) { return this.go$val.dependencies(obj, init, path); };
	checker.Ptr.prototype.isTerminating = function(s, label) {
		var check, s$1, _ref, _type, call, _tuple, x, id, _tuple$1, x$1, obj, b, _tuple$2, _ref$1, _i, _slice, _index, s$2, cc;
		check = this;
		_ref = s;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadStmt)) || _type === (go$ptrType(ast.DeclStmt)) || _type === (go$ptrType(ast.EmptyStmt)) || _type === (go$ptrType(ast.SendStmt)) || _type === (go$ptrType(ast.IncDecStmt)) || _type === (go$ptrType(ast.AssignStmt)) || _type === (go$ptrType(ast.GoStmt)) || _type === (go$ptrType(ast.DeferStmt)) || _type === (go$ptrType(ast.RangeStmt))) {
			s$1 = _ref;
		} else if (_type === (go$ptrType(ast.LabeledStmt))) {
			s$1 = _ref.go$val;
			return check.isTerminating(s$1.Stmt, s$1.Label.Name);
		} else if (_type === (go$ptrType(ast.ExprStmt))) {
			s$1 = _ref.go$val;
			if (_tuple = (x = unparen(s$1.X), (x !== null && x.constructor === (go$ptrType(ast.CallExpr)) ? [x.go$val, true] : [(go$ptrType(ast.CallExpr)).nil, false])), call = _tuple[0], !(call === (go$ptrType(ast.CallExpr)).nil)) {
				if (_tuple$1 = (x$1 = call.Fun, (x$1 !== null && x$1.constructor === (go$ptrType(ast.Ident)) ? [x$1.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), id = _tuple$1[0], !(id === (go$ptrType(ast.Ident)).nil)) {
					if (obj = check.context.scope.LookupParent(id.Name), !(go$interfaceIsEqual(obj, null))) {
						if (_tuple$2 = (obj !== null && obj.constructor === (go$ptrType(Builtin)) ? [obj.go$val, true] : [(go$ptrType(Builtin)).nil, false]), b = _tuple$2[0], !(b === (go$ptrType(Builtin)).nil) && (b.id === 10)) {
							return true;
						}
					}
				}
			}
		} else if (_type === (go$ptrType(ast.ReturnStmt))) {
			s$1 = _ref.go$val;
			return true;
		} else if (_type === (go$ptrType(ast.BranchStmt))) {
			s$1 = _ref.go$val;
			if ((s$1.Tok === 73) || (s$1.Tok === 69)) {
				return true;
			}
		} else if (_type === (go$ptrType(ast.BlockStmt))) {
			s$1 = _ref.go$val;
			return check.isTerminatingList(s$1.List, "");
		} else if (_type === (go$ptrType(ast.IfStmt))) {
			s$1 = _ref.go$val;
			if (!(go$interfaceIsEqual(s$1.Else, null)) && check.isTerminating(s$1.Body, "") && check.isTerminating(s$1.Else, "")) {
				return true;
			}
		} else if (_type === (go$ptrType(ast.SwitchStmt))) {
			s$1 = _ref.go$val;
			return check.isTerminatingSwitch(s$1.Body, label);
		} else if (_type === (go$ptrType(ast.TypeSwitchStmt))) {
			s$1 = _ref.go$val;
			return check.isTerminatingSwitch(s$1.Body, label);
		} else if (_type === (go$ptrType(ast.SelectStmt))) {
			s$1 = _ref.go$val;
			_ref$1 = s$1.Body.List;
			_i = 0;
			while (_i < _ref$1.length) {
				s$2 = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				cc = (s$2 !== null && s$2.constructor === (go$ptrType(ast.CommClause)) ? s$2.go$val : go$typeAssertionFailed(s$2, (go$ptrType(ast.CommClause))));
				if (!check.isTerminatingList(cc.Body, "") || hasBreakList(cc.Body, label, true)) {
					return false;
				}
				_i++;
			}
			return true;
		} else if (_type === (go$ptrType(ast.ForStmt))) {
			s$1 = _ref.go$val;
			if (go$interfaceIsEqual(s$1.Cond, null) && !hasBreak(s$1.Body, label, true)) {
				return true;
			}
		} else {
			s$1 = _ref;
			unreachable();
		}
		return false;
	};
	checker.prototype.isTerminating = function(s, label) { return this.go$val.isTerminating(s, label); };
	checker.Ptr.prototype.isTerminatingList = function(list, label) {
		var check, n, _slice, _index;
		check = this;
		n = list.length;
		return n > 0 && check.isTerminating((_slice = list, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), label);
	};
	checker.prototype.isTerminatingList = function(list, label) { return this.go$val.isTerminatingList(list, label); };
	checker.Ptr.prototype.isTerminatingSwitch = function(body, label) {
		var check, hasDefault, _ref, _i, _slice, _index, s, cc;
		check = this;
		hasDefault = false;
		_ref = body.List;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			cc = (s !== null && s.constructor === (go$ptrType(ast.CaseClause)) ? s.go$val : go$typeAssertionFailed(s, (go$ptrType(ast.CaseClause))));
			if (cc.List === (go$sliceType(ast.Expr)).nil) {
				hasDefault = true;
			}
			if (!check.isTerminatingList(cc.Body, "") || hasBreakList(cc.Body, label, true)) {
				return false;
			}
			_i++;
		}
		return hasDefault;
	};
	checker.prototype.isTerminatingSwitch = function(body, label) { return this.go$val.isTerminatingSwitch(body, label); };
	hasBreak = function(s, label, implicit) {
		var s$1, _ref, _type;
		_ref = s;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadStmt)) || _type === (go$ptrType(ast.DeclStmt)) || _type === (go$ptrType(ast.EmptyStmt)) || _type === (go$ptrType(ast.ExprStmt)) || _type === (go$ptrType(ast.SendStmt)) || _type === (go$ptrType(ast.IncDecStmt)) || _type === (go$ptrType(ast.AssignStmt)) || _type === (go$ptrType(ast.GoStmt)) || _type === (go$ptrType(ast.DeferStmt)) || _type === (go$ptrType(ast.ReturnStmt))) {
			s$1 = _ref;
		} else if (_type === (go$ptrType(ast.LabeledStmt))) {
			s$1 = _ref.go$val;
			return hasBreak(s$1.Stmt, label, implicit);
		} else if (_type === (go$ptrType(ast.BranchStmt))) {
			s$1 = _ref.go$val;
			if (s$1.Tok === 61) {
				if (s$1.Label === (go$ptrType(ast.Ident)).nil) {
					return implicit;
				}
				if (s$1.Label.Name === label) {
					return true;
				}
			}
		} else if (_type === (go$ptrType(ast.BlockStmt))) {
			s$1 = _ref.go$val;
			return hasBreakList(s$1.List, label, implicit);
		} else if (_type === (go$ptrType(ast.IfStmt))) {
			s$1 = _ref.go$val;
			if (hasBreak(s$1.Body, label, implicit) || !(go$interfaceIsEqual(s$1.Else, null)) && hasBreak(s$1.Else, label, implicit)) {
				return true;
			}
		} else if (_type === (go$ptrType(ast.CaseClause))) {
			s$1 = _ref.go$val;
			return hasBreakList(s$1.Body, label, implicit);
		} else if (_type === (go$ptrType(ast.SwitchStmt))) {
			s$1 = _ref.go$val;
			if (!(label === "") && hasBreak(s$1.Body, label, false)) {
				return true;
			}
		} else if (_type === (go$ptrType(ast.TypeSwitchStmt))) {
			s$1 = _ref.go$val;
			if (!(label === "") && hasBreak(s$1.Body, label, false)) {
				return true;
			}
		} else if (_type === (go$ptrType(ast.CommClause))) {
			s$1 = _ref.go$val;
			return hasBreakList(s$1.Body, label, implicit);
		} else if (_type === (go$ptrType(ast.SelectStmt))) {
			s$1 = _ref.go$val;
			if (!(label === "") && hasBreak(s$1.Body, label, false)) {
				return true;
			}
		} else if (_type === (go$ptrType(ast.ForStmt))) {
			s$1 = _ref.go$val;
			if (!(label === "") && hasBreak(s$1.Body, label, false)) {
				return true;
			}
		} else if (_type === (go$ptrType(ast.RangeStmt))) {
			s$1 = _ref.go$val;
			if (!(label === "") && hasBreak(s$1.Body, label, false)) {
				return true;
			}
		} else {
			s$1 = _ref;
			unreachable();
		}
		return false;
	};
	hasBreakList = function(list, label, implicit) {
		var _ref, _i, _slice, _index, s;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (hasBreak(s, label, implicit)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	NewScope = go$pkg.NewScope = function(parent) {
		var s;
		s = new Scope.Ptr(parent, (go$sliceType((go$ptrType(Scope)))).nil, false);
		if (!(parent === (go$ptrType(Scope)).nil) && !(parent === go$pkg.Universe)) {
			parent.children = go$append(parent.children, s);
		}
		return s;
	};
	Scope.Ptr.prototype.Parent = function() {
		var s;
		s = this;
		return s.parent;
	};
	Scope.prototype.Parent = function() { return this.go$val.Parent(); };
	Scope.Ptr.prototype.Len = function() {
		var s;
		s = this;
		return go$keys(s.elems).length;
	};
	Scope.prototype.Len = function() { return this.go$val.Len(); };
	Scope.Ptr.prototype.Names = function() {
		var s, names, i, _ref, _i, _keys, _entry, name, _slice, _index;
		s = this;
		names = (go$sliceType(Go$String)).make(go$keys(s.elems).length, 0, function() { return ""; });
		i = 0;
		_ref = s.elems;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			name = _entry.k;
			_slice = names, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = name) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
			_i++;
		}
		sort.Strings(names);
		return names;
	};
	Scope.prototype.Names = function() { return this.go$val.Names(); };
	Scope.Ptr.prototype.NumChildren = function() {
		var s;
		s = this;
		return s.children.length;
	};
	Scope.prototype.NumChildren = function() { return this.go$val.NumChildren(); };
	Scope.Ptr.prototype.Child = function(i) {
		var s, _slice, _index;
		s = this;
		return (_slice = s.children, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
	};
	Scope.prototype.Child = function(i) { return this.go$val.Child(i); };
	Scope.Ptr.prototype.Lookup = function(name) {
		var s, _entry;
		s = this;
		return (_entry = s.elems[name], _entry !== undefined ? _entry.v : null);
	};
	Scope.prototype.Lookup = function(name) { return this.go$val.Lookup(name); };
	Scope.Ptr.prototype.LookupParent = function(name) {
		var s, obj, _entry;
		s = this;
		while (!(s === (go$ptrType(Scope)).nil)) {
			if (obj = (_entry = s.elems[name], _entry !== undefined ? _entry.v : null), !(go$interfaceIsEqual(obj, null))) {
				return obj;
			}
			s = s.parent;
		}
		return null;
	};
	Scope.prototype.LookupParent = function(name) { return this.go$val.LookupParent(name); };
	Scope.Ptr.prototype.Insert = function(obj) {
		var s, name, alt, _entry, _key;
		s = this;
		name = obj.Name();
		if (name === "_") {
			obj.setParent(s);
			return null;
		}
		if (alt = (_entry = s.elems[name], _entry !== undefined ? _entry.v : null), !(go$interfaceIsEqual(alt, null))) {
			return alt;
		}
		if (s.elems === false) {
			s.elems = new Go$Map();
		}
		_key = name, (s.elems || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: obj };
		obj.setParent(s);
		return null;
	};
	Scope.prototype.Insert = function(obj) { return this.go$val.Insert(obj); };
	Scope.Ptr.prototype.WriteTo = function(w, n, recurse) {
		var s, indn, indn1, _ref, _i, _slice, _index, name, _entry, _ref$1, _i$1, _slice$1, _index$1, s$1;
		s = this;
		indn = strings.Repeat(".  ", n);
		if (go$keys(s.elems).length === 0) {
			fmt.Fprintf(w, "%sscope %p {}\n", new (go$sliceType(go$emptyInterface))([new Go$String(indn), s]));
			return;
		}
		fmt.Fprintf(w, "%sscope %p {\n", new (go$sliceType(go$emptyInterface))([new Go$String(indn), s]));
		indn1 = indn + ".  ";
		_ref = s.Names();
		_i = 0;
		while (_i < _ref.length) {
			name = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			fmt.Fprintf(w, "%s%s\n", new (go$sliceType(go$emptyInterface))([new Go$String(indn1), (_entry = s.elems[name], _entry !== undefined ? _entry.v : null)]));
			_i++;
		}
		if (recurse) {
			_ref$1 = s.children;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				s$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				fmt.Fprintln(w, new (go$sliceType(go$emptyInterface))([]));
				s$1.WriteTo(w, n + 1 >> 0, recurse);
				_i$1++;
			}
		}
		fmt.Fprintf(w, "%s}", new (go$sliceType(go$emptyInterface))([new Go$String(indn)]));
	};
	Scope.prototype.WriteTo = function(w, n, recurse) { return this.go$val.WriteTo(w, n, recurse); };
	Scope.Ptr.prototype.String = function() {
		var s, buf;
		s = this;
		buf = new bytes.Buffer.Ptr();
		s.WriteTo(buf, 0, false);
		return buf.String();
	};
	Scope.prototype.String = function() { return this.go$val.String(); };
	Selection.Ptr.prototype.Kind = function() {
		var s;
		s = this;
		return s.kind;
	};
	Selection.prototype.Kind = function() { return this.go$val.Kind(); };
	Selection.Ptr.prototype.Recv = function() {
		var s;
		s = this;
		return s.recv;
	};
	Selection.prototype.Recv = function() { return this.go$val.Recv(); };
	Selection.Ptr.prototype.Obj = function() {
		var s;
		s = this;
		return s.obj;
	};
	Selection.prototype.Obj = function() { return this.go$val.Obj(); };
	Selection.Ptr.prototype.Type = function() {
		var s, _ref, x, x$1, _struct, sig, _struct$1, _struct$2, recv, x$2, x$3, _struct$3, sig$1, _struct$4, _struct$5, arg0, params;
		s = this;
		_ref = s.kind;
		if (_ref === 1) {
			sig = (_struct = (x = (x$1 = s.obj, (x$1 !== null && x$1.constructor === (go$ptrType(Func)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(Func))))).object.typ, (x !== null && x.constructor === (go$ptrType(Signature)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Signature))))), new Signature.Ptr(_struct.scope, _struct.recv, _struct.params, _struct.results, _struct.variadic));
			recv = (_struct$1 = sig.recv, new Var.Ptr((_struct$2 = _struct$1.object, new object.Ptr(_struct$2.parent, _struct$2.pos, _struct$2.pkg, _struct$2.name, _struct$2.typ, _struct$2.used)), _struct$1.anonymous, _struct$1.visited, _struct$1.isField));
			recv.object.typ = s.recv;
			sig.recv = recv;
			return sig;
		} else if (_ref === 2) {
			sig$1 = (_struct$3 = (x$2 = (x$3 = s.obj, (x$3 !== null && x$3.constructor === (go$ptrType(Func)) ? x$3.go$val : go$typeAssertionFailed(x$3, (go$ptrType(Func))))).object.typ, (x$2 !== null && x$2.constructor === (go$ptrType(Signature)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(Signature))))), new Signature.Ptr(_struct$3.scope, _struct$3.recv, _struct$3.params, _struct$3.results, _struct$3.variadic));
			arg0 = (_struct$4 = sig$1.recv, new Var.Ptr((_struct$5 = _struct$4.object, new object.Ptr(_struct$5.parent, _struct$5.pos, _struct$5.pkg, _struct$5.name, _struct$5.typ, _struct$5.used)), _struct$4.anonymous, _struct$4.visited, _struct$4.isField));
			arg0.object.typ = s.recv;
			params = (go$sliceType((go$ptrType(Var)))).nil;
			if (!(sig$1.params === (go$ptrType(Tuple)).nil)) {
				params = sig$1.params.vars;
			}
			sig$1.params = NewTuple(go$appendSlice(new (go$sliceType((go$ptrType(Var))))([arg0]), params));
			return sig$1;
		}
		return s.obj.Type();
	};
	Selection.prototype.Type = function() { return this.go$val.Type(); };
	Selection.Ptr.prototype.Index = function() {
		var s;
		s = this;
		return s.index;
	};
	Selection.prototype.Index = function() { return this.go$val.Index(); };
	Selection.Ptr.prototype.Indirect = function() {
		var s;
		s = this;
		return s.indirect;
	};
	Selection.prototype.Indirect = function() { return this.go$val.Indirect(); };
	Selection.Ptr.prototype.String = function() {
		var s;
		s = this;
		return SelectionString((go$ptrType(Package)).nil, s);
	};
	Selection.prototype.String = function() { return this.go$val.String(); };
	SelectionString = go$pkg.SelectionString = function(this$1, s) {
		var k, _ref, buf, x;
		k = "";
		_ref = s.kind;
		if (_ref === 0) {
			k = "field ";
		} else if (_ref === 1) {
			k = "method ";
		} else if (_ref === 2) {
			k = "method expr ";
		} else if (_ref === 3) {
			return fmt.Sprintf("qualified ident %s", new (go$sliceType(go$emptyInterface))([s.obj]));
		} else {
			unreachable();
		}
		buf = new bytes.Buffer.Ptr();
		buf.WriteString(k);
		buf.WriteByte(40);
		WriteType(buf, this$1, s.Recv());
		fmt.Fprintf(buf, ") %s", new (go$sliceType(go$emptyInterface))([new Go$String(s.obj.Name())]));
		WriteSignature(buf, this$1, (x = s.Type(), (x !== null && x.constructor === (go$ptrType(Signature)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Signature))))));
		return buf.String();
	};
	StdSizes.Ptr.prototype.Alignof = function(T) {
		var s, t, _ref, _type, max, _ref$1, _i, _slice, _index, f, a, a$1, x;
		s = this;
		_ref = T.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(Array))) {
			t = _ref.go$val;
			return s.Alignof(t.elem);
		} else if (_type === (go$ptrType(Struct))) {
			t = _ref.go$val;
			max = new Go$Int64(0, 1);
			_ref$1 = t.fields;
			_i = 0;
			while (_i < _ref$1.length) {
				f = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (a = s.Alignof(f.object.typ), (a.high > max.high || (a.high === max.high && a.low > max.low))) {
					max = a;
				}
				_i++;
			}
			return max;
		}
		a$1 = s.Sizeof(T);
		if ((a$1.high < 0 || (a$1.high === 0 && a$1.low < 1))) {
			return new Go$Int64(0, 1);
		}
		if ((x = s.MaxAlign, (a$1.high > x.high || (a$1.high === x.high && a$1.low > x.low)))) {
			return s.MaxAlign;
		}
		return a$1;
	};
	StdSizes.prototype.Alignof = function(T) { return this.go$val.Alignof(T); };
	StdSizes.Ptr.prototype.Offsetsof = function(fields) {
		var s, offsets, o, _ref, _i, _slice, _index, f, i, a, _slice$1, _index$1, x;
		s = this;
		offsets = (go$sliceType(Go$Int64)).make(fields.length, 0, function() { return new Go$Int64(0, 0); });
		o = new Go$Int64(0, 0);
		_ref = fields;
		_i = 0;
		while (_i < _ref.length) {
			f = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			a = s.Alignof(f.object.typ);
			o = align(o, a);
			_slice$1 = offsets, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = o) : go$throwRuntimeError("index out of range");
			o = (x = s.Sizeof(f.object.typ), new Go$Int64(o.high + x.high, o.low + x.low));
			_i++;
		}
		return offsets;
	};
	StdSizes.prototype.Offsetsof = function(fields) { return this.go$val.Offsetsof(fields); };
	StdSizes.Ptr.prototype.Sizeof = function(T) {
		var s, t, _ref, _type, k, s$1, a, z, n, offsets, x, _slice, _index, x$1, _slice$1, _index$1;
		s = this;
		_ref = T.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(Basic))) {
			t = _ref.go$val;
			assert(isTyped(T));
			k = t.kind;
			if ((k >> 0) < 17) {
				if (s$1 = basicSizes[k], s$1 > 0) {
					return new Go$Int64(0, s$1);
				}
			}
			if (k === 17) {
				return go$mul64(s.WordSize, new Go$Int64(0, 2));
			}
		} else if (_type === (go$ptrType(Array))) {
			t = _ref.go$val;
			a = s.Alignof(t.elem);
			z = s.Sizeof(t.elem);
			return go$mul64(align(z, a), t.len);
		} else if (_type === (go$ptrType(Slice))) {
			t = _ref.go$val;
			return go$mul64(s.WordSize, new Go$Int64(0, 3));
		} else if (_type === (go$ptrType(Struct))) {
			t = _ref.go$val;
			n = t.NumFields();
			if (n === 0) {
				return new Go$Int64(0, 0);
			}
			offsets = t.offsets;
			if (t.offsets === (go$sliceType(Go$Int64)).nil) {
				offsets = s.Offsetsof(t.fields);
				t.offsets = offsets;
			}
			return (x = (_slice = offsets, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), x$1 = s.Sizeof((_slice$1 = t.fields, _index$1 = (n - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).object.typ), new Go$Int64(x.high + x$1.high, x.low + x$1.low));
		} else if (_type === (go$ptrType(Interface))) {
			t = _ref.go$val;
			return go$mul64(s.WordSize, new Go$Int64(0, 2));
		}
		return s.WordSize;
	};
	StdSizes.prototype.Sizeof = function(T) { return this.go$val.Sizeof(T); };
	Config.Ptr.prototype.alignof = function(T) {
		var conf, s, a;
		conf = this;
		if (s = conf.Sizes, !(go$interfaceIsEqual(s, null))) {
			if (a = s.Alignof(T), (a.high > 0 || (a.high === 0 && a.low >= 1))) {
				return a;
			}
			throw go$panic(new Go$String("Config.Sizes.Alignof returned an alignment < 1"));
		}
		return stdSizes.Alignof(T);
	};
	Config.prototype.alignof = function(T) { return this.go$val.alignof(T); };
	Config.Ptr.prototype.offsetsof = function(T) {
		var conf, offsets, s, _ref, _i, _slice, _index, o;
		conf = this;
		offsets = T.offsets;
		if (offsets === (go$sliceType(Go$Int64)).nil && T.NumFields() > 0) {
			if (s = conf.Sizes, !(go$interfaceIsEqual(s, null))) {
				offsets = s.Offsetsof(T.fields);
				if (!((offsets.length === T.NumFields()))) {
					throw go$panic(new Go$String("Config.Sizes.Offsetsof returned the wrong number of offsets"));
				}
				_ref = offsets;
				_i = 0;
				while (_i < _ref.length) {
					o = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					if ((o.high < 0 || (o.high === 0 && o.low < 0))) {
						throw go$panic(new Go$String("Config.Sizes.Offsetsof returned an offset < 0"));
					}
					_i++;
				}
			} else {
				offsets = stdSizes.Offsetsof(T.fields);
			}
			T.offsets = offsets;
		}
		return offsets;
	};
	Config.prototype.offsetsof = function(T) { return this.go$val.offsetsof(T); };
	Config.Ptr.prototype.offsetof = function(typ, index) {
		var conf, o, _ref, _i, _slice, _index, i, x, s, x$1, _slice$1, _index$1, _slice$2, _index$2;
		conf = this;
		o = new Go$Int64(0, 0);
		_ref = index;
		_i = 0;
		while (_i < _ref.length) {
			i = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			s = (x = typ.Underlying(), (x !== null && x.constructor === (go$ptrType(Struct)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Struct)))));
			o = (x$1 = (_slice$1 = conf.offsetsof(s), _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new Go$Int64(o.high + x$1.high, o.low + x$1.low));
			typ = (_slice$2 = s.fields, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).object.typ;
			_i++;
		}
		return o;
	};
	Config.prototype.offsetof = function(typ, index) { return this.go$val.offsetof(typ, index); };
	Config.Ptr.prototype.sizeof = function(T) {
		var conf, s, z;
		conf = this;
		if (s = conf.Sizes, !(go$interfaceIsEqual(s, null))) {
			if (z = s.Sizeof(T), (z.high > 0 || (z.high === 0 && z.low >= 0))) {
				return z;
			}
			throw go$panic(new Go$String("Config.Sizes.Sizeof returned a size < 0"));
		}
		return stdSizes.Sizeof(T);
	};
	Config.prototype.sizeof = function(T) { return this.go$val.sizeof(T); };
	align = function(x, a) {
		var x$1, y, x$2;
		y = (x$1 = new Go$Int64(x.high + a.high, x.low + a.low), new Go$Int64(x$1.high - 0, x$1.low - 1));
		return (x$2 = go$div64(y, a, true), new Go$Int64(y.high - x$2.high, y.low - x$2.low));
	};
	checker.Ptr.prototype.funcBody = function(decl, name, sig, body) {
		var check, _struct;
		var go$deferred = [];
		try {
			check = this;
			go$deferred.push({ fun: (function(ctxt, indent) {
				var _struct$1;
				check.context = (_struct$1 = ctxt, new context.Ptr(_struct$1.decl, _struct$1.scope, _struct$1.iota, _struct$1.sig, _struct$1.hasLabel, _struct$1.hasCallOrRecv));
				check.indent = indent;
			}), args: [(_struct = check.context, new context.Ptr(_struct.decl, _struct.scope, _struct.iota, _struct.sig, _struct.hasLabel, _struct.hasCallOrRecv)), check.indent] });
			check.context = new context.Ptr(decl, sig.scope, null, sig, false, false);
			check.indent = 0;
			check.stmtList(0, body.List);
			if (check.context.hasLabel) {
				check.labels(body);
			}
			if (sig.results.Len() > 0 && !check.isTerminating(body, "")) {
				check.errorf(body.Rbrace, "missing return", new (go$sliceType(go$emptyInterface))([]));
			}
			check.usage(sig.scope);
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	checker.prototype.funcBody = function(decl, name, sig, body) { return this.go$val.funcBody(decl, name, sig, body); };
	checker.Ptr.prototype.usage = function(scope) {
		var check, _ref, _i, _keys, _entry, obj, v, _tuple, _ref$1, _i$1, _slice, _index, scope$1;
		check = this;
		_ref = scope.elems;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			obj = _entry.v;
			if (_tuple = (obj !== null && obj.constructor === (go$ptrType(Var)) ? [obj.go$val, true] : [(go$ptrType(Var)).nil, false]), v = _tuple[0], !(v === (go$ptrType(Var)).nil) && !v.object.used) {
				check.errorf(v.object.pos, "%s declared but not used", new (go$sliceType(go$emptyInterface))([new Go$String(v.object.name)]));
			}
			_i++;
		}
		_ref$1 = scope.children;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			scope$1 = (_slice = _ref$1, _index = _i$1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			check.usage(scope$1);
			_i$1++;
		}
	};
	checker.prototype.usage = function(scope) { return this.go$val.usage(scope); };
	checker.Ptr.prototype.initStmt = function(s) {
		var check;
		check = this;
		if (!(go$interfaceIsEqual(s, null))) {
			check.stmt(0, s);
		}
	};
	checker.prototype.initStmt = function(s) { return this.go$val.initStmt(s); };
	checker.Ptr.prototype.stmtList = function(ctxt, list) {
		var check, ok, inner, _ref, _i, _slice, _index, s, i, inner$1;
		check = this;
		ok = !((((ctxt & 1) >>> 0) === 0));
		inner = ctxt & ~1;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			inner$1 = inner;
			if (ok && ((i + 1 >> 0) === list.length)) {
				inner$1 = (inner$1 | 1) >>> 0;
			}
			check.stmt(inner$1, s);
			_i++;
		}
	};
	checker.prototype.stmtList = function(ctxt, list) { return this.go$val.stmtList(ctxt, list); };
	checker.Ptr.prototype.multipleDefaults = function(list) {
		var check, first, _ref, _i, _slice, _index, s, d, c, _ref$1, _type;
		check = this;
		first = null;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			d = null;
			_ref$1 = s;
			_type = _ref$1 !== null ? _ref$1.constructor : null;
			if (_type === (go$ptrType(ast.CaseClause))) {
				c = _ref$1.go$val;
				if (c.List.length === 0) {
					d = s;
				}
			} else if (_type === (go$ptrType(ast.CommClause))) {
				c = _ref$1.go$val;
				if (go$interfaceIsEqual(c.Comm, null)) {
					d = s;
				}
			} else {
				c = _ref$1;
				check.invalidAST(s.Pos(), "case/communication clause expected", new (go$sliceType(go$emptyInterface))([]));
			}
			if (!(go$interfaceIsEqual(d, null))) {
				if (!(go$interfaceIsEqual(first, null))) {
					check.errorf(d.Pos(), "multiple defaults (first at %s)", new (go$sliceType(go$emptyInterface))([new token.Pos(first.Pos())]));
				} else {
					first = d;
				}
			}
			_i++;
		}
	};
	checker.prototype.multipleDefaults = function(list) { return this.go$val.multipleDefaults(list); };
	checker.Ptr.prototype.openScope = function(s) {
		var check, scope;
		check = this;
		scope = NewScope(check.context.scope);
		check.recordScope(s, scope);
		check.context.scope = scope;
	};
	checker.prototype.openScope = function(s) { return this.go$val.openScope(s); };
	checker.Ptr.prototype.closeScope = function() {
		var check;
		check = this;
		check.context.scope = check.context.scope.Parent();
	};
	checker.prototype.closeScope = function() { return this.go$val.closeScope(); };
	assignOp = function(op) {
		if (23 <= op && op <= 33) {
			return op + -11 >> 0;
		}
		return 0;
	};
	checker.Ptr.prototype.suspendedCall = function(keyword, call) {
		var check, x, msg, _ref;
		check = this;
		x = new operand.Ptr();
		msg = "";
		_ref = check.rawExpr(x, call, null);
		if (_ref === 0) {
			msg = "requires function call, not conversion";
		} else if (_ref === 1) {
			msg = "discards result of";
		} else if (_ref === 2) {
			return;
		} else {
			unreachable();
		}
		check.errorf(x.pos(), "%s %s %s", new (go$sliceType(go$emptyInterface))([new Go$String(keyword), new Go$String(msg), x]));
	};
	checker.prototype.suspendedCall = function(keyword, call) { return this.go$val.suspendedCall(keyword, call); };
	checker.Ptr.prototype.caseValues = function(x, values) {
		var check, _ref, _i, _slice, _index, e, y;
		check = this;
		_ref = values;
		_i = 0;
		while (_i < _ref.length) {
			e = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			y = new operand.Ptr();
			check.expr(y, e);
			if (y.mode === 0) {
				return;
			}
			check.convertUntyped(y, x.typ);
			if (y.mode === 0) {
				return;
			}
			check.convertUntyped(x, y.typ);
			if (x.mode === 0) {
				return;
			}
			check.comparison(y, x, 39);
			_i++;
		}
	};
	checker.prototype.caseValues = function(x, values) { return this.go$val.caseValues(x, values); };
	checker.Ptr.prototype.caseTypes = function(x, xtyp, types, seen) {
		var T, check, _ref, _i, _slice, _index, e, _ref$1, _i$1, _keys, _entry, pos, t, _key;
		T = null;
		check = this;
		_ref = types;
		_i = 0;
		L:
		while (_i < _ref.length) {
			e = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			T = check.typOrNil(e);
			if (go$interfaceIsEqual(T, go$pkg.Typ[0])) {
				_i++;
				continue;
			}
			_ref$1 = seen;
			_i$1 = 0;
			_keys = go$keys(_ref$1);
			while (_i$1 < _keys.length) {
				_entry = _ref$1[_keys[_i$1]];
				pos = _entry.v;
				t = _entry.k;
				if (go$interfaceIsEqual(T, null) && go$interfaceIsEqual(t, null) || !(go$interfaceIsEqual(T, null)) && !(go$interfaceIsEqual(t, null)) && Identical(T, t)) {
					check.errorf(e.Pos(), "duplicate case in type switch", new (go$sliceType(go$emptyInterface))([]));
					check.errorf(pos, "previous case %s", new (go$sliceType(go$emptyInterface))([T]));
					_i++;
					continue L;
				}
				_i$1++;
			}
			_key = T, (seen || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: e.Pos() };
			if (!(go$interfaceIsEqual(T, null))) {
				check.typeAssertion(e.Pos(), x, xtyp, T);
			}
			_i++;
		}
		return T;
	};
	checker.prototype.caseTypes = function(x, xtyp, types, seen) { return this.go$val.caseTypes(x, xtyp, types, seen); };
	checker.Ptr.prototype.stmt = function(ctxt, s) {
		var check, inner, s$1, _ref, _type, x, kind, msg, _ref$1, _tuple, ch, x$1, ok, tch, _tuple$1, x$2, op, _ref$2, x$3, Y, _ref$3, op$1, x$4, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, sig, n, named, lhs, _ref$4, _i, _slice$3, _index$3, res, i, _slice$4, _index$4, _ref$5, x$5, x$6, _ref$6, _i$1, _slice$5, _index$5, c, i$1, _tuple$2, clause, _struct, inner$1, lhs$1, rhs, guard, _ref$7, _type$1, _tuple$3, x$7, _slice$6, _index$6, _slice$7, _index$7, _tuple$4, expr, x$8, _tuple$5, x$9, xtyp, lhsVars, seen, _ref$8, _i$2, _slice$8, _index$8, s$2, _tuple$6, clause$1, T, obj, used, _ref$9, _i$3, _slice$9, _index$9, v, _ref$10, _i$4, _slice$10, _index$10, s$3, _tuple$7, clause$2, valid, rhs$1, s$4, _ref$11, _type$2, _slice$11, _index$11, x$10, _tuple$8, x$11, x$12, decl, x$13, _tuple$9, key, val, typ, _ref$12, _type$3, typ$1, _tuple$10, x$14, lhs$2, rhs$2, vars, _ref$13, _i$5, lhs$3, i$2, obj$1, ident, _tuple$11, name, _ref$14, _i$6, _slice$12, _index$12, obj$2, _ref$15, _i$7, lhs$4, i$3;
		var go$deferred = [];
		try {
			check = this;
			assert(go$interfaceIsEqual(check.context.iota, null));
			inner = ctxt & ~1;
			_ref = s;
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === (go$ptrType(ast.BadStmt)) || _type === (go$ptrType(ast.EmptyStmt))) {
				s$1 = _ref;
			} else if (_type === (go$ptrType(ast.DeclStmt))) {
				s$1 = _ref.go$val;
				check.declStmt(s$1.Decl);
			} else if (_type === (go$ptrType(ast.LabeledStmt))) {
				s$1 = _ref.go$val;
				check.context.hasLabel = true;
				check.stmt(ctxt, s$1.Stmt);
			} else if (_type === (go$ptrType(ast.ExprStmt))) {
				s$1 = _ref.go$val;
				x = new operand.Ptr();
				kind = check.rawExpr(x, s$1.X, null);
				msg = "";
				_ref$1 = x.mode;
				if (_ref$1 === 2) {
					msg = "must be called";
				} else if (_ref$1 === 3) {
					msg = "is not an expression";
				} else {
					if (kind === 2) {
						return;
					}
					msg = "is not used";
				}
				check.errorf(x.pos(), "%s %s", new (go$sliceType(go$emptyInterface))([x, new Go$String(msg)]));
			} else if (_type === (go$ptrType(ast.SendStmt))) {
				s$1 = _ref.go$val;
				_tuple = [new operand.Ptr(), new operand.Ptr()], ch = _tuple[0], x$1 = _tuple[1];
				check.expr(ch, s$1.Chan);
				check.expr(x$1, s$1.Value);
				if ((ch.mode === 0) || (x$1.mode === 0)) {
					return;
				}
				if (_tuple$1 = (x$2 = ch.typ.Underlying(), (x$2 !== null && x$2.constructor === (go$ptrType(Chan)) ? [x$2.go$val, true] : [(go$ptrType(Chan)).nil, false])), tch = _tuple$1[0], ok = _tuple$1[1], !ok || (tch.dir === 2) || !check.assignment(x$1, tch.elem)) {
					if (!((x$1.mode === 0))) {
						check.invalidOp(ch.pos(), "cannot send %s to channel %s", new (go$sliceType(go$emptyInterface))([x$1, ch]));
					}
				}
			} else if (_type === (go$ptrType(ast.IncDecStmt))) {
				s$1 = _ref.go$val;
				op = 0;
				_ref$2 = s$1.Tok;
				if (_ref$2 === 37) {
					op = 12;
				} else if (_ref$2 === 38) {
					op = 13;
				} else {
					check.invalidAST(s$1.TokPos, "unknown inc/dec operation %s", new (go$sliceType(go$emptyInterface))([new token.Token(s$1.Tok)]));
					return;
				}
				x$3 = new operand.Ptr();
				Y = new ast.BasicLit.Ptr(s$1.X.Pos(), 5, "1");
				check.binary(x$3, s$1.X, Y, op);
				if (x$3.mode === 0) {
					return;
				}
				check.assignVar(s$1.X, x$3);
			} else if (_type === (go$ptrType(ast.AssignStmt))) {
				s$1 = _ref.go$val;
				_ref$3 = s$1.Tok;
				if (_ref$3 === 42 || _ref$3 === 47) {
					if (s$1.Lhs.length === 0) {
						check.invalidAST(s$1.Pos(), "missing lhs in assignment", new (go$sliceType(go$emptyInterface))([]));
						return;
					}
					if (s$1.Tok === 47) {
						check.shortVarDecl(s$1.TokPos, s$1.Lhs, s$1.Rhs);
					} else {
						check.assignVars(s$1.Lhs, s$1.Rhs);
					}
				} else {
					if (!((s$1.Lhs.length === 1)) || !((s$1.Rhs.length === 1))) {
						check.errorf(s$1.TokPos, "assignment operation %s requires single-valued expressions", new (go$sliceType(go$emptyInterface))([new token.Token(s$1.Tok)]));
						return;
					}
					op$1 = assignOp(s$1.Tok);
					if (op$1 === 0) {
						check.invalidAST(s$1.TokPos, "unknown assignment operation %s", new (go$sliceType(go$emptyInterface))([new token.Token(s$1.Tok)]));
						return;
					}
					x$4 = new operand.Ptr();
					check.binary(x$4, (_slice = s$1.Lhs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = s$1.Rhs, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), op$1);
					if (x$4.mode === 0) {
						return;
					}
					check.assignVar((_slice$2 = s$1.Lhs, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), x$4);
				}
			} else if (_type === (go$ptrType(ast.GoStmt))) {
				s$1 = _ref.go$val;
				check.suspendedCall("go", s$1.Call);
			} else if (_type === (go$ptrType(ast.DeferStmt))) {
				s$1 = _ref.go$val;
				check.suspendedCall("defer", s$1.Call);
			} else if (_type === (go$ptrType(ast.ReturnStmt))) {
				s$1 = _ref.go$val;
				sig = check.context.sig;
				if (n = sig.results.Len(), n > 0) {
					named = false;
					lhs = (go$sliceType((go$ptrType(Var)))).make(n, 0, function() { return (go$ptrType(Var)).nil; });
					_ref$4 = sig.results.vars;
					_i = 0;
					while (_i < _ref$4.length) {
						res = (_slice$3 = _ref$4, _index$3 = _i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
						i = _i;
						if (!(res.object.name === "")) {
							named = true;
						}
						_slice$4 = lhs, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = res) : go$throwRuntimeError("index out of range");
						_i++;
					}
					if (s$1.Results.length > 0 || !named) {
						check.initVars(lhs, s$1.Results, s$1.Return);
						return;
					}
				} else if (s$1.Results.length > 0) {
					check.errorf(s$1.Pos(), "no result values expected", new (go$sliceType(go$emptyInterface))([]));
				}
			} else if (_type === (go$ptrType(ast.BranchStmt))) {
				s$1 = _ref.go$val;
				if (!(s$1.Label === (go$ptrType(ast.Ident)).nil)) {
					check.context.hasLabel = true;
					return;
				}
				_ref$5 = s$1.Tok;
				if (_ref$5 === 61) {
					if (((ctxt & 2) >>> 0) === 0) {
						check.errorf(s$1.Pos(), "break not in for, switch, or select statement", new (go$sliceType(go$emptyInterface))([]));
					}
				} else if (_ref$5 === 65) {
					if (((ctxt & 4) >>> 0) === 0) {
						check.errorf(s$1.Pos(), "continue not in for statement", new (go$sliceType(go$emptyInterface))([]));
					}
				} else if (_ref$5 === 69) {
					if (((ctxt & 1) >>> 0) === 0) {
						check.errorf(s$1.Pos(), "fallthrough statement out of place", new (go$sliceType(go$emptyInterface))([]));
					}
				} else {
					check.invalidAST(s$1.Pos(), "branch statement: %s", new (go$sliceType(go$emptyInterface))([new token.Token(s$1.Tok)]));
				}
			} else if (_type === (go$ptrType(ast.BlockStmt))) {
				s$1 = _ref.go$val;
				check.openScope(s$1);
				go$deferred.push({ recv: check, method: "closeScope", args: [] });
				check.stmtList(inner, s$1.List);
			} else if (_type === (go$ptrType(ast.IfStmt))) {
				s$1 = _ref.go$val;
				check.openScope(s$1);
				go$deferred.push({ recv: check, method: "closeScope", args: [] });
				check.initStmt(s$1.Init);
				x$5 = new operand.Ptr();
				check.expr(x$5, s$1.Cond);
				if (!((x$5.mode === 0)) && !isBoolean(x$5.typ)) {
					check.errorf(s$1.Cond.Pos(), "non-boolean condition in if statement", new (go$sliceType(go$emptyInterface))([]));
				}
				check.stmt(inner, s$1.Body);
				if (!(go$interfaceIsEqual(s$1.Else, null))) {
					check.stmt(inner, s$1.Else);
				}
			} else if (_type === (go$ptrType(ast.SwitchStmt))) {
				s$1 = _ref.go$val;
				inner = (inner | 2) >>> 0;
				check.openScope(s$1);
				go$deferred.push({ recv: check, method: "closeScope", args: [] });
				check.initStmt(s$1.Init);
				x$6 = new operand.Ptr();
				if (!(go$interfaceIsEqual(s$1.Tag, null))) {
					check.expr(x$6, s$1.Tag);
				} else {
					x$6.mode = 4;
					x$6.typ = go$pkg.Typ[1];
					x$6.val = exact.MakeBool(true);
					x$6.expr = new ast.Ident.Ptr(s$1.Body.Lbrace, "true", (go$ptrType(ast.Object)).nil);
				}
				check.multipleDefaults(s$1.Body.List);
				_ref$6 = s$1.Body.List;
				_i$1 = 0;
				while (_i$1 < _ref$6.length) {
					c = (_slice$5 = _ref$6, _index$5 = _i$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
					i$1 = _i$1;
					_tuple$2 = (c !== null && c.constructor === (go$ptrType(ast.CaseClause)) ? [c.go$val, true] : [(go$ptrType(ast.CaseClause)).nil, false]), clause = _tuple$2[0];
					if (clause === (go$ptrType(ast.CaseClause)).nil) {
						check.invalidAST(c.Pos(), "incorrect expression switch case", new (go$sliceType(go$emptyInterface))([]));
						_i$1++;
						continue;
					}
					if (!((x$6.mode === 0))) {
						check.caseValues((_struct = x$6, new operand.Ptr(_struct.mode, _struct.expr, _struct.typ, _struct.val, _struct.id)), clause.List);
					}
					check.openScope(clause);
					inner$1 = inner;
					if ((i$1 + 1 >> 0) < s$1.Body.List.length) {
						inner$1 = (inner$1 | 1) >>> 0;
					}
					check.stmtList(inner$1, clause.Body);
					check.closeScope();
					_i$1++;
				}
			} else if (_type === (go$ptrType(ast.TypeSwitchStmt))) {
				s$1 = _ref.go$val;
				inner = (inner | 2) >>> 0;
				check.openScope(s$1);
				go$deferred.push({ recv: check, method: "closeScope", args: [] });
				check.initStmt(s$1.Init);
				lhs$1 = (go$ptrType(ast.Ident)).nil;
				rhs = null;
				_ref$7 = s$1.Assign;
				_type$1 = _ref$7 !== null ? _ref$7.constructor : null;
				if (_type$1 === (go$ptrType(ast.ExprStmt))) {
					guard = _ref$7.go$val;
					rhs = guard.X;
				} else if (_type$1 === (go$ptrType(ast.AssignStmt))) {
					guard = _ref$7.go$val;
					if (!((guard.Lhs.length === 1)) || !((guard.Tok === 47)) || !((guard.Rhs.length === 1))) {
						check.invalidAST(s$1.Pos(), "incorrect form of type switch guard", new (go$sliceType(go$emptyInterface))([]));
						return;
					}
					_tuple$3 = (x$7 = (_slice$6 = guard.Lhs, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")), (x$7 !== null && x$7.constructor === (go$ptrType(ast.Ident)) ? [x$7.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), lhs$1 = _tuple$3[0];
					if (lhs$1 === (go$ptrType(ast.Ident)).nil) {
						check.invalidAST(s$1.Pos(), "incorrect form of type switch guard", new (go$sliceType(go$emptyInterface))([]));
						return;
					}
					check.recordDef(lhs$1, null);
					rhs = (_slice$7 = guard.Rhs, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"));
				} else {
					guard = _ref$7;
					check.invalidAST(s$1.Pos(), "incorrect form of type switch guard", new (go$sliceType(go$emptyInterface))([]));
					return;
				}
				_tuple$4 = (rhs !== null && rhs.constructor === (go$ptrType(ast.TypeAssertExpr)) ? [rhs.go$val, true] : [(go$ptrType(ast.TypeAssertExpr)).nil, false]), expr = _tuple$4[0];
				if (expr === (go$ptrType(ast.TypeAssertExpr)).nil || !(go$interfaceIsEqual(expr.Type, null))) {
					check.invalidAST(s$1.Pos(), "incorrect form of type switch guard", new (go$sliceType(go$emptyInterface))([]));
					return;
				}
				x$8 = new operand.Ptr();
				check.expr(x$8, expr.X);
				if (x$8.mode === 0) {
					return;
				}
				_tuple$5 = (x$9 = x$8.typ.Underlying(), (x$9 !== null && x$9.constructor === (go$ptrType(Interface)) ? [x$9.go$val, true] : [(go$ptrType(Interface)).nil, false])), xtyp = _tuple$5[0];
				if (xtyp === (go$ptrType(Interface)).nil) {
					check.errorf(x$8.pos(), "%s is not an interface", new (go$sliceType(go$emptyInterface))([x$8]));
					return;
				}
				check.multipleDefaults(s$1.Body.List);
				lhsVars = (go$sliceType((go$ptrType(Var)))).nil;
				seen = new Go$Map();
				_ref$8 = s$1.Body.List;
				_i$2 = 0;
				while (_i$2 < _ref$8.length) {
					s$2 = (_slice$8 = _ref$8, _index$8 = _i$2, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
					_tuple$6 = (s$2 !== null && s$2.constructor === (go$ptrType(ast.CaseClause)) ? [s$2.go$val, true] : [(go$ptrType(ast.CaseClause)).nil, false]), clause$1 = _tuple$6[0];
					if (clause$1 === (go$ptrType(ast.CaseClause)).nil) {
						check.invalidAST(s$2.Pos(), "incorrect type switch case", new (go$sliceType(go$emptyInterface))([]));
						_i$2++;
						continue;
					}
					T = check.caseTypes(x$8, xtyp, clause$1.List, seen);
					check.openScope(clause$1);
					if (!(lhs$1 === (go$ptrType(ast.Ident)).nil)) {
						if (!((clause$1.List.length === 1)) || go$interfaceIsEqual(T, null)) {
							T = x$8.typ;
						}
						obj = NewVar(lhs$1.Pos(), check.pkg, lhs$1.Name, T);
						check.declare(check.context.scope, (go$ptrType(ast.Ident)).nil, obj);
						check.recordImplicit(clause$1, obj);
						lhsVars = go$append(lhsVars, obj);
					}
					check.stmtList(inner, clause$1.Body);
					check.closeScope();
					_i$2++;
				}
				if (!(lhs$1 === (go$ptrType(ast.Ident)).nil)) {
					used = false;
					_ref$9 = lhsVars;
					_i$3 = 0;
					while (_i$3 < _ref$9.length) {
						v = (_slice$9 = _ref$9, _index$9 = _i$3, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"));
						if (v.object.used) {
							used = true;
						}
						v.object.used = true;
						_i$3++;
					}
					if (!used) {
						check.errorf(lhs$1.Pos(), "%s declared but not used", new (go$sliceType(go$emptyInterface))([new Go$String(lhs$1.Name)]));
					}
				}
			} else if (_type === (go$ptrType(ast.SelectStmt))) {
				s$1 = _ref.go$val;
				inner = (inner | 2) >>> 0;
				check.multipleDefaults(s$1.Body.List);
				_ref$10 = s$1.Body.List;
				_i$4 = 0;
				while (_i$4 < _ref$10.length) {
					s$3 = (_slice$10 = _ref$10, _index$10 = _i$4, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"));
					_tuple$7 = (s$3 !== null && s$3.constructor === (go$ptrType(ast.CommClause)) ? [s$3.go$val, true] : [(go$ptrType(ast.CommClause)).nil, false]), clause$2 = _tuple$7[0];
					if (clause$2 === (go$ptrType(ast.CommClause)).nil) {
						_i$4++;
						continue;
					}
					valid = false;
					rhs$1 = null;
					_ref$11 = clause$2.Comm;
					_type$2 = _ref$11 !== null ? _ref$11.constructor : null;
					if (_type$2 === null || _type$2 === (go$ptrType(ast.SendStmt))) {
						s$4 = _ref$11;
						valid = true;
					} else if (_type$2 === (go$ptrType(ast.AssignStmt))) {
						s$4 = _ref$11.go$val;
						if (s$4.Rhs.length === 1) {
							rhs$1 = (_slice$11 = s$4.Rhs, _index$11 = 0, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range"));
						}
					} else if (_type$2 === (go$ptrType(ast.ExprStmt))) {
						s$4 = _ref$11.go$val;
						rhs$1 = s$4.X;
					}
					if (!(go$interfaceIsEqual(rhs$1, null))) {
						if (_tuple$8 = (x$11 = unparen(rhs$1), (x$11 !== null && x$11.constructor === (go$ptrType(ast.UnaryExpr)) ? [x$11.go$val, true] : [(go$ptrType(ast.UnaryExpr)).nil, false])), x$10 = _tuple$8[0], !(x$10 === (go$ptrType(ast.UnaryExpr)).nil) && (x$10.Op === 36)) {
							valid = true;
						}
					}
					if (!valid) {
						check.errorf(clause$2.Comm.Pos(), "select case must be send or receive (possibly with assignment)", new (go$sliceType(go$emptyInterface))([]));
						_i$4++;
						continue;
					}
					check.openScope(s$3);
					go$deferred.push({ recv: check, method: "closeScope", args: [] });
					if (!(go$interfaceIsEqual(clause$2.Comm, null))) {
						check.stmt(inner, clause$2.Comm);
					}
					check.stmtList(inner, clause$2.Body);
					_i$4++;
				}
			} else if (_type === (go$ptrType(ast.ForStmt))) {
				s$1 = _ref.go$val;
				inner = (inner | 6) >>> 0;
				check.openScope(s$1);
				go$deferred.push({ recv: check, method: "closeScope", args: [] });
				check.initStmt(s$1.Init);
				if (!(go$interfaceIsEqual(s$1.Cond, null))) {
					x$12 = new operand.Ptr();
					check.expr(x$12, s$1.Cond);
					if (!((x$12.mode === 0)) && !isBoolean(x$12.typ)) {
						check.errorf(s$1.Cond.Pos(), "non-boolean condition in for statement", new (go$sliceType(go$emptyInterface))([]));
					}
				}
				check.initStmt(s$1.Post);
				check.stmt(inner, s$1.Body);
			} else if (_type === (go$ptrType(ast.RangeStmt))) {
				s$1 = _ref.go$val;
				inner = (inner | 6) >>> 0;
				check.openScope(s$1);
				go$deferred.push({ recv: check, method: "closeScope", args: [] });
				decl = s$1.Tok === 47;
				x$13 = new operand.Ptr();
				check.expr(x$13, s$1.X);
				if (x$13.mode === 0) {
					if (!decl) {
						check.stmt(inner, s$1.Body);
					}
					return;
				}
				_tuple$9 = [null, null], key = _tuple$9[0], val = _tuple$9[1];
				_ref$12 = x$13.typ.Underlying();
				_type$3 = _ref$12 !== null ? _ref$12.constructor : null;
				if (_type$3 === (go$ptrType(Basic))) {
					typ = _ref$12.go$val;
					if (isString(typ)) {
						key = go$pkg.Typ[2];
						val = go$pkg.UniverseRune;
					}
				} else if (_type$3 === (go$ptrType(Array))) {
					typ = _ref$12.go$val;
					key = go$pkg.Typ[2];
					val = typ.elem;
				} else if (_type$3 === (go$ptrType(Slice))) {
					typ = _ref$12.go$val;
					key = go$pkg.Typ[2];
					val = typ.elem;
				} else if (_type$3 === (go$ptrType(Pointer))) {
					typ = _ref$12.go$val;
					if (_tuple$10 = (x$14 = typ.base.Underlying(), (x$14 !== null && x$14.constructor === (go$ptrType(Array)) ? [x$14.go$val, true] : [(go$ptrType(Array)).nil, false])), typ$1 = _tuple$10[0], !(typ$1 === (go$ptrType(Array)).nil)) {
						key = go$pkg.Typ[2];
						val = typ$1.elem;
					}
				} else if (_type$3 === (go$ptrType(Map))) {
					typ = _ref$12.go$val;
					key = typ.key;
					val = typ.elem;
				} else if (_type$3 === (go$ptrType(Chan))) {
					typ = _ref$12.go$val;
					key = typ.elem;
					val = go$pkg.Typ[0];
					if (typ.dir === 1) {
						check.errorf(x$13.pos(), "cannot range over send-only channel %s", new (go$sliceType(go$emptyInterface))([x$13]));
					}
					if (!(go$interfaceIsEqual(s$1.Value, null))) {
						check.errorf(s$1.Value.Pos(), "iteration over %s permits only one iteration variable", new (go$sliceType(go$emptyInterface))([x$13]));
					}
				}
				if (go$interfaceIsEqual(key, null)) {
					check.errorf(x$13.pos(), "cannot range over %s", new (go$sliceType(go$emptyInterface))([x$13]));
					if (!decl) {
						check.stmt(inner, s$1.Body);
					}
					return;
				}
				if (go$interfaceIsEqual(s$1.Key, null)) {
					check.invalidAST(s$1.Pos(), "range clause requires index iteration variable", new (go$sliceType(go$emptyInterface))([]));
				}
				lhs$2 = go$toNativeArray("Interface", [s$1.Key, s$1.Value]);
				rhs$2 = go$toNativeArray("Interface", [key, val]);
				if (decl) {
					vars = (go$sliceType((go$ptrType(Var)))).nil;
					_ref$13 = lhs$2;
					_i$5 = 0;
					while (_i$5 < 2) {
						lhs$3 = _ref$13[_i$5];
						i$2 = _i$5;
						if (go$interfaceIsEqual(lhs$3, null)) {
							_i$5++;
							continue;
						}
						obj$1 = (go$ptrType(Var)).nil;
						if (_tuple$11 = (lhs$3 !== null && lhs$3.constructor === (go$ptrType(ast.Ident)) ? [lhs$3.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), ident = _tuple$11[0], !(ident === (go$ptrType(ast.Ident)).nil)) {
							name = ident.Name;
							obj$1 = NewVar(ident.Pos(), check.pkg, name, null);
							check.recordDef(ident, obj$1);
							if (!(name === "_")) {
								vars = go$append(vars, obj$1);
							}
						} else {
							check.errorf(lhs$3.Pos(), "cannot declare %s", new (go$sliceType(go$emptyInterface))([lhs$3]));
							obj$1 = NewVar(lhs$3.Pos(), check.pkg, "_", null);
						}
						x$13.mode = 7;
						x$13.expr = lhs$3;
						x$13.typ = rhs$2[i$2];
						check.initVar(obj$1, x$13);
						_i$5++;
					}
					if (vars.length > 0) {
						_ref$14 = vars;
						_i$6 = 0;
						while (_i$6 < _ref$14.length) {
							obj$2 = (_slice$12 = _ref$14, _index$12 = _i$6, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range"));
							check.declare(check.context.scope, (go$ptrType(ast.Ident)).nil, obj$2);
							_i$6++;
						}
					} else {
						check.errorf(s$1.TokPos, "no new variables on left side of :=", new (go$sliceType(go$emptyInterface))([]));
					}
				} else {
					_ref$15 = lhs$2;
					_i$7 = 0;
					while (_i$7 < 2) {
						lhs$4 = _ref$15[_i$7];
						i$3 = _i$7;
						if (go$interfaceIsEqual(lhs$4, null)) {
							_i$7++;
							continue;
						}
						x$13.mode = 7;
						x$13.expr = lhs$4;
						x$13.typ = rhs$2[i$3];
						check.assignVar(lhs$4, x$13);
						_i$7++;
					}
				}
				check.stmt(inner, s$1.Body);
			} else {
				s$1 = _ref;
				check.errorf(s$1.Pos(), "invalid statement", new (go$sliceType(go$emptyInterface))([]));
			}
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	checker.prototype.stmt = function(ctxt, s) { return this.go$val.stmt(ctxt, s); };
	Basic.Ptr.prototype.Kind = function() {
		var b;
		b = this;
		return b.kind;
	};
	Basic.prototype.Kind = function() { return this.go$val.Kind(); };
	Basic.Ptr.prototype.Info = function() {
		var b;
		b = this;
		return b.info;
	};
	Basic.prototype.Info = function() { return this.go$val.Info(); };
	Basic.Ptr.prototype.Name = function() {
		var b;
		b = this;
		return b.name;
	};
	Basic.prototype.Name = function() { return this.go$val.Name(); };
	NewArray = go$pkg.NewArray = function(elem, len) {
		return new Array.Ptr(len, elem);
	};
	Array.Ptr.prototype.Len = function() {
		var a;
		a = this;
		return a.len;
	};
	Array.prototype.Len = function() { return this.go$val.Len(); };
	Array.Ptr.prototype.Elem = function() {
		var a;
		a = this;
		return a.elem;
	};
	Array.prototype.Elem = function() { return this.go$val.Elem(); };
	NewSlice = go$pkg.NewSlice = function(elem) {
		return new Slice.Ptr(elem);
	};
	Slice.Ptr.prototype.Elem = function() {
		var s;
		s = this;
		return s.elem;
	};
	Slice.prototype.Elem = function() { return this.go$val.Elem(); };
	NewStruct = go$pkg.NewStruct = function(fields, tags) {
		var fset, _ref, _i, _slice, _index, f, v;
		fset = false;
		_ref = fields;
		_i = 0;
		while (_i < _ref.length) {
			f = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!(f.object.name === "_") && !(go$interfaceIsEqual((new (go$ptrType(objset))(function() { return fset; }, function(v) { fset = v; })).insert(f), null))) {
				throw go$panic(new Go$String("multiple fields with the same name"));
			}
			_i++;
		}
		if (tags.length > fields.length) {
			throw go$panic(new Go$String("more tags than fields"));
		}
		return new Struct.Ptr(fields, tags, (go$sliceType(Go$Int64)).nil);
	};
	Struct.Ptr.prototype.NumFields = function() {
		var s;
		s = this;
		return s.fields.length;
	};
	Struct.prototype.NumFields = function() { return this.go$val.NumFields(); };
	Struct.Ptr.prototype.Field = function(i) {
		var s, _slice, _index;
		s = this;
		return (_slice = s.fields, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
	};
	Struct.prototype.Field = function(i) { return this.go$val.Field(i); };
	Struct.Ptr.prototype.Tag = function(i) {
		var s, _slice, _index;
		s = this;
		if (i < s.tags.length) {
			return (_slice = s.tags, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		return "";
	};
	Struct.prototype.Tag = function(i) { return this.go$val.Tag(i); };
	NewPointer = go$pkg.NewPointer = function(elem) {
		return new Pointer.Ptr(elem);
	};
	Pointer.Ptr.prototype.Elem = function() {
		var p;
		p = this;
		return p.base;
	};
	Pointer.prototype.Elem = function() { return this.go$val.Elem(); };
	NewTuple = go$pkg.NewTuple = function(x) {
		if (x.length > 0) {
			return new Tuple.Ptr(x);
		}
		return (go$ptrType(Tuple)).nil;
	};
	Tuple.Ptr.prototype.Len = function() {
		var t;
		t = this;
		if (!(t === (go$ptrType(Tuple)).nil)) {
			return t.vars.length;
		}
		return 0;
	};
	Tuple.prototype.Len = function() { return this.go$val.Len(); };
	Tuple.Ptr.prototype.At = function(i) {
		var t, _slice, _index;
		t = this;
		return (_slice = t.vars, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
	};
	Tuple.prototype.At = function(i) { return this.go$val.At(i); };
	NewSignature = go$pkg.NewSignature = function(scope, recv, params, results, variadic) {
		var n, ok, _tuple, x;
		if (variadic) {
			n = params.Len();
			if (n === 0) {
				throw go$panic(new Go$String("types.NewSignature: variadic function must have at least one parameter"));
			}
			if (_tuple = (x = params.At(n - 1 >> 0).object.typ, (x !== null && x.constructor === (go$ptrType(Slice)) ? [x.go$val, true] : [(go$ptrType(Slice)).nil, false])), ok = _tuple[1], !ok) {
				throw go$panic(new Go$String("types.NewSignature: variadic parameter must be of unnamed slice type"));
			}
		}
		return new Signature.Ptr(scope, recv, params, results, variadic);
	};
	Signature.Ptr.prototype.Recv = function() {
		var s;
		s = this;
		return s.recv;
	};
	Signature.prototype.Recv = function() { return this.go$val.Recv(); };
	Signature.Ptr.prototype.Params = function() {
		var s;
		s = this;
		return s.params;
	};
	Signature.prototype.Params = function() { return this.go$val.Params(); };
	Signature.Ptr.prototype.Results = function() {
		var s;
		s = this;
		return s.results;
	};
	Signature.prototype.Results = function() { return this.go$val.Results(); };
	Signature.Ptr.prototype.Variadic = function() {
		var s;
		s = this;
		return s.variadic;
	};
	Signature.prototype.Variadic = function() { return this.go$val.Variadic(); };
	NewInterface = go$pkg.NewInterface = function(methods, embeddeds) {
		var typ, mset, _ref, _i, _slice, _index, m, v, x, allMethods, _ref$1, _i$1, _slice$1, _index$1, t, x$1, it, _ref$2, _i$2, _slice$2, _index$2, tm, _struct, _struct$1, newm, x$2, _struct$2, newmtyp;
		typ = new Interface.Ptr();
		mset = false;
		_ref = methods;
		_i = 0;
		while (_i < _ref.length) {
			m = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!(go$interfaceIsEqual((new (go$ptrType(objset))(function() { return mset; }, function(v) { mset = v; })).insert(m), null))) {
				throw go$panic(new Go$String("multiple methods with the same name"));
			}
			(x = m.object.typ, (x !== null && x.constructor === (go$ptrType(Signature)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Signature))))).recv = NewVar(m.object.pos, m.object.pkg, "", typ);
			_i++;
		}
		sort.Sort(go$subslice(new byUniqueMethodName(methods.array), methods.offset, methods.offset + methods.length));
		allMethods = (go$sliceType((go$ptrType(Func)))).nil;
		if (embeddeds === (go$sliceType((go$ptrType(Named)))).nil) {
			allMethods = methods;
		} else {
			allMethods = go$appendSlice(allMethods, methods);
			_ref$1 = embeddeds;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				t = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				it = (x$1 = t.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(Interface)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(Interface)))));
				_ref$2 = it.allMethods;
				_i$2 = 0;
				while (_i$2 < _ref$2.length) {
					tm = (_slice$2 = _ref$2, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
					newm = (_struct = tm, new Func.Ptr((_struct$1 = _struct.object, new object.Ptr(_struct$1.parent, _struct$1.pos, _struct$1.pkg, _struct$1.name, _struct$1.typ, _struct$1.used))));
					newmtyp = (_struct$2 = (x$2 = tm.object.typ, (x$2 !== null && x$2.constructor === (go$ptrType(Signature)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(Signature))))), new Signature.Ptr(_struct$2.scope, _struct$2.recv, _struct$2.params, _struct$2.results, _struct$2.variadic));
					newm.object.typ = newmtyp;
					newmtyp.recv = NewVar(newm.object.pos, newm.object.pkg, "", typ);
					allMethods = go$append(allMethods, newm);
					_i$2++;
				}
				_i$1++;
			}
			sort.Sort(go$subslice(new byUniqueTypeName(embeddeds.array), embeddeds.offset, embeddeds.offset + embeddeds.length));
			sort.Sort(go$subslice(new byUniqueMethodName(allMethods.array), allMethods.offset, allMethods.offset + allMethods.length));
		}
		typ.methods = methods;
		typ.embeddeds = embeddeds;
		typ.allMethods = allMethods;
		return typ;
	};
	Interface.Ptr.prototype.NumExplicitMethods = function() {
		var t;
		t = this;
		return t.methods.length;
	};
	Interface.prototype.NumExplicitMethods = function() { return this.go$val.NumExplicitMethods(); };
	Interface.Ptr.prototype.ExplicitMethod = function(i) {
		var t, _slice, _index;
		t = this;
		return (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
	};
	Interface.prototype.ExplicitMethod = function(i) { return this.go$val.ExplicitMethod(i); };
	Interface.Ptr.prototype.NumEmbeddeds = function() {
		var t;
		t = this;
		return t.embeddeds.length;
	};
	Interface.prototype.NumEmbeddeds = function() { return this.go$val.NumEmbeddeds(); };
	Interface.Ptr.prototype.Embedded = function(i) {
		var t, _slice, _index;
		t = this;
		return (_slice = t.embeddeds, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
	};
	Interface.prototype.Embedded = function(i) { return this.go$val.Embedded(i); };
	Interface.Ptr.prototype.NumMethods = function() {
		var t;
		t = this;
		return t.allMethods.length;
	};
	Interface.prototype.NumMethods = function() { return this.go$val.NumMethods(); };
	Interface.Ptr.prototype.Method = function(i) {
		var t, _slice, _index;
		t = this;
		return (_slice = t.allMethods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
	};
	Interface.prototype.Method = function(i) { return this.go$val.Method(i); };
	Interface.Ptr.prototype.Empty = function() {
		var t;
		t = this;
		return t.allMethods.length === 0;
	};
	Interface.prototype.Empty = function() { return this.go$val.Empty(); };
	NewMap = go$pkg.NewMap = function(key, elem) {
		return new Map.Ptr(key, elem);
	};
	Map.Ptr.prototype.Key = function() {
		var m;
		m = this;
		return m.key;
	};
	Map.prototype.Key = function() { return this.go$val.Key(); };
	Map.Ptr.prototype.Elem = function() {
		var m;
		m = this;
		return m.elem;
	};
	Map.prototype.Elem = function() { return this.go$val.Elem(); };
	NewChan = go$pkg.NewChan = function(dir, elem) {
		return new Chan.Ptr(dir, elem);
	};
	Chan.Ptr.prototype.Dir = function() {
		var c;
		c = this;
		return c.dir;
	};
	Chan.prototype.Dir = function() { return this.go$val.Dir(); };
	Chan.Ptr.prototype.Elem = function() {
		var c;
		c = this;
		return c.elem;
	};
	Chan.prototype.Elem = function() { return this.go$val.Elem(); };
	NewNamed = go$pkg.NewNamed = function(obj, underlying$1, methods) {
		var ok, _tuple, typ;
		if (_tuple = (underlying$1 !== null && underlying$1.constructor === (go$ptrType(Named)) ? [underlying$1.go$val, true] : [(go$ptrType(Named)).nil, false]), ok = _tuple[1], ok) {
			throw go$panic(new Go$String("types.NewNamed: underlying type must not be *Named"));
		}
		typ = new Named.Ptr(obj, underlying$1, methods);
		if (go$interfaceIsEqual(obj.object.typ, null)) {
			obj.object.typ = typ;
		}
		return typ;
	};
	Named.Ptr.prototype.Obj = function() {
		var t;
		t = this;
		return t.obj;
	};
	Named.prototype.Obj = function() { return this.go$val.Obj(); };
	Named.Ptr.prototype.NumMethods = function() {
		var t;
		t = this;
		return t.methods.length;
	};
	Named.prototype.NumMethods = function() { return this.go$val.NumMethods(); };
	Named.Ptr.prototype.Method = function(i) {
		var t, _slice, _index;
		t = this;
		return (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
	};
	Named.prototype.Method = function(i) { return this.go$val.Method(i); };
	Named.Ptr.prototype.SetUnderlying = function(underlying$1) {
		var t, ok, _tuple;
		t = this;
		if (go$interfaceIsEqual(underlying$1, null)) {
			throw go$panic(new Go$String("types.Named.SetUnderlying: underlying type must not be nil"));
		}
		if (_tuple = (underlying$1 !== null && underlying$1.constructor === (go$ptrType(Named)) ? [underlying$1.go$val, true] : [(go$ptrType(Named)).nil, false]), ok = _tuple[1], ok) {
			throw go$panic(new Go$String("types.Named.SetUnderlying: underlying type must not be *Named"));
		}
		t.underlying = underlying$1;
	};
	Named.prototype.SetUnderlying = function(underlying$1) { return this.go$val.SetUnderlying(underlying$1); };
	Named.Ptr.prototype.AddMethod = function(m) {
		var t, i, _tuple;
		t = this;
		if (_tuple = lookupMethod(t.methods, m.object.pkg, m.object.name), i = _tuple[0], i < 0) {
			t.methods = go$append(t.methods, m);
		}
	};
	Named.prototype.AddMethod = function(m) { return this.go$val.AddMethod(m); };
	Basic.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Basic.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Array.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Array.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Slice.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Slice.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Struct.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Struct.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Pointer.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Pointer.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Tuple.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Tuple.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Signature.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Signature.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Interface.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Interface.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Map.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Map.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Chan.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t;
	};
	Chan.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Named.Ptr.prototype.Underlying = function() {
		var t;
		t = this;
		return t.underlying;
	};
	Named.prototype.Underlying = function() { return this.go$val.Underlying(); };
	Basic.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Basic.prototype.String = function() { return this.go$val.String(); };
	Array.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Array.prototype.String = function() { return this.go$val.String(); };
	Slice.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Slice.prototype.String = function() { return this.go$val.String(); };
	Struct.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Struct.prototype.String = function() { return this.go$val.String(); };
	Pointer.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Pointer.prototype.String = function() { return this.go$val.String(); };
	Tuple.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Tuple.prototype.String = function() { return this.go$val.String(); };
	Signature.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Signature.prototype.String = function() { return this.go$val.String(); };
	Interface.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Interface.prototype.String = function() { return this.go$val.String(); };
	Map.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Map.prototype.String = function() { return this.go$val.String(); };
	Chan.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Chan.prototype.String = function() { return this.go$val.String(); };
	Named.Ptr.prototype.String = function() {
		var t;
		t = this;
		return TypeString((go$ptrType(Package)).nil, t);
	};
	Named.prototype.String = function() { return this.go$val.String(); };
	TypeString = go$pkg.TypeString = function(this$1, typ) {
		var buf;
		buf = new bytes.Buffer.Ptr();
		WriteType(buf, this$1, typ);
		return buf.String();
	};
	WriteType = go$pkg.WriteType = function(buf, this$1, typ) {
		writeType(buf, this$1, typ, (go$sliceType(Type)).make(8, 0, function() { return null; }));
	};
	writeType = function(buf, this$1, typ, visited) {
		var _ref, _i, _slice, _index, t, t$1, _ref$1, _type, _ref$2, _ref$3, _i$1, _slice$1, _index$1, f, i, tag, _ref$4, _i$2, _slice$2, _index$2, m, i$1, x, _ref$5, _i$3, _slice$3, _index$3, m$1, i$2, x$1, _ref$6, _i$4, _slice$4, _index$4, typ$1, i$3, s, parens, _ref$7, c, _tuple, x$2, s$1, obj;
		_ref = visited;
		_i = 0;
		while (_i < _ref.length) {
			t = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (go$interfaceIsEqual(t, typ)) {
				fmt.Fprintf(buf, "\xE2\x97\x8B%T", new (go$sliceType(go$emptyInterface))([typ]));
				return;
			}
			_i++;
		}
		visited = go$append(visited, typ);
		_ref$1 = typ;
		_type = _ref$1 !== null ? _ref$1.constructor : null;
		if (_type === null) {
			t$1 = _ref$1;
			buf.WriteString("<nil>");
		} else if (_type === (go$ptrType(Basic))) {
			t$1 = _ref$1.go$val;
			if (t$1.kind === 18) {
				buf.WriteString("unsafe.");
			}
			if (go$pkg.GcCompatibilityMode) {
				_ref$2 = t$1.kind;
				if (_ref$2 === 8) {
					t$1 = go$pkg.Typ[8];
				} else if (_ref$2 === 5) {
					t$1 = go$pkg.Typ[5];
				}
			}
			buf.WriteString(t$1.name);
		} else if (_type === (go$ptrType(Array))) {
			t$1 = _ref$1.go$val;
			fmt.Fprintf(buf, "[%d]", new (go$sliceType(go$emptyInterface))([t$1.len]));
			writeType(buf, this$1, t$1.elem, visited);
		} else if (_type === (go$ptrType(Slice))) {
			t$1 = _ref$1.go$val;
			buf.WriteString("[]");
			writeType(buf, this$1, t$1.elem, visited);
		} else if (_type === (go$ptrType(Struct))) {
			t$1 = _ref$1.go$val;
			buf.WriteString("struct{");
			_ref$3 = t$1.fields;
			_i$1 = 0;
			while (_i$1 < _ref$3.length) {
				f = (_slice$1 = _ref$3, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				i = _i$1;
				if (i > 0) {
					buf.WriteString("; ");
				}
				if (!f.anonymous) {
					buf.WriteString(f.object.name);
					buf.WriteByte(32);
				}
				writeType(buf, this$1, f.object.typ, visited);
				if (tag = t$1.Tag(i), !(tag === "")) {
					fmt.Fprintf(buf, " %q", new (go$sliceType(go$emptyInterface))([new Go$String(tag)]));
				}
				_i$1++;
			}
			buf.WriteByte(125);
		} else if (_type === (go$ptrType(Pointer))) {
			t$1 = _ref$1.go$val;
			buf.WriteByte(42);
			writeType(buf, this$1, t$1.base, visited);
		} else if (_type === (go$ptrType(Tuple))) {
			t$1 = _ref$1.go$val;
			writeTuple(buf, this$1, t$1, false, visited);
		} else if (_type === (go$ptrType(Signature))) {
			t$1 = _ref$1.go$val;
			buf.WriteString("func");
			writeSignature(buf, this$1, t$1, visited);
		} else if (_type === (go$ptrType(Interface))) {
			t$1 = _ref$1.go$val;
			buf.WriteString("interface{");
			if (go$pkg.GcCompatibilityMode) {
				_ref$4 = t$1.allMethods;
				_i$2 = 0;
				while (_i$2 < _ref$4.length) {
					m = (_slice$2 = _ref$4, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
					i$1 = _i$2;
					if (i$1 > 0) {
						buf.WriteString("; ");
					}
					buf.WriteString(m.object.name);
					writeSignature(buf, this$1, (x = m.object.typ, (x !== null && x.constructor === (go$ptrType(Signature)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Signature))))), visited);
					_i$2++;
				}
			} else {
				_ref$5 = t$1.methods;
				_i$3 = 0;
				while (_i$3 < _ref$5.length) {
					m$1 = (_slice$3 = _ref$5, _index$3 = _i$3, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
					i$2 = _i$3;
					if (i$2 > 0) {
						buf.WriteString("; ");
					}
					buf.WriteString(m$1.object.name);
					writeSignature(buf, this$1, (x$1 = m$1.object.typ, (x$1 !== null && x$1.constructor === (go$ptrType(Signature)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(Signature))))), visited);
					_i$3++;
				}
				_ref$6 = t$1.embeddeds;
				_i$4 = 0;
				while (_i$4 < _ref$6.length) {
					typ$1 = (_slice$4 = _ref$6, _index$4 = _i$4, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
					i$3 = _i$4;
					if (i$3 > 0 || t$1.methods.length > 0) {
						buf.WriteString("; ");
					}
					writeType(buf, this$1, typ$1, visited);
					_i$4++;
				}
			}
			buf.WriteByte(125);
		} else if (_type === (go$ptrType(Map))) {
			t$1 = _ref$1.go$val;
			buf.WriteString("map[");
			writeType(buf, this$1, t$1.key, visited);
			buf.WriteByte(93);
			writeType(buf, this$1, t$1.elem, visited);
		} else if (_type === (go$ptrType(Chan))) {
			t$1 = _ref$1.go$val;
			s = "";
			parens = false;
			_ref$7 = t$1.dir;
			if (_ref$7 === 0) {
				s = "chan ";
				if (_tuple = (x$2 = t$1.elem, (x$2 !== null && x$2.constructor === (go$ptrType(Chan)) ? [x$2.go$val, true] : [(go$ptrType(Chan)).nil, false])), c = _tuple[0], !(c === (go$ptrType(Chan)).nil) && (c.dir === 2)) {
					parens = true;
				}
			} else if (_ref$7 === 1) {
				s = "chan<- ";
			} else if (_ref$7 === 2) {
				s = "<-chan ";
			} else {
				throw go$panic(new Go$String("unreachable"));
			}
			buf.WriteString(s);
			if (parens) {
				buf.WriteByte(40);
			}
			writeType(buf, this$1, t$1.elem, visited);
			if (parens) {
				buf.WriteByte(41);
			}
		} else if (_type === (go$ptrType(Named))) {
			t$1 = _ref$1.go$val;
			s$1 = "<Named w/o object>";
			if (obj = t$1.obj, !(obj === (go$ptrType(TypeName)).nil)) {
				if (!(obj.object.pkg === (go$ptrType(Package)).nil)) {
					if (!(obj.object.pkg === this$1)) {
						buf.WriteString(obj.object.pkg.path);
						buf.WriteByte(46);
					}
				}
				s$1 = t$1.obj.object.name;
			}
			buf.WriteString(s$1);
		} else {
			t$1 = _ref$1;
			buf.WriteString(t$1.String());
		}
	};
	writeTuple = function(buf, this$1, tup, variadic, visited) {
		var _ref, _i, _slice, _index, v, i, typ;
		buf.WriteByte(40);
		if (!(tup === (go$ptrType(Tuple)).nil)) {
			_ref = tup.vars;
			_i = 0;
			while (_i < _ref.length) {
				v = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (i > 0) {
					buf.WriteString(", ");
				}
				if (!(v.object.name === "")) {
					buf.WriteString(v.object.name);
					buf.WriteByte(32);
				}
				typ = v.object.typ;
				if (variadic && (i === (tup.vars.length - 1 >> 0))) {
					buf.WriteString("...");
					typ = (typ !== null && typ.constructor === (go$ptrType(Slice)) ? typ.go$val : go$typeAssertionFailed(typ, (go$ptrType(Slice)))).elem;
				}
				writeType(buf, this$1, typ, visited);
				_i++;
			}
		}
		buf.WriteByte(41);
	};
	WriteSignature = go$pkg.WriteSignature = function(buf, this$1, sig) {
		writeSignature(buf, this$1, sig, (go$sliceType(Type)).make(8, 0, function() { return null; }));
	};
	writeSignature = function(buf, this$1, sig, visited) {
		var n, _slice, _index, _slice$1, _index$1;
		writeTuple(buf, this$1, sig.params, sig.variadic, visited);
		n = sig.results.Len();
		if (n === 0) {
			return;
		}
		buf.WriteByte(32);
		if ((n === 1) && (_slice = sig.results.vars, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).object.name === "") {
			writeType(buf, this$1, (_slice$1 = sig.results.vars, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).object.typ, visited);
			return;
		}
		writeTuple(buf, this$1, sig.results, false, visited);
	};
	checker.Ptr.prototype.ident = function(x, e, def$1, path) {
		var check, obj, typ, obj$1, _ref, _type, _ref$1, _i, _slice, _index, prev, i, _ref$2, _i$1, _slice$1, _index$1, obj$2;
		check = this;
		x.mode = 0;
		x.expr = e;
		obj = check.context.scope.LookupParent(e.Name);
		if (go$interfaceIsEqual(obj, null)) {
			if (e.Name === "_") {
				check.errorf(e.Pos(), "cannot use _ as value or type", new (go$sliceType(go$emptyInterface))([]));
			} else {
				check.errorf(e.Pos(), "undeclared name: %s", new (go$sliceType(go$emptyInterface))([new Go$String(e.Name)]));
			}
			return;
		}
		check.recordUse(e, obj);
		check.objDecl(obj, def$1, path);
		typ = obj.Type();
		assert(!(go$interfaceIsEqual(typ, null)));
		_ref = obj;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(PkgName))) {
			obj$1 = _ref.go$val;
			check.errorf(e.Pos(), "use of package %s not in selector", new (go$sliceType(go$emptyInterface))([new Go$String(obj$1.object.name)]));
			return;
		} else if (_type === (go$ptrType(Const))) {
			obj$1 = _ref.go$val;
			obj$1.object.used = true;
			check.addDeclDep(obj$1);
			if (go$interfaceIsEqual(typ, go$pkg.Typ[0])) {
				return;
			}
			if (obj$1 === universeIota) {
				if (go$interfaceIsEqual(check.context.iota, null)) {
					check.errorf(e.Pos(), "cannot use iota outside constant declaration", new (go$sliceType(go$emptyInterface))([]));
					return;
				}
				x.val = check.context.iota;
			} else {
				x.val = obj$1.val;
			}
			assert(!(go$interfaceIsEqual(x.val, null)));
			x.mode = 4;
		} else if (_type === (go$ptrType(TypeName))) {
			obj$1 = _ref.go$val;
			obj$1.object.used = true;
			x.mode = 3;
			_ref$1 = path;
			_i = 0;
			while (_i < _ref$1.length) {
				prev = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (prev === obj$1) {
					check.errorf(obj$1.object.pos, "illegal cycle in declaration of %s", new (go$sliceType(go$emptyInterface))([new Go$String(obj$1.object.name)]));
					_ref$2 = go$subslice(path, i);
					_i$1 = 0;
					while (_i$1 < _ref$2.length) {
						obj$2 = (_slice$1 = _ref$2, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
						check.errorf(obj$2.object.Pos(), "\t%s refers to", new (go$sliceType(go$emptyInterface))([new Go$String(obj$2.object.Name())]));
						_i$1++;
					}
					check.errorf(obj$1.object.Pos(), "\t%s", new (go$sliceType(go$emptyInterface))([new Go$String(obj$1.object.Name())]));
					typ = go$pkg.Typ[0];
					break;
				}
				_i++;
			}
		} else if (_type === (go$ptrType(Var))) {
			obj$1 = _ref.go$val;
			obj$1.object.used = true;
			check.addDeclDep(obj$1);
			x.mode = 5;
		} else if (_type === (go$ptrType(Func))) {
			obj$1 = _ref.go$val;
			obj$1.object.used = true;
			check.addDeclDep(obj$1);
			x.mode = 7;
		} else if (_type === (go$ptrType(Builtin))) {
			obj$1 = _ref.go$val;
			obj$1.object.used = true;
			x.id = obj$1.id;
			x.mode = 2;
		} else if (_type === (go$ptrType(Nil))) {
			obj$1 = _ref.go$val;
			x.mode = 7;
		} else {
			obj$1 = _ref;
			unreachable();
		}
		x.typ = typ;
	};
	checker.prototype.ident = function(x, e, def$1, path) { return this.go$val.ident(x, e, def$1, path); };
	checker.Ptr.prototype.typExpr = function(e, def$1, path) {
		var T, check;
		T = null;
		var go$deferred = [];
		try {
			check = this;
			T = check.typExprInternal(e, def$1, path);
			assert(isTyped(T));
			check.recordTypeAndValue(e, T, null);
			return T;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return T;
		}
	};
	checker.prototype.typExpr = function(e, def$1, path) { return this.go$val.typExpr(e, def$1, path); };
	checker.Ptr.prototype.typ = function(e) {
		var check;
		check = this;
		return check.typExpr(e, (go$ptrType(Named)).nil, (go$sliceType((go$ptrType(TypeName)))).nil);
	};
	checker.prototype.typ = function(e) { return this.go$val.typ(e); };
	checker.Ptr.prototype.funcType = function(sig, recv, ftyp) {
		var check, scope, _tuple, recv_, _tuple$1, params, variadic, _tuple$2, results, _slice, _index, _slice$1, _index$1, recv$1, t, _tuple$3, err, T, _tuple$4, u, _ref, _type;
		check = this;
		scope = NewScope(check.context.scope);
		check.recordScope(ftyp, scope);
		_tuple = check.collectParams(scope, recv, false), recv_ = _tuple[0];
		_tuple$1 = check.collectParams(scope, ftyp.Params, true), params = _tuple$1[0], variadic = _tuple$1[1];
		_tuple$2 = check.collectParams(scope, ftyp.Results, false), results = _tuple$2[0];
		if (recv_.length > 0) {
			if (recv_.length > 1) {
				check.invalidAST((_slice = recv_, _index = 1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).object.Pos(), "method must have exactly one receiver", new (go$sliceType(go$emptyInterface))([]));
			}
			recv$1 = (_slice$1 = recv_, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (_tuple$3 = deref(recv$1.object.typ), t = _tuple$3[0], !(go$interfaceIsEqual(t, go$pkg.Typ[0]))) {
				err = "";
				if (_tuple$4 = (t !== null && t.constructor === (go$ptrType(Named)) ? [t.go$val, true] : [(go$ptrType(Named)).nil, false]), T = _tuple$4[0], !(T === (go$ptrType(Named)).nil)) {
					if (!(T.obj.object.pkg === check.pkg)) {
						err = "type not defined in this package";
					} else {
						_ref = T.underlying;
						_type = _ref !== null ? _ref.constructor : null;
						if (_type === (go$ptrType(Basic))) {
							u = _ref.go$val;
							if (u.kind === 18) {
								err = "unsafe.Pointer";
							}
						} else if (_type === (go$ptrType(Pointer)) || _type === (go$ptrType(Interface))) {
							u = _ref;
							err = "pointer or interface type";
						}
					}
				} else {
					err = "basic or unnamed type";
				}
				if (!(err === "")) {
					check.errorf(recv$1.object.pos, "invalid receiver %s (%s)", new (go$sliceType(go$emptyInterface))([recv$1.object.typ, new Go$String(err)]));
				}
			}
			sig.recv = recv$1;
		}
		sig.scope = scope;
		sig.params = NewTuple(params);
		sig.results = NewTuple(results);
		sig.variadic = variadic;
		return sig;
	};
	checker.prototype.funcType = function(sig, recv, ftyp) { return this.go$val.funcType(sig, recv, ftyp); };
	checker.Ptr.prototype.typExprInternal = function(e, def$1, path) {
		var check, e$1, _ref, _type, x, _ref$1, typ, x$1, _ref$2, typ$1, typ$2, typ$3, typ$4, typ$5, typ$6, typ$7, typ$8, typ$9, dir, _ref$3, typ$10;
		check = this;
		_ref = e;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadExpr))) {
			e$1 = _ref.go$val;
		} else if (_type === (go$ptrType(ast.Ident))) {
			e$1 = _ref.go$val;
			x = new operand.Ptr();
			check.ident(x, e$1, def$1, path);
			_ref$1 = x.mode;
			if (_ref$1 === 3) {
				typ = x.typ;
				def$1.setUnderlying(typ);
				return typ;
			} else if (_ref$1 === 0) {
			} else if (_ref$1 === 1) {
				check.errorf(x.pos(), "%s used as type", new (go$sliceType(go$emptyInterface))([x]));
			} else {
				check.errorf(x.pos(), "%s is not a type", new (go$sliceType(go$emptyInterface))([x]));
			}
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			e$1 = _ref.go$val;
			x$1 = new operand.Ptr();
			check.selector(x$1, e$1);
			_ref$2 = x$1.mode;
			if (_ref$2 === 3) {
				typ$1 = x$1.typ;
				def$1.setUnderlying(typ$1);
				return typ$1;
			} else if (_ref$2 === 0) {
			} else if (_ref$2 === 1) {
				check.errorf(x$1.pos(), "%s used as type", new (go$sliceType(go$emptyInterface))([x$1]));
			} else {
				check.errorf(x$1.pos(), "%s is not a type", new (go$sliceType(go$emptyInterface))([x$1]));
			}
		} else if (_type === (go$ptrType(ast.ParenExpr))) {
			e$1 = _ref.go$val;
			return check.typExpr(e$1.X, def$1, path);
		} else if (_type === (go$ptrType(ast.ArrayType))) {
			e$1 = _ref.go$val;
			if (!(go$interfaceIsEqual(e$1.Len, null))) {
				typ$2 = new Array.Ptr();
				def$1.setUnderlying(typ$2);
				typ$2.len = check.arrayLength(e$1.Len);
				typ$2.elem = check.typExpr(e$1.Elt, (go$ptrType(Named)).nil, path);
				return typ$2;
			} else {
				typ$3 = new Slice.Ptr();
				def$1.setUnderlying(typ$3);
				typ$3.elem = check.typ(e$1.Elt);
				return typ$3;
			}
		} else if (_type === (go$ptrType(ast.StructType))) {
			e$1 = _ref.go$val;
			typ$4 = new Struct.Ptr();
			def$1.setUnderlying(typ$4);
			check.structType(typ$4, e$1, path);
			return typ$4;
		} else if (_type === (go$ptrType(ast.StarExpr))) {
			e$1 = _ref.go$val;
			typ$5 = new Pointer.Ptr();
			def$1.setUnderlying(typ$5);
			typ$5.base = check.typ(e$1.X);
			return typ$5;
		} else if (_type === (go$ptrType(ast.FuncType))) {
			e$1 = _ref.go$val;
			typ$6 = new Signature.Ptr();
			def$1.setUnderlying(typ$6);
			check.funcType(typ$6, (go$ptrType(ast.FieldList)).nil, e$1);
			return typ$6;
		} else if (_type === (go$ptrType(ast.InterfaceType))) {
			e$1 = _ref.go$val;
			typ$7 = new Interface.Ptr();
			def$1.setUnderlying(typ$7);
			check.interfaceType(typ$7, e$1, def$1, path);
			return typ$7;
		} else if (_type === (go$ptrType(ast.MapType))) {
			e$1 = _ref.go$val;
			typ$8 = new Map.Ptr();
			def$1.setUnderlying(typ$8);
			typ$8.key = check.typ(e$1.Key);
			typ$8.elem = check.typ(e$1.Value);
			check.delay((function() {
				if (!Comparable(typ$8.key)) {
					check.errorf(e$1.Key.Pos(), "invalid map key type %s", new (go$sliceType(go$emptyInterface))([typ$8.key]));
				}
			}));
			return typ$8;
		} else if (_type === (go$ptrType(ast.ChanType))) {
			e$1 = _ref.go$val;
			typ$9 = new Chan.Ptr();
			def$1.setUnderlying(typ$9);
			dir = 0;
			_ref$3 = e$1.Dir;
			if (_ref$3 === 3) {
			} else if (_ref$3 === 1) {
				dir = 1;
			} else if (_ref$3 === 2) {
				dir = 2;
			} else {
				check.invalidAST(e$1.Pos(), "unknown channel direction %d", new (go$sliceType(go$emptyInterface))([new ast.ChanDir(e$1.Dir)]));
			}
			typ$9.dir = dir;
			typ$9.elem = check.typ(e$1.Value);
			return typ$9;
		} else {
			e$1 = _ref;
			check.errorf(e$1.Pos(), "%s is not a type", new (go$sliceType(go$emptyInterface))([e$1]));
		}
		typ$10 = go$pkg.Typ[0];
		def$1.setUnderlying(typ$10);
		return typ$10;
	};
	checker.prototype.typExprInternal = function(e, def$1, path) { return this.go$val.typExprInternal(e, def$1, path); };
	checker.Ptr.prototype.typOrNil = function(e) {
		var check, x, _ref;
		check = this;
		x = new operand.Ptr();
		check.rawExpr(x, e, null);
		_ref = x.mode;
		if (_ref === 0) {
		} else if (_ref === 1) {
			check.errorf(x.pos(), "%s used as type", new (go$sliceType(go$emptyInterface))([x]));
		} else if (_ref === 3) {
			return x.typ;
		} else if (_ref === 7) {
			if (x.isNil()) {
				return null;
			}
			check.errorf(x.pos(), "%s is not a type", new (go$sliceType(go$emptyInterface))([x]));
		} else {
			check.errorf(x.pos(), "%s is not a type", new (go$sliceType(go$emptyInterface))([x]));
		}
		return go$pkg.Typ[0];
	};
	checker.prototype.typOrNil = function(e) { return this.go$val.typOrNil(e); };
	checker.Ptr.prototype.arrayLength = function(e) {
		var check, x, _tuple, n, ok;
		check = this;
		x = new operand.Ptr();
		check.expr(x, e);
		if (!((x.mode === 4))) {
			if (!((x.mode === 0))) {
				check.errorf(x.pos(), "array length %s must be constant", new (go$sliceType(go$emptyInterface))([x]));
			}
			return new Go$Int64(0, 0);
		}
		if (!x.isInteger()) {
			check.errorf(x.pos(), "array length %s must be integer", new (go$sliceType(go$emptyInterface))([x]));
			return new Go$Int64(0, 0);
		}
		_tuple = exact.Int64Val(x.val), n = _tuple[0], ok = _tuple[1];
		if (!ok || (n.high < 0 || (n.high === 0 && n.low < 0))) {
			check.errorf(x.pos(), "invalid array length %s", new (go$sliceType(go$emptyInterface))([x]));
			return new Go$Int64(0, 0);
		}
		return n;
	};
	checker.prototype.arrayLength = function(e) { return this.go$val.arrayLength(e); };
	checker.Ptr.prototype.collectParams = function(scope, list, variadicOk) {
		var params, variadic, check, _ref, _i, _slice, _index, field, i, ftype, t, _tuple, typ, _ref$1, _i$1, _slice$1, _index$1, name, par, par$1, _slice$2, _index$2, last;
		params = (go$sliceType((go$ptrType(Var)))).nil;
		variadic = false;
		check = this;
		if (list === (go$ptrType(ast.FieldList)).nil) {
			return [params, variadic];
		}
		_ref = list.List;
		_i = 0;
		while (_i < _ref.length) {
			field = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			ftype = field.Type;
			if (_tuple = (ftype !== null && ftype.constructor === (go$ptrType(ast.Ellipsis)) ? [ftype.go$val, true] : [(go$ptrType(ast.Ellipsis)).nil, false]), t = _tuple[0], !(t === (go$ptrType(ast.Ellipsis)).nil)) {
				ftype = t.Elt;
				if (variadicOk && (i === (list.List.length - 1 >> 0))) {
					variadic = true;
				} else {
					check.invalidAST(field.Pos(), "... not permitted", new (go$sliceType(go$emptyInterface))([]));
				}
			}
			typ = check.typ(ftype);
			if (field.Names.length > 0) {
				_ref$1 = field.Names;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					name = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					par = NewParam(name.Pos(), check.pkg, name.Name, typ);
					check.declare(scope, name, par);
					params = go$append(params, par);
					_i$1++;
				}
			} else {
				par$1 = NewParam(ftype.Pos(), check.pkg, "", typ);
				check.recordImplicit(field, par$1);
				params = go$append(params, par$1);
			}
			_i++;
		}
		if (variadic && params.length > 0) {
			last = (_slice$2 = params, _index$2 = (params.length - 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			last.object.typ = new Slice.Ptr(last.object.typ);
		}
		return [params, variadic];
	};
	checker.prototype.collectParams = function(scope, list, variadicOk) { return this.go$val.collectParams(scope, list, variadicOk); };
	checker.Ptr.prototype.declareInSet = function(oset, pos, obj) {
		var check, alt;
		check = this;
		if (alt = oset.insert(obj), !(go$interfaceIsEqual(alt, null))) {
			check.errorf(pos, "%s redeclared", new (go$sliceType(go$emptyInterface))([new Go$String(obj.Name())]));
			check.reportAltDecl(alt);
			return false;
		}
		return true;
	};
	checker.prototype.declareInSet = function(oset, pos, obj) { return this.go$val.declareInSet(oset, pos, obj); };
	checker.Ptr.prototype.interfaceType = function(iface, ityp, def$1, path) {
		var check, recvTyp, mset, signatures, embedded, _ref, _i, _slice, _index, f, _slice$1, _index$1, name, pos, sig, m, v, _ref$1, _i$1, _slice$2, _index$2, e, pos$1, typ, _tuple, named, u, _tuple$1, embed, _ref$2, _i$2, _slice$3, _index$3, m$1, v$1, _ref$3, _i$3, _slice$4, _index$4, m$2, i, _slice$5, _index$5, expr, typ$1, _tuple$2, sig$1, x, old, _struct, l, r, x$1, x$2, x$3;
		check = this;
		if (ityp.Methods === (go$ptrType(ast.FieldList)).nil) {
			return;
		}
		recvTyp = iface;
		if (!(def$1 === (go$ptrType(Named)).nil)) {
			recvTyp = def$1;
		}
		mset = false, signatures = (go$sliceType(ast.Expr)).nil, embedded = (go$sliceType(ast.Expr)).nil;
		_ref = ityp.Methods.List;
		_i = 0;
		while (_i < _ref.length) {
			f = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (f.Names.length > 0) {
				name = (_slice$1 = f.Names, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				pos = name.Pos();
				sig = new Signature.Ptr();
				sig.recv = NewVar(pos, check.pkg, "", recvTyp);
				m = NewFunc(pos, check.pkg, name.Name, sig);
				if (check.declareInSet(new (go$ptrType(objset))(function() { return mset; }, function(v) { mset = v; }), pos, m)) {
					iface.methods = go$append(iface.methods, m);
					iface.allMethods = go$append(iface.allMethods, m);
					signatures = go$append(signatures, f.Type);
					check.recordDef(name, m);
				}
			} else {
				embedded = go$append(embedded, f.Type);
			}
			_i++;
		}
		_ref$1 = embedded;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			e = (_slice$2 = _ref$1, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			pos$1 = e.Pos();
			typ = check.typExpr(e, (go$ptrType(Named)).nil, path);
			_tuple = (typ !== null && typ.constructor === (go$ptrType(Named)) ? [typ.go$val, true] : [(go$ptrType(Named)).nil, false]), named = _tuple[0];
			if (named === (go$ptrType(Named)).nil) {
				if (!(go$interfaceIsEqual(typ, go$pkg.Typ[0]))) {
					check.invalidAST(pos$1, "%s is not named type", new (go$sliceType(go$emptyInterface))([typ]));
				}
				_i$1++;
				continue;
			}
			u = underlying(named);
			_tuple$1 = (u !== null && u.constructor === (go$ptrType(Interface)) ? [u.go$val, true] : [(go$ptrType(Interface)).nil, false]), embed = _tuple$1[0];
			if (embed === (go$ptrType(Interface)).nil) {
				if (!(go$interfaceIsEqual(u, go$pkg.Typ[0]))) {
					check.errorf(pos$1, "%s is not an interface", new (go$sliceType(go$emptyInterface))([named]));
				}
				_i$1++;
				continue;
			}
			iface.embeddeds = go$append(iface.embeddeds, named);
			_ref$2 = embed.allMethods;
			_i$2 = 0;
			while (_i$2 < _ref$2.length) {
				m$1 = (_slice$3 = _ref$2, _index$3 = _i$2, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
				if (check.declareInSet(new (go$ptrType(objset))(function() { return mset; }, function(v$1) { mset = v$1; }), pos$1, m$1)) {
					iface.allMethods = go$append(iface.allMethods, m$1);
				}
				_i$2++;
			}
			_i$1++;
		}
		_ref$3 = iface.methods;
		_i$3 = 0;
		while (_i$3 < _ref$3.length) {
			m$2 = (_slice$4 = _ref$3, _index$4 = _i$3, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
			i = _i$3;
			expr = (_slice$5 = signatures, _index$5 = i, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
			typ$1 = check.typ(expr);
			_tuple$2 = (typ$1 !== null && typ$1.constructor === (go$ptrType(Signature)) ? [typ$1.go$val, true] : [(go$ptrType(Signature)).nil, false]), sig$1 = _tuple$2[0];
			if (sig$1 === (go$ptrType(Signature)).nil) {
				if (!(go$interfaceIsEqual(typ$1, go$pkg.Typ[0]))) {
					check.invalidAST(expr.Pos(), "%s is not a method signature", new (go$sliceType(go$emptyInterface))([typ$1]));
				}
				_i$3++;
				continue;
			}
			old = (x = m$2.object.typ, (x !== null && x.constructor === (go$ptrType(Signature)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Signature)))));
			sig$1.recv = old.recv;
			l = old, r = (_struct = sig$1, new Signature.Ptr(_struct.scope, _struct.recv, _struct.params, _struct.results, _struct.variadic)), l.scope = r.scope, l.recv = r.recv, l.params = r.params, l.results = r.results, l.variadic = r.variadic;
			_i$3++;
		}
		sort.Sort((x$1 = iface.methods, go$subslice(new byUniqueMethodName(x$1.array), x$1.offset, x$1.offset + x$1.length)));
		sort.Sort((x$2 = iface.embeddeds, go$subslice(new byUniqueTypeName(x$2.array), x$2.offset, x$2.offset + x$2.length)));
		sort.Sort((x$3 = iface.allMethods, go$subslice(new byUniqueMethodName(x$3.array), x$3.offset, x$3.offset + x$3.length)));
	};
	checker.prototype.interfaceType = function(iface, ityp, def$1, path) { return this.go$val.interfaceType(iface, ityp, def$1, path); };
	byUniqueTypeName.prototype.Len = function() {
		var a;
		a = this;
		return a.length;
	};
	go$ptrType(byUniqueTypeName).prototype.Len = function() { return this.go$get().Len(); };
	byUniqueTypeName.prototype.Less = function(i, j) {
		var a, _slice, _index, _slice$1, _index$1;
		a = this;
		return (_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).obj.object.Id() < (_slice$1 = a, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).obj.object.Id();
	};
	go$ptrType(byUniqueTypeName).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	byUniqueTypeName.prototype.Swap = function(i, j) {
		var a, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		a = this;
		_tuple = [(_slice = a, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = a, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _slice$2 = a, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = a, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(byUniqueTypeName).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	byUniqueMethodName.prototype.Len = function() {
		var a;
		a = this;
		return a.length;
	};
	go$ptrType(byUniqueMethodName).prototype.Len = function() { return this.go$get().Len(); };
	byUniqueMethodName.prototype.Less = function(i, j) {
		var a, _slice, _index, _slice$1, _index$1;
		a = this;
		return (_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).object.Id() < (_slice$1 = a, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).object.Id();
	};
	go$ptrType(byUniqueMethodName).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	byUniqueMethodName.prototype.Swap = function(i, j) {
		var a, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		a = this;
		_tuple = [(_slice = a, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = a, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _slice$2 = a, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = a, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(byUniqueMethodName).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	checker.Ptr.prototype.tag = function(t) {
		var check, err, _tuple, val;
		check = this;
		if (!(t === (go$ptrType(ast.BasicLit)).nil)) {
			if (t.Kind === 9) {
				if (_tuple = strconv.Unquote(t.Value), val = _tuple[0], err = _tuple[1], go$interfaceIsEqual(err, null)) {
					return val;
				}
			}
			check.invalidAST(t.Pos(), "incorrect tag syntax: %q", new (go$sliceType(go$emptyInterface))([new Go$String(t.Value)]));
		}
		return "";
	};
	checker.prototype.tag = function(t) { return this.go$val.tag(t); };
	checker.Ptr.prototype.structType = function(styp, e, path) {
		var check, list, fields, tags, fset, typ, tag, add, _ref, _i, _slice, _index, f, _ref$1, _i$1, _slice$1, _index$1, name, name$1, pos, _tuple, t, isPtr, t$1, _ref$2, _type, x, u, _ref$3, _type$1;
		check = this;
		list = e.Fields;
		if (list === (go$ptrType(ast.FieldList)).nil) {
			return;
		}
		fields = (go$sliceType((go$ptrType(Var)))).nil;
		tags = (go$sliceType(Go$String)).nil;
		fset = false;
		typ = null;
		tag = "";
		add = (function(field, ident, anonymous, pos) {
			var name, fld, v;
			if (!(tag === "") && tags === (go$sliceType(Go$String)).nil) {
				tags = (go$sliceType(Go$String)).make(fields.length, 0, function() { return ""; });
			}
			if (!(tags === (go$sliceType(Go$String)).nil)) {
				tags = go$append(tags, tag);
			}
			name = ident.Name;
			fld = NewField(pos, check.pkg, name, typ, !(anonymous === (go$ptrType(TypeName)).nil));
			if (name === "_" || check.declareInSet(new (go$ptrType(objset))(function() { return fset; }, function(v) { fset = v; }), pos, fld)) {
				fields = go$append(fields, fld);
				check.recordDef(ident, fld);
			}
			if (!(anonymous === (go$ptrType(TypeName)).nil)) {
				check.recordUse(ident, anonymous);
			}
		});
		_ref = list.List;
		_i = 0;
		while (_i < _ref.length) {
			f = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			typ = check.typExpr(f.Type, (go$ptrType(Named)).nil, path);
			tag = check.tag(f.Tag);
			if (f.Names.length > 0) {
				_ref$1 = f.Names;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					name = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					add(f, name, (go$ptrType(TypeName)).nil, name.Pos());
					_i$1++;
				}
			} else {
				name$1 = anonymousFieldIdent(f.Type);
				pos = f.Type.Pos();
				_tuple = deref(typ), t = _tuple[0], isPtr = _tuple[1];
				_ref$2 = t;
				_type = _ref$2 !== null ? _ref$2.constructor : null;
				if (_type === (go$ptrType(Basic))) {
					t$1 = _ref$2.go$val;
					if (t$1 === go$pkg.Typ[0]) {
						_i++;
						continue;
					}
					if (t$1.kind === 18) {
						check.errorf(pos, "anonymous field type cannot be unsafe.Pointer", new (go$sliceType(go$emptyInterface))([]));
						_i++;
						continue;
					}
					add(f, name$1, (x = go$pkg.Universe.Lookup(t$1.name), (x !== null && x.constructor === (go$ptrType(TypeName)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(TypeName))))), pos);
				} else if (_type === (go$ptrType(Named))) {
					t$1 = _ref$2.go$val;
					_ref$3 = t$1.underlying;
					_type$1 = _ref$3 !== null ? _ref$3.constructor : null;
					if (_type$1 === (go$ptrType(Basic))) {
						u = _ref$3.go$val;
						if (u.kind === 18) {
							check.errorf(pos, "anonymous field type cannot be unsafe.Pointer", new (go$sliceType(go$emptyInterface))([]));
							_i++;
							continue;
						}
					} else if (_type$1 === (go$ptrType(Pointer))) {
						u = _ref$3.go$val;
						check.errorf(pos, "anonymous field type cannot be a pointer", new (go$sliceType(go$emptyInterface))([]));
						_i++;
						continue;
					} else if (_type$1 === (go$ptrType(Interface))) {
						u = _ref$3.go$val;
						if (isPtr) {
							check.errorf(pos, "anonymous field type cannot be a pointer to an interface", new (go$sliceType(go$emptyInterface))([]));
							_i++;
							continue;
						}
					}
					add(f, name$1, t$1.obj, pos);
				} else {
					t$1 = _ref$2;
					check.invalidAST(pos, "anonymous field type %s must be named", new (go$sliceType(go$emptyInterface))([typ]));
				}
			}
			_i++;
		}
		styp.fields = fields;
		styp.tags = tags;
	};
	checker.prototype.structType = function(styp, e, path) { return this.go$val.structType(styp, e, path); };
	anonymousFieldIdent = function(e) {
		var e$1, _ref, _type;
		_ref = e;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.Ident))) {
			e$1 = _ref.go$val;
			return e$1;
		} else if (_type === (go$ptrType(ast.StarExpr))) {
			e$1 = _ref.go$val;
			return anonymousFieldIdent(e$1.X);
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			e$1 = _ref.go$val;
			return e$1.Sel;
		}
		return (go$ptrType(ast.Ident)).nil;
	};
	defPredeclaredTypes = function() {
		var _ref, _i, t, _ref$1, _i$1, t$1, res, sig, err, typ;
		_ref = go$pkg.Typ;
		_i = 0;
		while (_i < 26) {
			t = _ref[_i];
			def(NewTypeName(0, (go$ptrType(Package)).nil, t.name, t));
			_i++;
		}
		_ref$1 = aliases;
		_i$1 = 0;
		while (_i$1 < 2) {
			t$1 = _ref$1[_i$1];
			def(NewTypeName(0, (go$ptrType(Package)).nil, t$1.name, t$1));
			_i$1++;
		}
		res = NewVar(0, (go$ptrType(Package)).nil, "", go$pkg.Typ[17]);
		sig = new Signature.Ptr((go$ptrType(Scope)).nil, (go$ptrType(Var)).nil, (go$ptrType(Tuple)).nil, NewTuple(new (go$sliceType((go$ptrType(Var))))([res])), false);
		err = NewFunc(0, (go$ptrType(Package)).nil, "Error", sig);
		typ = new Named.Ptr((go$ptrType(TypeName)).nil, NewInterface(new (go$sliceType((go$ptrType(Func))))([err]), (go$sliceType((go$ptrType(Named)))).nil), (go$sliceType((go$ptrType(Func)))).nil);
		sig.recv = NewVar(0, (go$ptrType(Package)).nil, "", typ);
		def(NewTypeName(0, (go$ptrType(Package)).nil, "error", typ));
	};
	defPredeclaredConsts = function() {
		var _ref, _i, _struct, c;
		_ref = predeclaredConsts;
		_i = 0;
		while (_i < 3) {
			c = (_struct = _ref[_i], new _struct.constructor(_struct.name, _struct.kind, _struct.val));
			def(NewConst(0, (go$ptrType(Package)).nil, c.name, go$pkg.Typ[c.kind], c.val));
			_i++;
		}
	};
	defPredeclaredNil = function() {
		def(new Nil.Ptr(new object.Ptr((go$ptrType(Scope)).nil, 0, (go$ptrType(Package)).nil, "nil", go$pkg.Typ[25], false)));
	};
	defPredeclaredFuncs = function() {
		var _ref, _i, i, id;
		_ref = predeclaredFuncs;
		_i = 0;
		while (_i < 20) {
			i = _i;
			id = (i >> 0);
			if ((id === 18) || (id === 19)) {
				_i++;
				continue;
			}
			def(newBuiltin(id));
			_i++;
		}
	};
	def = function(obj) {
		var name, ok, _tuple, x, typ, scope, obj$1, _ref, _type;
		name = obj.Name();
		if (strings.Index(name, " ") >= 0) {
			return;
		}
		if (_tuple = (x = obj.Type(), (x !== null && x.constructor === (go$ptrType(Named)) ? [x.go$val, true] : [(go$ptrType(Named)).nil, false])), typ = _tuple[0], ok = _tuple[1], ok) {
			typ.obj = (obj !== null && obj.constructor === (go$ptrType(TypeName)) ? obj.go$val : go$typeAssertionFailed(obj, (go$ptrType(TypeName))));
		}
		scope = go$pkg.Universe;
		if (obj.Exported()) {
			scope = go$pkg.Unsafe.scope;
			_ref = obj;
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === (go$ptrType(TypeName))) {
				obj$1 = _ref.go$val;
				obj$1.object.pkg = go$pkg.Unsafe;
			} else if (_type === (go$ptrType(Builtin))) {
				obj$1 = _ref.go$val;
				obj$1.object.pkg = go$pkg.Unsafe;
			} else {
				obj$1 = _ref;
				unreachable();
			}
		}
		if (!(go$interfaceIsEqual(scope.Insert(obj), null))) {
			throw go$panic(new Go$String("internal error: double declaration"));
		}
	};
	go$pkg.init = function() {
		Error.init([["Fset", "", (go$ptrType(token.FileSet)), ""], ["Pos", "", token.Pos, ""], ["Msg", "", Go$String, ""]]);
		Error.methods = [["Error", "", [], [Go$String], false]];
		(go$ptrType(Error)).methods = [["Error", "", [], [Go$String], false]];
		Importer.init([(go$mapType(Go$String, (go$ptrType(Package)))), Go$String], [(go$ptrType(Package)), go$error], false);
		Config.init([["IgnoreFuncBodies", "", Go$Bool, ""], ["FakeImportC", "", Go$Bool, ""], ["Packages", "", (go$mapType(Go$String, (go$ptrType(Package)))), ""], ["Error", "", (go$funcType([go$error], [], false)), ""], ["Import", "", Importer, ""], ["Sizes", "", Sizes, ""]]);
		(go$ptrType(Config)).methods = [["Check", "", [Go$String, (go$ptrType(token.FileSet)), (go$sliceType((go$ptrType(ast.File)))), (go$ptrType(Info))], [(go$ptrType(Package)), go$error], false], ["alignof", "code.google.com/p/go.tools/go/types", [Type], [Go$Int64], false], ["offsetof", "code.google.com/p/go.tools/go/types", [Type, (go$sliceType(Go$Int))], [Go$Int64], false], ["offsetsof", "code.google.com/p/go.tools/go/types", [(go$ptrType(Struct))], [(go$sliceType(Go$Int64))], false], ["sizeof", "code.google.com/p/go.tools/go/types", [Type], [Go$Int64], false]];
		TypeAndValue.init([["Type", "", Type, ""], ["Value", "", exact.Value, ""]]);
		Info.init([["Types", "", (go$mapType(ast.Expr, TypeAndValue)), ""], ["Defs", "", (go$mapType((go$ptrType(ast.Ident)), Object)), ""], ["Uses", "", (go$mapType((go$ptrType(ast.Ident)), Object)), ""], ["Implicits", "", (go$mapType(ast.Node, Object)), ""], ["Selections", "", (go$mapType((go$ptrType(ast.SelectorExpr)), (go$ptrType(Selection)))), ""], ["Scopes", "", (go$mapType(ast.Node, (go$ptrType(Scope)))), ""], ["InitOrder", "", (go$sliceType((go$ptrType(Initializer)))), ""]]);
		Initializer.init([["Lhs", "", (go$sliceType((go$ptrType(Var)))), ""], ["Rhs", "", ast.Expr, ""]]);
		(go$ptrType(Initializer)).methods = [["String", "", [], [Go$String], false]];
		getter.init([(go$ptrType(operand)), Go$Int], [], false);
		exprInfo.init([["isLhs", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["typ", "code.google.com/p/go.tools/go/types", (go$ptrType(Basic)), ""], ["val", "code.google.com/p/go.tools/go/types", exact.Value, ""]]);
		context.init([["decl", "code.google.com/p/go.tools/go/types", (go$ptrType(declInfo)), ""], ["scope", "code.google.com/p/go.tools/go/types", (go$ptrType(Scope)), ""], ["iota", "code.google.com/p/go.tools/go/types", exact.Value, ""], ["sig", "code.google.com/p/go.tools/go/types", (go$ptrType(Signature)), ""], ["hasLabel", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["hasCallOrRecv", "code.google.com/p/go.tools/go/types", Go$Bool, ""]]);
		checker.init([["conf", "code.google.com/p/go.tools/go/types", (go$ptrType(Config)), ""], ["fset", "code.google.com/p/go.tools/go/types", (go$ptrType(token.FileSet)), ""], ["pkg", "code.google.com/p/go.tools/go/types", (go$ptrType(Package)), ""], ["", "", (go$ptrType(Info)), ""], ["firstErr", "code.google.com/p/go.tools/go/types", go$error, ""], ["methods", "code.google.com/p/go.tools/go/types", (go$mapType(Go$String, (go$sliceType((go$ptrType(Func)))))), ""], ["untyped", "code.google.com/p/go.tools/go/types", (go$mapType(ast.Expr, exprInfo)), ""], ["funcs", "code.google.com/p/go.tools/go/types", (go$sliceType(funcInfo)), ""], ["delayed", "code.google.com/p/go.tools/go/types", (go$sliceType((go$funcType([], [], false)))), ""], ["objMap", "code.google.com/p/go.tools/go/types", (go$mapType(Object, (go$ptrType(declInfo)))), ""], ["initMap", "code.google.com/p/go.tools/go/types", (go$mapType(Object, (go$ptrType(declInfo)))), ""], ["", "code.google.com/p/go.tools/go/types", context, ""], ["indent", "code.google.com/p/go.tools/go/types", Go$Int, ""]]);
		(go$ptrType(checker)).methods = [["addDeclDep", "code.google.com/p/go.tools/go/types", [Object], [], false], ["argument", "code.google.com/p/go.tools/go/types", [(go$ptrType(Signature)), Go$Int, (go$ptrType(operand)), Go$Bool], [], false], ["arguments", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), (go$ptrType(ast.CallExpr)), (go$ptrType(Signature)), getter, Go$Int], [], false], ["arityMatch", "code.google.com/p/go.tools/go/types", [(go$ptrType(ast.ValueSpec)), (go$ptrType(ast.ValueSpec))], [], false], ["arrayLength", "code.google.com/p/go.tools/go/types", [ast.Expr], [Go$Int64], false], ["assignVar", "code.google.com/p/go.tools/go/types", [ast.Expr, (go$ptrType(operand))], [Type], false], ["assignVars", "code.google.com/p/go.tools/go/types", [(go$sliceType(ast.Expr)), (go$sliceType(ast.Expr))], [], false], ["assignment", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), Type], [Go$Bool], false], ["assocMethod", "code.google.com/p/go.tools/go/types", [Go$String, (go$ptrType(Func))], [], false], ["binary", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), ast.Expr, ast.Expr, token.Token], [], false], ["blockBranches", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope)), (go$ptrType(block)), (go$ptrType(ast.LabeledStmt)), (go$sliceType(ast.Stmt))], [(go$sliceType((go$ptrType(ast.BranchStmt))))], false], ["builtin", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), (go$ptrType(ast.CallExpr)), builtinId], [Go$Bool], false], ["call", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), (go$ptrType(ast.CallExpr))], [exprKind], false], ["caseTypes", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), (go$ptrType(Interface)), (go$sliceType(ast.Expr)), (go$mapType(Type, token.Pos))], [Type], false], ["caseValues", "code.google.com/p/go.tools/go/types", [operand, (go$sliceType(ast.Expr))], [], false], ["closeScope", "code.google.com/p/go.tools/go/types", [], [], false], ["collectParams", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope)), (go$ptrType(ast.FieldList)), Go$Bool], [(go$sliceType((go$ptrType(Var)))), Go$Bool], false], ["comparison", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), (go$ptrType(operand)), token.Token], [], false], ["complexArg", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand))], [Go$Bool], false], ["constDecl", "code.google.com/p/go.tools/go/types", [(go$ptrType(Const)), ast.Expr, ast.Expr], [], false], ["conversion", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), Type], [], false], ["convertUntyped", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), Type], [], false], ["declStmt", "code.google.com/p/go.tools/go/types", [ast.Decl], [], false], ["declare", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope)), (go$ptrType(ast.Ident)), Object], [], false], ["declareInSet", "code.google.com/p/go.tools/go/types", [(go$ptrType(objset)), token.Pos, Object], [Go$Bool], false], ["delay", "code.google.com/p/go.tools/go/types", [(go$funcType([], [], false))], [], false], ["dependencies", "code.google.com/p/go.tools/go/types", [Object, (go$ptrType(declInfo)), (go$sliceType(Object))], [], false], ["dump", "code.google.com/p/go.tools/go/types", [Go$String, (go$sliceType(go$emptyInterface))], [], true], ["err", "code.google.com/p/go.tools/go/types", [token.Pos, Go$String], [], false], ["errorf", "code.google.com/p/go.tools/go/types", [token.Pos, Go$String, (go$sliceType(go$emptyInterface))], [], true], ["expr", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), ast.Expr], [], false], ["exprInternal", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), ast.Expr, Type], [exprKind], false], ["exprOrType", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), ast.Expr], [], false], ["exprWithHint", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), ast.Expr, Type], [], false], ["files", "code.google.com/p/go.tools/go/types", [(go$sliceType((go$ptrType(ast.File))))], [go$error], false], ["funcBody", "code.google.com/p/go.tools/go/types", [(go$ptrType(declInfo)), Go$String, (go$ptrType(Signature)), (go$ptrType(ast.BlockStmt))], [], false], ["funcDecl", "code.google.com/p/go.tools/go/types", [(go$ptrType(Func)), (go$ptrType(declInfo))], [], false], ["funcType", "code.google.com/p/go.tools/go/types", [(go$ptrType(Signature)), (go$ptrType(ast.FieldList)), (go$ptrType(ast.FuncType))], [(go$ptrType(Signature))], false], ["handleBailout", "code.google.com/p/go.tools/go/types", [(go$ptrType(go$error))], [], false], ["ident", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), (go$ptrType(ast.Ident)), (go$ptrType(Named)), (go$sliceType((go$ptrType(TypeName))))], [], false], ["index", "code.google.com/p/go.tools/go/types", [ast.Expr, Go$Int64], [Go$Int64, Go$Bool], false], ["indexedElts", "code.google.com/p/go.tools/go/types", [(go$sliceType(ast.Expr)), Type, Go$Int64], [Go$Int64], false], ["initConst", "code.google.com/p/go.tools/go/types", [(go$ptrType(Const)), (go$ptrType(operand))], [], false], ["initStmt", "code.google.com/p/go.tools/go/types", [ast.Stmt], [], false], ["initVar", "code.google.com/p/go.tools/go/types", [(go$ptrType(Var)), (go$ptrType(operand))], [Type], false], ["initVars", "code.google.com/p/go.tools/go/types", [(go$sliceType((go$ptrType(Var)))), (go$sliceType(ast.Expr)), token.Pos], [], false], ["interfaceType", "code.google.com/p/go.tools/go/types", [(go$ptrType(Interface)), (go$ptrType(ast.InterfaceType)), (go$ptrType(Named)), (go$sliceType((go$ptrType(TypeName))))], [], false], ["invalidAST", "code.google.com/p/go.tools/go/types", [token.Pos, Go$String, (go$sliceType(go$emptyInterface))], [], true], ["invalidArg", "code.google.com/p/go.tools/go/types", [token.Pos, Go$String, (go$sliceType(go$emptyInterface))], [], true], ["invalidOp", "code.google.com/p/go.tools/go/types", [token.Pos, Go$String, (go$sliceType(go$emptyInterface))], [], true], ["isTerminating", "code.google.com/p/go.tools/go/types", [ast.Stmt, Go$String], [Go$Bool], false], ["isTerminatingList", "code.google.com/p/go.tools/go/types", [(go$sliceType(ast.Stmt)), Go$String], [Go$Bool], false], ["isTerminatingSwitch", "code.google.com/p/go.tools/go/types", [(go$ptrType(ast.BlockStmt)), Go$String], [Go$Bool], false], ["labels", "code.google.com/p/go.tools/go/types", [(go$ptrType(ast.BlockStmt))], [], false], ["multipleDefaults", "code.google.com/p/go.tools/go/types", [(go$sliceType(ast.Stmt))], [], false], ["objDecl", "code.google.com/p/go.tools/go/types", [Object, (go$ptrType(Named)), (go$sliceType((go$ptrType(TypeName))))], [], false], ["op", "code.google.com/p/go.tools/go/types", [opPredicates, (go$ptrType(operand)), token.Token], [Go$Bool], false], ["openScope", "code.google.com/p/go.tools/go/types", [ast.Stmt], [], false], ["rawExpr", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), ast.Expr, Type], [exprKind], false], ["recordBuiltinType", "code.google.com/p/go.tools/go/types", [ast.Expr, (go$ptrType(Signature))], [], false], ["recordCommaOkTypes", "code.google.com/p/go.tools/go/types", [ast.Expr, (go$arrayType(Type, 2))], [], false], ["recordDef", "code.google.com/p/go.tools/go/types", [(go$ptrType(ast.Ident)), Object], [], false], ["recordImplicit", "code.google.com/p/go.tools/go/types", [ast.Node, Object], [], false], ["recordScope", "code.google.com/p/go.tools/go/types", [ast.Node, (go$ptrType(Scope))], [], false], ["recordSelection", "code.google.com/p/go.tools/go/types", [(go$ptrType(ast.SelectorExpr)), SelectionKind, Type, Object, (go$sliceType(Go$Int)), Go$Bool], [], false], ["recordTypeAndValue", "code.google.com/p/go.tools/go/types", [ast.Expr, Type, exact.Value], [], false], ["recordUse", "code.google.com/p/go.tools/go/types", [(go$ptrType(ast.Ident)), Object], [], false], ["rememberUntyped", "code.google.com/p/go.tools/go/types", [ast.Expr, Go$Bool, (go$ptrType(Basic)), exact.Value], [], false], ["reportAltDecl", "code.google.com/p/go.tools/go/types", [Object], [], false], ["representable", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), (go$ptrType(Basic))], [], false], ["resolveFiles", "code.google.com/p/go.tools/go/types", [(go$sliceType((go$ptrType(ast.File))))], [], false], ["selector", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), (go$ptrType(ast.SelectorExpr))], [], false], ["shift", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), (go$ptrType(operand)), token.Token], [], false], ["shortVarDecl", "code.google.com/p/go.tools/go/types", [token.Pos, (go$sliceType(ast.Expr)), (go$sliceType(ast.Expr))], [], false], ["sprintf", "code.google.com/p/go.tools/go/types", [Go$String, (go$sliceType(go$emptyInterface))], [Go$String], true], ["stmt", "code.google.com/p/go.tools/go/types", [stmtContext, ast.Stmt], [], false], ["stmtList", "code.google.com/p/go.tools/go/types", [stmtContext, (go$sliceType(ast.Stmt))], [], false], ["structType", "code.google.com/p/go.tools/go/types", [(go$ptrType(Struct)), (go$ptrType(ast.StructType)), (go$sliceType((go$ptrType(TypeName))))], [], false], ["suspendedCall", "code.google.com/p/go.tools/go/types", [Go$String, (go$ptrType(ast.CallExpr))], [], false], ["tag", "code.google.com/p/go.tools/go/types", [(go$ptrType(ast.BasicLit))], [Go$String], false], ["trace", "code.google.com/p/go.tools/go/types", [token.Pos, Go$String, (go$sliceType(go$emptyInterface))], [], true], ["typ", "code.google.com/p/go.tools/go/types", [ast.Expr], [Type], false], ["typExpr", "code.google.com/p/go.tools/go/types", [ast.Expr, (go$ptrType(Named)), (go$sliceType((go$ptrType(TypeName))))], [Type], false], ["typExprInternal", "code.google.com/p/go.tools/go/types", [ast.Expr, (go$ptrType(Named)), (go$sliceType((go$ptrType(TypeName))))], [Type], false], ["typOrNil", "code.google.com/p/go.tools/go/types", [ast.Expr], [Type], false], ["typeAssertion", "code.google.com/p/go.tools/go/types", [token.Pos, (go$ptrType(operand)), (go$ptrType(Interface)), Type], [], false], ["typeDecl", "code.google.com/p/go.tools/go/types", [(go$ptrType(TypeName)), ast.Expr, (go$ptrType(Named)), (go$sliceType((go$ptrType(TypeName))))], [], false], ["unary", "code.google.com/p/go.tools/go/types", [(go$ptrType(operand)), token.Token], [], false], ["updateExprType", "code.google.com/p/go.tools/go/types", [ast.Expr, Type, Go$Bool], [], false], ["usage", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false], ["use", "code.google.com/p/go.tools/go/types", [(go$sliceType(ast.Expr))], [], false], ["varDecl", "code.google.com/p/go.tools/go/types", [(go$ptrType(Var)), (go$sliceType((go$ptrType(Var)))), ast.Expr, ast.Expr], [], false]];
		bailout.init([]);
		funcInfo.init([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["decl", "code.google.com/p/go.tools/go/types", (go$ptrType(declInfo)), ""], ["sig", "code.google.com/p/go.tools/go/types", (go$ptrType(Signature)), ""], ["body", "code.google.com/p/go.tools/go/types", (go$ptrType(ast.BlockStmt)), ""]]);
		opPredicates.init(token.Token, (go$funcType([Type], [Go$Bool], false)));
		block.init([["parent", "code.google.com/p/go.tools/go/types", (go$ptrType(block)), ""], ["lstmt", "code.google.com/p/go.tools/go/types", (go$ptrType(ast.LabeledStmt)), ""], ["labels", "code.google.com/p/go.tools/go/types", (go$mapType(Go$String, (go$ptrType(ast.LabeledStmt)))), ""]]);
		(go$ptrType(block)).methods = [["enclosingTarget", "code.google.com/p/go.tools/go/types", [Go$String], [(go$ptrType(ast.LabeledStmt))], false], ["gotoTarget", "code.google.com/p/go.tools/go/types", [Go$String], [(go$ptrType(ast.LabeledStmt))], false], ["insert", "code.google.com/p/go.tools/go/types", [(go$ptrType(ast.LabeledStmt))], [], false]];
		embeddedType.init([["typ", "code.google.com/p/go.tools/go/types", (go$ptrType(Named)), ""], ["index", "code.google.com/p/go.tools/go/types", (go$sliceType(Go$Int)), ""], ["indirect", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["multiples", "code.google.com/p/go.tools/go/types", Go$Bool, ""]]);
		MethodSet.init([["list", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Selection)))), ""]]);
		(go$ptrType(MethodSet)).methods = [["At", "", [Go$Int], [(go$ptrType(Selection))], false], ["Len", "", [], [Go$Int], false], ["Lookup", "", [(go$ptrType(Package)), Go$String], [(go$ptrType(Selection))], false], ["String", "", [], [Go$String], false]];
		fieldSet.init(Go$String, (go$ptrType(Var)));
		fieldSet.methods = [["add", "code.google.com/p/go.tools/go/types", [(go$ptrType(Var)), Go$Bool], [fieldSet], false]];
		(go$ptrType(fieldSet)).methods = [["add", "code.google.com/p/go.tools/go/types", [(go$ptrType(Var)), Go$Bool], [fieldSet], false]];
		methodSet.init(Go$String, (go$ptrType(Selection)));
		methodSet.methods = [["add", "code.google.com/p/go.tools/go/types", [(go$sliceType((go$ptrType(Func)))), (go$sliceType(Go$Int)), Go$Bool, Go$Bool], [methodSet], false]];
		(go$ptrType(methodSet)).methods = [["add", "code.google.com/p/go.tools/go/types", [(go$sliceType((go$ptrType(Func)))), (go$sliceType(Go$Int)), Go$Bool, Go$Bool], [methodSet], false]];
		byUniqueName.init((go$ptrType(Selection)));
		byUniqueName.methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(byUniqueName)).methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		Object.init([["Exported", "", (go$funcType([], [Go$Bool], false))], ["Id", "", (go$funcType([], [Go$String], false))], ["Name", "", (go$funcType([], [Go$String], false))], ["Parent", "", (go$funcType([], [(go$ptrType(Scope))], false))], ["Pkg", "", (go$funcType([], [(go$ptrType(Package))], false))], ["Pos", "", (go$funcType([], [token.Pos], false))], ["String", "", (go$funcType([], [Go$String], false))], ["Type", "", (go$funcType([], [Type], false))], ["isUsed", "code.google.com/p/go.tools/go/types", (go$funcType([], [Go$Bool], false))], ["sameId", "code.google.com/p/go.tools/go/types", (go$funcType([(go$ptrType(Package)), Go$String], [Go$Bool], false))], ["setParent", "code.google.com/p/go.tools/go/types", (go$funcType([(go$ptrType(Scope))], [], false))]]);
		object.init([["parent", "code.google.com/p/go.tools/go/types", (go$ptrType(Scope)), ""], ["pos", "code.google.com/p/go.tools/go/types", token.Pos, ""], ["pkg", "code.google.com/p/go.tools/go/types", (go$ptrType(Package)), ""], ["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["typ", "code.google.com/p/go.tools/go/types", Type, ""], ["used", "code.google.com/p/go.tools/go/types", Go$Bool, ""]]);
		(go$ptrType(object)).methods = [["Exported", "", [], [Go$Bool], false], ["Id", "", [], [Go$String], false], ["Name", "", [], [Go$String], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["Pkg", "", [], [(go$ptrType(Package))], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false], ["isUsed", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["sameId", "code.google.com/p/go.tools/go/types", [(go$ptrType(Package)), Go$String], [Go$Bool], false], ["setParent", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false]];
		PkgName.init([["", "code.google.com/p/go.tools/go/types", object, ""]]);
		(go$ptrType(PkgName)).methods = [["Exported", "", [], [Go$Bool], false], ["Id", "", [], [Go$String], false], ["Name", "", [], [Go$String], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["Pkg", "", [], [(go$ptrType(Package))], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false], ["isUsed", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["sameId", "code.google.com/p/go.tools/go/types", [(go$ptrType(Package)), Go$String], [Go$Bool], false], ["setParent", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false]];
		Const.init([["", "code.google.com/p/go.tools/go/types", object, ""], ["val", "code.google.com/p/go.tools/go/types", exact.Value, ""], ["visited", "code.google.com/p/go.tools/go/types", Go$Bool, ""]]);
		(go$ptrType(Const)).methods = [["Exported", "", [], [Go$Bool], false], ["Id", "", [], [Go$String], false], ["Name", "", [], [Go$String], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["Pkg", "", [], [(go$ptrType(Package))], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false], ["Val", "", [], [exact.Value], false], ["isUsed", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["sameId", "code.google.com/p/go.tools/go/types", [(go$ptrType(Package)), Go$String], [Go$Bool], false], ["setParent", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false]];
		TypeName.init([["", "code.google.com/p/go.tools/go/types", object, ""]]);
		(go$ptrType(TypeName)).methods = [["Exported", "", [], [Go$Bool], false], ["Id", "", [], [Go$String], false], ["Name", "", [], [Go$String], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["Pkg", "", [], [(go$ptrType(Package))], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false], ["isUsed", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["sameId", "code.google.com/p/go.tools/go/types", [(go$ptrType(Package)), Go$String], [Go$Bool], false], ["setParent", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false]];
		Var.init([["", "code.google.com/p/go.tools/go/types", object, ""], ["anonymous", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["visited", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["isField", "code.google.com/p/go.tools/go/types", Go$Bool, ""]]);
		(go$ptrType(Var)).methods = [["Anonymous", "", [], [Go$Bool], false], ["Exported", "", [], [Go$Bool], false], ["Id", "", [], [Go$String], false], ["IsField", "", [], [Go$Bool], false], ["Name", "", [], [Go$String], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["Pkg", "", [], [(go$ptrType(Package))], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false], ["isUsed", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["sameId", "code.google.com/p/go.tools/go/types", [(go$ptrType(Package)), Go$String], [Go$Bool], false], ["setParent", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false]];
		Func.init([["", "code.google.com/p/go.tools/go/types", object, ""]]);
		(go$ptrType(Func)).methods = [["Exported", "", [], [Go$Bool], false], ["FullName", "", [], [Go$String], false], ["Id", "", [], [Go$String], false], ["Name", "", [], [Go$String], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["Pkg", "", [], [(go$ptrType(Package))], false], ["Pos", "", [], [token.Pos], false], ["Scope", "", [], [(go$ptrType(Scope))], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false], ["isUsed", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["sameId", "code.google.com/p/go.tools/go/types", [(go$ptrType(Package)), Go$String], [Go$Bool], false], ["setParent", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false]];
		Label.init([["", "code.google.com/p/go.tools/go/types", object, ""]]);
		(go$ptrType(Label)).methods = [["Exported", "", [], [Go$Bool], false], ["Id", "", [], [Go$String], false], ["Name", "", [], [Go$String], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["Pkg", "", [], [(go$ptrType(Package))], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false], ["isUsed", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["sameId", "code.google.com/p/go.tools/go/types", [(go$ptrType(Package)), Go$String], [Go$Bool], false], ["setParent", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false]];
		Builtin.init([["", "code.google.com/p/go.tools/go/types", object, ""], ["id", "code.google.com/p/go.tools/go/types", builtinId, ""]]);
		(go$ptrType(Builtin)).methods = [["Exported", "", [], [Go$Bool], false], ["Id", "", [], [Go$String], false], ["Name", "", [], [Go$String], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["Pkg", "", [], [(go$ptrType(Package))], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false], ["isUsed", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["sameId", "code.google.com/p/go.tools/go/types", [(go$ptrType(Package)), Go$String], [Go$Bool], false], ["setParent", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false]];
		Nil.init([["", "code.google.com/p/go.tools/go/types", object, ""]]);
		(go$ptrType(Nil)).methods = [["Exported", "", [], [Go$Bool], false], ["Id", "", [], [Go$String], false], ["Name", "", [], [Go$String], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["Pkg", "", [], [(go$ptrType(Package))], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false], ["isUsed", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["sameId", "code.google.com/p/go.tools/go/types", [(go$ptrType(Package)), Go$String], [Go$Bool], false], ["setParent", "code.google.com/p/go.tools/go/types", [(go$ptrType(Scope))], [], false]];
		objset.init(Go$String, Object);
		(go$ptrType(objset)).methods = [["insert", "code.google.com/p/go.tools/go/types", [Object], [Object], false]];
		operand.init([["mode", "code.google.com/p/go.tools/go/types", operandMode, ""], ["expr", "code.google.com/p/go.tools/go/types", ast.Expr, ""], ["typ", "code.google.com/p/go.tools/go/types", Type, ""], ["val", "code.google.com/p/go.tools/go/types", exact.Value, ""], ["id", "code.google.com/p/go.tools/go/types", builtinId, ""]]);
		(go$ptrType(operand)).methods = [["String", "", [], [Go$String], false], ["assignableTo", "code.google.com/p/go.tools/go/types", [(go$ptrType(Config)), Type], [Go$Bool], false], ["convertibleTo", "code.google.com/p/go.tools/go/types", [(go$ptrType(Config)), Type], [Go$Bool], false], ["isInteger", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["isNil", "code.google.com/p/go.tools/go/types", [], [Go$Bool], false], ["pos", "code.google.com/p/go.tools/go/types", [], [token.Pos], false], ["setConst", "code.google.com/p/go.tools/go/types", [token.Token, Go$String], [], false]];
		Package.init([["path", "code.google.com/p/go.tools/go/types", Go$String, ""], ["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["scope", "code.google.com/p/go.tools/go/types", (go$ptrType(Scope)), ""], ["complete", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["imports", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Package)))), ""], ["fake", "code.google.com/p/go.tools/go/types", Go$Bool, ""]]);
		(go$ptrType(Package)).methods = [["Complete", "", [], [Go$Bool], false], ["Imports", "", [], [(go$sliceType((go$ptrType(Package))))], false], ["MarkComplete", "", [], [], false], ["Name", "", [], [Go$String], false], ["Path", "", [], [Go$String], false], ["Scope", "", [], [(go$ptrType(Scope))], false], ["SetImports", "", [(go$sliceType((go$ptrType(Package))))], [], false], ["String", "", [], [Go$String], false]];
		ifacePair.init([["x", "code.google.com/p/go.tools/go/types", (go$ptrType(Interface)), ""], ["y", "code.google.com/p/go.tools/go/types", (go$ptrType(Interface)), ""], ["prev", "code.google.com/p/go.tools/go/types", (go$ptrType(ifacePair)), ""]]);
		(go$ptrType(ifacePair)).methods = [["identical", "code.google.com/p/go.tools/go/types", [(go$ptrType(ifacePair))], [Go$Bool], false]];
		declInfo.init([["file", "code.google.com/p/go.tools/go/types", (go$ptrType(Scope)), ""], ["lhs", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Var)))), ""], ["typ", "code.google.com/p/go.tools/go/types", ast.Expr, ""], ["init", "code.google.com/p/go.tools/go/types", ast.Expr, ""], ["fdecl", "code.google.com/p/go.tools/go/types", (go$ptrType(ast.FuncDecl)), ""], ["deps", "code.google.com/p/go.tools/go/types", (go$mapType(Object, (go$ptrType(declInfo)))), ""], ["mark", "code.google.com/p/go.tools/go/types", Go$Int, ""]]);
		inSourceOrder.init(Object);
		inSourceOrder.methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(inSourceOrder)).methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		Scope.init([["parent", "code.google.com/p/go.tools/go/types", (go$ptrType(Scope)), ""], ["children", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Scope)))), ""], ["elems", "code.google.com/p/go.tools/go/types", (go$mapType(Go$String, Object)), ""]]);
		(go$ptrType(Scope)).methods = [["Child", "", [Go$Int], [(go$ptrType(Scope))], false], ["Insert", "", [Object], [Object], false], ["Len", "", [], [Go$Int], false], ["Lookup", "", [Go$String], [Object], false], ["LookupParent", "", [Go$String], [Object], false], ["Names", "", [], [(go$sliceType(Go$String))], false], ["NumChildren", "", [], [Go$Int], false], ["Parent", "", [], [(go$ptrType(Scope))], false], ["String", "", [], [Go$String], false], ["WriteTo", "", [io.Writer, Go$Int, Go$Bool], [], false]];
		Selection.init([["kind", "code.google.com/p/go.tools/go/types", SelectionKind, ""], ["recv", "code.google.com/p/go.tools/go/types", Type, ""], ["obj", "code.google.com/p/go.tools/go/types", Object, ""], ["index", "code.google.com/p/go.tools/go/types", (go$sliceType(Go$Int)), ""], ["indirect", "code.google.com/p/go.tools/go/types", Go$Bool, ""]]);
		(go$ptrType(Selection)).methods = [["Index", "", [], [(go$sliceType(Go$Int))], false], ["Indirect", "", [], [Go$Bool], false], ["Kind", "", [], [SelectionKind], false], ["Obj", "", [], [Object], false], ["Recv", "", [], [Type], false], ["String", "", [], [Go$String], false], ["Type", "", [], [Type], false]];
		Sizes.init([["Alignof", "", (go$funcType([Type], [Go$Int64], false))], ["Offsetsof", "", (go$funcType([(go$sliceType((go$ptrType(Var))))], [(go$sliceType(Go$Int64))], false))], ["Sizeof", "", (go$funcType([Type], [Go$Int64], false))]]);
		StdSizes.init([["WordSize", "", Go$Int64, ""], ["MaxAlign", "", Go$Int64, ""]]);
		(go$ptrType(StdSizes)).methods = [["Alignof", "", [Type], [Go$Int64], false], ["Offsetsof", "", [(go$sliceType((go$ptrType(Var))))], [(go$sliceType(Go$Int64))], false], ["Sizeof", "", [Type], [Go$Int64], false]];
		Type.init([["String", "", (go$funcType([], [Go$String], false))], ["Underlying", "", (go$funcType([], [Type], false))]]);
		Basic.init([["kind", "code.google.com/p/go.tools/go/types", BasicKind, ""], ["info", "code.google.com/p/go.tools/go/types", BasicInfo, ""], ["name", "code.google.com/p/go.tools/go/types", Go$String, ""]]);
		(go$ptrType(Basic)).methods = [["Info", "", [], [BasicInfo], false], ["Kind", "", [], [BasicKind], false], ["Name", "", [], [Go$String], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false]];
		Array.init([["len", "code.google.com/p/go.tools/go/types", Go$Int64, ""], ["elem", "code.google.com/p/go.tools/go/types", Type, ""]]);
		(go$ptrType(Array)).methods = [["Elem", "", [], [Type], false], ["Len", "", [], [Go$Int64], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false]];
		Slice.init([["elem", "code.google.com/p/go.tools/go/types", Type, ""]]);
		(go$ptrType(Slice)).methods = [["Elem", "", [], [Type], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false]];
		Struct.init([["fields", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Var)))), ""], ["tags", "code.google.com/p/go.tools/go/types", (go$sliceType(Go$String)), ""], ["offsets", "code.google.com/p/go.tools/go/types", (go$sliceType(Go$Int64)), ""]]);
		(go$ptrType(Struct)).methods = [["Field", "", [Go$Int], [(go$ptrType(Var))], false], ["NumFields", "", [], [Go$Int], false], ["String", "", [], [Go$String], false], ["Tag", "", [Go$Int], [Go$String], false], ["Underlying", "", [], [Type], false]];
		Pointer.init([["base", "code.google.com/p/go.tools/go/types", Type, ""]]);
		(go$ptrType(Pointer)).methods = [["Elem", "", [], [Type], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false]];
		Tuple.init([["vars", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Var)))), ""]]);
		(go$ptrType(Tuple)).methods = [["At", "", [Go$Int], [(go$ptrType(Var))], false], ["Len", "", [], [Go$Int], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false]];
		Signature.init([["scope", "code.google.com/p/go.tools/go/types", (go$ptrType(Scope)), ""], ["recv", "code.google.com/p/go.tools/go/types", (go$ptrType(Var)), ""], ["params", "code.google.com/p/go.tools/go/types", (go$ptrType(Tuple)), ""], ["results", "code.google.com/p/go.tools/go/types", (go$ptrType(Tuple)), ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""]]);
		(go$ptrType(Signature)).methods = [["Params", "", [], [(go$ptrType(Tuple))], false], ["Recv", "", [], [(go$ptrType(Var))], false], ["Results", "", [], [(go$ptrType(Tuple))], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false], ["Variadic", "", [], [Go$Bool], false]];
		Interface.init([["methods", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Func)))), ""], ["embeddeds", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Named)))), ""], ["allMethods", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Func)))), ""]]);
		(go$ptrType(Interface)).methods = [["Embedded", "", [Go$Int], [(go$ptrType(Named))], false], ["Empty", "", [], [Go$Bool], false], ["ExplicitMethod", "", [Go$Int], [(go$ptrType(Func))], false], ["Method", "", [Go$Int], [(go$ptrType(Func))], false], ["NumEmbeddeds", "", [], [Go$Int], false], ["NumExplicitMethods", "", [], [Go$Int], false], ["NumMethods", "", [], [Go$Int], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false]];
		Map.init([["key", "code.google.com/p/go.tools/go/types", Type, ""], ["elem", "code.google.com/p/go.tools/go/types", Type, ""]]);
		(go$ptrType(Map)).methods = [["Elem", "", [], [Type], false], ["Key", "", [], [Type], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false]];
		Chan.init([["dir", "code.google.com/p/go.tools/go/types", ChanDir, ""], ["elem", "code.google.com/p/go.tools/go/types", Type, ""]]);
		(go$ptrType(Chan)).methods = [["Dir", "", [], [ChanDir], false], ["Elem", "", [], [Type], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false]];
		Named.init([["obj", "code.google.com/p/go.tools/go/types", (go$ptrType(TypeName)), ""], ["underlying", "code.google.com/p/go.tools/go/types", Type, ""], ["methods", "code.google.com/p/go.tools/go/types", (go$sliceType((go$ptrType(Func)))), ""]]);
		(go$ptrType(Named)).methods = [["AddMethod", "", [(go$ptrType(Func))], [], false], ["Method", "", [Go$Int], [(go$ptrType(Func))], false], ["NumMethods", "", [], [Go$Int], false], ["Obj", "", [], [(go$ptrType(TypeName))], false], ["SetUnderlying", "", [Type], [], false], ["String", "", [], [Go$String], false], ["Underlying", "", [], [Type], false], ["setUnderlying", "code.google.com/p/go.tools/go/types", [Type], [], false]];
		byUniqueTypeName.init((go$ptrType(Named)));
		byUniqueTypeName.methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(byUniqueTypeName)).methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		byUniqueMethodName.init((go$ptrType(Func)));
		byUniqueMethodName.methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(byUniqueMethodName)).methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		go$pkg.DefaultImport = go$throwNilPointerError;
		emptyMethodSet = new MethodSet.Ptr();
		go$pkg.GcCompatibilityMode = false;
		go$pkg.Universe = (go$ptrType(Scope)).nil;
		go$pkg.Unsafe = (go$ptrType(Package)).nil;
		universeIota = (go$ptrType(Const)).nil;
		go$pkg.UniverseByte = (go$ptrType(Basic)).nil;
		go$pkg.UniverseRune = (go$ptrType(Basic)).nil;
		var _map, _key;
		unaryOpPredicates = (_map = new Go$Map(), _key = 12, _map[_key] = { k: _key, v: isNumeric }, _key = 13, _map[_key] = { k: _key, v: isNumeric }, _key = 19, _map[_key] = { k: _key, v: isInteger }, _key = 43, _map[_key] = { k: _key, v: isBoolean }, _map);
		var _map$1, _key$1;
		binaryOpPredicates = (_map$1 = new Go$Map(), _key$1 = 12, _map$1[_key$1] = { k: _key$1, v: (function(typ) {
			return isNumeric(typ) || isString(typ);
		}) }, _key$1 = 13, _map$1[_key$1] = { k: _key$1, v: isNumeric }, _key$1 = 14, _map$1[_key$1] = { k: _key$1, v: isNumeric }, _key$1 = 15, _map$1[_key$1] = { k: _key$1, v: isNumeric }, _key$1 = 16, _map$1[_key$1] = { k: _key$1, v: isInteger }, _key$1 = 17, _map$1[_key$1] = { k: _key$1, v: isInteger }, _key$1 = 18, _map$1[_key$1] = { k: _key$1, v: isInteger }, _key$1 = 19, _map$1[_key$1] = { k: _key$1, v: isInteger }, _key$1 = 22, _map$1[_key$1] = { k: _key$1, v: isInteger }, _key$1 = 34, _map$1[_key$1] = { k: _key$1, v: isBoolean }, _key$1 = 35, _map$1[_key$1] = { k: _key$1, v: isBoolean }, _map$1);
		operandModeString = go$toNativeArray("String", ["invalid operand", "no value", "built-in", "type", "constant", "variable", "map index expression", "value", "comma, ok expression"]);
		basicSizes = go$toNativeArray("Uint8", [0, 1, 0, 1, 2, 4, 8, 0, 1, 2, 4, 8, 0, 4, 8, 8, 16]);
		stdSizes = new StdSizes.Ptr(new Go$Int64(0, 8), new Go$Int64(0, 8));
		go$pkg.Typ = go$toNativeArray("Ptr", [new Basic.Ptr(0, 0, "invalid type"), new Basic.Ptr(1, 1, "bool"), new Basic.Ptr(2, 2, "int"), new Basic.Ptr(3, 2, "int8"), new Basic.Ptr(4, 2, "int16"), new Basic.Ptr(5, 2, "int32"), new Basic.Ptr(6, 2, "int64"), new Basic.Ptr(7, 6, "uint"), new Basic.Ptr(8, 6, "uint8"), new Basic.Ptr(9, 6, "uint16"), new Basic.Ptr(10, 6, "uint32"), new Basic.Ptr(11, 6, "uint64"), new Basic.Ptr(12, 6, "uintptr"), new Basic.Ptr(13, 8, "float32"), new Basic.Ptr(14, 8, "float64"), new Basic.Ptr(15, 16, "complex64"), new Basic.Ptr(16, 16, "complex128"), new Basic.Ptr(17, 32, "string"), new Basic.Ptr(18, 0, "Pointer"), new Basic.Ptr(19, 65, "untyped bool"), new Basic.Ptr(20, 66, "untyped int"), new Basic.Ptr(21, 66, "untyped rune"), new Basic.Ptr(22, 72, "untyped float"), new Basic.Ptr(23, 80, "untyped complex"), new Basic.Ptr(24, 96, "untyped string"), new Basic.Ptr(25, 64, "untyped nil")]);
		aliases = go$toNativeArray("Ptr", [new Basic.Ptr(8, 6, "byte"), new Basic.Ptr(5, 2, "rune")]);
		predeclaredConsts = go$toNativeArray("Struct", [new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["kind", "code.google.com/p/go.tools/go/types", BasicKind, ""], ["val", "code.google.com/p/go.tools/go/types", exact.Value, ""]])).Ptr("true", 19, exact.MakeBool(true)), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["kind", "code.google.com/p/go.tools/go/types", BasicKind, ""], ["val", "code.google.com/p/go.tools/go/types", exact.Value, ""]])).Ptr("false", 19, exact.MakeBool(false)), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["kind", "code.google.com/p/go.tools/go/types", BasicKind, ""], ["val", "code.google.com/p/go.tools/go/types", exact.Value, ""]])).Ptr("iota", 20, exact.MakeInt64(new Go$Int64(0, 0)))]);
		predeclaredFuncs = go$toNativeArray("Struct", [new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("append", 1, true, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("cap", 1, false, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("close", 1, false, 2), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("complex", 2, false, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("copy", 2, false, 2), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("delete", 2, false, 2), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("imag", 1, false, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("len", 1, false, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("make", 1, true, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("new", 1, false, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("panic", 1, false, 2), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("print", 0, true, 2), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("println", 0, true, 2), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("real", 1, false, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("recover", 0, false, 2), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("Alignof", 1, false, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("Offsetof", 1, false, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("Sizeof", 1, false, 1), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("assert", 1, false, 2), new (go$structType([["name", "code.google.com/p/go.tools/go/types", Go$String, ""], ["nargs", "code.google.com/p/go.tools/go/types", Go$Int, ""], ["variadic", "code.google.com/p/go.tools/go/types", Go$Bool, ""], ["kind", "code.google.com/p/go.tools/go/types", exprKind, ""]])).Ptr("trace", 0, true, 2)]);
		var x, x$1, x$2, x$3, x$4;
		go$pkg.Universe = NewScope((go$ptrType(Scope)).nil);
		go$pkg.Unsafe = NewPackage("unsafe", "unsafe");
		go$pkg.Unsafe.complete = true;
		defPredeclaredTypes();
		defPredeclaredConsts();
		defPredeclaredNil();
		defPredeclaredFuncs();
		universeIota = (x = go$pkg.Universe.Lookup("iota"), (x !== null && x.constructor === (go$ptrType(Const)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(Const)))));
		go$pkg.UniverseByte = (x$1 = (x$2 = go$pkg.Universe.Lookup("byte"), (x$2 !== null && x$2.constructor === (go$ptrType(TypeName)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(TypeName))))).object.typ, (x$1 !== null && x$1.constructor === (go$ptrType(Basic)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(Basic)))));
		go$pkg.UniverseRune = (x$3 = (x$4 = go$pkg.Universe.Lookup("rune"), (x$4 !== null && x$4.constructor === (go$ptrType(TypeName)) ? x$4.go$val : go$typeAssertionFailed(x$4, (go$ptrType(TypeName))))).object.typ, (x$3 !== null && x$3.constructor === (go$ptrType(Basic)) ? x$3.go$val : go$typeAssertionFailed(x$3, (go$ptrType(Basic)))));
	}
	return go$pkg;
})();
go$packages["path"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], strings = go$packages["strings"], utf8 = go$packages["unicode/utf8"], Split;
	Split = go$pkg.Split = function(path) {
		var dir, file, i, _tuple;
		dir = "";
		file = "";
		i = strings.LastIndex(path, "/");
		_tuple = [path.substring(0, (i + 1 >> 0)), path.substring((i + 1 >> 0))], dir = _tuple[0], file = _tuple[1];
		return [dir, file];
	};
	go$pkg.init = function() {
		go$pkg.ErrBadPattern = errors.New("syntax error in pattern");
	}
	return go$pkg;
})();
go$packages["regexp/syntax"] = (function() {
	var go$pkg = {}, unicode = go$packages["unicode"], sort = go$packages["sort"], strings = go$packages["strings"], utf8 = go$packages["unicode/utf8"], bytes = go$packages["bytes"], strconv = go$packages["strconv"], patchList, frag, compiler, Error, ErrorCode, Flags, parser, charGroup, ranges, Prog, InstOp, EmptyOp, Inst, Regexp, Op, Compile, minFoldRune, cleanAlt, literalRegexp, Parse, isValidCaptureName, isCharClass, matchRune, mergeCharClass, unicodeTable, cleanClass, appendLiteral, appendRange, appendFoldedRange, appendClass, appendFoldedClass, appendNegatedClass, appendTable, appendNegatedTable, negateClass, checkUTF8, nextRune, isalnum, unhex, EmptyOpContext, IsWordChar, wordRune, bw, dumpProg, u32, dumpInst, writeRegexp, escape, simplify1, anyRuneNotNL, anyRune, anyTable, code1, code2, code3, perlGroup, code4, code5, code6, code7, code8, code9, code10, code11, code12, code13, code14, code15, code16, code17, posixGroup;
	patchList = go$pkg.patchList = go$newType(4, "Uint32", "syntax.patchList", "patchList", "regexp/syntax", null);
	frag = go$pkg.frag = go$newType(0, "Struct", "syntax.frag", "frag", "regexp/syntax", function(i_, out_) {
		this.go$val = this;
		this.i = i_ !== undefined ? i_ : 0;
		this.out = out_ !== undefined ? out_ : 0;
	});
	compiler = go$pkg.compiler = go$newType(0, "Struct", "syntax.compiler", "compiler", "regexp/syntax", function(p_) {
		this.go$val = this;
		this.p = p_ !== undefined ? p_ : (go$ptrType(Prog)).nil;
	});
	Error = go$pkg.Error = go$newType(0, "Struct", "syntax.Error", "Error", "regexp/syntax", function(Code_, Expr_) {
		this.go$val = this;
		this.Code = Code_ !== undefined ? Code_ : "";
		this.Expr = Expr_ !== undefined ? Expr_ : "";
	});
	ErrorCode = go$pkg.ErrorCode = go$newType(0, "String", "syntax.ErrorCode", "ErrorCode", "regexp/syntax", null);
	Flags = go$pkg.Flags = go$newType(2, "Uint16", "syntax.Flags", "Flags", "regexp/syntax", null);
	parser = go$pkg.parser = go$newType(0, "Struct", "syntax.parser", "parser", "regexp/syntax", function(flags_, stack_, free_, numCap_, wholeRegexp_, tmpClass_) {
		this.go$val = this;
		this.flags = flags_ !== undefined ? flags_ : 0;
		this.stack = stack_ !== undefined ? stack_ : (go$sliceType((go$ptrType(Regexp)))).nil;
		this.free = free_ !== undefined ? free_ : (go$ptrType(Regexp)).nil;
		this.numCap = numCap_ !== undefined ? numCap_ : 0;
		this.wholeRegexp = wholeRegexp_ !== undefined ? wholeRegexp_ : "";
		this.tmpClass = tmpClass_ !== undefined ? tmpClass_ : (go$sliceType(Go$Int32)).nil;
	});
	charGroup = go$pkg.charGroup = go$newType(0, "Struct", "syntax.charGroup", "charGroup", "regexp/syntax", function(sign_, class$1_) {
		this.go$val = this;
		this.sign = sign_ !== undefined ? sign_ : 0;
		this.class$1 = class$1_ !== undefined ? class$1_ : (go$sliceType(Go$Int32)).nil;
	});
	ranges = go$pkg.ranges = go$newType(0, "Struct", "syntax.ranges", "ranges", "regexp/syntax", function(p_) {
		this.go$val = this;
		this.p = p_ !== undefined ? p_ : (go$ptrType((go$sliceType(Go$Int32)))).nil;
	});
	Prog = go$pkg.Prog = go$newType(0, "Struct", "syntax.Prog", "Prog", "regexp/syntax", function(Inst_, Start_, NumCap_) {
		this.go$val = this;
		this.Inst = Inst_ !== undefined ? Inst_ : (go$sliceType(Inst)).nil;
		this.Start = Start_ !== undefined ? Start_ : 0;
		this.NumCap = NumCap_ !== undefined ? NumCap_ : 0;
	});
	InstOp = go$pkg.InstOp = go$newType(1, "Uint8", "syntax.InstOp", "InstOp", "regexp/syntax", null);
	EmptyOp = go$pkg.EmptyOp = go$newType(1, "Uint8", "syntax.EmptyOp", "EmptyOp", "regexp/syntax", null);
	Inst = go$pkg.Inst = go$newType(0, "Struct", "syntax.Inst", "Inst", "regexp/syntax", function(Op_, Out_, Arg_, Rune_) {
		this.go$val = this;
		this.Op = Op_ !== undefined ? Op_ : 0;
		this.Out = Out_ !== undefined ? Out_ : 0;
		this.Arg = Arg_ !== undefined ? Arg_ : 0;
		this.Rune = Rune_ !== undefined ? Rune_ : (go$sliceType(Go$Int32)).nil;
	});
	Regexp = go$pkg.Regexp = go$newType(0, "Struct", "syntax.Regexp", "Regexp", "regexp/syntax", function(Op_, Flags_, Sub_, Sub0_, Rune_, Rune0_, Min_, Max_, Cap_, Name_) {
		this.go$val = this;
		this.Op = Op_ !== undefined ? Op_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Sub = Sub_ !== undefined ? Sub_ : (go$sliceType((go$ptrType(Regexp)))).nil;
		this.Sub0 = Sub0_ !== undefined ? Sub0_ : go$makeNativeArray("Ptr", 1, function() { return (go$ptrType(Regexp)).nil; });
		this.Rune = Rune_ !== undefined ? Rune_ : (go$sliceType(Go$Int32)).nil;
		this.Rune0 = Rune0_ !== undefined ? Rune0_ : go$makeNativeArray("Int32", 2, function() { return 0; });
		this.Min = Min_ !== undefined ? Min_ : 0;
		this.Max = Max_ !== undefined ? Max_ : 0;
		this.Cap = Cap_ !== undefined ? Cap_ : 0;
		this.Name = Name_ !== undefined ? Name_ : "";
	});
	Op = go$pkg.Op = go$newType(1, "Uint8", "syntax.Op", "Op", "regexp/syntax", null);
	patchList.prototype.next = function(p) {
		var l, _slice, _index, i;
		l = this.go$val;
		i = (_slice = p.Inst, _index = (l >>> 1 >>> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (((l & 1) >>> 0) === 0) {
			return (i.Out >>> 0);
		}
		return (i.Arg >>> 0);
	};
	go$ptrType(patchList).prototype.next = function(p) { return new patchList(this.go$get()).next(p); };
	patchList.prototype.patch = function(p, val) {
		var l, _slice, _index, i;
		l = this.go$val;
		while (!((l === 0))) {
			i = (_slice = p.Inst, _index = (l >>> 1 >>> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (((l & 1) >>> 0) === 0) {
				l = (i.Out >>> 0);
				i.Out = val;
			} else {
				l = (i.Arg >>> 0);
				i.Arg = val;
			}
		}
	};
	go$ptrType(patchList).prototype.patch = function(p, val) { return new patchList(this.go$get()).patch(p, val); };
	patchList.prototype.append = function(p, l2) {
		var l1, last, next, _slice, _index, i;
		l1 = this.go$val;
		if (l1 === 0) {
			return l2;
		}
		if (l2 === 0) {
			return l1;
		}
		last = l1;
		while (true) {
			next = (new patchList(last)).next(p);
			if (next === 0) {
				break;
			}
			last = next;
		}
		i = (_slice = p.Inst, _index = (last >>> 1 >>> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (((last & 1) >>> 0) === 0) {
			i.Out = (l2 >>> 0);
		} else {
			i.Arg = (l2 >>> 0);
		}
		return l1;
	};
	go$ptrType(patchList).prototype.append = function(p, l2) { return new patchList(this.go$get()).append(p, l2); };
	Compile = go$pkg.Compile = function(re) {
		var c, _struct, f;
		c = new compiler.Ptr();
		c.init();
		f = (_struct = c.compile(re), new frag.Ptr(_struct.i, _struct.out));
		(new patchList(f.out)).patch(c.p, c.inst(4).i);
		c.p.Start = (f.i >> 0);
		return [c.p, null];
	};
	compiler.Ptr.prototype.init = function() {
		var c;
		c = this;
		c.p = new Prog.Ptr();
		c.p.NumCap = 2;
		c.inst(5);
	};
	compiler.prototype.init = function() { return this.go$val.init(); };
	compiler.Ptr.prototype.compile = function(re) {
		var c, _ref, _struct, _struct$1, _struct$2, f, _ref$1, _i, j, _struct$3, f1, _struct$4, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, _struct$10, _struct$11, _struct$12, _struct$13, _struct$14, _struct$15, _struct$16, _struct$17, _struct$18, bra, _slice, _index, _struct$19, sub, _struct$20, ket, _struct$21, _struct$22, _struct$23, _struct$24, _struct$25, _slice$1, _index$1, _struct$26, _struct$27, _slice$2, _index$2, _struct$28, _struct$29, _slice$3, _index$3, _struct$30, _struct$31, _struct$32, f$1, _ref$2, _i$1, _slice$4, _index$4, sub$1, i, _struct$33, _struct$34, _struct$35, _struct$36, _struct$37, f$2, _ref$3, _i$2, _slice$5, _index$5, sub$2, _struct$38, _struct$39, _struct$40, _struct$41;
		c = this;
		_ref = re.Op;
		if (_ref === 1) {
			return (_struct = c.fail(), new frag.Ptr(_struct.i, _struct.out));
		} else if (_ref === 2) {
			return (_struct$1 = c.nop(), new frag.Ptr(_struct$1.i, _struct$1.out));
		} else if (_ref === 3) {
			if (re.Rune.length === 0) {
				return (_struct$2 = c.nop(), new frag.Ptr(_struct$2.i, _struct$2.out));
			}
			f = new frag.Ptr();
			_ref$1 = re.Rune;
			_i = 0;
			while (_i < _ref$1.length) {
				j = _i;
				f1 = (_struct$3 = c.rune(go$subslice(re.Rune, j, (j + 1 >> 0)), re.Flags), new frag.Ptr(_struct$3.i, _struct$3.out));
				if (j === 0) {
					f = (_struct$4 = f1, new frag.Ptr(_struct$4.i, _struct$4.out));
				} else {
					f = (_struct$7 = c.cat((_struct$5 = f, new frag.Ptr(_struct$5.i, _struct$5.out)), (_struct$6 = f1, new frag.Ptr(_struct$6.i, _struct$6.out))), new frag.Ptr(_struct$7.i, _struct$7.out));
				}
				_i++;
			}
			return (_struct$8 = f, new frag.Ptr(_struct$8.i, _struct$8.out));
		} else if (_ref === 4) {
			return (_struct$9 = c.rune(re.Rune, re.Flags), new frag.Ptr(_struct$9.i, _struct$9.out));
		} else if (_ref === 5) {
			return (_struct$10 = c.rune(anyRuneNotNL, 0), new frag.Ptr(_struct$10.i, _struct$10.out));
		} else if (_ref === 6) {
			return (_struct$11 = c.rune(anyRune, 0), new frag.Ptr(_struct$11.i, _struct$11.out));
		} else if (_ref === 7) {
			return (_struct$12 = c.empty(1), new frag.Ptr(_struct$12.i, _struct$12.out));
		} else if (_ref === 8) {
			return (_struct$13 = c.empty(2), new frag.Ptr(_struct$13.i, _struct$13.out));
		} else if (_ref === 9) {
			return (_struct$14 = c.empty(4), new frag.Ptr(_struct$14.i, _struct$14.out));
		} else if (_ref === 10) {
			return (_struct$15 = c.empty(8), new frag.Ptr(_struct$15.i, _struct$15.out));
		} else if (_ref === 11) {
			return (_struct$16 = c.empty(16), new frag.Ptr(_struct$16.i, _struct$16.out));
		} else if (_ref === 12) {
			return (_struct$17 = c.empty(32), new frag.Ptr(_struct$17.i, _struct$17.out));
		} else if (_ref === 13) {
			bra = (_struct$18 = c.cap(((re.Cap << 1 >> 0) >>> 0)), new frag.Ptr(_struct$18.i, _struct$18.out));
			sub = (_struct$19 = c.compile((_slice = re.Sub, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))), new frag.Ptr(_struct$19.i, _struct$19.out));
			ket = (_struct$20 = c.cap((((re.Cap << 1 >> 0) | 1) >>> 0)), new frag.Ptr(_struct$20.i, _struct$20.out));
			return (_struct$25 = c.cat((_struct$23 = c.cat((_struct$21 = bra, new frag.Ptr(_struct$21.i, _struct$21.out)), (_struct$22 = sub, new frag.Ptr(_struct$22.i, _struct$22.out))), new frag.Ptr(_struct$23.i, _struct$23.out)), (_struct$24 = ket, new frag.Ptr(_struct$24.i, _struct$24.out))), new frag.Ptr(_struct$25.i, _struct$25.out));
		} else if (_ref === 14) {
			return (_struct$27 = c.star((_struct$26 = c.compile((_slice$1 = re.Sub, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))), new frag.Ptr(_struct$26.i, _struct$26.out)), !((((re.Flags & 32) >>> 0) === 0))), new frag.Ptr(_struct$27.i, _struct$27.out));
		} else if (_ref === 15) {
			return (_struct$29 = c.plus((_struct$28 = c.compile((_slice$2 = re.Sub, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))), new frag.Ptr(_struct$28.i, _struct$28.out)), !((((re.Flags & 32) >>> 0) === 0))), new frag.Ptr(_struct$29.i, _struct$29.out));
		} else if (_ref === 16) {
			return (_struct$31 = c.quest((_struct$30 = c.compile((_slice$3 = re.Sub, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))), new frag.Ptr(_struct$30.i, _struct$30.out)), !((((re.Flags & 32) >>> 0) === 0))), new frag.Ptr(_struct$31.i, _struct$31.out));
		} else if (_ref === 18) {
			if (re.Sub.length === 0) {
				return (_struct$32 = c.nop(), new frag.Ptr(_struct$32.i, _struct$32.out));
			}
			f$1 = new frag.Ptr();
			_ref$2 = re.Sub;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				sub$1 = (_slice$4 = _ref$2, _index$4 = _i$1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
				i = _i$1;
				if (i === 0) {
					f$1 = (_struct$33 = c.compile(sub$1), new frag.Ptr(_struct$33.i, _struct$33.out));
				} else {
					f$1 = (_struct$36 = c.cat((_struct$34 = f$1, new frag.Ptr(_struct$34.i, _struct$34.out)), (_struct$35 = c.compile(sub$1), new frag.Ptr(_struct$35.i, _struct$35.out))), new frag.Ptr(_struct$36.i, _struct$36.out));
				}
				_i$1++;
			}
			return (_struct$37 = f$1, new frag.Ptr(_struct$37.i, _struct$37.out));
		} else if (_ref === 19) {
			f$2 = new frag.Ptr();
			_ref$3 = re.Sub;
			_i$2 = 0;
			while (_i$2 < _ref$3.length) {
				sub$2 = (_slice$5 = _ref$3, _index$5 = _i$2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
				f$2 = (_struct$40 = c.alt((_struct$38 = f$2, new frag.Ptr(_struct$38.i, _struct$38.out)), (_struct$39 = c.compile(sub$2), new frag.Ptr(_struct$39.i, _struct$39.out))), new frag.Ptr(_struct$40.i, _struct$40.out));
				_i$2++;
			}
			return (_struct$41 = f$2, new frag.Ptr(_struct$41.i, _struct$41.out));
		}
		throw go$panic(new Go$String("regexp: unhandled case in compile"));
	};
	compiler.prototype.compile = function(re) { return this.go$val.compile(re); };
	compiler.Ptr.prototype.inst = function(op) {
		var c, f, _struct;
		c = this;
		f = new frag.Ptr((c.p.Inst.length >>> 0), 0);
		c.p.Inst = go$append(c.p.Inst, new Inst.Ptr(op, 0, 0, (go$sliceType(Go$Int32)).nil));
		return (_struct = f, new frag.Ptr(_struct.i, _struct.out));
	};
	compiler.prototype.inst = function(op) { return this.go$val.inst(op); };
	compiler.Ptr.prototype.nop = function() {
		var c, _struct, f, _struct$1;
		c = this;
		f = (_struct = c.inst(6), new frag.Ptr(_struct.i, _struct.out));
		f.out = ((f.i << 1 >>> 0) >>> 0);
		return (_struct$1 = f, new frag.Ptr(_struct$1.i, _struct$1.out));
	};
	compiler.prototype.nop = function() { return this.go$val.nop(); };
	compiler.Ptr.prototype.fail = function() {
		var c;
		c = this;
		return new frag.Ptr(0, 0);
	};
	compiler.prototype.fail = function() { return this.go$val.fail(); };
	compiler.Ptr.prototype.cap = function(arg) {
		var c, _struct, f, _slice, _index, _struct$1;
		c = this;
		f = (_struct = c.inst(2), new frag.Ptr(_struct.i, _struct.out));
		f.out = ((f.i << 1 >>> 0) >>> 0);
		(_slice = c.p.Inst, _index = f.i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Arg = arg;
		if (c.p.NumCap < ((arg >> 0) + 1 >> 0)) {
			c.p.NumCap = (arg >> 0) + 1 >> 0;
		}
		return (_struct$1 = f, new frag.Ptr(_struct$1.i, _struct$1.out));
	};
	compiler.prototype.cap = function(arg) { return this.go$val.cap(arg); };
	compiler.Ptr.prototype.cat = function(f1, f2) {
		var c;
		c = this;
		if ((f1.i === 0) || (f2.i === 0)) {
			return new frag.Ptr(0, 0);
		}
		(new patchList(f1.out)).patch(c.p, f2.i);
		return new frag.Ptr(f1.i, f2.out);
	};
	compiler.prototype.cat = function(f1, f2) { return this.go$val.cat(f1, f2); };
	compiler.Ptr.prototype.alt = function(f1, f2) {
		var c, _struct, _struct$1, _struct$2, f, _slice, _index, i, _struct$3;
		c = this;
		if (f1.i === 0) {
			return (_struct = f2, new frag.Ptr(_struct.i, _struct.out));
		}
		if (f2.i === 0) {
			return (_struct$1 = f1, new frag.Ptr(_struct$1.i, _struct$1.out));
		}
		f = (_struct$2 = c.inst(0), new frag.Ptr(_struct$2.i, _struct$2.out));
		i = (_slice = c.p.Inst, _index = f.i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		i.Out = f1.i;
		i.Arg = f2.i;
		f.out = (new patchList(f1.out)).append(c.p, f2.out);
		return (_struct$3 = f, new frag.Ptr(_struct$3.i, _struct$3.out));
	};
	compiler.prototype.alt = function(f1, f2) { return this.go$val.alt(f1, f2); };
	compiler.Ptr.prototype.quest = function(f1, nongreedy) {
		var c, _struct, f, _slice, _index, i, _struct$1;
		c = this;
		f = (_struct = c.inst(0), new frag.Ptr(_struct.i, _struct.out));
		i = (_slice = c.p.Inst, _index = f.i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (nongreedy) {
			i.Arg = f1.i;
			f.out = ((f.i << 1 >>> 0) >>> 0);
		} else {
			i.Out = f1.i;
			f.out = ((((f.i << 1 >>> 0) | 1) >>> 0) >>> 0);
		}
		f.out = (new patchList(f.out)).append(c.p, f1.out);
		return (_struct$1 = f, new frag.Ptr(_struct$1.i, _struct$1.out));
	};
	compiler.prototype.quest = function(f1, nongreedy) { return this.go$val.quest(f1, nongreedy); };
	compiler.Ptr.prototype.star = function(f1, nongreedy) {
		var c, _struct, f, _slice, _index, i, _struct$1;
		c = this;
		f = (_struct = c.inst(0), new frag.Ptr(_struct.i, _struct.out));
		i = (_slice = c.p.Inst, _index = f.i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (nongreedy) {
			i.Arg = f1.i;
			f.out = ((f.i << 1 >>> 0) >>> 0);
		} else {
			i.Out = f1.i;
			f.out = ((((f.i << 1 >>> 0) | 1) >>> 0) >>> 0);
		}
		(new patchList(f1.out)).patch(c.p, f.i);
		return (_struct$1 = f, new frag.Ptr(_struct$1.i, _struct$1.out));
	};
	compiler.prototype.star = function(f1, nongreedy) { return this.go$val.star(f1, nongreedy); };
	compiler.Ptr.prototype.plus = function(f1, nongreedy) {
		var c, _struct;
		c = this;
		return new frag.Ptr(f1.i, c.star((_struct = f1, new frag.Ptr(_struct.i, _struct.out)), nongreedy).out);
	};
	compiler.prototype.plus = function(f1, nongreedy) { return this.go$val.plus(f1, nongreedy); };
	compiler.Ptr.prototype.empty = function(op) {
		var c, _struct, f, _slice, _index, _struct$1;
		c = this;
		f = (_struct = c.inst(3), new frag.Ptr(_struct.i, _struct.out));
		(_slice = c.p.Inst, _index = f.i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Arg = (op >>> 0);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		return (_struct$1 = f, new frag.Ptr(_struct$1.i, _struct$1.out));
	};
	compiler.prototype.empty = function(op) { return this.go$val.empty(op); };
	compiler.Ptr.prototype.rune = function(r, flags) {
		var c, _struct, f, _slice, _index, i, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _struct$1;
		c = this;
		f = (_struct = c.inst(7), new frag.Ptr(_struct.i, _struct.out));
		i = (_slice = c.p.Inst, _index = f.i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		i.Rune = r;
		flags = (flags & 1) >>> 0;
		if (!((r.length === 1)) || (unicode.SimpleFold((_slice$1 = r, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) === (_slice$2 = r, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")))) {
			flags = flags & ~1;
		}
		i.Arg = (flags >>> 0);
		f.out = ((f.i << 1 >>> 0) >>> 0);
		if ((((flags & 1) >>> 0) === 0) && ((r.length === 1) || (r.length === 2) && ((_slice$3 = r, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) === (_slice$4 = r, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"))))) {
			i.Op = 8;
		} else if ((r.length === 2) && ((_slice$5 = r, _index$5 = 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")) === 0) && ((_slice$6 = r, _index$6 = 1, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")) === 1114111)) {
			i.Op = 9;
		} else if ((r.length === 4) && ((_slice$7 = r, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")) === 0) && ((_slice$8 = r, _index$8 = 1, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")) === 9) && ((_slice$9 = r, _index$9 = 2, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")) === 11) && ((_slice$10 = r, _index$10 = 3, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")) === 1114111)) {
			i.Op = 10;
		}
		return (_struct$1 = f, new frag.Ptr(_struct$1.i, _struct$1.out));
	};
	compiler.prototype.rune = function(r, flags) { return this.go$val.rune(r, flags); };
	Error.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "error parsing regexp: " + (new ErrorCode(e.Code)).String() + ": `" + e.Expr + "`";
	};
	Error.prototype.Error = function() { return this.go$val.Error(); };
	ErrorCode.prototype.String = function() {
		var e;
		e = this.go$val;
		return e;
	};
	go$ptrType(ErrorCode).prototype.String = function() { return new ErrorCode(this.go$get()).String(); };
	parser.Ptr.prototype.newRegexp = function(op) {
		var p, re, l, r;
		p = this;
		re = p.free;
		if (!(re === (go$ptrType(Regexp)).nil)) {
			p.free = re.Sub0[0];
			l = re, r = new Regexp.Ptr(0, 0, (go$sliceType((go$ptrType(Regexp)))).nil, go$makeNativeArray("Ptr", 1, function() { return (go$ptrType(Regexp)).nil; }), (go$sliceType(Go$Int32)).nil, go$makeNativeArray("Int32", 2, function() { return 0; }), 0, 0, 0, ""), l.Op = r.Op, l.Flags = r.Flags, l.Sub = r.Sub, l.Sub0 = r.Sub0, l.Rune = r.Rune, l.Rune0 = r.Rune0, l.Min = r.Min, l.Max = r.Max, l.Cap = r.Cap, l.Name = r.Name;
		} else {
			re = new Regexp.Ptr();
		}
		re.Op = op;
		return re;
	};
	parser.prototype.newRegexp = function(op) { return this.go$val.newRegexp(op); };
	parser.Ptr.prototype.reuse = function(re) {
		var p;
		p = this;
		re.Sub0[0] = p.free;
		p.free = re;
	};
	parser.prototype.reuse = function(re) { return this.go$val.reuse(re); };
	parser.Ptr.prototype.push = function(re) {
		var p, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _slice$11, _index$11, _slice$12, _index$12, _slice$13, _index$13, _slice$14, _index$14, _slice$15, _index$15, _slice$16, _index$16, _slice$17, _index$17;
		p = this;
		if ((re.Op === 4) && (re.Rune.length === 2) && ((_slice = re.Rune, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === (_slice$1 = re.Rune, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))) {
			if (p.maybeConcat((_slice$16 = re.Rune, _index$16 = 0, (_index$16 >= 0 && _index$16 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$16] : go$throwRuntimeError("index out of range")), p.flags & ~1)) {
				return (go$ptrType(Regexp)).nil;
			}
			re.Op = 3;
			re.Rune = go$subslice(re.Rune, 0, 1);
			re.Flags = p.flags & ~1;
		} else if ((re.Op === 4) && (re.Rune.length === 4) && ((_slice$2 = re.Rune, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === (_slice$3 = re.Rune, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))) && ((_slice$4 = re.Rune, _index$4 = 2, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) === (_slice$5 = re.Rune, _index$5 = 3, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"))) && (unicode.SimpleFold((_slice$6 = re.Rune, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"))) === (_slice$7 = re.Rune, _index$7 = 2, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"))) && (unicode.SimpleFold((_slice$8 = re.Rune, _index$8 = 2, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"))) === (_slice$9 = re.Rune, _index$9 = 0, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"))) || (re.Op === 4) && (re.Rune.length === 2) && (((_slice$10 = re.Rune, _index$10 = 0, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")) + 1 >> 0) === (_slice$11 = re.Rune, _index$11 = 1, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range"))) && (unicode.SimpleFold((_slice$12 = re.Rune, _index$12 = 0, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range"))) === (_slice$13 = re.Rune, _index$13 = 1, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range"))) && (unicode.SimpleFold((_slice$14 = re.Rune, _index$14 = 1, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range"))) === (_slice$15 = re.Rune, _index$15 = 0, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range")))) {
			if (p.maybeConcat((_slice$17 = re.Rune, _index$17 = 0, (_index$17 >= 0 && _index$17 < _slice$17.length) ? _slice$17.array[_slice$17.offset + _index$17] : go$throwRuntimeError("index out of range")), (p.flags | 1) >>> 0)) {
				return (go$ptrType(Regexp)).nil;
			}
			re.Op = 3;
			re.Rune = go$subslice(re.Rune, 0, 1);
			re.Flags = (p.flags | 1) >>> 0;
		} else {
			p.maybeConcat(-1, 0);
		}
		p.stack = go$append(p.stack, re);
		return re;
	};
	parser.prototype.push = function(re) { return this.go$val.push(re); };
	parser.Ptr.prototype.maybeConcat = function(r, flags) {
		var p, n, _slice, _index, re1, _slice$1, _index$1, re2, _slice$2, _index$2;
		p = this;
		n = p.stack.length;
		if (n < 2) {
			return false;
		}
		re1 = (_slice = p.stack, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		re2 = (_slice$1 = p.stack, _index$1 = (n - 2 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		if (!((re1.Op === 3)) || !((re2.Op === 3)) || !((((re1.Flags & 1) >>> 0) === ((re2.Flags & 1) >>> 0)))) {
			return false;
		}
		re2.Rune = go$appendSlice(re2.Rune, re1.Rune);
		if (r >= 0) {
			re1.Rune = go$subslice(new (go$sliceType(Go$Int32))(re1.Rune0), 0, 1);
			_slice$2 = re1.Rune, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = r) : go$throwRuntimeError("index out of range");
			re1.Flags = flags;
			return true;
		}
		p.stack = go$subslice(p.stack, 0, (n - 1 >> 0));
		p.reuse(re1);
		return false;
	};
	parser.prototype.maybeConcat = function(r, flags) { return this.go$val.maybeConcat(r, flags); };
	parser.Ptr.prototype.newLiteral = function(r, flags) {
		var p, re;
		p = this;
		re = p.newRegexp(3);
		re.Flags = flags;
		if (!((((flags & 1) >>> 0) === 0))) {
			r = minFoldRune(r);
		}
		re.Rune0[0] = r;
		re.Rune = go$subslice(new (go$sliceType(Go$Int32))(re.Rune0), 0, 1);
		return re;
	};
	parser.prototype.newLiteral = function(r, flags) { return this.go$val.newLiteral(r, flags); };
	minFoldRune = function(r) {
		var min, r0;
		if (r < 65 || r > 66639) {
			return r;
		}
		min = r;
		r0 = r;
		r = unicode.SimpleFold(r);
		while (!((r === r0))) {
			if (min > r) {
				min = r;
			}
			r = unicode.SimpleFold(r);
		}
		return min;
	};
	parser.Ptr.prototype.literal = function(r) {
		var p;
		p = this;
		p.push(p.newLiteral(r, p.flags));
	};
	parser.prototype.literal = function(r) { return this.go$val.literal(r); };
	parser.Ptr.prototype.op = function(op) {
		var p, re;
		p = this;
		re = p.newRegexp(op);
		re.Flags = p.flags;
		return p.push(re);
	};
	parser.prototype.op = function(op) { return this.go$val.op(op); };
	parser.Ptr.prototype.repeat = function(op, min, max, before, after, lastRepeat) {
		var p, flags, n, _slice, _index, sub, re, _slice$1, _index$1, _slice$2, _index$2;
		p = this;
		flags = p.flags;
		if (!((((p.flags & 64) >>> 0) === 0))) {
			if (after.length > 0 && (after.charCodeAt(0) === 63)) {
				after = after.substring(1);
				flags = (flags ^ 32) << 16 >>> 16;
			}
			if (!(lastRepeat === "")) {
				return ["", new Error.Ptr("invalid nested repetition operator", lastRepeat.substring(0, (lastRepeat.length - after.length >> 0)))];
			}
		}
		n = p.stack.length;
		if (n === 0) {
			return ["", new Error.Ptr("missing argument to repetition operator", before.substring(0, (before.length - after.length >> 0)))];
		}
		sub = (_slice = p.stack, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (sub.Op >= 128) {
			return ["", new Error.Ptr("missing argument to repetition operator", before.substring(0, (before.length - after.length >> 0)))];
		}
		re = p.newRegexp(op);
		re.Min = min;
		re.Max = max;
		re.Flags = flags;
		re.Sub = go$subslice(new (go$sliceType((go$ptrType(Regexp))))(re.Sub0), 0, 1);
		_slice$1 = re.Sub, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = sub) : go$throwRuntimeError("index out of range");
		_slice$2 = p.stack, _index$2 = n - 1 >> 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = re) : go$throwRuntimeError("index out of range");
		return [after, null];
	};
	parser.prototype.repeat = function(op, min, max, before, after, lastRepeat) { return this.go$val.repeat(op, min, max, before, after, lastRepeat); };
	parser.Ptr.prototype.concat = function() {
		var p, i, _slice, _index, subs;
		p = this;
		p.maybeConcat(-1, 0);
		i = p.stack.length;
		while (i > 0 && (_slice = p.stack, _index = (i - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Op < 128) {
			i = i - 1 >> 0;
		}
		subs = go$subslice(p.stack, i);
		p.stack = go$subslice(p.stack, 0, i);
		if (subs.length === 0) {
			return p.push(p.newRegexp(2));
		}
		return p.push(p.collapse(subs, 18));
	};
	parser.prototype.concat = function() { return this.go$val.concat(); };
	parser.Ptr.prototype.alternate = function() {
		var p, i, _slice, _index, subs, _slice$1, _index$1;
		p = this;
		i = p.stack.length;
		while (i > 0 && (_slice = p.stack, _index = (i - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Op < 128) {
			i = i - 1 >> 0;
		}
		subs = go$subslice(p.stack, i);
		p.stack = go$subslice(p.stack, 0, i);
		if (subs.length > 0) {
			cleanAlt((_slice$1 = subs, _index$1 = (subs.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
		}
		if (subs.length === 0) {
			return p.push(p.newRegexp(1));
		}
		return p.push(p.collapse(subs, 19));
	};
	parser.prototype.alternate = function() { return this.go$val.alternate(); };
	cleanAlt = function(re) {
		var _ref, v, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5;
		_ref = re.Op;
		if (_ref === 4) {
			re.Rune = cleanClass(new (go$ptrType((go$sliceType(Go$Int32))))(function() { return re.Rune; }, function(v) { re.Rune = v; }));
			if ((re.Rune.length === 2) && ((_slice = re.Rune, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 0) && ((_slice$1 = re.Rune, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 1114111)) {
				re.Rune = (go$sliceType(Go$Int32)).nil;
				re.Op = 6;
				return;
			}
			if ((re.Rune.length === 4) && ((_slice$2 = re.Rune, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 0) && ((_slice$3 = re.Rune, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) === 9) && ((_slice$4 = re.Rune, _index$4 = 2, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) === 11) && ((_slice$5 = re.Rune, _index$5 = 3, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")) === 1114111)) {
				re.Rune = (go$sliceType(Go$Int32)).nil;
				re.Op = 5;
				return;
			}
			if ((re.Rune.capacity - re.Rune.length >> 0) > 100) {
				re.Rune = go$appendSlice(go$subslice(new (go$sliceType(Go$Int32))(re.Rune0), 0, 0), re.Rune);
			}
		}
	};
	parser.Ptr.prototype.collapse = function(subs, op) {
		var p, _slice, _index, re, _ref, _i, _slice$1, _index$1, sub, old, _slice$2, _index$2;
		p = this;
		if (subs.length === 1) {
			return (_slice = subs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		re = p.newRegexp(op);
		re.Sub = go$subslice(new (go$sliceType((go$ptrType(Regexp))))(re.Sub0), 0, 0);
		_ref = subs;
		_i = 0;
		while (_i < _ref.length) {
			sub = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (sub.Op === op) {
				re.Sub = go$appendSlice(re.Sub, sub.Sub);
				p.reuse(sub);
			} else {
				re.Sub = go$append(re.Sub, sub);
			}
			_i++;
		}
		if (op === 19) {
			re.Sub = p.factor(re.Sub, re.Flags);
			if (re.Sub.length === 1) {
				old = re;
				re = (_slice$2 = re.Sub, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				p.reuse(old);
			}
		}
		return re;
	};
	parser.prototype.collapse = function(subs, op) { return this.go$val.collapse(subs, op); };
	parser.Ptr.prototype.factor = function(sub, flags) {
		var p, str, strflags, start, out, i, istr, iflags, _tuple, _slice, _index, same, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, prefix, j, _slice$4, _index$4, _slice$5, _index$5, suffix, re, first, i$1, ifirst, _slice$6, _index$6, _slice$7, _index$7, prefix$1, j$1, reuse, _slice$8, _index$8, _slice$9, _index$9, suffix$1, re$1, i$2, _slice$10, _index$10, _slice$11, _index$11, max, j$2, _slice$12, _index$12, _slice$13, _index$13, _slice$14, _index$14, _slice$15, _index$15, _slice$16, _index$16, _slice$17, _index$17, _slice$18, _index$18, _slice$19, _index$19, _tuple$1, _slice$20, _index$20, _slice$21, _index$21, j$3, _slice$22, _index$22, _slice$23, _index$23, _slice$24, _index$24, _slice$25, _index$25, _slice$26, _index$26, _slice$27, _index$27, _ref, _i, i$3, _slice$28, _index$28, _slice$29, _index$29, _slice$30, _index$30;
		p = this;
		if (sub.length < 2) {
			return sub;
		}
		str = (go$sliceType(Go$Int32)).nil;
		strflags = 0;
		start = 0;
		out = go$subslice(sub, 0, 0);
		i = 0;
		while (i <= sub.length) {
			istr = (go$sliceType(Go$Int32)).nil;
			iflags = 0;
			if (i < sub.length) {
				_tuple = p.leadingString((_slice = sub, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))), istr = _tuple[0], iflags = _tuple[1];
				if (iflags === strflags) {
					same = 0;
					while (same < str.length && same < istr.length && ((_slice$1 = str, _index$1 = same, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === (_slice$2 = istr, _index$2 = same, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")))) {
						same = same + 1 >> 0;
					}
					if (same > 0) {
						str = go$subslice(str, 0, same);
						i = i + 1 >> 0;
						continue;
					}
				}
			}
			if (i === start) {
			} else if (i === (start + 1 >> 0)) {
				out = go$append(out, (_slice$3 = sub, _index$3 = start, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")));
			} else {
				prefix = p.newRegexp(3);
				prefix.Flags = strflags;
				prefix.Rune = go$appendSlice(go$subslice(prefix.Rune, 0, 0), str);
				j = start;
				while (j < i) {
					_slice$5 = sub, _index$5 = j, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = p.removeLeadingString((_slice$4 = sub, _index$4 = j, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), str.length)) : go$throwRuntimeError("index out of range");
					j = j + 1 >> 0;
				}
				suffix = p.collapse(go$subslice(sub, start, i), 19);
				re = p.newRegexp(18);
				re.Sub = go$append(go$subslice(re.Sub, 0, 0), prefix, suffix);
				out = go$append(out, re);
			}
			start = i;
			str = istr;
			strflags = iflags;
			i = i + 1 >> 0;
		}
		sub = out;
		start = 0;
		out = go$subslice(sub, 0, 0);
		first = (go$ptrType(Regexp)).nil;
		i$1 = 0;
		while (i$1 <= sub.length) {
			ifirst = (go$ptrType(Regexp)).nil;
			if (i$1 < sub.length) {
				ifirst = p.leadingRegexp((_slice$6 = sub, _index$6 = i$1, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")));
				if (!(first === (go$ptrType(Regexp)).nil) && first.Equal(ifirst)) {
					i$1 = i$1 + 1 >> 0;
					continue;
				}
			}
			if (i$1 === start) {
			} else if (i$1 === (start + 1 >> 0)) {
				out = go$append(out, (_slice$7 = sub, _index$7 = start, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")));
			} else {
				prefix$1 = first;
				j$1 = start;
				while (j$1 < i$1) {
					reuse = !((j$1 === start));
					_slice$9 = sub, _index$9 = j$1, (_index$9 >= 0 && _index$9 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$9] = p.removeLeadingRegexp((_slice$8 = sub, _index$8 = j$1, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")), reuse)) : go$throwRuntimeError("index out of range");
					j$1 = j$1 + 1 >> 0;
				}
				suffix$1 = p.collapse(go$subslice(sub, start, i$1), 19);
				re$1 = p.newRegexp(18);
				re$1.Sub = go$append(go$subslice(re$1.Sub, 0, 0), prefix$1, suffix$1);
				out = go$append(out, re$1);
			}
			start = i$1;
			first = ifirst;
			i$1 = i$1 + 1 >> 0;
		}
		sub = out;
		start = 0;
		out = go$subslice(sub, 0, 0);
		i$2 = 0;
		while (i$2 <= sub.length) {
			if (i$2 < sub.length && isCharClass((_slice$10 = sub, _index$10 = i$2, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")))) {
				i$2 = i$2 + 1 >> 0;
				continue;
			}
			if (i$2 === start) {
			} else if (i$2 === (start + 1 >> 0)) {
				out = go$append(out, (_slice$11 = sub, _index$11 = start, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")));
			} else {
				max = start;
				j$2 = start + 1 >> 0;
				while (j$2 < i$2) {
					if ((_slice$12 = sub, _index$12 = max, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")).Op < (_slice$13 = sub, _index$13 = j$2, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")).Op || ((_slice$14 = sub, _index$14 = max, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range")).Op === (_slice$15 = sub, _index$15 = j$2, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range")).Op) && (_slice$16 = sub, _index$16 = max, (_index$16 >= 0 && _index$16 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$16] : go$throwRuntimeError("index out of range")).Rune.length < (_slice$17 = sub, _index$17 = j$2, (_index$17 >= 0 && _index$17 < _slice$17.length) ? _slice$17.array[_slice$17.offset + _index$17] : go$throwRuntimeError("index out of range")).Rune.length) {
						max = j$2;
					}
					j$2 = j$2 + 1 >> 0;
				}
				_tuple$1 = [(_slice$18 = sub, _index$18 = max, (_index$18 >= 0 && _index$18 < _slice$18.length) ? _slice$18.array[_slice$18.offset + _index$18] : go$throwRuntimeError("index out of range")), (_slice$19 = sub, _index$19 = start, (_index$19 >= 0 && _index$19 < _slice$19.length) ? _slice$19.array[_slice$19.offset + _index$19] : go$throwRuntimeError("index out of range"))], _slice$20 = sub, _index$20 = start, (_index$20 >= 0 && _index$20 < _slice$20.length) ? (_slice$20.array[_slice$20.offset + _index$20] = _tuple$1[0]) : go$throwRuntimeError("index out of range"), _slice$21 = sub, _index$21 = max, (_index$21 >= 0 && _index$21 < _slice$21.length) ? (_slice$21.array[_slice$21.offset + _index$21] = _tuple$1[1]) : go$throwRuntimeError("index out of range");
				j$3 = start + 1 >> 0;
				while (j$3 < i$2) {
					mergeCharClass((_slice$22 = sub, _index$22 = start, (_index$22 >= 0 && _index$22 < _slice$22.length) ? _slice$22.array[_slice$22.offset + _index$22] : go$throwRuntimeError("index out of range")), (_slice$23 = sub, _index$23 = j$3, (_index$23 >= 0 && _index$23 < _slice$23.length) ? _slice$23.array[_slice$23.offset + _index$23] : go$throwRuntimeError("index out of range")));
					p.reuse((_slice$24 = sub, _index$24 = j$3, (_index$24 >= 0 && _index$24 < _slice$24.length) ? _slice$24.array[_slice$24.offset + _index$24] : go$throwRuntimeError("index out of range")));
					j$3 = j$3 + 1 >> 0;
				}
				cleanAlt((_slice$25 = sub, _index$25 = start, (_index$25 >= 0 && _index$25 < _slice$25.length) ? _slice$25.array[_slice$25.offset + _index$25] : go$throwRuntimeError("index out of range")));
				out = go$append(out, (_slice$26 = sub, _index$26 = start, (_index$26 >= 0 && _index$26 < _slice$26.length) ? _slice$26.array[_slice$26.offset + _index$26] : go$throwRuntimeError("index out of range")));
			}
			if (i$2 < sub.length) {
				out = go$append(out, (_slice$27 = sub, _index$27 = i$2, (_index$27 >= 0 && _index$27 < _slice$27.length) ? _slice$27.array[_slice$27.offset + _index$27] : go$throwRuntimeError("index out of range")));
			}
			start = i$2 + 1 >> 0;
			i$2 = i$2 + 1 >> 0;
		}
		sub = out;
		start = 0;
		out = go$subslice(sub, 0, 0);
		_ref = sub;
		_i = 0;
		while (_i < _ref.length) {
			i$3 = _i;
			if ((i$3 + 1 >> 0) < sub.length && ((_slice$28 = sub, _index$28 = i$3, (_index$28 >= 0 && _index$28 < _slice$28.length) ? _slice$28.array[_slice$28.offset + _index$28] : go$throwRuntimeError("index out of range")).Op === 2) && ((_slice$29 = sub, _index$29 = (i$3 + 1 >> 0), (_index$29 >= 0 && _index$29 < _slice$29.length) ? _slice$29.array[_slice$29.offset + _index$29] : go$throwRuntimeError("index out of range")).Op === 2)) {
				_i++;
				continue;
			}
			out = go$append(out, (_slice$30 = sub, _index$30 = i$3, (_index$30 >= 0 && _index$30 < _slice$30.length) ? _slice$30.array[_slice$30.offset + _index$30] : go$throwRuntimeError("index out of range")));
			_i++;
		}
		sub = out;
		return sub;
	};
	parser.prototype.factor = function(sub, flags) { return this.go$val.factor(sub, flags); };
	parser.Ptr.prototype.leadingString = function(re) {
		var p, _slice, _index;
		p = this;
		if ((re.Op === 18) && re.Sub.length > 0) {
			re = (_slice = re.Sub, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		if (!((re.Op === 3))) {
			return [(go$sliceType(Go$Int32)).nil, 0];
		}
		return [re.Rune, (re.Flags & 1) >>> 0];
	};
	parser.prototype.leadingString = function(re) { return this.go$val.leadingString(re); };
	parser.Ptr.prototype.removeLeadingString = function(re, n) {
		var p, _slice, _index, sub, _slice$1, _index$1, _ref, old, _slice$2, _index$2;
		p = this;
		if ((re.Op === 18) && re.Sub.length > 0) {
			sub = (_slice = re.Sub, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			sub = p.removeLeadingString(sub, n);
			_slice$1 = re.Sub, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = sub) : go$throwRuntimeError("index out of range");
			if (sub.Op === 2) {
				p.reuse(sub);
				_ref = re.Sub.length;
				if (_ref === 0 || _ref === 1) {
					re.Op = 2;
					re.Sub = (go$sliceType((go$ptrType(Regexp)))).nil;
				} else if (_ref === 2) {
					old = re;
					re = (_slice$2 = re.Sub, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
					p.reuse(old);
				} else {
					go$copySlice(re.Sub, go$subslice(re.Sub, 1));
					re.Sub = go$subslice(re.Sub, 0, (re.Sub.length - 1 >> 0));
				}
			}
			return re;
		}
		if (re.Op === 3) {
			re.Rune = go$subslice(re.Rune, 0, go$copySlice(re.Rune, go$subslice(re.Rune, n)));
			if (re.Rune.length === 0) {
				re.Op = 2;
			}
		}
		return re;
	};
	parser.prototype.removeLeadingString = function(re, n) { return this.go$val.removeLeadingString(re, n); };
	parser.Ptr.prototype.leadingRegexp = function(re) {
		var p, _slice, _index, sub;
		p = this;
		if (re.Op === 2) {
			return (go$ptrType(Regexp)).nil;
		}
		if ((re.Op === 18) && re.Sub.length > 0) {
			sub = (_slice = re.Sub, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (sub.Op === 2) {
				return (go$ptrType(Regexp)).nil;
			}
			return sub;
		}
		return re;
	};
	parser.prototype.leadingRegexp = function(re) { return this.go$val.leadingRegexp(re); };
	parser.Ptr.prototype.removeLeadingRegexp = function(re, reuse) {
		var p, _slice, _index, _ref, old, _slice$1, _index$1;
		p = this;
		if ((re.Op === 18) && re.Sub.length > 0) {
			if (reuse) {
				p.reuse((_slice = re.Sub, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
			}
			re.Sub = go$subslice(re.Sub, 0, go$copySlice(re.Sub, go$subslice(re.Sub, 1)));
			_ref = re.Sub.length;
			if (_ref === 0) {
				re.Op = 2;
				re.Sub = (go$sliceType((go$ptrType(Regexp)))).nil;
			} else if (_ref === 1) {
				old = re;
				re = (_slice$1 = re.Sub, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				p.reuse(old);
			}
			return re;
		}
		if (reuse) {
			p.reuse(re);
		}
		return p.newRegexp(2);
	};
	parser.prototype.removeLeadingRegexp = function(re, reuse) { return this.go$val.removeLeadingRegexp(re, reuse); };
	literalRegexp = function(s, flags) {
		var re, _ref, _i, _rune, c;
		re = new Regexp.Ptr(3, 0, (go$sliceType((go$ptrType(Regexp)))).nil, go$makeNativeArray("Ptr", 1, function() { return (go$ptrType(Regexp)).nil; }), (go$sliceType(Go$Int32)).nil, go$makeNativeArray("Int32", 2, function() { return 0; }), 0, 0, 0, "");
		re.Flags = flags;
		re.Rune = go$subslice(new (go$sliceType(Go$Int32))(re.Rune0), 0, 0);
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			if (re.Rune.length >= re.Rune.capacity) {
				re.Rune = new (go$sliceType(Go$Int32))(go$stringToRunes(s));
				break;
			}
			re.Rune = go$append(re.Rune, c);
			_i += _rune[1];
		}
		return re;
	};
	Parse = go$pkg.Parse = function(s, flags) {
		var err, p, err$1, c, op, lastRepeat, _tuple, min, max, t, repeat, _ref, _tuple$1, _lhs, _tuple$2, before, _ref$1, after, _tuple$3, before$1, _tuple$4, min$1, max$1, after$1, ok, _tuple$5, _ref$2, lit, i, re, _tuple$6, r, rest, err$2, r$1, _tuple$7, rest$1, _tuple$8, _tuple$9, n, _slice, _index;
		if (!((((flags & 2) >>> 0) === 0))) {
			if (err = checkUTF8(s), !(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(Regexp)).nil, err];
			}
			return [literalRegexp(s, flags), null];
		}
		p = new parser.Ptr(), err$1 = null, c = 0, op = 0, lastRepeat = "", _tuple = [0, 0], min = _tuple[0], max = _tuple[1];
		p.flags = flags;
		p.wholeRegexp = s;
		t = s;
		while (!(t === "")) {
			repeat = "";
			_ref = t.charCodeAt(0);
			BigSwitch:
			switch (0) { default: if (_ref === 40) {
				if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2 && (t.charCodeAt(1) === 63)) {
					if (_tuple$1 = p.parsePerlFlags(t), t = _tuple$1[0], err$1 = _tuple$1[1], !(go$interfaceIsEqual(err$1, null))) {
						return [(go$ptrType(Regexp)).nil, err$1];
					}
					break;
				}
				p.numCap = p.numCap + 1 >> 0;
				p.op(128).Cap = p.numCap;
				t = t.substring(1);
			} else if (_ref === 124) {
				if (err$1 = p.parseVerticalBar(), !(go$interfaceIsEqual(err$1, null))) {
					return [(go$ptrType(Regexp)).nil, err$1];
				}
				t = t.substring(1);
			} else if (_ref === 41) {
				if (err$1 = p.parseRightParen(), !(go$interfaceIsEqual(err$1, null))) {
					return [(go$ptrType(Regexp)).nil, err$1];
				}
				t = t.substring(1);
			} else if (_ref === 94) {
				if (!((((p.flags & 16) >>> 0) === 0))) {
					p.op(9);
				} else {
					p.op(7);
				}
				t = t.substring(1);
			} else if (_ref === 36) {
				if (!((((p.flags & 16) >>> 0) === 0))) {
					_lhs = p.op(10), _lhs.Flags = (_lhs.Flags | 256) >>> 0;
				} else {
					p.op(8);
				}
				t = t.substring(1);
			} else if (_ref === 46) {
				if (!((((p.flags & 8) >>> 0) === 0))) {
					p.op(6);
				} else {
					p.op(5);
				}
				t = t.substring(1);
			} else if (_ref === 91) {
				if (_tuple$2 = p.parseClass(t), t = _tuple$2[0], err$1 = _tuple$2[1], !(go$interfaceIsEqual(err$1, null))) {
					return [(go$ptrType(Regexp)).nil, err$1];
				}
			} else if (_ref === 42 || _ref === 43 || _ref === 63) {
				before = t;
				_ref$1 = t.charCodeAt(0);
				if (_ref$1 === 42) {
					op = 14;
				} else if (_ref$1 === 43) {
					op = 15;
				} else if (_ref$1 === 63) {
					op = 16;
				}
				after = t.substring(1);
				if (_tuple$3 = p.repeat(op, min, max, before, after, lastRepeat), after = _tuple$3[0], err$1 = _tuple$3[1], !(go$interfaceIsEqual(err$1, null))) {
					return [(go$ptrType(Regexp)).nil, err$1];
				}
				repeat = before;
				t = after;
			} else if (_ref === 123) {
				op = 17;
				before$1 = t;
				_tuple$4 = p.parseRepeat(t), min$1 = _tuple$4[0], max$1 = _tuple$4[1], after$1 = _tuple$4[2], ok = _tuple$4[3];
				if (!ok) {
					p.literal(123);
					t = t.substring(1);
					break;
				}
				if (min$1 < 0 || min$1 > 1000 || max$1 > 1000 || max$1 >= 0 && min$1 > max$1) {
					return [(go$ptrType(Regexp)).nil, new Error.Ptr("invalid repeat count", before$1.substring(0, (before$1.length - after$1.length >> 0)))];
				}
				if (_tuple$5 = p.repeat(op, min$1, max$1, before$1, after$1, lastRepeat), after$1 = _tuple$5[0], err$1 = _tuple$5[1], !(go$interfaceIsEqual(err$1, null))) {
					return [(go$ptrType(Regexp)).nil, err$1];
				}
				repeat = before$1;
				t = after$1;
			} else if (_ref === 92) {
				if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2) {
					_ref$2 = t.charCodeAt(1);
					if (_ref$2 === 65) {
						p.op(9);
						t = t.substring(2);
						break BigSwitch;
					} else if (_ref$2 === 98) {
						p.op(11);
						t = t.substring(2);
						break BigSwitch;
					} else if (_ref$2 === 66) {
						p.op(12);
						t = t.substring(2);
						break BigSwitch;
					} else if (_ref$2 === 67) {
						return [(go$ptrType(Regexp)).nil, new Error.Ptr("invalid escape sequence", t.substring(0, 2))];
					} else if (_ref$2 === 81) {
						lit = "";
						if (i = strings.Index(t, "\\E"), i < 0) {
							lit = t.substring(2);
							t = "";
						} else {
							lit = t.substring(2, i);
							t = t.substring((i + 2 >> 0));
						}
						p.push(literalRegexp(lit, p.flags));
						break BigSwitch;
					} else if (_ref$2 === 122) {
						p.op(10);
						t = t.substring(2);
						break BigSwitch;
					}
				}
				re = p.newRegexp(4);
				re.Flags = p.flags;
				if (t.length >= 2 && ((t.charCodeAt(1) === 112) || (t.charCodeAt(1) === 80))) {
					_tuple$6 = p.parseUnicodeClass(t, go$subslice(new (go$sliceType(Go$Int32))(re.Rune0), 0, 0)), r = _tuple$6[0], rest = _tuple$6[1], err$2 = _tuple$6[2];
					if (!(go$interfaceIsEqual(err$2, null))) {
						return [(go$ptrType(Regexp)).nil, err$2];
					}
					if (!(r === (go$sliceType(Go$Int32)).nil)) {
						re.Rune = r;
						t = rest;
						p.push(re);
						break BigSwitch;
					}
				}
				if (_tuple$7 = p.parsePerlClassEscape(t, go$subslice(new (go$sliceType(Go$Int32))(re.Rune0), 0, 0)), r$1 = _tuple$7[0], rest$1 = _tuple$7[1], !(r$1 === (go$sliceType(Go$Int32)).nil)) {
					re.Rune = r$1;
					t = rest$1;
					p.push(re);
					break BigSwitch;
				}
				p.reuse(re);
				if (_tuple$8 = p.parseEscape(t), c = _tuple$8[0], t = _tuple$8[1], err$1 = _tuple$8[2], !(go$interfaceIsEqual(err$1, null))) {
					return [(go$ptrType(Regexp)).nil, err$1];
				}
				p.literal(c);
			} else {
				if (_tuple$9 = nextRune(t), c = _tuple$9[0], t = _tuple$9[1], err$1 = _tuple$9[2], !(go$interfaceIsEqual(err$1, null))) {
					return [(go$ptrType(Regexp)).nil, err$1];
				}
				p.literal(c);
			} }
			lastRepeat = repeat;
		}
		p.concat();
		if (p.swapVerticalBar()) {
			p.stack = go$subslice(p.stack, 0, (p.stack.length - 1 >> 0));
		}
		p.alternate();
		n = p.stack.length;
		if (!((n === 1))) {
			return [(go$ptrType(Regexp)).nil, new Error.Ptr("missing closing )", s)];
		}
		return [(_slice = p.stack, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), null];
	};
	parser.Ptr.prototype.parseRepeat = function(s) {
		var min, max, rest, ok, p, ok1, _tuple, _tuple$1;
		min = 0;
		max = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || !((s.charCodeAt(0) === 123))) {
			return [min, max, rest, ok];
		}
		s = s.substring(1);
		ok1 = false;
		if (_tuple = p.parseInt(s), min = _tuple[0], s = _tuple[1], ok1 = _tuple[2], !ok1) {
			return [min, max, rest, ok];
		}
		if (s === "") {
			return [min, max, rest, ok];
		}
		if (!((s.charCodeAt(0) === 44))) {
			max = min;
		} else {
			s = s.substring(1);
			if (s === "") {
				return [min, max, rest, ok];
			}
			if (s.charCodeAt(0) === 125) {
				max = -1;
			} else if (_tuple$1 = p.parseInt(s), max = _tuple$1[0], s = _tuple$1[1], ok1 = _tuple$1[2], !ok1) {
				return [min, max, rest, ok];
			} else if (max < 0) {
				min = -1;
			}
		}
		if (s === "" || !((s.charCodeAt(0) === 125))) {
			return [min, max, rest, ok];
		}
		rest = s.substring(1);
		ok = true;
		return [min, max, rest, ok];
	};
	parser.prototype.parseRepeat = function(s) { return this.go$val.parseRepeat(s); };
	parser.Ptr.prototype.parsePerlFlags = function(s) {
		var rest, err, p, t, end, _tuple, _tuple$1, capture, name, _tuple$2, _tuple$3, re, _tuple$4, c, flags, sign, sawFlag, _tuple$5, _tuple$6, _ref, _tuple$7, _tuple$8;
		rest = "";
		err = null;
		p = this;
		t = s;
		if (t.length > 4 && (t.charCodeAt(2) === 80) && (t.charCodeAt(3) === 60)) {
			end = strings.IndexRune(t, 62);
			if (end < 0) {
				if (err = checkUTF8(t), !(go$interfaceIsEqual(err, null))) {
					_tuple = ["", err], rest = _tuple[0], err = _tuple[1];
					return [rest, err];
				}
				_tuple$1 = ["", new Error.Ptr("invalid named capture", s)], rest = _tuple$1[0], err = _tuple$1[1];
				return [rest, err];
			}
			capture = t.substring(0, (end + 1 >> 0));
			name = t.substring(4, end);
			if (err = checkUTF8(name), !(go$interfaceIsEqual(err, null))) {
				_tuple$2 = ["", err], rest = _tuple$2[0], err = _tuple$2[1];
				return [rest, err];
			}
			if (!isValidCaptureName(name)) {
				_tuple$3 = ["", new Error.Ptr("invalid named capture", capture)], rest = _tuple$3[0], err = _tuple$3[1];
				return [rest, err];
			}
			p.numCap = p.numCap + 1 >> 0;
			re = p.op(128);
			re.Cap = p.numCap;
			re.Name = name;
			_tuple$4 = [t.substring((end + 1 >> 0)), null], rest = _tuple$4[0], err = _tuple$4[1];
			return [rest, err];
		}
		c = 0;
		t = t.substring(2);
		flags = p.flags;
		sign = 1;
		sawFlag = false;
		Loop:
		while (!(t === "")) {
			if (_tuple$5 = nextRune(t), c = _tuple$5[0], t = _tuple$5[1], err = _tuple$5[2], !(go$interfaceIsEqual(err, null))) {
				_tuple$6 = ["", err], rest = _tuple$6[0], err = _tuple$6[1];
				return [rest, err];
			}
			_ref = c;
			if (_ref === 105) {
				flags = (flags | 1) >>> 0;
				sawFlag = true;
			} else if (_ref === 109) {
				flags = flags & ~16;
				sawFlag = true;
			} else if (_ref === 115) {
				flags = (flags | 8) >>> 0;
				sawFlag = true;
			} else if (_ref === 85) {
				flags = (flags | 32) >>> 0;
				sawFlag = true;
			} else if (_ref === 45) {
				if (sign < 0) {
					break Loop;
				}
				sign = -1;
				flags = ~flags << 16 >>> 16;
				sawFlag = false;
			} else if (_ref === 58 || _ref === 41) {
				if (sign < 0) {
					if (!sawFlag) {
						break Loop;
					}
					flags = ~flags << 16 >>> 16;
				}
				if (c === 58) {
					p.op(128);
				}
				p.flags = flags;
				_tuple$7 = [t, null], rest = _tuple$7[0], err = _tuple$7[1];
				return [rest, err];
			} else {
				break Loop;
			}
		}
		_tuple$8 = ["", new Error.Ptr("invalid or unsupported Perl syntax", s.substring(0, (s.length - t.length >> 0)))], rest = _tuple$8[0], err = _tuple$8[1];
		return [rest, err];
	};
	parser.prototype.parsePerlFlags = function(s) { return this.go$val.parsePerlFlags(s); };
	isValidCaptureName = function(name) {
		var _ref, _i, _rune, c;
		if (name === "") {
			return false;
		}
		_ref = name;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			if (!((c === 95)) && !isalnum(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	parser.Ptr.prototype.parseInt = function(s) {
		var n, rest, ok, p, t, i, x;
		n = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || s.charCodeAt(0) < 48 || 57 < s.charCodeAt(0)) {
			return [n, rest, ok];
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 48) && 48 <= s.charCodeAt(1) && s.charCodeAt(1) <= 57) {
			return [n, rest, ok];
		}
		t = s;
		while (!(s === "") && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57) {
			s = s.substring(1);
		}
		rest = s;
		ok = true;
		t = t.substring(0, (t.length - s.length >> 0));
		i = 0;
		while (i < t.length) {
			if (n >= 100000000) {
				n = -1;
				break;
			}
			n = ((x = 10, (((n >>> 16 << 16) * x >> 0) + (n << 16 >>> 16) * x) >> 0) + (t.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
			i = i + 1 >> 0;
		}
		return [n, rest, ok];
	};
	parser.prototype.parseInt = function(s) { return this.go$val.parseInt(s); };
	isCharClass = function(re) {
		return (re.Op === 3) && (re.Rune.length === 1) || (re.Op === 4) || (re.Op === 5) || (re.Op === 6);
	};
	matchRune = function(re, r) {
		var _ref, _slice, _index, i, _slice$1, _index$1, _slice$2, _index$2;
		_ref = re.Op;
		if (_ref === 3) {
			return (re.Rune.length === 1) && ((_slice = re.Rune, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === r);
		} else if (_ref === 4) {
			i = 0;
			while (i < re.Rune.length) {
				if ((_slice$1 = re.Rune, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) <= r && r <= (_slice$2 = re.Rune, _index$2 = (i + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))) {
					return true;
				}
				i = i + 2 >> 0;
			}
			return false;
		} else if (_ref === 5) {
			return !((r === 10));
		} else if (_ref === 6) {
			return true;
		}
		return false;
	};
	parser.Ptr.prototype.parseVerticalBar = function() {
		var p;
		p = this;
		p.concat();
		if (!p.swapVerticalBar()) {
			p.op(129);
		}
		return null;
	};
	parser.prototype.parseVerticalBar = function() { return this.go$val.parseVerticalBar(); };
	mergeCharClass = function(dst, src) {
		var _ref, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4;
		_ref = dst.Op;
		switch (0) { default: if (_ref === 6) {
		} else if (_ref === 5) {
			if (matchRune(src, 10)) {
				dst.Op = 6;
			}
		} else if (_ref === 4) {
			if (src.Op === 3) {
				dst.Rune = appendLiteral(dst.Rune, (_slice = src.Rune, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), src.Flags);
			} else {
				dst.Rune = appendClass(dst.Rune, src.Rune);
			}
		} else if (_ref === 3) {
			if (((_slice$1 = src.Rune, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === (_slice$2 = dst.Rune, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))) && (src.Flags === dst.Flags)) {
				break;
			}
			dst.Op = 4;
			dst.Rune = appendLiteral(go$subslice(dst.Rune, 0, 0), (_slice$3 = dst.Rune, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), dst.Flags);
			dst.Rune = appendLiteral(dst.Rune, (_slice$4 = src.Rune, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), src.Flags);
		} }
	};
	parser.Ptr.prototype.swapVerticalBar = function() {
		var p, n, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, re1, _slice$4, _index$4, re3, _tuple, _slice$5, _index$5, _slice$6, _index$6, re1$1, _slice$7, _index$7, re2, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10;
		p = this;
		n = p.stack.length;
		if (n >= 3 && ((_slice = p.stack, _index = (n - 2 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Op === 129) && isCharClass((_slice$1 = p.stack, _index$1 = (n - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) && isCharClass((_slice$2 = p.stack, _index$2 = (n - 3 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")))) {
			re1 = (_slice$3 = p.stack, _index$3 = (n - 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			re3 = (_slice$4 = p.stack, _index$4 = (n - 3 >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
			if (re1.Op > re3.Op) {
				_tuple = [re3, re1], re1 = _tuple[0], re3 = _tuple[1];
				_slice$5 = p.stack, _index$5 = n - 3 >> 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = re3) : go$throwRuntimeError("index out of range");
			}
			mergeCharClass(re3, re1);
			p.reuse(re1);
			p.stack = go$subslice(p.stack, 0, (n - 1 >> 0));
			return true;
		}
		if (n >= 2) {
			re1$1 = (_slice$6 = p.stack, _index$6 = (n - 1 >> 0), (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
			re2 = (_slice$7 = p.stack, _index$7 = (n - 2 >> 0), (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"));
			if (re2.Op === 129) {
				if (n >= 3) {
					cleanAlt((_slice$8 = p.stack, _index$8 = (n - 3 >> 0), (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")));
				}
				_slice$9 = p.stack, _index$9 = n - 2 >> 0, (_index$9 >= 0 && _index$9 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$9] = re1$1) : go$throwRuntimeError("index out of range");
				_slice$10 = p.stack, _index$10 = n - 1 >> 0, (_index$10 >= 0 && _index$10 < _slice$10.length) ? (_slice$10.array[_slice$10.offset + _index$10] = re2) : go$throwRuntimeError("index out of range");
				return true;
			}
		}
		return false;
	};
	parser.prototype.swapVerticalBar = function() { return this.go$val.swapVerticalBar(); };
	parser.Ptr.prototype.parseRightParen = function() {
		var p, n, _slice, _index, re1, _slice$1, _index$1, re2, _slice$2, _index$2;
		p = this;
		p.concat();
		if (p.swapVerticalBar()) {
			p.stack = go$subslice(p.stack, 0, (p.stack.length - 1 >> 0));
		}
		p.alternate();
		n = p.stack.length;
		if (n < 2) {
			return new Error.Ptr("unexpected )", p.wholeRegexp);
		}
		re1 = (_slice = p.stack, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		re2 = (_slice$1 = p.stack, _index$1 = (n - 2 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		p.stack = go$subslice(p.stack, 0, (n - 2 >> 0));
		if (!((re2.Op === 128))) {
			return new Error.Ptr("unexpected )", p.wholeRegexp);
		}
		p.flags = re2.Flags;
		if (re2.Cap === 0) {
			p.push(re1);
		} else {
			re2.Op = 13;
			re2.Sub = go$subslice(new (go$sliceType((go$ptrType(Regexp))))(re2.Sub0), 0, 1);
			_slice$2 = re2.Sub, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = re1) : go$throwRuntimeError("index out of range");
			p.push(re2);
		}
		return null;
	};
	parser.prototype.parseRightParen = function() { return this.go$val.parseRightParen(); };
	parser.Ptr.prototype.parseEscape = function(s) {
		var r, rest, err, p, t, _tuple, _tuple$1, c, _tuple$2, _ref, i, x, _tuple$3, x$1, _tuple$4, _tuple$5, _tuple$6, nhex, _tuple$7, _tuple$8, v, x$2, _tuple$9, x$3, _tuple$10, _tuple$11, y, x$4, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$20;
		r = 0;
		rest = "";
		err = null;
		p = this;
		t = s.substring(1);
		if (t === "") {
			_tuple = [0, "", new Error.Ptr("trailing backslash at end of expression", "")], r = _tuple[0], rest = _tuple[1], err = _tuple[2];
			return [r, rest, err];
		}
		_tuple$1 = nextRune(t), c = _tuple$1[0], t = _tuple$1[1], err = _tuple$1[2];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$2 = [0, "", err], r = _tuple$2[0], rest = _tuple$2[1], err = _tuple$2[2];
			return [r, rest, err];
		}
		_ref = c;
		Switch:
		switch (0) { default: if (_ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
				break;
			}
			r = c - 48 >> 0;
			i = 1;
			while (i < 3) {
				if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
					break;
				}
				r = ((x = 8, (((r >>> 16 << 16) * x >> 0) + (r << 16 >>> 16) * x) >> 0) + (t.charCodeAt(0) >> 0) >> 0) - 48 >> 0;
				t = t.substring(1);
				i = i + 1 >> 0;
			}
			_tuple$3 = [r, t, null], r = _tuple$3[0], rest = _tuple$3[1], err = _tuple$3[2];
			return [r, rest, err];
		} else if (_ref === 48) {
			r = c - 48 >> 0;
			i = 1;
			while (i < 3) {
				if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
					break;
				}
				r = ((x$1 = 8, (((r >>> 16 << 16) * x$1 >> 0) + (r << 16 >>> 16) * x$1) >> 0) + (t.charCodeAt(0) >> 0) >> 0) - 48 >> 0;
				t = t.substring(1);
				i = i + 1 >> 0;
			}
			_tuple$4 = [r, t, null], r = _tuple$4[0], rest = _tuple$4[1], err = _tuple$4[2];
			return [r, rest, err];
		} else if (_ref === 120) {
			if (t === "") {
				break;
			}
			if (_tuple$5 = nextRune(t), c = _tuple$5[0], t = _tuple$5[1], err = _tuple$5[2], !(go$interfaceIsEqual(err, null))) {
				_tuple$6 = [0, "", err], r = _tuple$6[0], rest = _tuple$6[1], err = _tuple$6[2];
				return [r, rest, err];
			}
			if (c === 123) {
				nhex = 0;
				r = 0;
				while (true) {
					if (t === "") {
						break Switch;
					}
					if (_tuple$7 = nextRune(t), c = _tuple$7[0], t = _tuple$7[1], err = _tuple$7[2], !(go$interfaceIsEqual(err, null))) {
						_tuple$8 = [0, "", err], r = _tuple$8[0], rest = _tuple$8[1], err = _tuple$8[2];
						return [r, rest, err];
					}
					if (c === 125) {
						break;
					}
					v = unhex(c);
					if (v < 0) {
						break Switch;
					}
					r = (x$2 = 16, (((r >>> 16 << 16) * x$2 >> 0) + (r << 16 >>> 16) * x$2) >> 0) + v >> 0;
					if (r > 1114111) {
						break Switch;
					}
					nhex = nhex + 1 >> 0;
				}
				if (nhex === 0) {
					break Switch;
				}
				_tuple$9 = [r, t, null], r = _tuple$9[0], rest = _tuple$9[1], err = _tuple$9[2];
				return [r, rest, err];
			}
			x$3 = unhex(c);
			if (_tuple$10 = nextRune(t), c = _tuple$10[0], t = _tuple$10[1], err = _tuple$10[2], !(go$interfaceIsEqual(err, null))) {
				_tuple$11 = [0, "", err], r = _tuple$11[0], rest = _tuple$11[1], err = _tuple$11[2];
				return [r, rest, err];
			}
			y = unhex(c);
			if (x$3 < 0 || y < 0) {
				break;
			}
			_tuple$12 = [(x$4 = 16, (((x$3 >>> 16 << 16) * x$4 >> 0) + (x$3 << 16 >>> 16) * x$4) >> 0) + y >> 0, t, null], r = _tuple$12[0], rest = _tuple$12[1], err = _tuple$12[2];
			return [r, rest, err];
		} else if (_ref === 97) {
			_tuple$13 = [7, t, err], r = _tuple$13[0], rest = _tuple$13[1], err = _tuple$13[2];
			return [r, rest, err];
		} else if (_ref === 102) {
			_tuple$14 = [12, t, err], r = _tuple$14[0], rest = _tuple$14[1], err = _tuple$14[2];
			return [r, rest, err];
		} else if (_ref === 110) {
			_tuple$15 = [10, t, err], r = _tuple$15[0], rest = _tuple$15[1], err = _tuple$15[2];
			return [r, rest, err];
		} else if (_ref === 114) {
			_tuple$16 = [13, t, err], r = _tuple$16[0], rest = _tuple$16[1], err = _tuple$16[2];
			return [r, rest, err];
		} else if (_ref === 116) {
			_tuple$17 = [9, t, err], r = _tuple$17[0], rest = _tuple$17[1], err = _tuple$17[2];
			return [r, rest, err];
		} else if (_ref === 118) {
			_tuple$18 = [11, t, err], r = _tuple$18[0], rest = _tuple$18[1], err = _tuple$18[2];
			return [r, rest, err];
		} else {
			if (c < 128 && !isalnum(c)) {
				_tuple$19 = [c, t, null], r = _tuple$19[0], rest = _tuple$19[1], err = _tuple$19[2];
				return [r, rest, err];
			}
		} }
		_tuple$20 = [0, "", new Error.Ptr("invalid escape sequence", s.substring(0, (s.length - t.length >> 0)))], r = _tuple$20[0], rest = _tuple$20[1], err = _tuple$20[2];
		return [r, rest, err];
	};
	parser.prototype.parseEscape = function(s) { return this.go$val.parseEscape(s); };
	parser.Ptr.prototype.parseClassChar = function(s, wholeClass) {
		var r, rest, err, p, _tuple, _tuple$1, _tuple$2;
		r = 0;
		rest = "";
		err = null;
		p = this;
		if (s === "") {
			_tuple = [0, "", new Error.Ptr("missing closing ]", wholeClass)], r = _tuple[0], rest = _tuple[1], err = _tuple[2];
			return [r, rest, err];
		}
		if (s.charCodeAt(0) === 92) {
			_tuple$1 = p.parseEscape(s), r = _tuple$1[0], rest = _tuple$1[1], err = _tuple$1[2];
			return [r, rest, err];
		}
		_tuple$2 = nextRune(s), r = _tuple$2[0], rest = _tuple$2[1], err = _tuple$2[2];
		return [r, rest, err];
	};
	parser.prototype.parseClassChar = function(s, wholeClass) { return this.go$val.parseClassChar(s, wholeClass); };
	parser.Ptr.prototype.parsePerlClassEscape = function(s, r) {
		var out, rest, p, _entry, _struct, g, _struct$1, _tuple;
		out = (go$sliceType(Go$Int32)).nil;
		rest = "";
		p = this;
		if ((((p.flags & 64) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92))) {
			return [out, rest];
		}
		g = (_struct = (_entry = perlGroup[s.substring(0, 2)], _entry !== undefined ? _entry.v : new charGroup.Ptr()), new charGroup.Ptr(_struct.sign, _struct.class$1));
		if (g.sign === 0) {
			return [out, rest];
		}
		_tuple = [p.appendGroup(r, (_struct$1 = g, new charGroup.Ptr(_struct$1.sign, _struct$1.class$1))), s.substring(2)], out = _tuple[0], rest = _tuple[1];
		return [out, rest];
	};
	parser.prototype.parsePerlClassEscape = function(s, r) { return this.go$val.parsePerlClassEscape(s, r); };
	parser.Ptr.prototype.parseNamedClass = function(s, r) {
		var out, rest, err, p, i, _tuple, name, _entry, _struct, g, _tuple$1, _struct$1, _tuple$2;
		out = (go$sliceType(Go$Int32)).nil;
		rest = "";
		err = null;
		p = this;
		if (s.length < 2 || !((s.charCodeAt(0) === 91)) || !((s.charCodeAt(1) === 58))) {
			return [out, rest, err];
		}
		i = strings.Index(s.substring(2), ":]");
		if (i < 0) {
			return [out, rest, err];
		}
		i = i + 2 >> 0;
		_tuple = [s.substring(0, (i + 2 >> 0)), s.substring((i + 2 >> 0))], name = _tuple[0], s = _tuple[1];
		g = (_struct = (_entry = posixGroup[name], _entry !== undefined ? _entry.v : new charGroup.Ptr()), new charGroup.Ptr(_struct.sign, _struct.class$1));
		if (g.sign === 0) {
			_tuple$1 = [(go$sliceType(Go$Int32)).nil, "", new Error.Ptr("invalid character class range", name)], out = _tuple$1[0], rest = _tuple$1[1], err = _tuple$1[2];
			return [out, rest, err];
		}
		_tuple$2 = [p.appendGroup(r, (_struct$1 = g, new charGroup.Ptr(_struct$1.sign, _struct$1.class$1))), s, null], out = _tuple$2[0], rest = _tuple$2[1], err = _tuple$2[2];
		return [out, rest, err];
	};
	parser.prototype.parseNamedClass = function(s, r) { return this.go$val.parseNamedClass(s, r); };
	parser.Ptr.prototype.appendGroup = function(r, g) {
		var p, tmp, v;
		p = this;
		if (((p.flags & 1) >>> 0) === 0) {
			if (g.sign < 0) {
				r = appendNegatedClass(r, g.class$1);
			} else {
				r = appendClass(r, g.class$1);
			}
		} else {
			tmp = go$subslice(p.tmpClass, 0, 0);
			tmp = appendFoldedClass(tmp, g.class$1);
			p.tmpClass = tmp;
			tmp = cleanClass(new (go$ptrType((go$sliceType(Go$Int32))))(function() { return p.tmpClass; }, function(v) { p.tmpClass = v; }));
			if (g.sign < 0) {
				r = appendNegatedClass(r, tmp);
			} else {
				r = appendClass(r, tmp);
			}
		}
		return r;
	};
	parser.prototype.appendGroup = function(r, g) { return this.go$val.appendGroup(r, g); };
	unicodeTable = function(name) {
		var t, _entry, _entry$1, t$1, _entry$2, _entry$3;
		if (name === "Any") {
			return [anyTable, anyTable];
		}
		if (t = (_entry = unicode.Categories[name], _entry !== undefined ? _entry.v : (go$ptrType(unicode.RangeTable)).nil), !(t === (go$ptrType(unicode.RangeTable)).nil)) {
			return [t, (_entry$1 = unicode.FoldCategory[name], _entry$1 !== undefined ? _entry$1.v : (go$ptrType(unicode.RangeTable)).nil)];
		}
		if (t$1 = (_entry$2 = unicode.Scripts[name], _entry$2 !== undefined ? _entry$2.v : (go$ptrType(unicode.RangeTable)).nil), !(t$1 === (go$ptrType(unicode.RangeTable)).nil)) {
			return [t$1, (_entry$3 = unicode.FoldScript[name], _entry$3 !== undefined ? _entry$3.v : (go$ptrType(unicode.RangeTable)).nil)];
		}
		return [(go$ptrType(unicode.RangeTable)).nil, (go$ptrType(unicode.RangeTable)).nil];
	};
	parser.Ptr.prototype.parseUnicodeClass = function(s, r) {
		var out, rest, err, p, sign, t, _tuple, c, _tuple$1, seq, name, end, _tuple$2, _tuple$3, _tuple$4, tab, fold, _tuple$5, tmp, v, _tuple$6;
		out = (go$sliceType(Go$Int32)).nil;
		rest = "";
		err = null;
		p = this;
		if ((((p.flags & 128) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92)) || !((s.charCodeAt(1) === 112)) && !((s.charCodeAt(1) === 80))) {
			return [out, rest, err];
		}
		sign = 1;
		if (s.charCodeAt(1) === 80) {
			sign = -1;
		}
		t = s.substring(2);
		_tuple = nextRune(t), c = _tuple[0], t = _tuple[1], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			return [out, rest, err];
		}
		_tuple$1 = ["", ""], seq = _tuple$1[0], name = _tuple$1[1];
		if (!((c === 123))) {
			seq = s.substring(0, (s.length - t.length >> 0));
			name = seq.substring(2);
		} else {
			end = strings.IndexRune(s, 125);
			if (end < 0) {
				if (err = checkUTF8(s), !(go$interfaceIsEqual(err, null))) {
					return [out, rest, err];
				}
				_tuple$2 = [(go$sliceType(Go$Int32)).nil, "", new Error.Ptr("invalid character class range", s)], out = _tuple$2[0], rest = _tuple$2[1], err = _tuple$2[2];
				return [out, rest, err];
			}
			_tuple$3 = [s.substring(0, (end + 1 >> 0)), s.substring((end + 1 >> 0))], seq = _tuple$3[0], t = _tuple$3[1];
			name = s.substring(3, end);
			if (err = checkUTF8(name), !(go$interfaceIsEqual(err, null))) {
				return [out, rest, err];
			}
		}
		if (!(name === "") && (name.charCodeAt(0) === 94)) {
			sign = -sign;
			name = name.substring(1);
		}
		_tuple$4 = unicodeTable(name), tab = _tuple$4[0], fold = _tuple$4[1];
		if (tab === (go$ptrType(unicode.RangeTable)).nil) {
			_tuple$5 = [(go$sliceType(Go$Int32)).nil, "", new Error.Ptr("invalid character class range", seq)], out = _tuple$5[0], rest = _tuple$5[1], err = _tuple$5[2];
			return [out, rest, err];
		}
		if ((((p.flags & 1) >>> 0) === 0) || fold === (go$ptrType(unicode.RangeTable)).nil) {
			if (sign > 0) {
				r = appendTable(r, tab);
			} else {
				r = appendNegatedTable(r, tab);
			}
		} else {
			tmp = go$subslice(p.tmpClass, 0, 0);
			tmp = appendTable(tmp, tab);
			tmp = appendTable(tmp, fold);
			p.tmpClass = tmp;
			tmp = cleanClass(new (go$ptrType((go$sliceType(Go$Int32))))(function() { return p.tmpClass; }, function(v) { p.tmpClass = v; }));
			if (sign > 0) {
				r = appendClass(r, tmp);
			} else {
				r = appendNegatedClass(r, tmp);
			}
		}
		_tuple$6 = [r, t, null], out = _tuple$6[0], rest = _tuple$6[1], err = _tuple$6[2];
		return [out, rest, err];
	};
	parser.prototype.parseUnicodeClass = function(s, r) { return this.go$val.parseUnicodeClass(s, r); };
	parser.Ptr.prototype.parseClass = function(s) {
		var rest, err, p, t, re, sign, class$1, first, _tuple, size, _tuple$1, _tuple$2, nclass, nt, err$1, _tuple$3, _tuple$4, _tuple$5, nclass$1, nt$1, err$2, _tuple$6, _tuple$7, nclass$2, _tuple$8, nt$2, _tuple$9, rng, _tuple$10, lo, hi, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, v, _tuple$16;
		rest = "";
		err = null;
		p = this;
		t = s.substring(1);
		re = p.newRegexp(4);
		re.Flags = p.flags;
		re.Rune = go$subslice(new (go$sliceType(Go$Int32))(re.Rune0), 0, 0);
		sign = 1;
		if (!(t === "") && (t.charCodeAt(0) === 94)) {
			sign = -1;
			t = t.substring(1);
			if (((p.flags & 4) >>> 0) === 0) {
				re.Rune = go$append(re.Rune, 10, 10);
			}
		}
		class$1 = re.Rune;
		first = true;
		while (t === "" || !((t.charCodeAt(0) === 93)) || first) {
			if (!(t === "") && (t.charCodeAt(0) === 45) && (((p.flags & 64) >>> 0) === 0) && !first && ((t.length === 1) || !((t.charCodeAt(1) === 93)))) {
				_tuple = utf8.DecodeRuneInString(t.substring(1)), size = _tuple[1];
				_tuple$1 = ["", new Error.Ptr("invalid character class range", t.substring(0, (1 + size >> 0)))], rest = _tuple$1[0], err = _tuple$1[1];
				return [rest, err];
			}
			first = false;
			if (t.length > 2 && (t.charCodeAt(0) === 91) && (t.charCodeAt(1) === 58)) {
				_tuple$2 = p.parseNamedClass(t, class$1), nclass = _tuple$2[0], nt = _tuple$2[1], err$1 = _tuple$2[2];
				if (!(go$interfaceIsEqual(err$1, null))) {
					_tuple$3 = ["", err$1], rest = _tuple$3[0], err = _tuple$3[1];
					return [rest, err];
				}
				if (!(nclass === (go$sliceType(Go$Int32)).nil)) {
					_tuple$4 = [nclass, nt], class$1 = _tuple$4[0], t = _tuple$4[1];
					continue;
				}
			}
			_tuple$5 = p.parseUnicodeClass(t, class$1), nclass$1 = _tuple$5[0], nt$1 = _tuple$5[1], err$2 = _tuple$5[2];
			if (!(go$interfaceIsEqual(err$2, null))) {
				_tuple$6 = ["", err$2], rest = _tuple$6[0], err = _tuple$6[1];
				return [rest, err];
			}
			if (!(nclass$1 === (go$sliceType(Go$Int32)).nil)) {
				_tuple$7 = [nclass$1, nt$1], class$1 = _tuple$7[0], t = _tuple$7[1];
				continue;
			}
			if (_tuple$8 = p.parsePerlClassEscape(t, class$1), nclass$2 = _tuple$8[0], nt$2 = _tuple$8[1], !(nclass$2 === (go$sliceType(Go$Int32)).nil)) {
				_tuple$9 = [nclass$2, nt$2], class$1 = _tuple$9[0], t = _tuple$9[1];
				continue;
			}
			rng = t;
			_tuple$10 = [0, 0], lo = _tuple$10[0], hi = _tuple$10[1];
			if (_tuple$11 = p.parseClassChar(t, s), lo = _tuple$11[0], t = _tuple$11[1], err$2 = _tuple$11[2], !(go$interfaceIsEqual(err$2, null))) {
				_tuple$12 = ["", err$2], rest = _tuple$12[0], err = _tuple$12[1];
				return [rest, err];
			}
			hi = lo;
			if (t.length >= 2 && (t.charCodeAt(0) === 45) && !((t.charCodeAt(1) === 93))) {
				t = t.substring(1);
				if (_tuple$13 = p.parseClassChar(t, s), hi = _tuple$13[0], t = _tuple$13[1], err$2 = _tuple$13[2], !(go$interfaceIsEqual(err$2, null))) {
					_tuple$14 = ["", err$2], rest = _tuple$14[0], err = _tuple$14[1];
					return [rest, err];
				}
				if (hi < lo) {
					rng = rng.substring(0, (rng.length - t.length >> 0));
					_tuple$15 = ["", new Error.Ptr("invalid character class range", rng)], rest = _tuple$15[0], err = _tuple$15[1];
					return [rest, err];
				}
			}
			if (((p.flags & 1) >>> 0) === 0) {
				class$1 = appendRange(class$1, lo, hi);
			} else {
				class$1 = appendFoldedRange(class$1, lo, hi);
			}
		}
		t = t.substring(1);
		re.Rune = class$1;
		class$1 = cleanClass(new (go$ptrType((go$sliceType(Go$Int32))))(function() { return re.Rune; }, function(v) { re.Rune = v; }));
		if (sign < 0) {
			class$1 = negateClass(class$1);
		}
		re.Rune = class$1;
		p.push(re);
		_tuple$16 = [t, null], rest = _tuple$16[0], err = _tuple$16[1];
		return [rest, err];
	};
	parser.prototype.parseClass = function(s) { return this.go$val.parseClass(s); };
	cleanClass = function(rp) {
		var x, r, w, i, _slice, _index, _slice$1, _index$1, _tuple, lo, hi, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6;
		sort.Sort((x = new ranges.Ptr(rp), new x.constructor.Struct(x)));
		r = rp.go$get();
		if (r.length < 2) {
			return r;
		}
		w = 2;
		i = 2;
		while (i < r.length) {
			_tuple = [(_slice = r, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = r, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], lo = _tuple[0], hi = _tuple[1];
			if (lo <= ((_slice$2 = r, _index$2 = (w - 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) + 1 >> 0)) {
				if (hi > (_slice$3 = r, _index$3 = (w - 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))) {
					_slice$4 = r, _index$4 = w - 1 >> 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = hi) : go$throwRuntimeError("index out of range");
				}
				i = i + 2 >> 0;
				continue;
			}
			_slice$5 = r, _index$5 = w, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = lo) : go$throwRuntimeError("index out of range");
			_slice$6 = r, _index$6 = w + 1 >> 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = hi) : go$throwRuntimeError("index out of range");
			w = w + 2 >> 0;
			i = i + 2 >> 0;
		}
		return go$subslice(r, 0, w);
	};
	appendLiteral = function(r, x, flags) {
		if (!((((flags & 1) >>> 0) === 0))) {
			return appendFoldedRange(r, x, x);
		}
		return appendRange(r, x, x);
	};
	appendRange = function(r, lo, hi) {
		var n, i, _slice, _index, _slice$1, _index$1, _tuple, rlo, rhi, _slice$2, _index$2, _slice$3, _index$3;
		n = r.length;
		i = 2;
		while (i <= 4) {
			if (n >= i) {
				_tuple = [(_slice = r, _index = (n - i >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = r, _index$1 = ((n - i >> 0) + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], rlo = _tuple[0], rhi = _tuple[1];
				if (lo <= (rhi + 1 >> 0) && rlo <= (hi + 1 >> 0)) {
					if (lo < rlo) {
						_slice$2 = r, _index$2 = n - i >> 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = lo) : go$throwRuntimeError("index out of range");
					}
					if (hi > rhi) {
						_slice$3 = r, _index$3 = (n - i >> 0) + 1 >> 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = hi) : go$throwRuntimeError("index out of range");
					}
					return r;
				}
			}
			i = i + 2 >> 0;
		}
		return go$append(r, lo, hi);
	};
	appendFoldedRange = function(r, lo, hi) {
		var c, f;
		if (lo <= 65 && hi >= 66639) {
			return appendRange(r, lo, hi);
		}
		if (hi < 65 || lo > 66639) {
			return appendRange(r, lo, hi);
		}
		if (lo < 65) {
			r = appendRange(r, lo, 64);
			lo = 65;
		}
		if (hi > 66639) {
			r = appendRange(r, 66640, hi);
			hi = 66639;
		}
		c = lo;
		while (c <= hi) {
			r = appendRange(r, c, c);
			f = unicode.SimpleFold(c);
			while (!((f === c))) {
				r = appendRange(r, f, f);
				f = unicode.SimpleFold(f);
			}
			c = c + 1 >> 0;
		}
		return r;
	};
	appendClass = function(r, x) {
		var i, _slice, _index, _slice$1, _index$1;
		i = 0;
		while (i < x.length) {
			r = appendRange(r, (_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = x, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
			i = i + 2 >> 0;
		}
		return r;
	};
	appendFoldedClass = function(r, x) {
		var i, _slice, _index, _slice$1, _index$1;
		i = 0;
		while (i < x.length) {
			r = appendFoldedRange(r, (_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = x, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
			i = i + 2 >> 0;
		}
		return r;
	};
	appendNegatedClass = function(r, x) {
		var nextLo, i, _slice, _index, _slice$1, _index$1, _tuple, lo, hi;
		nextLo = 0;
		i = 0;
		while (i < x.length) {
			_tuple = [(_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = x, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], lo = _tuple[0], hi = _tuple[1];
			if (nextLo <= (lo - 1 >> 0)) {
				r = appendRange(r, nextLo, lo - 1 >> 0);
			}
			nextLo = hi + 1 >> 0;
			i = i + 2 >> 0;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	appendTable = function(r, x) {
		var _ref, _i, _slice, _index, _struct, xr, _tuple, lo, hi, stride, c, _ref$1, _i$1, _slice$1, _index$1, _struct$1, xr$1, _tuple$1, lo$1, hi$1, stride$1, c$1;
		_ref = x.R16;
		_i = 0;
		while (_i < _ref.length) {
			xr = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new unicode.Range16.Ptr(_struct.Lo, _struct.Hi, _struct.Stride));
			_tuple = [(xr.Lo >> 0), (xr.Hi >> 0), (xr.Stride >> 0)], lo = _tuple[0], hi = _tuple[1], stride = _tuple[2];
			if (stride === 1) {
				r = appendRange(r, lo, hi);
				_i++;
				continue;
			}
			c = lo;
			while (c <= hi) {
				r = appendRange(r, c, c);
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			xr$1 = (_struct$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new unicode.Range32.Ptr(_struct$1.Lo, _struct$1.Hi, _struct$1.Stride));
			_tuple$1 = [(xr$1.Lo >> 0), (xr$1.Hi >> 0), (xr$1.Stride >> 0)], lo$1 = _tuple$1[0], hi$1 = _tuple$1[1], stride$1 = _tuple$1[2];
			if (stride$1 === 1) {
				r = appendRange(r, lo$1, hi$1);
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (c$1 <= hi$1) {
				r = appendRange(r, c$1, c$1);
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		return r;
	};
	appendNegatedTable = function(r, x) {
		var nextLo, _ref, _i, _slice, _index, _struct, xr, _tuple, lo, hi, stride, c, _ref$1, _i$1, _slice$1, _index$1, _struct$1, xr$1, _tuple$1, lo$1, hi$1, stride$1, c$1;
		nextLo = 0;
		_ref = x.R16;
		_i = 0;
		while (_i < _ref.length) {
			xr = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new unicode.Range16.Ptr(_struct.Lo, _struct.Hi, _struct.Stride));
			_tuple = [(xr.Lo >> 0), (xr.Hi >> 0), (xr.Stride >> 0)], lo = _tuple[0], hi = _tuple[1], stride = _tuple[2];
			if (stride === 1) {
				if (nextLo <= (lo - 1 >> 0)) {
					r = appendRange(r, nextLo, lo - 1 >> 0);
				}
				nextLo = hi + 1 >> 0;
				_i++;
				continue;
			}
			c = lo;
			while (c <= hi) {
				if (nextLo <= (c - 1 >> 0)) {
					r = appendRange(r, nextLo, c - 1 >> 0);
				}
				nextLo = c + 1 >> 0;
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			xr$1 = (_struct$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new unicode.Range32.Ptr(_struct$1.Lo, _struct$1.Hi, _struct$1.Stride));
			_tuple$1 = [(xr$1.Lo >> 0), (xr$1.Hi >> 0), (xr$1.Stride >> 0)], lo$1 = _tuple$1[0], hi$1 = _tuple$1[1], stride$1 = _tuple$1[2];
			if (stride$1 === 1) {
				if (nextLo <= (lo$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, lo$1 - 1 >> 0);
				}
				nextLo = hi$1 + 1 >> 0;
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (c$1 <= hi$1) {
				if (nextLo <= (c$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, c$1 - 1 >> 0);
				}
				nextLo = c$1 + 1 >> 0;
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	negateClass = function(r) {
		var nextLo, w, i, _slice, _index, _slice$1, _index$1, _tuple, lo, hi, _slice$2, _index$2, _slice$3, _index$3;
		nextLo = 0;
		w = 0;
		i = 0;
		while (i < r.length) {
			_tuple = [(_slice = r, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = r, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], lo = _tuple[0], hi = _tuple[1];
			if (nextLo <= (lo - 1 >> 0)) {
				_slice$2 = r, _index$2 = w, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = nextLo) : go$throwRuntimeError("index out of range");
				_slice$3 = r, _index$3 = w + 1 >> 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = lo - 1 >> 0) : go$throwRuntimeError("index out of range");
				w = w + 2 >> 0;
			}
			nextLo = hi + 1 >> 0;
			i = i + 2 >> 0;
		}
		r = go$subslice(r, 0, w);
		if (nextLo <= 1114111) {
			r = go$append(r, nextLo, 1114111);
		}
		return r;
	};
	ranges.Ptr.prototype.Less = function(i, j) {
		var _struct, ra, p, x, x$1, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5;
		ra = (_struct = this, new ranges.Ptr(_struct.p));
		p = ra.p.go$get();
		i = (x = 2, (((i >>> 16 << 16) * x >> 0) + (i << 16 >>> 16) * x) >> 0);
		j = (x$1 = 2, (((j >>> 16 << 16) * x$1 >> 0) + (j << 16 >>> 16) * x$1) >> 0);
		return (_slice = p, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < (_slice$1 = p, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) || ((_slice$2 = p, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === (_slice$3 = p, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))) && (_slice$4 = p, _index$4 = (i + 1 >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) > (_slice$5 = p, _index$5 = (j + 1 >> 0), (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
	};
	ranges.prototype.Less = function(i, j) { return this.go$val.Less(i, j); };
	ranges.Ptr.prototype.Len = function() {
		var _struct, ra, _q;
		ra = (_struct = this, new ranges.Ptr(_struct.p));
		return (_q = ra.p.go$get().length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
	};
	ranges.prototype.Len = function() { return this.go$val.Len(); };
	ranges.Ptr.prototype.Swap = function(i, j) {
		var _struct, ra, p, x, x$1, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _tuple, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7;
		ra = (_struct = this, new ranges.Ptr(_struct.p));
		p = ra.p.go$get();
		i = (x = 2, (((i >>> 16 << 16) * x >> 0) + (i << 16 >>> 16) * x) >> 0);
		j = (x$1 = 2, (((j >>> 16 << 16) * x$1 >> 0) + (j << 16 >>> 16) * x$1) >> 0);
		_tuple = [(_slice = p, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = p, _index$1 = (j + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (_slice$2 = p, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), (_slice$3 = p, _index$3 = (i + 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))], _slice$4 = p, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$5 = p, _index$5 = i + 1 >> 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = _tuple[1]) : go$throwRuntimeError("index out of range"), _slice$6 = p, _index$6 = j, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = _tuple[2]) : go$throwRuntimeError("index out of range"), _slice$7 = p, _index$7 = j + 1 >> 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = _tuple[3]) : go$throwRuntimeError("index out of range");
	};
	ranges.prototype.Swap = function(i, j) { return this.go$val.Swap(i, j); };
	checkUTF8 = function(s) {
		var _tuple, rune, size;
		while (!(s === "")) {
			_tuple = utf8.DecodeRuneInString(s), rune = _tuple[0], size = _tuple[1];
			if ((rune === 65533) && (size === 1)) {
				return new Error.Ptr("invalid UTF-8", s);
			}
			s = s.substring(size);
		}
		return null;
	};
	nextRune = function(s) {
		var c, t, err, _tuple, size, _tuple$1, _tuple$2;
		c = 0;
		t = "";
		err = null;
		_tuple = utf8.DecodeRuneInString(s), c = _tuple[0], size = _tuple[1];
		if ((c === 65533) && (size === 1)) {
			_tuple$1 = [0, "", new Error.Ptr("invalid UTF-8", s)], c = _tuple$1[0], t = _tuple$1[1], err = _tuple$1[2];
			return [c, t, err];
		}
		_tuple$2 = [c, s.substring(size), null], c = _tuple$2[0], t = _tuple$2[1], err = _tuple$2[2];
		return [c, t, err];
	};
	isalnum = function(c) {
		return 48 <= c && c <= 57 || 65 <= c && c <= 90 || 97 <= c && c <= 122;
	};
	unhex = function(c) {
		if (48 <= c && c <= 57) {
			return c - 48 >> 0;
		}
		if (97 <= c && c <= 102) {
			return (c - 97 >> 0) + 10 >> 0;
		}
		if (65 <= c && c <= 70) {
			return (c - 65 >> 0) + 10 >> 0;
		}
		return -1;
	};
	EmptyOpContext = go$pkg.EmptyOpContext = function(r1, r2) {
		var op, boundary;
		op = 32;
		boundary = 0;
		if (IsWordChar(r1)) {
			boundary = 1;
		} else if (r1 === 10) {
			op = (op | 1) >>> 0;
		} else if (r1 < 0) {
			op = (op | 5) >>> 0;
		}
		if (IsWordChar(r2)) {
			boundary = (boundary ^ 1) << 24 >>> 24;
		} else if (r2 === 10) {
			op = (op | 2) >>> 0;
		} else if (r2 < 0) {
			op = (op | 10) >>> 0;
		}
		if (!((boundary === 0))) {
			op = (op ^ 48) << 24 >>> 24;
		}
		return op;
	};
	IsWordChar = go$pkg.IsWordChar = function(r) {
		return 65 <= r && r <= 90 || 97 <= r && r <= 122 || 48 <= r && r <= 57 || (r === 95);
	};
	Prog.Ptr.prototype.String = function() {
		var p, b;
		p = this;
		b = new bytes.Buffer.Ptr();
		dumpProg(b, p);
		return b.String();
	};
	Prog.prototype.String = function() { return this.go$val.String(); };
	Prog.Ptr.prototype.skipNop = function(pc) {
		var p, _slice, _index, i, _slice$1, _index$1;
		p = this;
		i = (_slice = p.Inst, _index = pc, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		while ((i.Op === 6) || (i.Op === 2)) {
			pc = i.Out;
			i = (_slice$1 = p.Inst, _index$1 = pc, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		}
		return i;
	};
	Prog.prototype.skipNop = function(pc) { return this.go$val.skipNop(pc); };
	Inst.Ptr.prototype.op = function() {
		var i, op, _ref;
		i = this;
		op = i.Op;
		_ref = op;
		if (_ref === 8 || _ref === 9 || _ref === 10) {
			op = 7;
		}
		return op;
	};
	Inst.prototype.op = function() { return this.go$val.op(); };
	Prog.Ptr.prototype.Prefix = function() {
		var prefix, complete, p, i, _tuple, buf, _slice, _index, _tuple$1;
		prefix = "";
		complete = false;
		p = this;
		i = p.skipNop((p.Start >>> 0));
		if (!((i.op() === 7)) || !((i.Rune.length === 1))) {
			_tuple = ["", i.Op === 4], prefix = _tuple[0], complete = _tuple[1];
			return [prefix, complete];
		}
		buf = new bytes.Buffer.Ptr();
		while ((i.op() === 7) && (i.Rune.length === 1) && ((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0)) {
			buf.WriteRune((_slice = i.Rune, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
			i = p.skipNop(i.Out);
		}
		_tuple$1 = [buf.String(), i.Op === 4], prefix = _tuple$1[0], complete = _tuple$1[1];
		return [prefix, complete];
	};
	Prog.prototype.Prefix = function() { return this.go$val.Prefix(); };
	Prog.Ptr.prototype.StartCond = function() {
		var p, flag, pc, _slice, _index, i, _ref, _slice$1, _index$1;
		p = this;
		flag = 0;
		pc = (p.Start >>> 0);
		i = (_slice = p.Inst, _index = pc, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		Loop:
		while (true) {
			_ref = i.Op;
			if (_ref === 3) {
				flag = (flag | ((i.Arg << 24 >>> 24))) >>> 0;
			} else if (_ref === 5) {
				return 255;
			} else if (_ref === 2 || _ref === 6) {
			} else {
				break Loop;
			}
			pc = i.Out;
			i = (_slice$1 = p.Inst, _index$1 = pc, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		}
		return flag;
	};
	Prog.prototype.StartCond = function() { return this.go$val.StartCond(); };
	Inst.Ptr.prototype.MatchRune = function(r) {
		var i, rune, _slice, _index, r0, r1, j, _slice$1, _index$1, _slice$2, _index$2, lo, _q, hi, _q$1, m, c, _slice$3, _index$3, x, _slice$4, _index$4, x$1;
		i = this;
		rune = i.Rune;
		if (rune.length === 1) {
			r0 = (_slice = rune, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (r === r0) {
				return true;
			}
			if (!(((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0))) {
				r1 = unicode.SimpleFold(r0);
				while (!((r1 === r0))) {
					if (r === r1) {
						return true;
					}
					r1 = unicode.SimpleFold(r1);
				}
			}
			return false;
		}
		j = 0;
		while (j < rune.length && j <= 8) {
			if (r < (_slice$1 = rune, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) {
				return false;
			}
			if (r <= (_slice$2 = rune, _index$2 = (j + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))) {
				return true;
			}
			j = j + 2 >> 0;
		}
		lo = 0;
		hi = (_q = rune.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		while (lo < hi) {
			m = lo + (_q$1 = ((hi - lo >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if (c = (_slice$3 = rune, _index$3 = (x = 2, (((x >>> 16 << 16) * m >> 0) + (x << 16 >>> 16) * m) >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), c <= r) {
				if (r <= (_slice$4 = rune, _index$4 = ((x$1 = 2, (((x$1 >>> 16 << 16) * m >> 0) + (x$1 << 16 >>> 16) * m) >> 0) + 1 >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"))) {
					return true;
				}
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		return false;
	};
	Inst.prototype.MatchRune = function(r) { return this.go$val.MatchRune(r); };
	wordRune = function(r) {
		return (r === 95) || (65 <= r && r <= 90) || (97 <= r && r <= 122) || (48 <= r && r <= 57);
	};
	Inst.Ptr.prototype.MatchEmptyWidth = function(before, after) {
		var i, _ref;
		i = this;
		_ref = (i.Arg << 24 >>> 24);
		if (_ref === 1) {
			return (before === 10) || (before === -1);
		} else if (_ref === 2) {
			return (after === 10) || (after === -1);
		} else if (_ref === 4) {
			return before === -1;
		} else if (_ref === 8) {
			return after === -1;
		} else if (_ref === 16) {
			return !(wordRune(before) === wordRune(after));
		} else if (_ref === 32) {
			return wordRune(before) === wordRune(after);
		}
		throw go$panic(new Go$String("unknown empty width arg"));
	};
	Inst.prototype.MatchEmptyWidth = function(before, after) { return this.go$val.MatchEmptyWidth(before, after); };
	Inst.Ptr.prototype.String = function() {
		var i, b;
		i = this;
		b = new bytes.Buffer.Ptr();
		dumpInst(b, i);
		return b.String();
	};
	Inst.prototype.String = function() { return this.go$val.String(); };
	bw = function(b, args) {
		var _ref, _i, _slice, _index, s;
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			b.WriteString(s);
			_i++;
		}
	};
	dumpProg = function(b, p) {
		var _ref, _i, j, _slice, _index, i, pc;
		_ref = p.Inst;
		_i = 0;
		while (_i < _ref.length) {
			j = _i;
			i = (_slice = p.Inst, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			pc = strconv.Itoa(j);
			if (pc.length < 3) {
				b.WriteString("   ".substring(pc.length));
			}
			if (j === p.Start) {
				pc = pc + "*";
			}
			bw(b, new (go$sliceType(Go$String))([pc, "\t"]));
			dumpInst(b, i);
			bw(b, new (go$sliceType(Go$String))(["\n"]));
			_i++;
		}
	};
	u32 = function(i) {
		return strconv.FormatUint(new Go$Uint64(0, i), 10);
	};
	dumpInst = function(b, i) {
		var _ref;
		_ref = i.Op;
		if (_ref === 0) {
			bw(b, new (go$sliceType(Go$String))(["alt -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_ref === 1) {
			bw(b, new (go$sliceType(Go$String))(["altmatch -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_ref === 2) {
			bw(b, new (go$sliceType(Go$String))(["cap ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_ref === 3) {
			bw(b, new (go$sliceType(Go$String))(["empty ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_ref === 4) {
			bw(b, new (go$sliceType(Go$String))(["match"]));
		} else if (_ref === 5) {
			bw(b, new (go$sliceType(Go$String))(["fail"]));
		} else if (_ref === 6) {
			bw(b, new (go$sliceType(Go$String))(["nop -> ", u32(i.Out)]));
		} else if (_ref === 7) {
			if (i.Rune === (go$sliceType(Go$Int32)).nil) {
				bw(b, new (go$sliceType(Go$String))(["rune <nil>"]));
			}
			bw(b, new (go$sliceType(Go$String))(["rune ", strconv.QuoteToASCII(go$runesToString(i.Rune))]));
			if (!(((((i.Arg << 16 >>> 16) & 1) >>> 0) === 0))) {
				bw(b, new (go$sliceType(Go$String))(["/i"]));
			}
			bw(b, new (go$sliceType(Go$String))([" -> ", u32(i.Out)]));
		} else if (_ref === 8) {
			bw(b, new (go$sliceType(Go$String))(["rune1 ", strconv.QuoteToASCII(go$runesToString(i.Rune)), " -> ", u32(i.Out)]));
		} else if (_ref === 9) {
			bw(b, new (go$sliceType(Go$String))(["any -> ", u32(i.Out)]));
		} else if (_ref === 10) {
			bw(b, new (go$sliceType(Go$String))(["anynotnl -> ", u32(i.Out)]));
		}
	};
	Regexp.Ptr.prototype.Equal = function(y) {
		var x, _ref, _ref$1, _i, _slice, _index, r, i, _slice$1, _index$1, _ref$2, _i$1, _slice$2, _index$2, sub, i$1, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9;
		x = this;
		if (x === (go$ptrType(Regexp)).nil || y === (go$ptrType(Regexp)).nil) {
			return x === y;
		}
		if (!((x.Op === y.Op))) {
			return false;
		}
		_ref = x.Op;
		if (_ref === 10) {
			if (!((((x.Flags & 256) >>> 0) === ((y.Flags & 256) >>> 0)))) {
				return false;
			}
		} else if (_ref === 3 || _ref === 4) {
			if (!((x.Rune.length === y.Rune.length))) {
				return false;
			}
			_ref$1 = x.Rune;
			_i = 0;
			while (_i < _ref$1.length) {
				r = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (!((r === (_slice$1 = y.Rune, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))))) {
					return false;
				}
				_i++;
			}
		} else if (_ref === 19 || _ref === 18) {
			if (!((x.Sub.length === y.Sub.length))) {
				return false;
			}
			_ref$2 = x.Sub;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				sub = (_slice$2 = _ref$2, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				i$1 = _i$1;
				if (!sub.Equal((_slice$3 = y.Sub, _index$3 = i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")))) {
					return false;
				}
				_i$1++;
			}
		} else if (_ref === 14 || _ref === 15 || _ref === 16) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !(_slice$4 = x.Sub, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).Equal((_slice$5 = y.Sub, _index$5 = 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")))) {
				return false;
			}
		} else if (_ref === 17) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !((x.Min === y.Min)) || !((x.Max === y.Max)) || !(_slice$6 = x.Sub, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")).Equal((_slice$7 = y.Sub, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")))) {
				return false;
			}
		} else if (_ref === 13) {
			if (!((x.Cap === y.Cap)) || !(x.Name === y.Name) || !(_slice$8 = x.Sub, _index$8 = 0, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")).Equal((_slice$9 = y.Sub, _index$9 = 0, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")))) {
				return false;
			}
		}
		return true;
	};
	Regexp.prototype.Equal = function(y) { return this.go$val.Equal(y); };
	writeRegexp = function(b, re) {
		var _ref, _ref$1, _i, _slice, _index, r, _r, _slice$1, _index$1, _slice$2, _index$2, i, _slice$3, _index$3, _slice$4, _index$4, _tuple, lo, hi, i$1, _slice$5, _index$5, _slice$6, _index$6, _tuple$1, lo$1, hi$1, _slice$7, _index$7, _slice$8, _index$8, sub, _slice$9, _index$9, _ref$2, _ref$3, _i$1, _slice$10, _index$10, sub$1, _ref$4, _i$2, _slice$11, _index$11, sub$2, i$2;
		_ref = re.Op;
		switch (0) { default: if (_ref === 1) {
			b.WriteString("[^\\x00-\\x{10FFFF}]");
		} else if (_ref === 2) {
			b.WriteString("(?:)");
		} else if (_ref === 3) {
			if (!((((re.Flags & 1) >>> 0) === 0))) {
				b.WriteString("(?i:");
			}
			_ref$1 = re.Rune;
			_i = 0;
			while (_i < _ref$1.length) {
				r = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				escape(b, r, false);
				_i++;
			}
			if (!((((re.Flags & 1) >>> 0) === 0))) {
				b.WriteString(")");
			}
		} else if (_ref === 4) {
			if (!(((_r = re.Rune.length % 2, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0))) {
				b.WriteString("[invalid char class]");
				break;
			}
			b.WriteRune(91);
			if (re.Rune.length === 0) {
				b.WriteString("^\\x00-\\x{10FFFF}");
			} else if (((_slice$1 = re.Rune, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 0) && ((_slice$2 = re.Rune, _index$2 = (re.Rune.length - 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 1114111)) {
				b.WriteRune(94);
				i = 1;
				while (i < (re.Rune.length - 1 >> 0)) {
					_tuple = [(_slice$3 = re.Rune, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) + 1 >> 0, (_slice$4 = re.Rune, _index$4 = (i + 1 >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) - 1 >> 0], lo = _tuple[0], hi = _tuple[1];
					escape(b, lo, lo === 45);
					if (!((lo === hi))) {
						b.WriteRune(45);
						escape(b, hi, hi === 45);
					}
					i = i + 2 >> 0;
				}
			} else {
				i$1 = 0;
				while (i$1 < re.Rune.length) {
					_tuple$1 = [(_slice$5 = re.Rune, _index$5 = i$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")), (_slice$6 = re.Rune, _index$6 = (i$1 + 1 >> 0), (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"))], lo$1 = _tuple$1[0], hi$1 = _tuple$1[1];
					escape(b, lo$1, lo$1 === 45);
					if (!((lo$1 === hi$1))) {
						b.WriteRune(45);
						escape(b, hi$1, hi$1 === 45);
					}
					i$1 = i$1 + 2 >> 0;
				}
			}
			b.WriteRune(93);
		} else if (_ref === 5) {
			b.WriteString("(?-s:.)");
		} else if (_ref === 6) {
			b.WriteString("(?s:.)");
		} else if (_ref === 7) {
			b.WriteRune(94);
		} else if (_ref === 8) {
			b.WriteRune(36);
		} else if (_ref === 9) {
			b.WriteString("\\A");
		} else if (_ref === 10) {
			if (!((((re.Flags & 256) >>> 0) === 0))) {
				b.WriteString("(?-m:$)");
			} else {
				b.WriteString("\\z");
			}
		} else if (_ref === 11) {
			b.WriteString("\\b");
		} else if (_ref === 12) {
			b.WriteString("\\B");
		} else if (_ref === 13) {
			if (!(re.Name === "")) {
				b.WriteString("(?P<");
				b.WriteString(re.Name);
				b.WriteRune(62);
			} else {
				b.WriteRune(40);
			}
			if (!(((_slice$7 = re.Sub, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")).Op === 2))) {
				writeRegexp(b, (_slice$8 = re.Sub, _index$8 = 0, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")));
			}
			b.WriteRune(41);
		} else if (_ref === 14 || _ref === 15 || _ref === 16 || _ref === 17) {
			if (sub = (_slice$9 = re.Sub, _index$9 = 0, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")), sub.Op > 13 || (sub.Op === 3) && sub.Rune.length > 1) {
				b.WriteString("(?:");
				writeRegexp(b, sub);
				b.WriteString(")");
			} else {
				writeRegexp(b, sub);
			}
			_ref$2 = re.Op;
			if (_ref$2 === 14) {
				b.WriteRune(42);
			} else if (_ref$2 === 15) {
				b.WriteRune(43);
			} else if (_ref$2 === 16) {
				b.WriteRune(63);
			} else if (_ref$2 === 17) {
				b.WriteRune(123);
				b.WriteString(strconv.Itoa(re.Min));
				if (!((re.Max === re.Min))) {
					b.WriteRune(44);
					if (re.Max >= 0) {
						b.WriteString(strconv.Itoa(re.Max));
					}
				}
				b.WriteRune(125);
			}
			if (!((((re.Flags & 32) >>> 0) === 0))) {
				b.WriteRune(63);
			}
		} else if (_ref === 18) {
			_ref$3 = re.Sub;
			_i$1 = 0;
			while (_i$1 < _ref$3.length) {
				sub$1 = (_slice$10 = _ref$3, _index$10 = _i$1, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"));
				if (sub$1.Op === 19) {
					b.WriteString("(?:");
					writeRegexp(b, sub$1);
					b.WriteString(")");
				} else {
					writeRegexp(b, sub$1);
				}
				_i$1++;
			}
		} else if (_ref === 19) {
			_ref$4 = re.Sub;
			_i$2 = 0;
			while (_i$2 < _ref$4.length) {
				sub$2 = (_slice$11 = _ref$4, _index$11 = _i$2, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range"));
				i$2 = _i$2;
				if (i$2 > 0) {
					b.WriteRune(124);
				}
				writeRegexp(b, sub$2);
				_i$2++;
			}
		} else {
			b.WriteString("<invalid op" + strconv.Itoa((re.Op >> 0)) + ">");
		} }
	};
	Regexp.Ptr.prototype.String = function() {
		var re, b;
		re = this;
		b = new bytes.Buffer.Ptr();
		writeRegexp(b, re);
		return b.String();
	};
	Regexp.prototype.String = function() { return this.go$val.String(); };
	escape = function(b, r, force) {
		var _ref, s;
		if (unicode.IsPrint(r)) {
			if (strings.IndexRune("\\.+*?()|[]{}^$", r) >= 0 || force) {
				b.WriteRune(92);
			}
			b.WriteRune(r);
			return;
		}
		_ref = r;
		switch (0) { default: if (_ref === 7) {
			b.WriteString("\\a");
		} else if (_ref === 12) {
			b.WriteString("\\f");
		} else if (_ref === 10) {
			b.WriteString("\\n");
		} else if (_ref === 13) {
			b.WriteString("\\r");
		} else if (_ref === 9) {
			b.WriteString("\\t");
		} else if (_ref === 11) {
			b.WriteString("\\v");
		} else {
			if (r < 256) {
				b.WriteString("\\x");
				s = strconv.FormatInt(new Go$Int64(0, r), 16);
				if (s.length === 1) {
					b.WriteRune(48);
				}
				b.WriteString(s);
				break;
			}
			b.WriteString("\\x{");
			b.WriteString(strconv.FormatInt(new Go$Int64(0, r), 16));
			b.WriteString("}");
		} }
	};
	Regexp.Ptr.prototype.MaxCap = function() {
		var re, m, _ref, _i, _slice, _index, sub, n;
		re = this;
		m = 0;
		if (re.Op === 13) {
			m = re.Cap;
		}
		_ref = re.Sub;
		_i = 0;
		while (_i < _ref.length) {
			sub = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (n = sub.MaxCap(), m < n) {
				m = n;
			}
			_i++;
		}
		return m;
	};
	Regexp.prototype.MaxCap = function() { return this.go$val.MaxCap(); };
	Regexp.Ptr.prototype.CapNames = function() {
		var re, names;
		re = this;
		names = (go$sliceType(Go$String)).make(re.MaxCap() + 1 >> 0, 0, function() { return ""; });
		re.capNames(names);
		return names;
	};
	Regexp.prototype.CapNames = function() { return this.go$val.CapNames(); };
	Regexp.Ptr.prototype.capNames = function(names) {
		var re, _slice, _index, _ref, _i, _slice$1, _index$1, sub;
		re = this;
		if (re.Op === 13) {
			_slice = names, _index = re.Cap, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = re.Name) : go$throwRuntimeError("index out of range");
		}
		_ref = re.Sub;
		_i = 0;
		while (_i < _ref.length) {
			sub = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			sub.capNames(names);
			_i++;
		}
	};
	Regexp.prototype.capNames = function(names) { return this.go$val.capNames(names); };
	Regexp.Ptr.prototype.Simplify = function() {
		var re, _ref, nre, _ref$1, _i, _slice, _index, sub, i, nsub, _struct, l, r, _slice$1, _index$1, sub$1, _slice$2, _index$2, sub$2, nre$1, i$1, prefix, i$2, suffix, i$3, nre2;
		re = this;
		if (re === (go$ptrType(Regexp)).nil) {
			return (go$ptrType(Regexp)).nil;
		}
		_ref = re.Op;
		if (_ref === 13 || _ref === 18 || _ref === 19) {
			nre = re;
			_ref$1 = re.Sub;
			_i = 0;
			while (_i < _ref$1.length) {
				sub = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				nsub = sub.Simplify();
				if (nre === re && !(nsub === sub)) {
					nre = new Regexp.Ptr();
					l = nre, r = (_struct = re, new Regexp.Ptr(_struct.Op, _struct.Flags, _struct.Sub, go$mapArray(_struct.Sub0, function(entry) { return entry; }), _struct.Rune, go$mapArray(_struct.Rune0, function(entry) { return entry; }), _struct.Min, _struct.Max, _struct.Cap, _struct.Name)), l.Op = r.Op, l.Flags = r.Flags, l.Sub = r.Sub, l.Sub0 = r.Sub0, l.Rune = r.Rune, l.Rune0 = r.Rune0, l.Min = r.Min, l.Max = r.Max, l.Cap = r.Cap, l.Name = r.Name;
					nre.Rune = (go$sliceType(Go$Int32)).nil;
					nre.Sub = go$appendSlice(go$subslice(new (go$sliceType((go$ptrType(Regexp))))(nre.Sub0), 0, 0), go$subslice(re.Sub, 0, i));
				}
				if (!(nre === re)) {
					nre.Sub = go$append(nre.Sub, nsub);
				}
				_i++;
			}
			return nre;
		} else if (_ref === 14 || _ref === 15 || _ref === 16) {
			sub$1 = (_slice$1 = re.Sub, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Simplify();
			return simplify1(re.Op, re.Flags, sub$1, re);
		} else if (_ref === 17) {
			if ((re.Min === 0) && (re.Max === 0)) {
				return new Regexp.Ptr(2, 0, (go$sliceType((go$ptrType(Regexp)))).nil, go$makeNativeArray("Ptr", 1, function() { return (go$ptrType(Regexp)).nil; }), (go$sliceType(Go$Int32)).nil, go$makeNativeArray("Int32", 2, function() { return 0; }), 0, 0, 0, "");
			}
			sub$2 = (_slice$2 = re.Sub, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).Simplify();
			if (re.Max === -1) {
				if (re.Min === 0) {
					return simplify1(14, re.Flags, sub$2, (go$ptrType(Regexp)).nil);
				}
				if (re.Min === 1) {
					return simplify1(15, re.Flags, sub$2, (go$ptrType(Regexp)).nil);
				}
				nre$1 = new Regexp.Ptr(18, 0, (go$sliceType((go$ptrType(Regexp)))).nil, go$makeNativeArray("Ptr", 1, function() { return (go$ptrType(Regexp)).nil; }), (go$sliceType(Go$Int32)).nil, go$makeNativeArray("Int32", 2, function() { return 0; }), 0, 0, 0, "");
				nre$1.Sub = go$subslice(new (go$sliceType((go$ptrType(Regexp))))(nre$1.Sub0), 0, 0);
				i$1 = 0;
				while (i$1 < (re.Min - 1 >> 0)) {
					nre$1.Sub = go$append(nre$1.Sub, sub$2);
					i$1 = i$1 + 1 >> 0;
				}
				nre$1.Sub = go$append(nre$1.Sub, simplify1(15, re.Flags, sub$2, (go$ptrType(Regexp)).nil));
				return nre$1;
			}
			if ((re.Min === 1) && (re.Max === 1)) {
				return sub$2;
			}
			prefix = (go$ptrType(Regexp)).nil;
			if (re.Min > 0) {
				prefix = new Regexp.Ptr(18, 0, (go$sliceType((go$ptrType(Regexp)))).nil, go$makeNativeArray("Ptr", 1, function() { return (go$ptrType(Regexp)).nil; }), (go$sliceType(Go$Int32)).nil, go$makeNativeArray("Int32", 2, function() { return 0; }), 0, 0, 0, "");
				prefix.Sub = go$subslice(new (go$sliceType((go$ptrType(Regexp))))(prefix.Sub0), 0, 0);
				i$2 = 0;
				while (i$2 < re.Min) {
					prefix.Sub = go$append(prefix.Sub, sub$2);
					i$2 = i$2 + 1 >> 0;
				}
			}
			if (re.Max > re.Min) {
				suffix = simplify1(16, re.Flags, sub$2, (go$ptrType(Regexp)).nil);
				i$3 = re.Min + 1 >> 0;
				while (i$3 < re.Max) {
					nre2 = new Regexp.Ptr(18, 0, (go$sliceType((go$ptrType(Regexp)))).nil, go$makeNativeArray("Ptr", 1, function() { return (go$ptrType(Regexp)).nil; }), (go$sliceType(Go$Int32)).nil, go$makeNativeArray("Int32", 2, function() { return 0; }), 0, 0, 0, "");
					nre2.Sub = go$append(go$subslice(new (go$sliceType((go$ptrType(Regexp))))(nre2.Sub0), 0, 0), sub$2, suffix);
					suffix = simplify1(16, re.Flags, nre2, (go$ptrType(Regexp)).nil);
					i$3 = i$3 + 1 >> 0;
				}
				if (prefix === (go$ptrType(Regexp)).nil) {
					return suffix;
				}
				prefix.Sub = go$append(prefix.Sub, suffix);
			}
			if (!(prefix === (go$ptrType(Regexp)).nil)) {
				return prefix;
			}
			return new Regexp.Ptr(1, 0, (go$sliceType((go$ptrType(Regexp)))).nil, go$makeNativeArray("Ptr", 1, function() { return (go$ptrType(Regexp)).nil; }), (go$sliceType(Go$Int32)).nil, go$makeNativeArray("Int32", 2, function() { return 0; }), 0, 0, 0, "");
		}
		return re;
	};
	Regexp.prototype.Simplify = function() { return this.go$val.Simplify(); };
	simplify1 = function(op, flags, sub, re) {
		var _slice, _index;
		if (sub.Op === 2) {
			return sub;
		}
		if ((op === sub.Op) && (((flags & 32) >>> 0) === ((sub.Flags & 32) >>> 0))) {
			return sub;
		}
		if (!(re === (go$ptrType(Regexp)).nil) && (re.Op === op) && (((re.Flags & 32) >>> 0) === ((flags & 32) >>> 0)) && sub === (_slice = re.Sub, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))) {
			return re;
		}
		re = new Regexp.Ptr(op, flags, (go$sliceType((go$ptrType(Regexp)))).nil, go$makeNativeArray("Ptr", 1, function() { return (go$ptrType(Regexp)).nil; }), (go$sliceType(Go$Int32)).nil, go$makeNativeArray("Int32", 2, function() { return 0; }), 0, 0, 0, "");
		re.Sub = go$append(go$subslice(new (go$sliceType((go$ptrType(Regexp))))(re.Sub0), 0, 0), sub);
		return re;
	};
	go$pkg.init = function() {
		patchList.methods = [["append", "regexp/syntax", [(go$ptrType(Prog)), patchList], [patchList], false], ["next", "regexp/syntax", [(go$ptrType(Prog))], [patchList], false], ["patch", "regexp/syntax", [(go$ptrType(Prog)), Go$Uint32], [], false]];
		(go$ptrType(patchList)).methods = [["append", "regexp/syntax", [(go$ptrType(Prog)), patchList], [patchList], false], ["next", "regexp/syntax", [(go$ptrType(Prog))], [patchList], false], ["patch", "regexp/syntax", [(go$ptrType(Prog)), Go$Uint32], [], false]];
		frag.init([["i", "regexp/syntax", Go$Uint32, ""], ["out", "regexp/syntax", patchList, ""]]);
		compiler.init([["p", "regexp/syntax", (go$ptrType(Prog)), ""]]);
		(go$ptrType(compiler)).methods = [["alt", "regexp/syntax", [frag, frag], [frag], false], ["cap", "regexp/syntax", [Go$Uint32], [frag], false], ["cat", "regexp/syntax", [frag, frag], [frag], false], ["compile", "regexp/syntax", [(go$ptrType(Regexp))], [frag], false], ["empty", "regexp/syntax", [EmptyOp], [frag], false], ["fail", "regexp/syntax", [], [frag], false], ["init", "regexp/syntax", [], [], false], ["inst", "regexp/syntax", [InstOp], [frag], false], ["nop", "regexp/syntax", [], [frag], false], ["plus", "regexp/syntax", [frag, Go$Bool], [frag], false], ["quest", "regexp/syntax", [frag, Go$Bool], [frag], false], ["rune", "regexp/syntax", [(go$sliceType(Go$Int32)), Flags], [frag], false], ["star", "regexp/syntax", [frag, Go$Bool], [frag], false]];
		Error.init([["Code", "", ErrorCode, ""], ["Expr", "", Go$String, ""]]);
		(go$ptrType(Error)).methods = [["Error", "", [], [Go$String], false]];
		ErrorCode.methods = [["String", "", [], [Go$String], false]];
		(go$ptrType(ErrorCode)).methods = [["String", "", [], [Go$String], false]];
		parser.init([["flags", "regexp/syntax", Flags, ""], ["stack", "regexp/syntax", (go$sliceType((go$ptrType(Regexp)))), ""], ["free", "regexp/syntax", (go$ptrType(Regexp)), ""], ["numCap", "regexp/syntax", Go$Int, ""], ["wholeRegexp", "regexp/syntax", Go$String, ""], ["tmpClass", "regexp/syntax", (go$sliceType(Go$Int32)), ""]]);
		(go$ptrType(parser)).methods = [["alternate", "regexp/syntax", [], [(go$ptrType(Regexp))], false], ["appendGroup", "regexp/syntax", [(go$sliceType(Go$Int32)), charGroup], [(go$sliceType(Go$Int32))], false], ["collapse", "regexp/syntax", [(go$sliceType((go$ptrType(Regexp)))), Op], [(go$ptrType(Regexp))], false], ["concat", "regexp/syntax", [], [(go$ptrType(Regexp))], false], ["factor", "regexp/syntax", [(go$sliceType((go$ptrType(Regexp)))), Flags], [(go$sliceType((go$ptrType(Regexp))))], false], ["leadingRegexp", "regexp/syntax", [(go$ptrType(Regexp))], [(go$ptrType(Regexp))], false], ["leadingString", "regexp/syntax", [(go$ptrType(Regexp))], [(go$sliceType(Go$Int32)), Flags], false], ["literal", "regexp/syntax", [Go$Int32], [], false], ["maybeConcat", "regexp/syntax", [Go$Int32, Flags], [Go$Bool], false], ["newLiteral", "regexp/syntax", [Go$Int32, Flags], [(go$ptrType(Regexp))], false], ["newRegexp", "regexp/syntax", [Op], [(go$ptrType(Regexp))], false], ["op", "regexp/syntax", [Op], [(go$ptrType(Regexp))], false], ["parseClass", "regexp/syntax", [Go$String], [Go$String, go$error], false], ["parseClassChar", "regexp/syntax", [Go$String, Go$String], [Go$Int32, Go$String, go$error], false], ["parseEscape", "regexp/syntax", [Go$String], [Go$Int32, Go$String, go$error], false], ["parseInt", "regexp/syntax", [Go$String], [Go$Int, Go$String, Go$Bool], false], ["parseNamedClass", "regexp/syntax", [Go$String, (go$sliceType(Go$Int32))], [(go$sliceType(Go$Int32)), Go$String, go$error], false], ["parsePerlClassEscape", "regexp/syntax", [Go$String, (go$sliceType(Go$Int32))], [(go$sliceType(Go$Int32)), Go$String], false], ["parsePerlFlags", "regexp/syntax", [Go$String], [Go$String, go$error], false], ["parseRepeat", "regexp/syntax", [Go$String], [Go$Int, Go$Int, Go$String, Go$Bool], false], ["parseRightParen", "regexp/syntax", [], [go$error], false], ["parseUnicodeClass", "regexp/syntax", [Go$String, (go$sliceType(Go$Int32))], [(go$sliceType(Go$Int32)), Go$String, go$error], false], ["parseVerticalBar", "regexp/syntax", [], [go$error], false], ["push", "regexp/syntax", [(go$ptrType(Regexp))], [(go$ptrType(Regexp))], false], ["removeLeadingRegexp", "regexp/syntax", [(go$ptrType(Regexp)), Go$Bool], [(go$ptrType(Regexp))], false], ["removeLeadingString", "regexp/syntax", [(go$ptrType(Regexp)), Go$Int], [(go$ptrType(Regexp))], false], ["repeat", "regexp/syntax", [Op, Go$Int, Go$Int, Go$String, Go$String, Go$String], [Go$String, go$error], false], ["reuse", "regexp/syntax", [(go$ptrType(Regexp))], [], false], ["swapVerticalBar", "regexp/syntax", [], [Go$Bool], false]];
		charGroup.init([["sign", "regexp/syntax", Go$Int, ""], ["class", "regexp/syntax", (go$sliceType(Go$Int32)), ""]]);
		ranges.init([["p", "regexp/syntax", (go$ptrType((go$sliceType(Go$Int32)))), ""]]);
		ranges.methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		(go$ptrType(ranges)).methods = [["Len", "", [], [Go$Int], false], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false], ["Swap", "", [Go$Int, Go$Int], [], false]];
		Prog.init([["Inst", "", (go$sliceType(Inst)), ""], ["Start", "", Go$Int, ""], ["NumCap", "", Go$Int, ""]]);
		(go$ptrType(Prog)).methods = [["Prefix", "", [], [Go$String, Go$Bool], false], ["StartCond", "", [], [EmptyOp], false], ["String", "", [], [Go$String], false], ["skipNop", "regexp/syntax", [Go$Uint32], [(go$ptrType(Inst))], false]];
		Inst.init([["Op", "", InstOp, ""], ["Out", "", Go$Uint32, ""], ["Arg", "", Go$Uint32, ""], ["Rune", "", (go$sliceType(Go$Int32)), ""]]);
		(go$ptrType(Inst)).methods = [["MatchEmptyWidth", "", [Go$Int32, Go$Int32], [Go$Bool], false], ["MatchRune", "", [Go$Int32], [Go$Bool], false], ["String", "", [], [Go$String], false], ["op", "regexp/syntax", [], [InstOp], false]];
		Regexp.init([["Op", "", Op, ""], ["Flags", "", Flags, ""], ["Sub", "", (go$sliceType((go$ptrType(Regexp)))), ""], ["Sub0", "", (go$arrayType((go$ptrType(Regexp)), 1)), ""], ["Rune", "", (go$sliceType(Go$Int32)), ""], ["Rune0", "", (go$arrayType(Go$Int32, 2)), ""], ["Min", "", Go$Int, ""], ["Max", "", Go$Int, ""], ["Cap", "", Go$Int, ""], ["Name", "", Go$String, ""]]);
		(go$ptrType(Regexp)).methods = [["CapNames", "", [], [(go$sliceType(Go$String))], false], ["Equal", "", [(go$ptrType(Regexp))], [Go$Bool], false], ["MaxCap", "", [], [Go$Int], false], ["Simplify", "", [], [(go$ptrType(Regexp))], false], ["String", "", [], [Go$String], false], ["capNames", "regexp/syntax", [(go$sliceType(Go$String))], [], false]];
		anyRuneNotNL = new (go$sliceType(Go$Int32))([0, 9, 11, 1114111]);
		anyRune = new (go$sliceType(Go$Int32))([0, 1114111]);
		anyTable = new unicode.RangeTable.Ptr(new (go$sliceType(unicode.Range16))([new unicode.Range16.Ptr(0, 65535, 1)]), new (go$sliceType(unicode.Range32))([new unicode.Range32.Ptr(65536, 1114111, 1)]), 0);
		code1 = new (go$sliceType(Go$Int32))([48, 57]);
		code2 = new (go$sliceType(Go$Int32))([9, 10, 12, 13, 32, 32]);
		code3 = new (go$sliceType(Go$Int32))([48, 57, 65, 90, 95, 95, 97, 122]);
		var _map, _key;
		perlGroup = (_map = new Go$Map(), _key = "\\d", _map[_key] = { k: _key, v: new charGroup.Ptr(1, code1) }, _key = "\\D", _map[_key] = { k: _key, v: new charGroup.Ptr(-1, code1) }, _key = "\\s", _map[_key] = { k: _key, v: new charGroup.Ptr(1, code2) }, _key = "\\S", _map[_key] = { k: _key, v: new charGroup.Ptr(-1, code2) }, _key = "\\w", _map[_key] = { k: _key, v: new charGroup.Ptr(1, code3) }, _key = "\\W", _map[_key] = { k: _key, v: new charGroup.Ptr(-1, code3) }, _map);
		code4 = new (go$sliceType(Go$Int32))([48, 57, 65, 90, 97, 122]);
		code5 = new (go$sliceType(Go$Int32))([65, 90, 97, 122]);
		code6 = new (go$sliceType(Go$Int32))([0, 127]);
		code7 = new (go$sliceType(Go$Int32))([9, 9, 32, 32]);
		code8 = new (go$sliceType(Go$Int32))([0, 31, 127, 127]);
		code9 = new (go$sliceType(Go$Int32))([48, 57]);
		code10 = new (go$sliceType(Go$Int32))([33, 126]);
		code11 = new (go$sliceType(Go$Int32))([97, 122]);
		code12 = new (go$sliceType(Go$Int32))([32, 126]);
		code13 = new (go$sliceType(Go$Int32))([33, 47, 58, 64, 91, 96, 123, 126]);
		code14 = new (go$sliceType(Go$Int32))([9, 13, 32, 32]);
		code15 = new (go$sliceType(Go$Int32))([65, 90]);
		code16 = new (go$sliceType(Go$Int32))([48, 57, 65, 90, 95, 95, 97, 122]);
		code17 = new (go$sliceType(Go$Int32))([48, 57, 65, 70, 97, 102]);
		var _map$1, _key$1;
		posixGroup = (_map$1 = new Go$Map(), _key$1 = "[:alnum:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code4) }, _key$1 = "[:^alnum:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code4) }, _key$1 = "[:alpha:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code5) }, _key$1 = "[:^alpha:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code5) }, _key$1 = "[:ascii:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code6) }, _key$1 = "[:^ascii:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code6) }, _key$1 = "[:blank:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code7) }, _key$1 = "[:^blank:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code7) }, _key$1 = "[:cntrl:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code8) }, _key$1 = "[:^cntrl:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code8) }, _key$1 = "[:digit:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code9) }, _key$1 = "[:^digit:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code9) }, _key$1 = "[:graph:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code10) }, _key$1 = "[:^graph:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code10) }, _key$1 = "[:lower:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code11) }, _key$1 = "[:^lower:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code11) }, _key$1 = "[:print:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code12) }, _key$1 = "[:^print:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code12) }, _key$1 = "[:punct:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code13) }, _key$1 = "[:^punct:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code13) }, _key$1 = "[:space:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code14) }, _key$1 = "[:^space:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code14) }, _key$1 = "[:upper:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code15) }, _key$1 = "[:^upper:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code15) }, _key$1 = "[:word:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code16) }, _key$1 = "[:^word:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code16) }, _key$1 = "[:xdigit:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(1, code17) }, _key$1 = "[:^xdigit:]", _map$1[_key$1] = { k: _key$1, v: new charGroup.Ptr(-1, code17) }, _map$1);
	}
	return go$pkg;
})();
go$packages["regexp"] = (function() {
	var go$pkg = {}, io = go$packages["io"], syntax = go$packages["regexp/syntax"], bytes = go$packages["bytes"], strconv = go$packages["strconv"], strings = go$packages["strings"], sync = go$packages["sync"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], queue, entry, thread, machine, Regexp, input, inputString, inputBytes, inputReader, progMachine, Compile, compile, MustCompile, quote, extract, empty;
	queue = go$pkg.queue = go$newType(0, "Struct", "regexp.queue", "queue", "regexp", function(sparse_, dense_) {
		this.go$val = this;
		this.sparse = sparse_ !== undefined ? sparse_ : (go$sliceType(Go$Uint32)).nil;
		this.dense = dense_ !== undefined ? dense_ : (go$sliceType(entry)).nil;
	});
	entry = go$pkg.entry = go$newType(0, "Struct", "regexp.entry", "entry", "regexp", function(pc_, t_) {
		this.go$val = this;
		this.pc = pc_ !== undefined ? pc_ : 0;
		this.t = t_ !== undefined ? t_ : (go$ptrType(thread)).nil;
	});
	thread = go$pkg.thread = go$newType(0, "Struct", "regexp.thread", "thread", "regexp", function(inst_, cap_) {
		this.go$val = this;
		this.inst = inst_ !== undefined ? inst_ : (go$ptrType(syntax.Inst)).nil;
		this.cap = cap_ !== undefined ? cap_ : (go$sliceType(Go$Int)).nil;
	});
	machine = go$pkg.machine = go$newType(0, "Struct", "regexp.machine", "machine", "regexp", function(re_, p_, q0_, q1_, pool_, matched_, matchcap_, inputBytes_, inputString_, inputReader_) {
		this.go$val = this;
		this.re = re_ !== undefined ? re_ : (go$ptrType(Regexp)).nil;
		this.p = p_ !== undefined ? p_ : (go$ptrType(syntax.Prog)).nil;
		this.q0 = q0_ !== undefined ? q0_ : new queue.Ptr();
		this.q1 = q1_ !== undefined ? q1_ : new queue.Ptr();
		this.pool = pool_ !== undefined ? pool_ : (go$sliceType((go$ptrType(thread)))).nil;
		this.matched = matched_ !== undefined ? matched_ : false;
		this.matchcap = matchcap_ !== undefined ? matchcap_ : (go$sliceType(Go$Int)).nil;
		this.inputBytes = inputBytes_ !== undefined ? inputBytes_ : new inputBytes.Ptr();
		this.inputString = inputString_ !== undefined ? inputString_ : new inputString.Ptr();
		this.inputReader = inputReader_ !== undefined ? inputReader_ : new inputReader.Ptr();
	});
	Regexp = go$pkg.Regexp = go$newType(0, "Struct", "regexp.Regexp", "Regexp", "regexp", function(expr_, prog_, prefix_, prefixBytes_, prefixComplete_, prefixRune_, cond_, numSubexp_, subexpNames_, longest_, mu_, machine_) {
		this.go$val = this;
		this.expr = expr_ !== undefined ? expr_ : "";
		this.prog = prog_ !== undefined ? prog_ : (go$ptrType(syntax.Prog)).nil;
		this.prefix = prefix_ !== undefined ? prefix_ : "";
		this.prefixBytes = prefixBytes_ !== undefined ? prefixBytes_ : (go$sliceType(Go$Uint8)).nil;
		this.prefixComplete = prefixComplete_ !== undefined ? prefixComplete_ : false;
		this.prefixRune = prefixRune_ !== undefined ? prefixRune_ : 0;
		this.cond = cond_ !== undefined ? cond_ : 0;
		this.numSubexp = numSubexp_ !== undefined ? numSubexp_ : 0;
		this.subexpNames = subexpNames_ !== undefined ? subexpNames_ : (go$sliceType(Go$String)).nil;
		this.longest = longest_ !== undefined ? longest_ : false;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.machine = machine_ !== undefined ? machine_ : (go$sliceType((go$ptrType(machine)))).nil;
	});
	input = go$pkg.input = go$newType(0, "Interface", "regexp.input", "input", "regexp", null);
	inputString = go$pkg.inputString = go$newType(0, "Struct", "regexp.inputString", "inputString", "regexp", function(str_) {
		this.go$val = this;
		this.str = str_ !== undefined ? str_ : "";
	});
	inputBytes = go$pkg.inputBytes = go$newType(0, "Struct", "regexp.inputBytes", "inputBytes", "regexp", function(str_) {
		this.go$val = this;
		this.str = str_ !== undefined ? str_ : (go$sliceType(Go$Uint8)).nil;
	});
	inputReader = go$pkg.inputReader = go$newType(0, "Struct", "regexp.inputReader", "inputReader", "regexp", function(r_, atEOT_, pos_) {
		this.go$val = this;
		this.r = r_ !== undefined ? r_ : null;
		this.atEOT = atEOT_ !== undefined ? atEOT_ : false;
		this.pos = pos_ !== undefined ? pos_ : 0;
	});
	machine.Ptr.prototype.newInputBytes = function(b) {
		var m;
		m = this;
		m.inputBytes.str = b;
		return m.inputBytes;
	};
	machine.prototype.newInputBytes = function(b) { return this.go$val.newInputBytes(b); };
	machine.Ptr.prototype.newInputString = function(s) {
		var m;
		m = this;
		m.inputString.str = s;
		return m.inputString;
	};
	machine.prototype.newInputString = function(s) { return this.go$val.newInputString(s); };
	machine.Ptr.prototype.newInputReader = function(r) {
		var m;
		m = this;
		m.inputReader.r = r;
		m.inputReader.atEOT = false;
		m.inputReader.pos = 0;
		return m.inputReader;
	};
	machine.prototype.newInputReader = function(r) { return this.go$val.newInputReader(r); };
	progMachine = function(p) {
		var m, n, ncap;
		m = new machine.Ptr((go$ptrType(Regexp)).nil, p, new queue.Ptr(), new queue.Ptr(), (go$sliceType((go$ptrType(thread)))).nil, false, (go$sliceType(Go$Int)).nil, new inputBytes.Ptr(), new inputString.Ptr(), new inputReader.Ptr());
		n = m.p.Inst.length;
		m.q0 = new queue.Ptr((go$sliceType(Go$Uint32)).make(n, 0, function() { return 0; }), (go$sliceType(entry)).make(0, n, function() { return new entry.Ptr(); }));
		m.q1 = new queue.Ptr((go$sliceType(Go$Uint32)).make(n, 0, function() { return 0; }), (go$sliceType(entry)).make(0, n, function() { return new entry.Ptr(); }));
		ncap = p.NumCap;
		if (ncap < 2) {
			ncap = 2;
		}
		m.matchcap = (go$sliceType(Go$Int)).make(ncap, 0, function() { return 0; });
		return m;
	};
	machine.Ptr.prototype.init = function(ncap) {
		var m, _ref, _i, _slice, _index, t;
		m = this;
		_ref = m.pool;
		_i = 0;
		while (_i < _ref.length) {
			t = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			t.cap = go$subslice(t.cap, 0, ncap);
			_i++;
		}
		m.matchcap = go$subslice(m.matchcap, 0, ncap);
	};
	machine.prototype.init = function(ncap) { return this.go$val.init(ncap); };
	machine.Ptr.prototype.alloc = function(i) {
		var m, t, n, _slice, _index;
		m = this;
		t = (go$ptrType(thread)).nil;
		if (n = m.pool.length, n > 0) {
			t = (_slice = m.pool, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			m.pool = go$subslice(m.pool, 0, (n - 1 >> 0));
		} else {
			t = new thread.Ptr();
			t.cap = (go$sliceType(Go$Int)).make(m.matchcap.length, m.matchcap.capacity, function() { return 0; });
		}
		t.inst = i;
		return t;
	};
	machine.prototype.alloc = function(i) { return this.go$val.alloc(i); };
	machine.Ptr.prototype.match = function(i, pos) {
		var m, startCond, _ref, _i, i$1, _slice, _index, _tuple, runq, nextq, _tuple$1, r, r1, _tuple$2, width, width1, _tuple$3, _tuple$4, flag, advance, _tuple$5, _tuple$6, _slice$1, _index$1, _tuple$7, _tuple$8, _tuple$9;
		m = this;
		startCond = m.re.cond;
		if (startCond === 255) {
			return false;
		}
		m.matched = false;
		_ref = m.matchcap;
		_i = 0;
		while (_i < _ref.length) {
			i$1 = _i;
			_slice = m.matchcap, _index = i$1, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = -1) : go$throwRuntimeError("index out of range");
			_i++;
		}
		_tuple = [m.q0, m.q1], runq = _tuple[0], nextq = _tuple[1];
		_tuple$1 = [-1, -1], r = _tuple$1[0], r1 = _tuple$1[1];
		_tuple$2 = [0, 0], width = _tuple$2[0], width1 = _tuple$2[1];
		_tuple$3 = i.step(pos), r = _tuple$3[0], width = _tuple$3[1];
		if (!((r === -1))) {
			_tuple$4 = i.step(pos + width >> 0), r1 = _tuple$4[0], width1 = _tuple$4[1];
		}
		flag = 0;
		if (pos === 0) {
			flag = syntax.EmptyOpContext(-1, r);
		} else {
			flag = i.context(pos);
		}
		while (true) {
			if (runq.dense.length === 0) {
				if (!((((startCond & 4) >>> 0) === 0)) && !((pos === 0))) {
					break;
				}
				if (m.matched) {
					break;
				}
				if (m.re.prefix.length > 0 && !((r1 === m.re.prefixRune)) && i.canCheckPrefix()) {
					advance = i.index(m.re, pos);
					if (advance < 0) {
						break;
					}
					pos = pos + (advance) >> 0;
					_tuple$5 = i.step(pos), r = _tuple$5[0], width = _tuple$5[1];
					_tuple$6 = i.step(pos + width >> 0), r1 = _tuple$6[0], width1 = _tuple$6[1];
				}
			}
			if (!m.matched) {
				if (m.matchcap.length > 0) {
					_slice$1 = m.matchcap, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = pos) : go$throwRuntimeError("index out of range");
				}
				m.add(runq, (m.p.Start >>> 0), pos, m.matchcap, flag, (go$ptrType(thread)).nil);
			}
			flag = syntax.EmptyOpContext(r, r1);
			m.step(runq, nextq, pos, pos + width >> 0, r, flag);
			if (width === 0) {
				break;
			}
			if ((m.matchcap.length === 0) && m.matched) {
				break;
			}
			pos = pos + (width) >> 0;
			_tuple$7 = [r1, width1], r = _tuple$7[0], width = _tuple$7[1];
			if (!((r === -1))) {
				_tuple$8 = i.step(pos + width >> 0), r1 = _tuple$8[0], width1 = _tuple$8[1];
			}
			_tuple$9 = [nextq, runq], runq = _tuple$9[0], nextq = _tuple$9[1];
		}
		m.clear(nextq);
		return m.matched;
	};
	machine.prototype.match = function(i, pos) { return this.go$val.match(i, pos); };
	machine.Ptr.prototype.clear = function(q) {
		var m, _ref, _i, _slice, _index, _struct, d;
		m = this;
		_ref = q.dense;
		_i = 0;
		while (_i < _ref.length) {
			d = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new entry.Ptr(_struct.pc, _struct.t));
			if (!(d.t === (go$ptrType(thread)).nil)) {
				m.pool = go$append(m.pool, d.t);
			}
			_i++;
		}
		q.dense = go$subslice(q.dense, 0, 0);
	};
	machine.prototype.clear = function(q) { return this.go$val.clear(q); };
	machine.Ptr.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) {
		var m, longest, j, _slice, _index, d, t, _slice$1, _index$1, _slice$2, _index$2, i, add, _ref, _slice$3, _index$3, _slice$4, _index$4, _ref$1, _i, _slice$5, _index$5, _struct, d$1, _slice$6, _index$6;
		m = this;
		longest = m.re.longest;
		j = 0;
		while (j < runq.dense.length) {
			d = (_slice = runq.dense, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			t = d.t;
			if (t === (go$ptrType(thread)).nil) {
				j = j + 1 >> 0;
				continue;
			}
			if (longest && m.matched && t.cap.length > 0 && (_slice$1 = m.matchcap, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) < (_slice$2 = t.cap, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))) {
				m.pool = go$append(m.pool, t);
				j = j + 1 >> 0;
				continue;
			}
			i = t.inst;
			add = false;
			_ref = i.Op;
			if (_ref === 4) {
				if (t.cap.length > 0 && (!longest || !m.matched || (_slice$3 = m.matchcap, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) < pos)) {
					_slice$4 = t.cap, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = pos) : go$throwRuntimeError("index out of range");
					go$copySlice(m.matchcap, t.cap);
				}
				if (!longest) {
					_ref$1 = go$subslice(runq.dense, (j + 1 >> 0));
					_i = 0;
					while (_i < _ref$1.length) {
						d$1 = (_struct = (_slice$5 = _ref$1, _index$5 = _i, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")), new entry.Ptr(_struct.pc, _struct.t));
						if (!(d$1.t === (go$ptrType(thread)).nil)) {
							m.pool = go$append(m.pool, d$1.t);
						}
						_i++;
					}
					runq.dense = go$subslice(runq.dense, 0, 0);
				}
				m.matched = true;
			} else if (_ref === 7) {
				add = i.MatchRune(c);
			} else if (_ref === 8) {
				add = c === (_slice$6 = i.Rune, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
			} else if (_ref === 9) {
				add = true;
			} else if (_ref === 10) {
				add = !((c === 10));
			} else {
				throw go$panic(new Go$String("bad inst"));
			}
			if (add) {
				t = m.add(nextq, i.Out, nextPos, t.cap, nextCond, t);
			}
			if (!(t === (go$ptrType(thread)).nil)) {
				m.pool = go$append(m.pool, t);
			}
			j = j + 1 >> 0;
		}
		runq.dense = go$subslice(runq.dense, 0, 0);
	};
	machine.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) { return this.go$val.step(runq, nextq, pos, nextPos, c, nextCond); };
	machine.Ptr.prototype.add = function(q, pc, pos, cap, cond, t) {
		var m, j, _slice, _index, _slice$1, _index$1, j$1, _slice$2, _index$2, d, _slice$3, _index$3, _slice$4, _index$4, i, _ref, _slice$5, _index$5, opos, _slice$6, _index$6, _slice$7, _index$7;
		m = this;
		if (pc === 0) {
			return t;
		}
		if (j = (_slice$1 = q.sparse, _index$1 = pc, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), j < (q.dense.length >>> 0) && ((_slice = q.dense, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).pc === pc)) {
			return t;
		}
		j$1 = q.dense.length;
		q.dense = go$subslice(q.dense, 0, (j$1 + 1 >> 0));
		d = (_slice$2 = q.dense, _index$2 = j$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
		d.t = (go$ptrType(thread)).nil;
		d.pc = pc;
		_slice$3 = q.sparse, _index$3 = pc, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (j$1 >>> 0)) : go$throwRuntimeError("index out of range");
		i = (_slice$4 = m.p.Inst, _index$4 = pc, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
		_ref = i.Op;
		if (_ref === 5) {
		} else if (_ref === 0 || _ref === 1) {
			t = m.add(q, i.Out, pos, cap, cond, t);
			t = m.add(q, i.Arg, pos, cap, cond, t);
		} else if (_ref === 3) {
			if (((i.Arg << 24 >>> 24) & ~cond) === 0) {
				t = m.add(q, i.Out, pos, cap, cond, t);
			}
		} else if (_ref === 6) {
			t = m.add(q, i.Out, pos, cap, cond, t);
		} else if (_ref === 2) {
			if ((i.Arg >> 0) < cap.length) {
				opos = (_slice$5 = cap, _index$5 = i.Arg, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
				_slice$6 = cap, _index$6 = i.Arg, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = pos) : go$throwRuntimeError("index out of range");
				m.add(q, i.Out, pos, cap, cond, (go$ptrType(thread)).nil);
				_slice$7 = cap, _index$7 = i.Arg, (_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = opos) : go$throwRuntimeError("index out of range");
			} else {
				t = m.add(q, i.Out, pos, cap, cond, t);
			}
		} else if (_ref === 4 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10) {
			if (t === (go$ptrType(thread)).nil) {
				t = m.alloc(i);
			} else {
				t.inst = i;
			}
			if (cap.length > 0 && !(go$sliceIsEqual(t.cap, 0, cap, 0))) {
				go$copySlice(t.cap, cap);
			}
			d.t = t;
			t = (go$ptrType(thread)).nil;
		} else {
			throw go$panic(new Go$String("unhandled"));
		}
		return t;
	};
	machine.prototype.add = function(q, pc, pos, cap, cond, t) { return this.go$val.add(q, pc, pos, cap, cond, t); };
	Regexp.Ptr.prototype.doExecute = function(r, b, s, pos, ncap) {
		var re, m, i, cap;
		re = this;
		m = re.get();
		i = null;
		if (!(go$interfaceIsEqual(r, null))) {
			i = m.newInputReader(r);
		} else if (!(b === (go$sliceType(Go$Uint8)).nil)) {
			i = m.newInputBytes(b);
		} else {
			i = m.newInputString(s);
		}
		m.init(ncap);
		if (!m.match(i, pos)) {
			re.put(m);
			return (go$sliceType(Go$Int)).nil;
		}
		if (ncap === 0) {
			re.put(m);
			return empty;
		}
		cap = (go$sliceType(Go$Int)).make(ncap, 0, function() { return 0; });
		go$copySlice(cap, m.matchcap);
		re.put(m);
		return cap;
	};
	Regexp.prototype.doExecute = function(r, b, s, pos, ncap) { return this.go$val.doExecute(r, b, s, pos, ncap); };
	Regexp.Ptr.prototype.String = function() {
		var re;
		re = this;
		return re.expr;
	};
	Regexp.prototype.String = function() { return this.go$val.String(); };
	Compile = go$pkg.Compile = function(expr) {
		return compile(expr, 212, false);
	};
	Regexp.Ptr.prototype.Longest = function() {
		var re;
		re = this;
		re.longest = true;
	};
	Regexp.prototype.Longest = function() { return this.go$val.Longest(); };
	compile = function(expr, mode, longest) {
		var _tuple, re, err, maxCap, capNames, _tuple$1, prog, regexp, _tuple$2, _tuple$3;
		_tuple = syntax.Parse(expr, mode), re = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Regexp)).nil, err];
		}
		maxCap = re.MaxCap();
		capNames = re.CapNames();
		re = re.Simplify();
		_tuple$1 = syntax.Compile(re), prog = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Regexp)).nil, err];
		}
		regexp = new Regexp.Ptr(expr, prog, "", (go$sliceType(Go$Uint8)).nil, false, 0, prog.StartCond(), maxCap, capNames, longest, new sync.Mutex.Ptr(), (go$sliceType((go$ptrType(machine)))).nil);
		_tuple$2 = prog.Prefix(), regexp.prefix = _tuple$2[0], regexp.prefixComplete = _tuple$2[1];
		if (!(regexp.prefix === "")) {
			regexp.prefixBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes(regexp.prefix));
			_tuple$3 = utf8.DecodeRuneInString(regexp.prefix), regexp.prefixRune = _tuple$3[0];
		}
		return [regexp, null];
	};
	Regexp.Ptr.prototype.get = function() {
		var re, n, _slice, _index, z, z$1;
		re = this;
		re.mu.Lock();
		if (n = re.machine.length, n > 0) {
			z = (_slice = re.machine, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			re.machine = go$subslice(re.machine, 0, (n - 1 >> 0));
			re.mu.Unlock();
			return z;
		}
		re.mu.Unlock();
		z$1 = progMachine(re.prog);
		z$1.re = re;
		return z$1;
	};
	Regexp.prototype.get = function() { return this.go$val.get(); };
	Regexp.Ptr.prototype.put = function(z) {
		var re;
		re = this;
		re.mu.Lock();
		re.machine = go$append(re.machine, z);
		re.mu.Unlock();
	};
	Regexp.prototype.put = function(z) { return this.go$val.put(z); };
	MustCompile = go$pkg.MustCompile = function(str) {
		var _tuple, regexp, error;
		_tuple = Compile(str), regexp = _tuple[0], error = _tuple[1];
		if (!(go$interfaceIsEqual(error, null))) {
			throw go$panic(new Go$String("regexp: Compile(" + quote(str) + "): " + error.Error()));
		}
		return regexp;
	};
	quote = function(s) {
		if (strconv.CanBackquote(s)) {
			return "`" + s + "`";
		}
		return strconv.Quote(s);
	};
	Regexp.Ptr.prototype.NumSubexp = function() {
		var re;
		re = this;
		return re.numSubexp;
	};
	Regexp.prototype.NumSubexp = function() { return this.go$val.NumSubexp(); };
	Regexp.Ptr.prototype.SubexpNames = function() {
		var re;
		re = this;
		return re.subexpNames;
	};
	Regexp.prototype.SubexpNames = function() { return this.go$val.SubexpNames(); };
	inputString.Ptr.prototype.step = function(pos) {
		var i, c;
		i = this;
		if (pos < i.str.length) {
			c = i.str.charCodeAt(pos);
			if (c < 128) {
				return [(c >> 0), 1];
			}
			return utf8.DecodeRuneInString(i.str.substring(pos));
		}
		return [-1, 0];
	};
	inputString.prototype.step = function(pos) { return this.go$val.step(pos); };
	inputString.Ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return true;
	};
	inputString.prototype.canCheckPrefix = function() { return this.go$val.canCheckPrefix(); };
	inputString.Ptr.prototype.index = function(re, pos) {
		var i;
		i = this;
		return strings.Index(i.str.substring(pos), re.prefix);
	};
	inputString.prototype.index = function(re, pos) { return this.go$val.index(re, pos); };
	inputString.Ptr.prototype.context = function(pos) {
		var i, _tuple, r1, r2, _tuple$1, _tuple$2;
		i = this;
		_tuple = [-1, -1], r1 = _tuple[0], r2 = _tuple[1];
		if (pos > 0 && pos <= i.str.length) {
			_tuple$1 = utf8.DecodeLastRuneInString(i.str.substring(0, pos)), r1 = _tuple$1[0];
		}
		if (pos < i.str.length) {
			_tuple$2 = utf8.DecodeRuneInString(i.str.substring(pos)), r2 = _tuple$2[0];
		}
		return syntax.EmptyOpContext(r1, r2);
	};
	inputString.prototype.context = function(pos) { return this.go$val.context(pos); };
	inputBytes.Ptr.prototype.step = function(pos) {
		var i, _slice, _index, c;
		i = this;
		if (pos < i.str.length) {
			c = (_slice = i.str, _index = pos, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (c < 128) {
				return [(c >> 0), 1];
			}
			return utf8.DecodeRune(go$subslice(i.str, pos));
		}
		return [-1, 0];
	};
	inputBytes.prototype.step = function(pos) { return this.go$val.step(pos); };
	inputBytes.Ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return true;
	};
	inputBytes.prototype.canCheckPrefix = function() { return this.go$val.canCheckPrefix(); };
	inputBytes.Ptr.prototype.index = function(re, pos) {
		var i;
		i = this;
		return bytes.Index(go$subslice(i.str, pos), re.prefixBytes);
	};
	inputBytes.prototype.index = function(re, pos) { return this.go$val.index(re, pos); };
	inputBytes.Ptr.prototype.context = function(pos) {
		var i, _tuple, r1, r2, _tuple$1, _tuple$2;
		i = this;
		_tuple = [-1, -1], r1 = _tuple[0], r2 = _tuple[1];
		if (pos > 0 && pos <= i.str.length) {
			_tuple$1 = utf8.DecodeLastRune(go$subslice(i.str, 0, pos)), r1 = _tuple$1[0];
		}
		if (pos < i.str.length) {
			_tuple$2 = utf8.DecodeRune(go$subslice(i.str, pos)), r2 = _tuple$2[0];
		}
		return syntax.EmptyOpContext(r1, r2);
	};
	inputBytes.prototype.context = function(pos) { return this.go$val.context(pos); };
	inputReader.Ptr.prototype.step = function(pos) {
		var i, _tuple, r, w, err;
		i = this;
		if (!i.atEOT && !((pos === i.pos))) {
			return [-1, 0];
		}
		_tuple = i.r.ReadRune(), r = _tuple[0], w = _tuple[1], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			i.atEOT = true;
			return [-1, 0];
		}
		i.pos = i.pos + (w) >> 0;
		return [r, w];
	};
	inputReader.prototype.step = function(pos) { return this.go$val.step(pos); };
	inputReader.Ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return false;
	};
	inputReader.prototype.canCheckPrefix = function() { return this.go$val.canCheckPrefix(); };
	inputReader.Ptr.prototype.index = function(re, pos) {
		var i;
		i = this;
		return -1;
	};
	inputReader.prototype.index = function(re, pos) { return this.go$val.index(re, pos); };
	inputReader.Ptr.prototype.context = function(pos) {
		var i;
		i = this;
		return 0;
	};
	inputReader.prototype.context = function(pos) { return this.go$val.context(pos); };
	Regexp.Ptr.prototype.LiteralPrefix = function() {
		var prefix, complete, re, _tuple;
		prefix = "";
		complete = false;
		re = this;
		_tuple = [re.prefix, re.prefixComplete], prefix = _tuple[0], complete = _tuple[1];
		return [prefix, complete];
	};
	Regexp.prototype.LiteralPrefix = function() { return this.go$val.LiteralPrefix(); };
	Regexp.Ptr.prototype.MatchReader = function(r) {
		var re;
		re = this;
		return !(re.doExecute(r, (go$sliceType(Go$Uint8)).nil, "", 0, 0) === (go$sliceType(Go$Int)).nil);
	};
	Regexp.prototype.MatchReader = function(r) { return this.go$val.MatchReader(r); };
	Regexp.Ptr.prototype.MatchString = function(s) {
		var re;
		re = this;
		return !(re.doExecute(null, (go$sliceType(Go$Uint8)).nil, s, 0, 0) === (go$sliceType(Go$Int)).nil);
	};
	Regexp.prototype.MatchString = function(s) { return this.go$val.MatchString(s); };
	Regexp.Ptr.prototype.Match = function(b) {
		var re;
		re = this;
		return !(re.doExecute(null, b, "", 0, 0) === (go$sliceType(Go$Int)).nil);
	};
	Regexp.prototype.Match = function(b) { return this.go$val.Match(b); };
	Regexp.Ptr.prototype.ReplaceAllString = function(src, repl) {
		var re, n, x, x$1, b;
		re = this;
		n = 2;
		if (strings.Index(repl, "$") >= 0) {
			n = (x = 2, x$1 = (re.numSubexp + 1 >> 0), (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		}
		b = re.replaceAll((go$sliceType(Go$Uint8)).nil, src, n, (function(dst, match) {
			return re.expand(dst, repl, (go$sliceType(Go$Uint8)).nil, src, match);
		}));
		return go$bytesToString(b);
	};
	Regexp.prototype.ReplaceAllString = function(src, repl) { return this.go$val.ReplaceAllString(src, repl); };
	Regexp.Ptr.prototype.ReplaceAllLiteralString = function(src, repl) {
		var re;
		re = this;
		return go$bytesToString(re.replaceAll((go$sliceType(Go$Uint8)).nil, src, 2, (function(dst, match) {
			return go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(repl)));
		})));
	};
	Regexp.prototype.ReplaceAllLiteralString = function(src, repl) { return this.go$val.ReplaceAllLiteralString(src, repl); };
	Regexp.Ptr.prototype.ReplaceAllStringFunc = function(src, repl) {
		var re, b;
		re = this;
		b = re.replaceAll((go$sliceType(Go$Uint8)).nil, src, 2, (function(dst, match) {
			var _slice, _index, _slice$1, _index$1;
			return go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(repl(src.substring((_slice = match, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = match, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))))));
		}));
		return go$bytesToString(b);
	};
	Regexp.prototype.ReplaceAllStringFunc = function(src, repl) { return this.go$val.ReplaceAllStringFunc(src, repl); };
	Regexp.Ptr.prototype.replaceAll = function(bsrc, src, nmatch, repl) {
		var re, lastMatchEnd, searchPos, buf, endPos, a, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, width, _tuple, _tuple$1, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7;
		re = this;
		lastMatchEnd = 0;
		searchPos = 0;
		buf = (go$sliceType(Go$Uint8)).nil;
		endPos = 0;
		if (!(bsrc === (go$sliceType(Go$Uint8)).nil)) {
			endPos = bsrc.length;
		} else {
			endPos = src.length;
		}
		while (searchPos <= endPos) {
			a = re.doExecute(null, bsrc, src, searchPos, nmatch);
			if (a.length === 0) {
				break;
			}
			if (!(bsrc === (go$sliceType(Go$Uint8)).nil)) {
				buf = go$appendSlice(buf, go$subslice(bsrc, lastMatchEnd, (_slice = a, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))));
			} else {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes(src.substring(lastMatchEnd, (_slice$1 = a, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))))));
			}
			if ((_slice$2 = a, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) > lastMatchEnd || ((_slice$3 = a, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) === 0)) {
				buf = repl(buf, a);
			}
			lastMatchEnd = (_slice$4 = a, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
			width = 0;
			if (!(bsrc === (go$sliceType(Go$Uint8)).nil)) {
				_tuple = utf8.DecodeRune(go$subslice(bsrc, searchPos)), width = _tuple[1];
			} else {
				_tuple$1 = utf8.DecodeRuneInString(src.substring(searchPos)), width = _tuple$1[1];
			}
			if ((searchPos + width >> 0) > (_slice$5 = a, _index$5 = 1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"))) {
				searchPos = searchPos + (width) >> 0;
			} else if ((searchPos + 1 >> 0) > (_slice$6 = a, _index$6 = 1, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"))) {
				searchPos = searchPos + 1 >> 0;
			} else {
				searchPos = (_slice$7 = a, _index$7 = 1, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"));
			}
		}
		if (!(bsrc === (go$sliceType(Go$Uint8)).nil)) {
			buf = go$appendSlice(buf, go$subslice(bsrc, lastMatchEnd));
		} else {
			buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes(src.substring(lastMatchEnd))));
		}
		return buf;
	};
	Regexp.prototype.replaceAll = function(bsrc, src, nmatch, repl) { return this.go$val.replaceAll(bsrc, src, nmatch, repl); };
	Regexp.Ptr.prototype.ReplaceAll = function(src, repl) {
		var re, n, x, x$1, srepl, b;
		re = this;
		n = 2;
		if (bytes.IndexByte(repl, 36) >= 0) {
			n = (x = 2, x$1 = (re.numSubexp + 1 >> 0), (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		}
		srepl = "";
		b = re.replaceAll(src, "", n, (function(dst, match) {
			if (!((srepl.length === repl.length))) {
				srepl = go$bytesToString(repl);
			}
			return re.expand(dst, srepl, src, "", match);
		}));
		return b;
	};
	Regexp.prototype.ReplaceAll = function(src, repl) { return this.go$val.ReplaceAll(src, repl); };
	Regexp.Ptr.prototype.ReplaceAllLiteral = function(src, repl) {
		var re;
		re = this;
		return re.replaceAll(src, "", 2, (function(dst, match) {
			return go$appendSlice(dst, repl);
		}));
	};
	Regexp.prototype.ReplaceAllLiteral = function(src, repl) { return this.go$val.ReplaceAllLiteral(src, repl); };
	Regexp.Ptr.prototype.ReplaceAllFunc = function(src, repl) {
		var re;
		re = this;
		return re.replaceAll(src, "", 2, (function(dst, match) {
			var _slice, _index, _slice$1, _index$1;
			return go$appendSlice(dst, repl(go$subslice(src, (_slice = match, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = match, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))));
		}));
	};
	Regexp.prototype.ReplaceAllFunc = function(src, repl) { return this.go$val.ReplaceAllFunc(src, repl); };
	Regexp.Ptr.prototype.pad = function(a) {
		var re, x, x$1, n;
		re = this;
		if (a === (go$sliceType(Go$Int)).nil) {
			return (go$sliceType(Go$Int)).nil;
		}
		n = (x = (1 + re.numSubexp >> 0), x$1 = 2, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		while (a.length < n) {
			a = go$append(a, -1);
		}
		return a;
	};
	Regexp.prototype.pad = function(a) { return this.go$val.pad(a); };
	Regexp.Ptr.prototype.allMatches = function(s, b, n, deliver) {
		var re, end, _tuple, pos, i, prevMatchEnd, matches, accept, _slice, _index, _slice$1, _index$1, width, _tuple$1, _tuple$2, _slice$2, _index$2, _slice$3, _index$3;
		re = this;
		end = 0;
		if (b === (go$sliceType(Go$Uint8)).nil) {
			end = s.length;
		} else {
			end = b.length;
		}
		_tuple = [0, 0, -1], pos = _tuple[0], i = _tuple[1], prevMatchEnd = _tuple[2];
		while (i < n && pos <= end) {
			matches = re.doExecute(null, b, s, pos, re.prog.NumCap);
			if (matches.length === 0) {
				break;
			}
			accept = true;
			if ((_slice = matches, _index = 1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === pos) {
				if ((_slice$1 = matches, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === prevMatchEnd) {
					accept = false;
				}
				width = 0;
				if (b === (go$sliceType(Go$Uint8)).nil) {
					_tuple$1 = utf8.DecodeRuneInString(s.substring(pos, end)), width = _tuple$1[1];
				} else {
					_tuple$2 = utf8.DecodeRune(go$subslice(b, pos, end)), width = _tuple$2[1];
				}
				if (width > 0) {
					pos = pos + (width) >> 0;
				} else {
					pos = end + 1 >> 0;
				}
			} else {
				pos = (_slice$2 = matches, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			}
			prevMatchEnd = (_slice$3 = matches, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			if (accept) {
				deliver(re.pad(matches));
				i = i + 1 >> 0;
			}
		}
	};
	Regexp.prototype.allMatches = function(s, b, n, deliver) { return this.go$val.allMatches(s, b, n, deliver); };
	Regexp.Ptr.prototype.Find = function(b) {
		var re, a, _slice, _index, _slice$1, _index$1;
		re = this;
		a = re.doExecute(null, b, "", 0, 2);
		if (a === (go$sliceType(Go$Int)).nil) {
			return (go$sliceType(Go$Uint8)).nil;
		}
		return go$subslice(b, (_slice = a, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = a, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
	};
	Regexp.prototype.Find = function(b) { return this.go$val.Find(b); };
	Regexp.Ptr.prototype.FindIndex = function(b) {
		var loc, re, a;
		loc = (go$sliceType(Go$Int)).nil;
		re = this;
		a = re.doExecute(null, b, "", 0, 2);
		if (a === (go$sliceType(Go$Int)).nil) {
			loc = (go$sliceType(Go$Int)).nil;
			return loc;
		}
		loc = go$subslice(a, 0, 2);
		return loc;
	};
	Regexp.prototype.FindIndex = function(b) { return this.go$val.FindIndex(b); };
	Regexp.Ptr.prototype.FindString = function(s) {
		var re, a, _slice, _index, _slice$1, _index$1;
		re = this;
		a = re.doExecute(null, (go$sliceType(Go$Uint8)).nil, s, 0, 2);
		if (a === (go$sliceType(Go$Int)).nil) {
			return "";
		}
		return s.substring((_slice = a, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = a, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
	};
	Regexp.prototype.FindString = function(s) { return this.go$val.FindString(s); };
	Regexp.Ptr.prototype.FindStringIndex = function(s) {
		var loc, re, a;
		loc = (go$sliceType(Go$Int)).nil;
		re = this;
		a = re.doExecute(null, (go$sliceType(Go$Uint8)).nil, s, 0, 2);
		if (a === (go$sliceType(Go$Int)).nil) {
			loc = (go$sliceType(Go$Int)).nil;
			return loc;
		}
		loc = go$subslice(a, 0, 2);
		return loc;
	};
	Regexp.prototype.FindStringIndex = function(s) { return this.go$val.FindStringIndex(s); };
	Regexp.Ptr.prototype.FindReaderIndex = function(r) {
		var loc, re, a;
		loc = (go$sliceType(Go$Int)).nil;
		re = this;
		a = re.doExecute(r, (go$sliceType(Go$Uint8)).nil, "", 0, 2);
		if (a === (go$sliceType(Go$Int)).nil) {
			loc = (go$sliceType(Go$Int)).nil;
			return loc;
		}
		loc = go$subslice(a, 0, 2);
		return loc;
	};
	Regexp.prototype.FindReaderIndex = function(r) { return this.go$val.FindReaderIndex(r); };
	Regexp.Ptr.prototype.FindSubmatch = function(b) {
		var re, a, ret, _ref, _i, i, x, _slice, _index, x$1, _slice$1, _index$1, x$2, _slice$2, _index$2, x$3, _slice$3, _index$3;
		re = this;
		a = re.doExecute(null, b, "", 0, re.prog.NumCap);
		if (a === (go$sliceType(Go$Int)).nil) {
			return (go$sliceType((go$sliceType(Go$Uint8)))).nil;
		}
		ret = (go$sliceType((go$sliceType(Go$Uint8)))).make(1 + re.numSubexp >> 0, 0, function() { return (go$sliceType(Go$Uint8)).nil; });
		_ref = ret;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			if ((x = 2, (((x >>> 16 << 16) * i >> 0) + (x << 16 >>> 16) * i) >> 0) < a.length && (_slice = a, _index = (x$1 = 2, (((x$1 >>> 16 << 16) * i >> 0) + (x$1 << 16 >>> 16) * i) >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >= 0) {
				_slice$3 = ret, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = go$subslice(b, (_slice$1 = a, _index$1 = (x$2 = 2, (((x$2 >>> 16 << 16) * i >> 0) + (x$2 << 16 >>> 16) * i) >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (_slice$2 = a, _index$2 = ((x$3 = 2, (((x$3 >>> 16 << 16) * i >> 0) + (x$3 << 16 >>> 16) * i) >> 0) + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")))) : go$throwRuntimeError("index out of range");
			}
			_i++;
		}
		return ret;
	};
	Regexp.prototype.FindSubmatch = function(b) { return this.go$val.FindSubmatch(b); };
	Regexp.Ptr.prototype.Expand = function(dst, template, src, match) {
		var re;
		re = this;
		return re.expand(dst, go$bytesToString(template), src, "", match);
	};
	Regexp.prototype.Expand = function(dst, template, src, match) { return this.go$val.Expand(dst, template, src, match); };
	Regexp.Ptr.prototype.ExpandString = function(dst, template, src, match) {
		var re;
		re = this;
		return re.expand(dst, template, (go$sliceType(Go$Uint8)).nil, src, match);
	};
	Regexp.prototype.ExpandString = function(dst, template, src, match) { return this.go$val.ExpandString(dst, template, src, match); };
	Regexp.Ptr.prototype.expand = function(dst, template, bsrc, src, match) {
		var re, i, _tuple, name, num, rest, ok, x, _slice, _index, x$1, _slice$1, _index$1, x$2, _slice$2, _index$2, x$3, _slice$3, _index$3, x$4, _slice$4, _index$4, x$5, _ref, _i, _slice$5, _index$5, namei, i$1, x$6, _slice$6, _index$6, x$7, _slice$7, _index$7, x$8, _slice$8, _index$8, x$9, _slice$9, _index$9, x$10, _slice$10, _index$10, x$11;
		re = this;
		while (template.length > 0) {
			i = strings.Index(template, "$");
			if (i < 0) {
				break;
			}
			dst = go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(template.substring(0, i))));
			template = template.substring(i);
			if (template.length > 1 && (template.charCodeAt(1) === 36)) {
				dst = go$append(dst, 36);
				template = template.substring(2);
				continue;
			}
			_tuple = extract(template), name = _tuple[0], num = _tuple[1], rest = _tuple[2], ok = _tuple[3];
			if (!ok) {
				dst = go$append(dst, 36);
				template = template.substring(1);
				continue;
			}
			template = rest;
			if (num >= 0) {
				if (((x = 2, (((x >>> 16 << 16) * num >> 0) + (x << 16 >>> 16) * num) >> 0) + 1 >> 0) < match.length && (_slice = match, _index = (x$1 = 2, (((x$1 >>> 16 << 16) * num >> 0) + (x$1 << 16 >>> 16) * num) >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >= 0) {
					if (!(bsrc === (go$sliceType(Go$Uint8)).nil)) {
						dst = go$appendSlice(dst, go$subslice(bsrc, (_slice$1 = match, _index$1 = (x$2 = 2, (((x$2 >>> 16 << 16) * num >> 0) + (x$2 << 16 >>> 16) * num) >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (_slice$2 = match, _index$2 = ((x$3 = 2, (((x$3 >>> 16 << 16) * num >> 0) + (x$3 << 16 >>> 16) * num) >> 0) + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))));
					} else {
						dst = go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(src.substring((_slice$3 = match, _index$3 = (x$4 = 2, (((x$4 >>> 16 << 16) * num >> 0) + (x$4 << 16 >>> 16) * num) >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), (_slice$4 = match, _index$4 = ((x$5 = 2, (((x$5 >>> 16 << 16) * num >> 0) + (x$5 << 16 >>> 16) * num) >> 0) + 1 >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"))))));
					}
				}
			} else {
				_ref = re.subexpNames;
				_i = 0;
				while (_i < _ref.length) {
					namei = (_slice$5 = _ref, _index$5 = _i, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
					i$1 = _i;
					if (name === namei && ((x$6 = 2, (((x$6 >>> 16 << 16) * i$1 >> 0) + (x$6 << 16 >>> 16) * i$1) >> 0) + 1 >> 0) < match.length && (_slice$6 = match, _index$6 = (x$7 = 2, (((x$7 >>> 16 << 16) * i$1 >> 0) + (x$7 << 16 >>> 16) * i$1) >> 0), (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")) >= 0) {
						if (!(bsrc === (go$sliceType(Go$Uint8)).nil)) {
							dst = go$appendSlice(dst, go$subslice(bsrc, (_slice$7 = match, _index$7 = (x$8 = 2, (((x$8 >>> 16 << 16) * i$1 >> 0) + (x$8 << 16 >>> 16) * i$1) >> 0), (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), (_slice$8 = match, _index$8 = ((x$9 = 2, (((x$9 >>> 16 << 16) * i$1 >> 0) + (x$9 << 16 >>> 16) * i$1) >> 0) + 1 >> 0), (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"))));
						} else {
							dst = go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(src.substring((_slice$9 = match, _index$9 = (x$10 = 2, (((x$10 >>> 16 << 16) * i$1 >> 0) + (x$10 << 16 >>> 16) * i$1) >> 0), (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")), (_slice$10 = match, _index$10 = ((x$11 = 2, (((x$11 >>> 16 << 16) * i$1 >> 0) + (x$11 << 16 >>> 16) * i$1) >> 0) + 1 >> 0), (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"))))));
						}
						break;
					}
					_i++;
				}
			}
		}
		dst = go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(template)));
		return dst;
	};
	Regexp.prototype.expand = function(dst, template, bsrc, src, match) { return this.go$val.expand(dst, template, bsrc, src, match); };
	extract = function(str) {
		var name, num, rest, ok, brace, i, _tuple, rune, size, i$1, x;
		name = "";
		num = 0;
		rest = "";
		ok = false;
		if (str.length < 2 || !((str.charCodeAt(0) === 36))) {
			return [name, num, rest, ok];
		}
		brace = false;
		if (str.charCodeAt(1) === 123) {
			brace = true;
			str = str.substring(2);
		} else {
			str = str.substring(1);
		}
		i = 0;
		while (i < str.length) {
			_tuple = utf8.DecodeRuneInString(str.substring(i)), rune = _tuple[0], size = _tuple[1];
			if (!unicode.IsLetter(rune) && !unicode.IsDigit(rune) && !((rune === 95))) {
				break;
			}
			i = i + (size) >> 0;
		}
		if (i === 0) {
			return [name, num, rest, ok];
		}
		name = str.substring(0, i);
		if (brace) {
			if (i >= str.length || !((str.charCodeAt(i) === 125))) {
				return [name, num, rest, ok];
			}
			i = i + 1 >> 0;
		}
		num = 0;
		i$1 = 0;
		while (i$1 < name.length) {
			if (name.charCodeAt(i$1) < 48 || 57 < name.charCodeAt(i$1) || num >= 100000000) {
				num = -1;
				break;
			}
			num = ((x = 10, (((num >>> 16 << 16) * x >> 0) + (num << 16 >>> 16) * x) >> 0) + (name.charCodeAt(i$1) >> 0) >> 0) - 48 >> 0;
			i$1 = i$1 + 1 >> 0;
		}
		if ((name.charCodeAt(0) === 48) && name.length > 1) {
			num = -1;
		}
		rest = str.substring(i);
		ok = true;
		return [name, num, rest, ok];
	};
	Regexp.Ptr.prototype.FindSubmatchIndex = function(b) {
		var re;
		re = this;
		return re.pad(re.doExecute(null, b, "", 0, re.prog.NumCap));
	};
	Regexp.prototype.FindSubmatchIndex = function(b) { return this.go$val.FindSubmatchIndex(b); };
	Regexp.Ptr.prototype.FindStringSubmatch = function(s) {
		var re, a, ret, _ref, _i, i, x, _slice, _index, x$1, _slice$1, _index$1, x$2, _slice$2, _index$2, x$3, _slice$3, _index$3;
		re = this;
		a = re.doExecute(null, (go$sliceType(Go$Uint8)).nil, s, 0, re.prog.NumCap);
		if (a === (go$sliceType(Go$Int)).nil) {
			return (go$sliceType(Go$String)).nil;
		}
		ret = (go$sliceType(Go$String)).make(1 + re.numSubexp >> 0, 0, function() { return ""; });
		_ref = ret;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			if ((x = 2, (((x >>> 16 << 16) * i >> 0) + (x << 16 >>> 16) * i) >> 0) < a.length && (_slice = a, _index = (x$1 = 2, (((x$1 >>> 16 << 16) * i >> 0) + (x$1 << 16 >>> 16) * i) >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >= 0) {
				_slice$3 = ret, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = s.substring((_slice$1 = a, _index$1 = (x$2 = 2, (((x$2 >>> 16 << 16) * i >> 0) + (x$2 << 16 >>> 16) * i) >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (_slice$2 = a, _index$2 = ((x$3 = 2, (((x$3 >>> 16 << 16) * i >> 0) + (x$3 << 16 >>> 16) * i) >> 0) + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")))) : go$throwRuntimeError("index out of range");
			}
			_i++;
		}
		return ret;
	};
	Regexp.prototype.FindStringSubmatch = function(s) { return this.go$val.FindStringSubmatch(s); };
	Regexp.Ptr.prototype.FindStringSubmatchIndex = function(s) {
		var re;
		re = this;
		return re.pad(re.doExecute(null, (go$sliceType(Go$Uint8)).nil, s, 0, re.prog.NumCap));
	};
	Regexp.prototype.FindStringSubmatchIndex = function(s) { return this.go$val.FindStringSubmatchIndex(s); };
	Regexp.Ptr.prototype.FindReaderSubmatchIndex = function(r) {
		var re;
		re = this;
		return re.pad(re.doExecute(r, (go$sliceType(Go$Uint8)).nil, "", 0, re.prog.NumCap));
	};
	Regexp.prototype.FindReaderSubmatchIndex = function(r) { return this.go$val.FindReaderSubmatchIndex(r); };
	Regexp.Ptr.prototype.FindAll = function(b, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = b.length + 1 >> 0;
		}
		result = (go$sliceType((go$sliceType(Go$Uint8)))).make(0, 10, function() { return (go$sliceType(Go$Uint8)).nil; });
		re.allMatches("", b, n, (function(match) {
			var _slice, _index, _slice$1, _index$1;
			result = go$append(result, go$subslice(b, (_slice = match, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = match, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))));
		}));
		if (result.length === 0) {
			return (go$sliceType((go$sliceType(Go$Uint8)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAll = function(b, n) { return this.go$val.FindAll(b, n); };
	Regexp.Ptr.prototype.FindAllIndex = function(b, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = b.length + 1 >> 0;
		}
		result = (go$sliceType((go$sliceType(Go$Int)))).make(0, 10, function() { return (go$sliceType(Go$Int)).nil; });
		re.allMatches("", b, n, (function(match) {
			result = go$append(result, go$subslice(match, 0, 2));
		}));
		if (result.length === 0) {
			return (go$sliceType((go$sliceType(Go$Int)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllIndex = function(b, n) { return this.go$val.FindAllIndex(b, n); };
	Regexp.Ptr.prototype.FindAllString = function(s, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result = (go$sliceType(Go$String)).make(0, 10, function() { return ""; });
		re.allMatches(s, (go$sliceType(Go$Uint8)).nil, n, (function(match) {
			var _slice, _index, _slice$1, _index$1;
			result = go$append(result, s.substring((_slice = match, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = match, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))));
		}));
		if (result.length === 0) {
			return (go$sliceType(Go$String)).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllString = function(s, n) { return this.go$val.FindAllString(s, n); };
	Regexp.Ptr.prototype.FindAllStringIndex = function(s, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result = (go$sliceType((go$sliceType(Go$Int)))).make(0, 10, function() { return (go$sliceType(Go$Int)).nil; });
		re.allMatches(s, (go$sliceType(Go$Uint8)).nil, n, (function(match) {
			result = go$append(result, go$subslice(match, 0, 2));
		}));
		if (result.length === 0) {
			return (go$sliceType((go$sliceType(Go$Int)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllStringIndex = function(s, n) { return this.go$val.FindAllStringIndex(s, n); };
	Regexp.Ptr.prototype.FindAllSubmatch = function(b, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = b.length + 1 >> 0;
		}
		result = (go$sliceType((go$sliceType((go$sliceType(Go$Uint8)))))).make(0, 10, function() { return (go$sliceType((go$sliceType(Go$Uint8)))).nil; });
		re.allMatches("", b, n, (function(match) {
			var _q, slice, _ref, _i, j, _slice, _index, x, _slice$1, _index$1, x$1, _slice$2, _index$2, x$2, _slice$3, _index$3;
			slice = (go$sliceType((go$sliceType(Go$Uint8)))).make((_q = match.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), 0, function() { return (go$sliceType(Go$Uint8)).nil; });
			_ref = slice;
			_i = 0;
			while (_i < _ref.length) {
				j = _i;
				if ((_slice = match, _index = (x = 2, (((x >>> 16 << 16) * j >> 0) + (x << 16 >>> 16) * j) >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >= 0) {
					_slice$3 = slice, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = go$subslice(b, (_slice$1 = match, _index$1 = (x$1 = 2, (((x$1 >>> 16 << 16) * j >> 0) + (x$1 << 16 >>> 16) * j) >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (_slice$2 = match, _index$2 = ((x$2 = 2, (((x$2 >>> 16 << 16) * j >> 0) + (x$2 << 16 >>> 16) * j) >> 0) + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")))) : go$throwRuntimeError("index out of range");
				}
				_i++;
			}
			result = go$append(result, slice);
		}));
		if (result.length === 0) {
			return (go$sliceType((go$sliceType((go$sliceType(Go$Uint8)))))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllSubmatch = function(b, n) { return this.go$val.FindAllSubmatch(b, n); };
	Regexp.Ptr.prototype.FindAllSubmatchIndex = function(b, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = b.length + 1 >> 0;
		}
		result = (go$sliceType((go$sliceType(Go$Int)))).make(0, 10, function() { return (go$sliceType(Go$Int)).nil; });
		re.allMatches("", b, n, (function(match) {
			result = go$append(result, match);
		}));
		if (result.length === 0) {
			return (go$sliceType((go$sliceType(Go$Int)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllSubmatchIndex = function(b, n) { return this.go$val.FindAllSubmatchIndex(b, n); };
	Regexp.Ptr.prototype.FindAllStringSubmatch = function(s, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result = (go$sliceType((go$sliceType(Go$String)))).make(0, 10, function() { return (go$sliceType(Go$String)).nil; });
		re.allMatches(s, (go$sliceType(Go$Uint8)).nil, n, (function(match) {
			var _q, slice, _ref, _i, j, _slice, _index, x, _slice$1, _index$1, x$1, _slice$2, _index$2, x$2, _slice$3, _index$3;
			slice = (go$sliceType(Go$String)).make((_q = match.length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), 0, function() { return ""; });
			_ref = slice;
			_i = 0;
			while (_i < _ref.length) {
				j = _i;
				if ((_slice = match, _index = (x = 2, (((x >>> 16 << 16) * j >> 0) + (x << 16 >>> 16) * j) >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >= 0) {
					_slice$3 = slice, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = s.substring((_slice$1 = match, _index$1 = (x$1 = 2, (((x$1 >>> 16 << 16) * j >> 0) + (x$1 << 16 >>> 16) * j) >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (_slice$2 = match, _index$2 = ((x$2 = 2, (((x$2 >>> 16 << 16) * j >> 0) + (x$2 << 16 >>> 16) * j) >> 0) + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")))) : go$throwRuntimeError("index out of range");
				}
				_i++;
			}
			result = go$append(result, slice);
		}));
		if (result.length === 0) {
			return (go$sliceType((go$sliceType(Go$String)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllStringSubmatch = function(s, n) { return this.go$val.FindAllStringSubmatch(s, n); };
	Regexp.Ptr.prototype.FindAllStringSubmatchIndex = function(s, n) {
		var re, result;
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result = (go$sliceType((go$sliceType(Go$Int)))).make(0, 10, function() { return (go$sliceType(Go$Int)).nil; });
		re.allMatches(s, (go$sliceType(Go$Uint8)).nil, n, (function(match) {
			result = go$append(result, match);
		}));
		if (result.length === 0) {
			return (go$sliceType((go$sliceType(Go$Int)))).nil;
		}
		return result;
	};
	Regexp.prototype.FindAllStringSubmatchIndex = function(s, n) { return this.go$val.FindAllStringSubmatchIndex(s, n); };
	Regexp.Ptr.prototype.Split = function(s, n) {
		var re, matches, strings$1, beg, end, _ref, _i, _slice, _index, match, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3;
		re = this;
		if (n === 0) {
			return (go$sliceType(Go$String)).nil;
		}
		if (re.expr.length > 0 && (s.length === 0)) {
			return new (go$sliceType(Go$String))([""]);
		}
		matches = re.FindAllStringIndex(s, n);
		strings$1 = (go$sliceType(Go$String)).make(0, matches.length, function() { return ""; });
		beg = 0;
		end = 0;
		_ref = matches;
		_i = 0;
		while (_i < _ref.length) {
			match = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (n > 0 && strings$1.length >= (n - 1 >> 0)) {
				break;
			}
			end = (_slice$1 = match, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (!(((_slice$2 = match, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 0))) {
				strings$1 = go$append(strings$1, s.substring(beg, end));
			}
			beg = (_slice$3 = match, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			_i++;
		}
		if (!((end === s.length))) {
			strings$1 = go$append(strings$1, s.substring(beg));
		}
		return strings$1;
	};
	Regexp.prototype.Split = function(s, n) { return this.go$val.Split(s, n); };
	go$pkg.init = function() {
		queue.init([["sparse", "regexp", (go$sliceType(Go$Uint32)), ""], ["dense", "regexp", (go$sliceType(entry)), ""]]);
		entry.init([["pc", "regexp", Go$Uint32, ""], ["t", "regexp", (go$ptrType(thread)), ""]]);
		thread.init([["inst", "regexp", (go$ptrType(syntax.Inst)), ""], ["cap", "regexp", (go$sliceType(Go$Int)), ""]]);
		machine.init([["re", "regexp", (go$ptrType(Regexp)), ""], ["p", "regexp", (go$ptrType(syntax.Prog)), ""], ["q0", "regexp", queue, ""], ["q1", "regexp", queue, ""], ["pool", "regexp", (go$sliceType((go$ptrType(thread)))), ""], ["matched", "regexp", Go$Bool, ""], ["matchcap", "regexp", (go$sliceType(Go$Int)), ""], ["inputBytes", "regexp", inputBytes, ""], ["inputString", "regexp", inputString, ""], ["inputReader", "regexp", inputReader, ""]]);
		(go$ptrType(machine)).methods = [["add", "regexp", [(go$ptrType(queue)), Go$Uint32, Go$Int, (go$sliceType(Go$Int)), syntax.EmptyOp, (go$ptrType(thread))], [(go$ptrType(thread))], false], ["alloc", "regexp", [(go$ptrType(syntax.Inst))], [(go$ptrType(thread))], false], ["clear", "regexp", [(go$ptrType(queue))], [], false], ["free", "regexp", [(go$ptrType(thread))], [], false], ["init", "regexp", [Go$Int], [], false], ["match", "regexp", [input, Go$Int], [Go$Bool], false], ["newInputBytes", "regexp", [(go$sliceType(Go$Uint8))], [input], false], ["newInputReader", "regexp", [io.RuneReader], [input], false], ["newInputString", "regexp", [Go$String], [input], false], ["step", "regexp", [(go$ptrType(queue)), (go$ptrType(queue)), Go$Int, Go$Int, Go$Int32, syntax.EmptyOp], [], false]];
		Regexp.init([["expr", "regexp", Go$String, ""], ["prog", "regexp", (go$ptrType(syntax.Prog)), ""], ["prefix", "regexp", Go$String, ""], ["prefixBytes", "regexp", (go$sliceType(Go$Uint8)), ""], ["prefixComplete", "regexp", Go$Bool, ""], ["prefixRune", "regexp", Go$Int32, ""], ["cond", "regexp", syntax.EmptyOp, ""], ["numSubexp", "regexp", Go$Int, ""], ["subexpNames", "regexp", (go$sliceType(Go$String)), ""], ["longest", "regexp", Go$Bool, ""], ["mu", "regexp", sync.Mutex, ""], ["machine", "regexp", (go$sliceType((go$ptrType(machine)))), ""]]);
		(go$ptrType(Regexp)).methods = [["Expand", "", [(go$sliceType(Go$Uint8)), (go$sliceType(Go$Uint8)), (go$sliceType(Go$Uint8)), (go$sliceType(Go$Int))], [(go$sliceType(Go$Uint8))], false], ["ExpandString", "", [(go$sliceType(Go$Uint8)), Go$String, Go$String, (go$sliceType(Go$Int))], [(go$sliceType(Go$Uint8))], false], ["Find", "", [(go$sliceType(Go$Uint8))], [(go$sliceType(Go$Uint8))], false], ["FindAll", "", [(go$sliceType(Go$Uint8)), Go$Int], [(go$sliceType((go$sliceType(Go$Uint8))))], false], ["FindAllIndex", "", [(go$sliceType(Go$Uint8)), Go$Int], [(go$sliceType((go$sliceType(Go$Int))))], false], ["FindAllString", "", [Go$String, Go$Int], [(go$sliceType(Go$String))], false], ["FindAllStringIndex", "", [Go$String, Go$Int], [(go$sliceType((go$sliceType(Go$Int))))], false], ["FindAllStringSubmatch", "", [Go$String, Go$Int], [(go$sliceType((go$sliceType(Go$String))))], false], ["FindAllStringSubmatchIndex", "", [Go$String, Go$Int], [(go$sliceType((go$sliceType(Go$Int))))], false], ["FindAllSubmatch", "", [(go$sliceType(Go$Uint8)), Go$Int], [(go$sliceType((go$sliceType((go$sliceType(Go$Uint8))))))], false], ["FindAllSubmatchIndex", "", [(go$sliceType(Go$Uint8)), Go$Int], [(go$sliceType((go$sliceType(Go$Int))))], false], ["FindIndex", "", [(go$sliceType(Go$Uint8))], [(go$sliceType(Go$Int))], false], ["FindReaderIndex", "", [io.RuneReader], [(go$sliceType(Go$Int))], false], ["FindReaderSubmatchIndex", "", [io.RuneReader], [(go$sliceType(Go$Int))], false], ["FindString", "", [Go$String], [Go$String], false], ["FindStringIndex", "", [Go$String], [(go$sliceType(Go$Int))], false], ["FindStringSubmatch", "", [Go$String], [(go$sliceType(Go$String))], false], ["FindStringSubmatchIndex", "", [Go$String], [(go$sliceType(Go$Int))], false], ["FindSubmatch", "", [(go$sliceType(Go$Uint8))], [(go$sliceType((go$sliceType(Go$Uint8))))], false], ["FindSubmatchIndex", "", [(go$sliceType(Go$Uint8))], [(go$sliceType(Go$Int))], false], ["LiteralPrefix", "", [], [Go$String, Go$Bool], false], ["Longest", "", [], [], false], ["Match", "", [(go$sliceType(Go$Uint8))], [Go$Bool], false], ["MatchReader", "", [io.RuneReader], [Go$Bool], false], ["MatchString", "", [Go$String], [Go$Bool], false], ["NumSubexp", "", [], [Go$Int], false], ["ReplaceAll", "", [(go$sliceType(Go$Uint8)), (go$sliceType(Go$Uint8))], [(go$sliceType(Go$Uint8))], false], ["ReplaceAllFunc", "", [(go$sliceType(Go$Uint8)), (go$funcType([(go$sliceType(Go$Uint8))], [(go$sliceType(Go$Uint8))], false))], [(go$sliceType(Go$Uint8))], false], ["ReplaceAllLiteral", "", [(go$sliceType(Go$Uint8)), (go$sliceType(Go$Uint8))], [(go$sliceType(Go$Uint8))], false], ["ReplaceAllLiteralString", "", [Go$String, Go$String], [Go$String], false], ["ReplaceAllString", "", [Go$String, Go$String], [Go$String], false], ["ReplaceAllStringFunc", "", [Go$String, (go$funcType([Go$String], [Go$String], false))], [Go$String], false], ["Split", "", [Go$String, Go$Int], [(go$sliceType(Go$String))], false], ["String", "", [], [Go$String], false], ["SubexpNames", "", [], [(go$sliceType(Go$String))], false], ["allMatches", "regexp", [Go$String, (go$sliceType(Go$Uint8)), Go$Int, (go$funcType([(go$sliceType(Go$Int))], [], false))], [], false], ["doExecute", "regexp", [io.RuneReader, (go$sliceType(Go$Uint8)), Go$String, Go$Int, Go$Int], [(go$sliceType(Go$Int))], false], ["expand", "regexp", [(go$sliceType(Go$Uint8)), Go$String, (go$sliceType(Go$Uint8)), Go$String, (go$sliceType(Go$Int))], [(go$sliceType(Go$Uint8))], false], ["get", "regexp", [], [(go$ptrType(machine))], false], ["pad", "regexp", [(go$sliceType(Go$Int))], [(go$sliceType(Go$Int))], false], ["put", "regexp", [(go$ptrType(machine))], [], false], ["replaceAll", "regexp", [(go$sliceType(Go$Uint8)), Go$String, Go$Int, (go$funcType([(go$sliceType(Go$Uint8)), (go$sliceType(Go$Int))], [(go$sliceType(Go$Uint8))], false))], [(go$sliceType(Go$Uint8))], false]];
		input.init([["canCheckPrefix", "regexp", (go$funcType([], [Go$Bool], false))], ["context", "regexp", (go$funcType([Go$Int], [syntax.EmptyOp], false))], ["hasPrefix", "regexp", (go$funcType([(go$ptrType(Regexp))], [Go$Bool], false))], ["index", "regexp", (go$funcType([(go$ptrType(Regexp)), Go$Int], [Go$Int], false))], ["step", "regexp", (go$funcType([Go$Int], [Go$Int32, Go$Int], false))]]);
		inputString.init([["str", "regexp", Go$String, ""]]);
		(go$ptrType(inputString)).methods = [["canCheckPrefix", "regexp", [], [Go$Bool], false], ["context", "regexp", [Go$Int], [syntax.EmptyOp], false], ["hasPrefix", "regexp", [(go$ptrType(Regexp))], [Go$Bool], false], ["index", "regexp", [(go$ptrType(Regexp)), Go$Int], [Go$Int], false], ["step", "regexp", [Go$Int], [Go$Int32, Go$Int], false]];
		inputBytes.init([["str", "regexp", (go$sliceType(Go$Uint8)), ""]]);
		(go$ptrType(inputBytes)).methods = [["canCheckPrefix", "regexp", [], [Go$Bool], false], ["context", "regexp", [Go$Int], [syntax.EmptyOp], false], ["hasPrefix", "regexp", [(go$ptrType(Regexp))], [Go$Bool], false], ["index", "regexp", [(go$ptrType(Regexp)), Go$Int], [Go$Int], false], ["step", "regexp", [Go$Int], [Go$Int32, Go$Int], false]];
		inputReader.init([["r", "regexp", io.RuneReader, ""], ["atEOT", "regexp", Go$Bool, ""], ["pos", "regexp", Go$Int, ""]]);
		(go$ptrType(inputReader)).methods = [["canCheckPrefix", "regexp", [], [Go$Bool], false], ["context", "regexp", [Go$Int], [syntax.EmptyOp], false], ["hasPrefix", "regexp", [(go$ptrType(Regexp))], [Go$Bool], false], ["index", "regexp", [(go$ptrType(Regexp)), Go$Int], [Go$Int], false], ["step", "regexp", [Go$Int], [Go$Int32, Go$Int], false]];
		empty = (go$sliceType(Go$Int)).make(0, 0, function() { return 0; });
	}
	return go$pkg;
})();
go$packages["net/url"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], errors = go$packages["errors"], sort = go$packages["sort"], strconv = go$packages["strconv"], strings = go$packages["strings"], shouldEscape, QueryEscape, escape;
	shouldEscape = function(c, mode) {
		var _ref, _ref$1;
		if (65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57) {
			return false;
		}
		_ref = c;
		if (_ref === 45 || _ref === 95 || _ref === 46 || _ref === 126) {
			return false;
		} else if (_ref === 36 || _ref === 38 || _ref === 43 || _ref === 44 || _ref === 47 || _ref === 58 || _ref === 59 || _ref === 61 || _ref === 63 || _ref === 64) {
			_ref$1 = mode;
			if (_ref$1 === 1) {
				return c === 63;
			} else if (_ref$1 === 2) {
				return (c === 64) || (c === 47) || (c === 58);
			} else if (_ref$1 === 3) {
				return true;
			} else if (_ref$1 === 4) {
				return false;
			}
		}
		return true;
	};
	QueryEscape = go$pkg.QueryEscape = function(s) {
		return escape(s, 3);
	};
	escape = function(s, mode) {
		var _tuple, spaceCount, hexCount, i, c, x, t, j, i$1, c$1, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4;
		_tuple = [0, 0], spaceCount = _tuple[0], hexCount = _tuple[1];
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (shouldEscape(c, mode)) {
				if ((c === 32) && (mode === 3)) {
					spaceCount = spaceCount + 1 >> 0;
				} else {
					hexCount = hexCount + 1 >> 0;
				}
			}
			i = i + 1 >> 0;
		}
		if ((spaceCount === 0) && (hexCount === 0)) {
			return s;
		}
		t = (go$sliceType(Go$Uint8)).make(s.length + (x = 2, (((x >>> 16 << 16) * hexCount >> 0) + (x << 16 >>> 16) * hexCount) >> 0) >> 0, 0, function() { return 0; });
		j = 0;
		i$1 = 0;
		while (i$1 < s.length) {
			c$1 = s.charCodeAt(i$1);
			if ((c$1 === 32) && (mode === 3)) {
				_slice = t, _index = j, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 43) : go$throwRuntimeError("index out of range");
				j = j + 1 >> 0;
			} else if (shouldEscape(c$1, mode)) {
				_slice$1 = t, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 37) : go$throwRuntimeError("index out of range");
				_slice$2 = t, _index$2 = j + 1 >> 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = "0123456789ABCDEF".charCodeAt((c$1 >>> 4 << 24 >>> 24))) : go$throwRuntimeError("index out of range");
				_slice$3 = t, _index$3 = j + 2 >> 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = "0123456789ABCDEF".charCodeAt(((c$1 & 15) >>> 0))) : go$throwRuntimeError("index out of range");
				j = j + 3 >> 0;
			} else {
				_slice$4 = t, _index$4 = j, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = s.charCodeAt(i$1)) : go$throwRuntimeError("index out of range");
				j = j + 1 >> 0;
			}
			i$1 = i$1 + 1 >> 0;
		}
		return go$bytesToString(t);
	};
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["container/list"] = (function() {
	var go$pkg = {};
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["text/template/parse"] = (function() {
	var go$pkg = {}, list = go$packages["container/list"], fmt = go$packages["fmt"], strings = go$packages["strings"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], bytes = go$packages["bytes"], strconv = go$packages["strconv"], runtime = go$packages["runtime"];
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["text/template"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], fmt = go$packages["fmt"], io = go$packages["io"], reflect = go$packages["reflect"], runtime = go$packages["runtime"], sort = go$packages["sort"], strings = go$packages["strings"], parse = go$packages["text/template/parse"], errors = go$packages["errors"], url = go$packages["net/url"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], ioutil = go$packages["io/ioutil"], filepath = go$packages["path/filepath"], isTrue, canBeNil, indirect, printableValue, createValueFuncs, addValueFuncs, goodFunc, index, length, call, truth, and, or, not, basicKind, eq, ne, lt, le, gt, ge, HTMLEscape, HTMLEscapeString, HTMLEscaper, JSEscape, JSEscapeString, jsIsSpecial, JSEscaper, URLQueryEscaper, evalArgs, errorType, fmtStringerType, builtins, builtinFuncs, errBadComparisonType, errBadComparison, errNoComparison, htmlQuot, htmlApos, htmlAmp, htmlLt, htmlGt, jsLowUni, hex, jsBackslash, jsApos, jsQuot, jsLt, jsGt;
	isTrue = function(val) {
		var truth$1, ok, _tuple, _ref, x, x$1, x$2, _tuple$1;
		truth$1 = false;
		ok = false;
		if (!val.IsValid()) {
			_tuple = [false, true], truth$1 = _tuple[0], ok = _tuple[1];
			return [truth$1, ok];
		}
		_ref = val.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 24) {
			truth$1 = val.Len() > 0;
		} else if (_ref === 1) {
			truth$1 = val.Bool();
		} else if (_ref === 15 || _ref === 16) {
			truth$1 = !((x = val.Complex(), (x.real === 0 && x.imag === 0)));
		} else if (_ref === 18 || _ref === 19 || _ref === 22 || _ref === 20) {
			truth$1 = !val.IsNil();
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			truth$1 = !((x$1 = val.Int(), (x$1.high === 0 && x$1.low === 0)));
		} else if (_ref === 13 || _ref === 14) {
			truth$1 = !((val.Float() === 0));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			truth$1 = !((x$2 = val.Uint(), (x$2.high === 0 && x$2.low === 0)));
		} else if (_ref === 25) {
			truth$1 = true;
		} else {
			return [truth$1, ok];
		}
		_tuple$1 = [truth$1, true], truth$1 = _tuple$1[0], ok = _tuple$1[1];
		return [truth$1, ok];
	};
	canBeNil = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 18 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 22 || _ref === 23) {
			return true;
		}
		return false;
	};
	indirect = function(v) {
		var rv, isNil, _struct, _struct$1, _tuple, _struct$2, _struct$3, _tuple$1, _struct$4;
		rv = new reflect.Value.Ptr();
		isNil = false;
		while ((v.Kind() === 22) || (v.Kind() === 20)) {
			if (v.IsNil()) {
				_tuple = [(_struct$1 = v, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), true], rv = _tuple[0], isNil = _tuple[1];
				return [(_struct$2 = rv, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), isNil];
			}
			if ((v.Kind() === 20) && v.NumMethod() > 0) {
				break;
			}
			v = (_struct = v.Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		}
		_tuple$1 = [(_struct$3 = v, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), false], rv = _tuple$1[0], isNil = _tuple$1[1];
		return [(_struct$4 = rv, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), isNil];
	};
	printableValue = function(v) {
		var _tuple, _struct, _struct$1, _struct$2, _ref;
		if (v.Kind() === 22) {
			_tuple = indirect((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))), v = (_struct$1 = _tuple[0], new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		if (!v.IsValid()) {
			return [new Go$String("<no value>"), true];
		}
		if (!v.Type().Implements(errorType) && !v.Type().Implements(fmtStringerType)) {
			if (v.CanAddr() && (reflect.PtrTo(v.Type()).Implements(errorType) || reflect.PtrTo(v.Type()).Implements(fmtStringerType))) {
				v = (_struct$2 = v.Addr(), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			} else {
				_ref = v.Kind();
				if (_ref === 18 || _ref === 19) {
					return [null, false];
				}
			}
		}
		return [v.Interface(), true];
	};
	createValueFuncs = function(funcMap) {
		var m;
		m = new Go$Map();
		addValueFuncs(m, funcMap);
		return m;
	};
	addValueFuncs = function(out, in$1) {
		var _ref, _i, _keys, _entry, fn, name, _struct, v, _struct$1, _key;
		_ref = in$1;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			fn = _entry.v;
			name = _entry.k;
			v = (_struct = reflect.ValueOf(fn), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			if (!((v.Kind() === 19))) {
				throw go$panic(new Go$String("value for " + name + " not a function"));
			}
			if (!goodFunc(v.Type())) {
				throw go$panic(fmt.Errorf("can't install method/function %q with %d results", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$Int(v.Type().NumOut())])));
			}
			_key = name, (out || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: (_struct$1 = v, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)) };
			_i++;
		}
	};
	goodFunc = function(typ) {
		if (typ.NumOut() === 1) {
			return true;
		} else if ((typ.NumOut() === 2) && go$interfaceIsEqual(typ.Out(1), errorType)) {
			return true;
		}
		return false;
	};
	index = function(item, indices) {
		var _struct, v, _ref, _i, _slice, _index, i, _struct$1, index$1, isNil, _tuple, _struct$2, _struct$3, _ref$1, x, _ref$2, x$1, x$2, _struct$4, _struct$5, x$3, _struct$6, _struct$7, _struct$8, _struct$9;
		v = (_struct = reflect.ValueOf(item), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		_ref = indices;
		_i = 0;
		while (_i < _ref.length) {
			i = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			index$1 = (_struct$1 = reflect.ValueOf(i), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
			isNil = false;
			if (_tuple = indirect((_struct$2 = v, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag))), v = (_struct$3 = _tuple[0], new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), isNil = _tuple[1], isNil) {
				return [null, fmt.Errorf("index of nil pointer", new (go$sliceType(go$emptyInterface))([]))];
			}
			_ref$1 = v.Kind();
			if (_ref$1 === 17 || _ref$1 === 23 || _ref$1 === 24) {
				x = new Go$Int64(0, 0);
				_ref$2 = index$1.Kind();
				if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6) {
					x = index$1.Int();
				} else if (_ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
					x = (x$1 = index$1.Uint(), new Go$Int64(x$1.high, x$1.low));
				} else {
					return [null, fmt.Errorf("cannot index slice/array with type %s", new (go$sliceType(go$emptyInterface))([index$1.Type()]))];
				}
				if ((x.high < 0 || (x.high === 0 && x.low < 0)) || (x$2 = new Go$Int64(0, v.Len()), (x.high > x$2.high || (x.high === x$2.high && x.low >= x$2.low)))) {
					return [null, fmt.Errorf("index out of range: %d", new (go$sliceType(go$emptyInterface))([x]))];
				}
				v = (_struct$4 = v.Index(((x.low + ((x.high >> 31) * 4294967296)) >> 0)), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
			} else if (_ref$1 === 21) {
				if (!index$1.IsValid()) {
					index$1 = (_struct$5 = reflect.Zero(v.Type().Key()), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag));
				}
				if (!index$1.Type().AssignableTo(v.Type().Key())) {
					return [null, fmt.Errorf("%s is not index type for %s", new (go$sliceType(go$emptyInterface))([index$1.Type(), v.Type()]))];
				}
				if (x$3 = (_struct$7 = v.MapIndex((_struct$6 = index$1, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag))), new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), x$3.IsValid()) {
					v = (_struct$8 = x$3, new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag));
				} else {
					v = (_struct$9 = reflect.Zero(v.Type().Elem()), new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag));
				}
			} else {
				return [null, fmt.Errorf("can't index item of type %s", new (go$sliceType(go$emptyInterface))([v.Type()]))];
			}
			_i++;
		}
		return [v.Interface(), null];
	};
	length = function(item) {
		var _tuple, _struct, _struct$1, v, isNil, _ref;
		_tuple = indirect((_struct = reflect.ValueOf(item), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))), v = (_struct$1 = _tuple[0], new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), isNil = _tuple[1];
		if (isNil) {
			return [0, fmt.Errorf("len of nil pointer", new (go$sliceType(go$emptyInterface))([]))];
		}
		_ref = v.Kind();
		if (_ref === 17 || _ref === 18 || _ref === 21 || _ref === 23 || _ref === 24) {
			return [v.Len(), null];
		}
		return [0, fmt.Errorf("len of type %s", new (go$sliceType(go$emptyInterface))([v.Type()]))];
	};
	call = function(fn, args) {
		var _struct, v, typ, numIn, dddType, argv, _ref, _i, _slice, _index, arg, i, _struct$1, value, argType, _struct$2, _struct$3, _slice$1, _index$1, result, _slice$2, _index$2, _slice$3, _index$3, x, _slice$4, _index$4, _slice$5, _index$5;
		v = (_struct = reflect.ValueOf(fn), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		typ = v.Type();
		if (!((typ.Kind() === 19))) {
			return [null, fmt.Errorf("non-function of type %s", new (go$sliceType(go$emptyInterface))([typ]))];
		}
		if (!goodFunc(typ)) {
			return [null, fmt.Errorf("function called with %d args; should be 1 or 2", new (go$sliceType(go$emptyInterface))([new Go$Int(typ.NumOut())]))];
		}
		numIn = typ.NumIn();
		dddType = null;
		if (typ.IsVariadic()) {
			if (args.length < (numIn - 1 >> 0)) {
				return [null, fmt.Errorf("wrong number of args: got %d want at least %d", new (go$sliceType(go$emptyInterface))([new Go$Int(args.length), new Go$Int((numIn - 1 >> 0))]))];
			}
			dddType = typ.In(numIn - 1 >> 0).Elem();
		} else {
			if (!((args.length === numIn))) {
				return [null, fmt.Errorf("wrong number of args: got %d want %d", new (go$sliceType(go$emptyInterface))([new Go$Int(args.length), new Go$Int(numIn)]))];
			}
		}
		argv = (go$sliceType(reflect.Value)).make(args.length, 0, function() { return new reflect.Value.Ptr(); });
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			arg = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			value = (_struct$1 = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
			argType = null;
			if (!typ.IsVariadic() || i < (numIn - 1 >> 0)) {
				argType = typ.In(i);
			} else {
				argType = dddType;
			}
			if (!value.IsValid() && canBeNil(argType)) {
				value = (_struct$2 = reflect.Zero(argType), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			}
			if (!value.Type().AssignableTo(argType)) {
				return [null, fmt.Errorf("arg %d has type %s; should be %s", new (go$sliceType(go$emptyInterface))([new Go$Int(i), value.Type(), argType]))];
			}
			_slice$1 = argv, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (_struct$3 = value, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag))) : go$throwRuntimeError("index out of range");
			_i++;
		}
		result = v.Call(argv);
		if ((result.length === 2) && !(_slice$2 = result, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).IsNil()) {
			return [(_slice$3 = result, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).Interface(), (x = (_slice$4 = result, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).Interface(), (x !== null && go$error.implementedBy.indexOf(x.constructor) !== -1 ? x : go$typeAssertionFailed(x, go$error)))];
		}
		return [(_slice$5 = result, _index$5 = 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")).Interface(), null];
	};
	truth = function(a) {
		var _tuple, _struct, t;
		_tuple = isTrue((_struct = reflect.ValueOf(a), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))), t = _tuple[0];
		return t;
	};
	and = function(arg0, args) {
		var _ref, _i, i, _slice, _index;
		if (!truth(arg0)) {
			return arg0;
		}
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			arg0 = (_slice = args, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!truth(arg0)) {
				break;
			}
			_i++;
		}
		return arg0;
	};
	or = function(arg0, args) {
		var _ref, _i, i, _slice, _index;
		if (truth(arg0)) {
			return arg0;
		}
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			arg0 = (_slice = args, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (truth(arg0)) {
				break;
			}
			_i++;
		}
		return arg0;
	};
	not = function(arg) {
		var truth$1, _tuple, _struct;
		truth$1 = false;
		_tuple = isTrue((_struct = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))), truth$1 = _tuple[0];
		truth$1 = !truth$1;
		return truth$1;
	};
	basicKind = function(v) {
		var _ref;
		_ref = v.Kind();
		if (_ref === 1) {
			return [1, null];
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return [3, null];
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return [7, null];
		} else if (_ref === 13 || _ref === 14) {
			return [4, null];
		} else if (_ref === 15 || _ref === 16) {
			return [2, null];
		} else if (_ref === 24) {
			return [6, null];
		}
		return [0, errBadComparisonType];
	};
	eq = function(arg1, arg2) {
		var _struct, v1, _tuple, _struct$1, k1, err, _ref, _i, _slice, _index, arg, _struct$2, v2, _tuple$1, _struct$3, k2, err$1, truth$1, _ref$1, x, x$1, x$2, x$3, x$4, x$5;
		v1 = (_struct = reflect.ValueOf(arg1), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		_tuple = basicKind((_struct$1 = v1, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))), k1 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		if (arg2.length === 0) {
			return [false, errNoComparison];
		}
		_ref = arg2;
		_i = 0;
		while (_i < _ref.length) {
			arg = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			v2 = (_struct$2 = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			_tuple$1 = basicKind((_struct$3 = v2, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag))), k2 = _tuple$1[0], err$1 = _tuple$1[1];
			if (!(go$interfaceIsEqual(err$1, null))) {
				return [false, err$1];
			}
			if (!((k1 === k2))) {
				return [false, errBadComparison];
			}
			truth$1 = false;
			_ref$1 = k1;
			if (_ref$1 === 1) {
				truth$1 = v1.Bool() === v2.Bool();
			} else if (_ref$1 === 2) {
				truth$1 = (x = v1.Complex(), x$1 = v2.Complex(), (x.real === x$1.real && x.imag === x$1.imag));
			} else if (_ref$1 === 4) {
				truth$1 = v1.Float() === v2.Float();
			} else if (_ref$1 === 3) {
				truth$1 = (x$2 = v1.Int(), x$3 = v2.Int(), (x$2.high === x$3.high && x$2.low === x$3.low));
			} else if (_ref$1 === 6) {
				truth$1 = v1.String() === v2.String();
			} else if (_ref$1 === 7) {
				truth$1 = (x$4 = v1.Uint(), x$5 = v2.Uint(), (x$4.high === x$5.high && x$4.low === x$5.low));
			} else {
				throw go$panic(new Go$String("invalid kind"));
			}
			if (truth$1) {
				return [true, null];
			}
			_i++;
		}
		return [false, null];
	};
	ne = function(arg1, arg2) {
		var _tuple, equal, err;
		_tuple = eq(arg1, new (go$sliceType(go$emptyInterface))([arg2])), equal = _tuple[0], err = _tuple[1];
		return [!equal, err];
	};
	lt = function(arg1, arg2) {
		var _struct, v1, _tuple, _struct$1, k1, err, _struct$2, v2, _tuple$1, _struct$3, k2, truth$1, _ref, x, x$1, x$2, x$3;
		v1 = (_struct = reflect.ValueOf(arg1), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		_tuple = basicKind((_struct$1 = v1, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))), k1 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		v2 = (_struct$2 = reflect.ValueOf(arg2), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		_tuple$1 = basicKind((_struct$3 = v2, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag))), k2 = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		if (!((k1 === k2))) {
			return [false, errBadComparison];
		}
		truth$1 = false;
		_ref = k1;
		if (_ref === 1 || _ref === 2) {
			return [false, errBadComparisonType];
		} else if (_ref === 4) {
			truth$1 = v1.Float() < v2.Float();
		} else if (_ref === 3) {
			truth$1 = (x = v1.Int(), x$1 = v2.Int(), (x.high < x$1.high || (x.high === x$1.high && x.low < x$1.low)));
		} else if (_ref === 6) {
			truth$1 = v1.String() < v2.String();
		} else if (_ref === 7) {
			truth$1 = (x$2 = v1.Uint(), x$3 = v2.Uint(), (x$2.high < x$3.high || (x$2.high === x$3.high && x$2.low < x$3.low)));
		} else {
			throw go$panic(new Go$String("invalid kind"));
		}
		return [truth$1, null];
	};
	le = function(arg1, arg2) {
		var _tuple, lessThan, err;
		_tuple = lt(arg1, arg2), lessThan = _tuple[0], err = _tuple[1];
		if (lessThan || !(go$interfaceIsEqual(err, null))) {
			return [lessThan, err];
		}
		return eq(arg1, new (go$sliceType(go$emptyInterface))([arg2]));
	};
	gt = function(arg1, arg2) {
		var _tuple, lessOrEqual, err;
		_tuple = le(arg1, arg2), lessOrEqual = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		return [!lessOrEqual, null];
	};
	ge = function(arg1, arg2) {
		var _tuple, lessThan, err;
		_tuple = lt(arg1, arg2), lessThan = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		return [!lessThan, null];
	};
	HTMLEscape = go$pkg.HTMLEscape = function(w, b) {
		var last, _ref, _i, _slice, _index, c, i, html, _ref$1;
		last = 0;
		_ref = b;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			html = (go$sliceType(Go$Uint8)).nil;
			_ref$1 = c;
			if (_ref$1 === 34) {
				html = htmlQuot;
			} else if (_ref$1 === 39) {
				html = htmlApos;
			} else if (_ref$1 === 38) {
				html = htmlAmp;
			} else if (_ref$1 === 60) {
				html = htmlLt;
			} else if (_ref$1 === 62) {
				html = htmlGt;
			} else {
				_i++;
				continue;
			}
			w.Write(go$subslice(b, last, i));
			w.Write(html);
			last = i + 1 >> 0;
			_i++;
		}
		w.Write(go$subslice(b, last));
	};
	HTMLEscapeString = go$pkg.HTMLEscapeString = function(s) {
		var b;
		if (strings.IndexAny(s, "'\"&<>") < 0) {
			return s;
		}
		b = new bytes.Buffer.Ptr();
		HTMLEscape(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
		return b.String();
	};
	HTMLEscaper = go$pkg.HTMLEscaper = function(args) {
		return HTMLEscapeString(evalArgs(args));
	};
	JSEscape = go$pkg.JSEscape = function(w, b) {
		var last, i, _slice, _index, c, _ref, _tuple, t, b$1, _tuple$1, r, size;
		last = 0;
		i = 0;
		while (i < b.length) {
			c = (_slice = b, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!jsIsSpecial((c >> 0))) {
				i = i + 1 >> 0;
				continue;
			}
			w.Write(go$subslice(b, last, i));
			if (c < 128) {
				_ref = c;
				if (_ref === 92) {
					w.Write(jsBackslash);
				} else if (_ref === 39) {
					w.Write(jsApos);
				} else if (_ref === 34) {
					w.Write(jsQuot);
				} else if (_ref === 60) {
					w.Write(jsLt);
				} else if (_ref === 62) {
					w.Write(jsGt);
				} else {
					w.Write(jsLowUni);
					_tuple = [c >>> 4 << 24 >>> 24, (c & 15) >>> 0], t = _tuple[0], b$1 = _tuple[1];
					w.Write(go$subslice(hex, t, (t + 1 << 24 >>> 24)));
					w.Write(go$subslice(hex, b$1, (b$1 + 1 << 24 >>> 24)));
				}
			} else {
				_tuple$1 = utf8.DecodeRune(go$subslice(b, i)), r = _tuple$1[0], size = _tuple$1[1];
				if (unicode.IsPrint(r)) {
					w.Write(go$subslice(b, i, (i + size >> 0)));
				} else {
					fmt.Fprintf(w, "\\u%04X", new (go$sliceType(go$emptyInterface))([new Go$Int32(r)]));
				}
				i = i + ((size - 1 >> 0)) >> 0;
			}
			last = i + 1 >> 0;
			i = i + 1 >> 0;
		}
		w.Write(go$subslice(b, last));
	};
	JSEscapeString = go$pkg.JSEscapeString = function(s) {
		var b;
		if (strings.IndexFunc(s, jsIsSpecial) < 0) {
			return s;
		}
		b = new bytes.Buffer.Ptr();
		JSEscape(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
		return b.String();
	};
	jsIsSpecial = function(r) {
		var _ref;
		_ref = r;
		if (_ref === 92 || _ref === 39 || _ref === 34 || _ref === 60 || _ref === 62) {
			return true;
		}
		return r < 32 || 128 <= r;
	};
	JSEscaper = go$pkg.JSEscaper = function(args) {
		return JSEscapeString(evalArgs(args));
	};
	URLQueryEscaper = go$pkg.URLQueryEscaper = function(args) {
		return url.QueryEscape(evalArgs(args));
	};
	evalArgs = function(args) {
		var ok, s, _tuple, x, _slice, _index, _ref, _i, _slice$1, _index$1, arg, i, _tuple$1, _struct, a, ok$1, _slice$2, _index$2;
		ok = false;
		s = "";
		if (args.length === 1) {
			_tuple = (x = (_slice = args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === Go$String ? [x.go$val, true] : ["", false])), s = _tuple[0], ok = _tuple[1];
		}
		if (!ok) {
			_ref = args;
			_i = 0;
			while (_i < _ref.length) {
				arg = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				i = _i;
				_tuple$1 = printableValue((_struct = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))), a = _tuple$1[0], ok$1 = _tuple$1[1];
				if (ok$1) {
					_slice$2 = args, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = a) : go$throwRuntimeError("index out of range");
				}
				_i++;
			}
			s = fmt.Sprint(args);
		}
		return s;
	};
	go$pkg.init = function() {
		errorType = reflect.TypeOf((go$ptrType(go$error)).nil).Elem();
		fmtStringerType = reflect.TypeOf((go$ptrType(fmt.Stringer)).nil).Elem();
		errBadComparison = errors.New("incompatible types for comparison");
		errNoComparison = errors.New("missing argument for comparison");
		errBadComparisonType = errors.New("invalid type for comparison");
		htmlQuot = new (go$sliceType(Go$Uint8))(go$stringToBytes("&#34;"));
		htmlApos = new (go$sliceType(Go$Uint8))(go$stringToBytes("&#39;"));
		htmlAmp = new (go$sliceType(Go$Uint8))(go$stringToBytes("&amp;"));
		htmlLt = new (go$sliceType(Go$Uint8))(go$stringToBytes("&lt;"));
		htmlGt = new (go$sliceType(Go$Uint8))(go$stringToBytes("&gt;"));
		jsLowUni = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\u00"));
		hex = new (go$sliceType(Go$Uint8))(go$stringToBytes("0123456789ABCDEF"));
		jsBackslash = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\\\"));
		jsApos = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\'"));
		jsQuot = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\\""));
		jsLt = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\x3C"));
		jsGt = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\x3E"));
		var _map, _key;
		builtins = (_map = new Go$Map(), _key = "and", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [go$emptyInterface], true))(and) }, _key = "call", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [go$emptyInterface, go$error], true))(call) }, _key = "html", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(HTMLEscaper) }, _key = "index", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [go$emptyInterface, go$error], true))(index) }, _key = "js", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(JSEscaper) }, _key = "len", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface], [Go$Int, go$error], false))(length) }, _key = "not", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface], [Go$Bool], false))(not) }, _key = "or", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [go$emptyInterface], true))(or) }, _key = "print", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(fmt.Sprint) }, _key = "printf", _map[_key] = { k: _key, v: new (go$funcType([Go$String, (go$sliceType(go$emptyInterface))], [Go$String], true))(fmt.Sprintf) }, _key = "println", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(fmt.Sprintln) }, _key = "urlquery", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(URLQueryEscaper) }, _key = "eq", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [Go$Bool, go$error], true))(eq) }, _key = "ge", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(ge) }, _key = "gt", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(gt) }, _key = "le", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(le) }, _key = "lt", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(lt) }, _key = "ne", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(ne) }, _map);
		builtinFuncs = createValueFuncs(builtins);
	}
	return go$pkg;
})();
go$packages["go/doc"] = (function() {
	var go$pkg = {}, io = go$packages["io"], regexp = go$packages["regexp"], strings = go$packages["strings"], template = go$packages["text/template"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], ast = go$packages["go/ast"], token = go$packages["go/token"], path = go$packages["path"], sort = go$packages["sort"], strconv = go$packages["strconv"], firstSentenceLen, clean, Synopsis, matchRx, nonAlphaNumRx, outputPrefix, noteMarker, noteMarkerRx, noteCommentRx;
	firstSentenceLen = function(s) {
		var _tuple, ppp, pp, p, _ref, _i, _rune, q, i, _tuple$1;
		_tuple = [0, 0, 0], ppp = _tuple[0], pp = _tuple[1], p = _tuple[2];
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			q = _rune[0];
			i = _i;
			if ((q === 10) || (q === 13) || (q === 9)) {
				q = 32;
			}
			if ((q === 32) && (p === 46) && (!unicode.IsUpper(pp) || unicode.IsUpper(ppp))) {
				return i;
			}
			if ((p === 12290) || (p === 65294)) {
				return i;
			}
			_tuple$1 = [pp, p, q], ppp = _tuple$1[0], pp = _tuple$1[1], p = _tuple$1[2];
			_i += _rune[1];
		}
		return s.length;
	};
	clean = function(s, flags) {
		var b, p, i, q, n;
		b = (go$sliceType(Go$Uint8)).nil;
		p = 32;
		i = 0;
		while (i < s.length) {
			q = s.charCodeAt(i);
			if ((((flags & 1)) === 0) && (q === 10) || (q === 13) || (q === 9)) {
				q = 32;
			}
			if (!((q === 32)) || !((p === 32))) {
				b = go$append(b, q);
				p = q;
			}
			i = i + 1 >> 0;
		}
		if (n = b.length, n > 0 && (p === 32)) {
			b = go$subslice(b, 0, (n - 1 >> 0));
		}
		return go$bytesToString(b);
	};
	Synopsis = go$pkg.Synopsis = function(s) {
		var _ref, _i, _slice, _index, prefix;
		s = clean(s.substring(0, firstSentenceLen(s)), 0);
		_ref = go$pkg.IllegalPrefixes;
		_i = 0;
		while (_i < _ref.length) {
			prefix = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (strings.HasPrefix(strings.ToLower(s), prefix)) {
				return "";
			}
			_i++;
		}
		return s;
	};
	go$pkg.init = function() {
		matchRx = regexp.MustCompile("((https?|ftp|file|gopher|mailto|news|nntp|telnet|wais|prospero)://[a-zA-Z0-9_@\\-]+([.:][a-zA-Z0-9_@\\-]+)*/?[a-zA-Z0-9_?%#~&/\\-+=]+([:.,][a-zA-Z0-9_?%#~&/\\-+=]+)*)|([a-zA-Z_][a-zA-Z_0-9]*)");
		nonAlphaNumRx = regexp.MustCompile("[^a-zA-Z0-9]");
		outputPrefix = regexp.MustCompile("(?i)^[[:space:]]*output:");
		noteMarker = "([A-Z][A-Z]+)\\(([^)]+)\\):?";
		noteMarkerRx = regexp.MustCompile("^[ \\t]*" + noteMarker);
		noteCommentRx = regexp.MustCompile("^/[/*][ \\t]*" + noteMarker);
		go$pkg.IllegalPrefixes = new (go$sliceType(Go$String))(["copyright", "all rights", "author"]);
	}
	return go$pkg;
})();
go$packages["log"] = (function() {
	var go$pkg = {}, fmt = go$packages["fmt"], io = go$packages["io"], os = go$packages["os"], runtime = go$packages["runtime"], sync = go$packages["sync"], time = go$packages["time"], Logger, New, itoa, Panicf, std;
	Logger = go$pkg.Logger = go$newType(0, "Struct", "log.Logger", "Logger", "log", function(mu_, prefix_, flag_, out_, buf_) {
		this.go$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.prefix = prefix_ !== undefined ? prefix_ : "";
		this.flag = flag_ !== undefined ? flag_ : 0;
		this.out = out_ !== undefined ? out_ : null;
		this.buf = buf_ !== undefined ? buf_ : (go$sliceType(Go$Uint8)).nil;
	});
	New = go$pkg.New = function(out, prefix, flag) {
		return new Logger.Ptr(new sync.Mutex.Ptr(), prefix, flag, out, (go$sliceType(Go$Uint8)).nil);
	};
	itoa = function(buf, i, wid) {
		var u, b, bp, _q, _r;
		u = (i >>> 0);
		if ((u === 0) && wid <= 1) {
			buf.go$set(go$append(buf.go$get(), 48));
			return;
		}
		b = go$makeNativeArray("Uint8", 32, function() { return 0; });
		bp = 32;
		while (u > 0 || wid > 0) {
			bp = bp - 1 >> 0;
			wid = wid - 1 >> 0;
			b[bp] = ((_r = u % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24;
			u = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		buf.go$set(go$appendSlice(buf.go$get(), go$subslice(new (go$sliceType(Go$Uint8))(b), bp)));
	};
	Logger.Ptr.prototype.formatHeader = function(buf, t, file, line) {
		var l, _tuple, year, month, day, _tuple$1, hour, min, sec, _q, short$1, i;
		l = this;
		buf.go$set(go$appendSlice(buf.go$get(), new (go$sliceType(Go$Uint8))(go$stringToBytes(l.prefix))));
		if (!(((l.flag & 7) === 0))) {
			if (!(((l.flag & 1) === 0))) {
				_tuple = t.Date(), year = _tuple[0], month = _tuple[1], day = _tuple[2];
				itoa(buf, year, 4);
				buf.go$set(go$append(buf.go$get(), 47));
				itoa(buf, (month >> 0), 2);
				buf.go$set(go$append(buf.go$get(), 47));
				itoa(buf, day, 2);
				buf.go$set(go$append(buf.go$get(), 32));
			}
			if (!(((l.flag & 6) === 0))) {
				_tuple$1 = t.Clock(), hour = _tuple$1[0], min = _tuple$1[1], sec = _tuple$1[2];
				itoa(buf, hour, 2);
				buf.go$set(go$append(buf.go$get(), 58));
				itoa(buf, min, 2);
				buf.go$set(go$append(buf.go$get(), 58));
				itoa(buf, sec, 2);
				if (!(((l.flag & 4) === 0))) {
					buf.go$set(go$append(buf.go$get(), 46));
					itoa(buf, (_q = t.Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), 6);
				}
				buf.go$set(go$append(buf.go$get(), 32));
			}
		}
		if (!(((l.flag & 24) === 0))) {
			if (!(((l.flag & 16) === 0))) {
				short$1 = file;
				i = file.length - 1 >> 0;
				while (i > 0) {
					if (file.charCodeAt(i) === 47) {
						short$1 = file.substring((i + 1 >> 0));
						break;
					}
					i = i - 1 >> 0;
				}
				file = short$1;
			}
			buf.go$set(go$appendSlice(buf.go$get(), new (go$sliceType(Go$Uint8))(go$stringToBytes(file))));
			buf.go$set(go$append(buf.go$get(), 58));
			itoa(buf, line, -1);
			buf.go$set(go$appendSlice(buf.go$get(), new (go$sliceType(Go$Uint8))(go$stringToBytes(": "))));
		}
	};
	Logger.prototype.formatHeader = function(buf, t, file, line) { return this.go$val.formatHeader(buf, t, file, line); };
	Logger.Ptr.prototype.Output = function(calldepth, s) {
		var l, _struct, now, file, line, ok, _tuple, v, _struct$1, _tuple$1, err;
		var go$deferred = [];
		try {
			l = this;
			now = (_struct = time.Now(), new time.Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
			file = "";
			line = 0;
			l.mu.Lock();
			go$deferred.push({ recv: l.mu, method: "Unlock", args: [] });
			if (!(((l.flag & 24) === 0))) {
				l.mu.Unlock();
				ok = false;
				_tuple = runtime.Caller(calldepth), file = _tuple[1], line = _tuple[2], ok = _tuple[3];
				if (!ok) {
					file = "???";
					line = 0;
				}
				l.mu.Lock();
			}
			l.buf = go$subslice(l.buf, 0, 0);
			l.formatHeader(new (go$ptrType((go$sliceType(Go$Uint8))))(function() { return l.buf; }, function(v) { l.buf = v; }), (_struct$1 = now, new time.Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc)), file, line);
			l.buf = go$appendSlice(l.buf, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
			if (s.length > 0 && !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {
				l.buf = go$append(l.buf, 10);
			}
			_tuple$1 = l.out.Write(l.buf), err = _tuple$1[1];
			return err;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Logger.prototype.Output = function(calldepth, s) { return this.go$val.Output(calldepth, s); };
	Logger.Ptr.prototype.Printf = function(format, v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprintf(format, v));
	};
	Logger.prototype.Printf = function(format, v) { return this.go$val.Printf(format, v); };
	Logger.Ptr.prototype.Print = function(v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprint(v));
	};
	Logger.prototype.Print = function(v) { return this.go$val.Print(v); };
	Logger.Ptr.prototype.Println = function(v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprintln(v));
	};
	Logger.prototype.Println = function(v) { return this.go$val.Println(v); };
	Logger.Ptr.prototype.Fatal = function(v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprint(v));
		os.Exit(1);
	};
	Logger.prototype.Fatal = function(v) { return this.go$val.Fatal(v); };
	Logger.Ptr.prototype.Fatalf = function(format, v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprintf(format, v));
		os.Exit(1);
	};
	Logger.prototype.Fatalf = function(format, v) { return this.go$val.Fatalf(format, v); };
	Logger.Ptr.prototype.Fatalln = function(v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprintln(v));
		os.Exit(1);
	};
	Logger.prototype.Fatalln = function(v) { return this.go$val.Fatalln(v); };
	Logger.Ptr.prototype.Panic = function(v) {
		var l, s;
		l = this;
		s = fmt.Sprint(v);
		l.Output(2, s);
		throw go$panic(new Go$String(s));
	};
	Logger.prototype.Panic = function(v) { return this.go$val.Panic(v); };
	Logger.Ptr.prototype.Panicf = function(format, v) {
		var l, s;
		l = this;
		s = fmt.Sprintf(format, v);
		l.Output(2, s);
		throw go$panic(new Go$String(s));
	};
	Logger.prototype.Panicf = function(format, v) { return this.go$val.Panicf(format, v); };
	Logger.Ptr.prototype.Panicln = function(v) {
		var l, s;
		l = this;
		s = fmt.Sprintln(v);
		l.Output(2, s);
		throw go$panic(new Go$String(s));
	};
	Logger.prototype.Panicln = function(v) { return this.go$val.Panicln(v); };
	Logger.Ptr.prototype.Flags = function() {
		var l;
		var go$deferred = [];
		try {
			l = this;
			l.mu.Lock();
			go$deferred.push({ recv: l.mu, method: "Unlock", args: [] });
			return l.flag;
		} catch(go$err) {
			go$pushErr(go$err);
			return 0;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Logger.prototype.Flags = function() { return this.go$val.Flags(); };
	Logger.Ptr.prototype.SetFlags = function(flag) {
		var l;
		var go$deferred = [];
		try {
			l = this;
			l.mu.Lock();
			go$deferred.push({ recv: l.mu, method: "Unlock", args: [] });
			l.flag = flag;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Logger.prototype.SetFlags = function(flag) { return this.go$val.SetFlags(flag); };
	Logger.Ptr.prototype.Prefix = function() {
		var l;
		var go$deferred = [];
		try {
			l = this;
			l.mu.Lock();
			go$deferred.push({ recv: l.mu, method: "Unlock", args: [] });
			return l.prefix;
		} catch(go$err) {
			go$pushErr(go$err);
			return "";
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Logger.prototype.Prefix = function() { return this.go$val.Prefix(); };
	Logger.Ptr.prototype.SetPrefix = function(prefix) {
		var l;
		var go$deferred = [];
		try {
			l = this;
			l.mu.Lock();
			go$deferred.push({ recv: l.mu, method: "Unlock", args: [] });
			l.prefix = prefix;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Logger.prototype.SetPrefix = function(prefix) { return this.go$val.SetPrefix(prefix); };
	Panicf = go$pkg.Panicf = function(format, v) {
		var s;
		s = fmt.Sprintf(format, v);
		std.Output(2, s);
		throw go$panic(new Go$String(s));
	};
	go$pkg.init = function() {
		Logger.init([["mu", "log", sync.Mutex, ""], ["prefix", "log", Go$String, ""], ["flag", "log", Go$Int, ""], ["out", "log", io.Writer, ""], ["buf", "log", (go$sliceType(Go$Uint8)), ""]]);
		(go$ptrType(Logger)).methods = [["Fatal", "", [(go$sliceType(go$emptyInterface))], [], true], ["Fatalf", "", [Go$String, (go$sliceType(go$emptyInterface))], [], true], ["Fatalln", "", [(go$sliceType(go$emptyInterface))], [], true], ["Flags", "", [], [Go$Int], false], ["Output", "", [Go$Int, Go$String], [go$error], false], ["Panic", "", [(go$sliceType(go$emptyInterface))], [], true], ["Panicf", "", [Go$String, (go$sliceType(go$emptyInterface))], [], true], ["Panicln", "", [(go$sliceType(go$emptyInterface))], [], true], ["Prefix", "", [], [Go$String], false], ["Print", "", [(go$sliceType(go$emptyInterface))], [], true], ["Printf", "", [Go$String, (go$sliceType(go$emptyInterface))], [], true], ["Println", "", [(go$sliceType(go$emptyInterface))], [], true], ["SetFlags", "", [Go$Int], [], false], ["SetPrefix", "", [Go$String], [], false], ["formatHeader", "log", [(go$ptrType((go$sliceType(Go$Uint8)))), time.Time, Go$String, Go$Int], [], false]];
		std = New(os.Stderr, "", 3);
	}
	return go$pkg;
})();
go$packages["go/build"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], errors = go$packages["errors"], fmt = go$packages["fmt"], ast = go$packages["go/ast"], doc = go$packages["go/doc"], parser = go$packages["go/parser"], token = go$packages["go/token"], io = go$packages["io"], ioutil = go$packages["io/ioutil"], log = go$packages["log"], os = go$packages["os"], path = go$packages["path"], filepath = go$packages["path/filepath"], runtime = go$packages["runtime"], sort = go$packages["sort"], strconv = go$packages["strconv"], strings = go$packages["strings"], unicode = go$packages["unicode"], bufio = go$packages["bufio"], Context, ImportMode, Package, NoGoError, importReader, hasSubdir, defaultContext, envOr, nameExt, cleanImports, Import, safeCgoName, splitQuoted, IsLocalImport, isIdent, readComments, readImports, cgoEnabled, slashslash, safeBytes, knownOS, knownArch, errSyntax, errNUL;
	Context = go$pkg.Context = go$newType(0, "Struct", "build.Context", "Context", "go/build", function(GOARCH_, GOOS_, GOROOT_, GOPATH_, CgoEnabled_, UseAllFiles_, Compiler_, BuildTags_, ReleaseTags_, InstallSuffix_, JoinPath_, SplitPathList_, IsAbsPath_, IsDir_, HasSubdir_, ReadDir_, OpenFile_) {
		this.go$val = this;
		this.GOARCH = GOARCH_ !== undefined ? GOARCH_ : "";
		this.GOOS = GOOS_ !== undefined ? GOOS_ : "";
		this.GOROOT = GOROOT_ !== undefined ? GOROOT_ : "";
		this.GOPATH = GOPATH_ !== undefined ? GOPATH_ : "";
		this.CgoEnabled = CgoEnabled_ !== undefined ? CgoEnabled_ : false;
		this.UseAllFiles = UseAllFiles_ !== undefined ? UseAllFiles_ : false;
		this.Compiler = Compiler_ !== undefined ? Compiler_ : "";
		this.BuildTags = BuildTags_ !== undefined ? BuildTags_ : (go$sliceType(Go$String)).nil;
		this.ReleaseTags = ReleaseTags_ !== undefined ? ReleaseTags_ : (go$sliceType(Go$String)).nil;
		this.InstallSuffix = InstallSuffix_ !== undefined ? InstallSuffix_ : "";
		this.JoinPath = JoinPath_ !== undefined ? JoinPath_ : go$throwNilPointerError;
		this.SplitPathList = SplitPathList_ !== undefined ? SplitPathList_ : go$throwNilPointerError;
		this.IsAbsPath = IsAbsPath_ !== undefined ? IsAbsPath_ : go$throwNilPointerError;
		this.IsDir = IsDir_ !== undefined ? IsDir_ : go$throwNilPointerError;
		this.HasSubdir = HasSubdir_ !== undefined ? HasSubdir_ : go$throwNilPointerError;
		this.ReadDir = ReadDir_ !== undefined ? ReadDir_ : go$throwNilPointerError;
		this.OpenFile = OpenFile_ !== undefined ? OpenFile_ : go$throwNilPointerError;
	});
	ImportMode = go$pkg.ImportMode = go$newType(4, "Uint", "build.ImportMode", "ImportMode", "go/build", null);
	Package = go$pkg.Package = go$newType(0, "Struct", "build.Package", "Package", "go/build", function(Dir_, Name_, Doc_, ImportPath_, Root_, SrcRoot_, PkgRoot_, BinDir_, Goroot_, PkgObj_, AllTags_, ConflictDir_, GoFiles_, CgoFiles_, IgnoredGoFiles_, CFiles_, CXXFiles_, HFiles_, SFiles_, SwigFiles_, SwigCXXFiles_, SysoFiles_, CgoCFLAGS_, CgoCPPFLAGS_, CgoCXXFLAGS_, CgoLDFLAGS_, CgoPkgConfig_, Imports_, ImportPos_, TestGoFiles_, TestImports_, TestImportPos_, XTestGoFiles_, XTestImports_, XTestImportPos_) {
		this.go$val = this;
		this.Dir = Dir_ !== undefined ? Dir_ : "";
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Doc = Doc_ !== undefined ? Doc_ : "";
		this.ImportPath = ImportPath_ !== undefined ? ImportPath_ : "";
		this.Root = Root_ !== undefined ? Root_ : "";
		this.SrcRoot = SrcRoot_ !== undefined ? SrcRoot_ : "";
		this.PkgRoot = PkgRoot_ !== undefined ? PkgRoot_ : "";
		this.BinDir = BinDir_ !== undefined ? BinDir_ : "";
		this.Goroot = Goroot_ !== undefined ? Goroot_ : false;
		this.PkgObj = PkgObj_ !== undefined ? PkgObj_ : "";
		this.AllTags = AllTags_ !== undefined ? AllTags_ : (go$sliceType(Go$String)).nil;
		this.ConflictDir = ConflictDir_ !== undefined ? ConflictDir_ : "";
		this.GoFiles = GoFiles_ !== undefined ? GoFiles_ : (go$sliceType(Go$String)).nil;
		this.CgoFiles = CgoFiles_ !== undefined ? CgoFiles_ : (go$sliceType(Go$String)).nil;
		this.IgnoredGoFiles = IgnoredGoFiles_ !== undefined ? IgnoredGoFiles_ : (go$sliceType(Go$String)).nil;
		this.CFiles = CFiles_ !== undefined ? CFiles_ : (go$sliceType(Go$String)).nil;
		this.CXXFiles = CXXFiles_ !== undefined ? CXXFiles_ : (go$sliceType(Go$String)).nil;
		this.HFiles = HFiles_ !== undefined ? HFiles_ : (go$sliceType(Go$String)).nil;
		this.SFiles = SFiles_ !== undefined ? SFiles_ : (go$sliceType(Go$String)).nil;
		this.SwigFiles = SwigFiles_ !== undefined ? SwigFiles_ : (go$sliceType(Go$String)).nil;
		this.SwigCXXFiles = SwigCXXFiles_ !== undefined ? SwigCXXFiles_ : (go$sliceType(Go$String)).nil;
		this.SysoFiles = SysoFiles_ !== undefined ? SysoFiles_ : (go$sliceType(Go$String)).nil;
		this.CgoCFLAGS = CgoCFLAGS_ !== undefined ? CgoCFLAGS_ : (go$sliceType(Go$String)).nil;
		this.CgoCPPFLAGS = CgoCPPFLAGS_ !== undefined ? CgoCPPFLAGS_ : (go$sliceType(Go$String)).nil;
		this.CgoCXXFLAGS = CgoCXXFLAGS_ !== undefined ? CgoCXXFLAGS_ : (go$sliceType(Go$String)).nil;
		this.CgoLDFLAGS = CgoLDFLAGS_ !== undefined ? CgoLDFLAGS_ : (go$sliceType(Go$String)).nil;
		this.CgoPkgConfig = CgoPkgConfig_ !== undefined ? CgoPkgConfig_ : (go$sliceType(Go$String)).nil;
		this.Imports = Imports_ !== undefined ? Imports_ : (go$sliceType(Go$String)).nil;
		this.ImportPos = ImportPos_ !== undefined ? ImportPos_ : false;
		this.TestGoFiles = TestGoFiles_ !== undefined ? TestGoFiles_ : (go$sliceType(Go$String)).nil;
		this.TestImports = TestImports_ !== undefined ? TestImports_ : (go$sliceType(Go$String)).nil;
		this.TestImportPos = TestImportPos_ !== undefined ? TestImportPos_ : false;
		this.XTestGoFiles = XTestGoFiles_ !== undefined ? XTestGoFiles_ : (go$sliceType(Go$String)).nil;
		this.XTestImports = XTestImports_ !== undefined ? XTestImports_ : (go$sliceType(Go$String)).nil;
		this.XTestImportPos = XTestImportPos_ !== undefined ? XTestImportPos_ : false;
	});
	NoGoError = go$pkg.NoGoError = go$newType(0, "Struct", "build.NoGoError", "NoGoError", "go/build", function(Dir_) {
		this.go$val = this;
		this.Dir = Dir_ !== undefined ? Dir_ : "";
	});
	importReader = go$pkg.importReader = go$newType(0, "Struct", "build.importReader", "importReader", "go/build", function(b_, buf_, peek_, err_, eof_, nerr_) {
		this.go$val = this;
		this.b = b_ !== undefined ? b_ : (go$ptrType(bufio.Reader)).nil;
		this.buf = buf_ !== undefined ? buf_ : (go$sliceType(Go$Uint8)).nil;
		this.peek = peek_ !== undefined ? peek_ : 0;
		this.err = err_ !== undefined ? err_ : null;
		this.eof = eof_ !== undefined ? eof_ : false;
		this.nerr = nerr_ !== undefined ? nerr_ : 0;
	});
	Context.Ptr.prototype.joinPath = function(elem) {
		var ctxt, f;
		ctxt = this;
		if (f = ctxt.JoinPath, !(f === go$throwNilPointerError)) {
			return f(elem);
		}
		return filepath.Join(elem);
	};
	Context.prototype.joinPath = function(elem) { return this.go$val.joinPath(elem); };
	Context.Ptr.prototype.splitPathList = function(s) {
		var ctxt, f;
		ctxt = this;
		if (f = ctxt.SplitPathList, !(f === go$throwNilPointerError)) {
			return f(s);
		}
		return filepath.SplitList(s);
	};
	Context.prototype.splitPathList = function(s) { return this.go$val.splitPathList(s); };
	Context.Ptr.prototype.isAbsPath = function(path$1) {
		var ctxt, f;
		ctxt = this;
		if (f = ctxt.IsAbsPath, !(f === go$throwNilPointerError)) {
			return f(path$1);
		}
		return filepath.IsAbs(path$1);
	};
	Context.prototype.isAbsPath = function(path$1) { return this.go$val.isAbsPath(path$1); };
	Context.Ptr.prototype.isDir = function(path$1) {
		var ctxt, f, _tuple, fi, err;
		ctxt = this;
		if (f = ctxt.IsDir, !(f === go$throwNilPointerError)) {
			return f(path$1);
		}
		_tuple = os.Stat(path$1), fi = _tuple[0], err = _tuple[1];
		return go$interfaceIsEqual(err, null) && fi.IsDir();
	};
	Context.prototype.isDir = function(path$1) { return this.go$val.isDir(path$1); };
	Context.Ptr.prototype.hasSubdir = function(root, dir) {
		var rel, ok, ctxt, f, _tuple, _tuple$1, _tuple$2, rootSym, _tuple$3, dirSym, _tuple$4, _tuple$5, _tuple$6;
		rel = "";
		ok = false;
		ctxt = this;
		if (f = ctxt.HasSubdir, !(f === go$throwNilPointerError)) {
			_tuple = f(root, dir), rel = _tuple[0], ok = _tuple[1];
			return [rel, ok];
		}
		if (_tuple$1 = hasSubdir(root, dir), rel = _tuple$1[0], ok = _tuple$1[1], ok) {
			return [rel, ok];
		}
		_tuple$2 = filepath.EvalSymlinks(root), rootSym = _tuple$2[0];
		_tuple$3 = filepath.EvalSymlinks(dir), dirSym = _tuple$3[0];
		if (_tuple$4 = hasSubdir(rootSym, dir), rel = _tuple$4[0], ok = _tuple$4[1], ok) {
			return [rel, ok];
		}
		if (_tuple$5 = hasSubdir(root, dirSym), rel = _tuple$5[0], ok = _tuple$5[1], ok) {
			return [rel, ok];
		}
		_tuple$6 = hasSubdir(rootSym, dirSym), rel = _tuple$6[0], ok = _tuple$6[1];
		return [rel, ok];
	};
	Context.prototype.hasSubdir = function(root, dir) { return this.go$val.hasSubdir(root, dir); };
	hasSubdir = function(root, dir) {
		var rel, ok, _tuple, _tuple$1;
		rel = "";
		ok = false;
		root = filepath.Clean(root);
		if (!strings.HasSuffix(root, "/")) {
			root = root + "/";
		}
		dir = filepath.Clean(dir);
		if (!strings.HasPrefix(dir, root)) {
			_tuple = ["", false], rel = _tuple[0], ok = _tuple[1];
			return [rel, ok];
		}
		_tuple$1 = [filepath.ToSlash(dir.substring(root.length)), true], rel = _tuple$1[0], ok = _tuple$1[1];
		return [rel, ok];
	};
	Context.Ptr.prototype.readDir = function(path$1) {
		var ctxt, f;
		ctxt = this;
		if (f = ctxt.ReadDir, !(f === go$throwNilPointerError)) {
			return f(path$1);
		}
		return ioutil.ReadDir(path$1);
	};
	Context.prototype.readDir = function(path$1) { return this.go$val.readDir(path$1); };
	Context.Ptr.prototype.openFile = function(path$1) {
		var ctxt, fn, _tuple, f, err;
		ctxt = this;
		if (fn = ctxt.OpenFile, !(fn === go$throwNilPointerError)) {
			return fn(path$1);
		}
		_tuple = os.Open(path$1), f = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [null, err];
		}
		return [f, null];
	};
	Context.prototype.openFile = function(path$1) { return this.go$val.openFile(path$1); };
	Context.Ptr.prototype.isFile = function(path$1) {
		var ctxt, _tuple, f, err;
		ctxt = this;
		_tuple = ctxt.openFile(path$1), f = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return false;
		}
		f.Close();
		return true;
	};
	Context.prototype.isFile = function(path$1) { return this.go$val.isFile(path$1); };
	Context.Ptr.prototype.gopath = function() {
		var ctxt, all, _ref, _i, _slice, _index, p;
		ctxt = this;
		all = (go$sliceType(Go$String)).nil;
		_ref = ctxt.splitPathList(ctxt.GOPATH);
		_i = 0;
		while (_i < _ref.length) {
			p = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (p === "" || p === ctxt.GOROOT) {
				_i++;
				continue;
			}
			if (strings.HasPrefix(p, "~")) {
				_i++;
				continue;
			}
			all = go$append(all, p);
			_i++;
		}
		return all;
	};
	Context.prototype.gopath = function() { return this.go$val.gopath(); };
	Context.Ptr.prototype.SrcDirs = function() {
		var ctxt, all, dir, _ref, _i, _slice, _index, p, dir$1;
		ctxt = this;
		all = (go$sliceType(Go$String)).nil;
		if (!(ctxt.GOROOT === "")) {
			dir = ctxt.joinPath(new (go$sliceType(Go$String))([ctxt.GOROOT, "src", "pkg"]));
			if (ctxt.isDir(dir)) {
				all = go$append(all, dir);
			}
		}
		_ref = ctxt.gopath();
		_i = 0;
		while (_i < _ref.length) {
			p = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			dir$1 = ctxt.joinPath(new (go$sliceType(Go$String))([p, "src"]));
			if (ctxt.isDir(dir$1)) {
				all = go$append(all, dir$1);
			}
			_i++;
		}
		return all;
	};
	Context.prototype.SrcDirs = function() { return this.go$val.SrcDirs(); };
	defaultContext = function() {
		var c, _ref, _entry, _struct;
		c = new Context.Ptr();
		c.GOARCH = envOr("GOARCH", "js");
		c.GOOS = envOr("GOOS", "darwin");
		c.GOROOT = runtime.GOROOT();
		c.GOPATH = envOr("GOPATH", "");
		c.Compiler = "gc";
		c.ReleaseTags = new (go$sliceType(Go$String))(["go1.1", "go1.2"]);
		_ref = os.Getenv("CGO_ENABLED");
		switch (0) { default: if (_ref === "1") {
			c.CgoEnabled = true;
		} else if (_ref === "0") {
			c.CgoEnabled = false;
		} else {
			if ("js" === c.GOARCH && "darwin" === c.GOOS) {
				c.CgoEnabled = (_entry = cgoEnabled[c.GOOS + "/" + c.GOARCH], _entry !== undefined ? _entry.v : false);
				break;
			}
			c.CgoEnabled = false;
		} }
		return (_struct = c, new Context.Ptr(_struct.GOARCH, _struct.GOOS, _struct.GOROOT, _struct.GOPATH, _struct.CgoEnabled, _struct.UseAllFiles, _struct.Compiler, _struct.BuildTags, _struct.ReleaseTags, _struct.InstallSuffix, _struct.JoinPath, _struct.SplitPathList, _struct.IsAbsPath, _struct.IsDir, _struct.HasSubdir, _struct.ReadDir, _struct.OpenFile));
	};
	envOr = function(name, def) {
		var s;
		s = os.Getenv(name);
		if (s === "") {
			return def;
		}
		return s;
	};
	Package.Ptr.prototype.IsCommand = function() {
		var p;
		p = this;
		return p.Name === "main";
	};
	Package.prototype.IsCommand = function() { return this.go$val.IsCommand(); };
	Context.Ptr.prototype.ImportDir = function(dir, mode) {
		var ctxt;
		ctxt = this;
		return ctxt.Import(".", dir, mode);
	};
	Context.prototype.ImportDir = function(dir, mode) { return this.go$val.ImportDir(dir, mode); };
	NoGoError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "no buildable Go source files in " + e.Dir;
	};
	NoGoError.prototype.Error = function() { return this.go$val.Error(); };
	nameExt = function(name) {
		var i;
		i = strings.LastIndex(name, ".");
		if (i < 0) {
			return "";
		}
		return name.substring(i);
	};
	Context.Ptr.prototype.Import = function(path$1, srcDir, mode) {
		var go$this = this, ctxt, p, pkga, pkgerr, _ref, _tuple, dir, elem, suffix, binaryOnly, root, ok, _tuple$1, sub, all, _ref$1, _i, _slice, _index, root$1, i, rootsrc, ok$1, _tuple$2, sub$1, dir$1, _ref$2, _i$1, _slice$1, _index$1, earlyRoot, dir$2, tried, dir$3, isDir, _ref$3, _i$2, _slice$2, _index$2, root$2, dir$4, isDir$1, paths, i$1, format, _slice$3, _index$3, _tuple$3, dirs, err, Sfiles, firstFile, imported, testImported, xTestImported, allTags, fset, _ref$4, _i$3, _slice$4, _index$4, d, name, ext, _tuple$4, match, data, filename, err$1, _ref$5, _tuple$5, pf, pkg, isTest, isXTest, isCgo, _ref$6, _i$4, _slice$5, _index$5, decl, _tuple$6, d$1, ok$2, _ref$7, _i$5, _slice$6, _index$6, dspec, _tuple$7, spec, ok$3, quoted, _tuple$8, path$2, err$2, _entry, _struct, _key, _entry$1, _struct$1, _key$1, _entry$2, _struct$2, _key$2, cg, err$3, _key$3, _ref$8, _i$6, _keys, _entry$3, tag, _tuple$9, _tuple$10, _tuple$11;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		ctxt = go$this;
		p = new Package.Ptr("", "", "", path$1, "", "", "", "", false, "", (go$sliceType(Go$String)).nil, "", (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, false, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, false, (go$sliceType(Go$String)).nil, (go$sliceType(Go$String)).nil, false);
		if (path$1 === "") {
			return [p, fmt.Errorf("import %q: invalid import path", new (go$sliceType(go$emptyInterface))([new Go$String(path$1)]))];
		}
		pkga = "";
		pkgerr = null;
		_ref = ctxt.Compiler;
		if (_ref === "gccgo") {
			_tuple = path.Split(p.ImportPath), dir = _tuple[0], elem = _tuple[1];
			pkga = "pkg/gccgo_" + ctxt.GOOS + "_" + ctxt.GOARCH + "/" + dir + "lib" + elem + ".a";
		} else if (_ref === "gc") {
			suffix = "";
			if (!(ctxt.InstallSuffix === "")) {
				suffix = "_" + ctxt.InstallSuffix;
			}
			pkga = "pkg/" + ctxt.GOOS + "_" + ctxt.GOARCH + suffix + "/" + p.ImportPath + ".a";
		} else {
			pkgerr = fmt.Errorf("import %q: unknown compiler %q", new (go$sliceType(go$emptyInterface))([new Go$String(path$1), new Go$String(ctxt.Compiler)]));
		}
		binaryOnly = false;
		/* if (IsLocalImport(path$1)) { */ if (IsLocalImport(path$1)) {} else { go$s = 2; continue; }
			pkga = "";
			if (srcDir === "") {
				return [p, fmt.Errorf("import %q: import relative to unknown directory", new (go$sliceType(go$emptyInterface))([new Go$String(path$1)]))];
			}
			if (!ctxt.isAbsPath(path$1)) {
				p.Dir = ctxt.joinPath(new (go$sliceType(Go$String))([srcDir, path$1]));
			}
			/* if (!(ctxt.GOROOT === "")) { */ if (!(ctxt.GOROOT === "")) {} else { go$s = 4; continue; }
				root = ctxt.joinPath(new (go$sliceType(Go$String))([ctxt.GOROOT, "src", "pkg"]));
				/* if (_tuple$1 = ctxt.hasSubdir(root, p.Dir), sub = _tuple$1[0], ok = _tuple$1[1], ok) { */ if (_tuple$1 = ctxt.hasSubdir(root, p.Dir), sub = _tuple$1[0], ok = _tuple$1[1], ok) {} else { go$s = 5; continue; }
					p.Goroot = true;
					p.ImportPath = sub;
					p.Root = ctxt.GOROOT;
					/* goto Found */ go$s = 1; continue;
				/* } */ case 5:
			/* } */ case 4:
			all = ctxt.gopath();
			_ref$1 = all;
			_i = 0;
			/* while (_i < _ref$1.length) { */ case 6: if(!(_i < _ref$1.length)) { go$s = 7; continue; }
				root$1 = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				rootsrc = ctxt.joinPath(new (go$sliceType(Go$String))([root$1, "src"]));
				/* if (_tuple$2 = ctxt.hasSubdir(rootsrc, p.Dir), sub$1 = _tuple$2[0], ok$1 = _tuple$2[1], ok$1) { */ if (_tuple$2 = ctxt.hasSubdir(rootsrc, p.Dir), sub$1 = _tuple$2[0], ok$1 = _tuple$2[1], ok$1) {} else { go$s = 8; continue; }
					/* if (!(ctxt.GOROOT === "")) { */ if (!(ctxt.GOROOT === "")) {} else { go$s = 9; continue; }
						/* if (dir$1 = ctxt.joinPath(new (go$sliceType(Go$String))([ctxt.GOROOT, "src", "pkg", sub$1])), ctxt.isDir(dir$1)) { */ if (dir$1 = ctxt.joinPath(new (go$sliceType(Go$String))([ctxt.GOROOT, "src", "pkg", sub$1])), ctxt.isDir(dir$1)) {} else { go$s = 10; continue; }
							p.ConflictDir = dir$1;
							/* goto Found */ go$s = 1; continue;
						/* } */ case 10:
					/* } */ case 9:
					_ref$2 = go$subslice(all, 0, i);
					_i$1 = 0;
					/* while (_i$1 < _ref$2.length) { */ case 11: if(!(_i$1 < _ref$2.length)) { go$s = 12; continue; }
						earlyRoot = (_slice$1 = _ref$2, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
						/* if (dir$2 = ctxt.joinPath(new (go$sliceType(Go$String))([earlyRoot, "src", sub$1])), ctxt.isDir(dir$2)) { */ if (dir$2 = ctxt.joinPath(new (go$sliceType(Go$String))([earlyRoot, "src", sub$1])), ctxt.isDir(dir$2)) {} else { go$s = 13; continue; }
							p.ConflictDir = dir$2;
							/* goto Found */ go$s = 1; continue;
						/* } */ case 13:
						_i$1++;
					/* } */ go$s = 11; continue; case 12:
					p.ImportPath = sub$1;
					p.Root = root$1;
					/* goto Found */ go$s = 1; continue;
				/* } */ case 8:
				_i++;
			/* } */ go$s = 6; continue; case 7:
		/* } else { */ go$s = 3; continue; case 2: 
			if (strings.HasPrefix(path$1, "/")) {
				return [p, fmt.Errorf("import %q: cannot import absolute path", new (go$sliceType(go$emptyInterface))([new Go$String(path$1)]))];
			}
			tried = new (go$structType([["goroot", "go/build", Go$String, ""], ["gopath", "go/build", (go$sliceType(Go$String)), ""]])).Ptr("", (go$sliceType(Go$String)).nil);
			/* if (!(ctxt.GOROOT === "")) { */ if (!(ctxt.GOROOT === "")) {} else { go$s = 14; continue; }
				dir$3 = ctxt.joinPath(new (go$sliceType(Go$String))([ctxt.GOROOT, "src", "pkg", path$1]));
				isDir = ctxt.isDir(dir$3);
				binaryOnly = !isDir && !((((mode & 2) >>> 0) === 0)) && !(pkga === "") && ctxt.isFile(ctxt.joinPath(new (go$sliceType(Go$String))([ctxt.GOROOT, pkga])));
				/* if (isDir || binaryOnly) { */ if (isDir || binaryOnly) {} else { go$s = 15; continue; }
					p.Dir = dir$3;
					p.Goroot = true;
					p.Root = ctxt.GOROOT;
					/* goto Found */ go$s = 1; continue;
				/* } */ case 15:
				tried.goroot = dir$3;
			/* } */ case 14:
			_ref$3 = ctxt.gopath();
			_i$2 = 0;
			/* while (_i$2 < _ref$3.length) { */ case 16: if(!(_i$2 < _ref$3.length)) { go$s = 17; continue; }
				root$2 = (_slice$2 = _ref$3, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				dir$4 = ctxt.joinPath(new (go$sliceType(Go$String))([root$2, "src", path$1]));
				isDir$1 = ctxt.isDir(dir$4);
				binaryOnly = !isDir$1 && !((((mode & 2) >>> 0) === 0)) && !(pkga === "") && ctxt.isFile(ctxt.joinPath(new (go$sliceType(Go$String))([root$2, pkga])));
				/* if (isDir$1 || binaryOnly) { */ if (isDir$1 || binaryOnly) {} else { go$s = 18; continue; }
					p.Dir = dir$4;
					p.Root = root$2;
					/* goto Found */ go$s = 1; continue;
				/* } */ case 18:
				tried.gopath = go$append(tried.gopath, dir$4);
				_i$2++;
			/* } */ go$s = 16; continue; case 17:
			paths = (go$sliceType(Go$String)).nil;
			if (!(tried.goroot === "")) {
				paths = go$append(paths, fmt.Sprintf("\t%s (from $GOROOT)", new (go$sliceType(go$emptyInterface))([new Go$String(tried.goroot)])));
			} else {
				paths = go$append(paths, "\t($GOROOT not set)");
			}
			i$1 = 0;
			format = "\t%s (from $GOPATH)";
			while (i$1 < tried.gopath.length) {
				if (i$1 > 0) {
					format = "\t%s";
				}
				paths = go$append(paths, fmt.Sprintf(format, new (go$sliceType(go$emptyInterface))([new Go$String((_slice$3 = tried.gopath, _index$3 = i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")))])));
				i$1 = i$1 + 1 >> 0;
			}
			if (i$1 === 0) {
				paths = go$append(paths, "\t($GOPATH not set)");
			}
			return [p, fmt.Errorf("cannot find package %q in any of:\n%s", new (go$sliceType(go$emptyInterface))([new Go$String(path$1), new Go$String(strings.Join(paths, "\n"))]))];
		/* } */ case 3:
		/* Found: */ case 1:
		/* if (!(p.Root === "")) { */ if (!(p.Root === "")) {} else { go$s = 19; continue; }
			if (p.Goroot) {
				p.SrcRoot = ctxt.joinPath(new (go$sliceType(Go$String))([p.Root, "src", "pkg"]));
			} else {
				p.SrcRoot = ctxt.joinPath(new (go$sliceType(Go$String))([p.Root, "src"]));
			}
			p.PkgRoot = ctxt.joinPath(new (go$sliceType(Go$String))([p.Root, "pkg"]));
			p.BinDir = ctxt.joinPath(new (go$sliceType(Go$String))([p.Root, "bin"]));
			if (!(pkga === "")) {
				p.PkgObj = ctxt.joinPath(new (go$sliceType(Go$String))([p.Root, pkga]));
			}
		/* } */ case 19:
		if (!((((mode & 1) >>> 0) === 0))) {
			return [p, pkgerr];
		}
		if (binaryOnly && !(((((mode & 2) >>> 0)) === 0))) {
			return [p, pkgerr];
		}
		_tuple$3 = ctxt.readDir(p.Dir), dirs = _tuple$3[0], err = _tuple$3[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [p, err];
		}
		Sfiles = (go$sliceType(Go$String)).nil;
		firstFile = "";
		imported = new Go$Map();
		testImported = new Go$Map();
		xTestImported = new Go$Map();
		allTags = new Go$Map();
		fset = token.NewFileSet();
		_ref$4 = dirs;
		_i$3 = 0;
		while (_i$3 < _ref$4.length) {
			d = (_slice$4 = _ref$4, _index$4 = _i$3, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
			if (d.IsDir()) {
				_i$3++;
				continue;
			}
			name = d.Name();
			ext = nameExt(name);
			_tuple$4 = ctxt.matchFile(p.Dir, name, true, allTags), match = _tuple$4[0], data = _tuple$4[1], filename = _tuple$4[2], err$1 = _tuple$4[3];
			if (!(go$interfaceIsEqual(err$1, null))) {
				return [p, err$1];
			}
			if (!match) {
				if (ext === ".go") {
					p.IgnoredGoFiles = go$append(p.IgnoredGoFiles, name);
				}
				_i$3++;
				continue;
			}
			_ref$5 = ext;
			if (_ref$5 === ".c") {
				p.CFiles = go$append(p.CFiles, name);
				_i$3++;
				continue;
			} else if (_ref$5 === ".cc" || _ref$5 === ".cpp" || _ref$5 === ".cxx") {
				p.CXXFiles = go$append(p.CXXFiles, name);
				_i$3++;
				continue;
			} else if (_ref$5 === ".h" || _ref$5 === ".hh" || _ref$5 === ".hpp" || _ref$5 === ".hxx") {
				p.HFiles = go$append(p.HFiles, name);
				_i$3++;
				continue;
			} else if (_ref$5 === ".s") {
				p.SFiles = go$append(p.SFiles, name);
				_i$3++;
				continue;
			} else if (_ref$5 === ".S") {
				Sfiles = go$append(Sfiles, name);
				_i$3++;
				continue;
			} else if (_ref$5 === ".swig") {
				p.SwigFiles = go$append(p.SwigFiles, name);
				_i$3++;
				continue;
			} else if (_ref$5 === ".swigcxx") {
				p.SwigCXXFiles = go$append(p.SwigCXXFiles, name);
				_i$3++;
				continue;
			} else if (_ref$5 === ".syso") {
				p.SysoFiles = go$append(p.SysoFiles, name);
				_i$3++;
				continue;
			}
			_tuple$5 = parser.ParseFile(fset, filename, data, 6), pf = _tuple$5[0], err$1 = _tuple$5[1];
			if (!(go$interfaceIsEqual(err$1, null))) {
				return [p, err$1];
			}
			pkg = pf.Name.Name;
			if (pkg === "documentation") {
				p.IgnoredGoFiles = go$append(p.IgnoredGoFiles, name);
				_i$3++;
				continue;
			}
			isTest = strings.HasSuffix(name, "_test.go");
			isXTest = false;
			if (isTest && strings.HasSuffix(pkg, "_test")) {
				isXTest = true;
				pkg = pkg.substring(0, (pkg.length - 5 >> 0));
			}
			if (p.Name === "") {
				p.Name = pkg;
				firstFile = name;
			} else if (!(pkg === p.Name)) {
				return [p, fmt.Errorf("found packages %s (%s) and %s (%s) in %s", new (go$sliceType(go$emptyInterface))([new Go$String(p.Name), new Go$String(firstFile), new Go$String(pkg), new Go$String(name), new Go$String(p.Dir)]))];
			}
			if (!(pf.Doc === (go$ptrType(ast.CommentGroup)).nil) && p.Doc === "") {
				p.Doc = doc.Synopsis(pf.Doc.Text());
			}
			isCgo = false;
			_ref$6 = pf.Decls;
			_i$4 = 0;
			while (_i$4 < _ref$6.length) {
				decl = (_slice$5 = _ref$6, _index$5 = _i$4, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
				_tuple$6 = (decl !== null && decl.constructor === (go$ptrType(ast.GenDecl)) ? [decl.go$val, true] : [(go$ptrType(ast.GenDecl)).nil, false]), d$1 = _tuple$6[0], ok$2 = _tuple$6[1];
				if (!ok$2) {
					_i$4++;
					continue;
				}
				_ref$7 = d$1.Specs;
				_i$5 = 0;
				while (_i$5 < _ref$7.length) {
					dspec = (_slice$6 = _ref$7, _index$6 = _i$5, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
					_tuple$7 = (dspec !== null && dspec.constructor === (go$ptrType(ast.ImportSpec)) ? [dspec.go$val, true] : [(go$ptrType(ast.ImportSpec)).nil, false]), spec = _tuple$7[0], ok$3 = _tuple$7[1];
					if (!ok$3) {
						_i$5++;
						continue;
					}
					quoted = spec.Path.Value;
					_tuple$8 = strconv.Unquote(quoted), path$2 = _tuple$8[0], err$2 = _tuple$8[1];
					if (!(go$interfaceIsEqual(err$2, null))) {
						log.Panicf("%s: parser returned invalid quoted string: <%s>", new (go$sliceType(go$emptyInterface))([new Go$String(filename), new Go$String(quoted)]));
					}
					if (isXTest) {
						_key = path$2, (xTestImported || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: go$append((_entry = xTestImported[path$2], _entry !== undefined ? _entry.v : (go$sliceType(token.Position)).nil), (_struct = fset.Position(spec.Pos()), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column))) };
					} else if (isTest) {
						_key$1 = path$2, (testImported || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: go$append((_entry$1 = testImported[path$2], _entry$1 !== undefined ? _entry$1.v : (go$sliceType(token.Position)).nil), (_struct$1 = fset.Position(spec.Pos()), new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column))) };
					} else {
						_key$2 = path$2, (imported || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: go$append((_entry$2 = imported[path$2], _entry$2 !== undefined ? _entry$2.v : (go$sliceType(token.Position)).nil), (_struct$2 = fset.Position(spec.Pos()), new token.Position.Ptr(_struct$2.Filename, _struct$2.Offset, _struct$2.Line, _struct$2.Column))) };
					}
					if (path$2 === "C") {
						if (isTest) {
							return [p, fmt.Errorf("use of cgo in test %s not supported", new (go$sliceType(go$emptyInterface))([new Go$String(filename)]))];
						}
						cg = spec.Doc;
						if (cg === (go$ptrType(ast.CommentGroup)).nil && (d$1.Specs.length === 1)) {
							cg = d$1.Doc;
						}
						if (!(cg === (go$ptrType(ast.CommentGroup)).nil)) {
							if (err$3 = ctxt.saveCgo(filename, p, cg), !(go$interfaceIsEqual(err$3, null))) {
								return [p, err$3];
							}
						}
						isCgo = true;
					}
					_i$5++;
				}
				_i$4++;
			}
			if (isCgo) {
				_key$3 = "cgo", (allTags || go$throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: true };
				if (ctxt.CgoEnabled) {
					p.CgoFiles = go$append(p.CgoFiles, name);
				} else {
					p.IgnoredGoFiles = go$append(p.IgnoredGoFiles, name);
				}
			} else if (isXTest) {
				p.XTestGoFiles = go$append(p.XTestGoFiles, name);
			} else if (isTest) {
				p.TestGoFiles = go$append(p.TestGoFiles, name);
			} else {
				p.GoFiles = go$append(p.GoFiles, name);
			}
			_i$3++;
		}
		if ((((p.GoFiles.length + p.CgoFiles.length >> 0) + p.TestGoFiles.length >> 0) + p.XTestGoFiles.length >> 0) === 0) {
			return [p, new NoGoError.Ptr(p.Dir)];
		}
		_ref$8 = allTags;
		_i$6 = 0;
		_keys = go$keys(_ref$8);
		while (_i$6 < _keys.length) {
			_entry$3 = _ref$8[_keys[_i$6]];
			tag = _entry$3.k;
			p.AllTags = go$append(p.AllTags, tag);
			_i$6++;
		}
		sort.Strings(p.AllTags);
		_tuple$9 = cleanImports(imported), p.Imports = _tuple$9[0], p.ImportPos = _tuple$9[1];
		_tuple$10 = cleanImports(testImported), p.TestImports = _tuple$10[0], p.TestImportPos = _tuple$10[1];
		_tuple$11 = cleanImports(xTestImported), p.XTestImports = _tuple$11[0], p.XTestImportPos = _tuple$11[1];
		if (p.CgoFiles.length > 0) {
			p.SFiles = go$appendSlice(p.SFiles, Sfiles);
			sort.Strings(p.SFiles);
		}
		return [p, pkgerr];
		/* */ } break; } }; return go$f();
	};
	Context.prototype.Import = function(path$1, srcDir, mode) { return this.go$val.Import(path$1, srcDir, mode); };
	Context.Ptr.prototype.MatchFile = function(dir, name) {
		var match, err, ctxt, _tuple;
		match = false;
		err = null;
		ctxt = this;
		_tuple = ctxt.matchFile(dir, name, false, false), match = _tuple[0], err = _tuple[3];
		return [match, err];
	};
	Context.prototype.MatchFile = function(dir, name) { return this.go$val.MatchFile(dir, name); };
	Context.Ptr.prototype.matchFile = function(dir, name, returnImports, allTags) {
		var match, data, filename, err, ctxt, i, ext, _ref, _tuple, f, _tuple$1, _tuple$2;
		match = false;
		data = (go$sliceType(Go$Uint8)).nil;
		filename = "";
		err = null;
		ctxt = this;
		if (strings.HasPrefix(name, "_") || strings.HasPrefix(name, ".")) {
			return [match, data, filename, err];
		}
		i = strings.LastIndex(name, ".");
		if (i < 0) {
			i = name.length;
		}
		ext = name.substring(i);
		if (!ctxt.goodOSArchFile(name, allTags) && !ctxt.UseAllFiles) {
			return [match, data, filename, err];
		}
		_ref = ext;
		if (_ref === ".go" || _ref === ".c" || _ref === ".cc" || _ref === ".cxx" || _ref === ".cpp" || _ref === ".s" || _ref === ".h" || _ref === ".hh" || _ref === ".hpp" || _ref === ".hxx" || _ref === ".S" || _ref === ".swig" || _ref === ".swigcxx") {
		} else if (_ref === ".syso") {
			match = true;
			return [match, data, filename, err];
		} else {
			return [match, data, filename, err];
		}
		filename = ctxt.joinPath(new (go$sliceType(Go$String))([dir, name]));
		_tuple = ctxt.openFile(filename), f = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [match, data, filename, err];
		}
		if (strings.HasSuffix(filename, ".go")) {
			_tuple$1 = readImports(f, false), data = _tuple$1[0], err = _tuple$1[1];
		} else {
			_tuple$2 = readComments(f), data = _tuple$2[0], err = _tuple$2[1];
		}
		f.Close();
		if (!(go$interfaceIsEqual(err, null))) {
			err = fmt.Errorf("read %s: %v", new (go$sliceType(go$emptyInterface))([new Go$String(filename), err]));
			return [match, data, filename, err];
		}
		if (!ctxt.shouldBuild(data, allTags) && !ctxt.UseAllFiles) {
			return [match, data, filename, err];
		}
		match = true;
		return [match, data, filename, err];
	};
	Context.prototype.matchFile = function(dir, name, returnImports, allTags) { return this.go$val.matchFile(dir, name, returnImports, allTags); };
	cleanImports = function(m) {
		var all, _ref, _i, _keys, _entry, path$1;
		all = (go$sliceType(Go$String)).make(0, go$keys(m).length, function() { return ""; });
		_ref = m;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			path$1 = _entry.k;
			all = go$append(all, path$1);
			_i++;
		}
		sort.Strings(all);
		return [all, m];
	};
	Import = go$pkg.Import = function(path$1, srcDir, mode) {
		return go$pkg.Default.Import(path$1, srcDir, mode);
	};
	Context.Ptr.prototype.shouldBuild = function(content, allTags) {
		var ctxt, end, p, line, i, _tuple, allok, line$1, i$1, _tuple$1, _slice, _index, f, _slice$1, _index$1, ok, _ref, _i, _slice$2, _index$2, tok;
		ctxt = this;
		end = 0;
		p = content;
		while (p.length > 0) {
			line = p;
			if (i = bytes.IndexByte(line, 10), i >= 0) {
				_tuple = [go$subslice(line, 0, i), go$subslice(p, (i + 1 >> 0))], line = _tuple[0], p = _tuple[1];
			} else {
				p = go$subslice(p, p.length);
			}
			line = bytes.TrimSpace(line);
			if (line.length === 0) {
				end = content.length - p.length >> 0;
				continue;
			}
			if (!bytes.HasPrefix(line, slashslash)) {
				break;
			}
		}
		content = go$subslice(content, 0, end);
		p = content;
		allok = true;
		while (p.length > 0) {
			line$1 = p;
			if (i$1 = bytes.IndexByte(line$1, 10), i$1 >= 0) {
				_tuple$1 = [go$subslice(line$1, 0, i$1), go$subslice(p, (i$1 + 1 >> 0))], line$1 = _tuple$1[0], p = _tuple$1[1];
			} else {
				p = go$subslice(p, p.length);
			}
			line$1 = bytes.TrimSpace(line$1);
			if (bytes.HasPrefix(line$1, slashslash)) {
				line$1 = bytes.TrimSpace(go$subslice(line$1, slashslash.length));
				if (line$1.length > 0 && ((_slice = line$1, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 43)) {
					f = strings.Fields(go$bytesToString(line$1));
					if ((_slice$1 = f, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === "+build") {
						ok = false;
						_ref = go$subslice(f, 1);
						_i = 0;
						while (_i < _ref.length) {
							tok = (_slice$2 = _ref, _index$2 = _i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
							if (ctxt.match(tok, allTags)) {
								ok = true;
							}
							_i++;
						}
						if (!ok) {
							allok = false;
						}
					}
				}
			}
		}
		return allok;
	};
	Context.prototype.shouldBuild = function(content, allTags) { return this.go$val.shouldBuild(content, allTags); };
	Context.Ptr.prototype.saveCgo = function(filename, di, cg) {
		var ctxt, text, _ref, _i, _slice, _index, line, orig, i, _tuple, line$1, argstr, f, _slice$1, _index$1, _tuple$1, cond, verb, ok, _ref$1, _i$1, _slice$2, _index$2, c, _tuple$2, args, err, _ref$2, _i$2, _slice$3, _index$3, arg, _ref$3;
		ctxt = this;
		text = cg.Text();
		_ref = strings.Split(text, "\n");
		_i = 0;
		while (_i < _ref.length) {
			line = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			orig = line;
			line = strings.TrimSpace(line);
			if (line.length < 5 || !(line.substring(0, 4) === "#cgo") || (!((line.charCodeAt(4) === 32)) && !((line.charCodeAt(4) === 9)))) {
				_i++;
				continue;
			}
			line = strings.TrimSpace(line.substring(4));
			i = strings.Index(line, ":");
			if (i < 0) {
				return fmt.Errorf("%s: invalid #cgo line: %s", new (go$sliceType(go$emptyInterface))([new Go$String(filename), new Go$String(orig)]));
			}
			_tuple = [line.substring(0, i), line.substring((i + 1 >> 0))], line$1 = _tuple[0], argstr = _tuple[1];
			f = strings.Fields(line$1);
			if (f.length < 1) {
				return fmt.Errorf("%s: invalid #cgo line: %s", new (go$sliceType(go$emptyInterface))([new Go$String(filename), new Go$String(orig)]));
			}
			_tuple$1 = [go$subslice(f, 0, (f.length - 1 >> 0)), (_slice$1 = f, _index$1 = (f.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], cond = _tuple$1[0], verb = _tuple$1[1];
			if (cond.length > 0) {
				ok = false;
				_ref$1 = cond;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					c = (_slice$2 = _ref$1, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
					if (ctxt.match(c, false)) {
						ok = true;
						break;
					}
					_i$1++;
				}
				if (!ok) {
					_i++;
					continue;
				}
			}
			_tuple$2 = splitQuoted(argstr), args = _tuple$2[0], err = _tuple$2[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return fmt.Errorf("%s: invalid #cgo line: %s", new (go$sliceType(go$emptyInterface))([new Go$String(filename), new Go$String(orig)]));
			}
			_ref$2 = args;
			_i$2 = 0;
			while (_i$2 < _ref$2.length) {
				arg = (_slice$3 = _ref$2, _index$3 = _i$2, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
				if (!safeCgoName(arg)) {
					return fmt.Errorf("%s: malformed #cgo argument: %s", new (go$sliceType(go$emptyInterface))([new Go$String(filename), new Go$String(arg)]));
				}
				_i$2++;
			}
			_ref$3 = verb;
			if (_ref$3 === "CFLAGS") {
				di.CgoCFLAGS = go$appendSlice(di.CgoCFLAGS, args);
			} else if (_ref$3 === "CPPFLAGS") {
				di.CgoCPPFLAGS = go$appendSlice(di.CgoCPPFLAGS, args);
			} else if (_ref$3 === "CXXFLAGS") {
				di.CgoCXXFLAGS = go$appendSlice(di.CgoCXXFLAGS, args);
			} else if (_ref$3 === "LDFLAGS") {
				di.CgoLDFLAGS = go$appendSlice(di.CgoLDFLAGS, args);
			} else if (_ref$3 === "pkg-config") {
				di.CgoPkgConfig = go$appendSlice(di.CgoPkgConfig, args);
			} else {
				return fmt.Errorf("%s: invalid #cgo verb: %s", new (go$sliceType(go$emptyInterface))([new Go$String(filename), new Go$String(orig)]));
			}
			_i++;
		}
		return null;
	};
	Context.prototype.saveCgo = function(filename, di, cg) { return this.go$val.saveCgo(filename, di, cg); };
	safeCgoName = function(s) {
		var i, c;
		if (s === "") {
			return false;
		}
		i = 0;
		while (i < s.length) {
			if (c = s.charCodeAt(i), c < 128 && bytes.IndexByte(safeBytes, c) < 0) {
				return false;
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	splitQuoted = function(s) {
		var r, err, args, arg, escaped, quoted, quote, i, _ref, _i, _rune, rune, _slice, _index, _tuple;
		r = (go$sliceType(Go$String)).nil;
		err = null;
		args = (go$sliceType(Go$String)).nil;
		arg = (go$sliceType(Go$Int32)).make(s.length, 0, function() { return 0; });
		escaped = false;
		quoted = false;
		quote = 0;
		i = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			rune = _rune[0];
			if (escaped) {
				escaped = false;
			} else if (rune === 92) {
				escaped = true;
				_i += _rune[1];
				continue;
			} else if (!((quote === 0))) {
				if (rune === quote) {
					quote = 0;
					_i += _rune[1];
					continue;
				}
			} else if ((rune === 34) || (rune === 39)) {
				quoted = true;
				quote = rune;
				_i += _rune[1];
				continue;
			} else if (unicode.IsSpace(rune)) {
				if (quoted || i > 0) {
					quoted = false;
					args = go$append(args, go$runesToString(go$subslice(arg, 0, i)));
					i = 0;
				}
				_i += _rune[1];
				continue;
			}
			_slice = arg, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = rune) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
			_i += _rune[1];
		}
		if (quoted || i > 0) {
			args = go$append(args, go$runesToString(go$subslice(arg, 0, i)));
		}
		if (!((quote === 0))) {
			err = errors.New("unclosed quote");
		} else if (escaped) {
			err = errors.New("unfinished escaping");
		}
		_tuple = [args, err], r = _tuple[0], err = _tuple[1];
		return [r, err];
	};
	Context.Ptr.prototype.match = function(name, allTags) {
		var ctxt, _key, i, ok1, ok2, _key$1, _ref, _i, _rune, c, _ref$1, _i$1, _slice, _index, tag, _ref$2, _i$2, _slice$1, _index$1, tag$1;
		ctxt = this;
		if (name === "") {
			if (!(allTags === false)) {
				_key = name, (allTags || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: true };
			}
			return false;
		}
		if (i = strings.Index(name, ","), i >= 0) {
			ok1 = ctxt.match(name.substring(0, i), allTags);
			ok2 = ctxt.match(name.substring((i + 1 >> 0)), allTags);
			return ok1 && ok2;
		}
		if (strings.HasPrefix(name, "!!")) {
			return false;
		}
		if (strings.HasPrefix(name, "!")) {
			return name.length > 1 && !ctxt.match(name.substring(1), allTags);
		}
		if (!(allTags === false)) {
			_key$1 = name, (allTags || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: true };
		}
		_ref = name;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			if (!unicode.IsLetter(c) && !unicode.IsDigit(c) && !((c === 95)) && !((c === 46))) {
				return false;
			}
			_i += _rune[1];
		}
		if (ctxt.CgoEnabled && name === "cgo") {
			return true;
		}
		if (name === ctxt.GOOS || name === ctxt.GOARCH || name === ctxt.Compiler) {
			return true;
		}
		_ref$1 = ctxt.BuildTags;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			tag = (_slice = _ref$1, _index = _i$1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (tag === name) {
				return true;
			}
			_i$1++;
		}
		_ref$2 = ctxt.ReleaseTags;
		_i$2 = 0;
		while (_i$2 < _ref$2.length) {
			tag$1 = (_slice$1 = _ref$2, _index$1 = _i$2, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (tag$1 === name) {
				return true;
			}
			_i$2++;
		}
		return false;
	};
	Context.prototype.match = function(name, allTags) { return this.go$val.match(name, allTags); };
	Context.Ptr.prototype.goodOSArchFile = function(name, allTags) {
		var ctxt, dot, l, n, _slice, _index, n$1, _slice$1, _index$1, _entry, _slice$2, _index$2, _entry$1, _key, _slice$3, _index$3, _key$1, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _entry$2, _key$2, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _entry$3, _key$3, _slice$11, _index$11, _slice$12, _index$12;
		ctxt = this;
		if (dot = strings.Index(name, "."), !((dot === -1))) {
			name = name.substring(0, dot);
		}
		l = strings.Split(name, "_");
		if (n = l.length, n > 0 && (_slice = l, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === "test") {
			l = go$subslice(l, 0, (n - 1 >> 0));
		}
		n$1 = l.length;
		if (n$1 >= 2 && (_entry = knownOS[(_slice$1 = l, _index$1 = (n$1 - 2 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))], _entry !== undefined ? _entry.v : false) && (_entry$1 = knownArch[(_slice$2 = l, _index$2 = (n$1 - 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))], _entry$1 !== undefined ? _entry$1.v : false)) {
			if (!(allTags === false)) {
				_key = (_slice$3 = l, _index$3 = (n$1 - 2 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), (allTags || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: true };
				_key$1 = (_slice$4 = l, _index$4 = (n$1 - 1 >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), (allTags || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: true };
			}
			return (_slice$5 = l, _index$5 = (n$1 - 2 >> 0), (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")) === ctxt.GOOS && (_slice$6 = l, _index$6 = (n$1 - 1 >> 0), (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")) === ctxt.GOARCH;
		}
		if (n$1 >= 1 && (_entry$2 = knownOS[(_slice$7 = l, _index$7 = (n$1 - 1 >> 0), (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"))], _entry$2 !== undefined ? _entry$2.v : false)) {
			if (!(allTags === false)) {
				_key$2 = (_slice$8 = l, _index$8 = (n$1 - 1 >> 0), (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")), (allTags || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: true };
			}
			return (_slice$9 = l, _index$9 = (n$1 - 1 >> 0), (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")) === ctxt.GOOS;
		}
		if (n$1 >= 1 && (_entry$3 = knownArch[(_slice$10 = l, _index$10 = (n$1 - 1 >> 0), (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"))], _entry$3 !== undefined ? _entry$3.v : false)) {
			if (!(allTags === false)) {
				_key$3 = (_slice$11 = l, _index$11 = (n$1 - 1 >> 0), (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")), (allTags || go$throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: true };
			}
			return (_slice$12 = l, _index$12 = (n$1 - 1 >> 0), (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")) === ctxt.GOARCH;
		}
		return true;
	};
	Context.prototype.goodOSArchFile = function(name, allTags) { return this.go$val.goodOSArchFile(name, allTags); };
	IsLocalImport = go$pkg.IsLocalImport = function(path$1) {
		return path$1 === "." || path$1 === ".." || strings.HasPrefix(path$1, "./") || strings.HasPrefix(path$1, "../");
	};
	isIdent = function(c) {
		return 65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57 || (c === 95) || c >= 128;
	};
	importReader.Ptr.prototype.syntaxError = function() {
		var r;
		r = this;
		if (go$interfaceIsEqual(r.err, null)) {
			r.err = errSyntax;
		}
	};
	importReader.prototype.syntaxError = function() { return this.go$val.syntaxError(); };
	importReader.Ptr.prototype.readByte = function() {
		var r, _tuple, c, err;
		r = this;
		_tuple = r.b.ReadByte(), c = _tuple[0], err = _tuple[1];
		if (go$interfaceIsEqual(err, null)) {
			r.buf = go$append(r.buf, c);
			if (c === 0) {
				err = errNUL;
			}
		}
		if (!(go$interfaceIsEqual(err, null))) {
			if (go$interfaceIsEqual(err, io.EOF)) {
				r.eof = true;
			} else if (go$interfaceIsEqual(r.err, null)) {
				r.err = err;
			}
			c = 0;
		}
		return c;
	};
	importReader.prototype.readByte = function() { return this.go$val.readByte(); };
	importReader.Ptr.prototype.peekByte = function(skipSpace) {
		var r, c, _ref, c1, _tuple;
		r = this;
		if (!(go$interfaceIsEqual(r.err, null))) {
			if (r.nerr = r.nerr + 1 >> 0, r.nerr > 10000) {
				throw go$panic(new Go$String("go/build: import reader looping"));
			}
			return 0;
		}
		c = r.peek;
		if (c === 0) {
			c = r.readByte();
		}
		while (go$interfaceIsEqual(r.err, null) && !r.eof) {
			if (skipSpace) {
				_ref = c;
				if (_ref === 32 || _ref === 12 || _ref === 9 || _ref === 13 || _ref === 10 || _ref === 59) {
					c = r.readByte();
					continue;
				} else if (_ref === 47) {
					c = r.readByte();
					if (c === 47) {
						while (!((c === 10)) && go$interfaceIsEqual(r.err, null) && !r.eof) {
							c = r.readByte();
						}
					} else if (c === 42) {
						c1 = 0;
						while ((!((c === 42)) || !((c1 === 47))) && go$interfaceIsEqual(r.err, null)) {
							if (r.eof) {
								r.syntaxError();
							}
							_tuple = [c1, r.readByte()], c = _tuple[0], c1 = _tuple[1];
						}
					} else {
						r.syntaxError();
					}
					c = r.readByte();
					continue;
				}
			}
			break;
		}
		r.peek = c;
		return r.peek;
	};
	importReader.prototype.peekByte = function(skipSpace) { return this.go$val.peekByte(skipSpace); };
	importReader.Ptr.prototype.nextByte = function(skipSpace) {
		var r, c;
		r = this;
		c = r.peekByte(skipSpace);
		r.peek = 0;
		return c;
	};
	importReader.prototype.nextByte = function(skipSpace) { return this.go$val.nextByte(skipSpace); };
	importReader.Ptr.prototype.readKeyword = function(kw) {
		var r, i;
		r = this;
		r.peekByte(true);
		i = 0;
		while (i < kw.length) {
			if (!((r.nextByte(false) === kw.charCodeAt(i)))) {
				r.syntaxError();
				return;
			}
			i = i + 1 >> 0;
		}
		if (isIdent(r.peekByte(false))) {
			r.syntaxError();
		}
	};
	importReader.prototype.readKeyword = function(kw) { return this.go$val.readKeyword(kw); };
	importReader.Ptr.prototype.readIdent = function() {
		var r, c;
		r = this;
		c = r.peekByte(true);
		if (!isIdent(c)) {
			r.syntaxError();
			return;
		}
		while (isIdent(r.peekByte(false))) {
			r.peek = 0;
		}
	};
	importReader.prototype.readIdent = function() { return this.go$val.readIdent(); };
	importReader.Ptr.prototype.readString = function() {
		var r, _ref, c;
		r = this;
		_ref = r.nextByte(true);
		if (_ref === 96) {
			while (go$interfaceIsEqual(r.err, null)) {
				if (r.nextByte(false) === 96) {
					break;
				}
				if (r.eof) {
					r.syntaxError();
				}
			}
		} else if (_ref === 34) {
			while (go$interfaceIsEqual(r.err, null)) {
				c = r.nextByte(false);
				if (c === 34) {
					break;
				}
				if (r.eof || (c === 10)) {
					r.syntaxError();
				}
				if (c === 92) {
					r.nextByte(false);
				}
			}
		} else {
			r.syntaxError();
		}
	};
	importReader.prototype.readString = function() { return this.go$val.readString(); };
	importReader.Ptr.prototype.readImport = function() {
		var r, c;
		r = this;
		c = r.peekByte(true);
		if (c === 46) {
			r.peek = 0;
		} else if (isIdent(c)) {
			r.readIdent();
		}
		r.readString();
	};
	importReader.prototype.readImport = function() { return this.go$val.readImport(); };
	readComments = function(f) {
		var r;
		r = new importReader.Ptr(bufio.NewReader(f), (go$sliceType(Go$Uint8)).nil, 0, null, false, 0);
		r.peekByte(true);
		if (go$interfaceIsEqual(r.err, null) && !r.eof) {
			r.buf = go$subslice(r.buf, 0, (r.buf.length - 1 >> 0));
		}
		return [r.buf, r.err];
	};
	readImports = function(f, reportSyntaxError) {
		var r;
		r = new importReader.Ptr(bufio.NewReader(f), (go$sliceType(Go$Uint8)).nil, 0, null, false, 0);
		r.readKeyword("package");
		r.readIdent();
		while (r.peekByte(true) === 105) {
			r.readKeyword("import");
			if (r.peekByte(true) === 40) {
				r.nextByte(false);
				while (!((r.peekByte(true) === 41)) && go$interfaceIsEqual(r.err, null)) {
					r.readImport();
				}
				r.nextByte(false);
			} else {
				r.readImport();
			}
		}
		if (go$interfaceIsEqual(r.err, null) && !r.eof) {
			return [go$subslice(r.buf, 0, (r.buf.length - 1 >> 0)), null];
		}
		if (go$interfaceIsEqual(r.err, errSyntax) && !reportSyntaxError) {
			r.err = null;
			while (go$interfaceIsEqual(r.err, null) && !r.eof) {
				r.readByte();
			}
		}
		return [r.buf, r.err];
	};
	go$pkg.init = function() {
		Context.init([["GOARCH", "", Go$String, ""], ["GOOS", "", Go$String, ""], ["GOROOT", "", Go$String, ""], ["GOPATH", "", Go$String, ""], ["CgoEnabled", "", Go$Bool, ""], ["UseAllFiles", "", Go$Bool, ""], ["Compiler", "", Go$String, ""], ["BuildTags", "", (go$sliceType(Go$String)), ""], ["ReleaseTags", "", (go$sliceType(Go$String)), ""], ["InstallSuffix", "", Go$String, ""], ["JoinPath", "", (go$funcType([(go$sliceType(Go$String))], [Go$String], true)), ""], ["SplitPathList", "", (go$funcType([Go$String], [(go$sliceType(Go$String))], false)), ""], ["IsAbsPath", "", (go$funcType([Go$String], [Go$Bool], false)), ""], ["IsDir", "", (go$funcType([Go$String], [Go$Bool], false)), ""], ["HasSubdir", "", (go$funcType([Go$String, Go$String], [Go$String, Go$Bool], false)), ""], ["ReadDir", "", (go$funcType([Go$String], [(go$sliceType(os.FileInfo)), go$error], false)), ""], ["OpenFile", "", (go$funcType([Go$String], [io.ReadCloser, go$error], false)), ""]]);
		(go$ptrType(Context)).methods = [["Import", "", [Go$String, Go$String, ImportMode], [(go$ptrType(Package)), go$error], false], ["ImportDir", "", [Go$String, ImportMode], [(go$ptrType(Package)), go$error], false], ["MatchFile", "", [Go$String, Go$String], [Go$Bool, go$error], false], ["SrcDirs", "", [], [(go$sliceType(Go$String))], false], ["goodOSArchFile", "go/build", [Go$String, (go$mapType(Go$String, Go$Bool))], [Go$Bool], false], ["gopath", "go/build", [], [(go$sliceType(Go$String))], false], ["hasSubdir", "go/build", [Go$String, Go$String], [Go$String, Go$Bool], false], ["isAbsPath", "go/build", [Go$String], [Go$Bool], false], ["isDir", "go/build", [Go$String], [Go$Bool], false], ["isFile", "go/build", [Go$String], [Go$Bool], false], ["joinPath", "go/build", [(go$sliceType(Go$String))], [Go$String], true], ["match", "go/build", [Go$String, (go$mapType(Go$String, Go$Bool))], [Go$Bool], false], ["matchFile", "go/build", [Go$String, Go$String, Go$Bool, (go$mapType(Go$String, Go$Bool))], [Go$Bool, (go$sliceType(Go$Uint8)), Go$String, go$error], false], ["openFile", "go/build", [Go$String], [io.ReadCloser, go$error], false], ["readDir", "go/build", [Go$String], [(go$sliceType(os.FileInfo)), go$error], false], ["saveCgo", "go/build", [Go$String, (go$ptrType(Package)), (go$ptrType(ast.CommentGroup))], [go$error], false], ["shouldBuild", "go/build", [(go$sliceType(Go$Uint8)), (go$mapType(Go$String, Go$Bool))], [Go$Bool], false], ["splitPathList", "go/build", [Go$String], [(go$sliceType(Go$String))], false]];
		Package.init([["Dir", "", Go$String, ""], ["Name", "", Go$String, ""], ["Doc", "", Go$String, ""], ["ImportPath", "", Go$String, ""], ["Root", "", Go$String, ""], ["SrcRoot", "", Go$String, ""], ["PkgRoot", "", Go$String, ""], ["BinDir", "", Go$String, ""], ["Goroot", "", Go$Bool, ""], ["PkgObj", "", Go$String, ""], ["AllTags", "", (go$sliceType(Go$String)), ""], ["ConflictDir", "", Go$String, ""], ["GoFiles", "", (go$sliceType(Go$String)), ""], ["CgoFiles", "", (go$sliceType(Go$String)), ""], ["IgnoredGoFiles", "", (go$sliceType(Go$String)), ""], ["CFiles", "", (go$sliceType(Go$String)), ""], ["CXXFiles", "", (go$sliceType(Go$String)), ""], ["HFiles", "", (go$sliceType(Go$String)), ""], ["SFiles", "", (go$sliceType(Go$String)), ""], ["SwigFiles", "", (go$sliceType(Go$String)), ""], ["SwigCXXFiles", "", (go$sliceType(Go$String)), ""], ["SysoFiles", "", (go$sliceType(Go$String)), ""], ["CgoCFLAGS", "", (go$sliceType(Go$String)), ""], ["CgoCPPFLAGS", "", (go$sliceType(Go$String)), ""], ["CgoCXXFLAGS", "", (go$sliceType(Go$String)), ""], ["CgoLDFLAGS", "", (go$sliceType(Go$String)), ""], ["CgoPkgConfig", "", (go$sliceType(Go$String)), ""], ["Imports", "", (go$sliceType(Go$String)), ""], ["ImportPos", "", (go$mapType(Go$String, (go$sliceType(token.Position)))), ""], ["TestGoFiles", "", (go$sliceType(Go$String)), ""], ["TestImports", "", (go$sliceType(Go$String)), ""], ["TestImportPos", "", (go$mapType(Go$String, (go$sliceType(token.Position)))), ""], ["XTestGoFiles", "", (go$sliceType(Go$String)), ""], ["XTestImports", "", (go$sliceType(Go$String)), ""], ["XTestImportPos", "", (go$mapType(Go$String, (go$sliceType(token.Position)))), ""]]);
		(go$ptrType(Package)).methods = [["IsCommand", "", [], [Go$Bool], false]];
		NoGoError.init([["Dir", "", Go$String, ""]]);
		(go$ptrType(NoGoError)).methods = [["Error", "", [], [Go$String], false]];
		importReader.init([["b", "go/build", (go$ptrType(bufio.Reader)), ""], ["buf", "go/build", (go$sliceType(Go$Uint8)), ""], ["peek", "go/build", Go$Uint8, ""], ["err", "go/build", go$error, ""], ["eof", "go/build", Go$Bool, ""], ["nerr", "go/build", Go$Int, ""]]);
		(go$ptrType(importReader)).methods = [["nextByte", "go/build", [Go$Bool], [Go$Uint8], false], ["peekByte", "go/build", [Go$Bool], [Go$Uint8], false], ["readByte", "go/build", [], [Go$Uint8], false], ["readIdent", "go/build", [], [], false], ["readImport", "go/build", [], [], false], ["readKeyword", "go/build", [Go$String], [], false], ["readString", "go/build", [], [], false], ["syntaxError", "go/build", [], [], false]];
		var _map, _key;
		cgoEnabled = (_map = new Go$Map(), _key = "darwin/386", _map[_key] = { k: _key, v: true }, _key = "darwin/amd64", _map[_key] = { k: _key, v: true }, _key = "dragonfly/386", _map[_key] = { k: _key, v: true }, _key = "dragonfly/amd64", _map[_key] = { k: _key, v: true }, _key = "freebsd/386", _map[_key] = { k: _key, v: true }, _key = "freebsd/amd64", _map[_key] = { k: _key, v: true }, _key = "freebsd/arm", _map[_key] = { k: _key, v: true }, _key = "linux/386", _map[_key] = { k: _key, v: true }, _key = "linux/amd64", _map[_key] = { k: _key, v: true }, _key = "linux/arm", _map[_key] = { k: _key, v: true }, _key = "netbsd/386", _map[_key] = { k: _key, v: true }, _key = "netbsd/amd64", _map[_key] = { k: _key, v: true }, _key = "netbsd/arm", _map[_key] = { k: _key, v: true }, _key = "openbsd/386", _map[_key] = { k: _key, v: true }, _key = "openbsd/amd64", _map[_key] = { k: _key, v: true }, _key = "windows/386", _map[_key] = { k: _key, v: true }, _key = "windows/amd64", _map[_key] = { k: _key, v: true }, _map);
		var _struct;
		go$pkg.Default = (_struct = defaultContext(), new Context.Ptr(_struct.GOARCH, _struct.GOOS, _struct.GOROOT, _struct.GOPATH, _struct.CgoEnabled, _struct.UseAllFiles, _struct.Compiler, _struct.BuildTags, _struct.ReleaseTags, _struct.InstallSuffix, _struct.JoinPath, _struct.SplitPathList, _struct.IsAbsPath, _struct.IsDir, _struct.HasSubdir, _struct.ReadDir, _struct.OpenFile));
		slashslash = new (go$sliceType(Go$Uint8))(go$stringToBytes("//"));
		safeBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("+-.,/0123456789=ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz:$"));
		knownOS = new Go$Map();
		knownArch = new Go$Map();
		go$pkg.ToolDir = filepath.Join(new (go$sliceType(Go$String))([runtime.GOROOT(), "pkg/tool/darwin_js"]));
		errSyntax = errors.New("syntax error");
		errNUL = errors.New("unexpected NUL in input");
		var _ref, _i, _slice, _index, v, _key$1, _ref$1, _i$1, _slice$1, _index$1, v$1, _key$2;
		_ref = strings.Fields("darwin dragonfly freebsd linux netbsd openbsd plan9 windows ");
		_i = 0;
		while (_i < _ref.length) {
			v = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_key$1 = v, (knownOS || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: true };
			_i++;
		}
		_ref$1 = strings.Fields("386 amd64 arm ");
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			v$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			_key$2 = v$1, (knownArch || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: true };
			_i$1++;
		}
	}
	return go$pkg;
})();
go$packages["text/scanner"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], fmt = go$packages["fmt"], io = go$packages["io"], os = go$packages["os"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], Position, Scanner, TokenString, digitVal, isDecimal, tokenString;
	Position = go$pkg.Position = go$newType(0, "Struct", "scanner.Position", "Position", "text/scanner", function(Filename_, Offset_, Line_, Column_) {
		this.go$val = this;
		this.Filename = Filename_ !== undefined ? Filename_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Column = Column_ !== undefined ? Column_ : 0;
	});
	Scanner = go$pkg.Scanner = go$newType(0, "Struct", "scanner.Scanner", "Scanner", "text/scanner", function(src_, srcBuf_, srcPos_, srcEnd_, srcBufOffset_, line_, column_, lastLineLen_, lastCharLen_, tokBuf_, tokPos_, tokEnd_, ch_, Error_, ErrorCount_, Mode_, Whitespace_, Position_) {
		this.go$val = this;
		this.src = src_ !== undefined ? src_ : null;
		this.srcBuf = srcBuf_ !== undefined ? srcBuf_ : go$makeNativeArray("Uint8", 1025, function() { return 0; });
		this.srcPos = srcPos_ !== undefined ? srcPos_ : 0;
		this.srcEnd = srcEnd_ !== undefined ? srcEnd_ : 0;
		this.srcBufOffset = srcBufOffset_ !== undefined ? srcBufOffset_ : 0;
		this.line = line_ !== undefined ? line_ : 0;
		this.column = column_ !== undefined ? column_ : 0;
		this.lastLineLen = lastLineLen_ !== undefined ? lastLineLen_ : 0;
		this.lastCharLen = lastCharLen_ !== undefined ? lastCharLen_ : 0;
		this.tokBuf = tokBuf_ !== undefined ? tokBuf_ : new bytes.Buffer.Ptr();
		this.tokPos = tokPos_ !== undefined ? tokPos_ : 0;
		this.tokEnd = tokEnd_ !== undefined ? tokEnd_ : 0;
		this.ch = ch_ !== undefined ? ch_ : 0;
		this.Error = Error_ !== undefined ? Error_ : go$throwNilPointerError;
		this.ErrorCount = ErrorCount_ !== undefined ? ErrorCount_ : 0;
		this.Mode = Mode_ !== undefined ? Mode_ : 0;
		this.Whitespace = Whitespace_ !== undefined ? Whitespace_ : new Go$Uint64(0, 0);
		this.Position = Position_ !== undefined ? Position_ : new Position.Ptr();
	});
	Scanner.prototype.IsValid = function() { return this.go$val.IsValid(); };
	Scanner.Ptr.prototype.IsValid = function() { return this.Position.IsValid(); };
	Scanner.prototype.String = function() { return this.go$val.String(); };
	Scanner.Ptr.prototype.String = function() { return this.Position.String(); };
	Position.Ptr.prototype.IsValid = function() {
		var pos;
		pos = this;
		return pos.Line > 0;
	};
	Position.prototype.IsValid = function() { return this.go$val.IsValid(); };
	Position.Ptr.prototype.String = function() {
		var _struct, pos, s;
		pos = (_struct = this, new Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
		s = pos.Filename;
		if (pos.IsValid()) {
			if (!(s === "")) {
				s = s + ":";
			}
			s = s + (fmt.Sprintf("%d:%d", new (go$sliceType(go$emptyInterface))([new Go$Int(pos.Line), new Go$Int(pos.Column)])));
		}
		if (s === "") {
			s = "???";
		}
		return s;
	};
	Position.prototype.String = function() { return this.go$val.String(); };
	TokenString = go$pkg.TokenString = function(tok) {
		var found, _tuple, _entry, s;
		if (_tuple = (_entry = tokenString[tok], _entry !== undefined ? [_entry.v, true] : ["", false]), s = _tuple[0], found = _tuple[1], found) {
			return s;
		}
		return fmt.Sprintf("%q", new (go$sliceType(go$emptyInterface))([new Go$String(go$encodeRune(tok))]));
	};
	Scanner.Ptr.prototype.Init = function(src) {
		var s;
		s = this;
		s.src = src;
		s.srcBuf[0] = 128;
		s.srcPos = 0;
		s.srcEnd = 0;
		s.srcBufOffset = 0;
		s.line = 1;
		s.column = 0;
		s.lastLineLen = 0;
		s.lastCharLen = 0;
		s.tokPos = -1;
		s.ch = -1;
		s.Error = go$throwNilPointerError;
		s.ErrorCount = 0;
		s.Mode = 1012;
		s.Whitespace = new Go$Uint64(1, 9728);
		s.Position.Line = 0;
		return s;
	};
	Scanner.prototype.Init = function(src) { return this.go$val.Init(src); };
	Scanner.Ptr.prototype.next = function() {
		var s, _tuple, ch, width, i, _tuple$1, n, err, _tuple$2, _ref;
		s = this;
		_tuple = [(s.srcBuf[s.srcPos] >> 0), 1], ch = _tuple[0], width = _tuple[1];
		if (ch >= 128) {
			while ((s.srcPos + 4 >> 0) > s.srcEnd && !utf8.FullRune(go$subslice(new (go$sliceType(Go$Uint8))(s.srcBuf), s.srcPos, s.srcEnd))) {
				if (s.tokPos >= 0) {
					s.tokBuf.Write(go$subslice(new (go$sliceType(Go$Uint8))(s.srcBuf), s.tokPos, s.srcPos));
					s.tokPos = 0;
				}
				go$copySlice(go$subslice(new (go$sliceType(Go$Uint8))(s.srcBuf), 0), go$subslice(new (go$sliceType(Go$Uint8))(s.srcBuf), s.srcPos, s.srcEnd));
				s.srcBufOffset = s.srcBufOffset + (s.srcPos) >> 0;
				i = s.srcEnd - s.srcPos >> 0;
				_tuple$1 = s.src.Read(go$subslice(new (go$sliceType(Go$Uint8))(s.srcBuf), i, 1024)), n = _tuple$1[0], err = _tuple$1[1];
				s.srcPos = 0;
				s.srcEnd = i + n >> 0;
				s.srcBuf[s.srcEnd] = 128;
				if (!(go$interfaceIsEqual(err, null))) {
					if (s.srcEnd === 0) {
						if (s.lastCharLen > 0) {
							s.column = s.column + 1 >> 0;
						}
						s.lastCharLen = 0;
						return -1;
					}
					if (!(go$interfaceIsEqual(err, io.EOF))) {
						s.error(err.Error());
					}
					break;
				}
			}
			ch = (s.srcBuf[s.srcPos] >> 0);
			if (ch >= 128) {
				_tuple$2 = utf8.DecodeRune(go$subslice(new (go$sliceType(Go$Uint8))(s.srcBuf), s.srcPos, s.srcEnd)), ch = _tuple$2[0], width = _tuple$2[1];
				if ((ch === 65533) && (width === 1)) {
					s.srcPos = s.srcPos + (width) >> 0;
					s.lastCharLen = width;
					s.column = s.column + 1 >> 0;
					s.error("illegal UTF-8 encoding");
					return ch;
				}
			}
		}
		s.srcPos = s.srcPos + (width) >> 0;
		s.lastCharLen = width;
		s.column = s.column + 1 >> 0;
		_ref = ch;
		if (_ref === 0) {
			s.error("illegal character NUL");
		} else if (_ref === 10) {
			s.line = s.line + 1 >> 0;
			s.lastLineLen = s.column;
			s.column = 0;
		}
		return ch;
	};
	Scanner.prototype.next = function() { return this.go$val.next(); };
	Scanner.Ptr.prototype.Next = function() {
		var s, ch;
		s = this;
		s.tokPos = -1;
		s.Position.Line = 0;
		ch = s.Peek();
		s.ch = s.next();
		return ch;
	};
	Scanner.prototype.Next = function() { return this.go$val.Next(); };
	Scanner.Ptr.prototype.Peek = function() {
		var s;
		s = this;
		if (s.ch < 0) {
			s.ch = s.next();
			if (s.ch === 65279) {
				s.ch = s.next();
			}
		}
		return s.ch;
	};
	Scanner.prototype.Peek = function() { return this.go$val.Peek(); };
	Scanner.Ptr.prototype.error = function(msg) {
		var s, _struct, pos, _struct$1;
		s = this;
		s.ErrorCount = s.ErrorCount + 1 >> 0;
		if (!(s.Error === go$throwNilPointerError)) {
			s.Error(s, msg);
			return;
		}
		pos = (_struct = s.Position, new Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
		if (!pos.IsValid()) {
			pos = (_struct$1 = s.Pos(), new Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column));
		}
		fmt.Fprintf(os.Stderr, "%s: %s\n", new (go$sliceType(go$emptyInterface))([new pos.constructor.Struct(pos), new Go$String(msg)]));
	};
	Scanner.prototype.error = function(msg) { return this.go$val.error(msg); };
	Scanner.Ptr.prototype.scanIdentifier = function() {
		var s, ch;
		s = this;
		ch = s.next();
		while ((ch === 95) || unicode.IsLetter(ch) || unicode.IsDigit(ch)) {
			ch = s.next();
		}
		return ch;
	};
	Scanner.prototype.scanIdentifier = function() { return this.go$val.scanIdentifier(); };
	digitVal = function(ch) {
		if (48 <= ch && ch <= 57) {
			return ((ch - 48 >> 0) >> 0);
		} else if (97 <= ch && ch <= 102) {
			return (((ch - 97 >> 0) + 10 >> 0) >> 0);
		} else if (65 <= ch && ch <= 70) {
			return (((ch - 65 >> 0) + 10 >> 0) >> 0);
		}
		return 16;
	};
	isDecimal = function(ch) {
		return 48 <= ch && ch <= 57;
	};
	Scanner.Ptr.prototype.scanMantissa = function(ch) {
		var s;
		s = this;
		while (isDecimal(ch)) {
			ch = s.next();
		}
		return ch;
	};
	Scanner.prototype.scanMantissa = function(ch) { return this.go$val.scanMantissa(ch); };
	Scanner.Ptr.prototype.scanFraction = function(ch) {
		var s;
		s = this;
		if (ch === 46) {
			ch = s.scanMantissa(s.next());
		}
		return ch;
	};
	Scanner.prototype.scanFraction = function(ch) { return this.go$val.scanFraction(ch); };
	Scanner.Ptr.prototype.scanExponent = function(ch) {
		var s;
		s = this;
		if ((ch === 101) || (ch === 69)) {
			ch = s.next();
			if ((ch === 45) || (ch === 43)) {
				ch = s.next();
			}
			ch = s.scanMantissa(ch);
		}
		return ch;
	};
	Scanner.prototype.scanExponent = function(ch) { return this.go$val.scanExponent(ch); };
	Scanner.Ptr.prototype.scanNumber = function(ch) {
		var s, hasMantissa, has8or9;
		s = this;
		if (ch === 48) {
			ch = s.next();
			if ((ch === 120) || (ch === 88)) {
				ch = s.next();
				hasMantissa = false;
				while (digitVal(ch) < 16) {
					ch = s.next();
					hasMantissa = true;
				}
				if (!hasMantissa) {
					s.error("illegal hexadecimal number");
				}
			} else {
				has8or9 = false;
				while (isDecimal(ch)) {
					if (ch > 55) {
						has8or9 = true;
					}
					ch = s.next();
				}
				if (!((((s.Mode & 16) >>> 0) === 0)) && ((ch === 46) || (ch === 101) || (ch === 69))) {
					ch = s.scanFraction(ch);
					ch = s.scanExponent(ch);
					return [-4, ch];
				}
				if (has8or9) {
					s.error("illegal octal number");
				}
			}
			return [-3, ch];
		}
		ch = s.scanMantissa(ch);
		if (!((((s.Mode & 16) >>> 0) === 0)) && ((ch === 46) || (ch === 101) || (ch === 69))) {
			ch = s.scanFraction(ch);
			ch = s.scanExponent(ch);
			return [-4, ch];
		}
		return [-3, ch];
	};
	Scanner.prototype.scanNumber = function(ch) { return this.go$val.scanNumber(ch); };
	Scanner.Ptr.prototype.scanDigits = function(ch, base, n) {
		var s;
		s = this;
		while (n > 0 && digitVal(ch) < base) {
			ch = s.next();
			n = n - 1 >> 0;
		}
		if (n > 0) {
			s.error("illegal char escape");
		}
		return ch;
	};
	Scanner.prototype.scanDigits = function(ch, base, n) { return this.go$val.scanDigits(ch, base, n); };
	Scanner.Ptr.prototype.scanEscape = function(quote) {
		var s, ch, _ref;
		s = this;
		ch = s.next();
		_ref = ch;
		if (_ref === 97 || _ref === 98 || _ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 118 || _ref === 92 || _ref === quote) {
			ch = s.next();
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			ch = s.scanDigits(ch, 8, 3);
		} else if (_ref === 120) {
			ch = s.scanDigits(s.next(), 16, 2);
		} else if (_ref === 117) {
			ch = s.scanDigits(s.next(), 16, 4);
		} else if (_ref === 85) {
			ch = s.scanDigits(s.next(), 16, 8);
		} else {
			s.error("illegal char escape");
		}
		return ch;
	};
	Scanner.prototype.scanEscape = function(quote) { return this.go$val.scanEscape(quote); };
	Scanner.Ptr.prototype.scanString = function(quote) {
		var n, s, ch;
		n = 0;
		s = this;
		ch = s.next();
		while (!((ch === quote))) {
			if ((ch === 10) || ch < 0) {
				s.error("literal not terminated");
				return n;
			}
			if (ch === 92) {
				ch = s.scanEscape(quote);
			} else {
				ch = s.next();
			}
			n = n + 1 >> 0;
		}
		return n;
	};
	Scanner.prototype.scanString = function(quote) { return this.go$val.scanString(quote); };
	Scanner.Ptr.prototype.scanRawString = function() {
		var s, ch;
		s = this;
		ch = s.next();
		while (!((ch === 96))) {
			if (ch < 0) {
				s.error("literal not terminated");
				return;
			}
			ch = s.next();
		}
	};
	Scanner.prototype.scanRawString = function() { return this.go$val.scanRawString(); };
	Scanner.Ptr.prototype.scanChar = function() {
		var s;
		s = this;
		if (!((s.scanString(39) === 1))) {
			s.error("illegal char literal");
		}
	};
	Scanner.prototype.scanChar = function() { return this.go$val.scanChar(); };
	Scanner.Ptr.prototype.scanComment = function(ch) {
		var s, ch0;
		s = this;
		if (ch === 47) {
			ch = s.next();
			while (!((ch === 10)) && ch >= 0) {
				ch = s.next();
			}
			return ch;
		}
		ch = s.next();
		while (true) {
			if (ch < 0) {
				s.error("comment not terminated");
				break;
			}
			ch0 = ch;
			ch = s.next();
			if ((ch0 === 42) && (ch === 47)) {
				ch = s.next();
				break;
			}
		}
		return ch;
	};
	Scanner.prototype.scanComment = function(ch) { return this.go$val.scanComment(ch); };
	Scanner.Ptr.prototype.Scan = function() {
		var go$this = this, s, ch, x, x$1, x$2, tok, _tuple, _ref;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		s = go$this;
		ch = s.Peek();
		s.tokPos = -1;
		s.Position.Line = 0;
		/* redo: */ case 1:
		/* while (!((x = (x$1 = s.Whitespace, x$2 = go$shiftLeft64(new Go$Uint64(0, 1), (ch >>> 0)), new Go$Uint64(x$1.high & x$2.high, (x$1.low & x$2.low) >>> 0)), (x.high === 0 && x.low === 0)))) { */ case 2: if(!(!((x = (x$1 = s.Whitespace, x$2 = go$shiftLeft64(new Go$Uint64(0, 1), (ch >>> 0)), new Go$Uint64(x$1.high & x$2.high, (x$1.low & x$2.low) >>> 0)), (x.high === 0 && x.low === 0))))) { go$s = 3; continue; }
			ch = s.next();
		/* } */ go$s = 2; continue; case 3:
		s.tokBuf.Reset();
		s.tokPos = s.srcPos - s.lastCharLen >> 0;
		s.Position.Offset = s.srcBufOffset + s.tokPos >> 0;
		if (s.column > 0) {
			s.Position.Line = s.line;
			s.Position.Column = s.column;
		} else {
			s.Position.Line = s.line - 1 >> 0;
			s.Position.Column = s.lastLineLen;
		}
		tok = ch;
		/* if (unicode.IsLetter(ch) || (ch === 95)) { */ if (unicode.IsLetter(ch) || (ch === 95)) {} else if (isDecimal(ch)) { go$s = 4; continue; } else { go$s = 5; continue; }
			if (!((((s.Mode & 4) >>> 0) === 0))) {
				tok = -2;
				ch = s.scanIdentifier();
			} else {
				ch = s.next();
			}
		/* } else if (isDecimal(ch)) { */ go$s = 6; continue; case 4: 
			if (!((((s.Mode & 24) >>> 0) === 0))) {
				_tuple = s.scanNumber(ch), tok = _tuple[0], ch = _tuple[1];
			} else {
				ch = s.next();
			}
		/* } else { */ go$s = 6; continue; case 5: 
			_ref = ch;
			/* if (_ref === 34) { */ if (_ref === 34) {} else if (_ref === 39) { go$s = 7; continue; } else if (_ref === 46) { go$s = 8; continue; } else if (_ref === 47) { go$s = 9; continue; } else if (_ref === 96) { go$s = 10; continue; } else { go$s = 11; continue; }
				if (!((((s.Mode & 64) >>> 0) === 0))) {
					s.scanString(34);
					tok = -6;
				}
				ch = s.next();
			/* } else if (_ref === 39) { */ go$s = 12; continue; case 7: 
				if (!((((s.Mode & 32) >>> 0) === 0))) {
					s.scanChar();
					tok = -5;
				}
				ch = s.next();
			/* } else if (_ref === 46) { */ go$s = 12; continue; case 8: 
				ch = s.next();
				if (isDecimal(ch) && !((((s.Mode & 16) >>> 0) === 0))) {
					tok = -4;
					ch = s.scanMantissa(ch);
					ch = s.scanExponent(ch);
				}
			/* } else if (_ref === 47) { */ go$s = 12; continue; case 9: 
				ch = s.next();
				/* if (((ch === 47) || (ch === 42)) && !((((s.Mode & 256) >>> 0) === 0))) { */ if (((ch === 47) || (ch === 42)) && !((((s.Mode & 256) >>> 0) === 0))) {} else { go$s = 13; continue; }
					/* if (!((((s.Mode & 512) >>> 0) === 0))) { */ if (!((((s.Mode & 512) >>> 0) === 0))) {} else { go$s = 14; continue; }
						s.tokPos = -1;
						ch = s.scanComment(ch);
						/* goto redo */ go$s = 1; continue;
					/* } */ case 14:
					ch = s.scanComment(ch);
					tok = -8;
				/* } */ case 13:
			/* } else if (_ref === 96) { */ go$s = 12; continue; case 10: 
				if (!((((s.Mode & 128) >>> 0) === 0))) {
					s.scanRawString();
					tok = -6;
				}
				ch = s.next();
			/* } else { */ go$s = 12; continue; case 11: 
				ch = s.next();
			/* } */ case 12:
		/* } */ case 6:
		s.tokEnd = s.srcPos - s.lastCharLen >> 0;
		s.ch = ch;
		return tok;
		/* */ } break; } }; return go$f();
	};
	Scanner.prototype.Scan = function() { return this.go$val.Scan(); };
	Scanner.Ptr.prototype.Pos = function() {
		var pos, s, _struct;
		pos = new Position.Ptr();
		s = this;
		pos.Filename = s.Position.Filename;
		pos.Offset = (s.srcBufOffset + s.srcPos >> 0) - s.lastCharLen >> 0;
		if (s.column > 0) {
			pos.Line = s.line;
			pos.Column = s.column;
		} else if (s.lastLineLen > 0) {
			pos.Line = s.line - 1 >> 0;
			pos.Column = s.lastLineLen;
		} else {
			pos.Line = 1;
			pos.Column = 1;
		}
		return (_struct = pos, new Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
	};
	Scanner.prototype.Pos = function() { return this.go$val.Pos(); };
	Scanner.Ptr.prototype.TokenText = function() {
		var s;
		s = this;
		if (s.tokPos < 0) {
			return "";
		}
		if (s.tokEnd < 0) {
			s.tokEnd = s.tokPos;
		}
		if (s.tokBuf.Len() === 0) {
			return go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(s.srcBuf), s.tokPos, s.tokEnd));
		}
		s.tokBuf.Write(go$subslice(new (go$sliceType(Go$Uint8))(s.srcBuf), s.tokPos, s.tokEnd));
		s.tokPos = s.tokEnd;
		return s.tokBuf.String();
	};
	Scanner.prototype.TokenText = function() { return this.go$val.TokenText(); };
	go$pkg.init = function() {
		Position.init([["Filename", "", Go$String, ""], ["Offset", "", Go$Int, ""], ["Line", "", Go$Int, ""], ["Column", "", Go$Int, ""]]);
		Position.methods = [["String", "", [], [Go$String], false]];
		(go$ptrType(Position)).methods = [["IsValid", "", [], [Go$Bool], false], ["String", "", [], [Go$String], false]];
		Scanner.init([["src", "text/scanner", io.Reader, ""], ["srcBuf", "text/scanner", (go$arrayType(Go$Uint8, 1025)), ""], ["srcPos", "text/scanner", Go$Int, ""], ["srcEnd", "text/scanner", Go$Int, ""], ["srcBufOffset", "text/scanner", Go$Int, ""], ["line", "text/scanner", Go$Int, ""], ["column", "text/scanner", Go$Int, ""], ["lastLineLen", "text/scanner", Go$Int, ""], ["lastCharLen", "text/scanner", Go$Int, ""], ["tokBuf", "text/scanner", bytes.Buffer, ""], ["tokPos", "text/scanner", Go$Int, ""], ["tokEnd", "text/scanner", Go$Int, ""], ["ch", "text/scanner", Go$Int32, ""], ["Error", "", (go$funcType([(go$ptrType(Scanner)), Go$String], [], false)), ""], ["ErrorCount", "", Go$Int, ""], ["Mode", "", Go$Uint, ""], ["Whitespace", "", Go$Uint64, ""], ["", "", Position, ""]]);
		Scanner.methods = [["String", "", [], [Go$String], false]];
		(go$ptrType(Scanner)).methods = [["Init", "", [io.Reader], [(go$ptrType(Scanner))], false], ["IsValid", "", [], [Go$Bool], false], ["Next", "", [], [Go$Int32], false], ["Peek", "", [], [Go$Int32], false], ["Pos", "", [], [Position], false], ["Scan", "", [], [Go$Int32], false], ["String", "", [], [Go$String], false], ["TokenText", "", [], [Go$String], false], ["error", "text/scanner", [Go$String], [], false], ["next", "text/scanner", [], [Go$Int32], false], ["scanChar", "text/scanner", [], [], false], ["scanComment", "text/scanner", [Go$Int32], [Go$Int32], false], ["scanDigits", "text/scanner", [Go$Int32, Go$Int, Go$Int], [Go$Int32], false], ["scanEscape", "text/scanner", [Go$Int32], [Go$Int32], false], ["scanExponent", "text/scanner", [Go$Int32], [Go$Int32], false], ["scanFraction", "text/scanner", [Go$Int32], [Go$Int32], false], ["scanIdentifier", "text/scanner", [], [Go$Int32], false], ["scanMantissa", "text/scanner", [Go$Int32], [Go$Int32], false], ["scanNumber", "text/scanner", [Go$Int32], [Go$Int32, Go$Int32], false], ["scanRawString", "text/scanner", [], [], false], ["scanString", "text/scanner", [Go$Int32], [Go$Int], false]];
		var _map, _key;
		tokenString = (_map = new Go$Map(), _key = -1, _map[_key] = { k: _key, v: "EOF" }, _key = -2, _map[_key] = { k: _key, v: "Ident" }, _key = -3, _map[_key] = { k: _key, v: "Int" }, _key = -4, _map[_key] = { k: _key, v: "Float" }, _key = -5, _map[_key] = { k: _key, v: "Char" }, _key = -6, _map[_key] = { k: _key, v: "String" }, _key = -7, _map[_key] = { k: _key, v: "RawString" }, _key = -8, _map[_key] = { k: _key, v: "Comment" }, _map);
	}
	return go$pkg;
})();
go$packages["code.google.com/p/go.tools/go/gcimporter"] = (function() {
	var go$pkg = {}, bufio = go$packages["bufio"], errors = go$packages["errors"], fmt = go$packages["fmt"], io = go$packages["io"], strconv = go$packages["strconv"], strings = go$packages["strings"], build = go$packages["go/build"], token = go$packages["go/token"], os = go$packages["os"], filepath = go$packages["path/filepath"], scanner = go$packages["text/scanner"], exact = go$packages["code.google.com/p/go.tools/go/exact"], types = go$packages["code.google.com/p/go.tools/go/types"], parser, importError, readGopackHeader, FindExportData, FindPkg, ImportData, Import, declTypeName, deref, pkgExts;
	parser = go$pkg.parser = go$newType(0, "Struct", "gcimporter.parser", "parser", "code.google.com/p/go.tools/go/gcimporter", function(scanner_, tok_, lit_, id_, imports_) {
		this.go$val = this;
		this.scanner = scanner_ !== undefined ? scanner_ : new scanner.Scanner.Ptr();
		this.tok = tok_ !== undefined ? tok_ : 0;
		this.lit = lit_ !== undefined ? lit_ : "";
		this.id = id_ !== undefined ? id_ : "";
		this.imports = imports_ !== undefined ? imports_ : false;
	});
	importError = go$pkg.importError = go$newType(0, "Struct", "gcimporter.importError", "importError", "code.google.com/p/go.tools/go/gcimporter", function(pos_, err_) {
		this.go$val = this;
		this.pos = pos_ !== undefined ? pos_ : new scanner.Position.Ptr();
		this.err = err_ !== undefined ? err_ : null;
	});
	readGopackHeader = function(r) {
		var name, size, err, hdr, _tuple, s, _tuple$1, _slice, _index, _slice$1, _index$1;
		name = "";
		size = 0;
		err = null;
		hdr = (go$sliceType(Go$Uint8)).make(60, 0, function() { return 0; });
		_tuple = io.ReadFull(r, hdr), err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [name, size, err];
		}
		s = strings.TrimSpace(go$bytesToString(go$subslice(go$subslice(hdr, 48), 0, 10)));
		_tuple$1 = strconv.Atoi(s), size = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null)) || !(((_slice = hdr, _index = (hdr.length - 2 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 96)) || !(((_slice$1 = hdr, _index$1 = (hdr.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 10))) {
			err = errors.New("invalid archive header");
			return [name, size, err];
		}
		name = strings.TrimSpace(go$bytesToString(go$subslice(hdr, 0, 16)));
		return [name, size, err];
	};
	FindExportData = go$pkg.FindExportData = function(r) {
		var err, _tuple, line, name, size, _tuple$1, tmp, n, _tuple$2, _tuple$3, _tuple$4, _slice, _index, _tuple$5;
		err = null;
		_tuple = r.ReadSlice(10), line = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		if (go$bytesToString(line) === "!<arch>\n") {
			name = "";
			size = 0;
			if (_tuple$1 = readGopackHeader(r), name = _tuple$1[0], size = _tuple$1[1], err = _tuple$1[2], !(go$interfaceIsEqual(err, null))) {
				return err;
			}
			if (name === "__.SYMDEF" || name === "__.GOSYMDEF") {
				tmp = (go$sliceType(Go$Uint8)).make(4096, 0, function() { return 0; });
				while (size > 0) {
					n = size;
					if (n > 4096) {
						n = 4096;
					}
					if (_tuple$2 = io.ReadFull(r, go$subslice(tmp, 0, n)), err = _tuple$2[1], !(go$interfaceIsEqual(err, null))) {
						return err;
					}
					size = size - (n) >> 0;
				}
				if (_tuple$3 = readGopackHeader(r), name = _tuple$3[0], size = _tuple$3[1], err = _tuple$3[2], !(go$interfaceIsEqual(err, null))) {
					return err;
				}
			}
			if (!(name === "__.PKGDEF")) {
				err = errors.New("go archive is missing __.PKGDEF");
				return err;
			}
			if (_tuple$4 = r.ReadSlice(10), line = _tuple$4[0], err = _tuple$4[1], !(go$interfaceIsEqual(err, null))) {
				return err;
			}
		}
		if (!strings.HasPrefix(go$bytesToString(line), "go object ")) {
			err = errors.New("not a go object file");
			return err;
		}
		while (!(((_slice = line, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 36))) {
			if (_tuple$5 = r.ReadSlice(10), line = _tuple$5[0], err = _tuple$5[1], !(go$interfaceIsEqual(err, null))) {
				return err;
			}
		}
		return err;
	};
	FindPkg = go$pkg.FindPkg = function(path, srcDir) {
		var filename, id, noext, _tuple, bp, _ref, _i, ext, err, f, _tuple$1;
		filename = "";
		id = "";
		if (path.length === 0) {
			return [filename, id];
		}
		id = path;
		noext = "";
		if (build.IsLocalImport(path)) {
			noext = filepath.Join(new (go$sliceType(Go$String))([srcDir, path]));
			id = noext;
		} else if (filepath.IsAbs(path)) {
			noext = path;
		} else {
			_tuple = build.Import(path, srcDir, 3), bp = _tuple[0];
			if (bp.PkgObj === "") {
				return [filename, id];
			}
			noext = strings.TrimSuffix(bp.PkgObj, ".a");
		}
		_ref = pkgExts;
		_i = 0;
		while (_i < 4) {
			ext = _ref[_i];
			filename = noext + ext;
			if (_tuple$1 = os.Stat(filename), f = _tuple$1[0], err = _tuple$1[1], go$interfaceIsEqual(err, null) && !f.IsDir()) {
				return [filename, id];
			}
			_i++;
		}
		filename = "";
		return [filename, id];
	};
	ImportData = go$pkg.ImportData = function(imports, filename, id, data) {
		var pkg, err, p;
		pkg = (go$ptrType(types.Package)).nil;
		err = null;
		var go$deferred = [];
		try {
			go$deferred.push({ fun: (function() {
				var r, _ref, _type;
				_ref = go$recover();
				_type = _ref !== null ? _ref.constructor : null;
				if (_type === null) {
					r = _ref;
				} else if (_type === importError) {
					r = _ref.go$val;
					err = new r.constructor.Struct(r);
				} else {
					r = _ref;
					throw go$panic(r);
				}
			}), args: [] });
			p = new parser.Ptr();
			p.init(filename, id, data, imports);
			pkg = p.parseExport();
			return [pkg, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [pkg, err];
		}
	};
	Import = go$pkg.Import = function(imports, path) {
		var pkg, err, _tuple, srcDir, _tuple$1, _tuple$2, filename, id, _entry, _tuple$3, f, buf, _tuple$4;
		pkg = (go$ptrType(types.Package)).nil;
		err = null;
		var go$deferred = [];
		try {
			if (path === "unsafe") {
				_tuple = [types.Unsafe, null], pkg = _tuple[0], err = _tuple[1];
				return [pkg, err];
			}
			srcDir = ".";
			if (build.IsLocalImport(path)) {
				_tuple$1 = os.Getwd(), srcDir = _tuple$1[0], err = _tuple$1[1];
				if (!(go$interfaceIsEqual(err, null))) {
					return [pkg, err];
				}
			}
			_tuple$2 = FindPkg(path, srcDir), filename = _tuple$2[0], id = _tuple$2[1];
			if (filename === "") {
				err = fmt.Errorf("can't find import: %s", new (go$sliceType(go$emptyInterface))([new Go$String(id)]));
				return [pkg, err];
			}
			if (pkg = (_entry = imports[id], _entry !== undefined ? _entry.v : (go$ptrType(types.Package)).nil), !(pkg === (go$ptrType(types.Package)).nil) && pkg.Complete()) {
				return [pkg, err];
			}
			_tuple$3 = os.Open(filename), f = _tuple$3[0], err = _tuple$3[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [pkg, err];
			}
			go$deferred.push({ fun: (function() {
				f.Close();
				if (!(go$interfaceIsEqual(err, null))) {
					err = fmt.Errorf("reading export data: %s: %v", new (go$sliceType(go$emptyInterface))([new Go$String(filename), err]));
				}
			}), args: [] });
			buf = bufio.NewReader(f);
			if (err = FindExportData(buf), !(go$interfaceIsEqual(err, null))) {
				return [pkg, err];
			}
			_tuple$4 = ImportData(imports, filename, id, buf), pkg = _tuple$4[0], err = _tuple$4[1];
			return [pkg, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [pkg, err];
		}
	};
	parser.Ptr.prototype.init = function(filename, id, src, imports) {
		var p;
		p = this;
		p.scanner.Init(src);
		p.scanner.Error = (function(param, msg) {
			p.error(new Go$String(msg));
		});
		p.scanner.Mode = 876;
		p.scanner.Whitespace = new Go$Uint64(1, 512);
		p.scanner.Position.Filename = filename;
		p.next();
		p.id = id;
		p.imports = imports;
	};
	parser.prototype.init = function(filename, id, src, imports) { return this.go$val.init(filename, id, src, imports); };
	parser.Ptr.prototype.next = function() {
		var p, _ref;
		p = this;
		p.tok = p.scanner.Scan();
		_ref = p.tok;
		if (_ref === -2 || _ref === -3 || _ref === -5 || _ref === -6 || _ref === 183) {
			p.lit = p.scanner.TokenText();
		} else {
			p.lit = "";
		}
	};
	parser.prototype.next = function() { return this.go$val.next(); };
	declTypeName = function(pkg, name) {
		var scope, obj, obj$1;
		scope = pkg.Scope();
		if (obj = scope.Lookup(name), !(go$interfaceIsEqual(obj, null))) {
			return (obj !== null && obj.constructor === (go$ptrType(types.TypeName)) ? obj.go$val : go$typeAssertionFailed(obj, (go$ptrType(types.TypeName))));
		}
		obj$1 = types.NewTypeName(0, pkg, name, null);
		types.NewNamed(obj$1, null, (go$sliceType((go$ptrType(types.Func)))).nil);
		scope.Insert(obj$1);
		return obj$1;
	};
	importError.Ptr.prototype.Error = function() {
		var _struct, _struct$1, e, x;
		e = (_struct = this, new importError.Ptr((_struct$1 = _struct.pos, new scanner.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column)), _struct.err));
		return fmt.Sprintf("import error %s (byte offset = %d): %s", new (go$sliceType(go$emptyInterface))([(x = e.pos, new x.constructor.Struct(x)), new Go$Int(e.pos.Offset), e.err]));
	};
	importError.prototype.Error = function() { return this.go$val.Error(); };
	parser.Ptr.prototype.error = function(err) {
		var p, ok, _tuple, s, x, _struct;
		p = this;
		if (_tuple = (err !== null && err.constructor === Go$String ? [err.go$val, true] : ["", false]), s = _tuple[0], ok = _tuple[1], ok) {
			err = errors.New(s);
		}
		throw go$panic((x = new importError.Ptr((_struct = p.scanner.Pos(), new scanner.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)), (err !== null && go$error.implementedBy.indexOf(err.constructor) !== -1 ? err : go$typeAssertionFailed(err, go$error))), new x.constructor.Struct(x)));
	};
	parser.prototype.error = function(err) { return this.go$val.error(err); };
	parser.Ptr.prototype.errorf = function(format, args) {
		var p;
		p = this;
		p.error(new Go$String(fmt.Sprintf(format, args)));
	};
	parser.prototype.errorf = function(format, args) { return this.go$val.errorf(format, args); };
	parser.Ptr.prototype.expect = function(tok) {
		var p, lit;
		p = this;
		lit = p.lit;
		if (!((p.tok === tok))) {
			p.errorf("expected %s, got %s (%s)", new (go$sliceType(go$emptyInterface))([new Go$String(scanner.TokenString(tok)), new Go$String(scanner.TokenString(p.tok)), new Go$String(lit)]));
		}
		p.next();
		return lit;
	};
	parser.prototype.expect = function(tok) { return this.go$val.expect(tok); };
	parser.Ptr.prototype.expectSpecial = function(tok) {
		var p, sep, i;
		p = this;
		sep = 120;
		i = 0;
		while (i < tok.length && (p.tok === (tok.charCodeAt(i) >> 0)) && sep > 32) {
			sep = p.scanner.Peek();
			p.next();
			i = i + 1 >> 0;
		}
		if (i < tok.length) {
			p.errorf("expected %q, got %q", new (go$sliceType(go$emptyInterface))([new Go$String(tok), new Go$String(tok.substring(0, i))]));
		}
	};
	parser.prototype.expectSpecial = function(tok) { return this.go$val.expectSpecial(tok); };
	parser.Ptr.prototype.expectKeyword = function(keyword) {
		var p, lit;
		p = this;
		lit = p.expect(-2);
		if (!(lit === keyword)) {
			p.errorf("expected keyword %s, got %q", new (go$sliceType(go$emptyInterface))([new Go$String(keyword), new Go$String(lit)]));
		}
	};
	parser.prototype.expectKeyword = function(keyword) { return this.go$val.expectKeyword(keyword); };
	parser.Ptr.prototype.parsePackageId = function() {
		var p, _tuple, id, err;
		p = this;
		_tuple = strconv.Unquote(p.expect(-6)), id = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			p.error(err);
		}
		if (id === "") {
			id = p.id;
		}
		return id;
	};
	parser.prototype.parsePackageId = function() { return this.go$val.parsePackageId(); };
	parser.Ptr.prototype.parsePackageName = function() {
		var p;
		p = this;
		return p.expect(-2);
	};
	parser.prototype.parsePackageName = function() { return this.go$val.parsePackageName(); };
	parser.Ptr.prototype.parseDotIdent = function() {
		var p, ident, sep;
		p = this;
		ident = "";
		if (!((p.tok === -3))) {
			sep = 120;
			while (((p.tok === -2) || (p.tok === -3) || (p.tok === 183)) && sep > 32) {
				ident = ident + (p.lit);
				sep = p.scanner.Peek();
				p.next();
			}
		}
		if (ident === "") {
			p.expect(-2);
		}
		return ident;
	};
	parser.prototype.parseDotIdent = function() { return this.go$val.parseDotIdent(); };
	parser.Ptr.prototype.parseQualifiedName = function() {
		var id, name, p;
		id = "";
		name = "";
		p = this;
		p.expect(64);
		id = p.parsePackageId();
		p.expect(46);
		if (p.tok === 63) {
			p.next();
		} else {
			name = p.parseDotIdent();
		}
		return [id, name];
	};
	parser.prototype.parseQualifiedName = function() { return this.go$val.parseQualifiedName(); };
	parser.Ptr.prototype.getPkg = function(id, name) {
		var p, _entry, pkg, _key;
		p = this;
		if (id === "unsafe") {
			return types.Unsafe;
		}
		pkg = (_entry = p.imports[id], _entry !== undefined ? _entry.v : (go$ptrType(types.Package)).nil);
		if (pkg === (go$ptrType(types.Package)).nil && !(name === "")) {
			pkg = types.NewPackage(id, name);
			_key = id, (p.imports || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: pkg };
		}
		return pkg;
	};
	parser.prototype.getPkg = function(id, name) { return this.go$val.getPkg(id, name); };
	parser.Ptr.prototype.parseExportedName = function() {
		var pkg, name, p, _tuple, id;
		pkg = (go$ptrType(types.Package)).nil;
		name = "";
		p = this;
		_tuple = p.parseQualifiedName(), id = _tuple[0], name = _tuple[1];
		pkg = p.getPkg(id, "");
		if (pkg === (go$ptrType(types.Package)).nil) {
			p.errorf("%s package not found", new (go$sliceType(go$emptyInterface))([new Go$String(id)]));
		}
		return [pkg, name];
	};
	parser.prototype.parseExportedName = function() { return this.go$val.parseExportedName(); };
	parser.Ptr.prototype.parseBasicType = function() {
		var p, id, obj, ok, _tuple, obj$1;
		p = this;
		id = p.expect(-2);
		obj = types.Universe.Lookup(id);
		if (_tuple = (obj !== null && obj.constructor === (go$ptrType(types.TypeName)) ? [obj.go$val, true] : [(go$ptrType(types.TypeName)).nil, false]), obj$1 = _tuple[0], ok = _tuple[1], ok) {
			return obj$1.object.Type();
		}
		p.errorf("not a basic type: %s", new (go$sliceType(go$emptyInterface))([new Go$String(id)]));
		return null;
	};
	parser.prototype.parseBasicType = function() { return this.go$val.parseBasicType(); };
	parser.Ptr.prototype.parseArrayType = function() {
		var p, lit, elem, _tuple, n, err;
		p = this;
		lit = p.expect(-3);
		p.expect(93);
		elem = p.parseType();
		_tuple = strconv.ParseInt(lit, 10, 64), n = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			p.error(err);
		}
		return types.NewArray(elem, n);
	};
	parser.prototype.parseArrayType = function() { return this.go$val.parseArrayType(); };
	parser.Ptr.prototype.parseMapType = function() {
		var p, key, elem;
		p = this;
		p.expectKeyword("map");
		p.expect(91);
		key = p.parseType();
		p.expect(93);
		elem = p.parseType();
		return types.NewMap(key, elem);
	};
	parser.prototype.parseMapType = function() { return this.go$val.parseMapType(); };
	parser.Ptr.prototype.parseName = function(materializePkg) {
		var pkg, name, p, _ref, _entry, _entry$1, id, _tuple;
		pkg = (go$ptrType(types.Package)).nil;
		name = "";
		p = this;
		_ref = p.tok;
		if (_ref === -2) {
			pkg = (_entry = p.imports[p.id], _entry !== undefined ? _entry.v : (go$ptrType(types.Package)).nil);
			name = p.lit;
			p.next();
		} else if (_ref === 63) {
			pkg = (_entry$1 = p.imports[p.id], _entry$1 !== undefined ? _entry$1.v : (go$ptrType(types.Package)).nil);
			p.next();
		} else if (_ref === 64) {
			id = "";
			_tuple = p.parseQualifiedName(), id = _tuple[0], name = _tuple[1];
			if (materializePkg) {
				pkg = p.getPkg(id, "");
				if (pkg === (go$ptrType(types.Package)).nil) {
					pkg = types.NewPackage(id, "");
				}
			}
		} else {
			p.error(new Go$String("name expected"));
		}
		return [pkg, name];
	};
	parser.prototype.parseName = function(materializePkg) { return this.go$val.parseName(materializePkg); };
	deref = function(typ) {
		var p, _tuple;
		if (_tuple = (typ !== null && typ.constructor === (go$ptrType(types.Pointer)) ? [typ.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), p = _tuple[0], !(p === (go$ptrType(types.Pointer)).nil)) {
			return p.Elem();
		}
		return typ;
	};
	parser.Ptr.prototype.parseField = function() {
		var p, _tuple, pkg, name, typ, anonymous, typ$1, _ref, _type, tag, s, err, _tuple$1;
		p = this;
		_tuple = p.parseName(true), pkg = _tuple[0], name = _tuple[1];
		typ = p.parseType();
		anonymous = false;
		if (name === "") {
			_ref = deref(typ);
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === (go$ptrType(types.Basic))) {
				typ$1 = _ref.go$val;
				pkg = (go$ptrType(types.Package)).nil;
				name = typ$1.Name();
			} else if (_type === (go$ptrType(types.Named))) {
				typ$1 = _ref.go$val;
				name = typ$1.Obj().object.Name();
			} else {
				typ$1 = _ref;
				p.errorf("anonymous field expected", new (go$sliceType(go$emptyInterface))([]));
			}
			anonymous = true;
		}
		tag = "";
		if (p.tok === -6) {
			s = p.expect(-6);
			err = null;
			_tuple$1 = strconv.Unquote(s), tag = _tuple$1[0], err = _tuple$1[1];
			if (!(go$interfaceIsEqual(err, null))) {
				p.errorf("invalid struct tag %s: %s", new (go$sliceType(go$emptyInterface))([new Go$String(s), err]));
			}
		}
		return [types.NewField(0, pkg, name, typ, anonymous), tag];
	};
	parser.prototype.parseField = function() { return this.go$val.parseField(); };
	parser.Ptr.prototype.parseStructType = function() {
		var p, fields, tags, i, _tuple, fld, tag;
		p = this;
		fields = (go$sliceType((go$ptrType(types.Var)))).nil;
		tags = (go$sliceType(Go$String)).nil;
		p.expectKeyword("struct");
		p.expect(123);
		i = 0;
		while (!((p.tok === 125)) && !((p.tok === -1))) {
			if (i > 0) {
				p.expect(59);
			}
			_tuple = p.parseField(), fld = _tuple[0], tag = _tuple[1];
			if (!(tag === "") && tags === (go$sliceType(Go$String)).nil) {
				tags = (go$sliceType(Go$String)).make(i, 0, function() { return ""; });
			}
			if (!(tags === (go$sliceType(Go$String)).nil)) {
				tags = go$append(tags, tag);
			}
			fields = go$append(fields, fld);
			i = i + 1 >> 0;
		}
		p.expect(125);
		return types.NewStruct(fields, tags);
	};
	parser.prototype.parseStructType = function() { return this.go$val.parseStructType(); };
	parser.Ptr.prototype.parseParameter = function() {
		var par, isVariadic, p, _tuple, name, i, typ;
		par = (go$ptrType(types.Var)).nil;
		isVariadic = false;
		p = this;
		_tuple = p.parseName(false), name = _tuple[1];
		if (i = strings.Index(name, "\xC2\xB7"), i >= 0) {
			name = name.substring(0, i);
		}
		if (p.tok === 46) {
			p.expectSpecial("...");
			isVariadic = true;
		}
		typ = p.parseType();
		if (isVariadic) {
			typ = types.NewSlice(typ);
		}
		if (p.tok === -6) {
			p.next();
		}
		par = types.NewVar(0, (go$ptrType(types.Package)).nil, name, typ);
		return [par, isVariadic];
	};
	parser.prototype.parseParameter = function() { return this.go$val.parseParameter(); };
	parser.Ptr.prototype.parseParameters = function() {
		var list, isVariadic, p, _tuple, par, variadic;
		list = (go$sliceType((go$ptrType(types.Var)))).nil;
		isVariadic = false;
		p = this;
		p.expect(40);
		while (!((p.tok === 41)) && !((p.tok === -1))) {
			if (list.length > 0) {
				p.expect(44);
			}
			_tuple = p.parseParameter(), par = _tuple[0], variadic = _tuple[1];
			list = go$append(list, par);
			if (variadic) {
				if (isVariadic) {
					p.error(new Go$String("... not on final argument"));
				}
				isVariadic = true;
			}
		}
		p.expect(41);
		return [list, isVariadic];
	};
	parser.prototype.parseParameters = function() { return this.go$val.parseParameters(); };
	parser.Ptr.prototype.parseSignature = function(recv) {
		var p, _tuple, params, isVariadic, results, variadic, _tuple$1;
		p = this;
		_tuple = p.parseParameters(), params = _tuple[0], isVariadic = _tuple[1];
		results = (go$sliceType((go$ptrType(types.Var)))).nil;
		if (p.tok === 40) {
			variadic = false;
			_tuple$1 = p.parseParameters(), results = _tuple$1[0], variadic = _tuple$1[1];
			if (variadic) {
				p.error(new Go$String("... not permitted on result type"));
			}
		}
		return types.NewSignature((go$ptrType(types.Scope)).nil, recv, types.NewTuple(params), types.NewTuple(results), isVariadic);
	};
	parser.prototype.parseSignature = function(recv) { return this.go$val.parseSignature(recv); };
	parser.Ptr.prototype.parseInterfaceType = function() {
		var p, methods, i, _tuple, pkg, name, sig;
		p = this;
		methods = (go$sliceType((go$ptrType(types.Func)))).nil;
		p.expectKeyword("interface");
		p.expect(123);
		i = 0;
		while (!((p.tok === 125)) && !((p.tok === -1))) {
			if (i > 0) {
				p.expect(59);
			}
			_tuple = p.parseName(true), pkg = _tuple[0], name = _tuple[1];
			sig = p.parseSignature((go$ptrType(types.Var)).nil);
			methods = go$append(methods, types.NewFunc(0, pkg, name, sig));
			i = i + 1 >> 0;
		}
		p.expect(125);
		return types.NewInterface(methods, (go$sliceType((go$ptrType(types.Named)))).nil);
	};
	parser.prototype.parseInterfaceType = function() { return this.go$val.parseInterfaceType(); };
	parser.Ptr.prototype.parseChanType = function() {
		var p, dir, elem;
		p = this;
		dir = 0;
		if (p.tok === -2) {
			p.expectKeyword("chan");
			if (p.tok === 60) {
				p.expectSpecial("<-");
				dir = 1;
			}
		} else {
			p.expectSpecial("<-");
			p.expectKeyword("chan");
			dir = 2;
		}
		elem = p.parseType();
		return types.NewChan(dir, elem);
	};
	parser.prototype.parseChanType = function() { return this.go$val.parseChanType(); };
	parser.Ptr.prototype.parseType = function() {
		var p, _ref, _ref$1, _tuple, pkg, name, typ;
		p = this;
		_ref = p.tok;
		if (_ref === -2) {
			_ref$1 = p.lit;
			if (_ref$1 === "struct") {
				return p.parseStructType();
			} else if (_ref$1 === "func") {
				p.next();
				return p.parseSignature((go$ptrType(types.Var)).nil);
			} else if (_ref$1 === "interface") {
				return p.parseInterfaceType();
			} else if (_ref$1 === "map") {
				return p.parseMapType();
			} else if (_ref$1 === "chan") {
				return p.parseChanType();
			} else {
				return p.parseBasicType();
			}
		} else if (_ref === 64) {
			_tuple = p.parseExportedName(), pkg = _tuple[0], name = _tuple[1];
			return declTypeName(pkg, name).object.Type();
		} else if (_ref === 91) {
			p.next();
			if (p.tok === 93) {
				p.next();
				return types.NewSlice(p.parseType());
			}
			return p.parseArrayType();
		} else if (_ref === 42) {
			p.next();
			return types.NewPointer(p.parseType());
		} else if (_ref === 60) {
			return p.parseChanType();
		} else if (_ref === 40) {
			p.next();
			typ = p.parseType();
			p.expect(41);
			return typ;
		}
		p.errorf("expected type, got %s (%q)", new (go$sliceType(go$emptyInterface))([new Go$String(scanner.TokenString(p.tok)), new Go$String(p.lit)]));
		return null;
	};
	parser.prototype.parseType = function() { return this.go$val.parseType(); };
	parser.Ptr.prototype.parseImportDecl = function() {
		var p, name;
		p = this;
		p.expectKeyword("import");
		name = p.parsePackageName();
		p.getPkg(p.parsePackageId(), name);
	};
	parser.prototype.parseImportDecl = function() { return this.go$val.parseImportDecl(); };
	parser.Ptr.prototype.parseInt = function() {
		var p, s, _ref;
		p = this;
		s = "";
		_ref = p.tok;
		if (_ref === 45) {
			s = "-";
			p.next();
		} else if (_ref === 43) {
			p.next();
		}
		return s + p.expect(-3);
	};
	parser.prototype.parseInt = function() { return this.go$val.parseInt(); };
	parser.Ptr.prototype.parseNumber = function() {
		var typ, val, p, mant, _tuple, exp, err, denom;
		typ = (go$ptrType(types.Basic)).nil;
		val = null;
		p = this;
		mant = exact.MakeFromLiteral(p.parseInt(), 5);
		if (go$interfaceIsEqual(mant, null)) {
			throw go$panic(new Go$String("invalid mantissa"));
		}
		if (p.lit === "p") {
			p.next();
			_tuple = strconv.ParseInt(p.parseInt(), 10, 0), exp = _tuple[0], err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				p.error(err);
			}
			if ((exp.high < 0 || (exp.high === 0 && exp.low < 0))) {
				denom = exact.MakeInt64(new Go$Int64(0, 1));
				denom = exact.Shift(denom, 20, (new Go$Int64(-exp.high, -exp.low).low >>> 0));
				typ = types.Typ[22];
				val = exact.BinaryOp(mant, 15, denom);
				return [typ, val];
			}
			if ((exp.high > 0 || (exp.high === 0 && exp.low > 0))) {
				mant = exact.Shift(mant, 20, (exp.low >>> 0));
			}
			typ = types.Typ[22];
			val = mant;
			return [typ, val];
		}
		typ = types.Typ[20];
		val = mant;
		return [typ, val];
	};
	parser.prototype.parseNumber = function() { return this.go$val.parseNumber(); };
	parser.Ptr.prototype.parseConstDecl = function() {
		var p, _tuple, pkg, name, typ0, typ, val, _ref, _tuple$1, _tuple$2, _tuple$3, re, _tuple$4, im;
		p = this;
		p.expectKeyword("const");
		_tuple = p.parseExportedName(), pkg = _tuple[0], name = _tuple[1];
		typ0 = null;
		if (!((p.tok === 61))) {
			typ0 = p.parseType();
		}
		p.expect(61);
		typ = null;
		val = null;
		_ref = p.tok;
		switch (0) { default: if (_ref === -2) {
			if (!(p.lit === "true") && !(p.lit === "false")) {
				p.error(new Go$String("expected true or false"));
			}
			typ = types.Typ[19];
			val = exact.MakeBool(p.lit === "true");
			p.next();
		} else if (_ref === 45 || _ref === -3) {
			_tuple$1 = p.parseNumber(), typ = _tuple$1[0], val = _tuple$1[1];
		} else if (_ref === 40) {
			p.next();
			if (p.tok === -5) {
				p.next();
				p.expect(43);
				typ = types.Typ[21];
				_tuple$2 = p.parseNumber(), val = _tuple$2[1];
				p.expect(41);
				break;
			}
			_tuple$3 = p.parseNumber(), re = _tuple$3[1];
			p.expect(43);
			_tuple$4 = p.parseNumber(), im = _tuple$4[1];
			p.expectKeyword("i");
			p.expect(41);
			typ = types.Typ[23];
			val = exact.BinaryOp(re, 12, exact.MakeImag(im));
		} else if (_ref === -5) {
			typ = types.Typ[21];
			val = exact.MakeFromLiteral(p.lit, 8);
			p.next();
		} else if (_ref === -6) {
			typ = types.Typ[24];
			val = exact.MakeFromLiteral(p.lit, 9);
			p.next();
		} else {
			p.errorf("expected literal got %s", new (go$sliceType(go$emptyInterface))([new Go$String(scanner.TokenString(p.tok))]));
		} }
		if (go$interfaceIsEqual(typ0, null)) {
			typ0 = typ;
		}
		pkg.Scope().Insert(types.NewConst(0, pkg, name, typ0, val));
	};
	parser.prototype.parseConstDecl = function() { return this.go$val.parseConstDecl(); };
	parser.Ptr.prototype.parseTypeDecl = function() {
		var p, _tuple, pkg, name, obj, typ, name$1, x;
		p = this;
		p.expectKeyword("type");
		_tuple = p.parseExportedName(), pkg = _tuple[0], name = _tuple[1];
		obj = declTypeName(pkg, name);
		typ = p.parseType();
		if (name$1 = (x = obj.object.Type(), (x !== null && x.constructor === (go$ptrType(types.Named)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Named))))), go$interfaceIsEqual(name$1.Underlying(), null)) {
			name$1.SetUnderlying(typ);
		}
	};
	parser.prototype.parseTypeDecl = function() { return this.go$val.parseTypeDecl(); };
	parser.Ptr.prototype.parseVarDecl = function() {
		var p, _tuple, pkg, name, typ;
		p = this;
		p.expectKeyword("var");
		_tuple = p.parseExportedName(), pkg = _tuple[0], name = _tuple[1];
		typ = p.parseType();
		pkg.Scope().Insert(types.NewVar(0, pkg, name, typ));
	};
	parser.prototype.parseVarDecl = function() { return this.go$val.parseVarDecl(); };
	parser.Ptr.prototype.parseFunc = function(recv) {
		var p, sig, i, _ref;
		p = this;
		sig = p.parseSignature(recv);
		if (p.tok === 123) {
			p.next();
			i = 1;
			while (i > 0) {
				_ref = p.tok;
				if (_ref === 123) {
					i = i + 1 >> 0;
				} else if (_ref === 125) {
					i = i - 1 >> 0;
				}
				p.next();
			}
		}
		return sig;
	};
	parser.prototype.parseFunc = function(recv) { return this.go$val.parseFunc(recv); };
	parser.Ptr.prototype.parseMethodDecl = function() {
		var p, _tuple, recv, x, base, _tuple$1, name, sig, pkg;
		p = this;
		p.expect(40);
		_tuple = p.parseParameter(), recv = _tuple[0];
		p.expect(41);
		base = (x = deref(recv.object.Type()), (x !== null && x.constructor === (go$ptrType(types.Named)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Named)))));
		_tuple$1 = p.parseName(true), name = _tuple$1[1];
		sig = p.parseFunc(recv);
		pkg = base.Obj().object.Pkg();
		base.AddMethod(types.NewFunc(0, pkg, name, sig));
	};
	parser.prototype.parseMethodDecl = function() { return this.go$val.parseMethodDecl(); };
	parser.Ptr.prototype.parseFuncDecl = function() {
		var p, _tuple, pkg, name, typ;
		p = this;
		_tuple = p.parseExportedName(), pkg = _tuple[0], name = _tuple[1];
		typ = p.parseFunc((go$ptrType(types.Var)).nil);
		pkg.Scope().Insert(types.NewFunc(0, pkg, name, typ));
	};
	parser.prototype.parseFuncDecl = function() { return this.go$val.parseFuncDecl(); };
	parser.Ptr.prototype.parseDecl = function() {
		var p, _ref;
		p = this;
		if (p.tok === -2) {
			_ref = p.lit;
			if (_ref === "import") {
				p.parseImportDecl();
			} else if (_ref === "const") {
				p.parseConstDecl();
			} else if (_ref === "type") {
				p.parseTypeDecl();
			} else if (_ref === "var") {
				p.parseVarDecl();
			} else if (_ref === "func") {
				p.next();
				if (p.tok === 40) {
					p.parseMethodDecl();
				} else {
					p.parseFuncDecl();
				}
			}
		}
		p.expect(10);
	};
	parser.prototype.parseDecl = function() { return this.go$val.parseDecl(); };
	parser.Ptr.prototype.parseExport = function() {
		var p, name, pkg, ch, n;
		p = this;
		p.expectKeyword("package");
		name = p.parsePackageName();
		if ((p.tok === -2) && p.lit === "safe") {
			p.next();
		}
		p.expect(10);
		pkg = p.getPkg(p.id, name);
		while (!((p.tok === 36)) && !((p.tok === -1))) {
			p.parseDecl();
		}
		if (ch = p.scanner.Peek(), !((p.tok === 36)) || !((ch === 36))) {
			p.errorf("expected '$$', got %s %c", new (go$sliceType(go$emptyInterface))([new Go$String(scanner.TokenString(p.tok)), new Go$Int32(ch)]));
		}
		if (n = p.scanner.ErrorCount, !((n === 0))) {
			p.errorf("expected no scanner errors, got %d", new (go$sliceType(go$emptyInterface))([new Go$Int(n)]));
		}
		pkg.MarkComplete();
		return pkg;
	};
	parser.prototype.parseExport = function() { return this.go$val.parseExport(); };
	go$pkg.init = function() {
		parser.init([["scanner", "code.google.com/p/go.tools/go/gcimporter", scanner.Scanner, ""], ["tok", "code.google.com/p/go.tools/go/gcimporter", Go$Int32, ""], ["lit", "code.google.com/p/go.tools/go/gcimporter", Go$String, ""], ["id", "code.google.com/p/go.tools/go/gcimporter", Go$String, ""], ["imports", "code.google.com/p/go.tools/go/gcimporter", (go$mapType(Go$String, (go$ptrType(types.Package)))), ""]]);
		(go$ptrType(parser)).methods = [["error", "code.google.com/p/go.tools/go/gcimporter", [go$emptyInterface], [], false], ["errorf", "code.google.com/p/go.tools/go/gcimporter", [Go$String, (go$sliceType(go$emptyInterface))], [], true], ["expect", "code.google.com/p/go.tools/go/gcimporter", [Go$Int32], [Go$String], false], ["expectKeyword", "code.google.com/p/go.tools/go/gcimporter", [Go$String], [], false], ["expectSpecial", "code.google.com/p/go.tools/go/gcimporter", [Go$String], [], false], ["getPkg", "code.google.com/p/go.tools/go/gcimporter", [Go$String, Go$String], [(go$ptrType(types.Package))], false], ["init", "code.google.com/p/go.tools/go/gcimporter", [Go$String, Go$String, io.Reader, (go$mapType(Go$String, (go$ptrType(types.Package))))], [], false], ["next", "code.google.com/p/go.tools/go/gcimporter", [], [], false], ["parseArrayType", "code.google.com/p/go.tools/go/gcimporter", [], [types.Type], false], ["parseBasicType", "code.google.com/p/go.tools/go/gcimporter", [], [types.Type], false], ["parseChanType", "code.google.com/p/go.tools/go/gcimporter", [], [types.Type], false], ["parseConstDecl", "code.google.com/p/go.tools/go/gcimporter", [], [], false], ["parseDecl", "code.google.com/p/go.tools/go/gcimporter", [], [], false], ["parseDotIdent", "code.google.com/p/go.tools/go/gcimporter", [], [Go$String], false], ["parseExport", "code.google.com/p/go.tools/go/gcimporter", [], [(go$ptrType(types.Package))], false], ["parseExportedName", "code.google.com/p/go.tools/go/gcimporter", [], [(go$ptrType(types.Package)), Go$String], false], ["parseField", "code.google.com/p/go.tools/go/gcimporter", [], [(go$ptrType(types.Var)), Go$String], false], ["parseFunc", "code.google.com/p/go.tools/go/gcimporter", [(go$ptrType(types.Var))], [(go$ptrType(types.Signature))], false], ["parseFuncDecl", "code.google.com/p/go.tools/go/gcimporter", [], [], false], ["parseImportDecl", "code.google.com/p/go.tools/go/gcimporter", [], [], false], ["parseInt", "code.google.com/p/go.tools/go/gcimporter", [], [Go$String], false], ["parseInterfaceType", "code.google.com/p/go.tools/go/gcimporter", [], [types.Type], false], ["parseMapType", "code.google.com/p/go.tools/go/gcimporter", [], [types.Type], false], ["parseMethodDecl", "code.google.com/p/go.tools/go/gcimporter", [], [], false], ["parseName", "code.google.com/p/go.tools/go/gcimporter", [Go$Bool], [(go$ptrType(types.Package)), Go$String], false], ["parseNumber", "code.google.com/p/go.tools/go/gcimporter", [], [(go$ptrType(types.Basic)), exact.Value], false], ["parsePackageId", "code.google.com/p/go.tools/go/gcimporter", [], [Go$String], false], ["parsePackageName", "code.google.com/p/go.tools/go/gcimporter", [], [Go$String], false], ["parseParameter", "code.google.com/p/go.tools/go/gcimporter", [], [(go$ptrType(types.Var)), Go$Bool], false], ["parseParameters", "code.google.com/p/go.tools/go/gcimporter", [], [(go$sliceType((go$ptrType(types.Var)))), Go$Bool], false], ["parseQualifiedName", "code.google.com/p/go.tools/go/gcimporter", [], [Go$String, Go$String], false], ["parseSignature", "code.google.com/p/go.tools/go/gcimporter", [(go$ptrType(types.Var))], [(go$ptrType(types.Signature))], false], ["parseStructType", "code.google.com/p/go.tools/go/gcimporter", [], [types.Type], false], ["parseType", "code.google.com/p/go.tools/go/gcimporter", [], [types.Type], false], ["parseTypeDecl", "code.google.com/p/go.tools/go/gcimporter", [], [], false], ["parseVarDecl", "code.google.com/p/go.tools/go/gcimporter", [], [], false]];
		importError.init([["pos", "code.google.com/p/go.tools/go/gcimporter", scanner.Position, ""], ["err", "code.google.com/p/go.tools/go/gcimporter", go$error, ""]]);
		importError.methods = [["Error", "", [], [Go$String], false]];
		(go$ptrType(importError)).methods = [["Error", "", [], [Go$String], false]];
		pkgExts = go$toNativeArray("String", [".a", ".5", ".6", ".8"]);
		types.DefaultImport = Import;
	}
	return go$pkg;
})();
go$packages["encoding/asn1"] = (function() {
	var go$pkg = {}, fmt = go$packages["fmt"], big = go$packages["math/big"], reflect = go$packages["reflect"], time = go$packages["time"], strconv = go$packages["strconv"], strings = go$packages["strings"], bytes = go$packages["bytes"], errors = go$packages["errors"], io = go$packages["io"], utf8 = go$packages["unicode/utf8"], StructuralError, SyntaxError, BitString, ObjectIdentifier, Enumerated, Flag, RawValue, RawContent, tagAndLength, fieldParameters, parseBool, parseInt64, parseInt32, parseBigInt, parseBitString, parseObjectIdentifier, parseBase128Int, parseUTCTime, parseGeneralizedTime, parsePrintableString, isPrintable, parseIA5String, parseT61String, parseUTF8String, parseTagAndLength, parseSequenceOf, invalidLength, parseField, setDefaultValue, Unmarshal, UnmarshalWithParams, parseFieldParameters, getUniversalType, bigOne, bitStringType, objectIdentifierType, enumeratedType, flagType, timeType, rawValueType, rawContentsType, bigIntType;
	StructuralError = go$pkg.StructuralError = go$newType(0, "Struct", "asn1.StructuralError", "StructuralError", "encoding/asn1", function(Msg_) {
		this.go$val = this;
		this.Msg = Msg_ !== undefined ? Msg_ : "";
	});
	SyntaxError = go$pkg.SyntaxError = go$newType(0, "Struct", "asn1.SyntaxError", "SyntaxError", "encoding/asn1", function(Msg_) {
		this.go$val = this;
		this.Msg = Msg_ !== undefined ? Msg_ : "";
	});
	BitString = go$pkg.BitString = go$newType(0, "Struct", "asn1.BitString", "BitString", "encoding/asn1", function(Bytes_, BitLength_) {
		this.go$val = this;
		this.Bytes = Bytes_ !== undefined ? Bytes_ : (go$sliceType(Go$Uint8)).nil;
		this.BitLength = BitLength_ !== undefined ? BitLength_ : 0;
	});
	ObjectIdentifier = go$pkg.ObjectIdentifier = go$newType(0, "Slice", "asn1.ObjectIdentifier", "ObjectIdentifier", "encoding/asn1", null);
	Enumerated = go$pkg.Enumerated = go$newType(4, "Int", "asn1.Enumerated", "Enumerated", "encoding/asn1", null);
	Flag = go$pkg.Flag = go$newType(0, "Bool", "asn1.Flag", "Flag", "encoding/asn1", null);
	RawValue = go$pkg.RawValue = go$newType(0, "Struct", "asn1.RawValue", "RawValue", "encoding/asn1", function(Class_, Tag_, IsCompound_, Bytes_, FullBytes_) {
		this.go$val = this;
		this.Class = Class_ !== undefined ? Class_ : 0;
		this.Tag = Tag_ !== undefined ? Tag_ : 0;
		this.IsCompound = IsCompound_ !== undefined ? IsCompound_ : false;
		this.Bytes = Bytes_ !== undefined ? Bytes_ : (go$sliceType(Go$Uint8)).nil;
		this.FullBytes = FullBytes_ !== undefined ? FullBytes_ : (go$sliceType(Go$Uint8)).nil;
	});
	RawContent = go$pkg.RawContent = go$newType(0, "Slice", "asn1.RawContent", "RawContent", "encoding/asn1", null);
	tagAndLength = go$pkg.tagAndLength = go$newType(0, "Struct", "asn1.tagAndLength", "tagAndLength", "encoding/asn1", function(class$0_, tag_, length_, isCompound_) {
		this.go$val = this;
		this.class$0 = class$0_ !== undefined ? class$0_ : 0;
		this.tag = tag_ !== undefined ? tag_ : 0;
		this.length = length_ !== undefined ? length_ : 0;
		this.isCompound = isCompound_ !== undefined ? isCompound_ : false;
	});
	fieldParameters = go$pkg.fieldParameters = go$newType(0, "Struct", "asn1.fieldParameters", "fieldParameters", "encoding/asn1", function(optional_, explicit_, application_, defaultValue_, tag_, stringType_, set_, omitEmpty_) {
		this.go$val = this;
		this.optional = optional_ !== undefined ? optional_ : false;
		this.explicit = explicit_ !== undefined ? explicit_ : false;
		this.application = application_ !== undefined ? application_ : false;
		this.defaultValue = defaultValue_ !== undefined ? defaultValue_ : (go$ptrType(Go$Int64)).nil;
		this.tag = tag_ !== undefined ? tag_ : (go$ptrType(Go$Int)).nil;
		this.stringType = stringType_ !== undefined ? stringType_ : 0;
		this.set = set_ !== undefined ? set_ : false;
		this.omitEmpty = omitEmpty_ !== undefined ? omitEmpty_ : false;
	});
	StructuralError.Ptr.prototype.Error = function() {
		var _struct, e;
		e = (_struct = this, new StructuralError.Ptr(_struct.Msg));
		return "asn1: structure error: " + e.Msg;
	};
	StructuralError.prototype.Error = function() { return this.go$val.Error(); };
	SyntaxError.Ptr.prototype.Error = function() {
		var _struct, e;
		e = (_struct = this, new SyntaxError.Ptr(_struct.Msg));
		return "asn1: syntax error: " + e.Msg;
	};
	SyntaxError.prototype.Error = function() { return this.go$val.Error(); };
	parseBool = function(bytes$1) {
		var ret, err, x, _ref, _slice, _index, x$1;
		ret = false;
		err = null;
		if (!((bytes$1.length === 1))) {
			err = (x = new SyntaxError.Ptr("invalid boolean"), new x.constructor.Struct(x));
			return [ret, err];
		}
		_ref = (_slice = bytes$1, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (_ref === 0) {
			ret = false;
		} else if (_ref === 255) {
			ret = true;
		} else {
			err = (x$1 = new SyntaxError.Ptr("invalid boolean"), new x$1.constructor.Struct(x$1));
		}
		return [ret, err];
	};
	parseInt64 = function(bytes$1) {
		var ret, err, x, bytesRead, x$1, _slice, _index;
		ret = new Go$Int64(0, 0);
		err = null;
		if (bytes$1.length > 8) {
			err = (x = new StructuralError.Ptr("integer too large"), new x.constructor.Struct(x));
			return [ret, err];
		}
		bytesRead = 0;
		while (bytesRead < bytes$1.length) {
			ret = go$shiftLeft64(ret, 8);
			ret = (x$1 = new Go$Int64(0, (_slice = bytes$1, _index = bytesRead, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))), new Go$Int64(ret.high | x$1.high, (ret.low | x$1.low) >>> 0));
			bytesRead = bytesRead + 1 >> 0;
		}
		ret = go$shiftLeft64(ret, ((64 - ((bytes$1.length << 24 >>> 24) * 8 << 24 >>> 24) << 24 >>> 24)));
		ret = go$shiftRightInt64(ret, ((64 - ((bytes$1.length << 24 >>> 24) * 8 << 24 >>> 24) << 24 >>> 24)));
		return [ret, err];
	};
	parseInt32 = function(bytes$1) {
		var _tuple, ret64, err, x, x$1;
		_tuple = parseInt64(bytes$1), ret64 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [0, err];
		}
		if (!((x = new Go$Int64(0, ((ret64.low + ((ret64.high >> 31) * 4294967296)) >> 0)), (ret64.high === x.high && ret64.low === x.low)))) {
			return [0, (x$1 = new StructuralError.Ptr("integer too large"), new x$1.constructor.Struct(x$1))];
		}
		return [((ret64.low + ((ret64.high >> 31) * 4294967296)) >> 0), null];
	};
	parseBigInt = function(bytes$1) {
		var ret, _slice, _index, notBytes, _ref, _i, i, _slice$1, _index$1, _slice$2, _index$2;
		ret = new big.Int.Ptr();
		if (bytes$1.length > 0 && ((((_slice = bytes$1, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) & 128) >>> 0) === 128)) {
			notBytes = (go$sliceType(Go$Uint8)).make(bytes$1.length, 0, function() { return 0; });
			_ref = notBytes;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				_slice$2 = notBytes, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = ~(_slice$1 = bytes$1, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) << 24 >>> 24) : go$throwRuntimeError("index out of range");
				_i++;
			}
			ret.SetBytes(notBytes);
			ret.Add(ret, bigOne);
			ret.Neg(ret);
			return ret;
		}
		ret.SetBytes(bytes$1);
		return ret;
	};
	BitString.Ptr.prototype.At = function(i) {
		var _struct, b, _q, x, _r, y, y$1, _slice, _index;
		b = (_struct = this, new BitString.Ptr(_struct.Bytes, _struct.BitLength));
		if (i < 0 || i >= b.BitLength) {
			return 0;
		}
		x = (_q = i / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		y = 7 - ((_r = i % 8, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) >>> 0) >>> 0;
		return (((y$1 = y, y$1 < 32 ? ((_slice = b.Bytes, _index = x, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >>> y$1) : 0) << 24 >>> 24) >> 0) & 1;
	};
	BitString.prototype.At = function(i) { return this.go$val.At(i); };
	BitString.Ptr.prototype.RightAlign = function() {
		var _struct, b, _r, shift, a, y, _slice, _index, _slice$1, _index$1, i, y$1, _slice$2, _index$2, _slice$3, _index$3, _lhs, _index$4, _slice$4, _index$5, y$2, _slice$5, _index$6, _slice$6, _index$7;
		b = (_struct = this, new BitString.Ptr(_struct.Bytes, _struct.BitLength));
		shift = ((8 - ((_r = b.BitLength % 8, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"))) >> 0) >>> 0);
		if ((shift === 8) || (b.Bytes.length === 0)) {
			return b.Bytes;
		}
		a = (go$sliceType(Go$Uint8)).make(b.Bytes.length, 0, function() { return 0; });
		_slice$1 = a, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (y = shift, y < 32 ? ((_slice = b.Bytes, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >>> y) : 0) << 24 >>> 24) : go$throwRuntimeError("index out of range");
		i = 1;
		while (i < b.Bytes.length) {
			_slice$3 = a, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (y$1 = ((8 - shift >>> 0)), y$1 < 32 ? ((_slice$2 = b.Bytes, _index$2 = (i - 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) << y$1) : 0) << 24 >>> 24) : go$throwRuntimeError("index out of range");
			_lhs = a, _index$4 = i, _slice$6 = _lhs, _index$7 = _index$4, (_index$7 >= 0 && _index$7 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$7] = ((_slice$4 = _lhs, _index$5 = _index$4, (_index$5 >= 0 && _index$5 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$5] : go$throwRuntimeError("index out of range")) | (((y$2 = shift, y$2 < 32 ? ((_slice$5 = b.Bytes, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$6] : go$throwRuntimeError("index out of range")) >>> y$2) : 0) << 24 >>> 24))) >>> 0) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		return a;
	};
	BitString.prototype.RightAlign = function() { return this.go$val.RightAlign(); };
	parseBitString = function(bytes$1) {
		var ret, err, x, _struct, _slice, _index, paddingBits, _slice$1, _index$1, y, _slice$2, _index$2, x$1, _struct$1, x$2, x$3, _struct$2;
		ret = new BitString.Ptr();
		err = null;
		if (bytes$1.length === 0) {
			err = (x = new SyntaxError.Ptr("zero length BIT STRING"), new x.constructor.Struct(x));
			return [(_struct = ret, new BitString.Ptr(_struct.Bytes, _struct.BitLength)), err];
		}
		paddingBits = ((_slice = bytes$1, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0);
		if (paddingBits > 7 || (bytes$1.length === 1) && paddingBits > 0 || !(((((_slice$1 = bytes$1, _index$1 = (bytes$1.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) & (((((y = (_slice$2 = bytes$1, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), y < 32 ? (1 << y) : 0) << 24 >>> 24)) - 1 << 24 >>> 24))) >>> 0) === 0))) {
			err = (x$1 = new SyntaxError.Ptr("invalid padding bits in BIT STRING"), new x$1.constructor.Struct(x$1));
			return [(_struct$1 = ret, new BitString.Ptr(_struct$1.Bytes, _struct$1.BitLength)), err];
		}
		ret.BitLength = (x$2 = (bytes$1.length - 1 >> 0), x$3 = 8, (((x$2 >>> 16 << 16) * x$3 >> 0) + (x$2 << 16 >>> 16) * x$3) >> 0) - paddingBits >> 0;
		ret.Bytes = go$subslice(bytes$1, 1);
		return [(_struct$2 = ret, new BitString.Ptr(_struct$2.Bytes, _struct$2.BitLength)), err];
	};
	ObjectIdentifier.prototype.Equal = function(other) {
		var oi, i, _slice, _index, _slice$1, _index$1;
		oi = this;
		if (!((oi.length === other.length))) {
			return false;
		}
		i = 0;
		while (i < oi.length) {
			if (!(((_slice = oi, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === (_slice$1 = other, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))))) {
				return false;
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	go$ptrType(ObjectIdentifier).prototype.Equal = function(other) { return this.go$get().Equal(other); };
	parseObjectIdentifier = function(bytes$1) {
		var s, err, x, _tuple, v, offset, _q, _slice, _index, _r, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, i, _tuple$1, _slice$4, _index$4;
		s = (go$sliceType(Go$Int)).nil;
		err = null;
		if (bytes$1.length === 0) {
			err = (x = new SyntaxError.Ptr("zero length OBJECT IDENTIFIER"), new x.constructor.Struct(x));
			return [s, err];
		}
		s = (go$sliceType(Go$Int)).make(bytes$1.length + 1 >> 0, 0, function() { return 0; });
		_tuple = parseBase128Int(bytes$1, 0), v = _tuple[0], offset = _tuple[1], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			return [s, err];
		}
		if (v < 80) {
			_slice = s, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = (_q = v / 40, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"))) : go$throwRuntimeError("index out of range");
			_slice$1 = s, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (_r = v % 40, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"))) : go$throwRuntimeError("index out of range");
		} else {
			_slice$2 = s, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 2) : go$throwRuntimeError("index out of range");
			_slice$3 = s, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = v - 80 >> 0) : go$throwRuntimeError("index out of range");
		}
		i = 2;
		while (offset < bytes$1.length) {
			_tuple$1 = parseBase128Int(bytes$1, offset), v = _tuple$1[0], offset = _tuple$1[1], err = _tuple$1[2];
			if (!(go$interfaceIsEqual(err, null))) {
				return [s, err];
			}
			_slice$4 = s, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = v) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		s = go$subslice(s, 0, i);
		return [s, err];
	};
	parseBase128Int = function(bytes$1, initOffset) {
		var ret, offset, err, shifted, x, _slice, _index, b, x$1;
		ret = 0;
		offset = 0;
		err = null;
		offset = initOffset;
		shifted = 0;
		while (offset < bytes$1.length) {
			if (shifted > 4) {
				err = (x = new StructuralError.Ptr("base 128 integer too large"), new x.constructor.Struct(x));
				return [ret, offset, err];
			}
			ret = ret << 7 >> 0;
			b = (_slice = bytes$1, _index = offset, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			ret = ret | ((((b & 127) >>> 0) >> 0));
			offset = offset + 1 >> 0;
			if (((b & 128) >>> 0) === 0) {
				return [ret, offset, err];
			}
			shifted = shifted + 1 >> 0;
		}
		err = (x$1 = new SyntaxError.Ptr("truncated base 128 integer"), new x$1.constructor.Struct(x$1));
		return [ret, offset, err];
	};
	parseUTCTime = function(bytes$1) {
		var ret, err, s, _tuple, _struct, _tuple$1, _struct$1, _struct$2, _struct$3;
		ret = new time.Time.Ptr();
		err = null;
		s = go$bytesToString(bytes$1);
		_tuple = time.Parse("0601021504Z0700", s), ret = (_struct = _tuple[0], new time.Time.Ptr(_struct.sec, _struct.nsec, _struct.loc)), err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = time.Parse("060102150405Z0700", s), ret = (_struct$1 = _tuple$1[0], new time.Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc)), err = _tuple$1[1];
		}
		if (go$interfaceIsEqual(err, null) && ret.Year() >= 2050) {
			ret = (_struct$2 = ret.AddDate(-100, 0, 0), new time.Time.Ptr(_struct$2.sec, _struct$2.nsec, _struct$2.loc));
		}
		return [(_struct$3 = ret, new time.Time.Ptr(_struct$3.sec, _struct$3.nsec, _struct$3.loc)), err];
	};
	parseGeneralizedTime = function(bytes$1) {
		var ret, err, _tuple, _struct, _struct$1;
		ret = new time.Time.Ptr();
		err = null;
		_tuple = time.Parse("20060102150405Z0700", go$bytesToString(bytes$1)), ret = (_struct = _tuple[0], new time.Time.Ptr(_struct.sec, _struct.nsec, _struct.loc)), err = _tuple[1];
		return [(_struct$1 = ret, new time.Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc)), err];
	};
	parsePrintableString = function(bytes$1) {
		var ret, err, _ref, _i, _slice, _index, b, x;
		ret = "";
		err = null;
		_ref = bytes$1;
		_i = 0;
		while (_i < _ref.length) {
			b = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!isPrintable(b)) {
				err = (x = new SyntaxError.Ptr("PrintableString contains invalid character"), new x.constructor.Struct(x));
				return [ret, err];
			}
			_i++;
		}
		ret = go$bytesToString(bytes$1);
		return [ret, err];
	};
	isPrintable = function(b) {
		return 97 <= b && b <= 122 || 65 <= b && b <= 90 || 48 <= b && b <= 57 || 39 <= b && b <= 41 || 43 <= b && b <= 47 || (b === 32) || (b === 58) || (b === 61) || (b === 63) || (b === 42);
	};
	parseIA5String = function(bytes$1) {
		var ret, err, _ref, _i, _slice, _index, b, x;
		ret = "";
		err = null;
		_ref = bytes$1;
		_i = 0;
		while (_i < _ref.length) {
			b = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (b >= 128) {
				err = (x = new SyntaxError.Ptr("IA5String contains invalid character"), new x.constructor.Struct(x));
				return [ret, err];
			}
			_i++;
		}
		ret = go$bytesToString(bytes$1);
		return [ret, err];
	};
	parseT61String = function(bytes$1) {
		var ret, err, _tuple;
		ret = "";
		err = null;
		_tuple = [go$bytesToString(bytes$1), null], ret = _tuple[0], err = _tuple[1];
		return [ret, err];
	};
	parseUTF8String = function(bytes$1) {
		var ret, err, _tuple;
		ret = "";
		err = null;
		_tuple = [go$bytesToString(bytes$1), null], ret = _tuple[0], err = _tuple[1];
		return [ret, err];
	};
	parseTagAndLength = function(bytes$1, initOffset) {
		var ret, offset, err, _slice, _index, b, _tuple, _struct, x, _struct$1, _slice$1, _index$1, numBytes, x$1, _struct$2, i, x$2, _struct$3, _slice$2, _index$2, x$3, _struct$4, x$4, _struct$5, _struct$6;
		ret = new tagAndLength.Ptr();
		offset = 0;
		err = null;
		offset = initOffset;
		b = (_slice = bytes$1, _index = offset, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		offset = offset + 1 >> 0;
		ret.class$0 = ((b >>> 6 << 24 >>> 24) >> 0);
		ret.isCompound = ((b & 32) >>> 0) === 32;
		ret.tag = (((b & 31) >>> 0) >> 0);
		if (ret.tag === 31) {
			_tuple = parseBase128Int(bytes$1, offset), ret.tag = _tuple[0], offset = _tuple[1], err = _tuple[2];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(_struct = ret, new tagAndLength.Ptr(_struct.class$0, _struct.tag, _struct.length, _struct.isCompound)), offset, err];
			}
		}
		if (offset >= bytes$1.length) {
			err = (x = new SyntaxError.Ptr("truncated tag or length"), new x.constructor.Struct(x));
			return [(_struct$1 = ret, new tagAndLength.Ptr(_struct$1.class$0, _struct$1.tag, _struct$1.length, _struct$1.isCompound)), offset, err];
		}
		b = (_slice$1 = bytes$1, _index$1 = offset, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		offset = offset + 1 >> 0;
		if (((b & 128) >>> 0) === 0) {
			ret.length = (((b & 127) >>> 0) >> 0);
		} else {
			numBytes = (((b & 127) >>> 0) >> 0);
			if (numBytes === 0) {
				err = (x$1 = new SyntaxError.Ptr("indefinite length found (not DER)"), new x$1.constructor.Struct(x$1));
				return [(_struct$2 = ret, new tagAndLength.Ptr(_struct$2.class$0, _struct$2.tag, _struct$2.length, _struct$2.isCompound)), offset, err];
			}
			ret.length = 0;
			i = 0;
			while (i < numBytes) {
				if (offset >= bytes$1.length) {
					err = (x$2 = new SyntaxError.Ptr("truncated tag or length"), new x$2.constructor.Struct(x$2));
					return [(_struct$3 = ret, new tagAndLength.Ptr(_struct$3.class$0, _struct$3.tag, _struct$3.length, _struct$3.isCompound)), offset, err];
				}
				b = (_slice$2 = bytes$1, _index$2 = offset, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				offset = offset + 1 >> 0;
				if (ret.length >= 8388608) {
					err = (x$3 = new StructuralError.Ptr("length too large"), new x$3.constructor.Struct(x$3));
					return [(_struct$4 = ret, new tagAndLength.Ptr(_struct$4.class$0, _struct$4.tag, _struct$4.length, _struct$4.isCompound)), offset, err];
				}
				ret.length = ret.length << 8 >> 0;
				ret.length = ret.length | ((b >> 0));
				if (ret.length === 0) {
					err = (x$4 = new StructuralError.Ptr("superfluous leading zeros in length"), new x$4.constructor.Struct(x$4));
					return [(_struct$5 = ret, new tagAndLength.Ptr(_struct$5.class$0, _struct$5.tag, _struct$5.length, _struct$5.isCompound)), offset, err];
				}
				i = i + 1 >> 0;
			}
		}
		return [(_struct$6 = ret, new tagAndLength.Ptr(_struct$6.class$0, _struct$6.tag, _struct$6.length, _struct$6.isCompound)), offset, err];
	};
	parseSequenceOf = function(bytes$1, sliceType, elemType) {
		var ret, err, _tuple, expectedTag, compoundType, ok, x, _struct, numElements, offset, t, _tuple$1, _struct$1, _struct$2, x$1, _struct$3, x$2, _struct$4, _struct$5, params, offset$1, i, _tuple$2, _struct$6, _struct$7, _struct$8, _struct$9;
		ret = new reflect.Value.Ptr();
		err = null;
		_tuple = getUniversalType(elemType), expectedTag = _tuple[0], compoundType = _tuple[1], ok = _tuple[2];
		if (!ok) {
			err = (x = new StructuralError.Ptr("unknown Go type for slice"), new x.constructor.Struct(x));
			return [(_struct = ret, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), err];
		}
		numElements = 0;
		offset = 0;
		while (offset < bytes$1.length) {
			t = new tagAndLength.Ptr();
			_tuple$1 = parseTagAndLength(bytes$1, offset), t = (_struct$1 = _tuple$1[0], new tagAndLength.Ptr(_struct$1.class$0, _struct$1.tag, _struct$1.length, _struct$1.isCompound)), offset = _tuple$1[1], err = _tuple$1[2];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(_struct$2 = ret, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), err];
			}
			if (t.tag === 27) {
				t.tag = 19;
			}
			if (!((t.class$0 === 0)) || !(t.isCompound === compoundType) || !((t.tag === expectedTag))) {
				err = (x$1 = new StructuralError.Ptr("sequence tag mismatch"), new x$1.constructor.Struct(x$1));
				return [(_struct$3 = ret, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), err];
			}
			if (invalidLength(offset, t.length, bytes$1.length)) {
				err = (x$2 = new SyntaxError.Ptr("truncated sequence"), new x$2.constructor.Struct(x$2));
				return [(_struct$4 = ret, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), err];
			}
			offset = offset + (t.length) >> 0;
			numElements = numElements + 1 >> 0;
		}
		ret = (_struct$5 = reflect.MakeSlice(sliceType, numElements, numElements), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag));
		params = new fieldParameters.Ptr(false, false, false, (go$ptrType(Go$Int64)).nil, (go$ptrType(Go$Int)).nil, 0, false, false);
		offset$1 = 0;
		i = 0;
		while (i < numElements) {
			_tuple$2 = parseField((_struct$6 = ret.Index(i), new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)), bytes$1, offset$1, (_struct$7 = params, new fieldParameters.Ptr(_struct$7.optional, _struct$7.explicit, _struct$7.application, _struct$7.defaultValue, _struct$7.tag, _struct$7.stringType, _struct$7.set, _struct$7.omitEmpty))), offset$1 = _tuple$2[0], err = _tuple$2[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(_struct$8 = ret, new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag)), err];
			}
			i = i + 1 >> 0;
		}
		return [(_struct$9 = ret, new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag)), err];
	};
	invalidLength = function(offset, length, sliceLength) {
		return (offset + length >> 0) < offset || (offset + length >> 0) > sliceLength;
	};
	parseField = function(v, bytes$1, initOffset, params) {
		var offset, err, fieldType, _struct, _struct$1, x, t, _tuple, _struct$2, x$1, result, _struct$3, ifaceType, t$1, _tuple$1, _struct$4, x$2, result$1, innerBytes, _ref, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _struct$5, _tuple$10, universalTag, compoundType, ok1, x$3, _tuple$11, _struct$6, t$2, expectedClass, _tuple$12, _struct$7, x$4, _struct$8, _struct$9, ok, x$5, _ref$1, expectedClass$1, expectedTag, _struct$10, _struct$11, ok$1, x$6, x$7, innerBytes$1, _ref$2, _tuple$13, newSlice, err1, _struct$12, _struct$13, _struct$14, _tuple$14, _struct$15, bs, err1$1, _struct$16, time$1, err1$2, _tuple$15, _struct$17, _tuple$16, _struct$18, _struct$19, _tuple$17, parsedInt, err1$3, parsedInt$1, _struct$20, _struct$21, val, _ref$3, _tuple$18, parsedBool, err1$4, _tuple$19, parsedInt$2, err1$5, _tuple$20, parsedInt$3, err1$6, structType, bytes$2, _struct$22, innerOffset, i, _struct$23, field, _tuple$21, _struct$24, _struct$25, sliceType, _struct$26, _struct$27, _struct$28, _tuple$22, _struct$29, newSlice$1, err1$7, _struct$30, v$1, _ref$4, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, x$8, x$9;
		offset = 0;
		err = null;
		offset = initOffset;
		fieldType = v.Type();
		if (offset === bytes$1.length) {
			if (!setDefaultValue((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), (_struct$1 = params, new fieldParameters.Ptr(_struct$1.optional, _struct$1.explicit, _struct$1.application, _struct$1.defaultValue, _struct$1.tag, _struct$1.stringType, _struct$1.set, _struct$1.omitEmpty)))) {
				err = (x = new SyntaxError.Ptr("sequence truncated"), new x.constructor.Struct(x));
			}
			return [offset, err];
		}
		if (go$interfaceIsEqual(fieldType, rawValueType)) {
			t = new tagAndLength.Ptr();
			_tuple = parseTagAndLength(bytes$1, offset), t = (_struct$2 = _tuple[0], new tagAndLength.Ptr(_struct$2.class$0, _struct$2.tag, _struct$2.length, _struct$2.isCompound)), offset = _tuple[1], err = _tuple[2];
			if (!(go$interfaceIsEqual(err, null))) {
				return [offset, err];
			}
			if (invalidLength(offset, t.length, bytes$1.length)) {
				err = (x$1 = new SyntaxError.Ptr("data truncated"), new x$1.constructor.Struct(x$1));
				return [offset, err];
			}
			result = new RawValue.Ptr(t.class$0, t.tag, t.isCompound, go$subslice(bytes$1, offset, (offset + t.length >> 0)), go$subslice(bytes$1, initOffset, (offset + t.length >> 0)));
			offset = offset + (t.length) >> 0;
			v.Set((_struct$3 = reflect.ValueOf(new result.constructor.Struct(result)), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)));
			return [offset, err];
		}
		if (ifaceType = fieldType, (ifaceType.Kind() === 20) && (ifaceType.NumMethod() === 0)) {
			t$1 = new tagAndLength.Ptr();
			_tuple$1 = parseTagAndLength(bytes$1, offset), t$1 = (_struct$4 = _tuple$1[0], new tagAndLength.Ptr(_struct$4.class$0, _struct$4.tag, _struct$4.length, _struct$4.isCompound)), offset = _tuple$1[1], err = _tuple$1[2];
			if (!(go$interfaceIsEqual(err, null))) {
				return [offset, err];
			}
			if (invalidLength(offset, t$1.length, bytes$1.length)) {
				err = (x$2 = new SyntaxError.Ptr("data truncated"), new x$2.constructor.Struct(x$2));
				return [offset, err];
			}
			result$1 = null;
			if (!t$1.isCompound && (t$1.class$0 === 0)) {
				innerBytes = go$subslice(bytes$1, offset, (offset + t$1.length >> 0));
				_ref = t$1.tag;
				if (_ref === 19) {
					_tuple$2 = parsePrintableString(innerBytes), result$1 = new Go$String(_tuple$2[0]), err = _tuple$2[1];
				} else if (_ref === 22) {
					_tuple$3 = parseIA5String(innerBytes), result$1 = new Go$String(_tuple$3[0]), err = _tuple$3[1];
				} else if (_ref === 20) {
					_tuple$4 = parseT61String(innerBytes), result$1 = new Go$String(_tuple$4[0]), err = _tuple$4[1];
				} else if (_ref === 12) {
					_tuple$5 = parseUTF8String(innerBytes), result$1 = new Go$String(_tuple$5[0]), err = _tuple$5[1];
				} else if (_ref === 2) {
					_tuple$6 = parseInt64(innerBytes), result$1 = _tuple$6[0], err = _tuple$6[1];
				} else if (_ref === 3) {
					_tuple$7 = parseBitString(innerBytes), result$1 = new _tuple$7[0].constructor.Struct(_tuple$7[0]), err = _tuple$7[1];
				} else if (_ref === 6) {
					_tuple$8 = parseObjectIdentifier(innerBytes), result$1 = _tuple$8[0], err = _tuple$8[1];
				} else if (_ref === 23) {
					_tuple$9 = parseUTCTime(innerBytes), result$1 = new _tuple$9[0].constructor.Struct(_tuple$9[0]), err = _tuple$9[1];
				} else if (_ref === 4) {
					result$1 = innerBytes;
				} else {
				}
			}
			offset = offset + (t$1.length) >> 0;
			if (!(go$interfaceIsEqual(err, null))) {
				return [offset, err];
			}
			if (!(go$interfaceIsEqual(result$1, null))) {
				v.Set((_struct$5 = reflect.ValueOf(result$1), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)));
			}
			return [offset, err];
		}
		_tuple$10 = getUniversalType(fieldType), universalTag = _tuple$10[0], compoundType = _tuple$10[1], ok1 = _tuple$10[2];
		if (!ok1) {
			err = (x$3 = new StructuralError.Ptr(fmt.Sprintf("unknown Go type: %v", new (go$sliceType(go$emptyInterface))([fieldType]))), new x$3.constructor.Struct(x$3));
			return [offset, err];
		}
		_tuple$11 = parseTagAndLength(bytes$1, offset), t$2 = (_struct$6 = _tuple$11[0], new tagAndLength.Ptr(_struct$6.class$0, _struct$6.tag, _struct$6.length, _struct$6.isCompound)), offset = _tuple$11[1], err = _tuple$11[2];
		if (!(go$interfaceIsEqual(err, null))) {
			return [offset, err];
		}
		if (params.explicit) {
			expectedClass = 2;
			if (params.application) {
				expectedClass = 1;
			}
			if ((t$2.class$0 === expectedClass) && (t$2.tag === params.tag.go$get()) && ((t$2.length === 0) || t$2.isCompound)) {
				if (t$2.length > 0) {
					_tuple$12 = parseTagAndLength(bytes$1, offset), t$2 = (_struct$7 = _tuple$12[0], new tagAndLength.Ptr(_struct$7.class$0, _struct$7.tag, _struct$7.length, _struct$7.isCompound)), offset = _tuple$12[1], err = _tuple$12[2];
					if (!(go$interfaceIsEqual(err, null))) {
						return [offset, err];
					}
				} else {
					if (!(go$interfaceIsEqual(fieldType, flagType))) {
						err = (x$4 = new StructuralError.Ptr("zero length explicit tag was not an asn1.Flag"), new x$4.constructor.Struct(x$4));
						return [offset, err];
					}
					v.SetBool(true);
					return [offset, err];
				}
			} else {
				ok = setDefaultValue((_struct$8 = v, new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag)), (_struct$9 = params, new fieldParameters.Ptr(_struct$9.optional, _struct$9.explicit, _struct$9.application, _struct$9.defaultValue, _struct$9.tag, _struct$9.stringType, _struct$9.set, _struct$9.omitEmpty)));
				if (ok) {
					offset = initOffset;
				} else {
					err = (x$5 = new StructuralError.Ptr("explicitly tagged member didn't match"), new x$5.constructor.Struct(x$5));
				}
				return [offset, err];
			}
		}
		if (universalTag === 19) {
			_ref$1 = t$2.tag;
			if (_ref$1 === 22 || _ref$1 === 27 || _ref$1 === 20 || _ref$1 === 12) {
				universalTag = t$2.tag;
			}
		}
		if ((universalTag === 23) && (t$2.tag === 24)) {
			universalTag = 24;
		}
		expectedClass$1 = 0;
		expectedTag = universalTag;
		if (!params.explicit && !(go$pointerIsEqual(params.tag, (go$ptrType(Go$Int)).nil))) {
			expectedClass$1 = 2;
			expectedTag = params.tag.go$get();
		}
		if (!params.explicit && params.application && !(go$pointerIsEqual(params.tag, (go$ptrType(Go$Int)).nil))) {
			expectedClass$1 = 1;
			expectedTag = params.tag.go$get();
		}
		if (!((t$2.class$0 === expectedClass$1)) || !((t$2.tag === expectedTag)) || !(t$2.isCompound === compoundType)) {
			ok$1 = setDefaultValue((_struct$10 = v, new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag)), (_struct$11 = params, new fieldParameters.Ptr(_struct$11.optional, _struct$11.explicit, _struct$11.application, _struct$11.defaultValue, _struct$11.tag, _struct$11.stringType, _struct$11.set, _struct$11.omitEmpty)));
			if (ok$1) {
				offset = initOffset;
			} else {
				err = (x$6 = new StructuralError.Ptr(fmt.Sprintf("tags don't match (%d vs %+v) %+v %s @%d", new (go$sliceType(go$emptyInterface))([new Go$Int(expectedTag), new t$2.constructor.Struct(t$2), new params.constructor.Struct(params), new Go$String(fieldType.Name()), new Go$Int(offset)]))), new x$6.constructor.Struct(x$6));
			}
			return [offset, err];
		}
		if (invalidLength(offset, t$2.length, bytes$1.length)) {
			err = (x$7 = new SyntaxError.Ptr("data truncated"), new x$7.constructor.Struct(x$7));
			return [offset, err];
		}
		innerBytes$1 = go$subslice(bytes$1, offset, (offset + t$2.length >> 0));
		offset = offset + (t$2.length) >> 0;
		_ref$2 = fieldType;
		if (go$interfaceIsEqual(_ref$2, objectIdentifierType)) {
			_tuple$13 = parseObjectIdentifier(innerBytes$1), newSlice = _tuple$13[0], err1 = _tuple$13[1];
			v.Set((_struct$12 = reflect.MakeSlice(v.Type(), newSlice.length, newSlice.length), new reflect.Value.Ptr(_struct$12.typ, _struct$12.val, _struct$12.flag)));
			if (go$interfaceIsEqual(err1, null)) {
				reflect.Copy((_struct$13 = v, new reflect.Value.Ptr(_struct$13.typ, _struct$13.val, _struct$13.flag)), (_struct$14 = reflect.ValueOf(newSlice), new reflect.Value.Ptr(_struct$14.typ, _struct$14.val, _struct$14.flag)));
			}
			err = err1;
			return [offset, err];
		} else if (go$interfaceIsEqual(_ref$2, bitStringType)) {
			_tuple$14 = parseBitString(innerBytes$1), bs = (_struct$15 = _tuple$14[0], new BitString.Ptr(_struct$15.Bytes, _struct$15.BitLength)), err1$1 = _tuple$14[1];
			if (go$interfaceIsEqual(err1$1, null)) {
				v.Set((_struct$16 = reflect.ValueOf(new bs.constructor.Struct(bs)), new reflect.Value.Ptr(_struct$16.typ, _struct$16.val, _struct$16.flag)));
			}
			err = err1$1;
			return [offset, err];
		} else if (go$interfaceIsEqual(_ref$2, timeType)) {
			time$1 = new time.Time.Ptr();
			err1$2 = null;
			if (universalTag === 23) {
				_tuple$15 = parseUTCTime(innerBytes$1), time$1 = (_struct$17 = _tuple$15[0], new time.Time.Ptr(_struct$17.sec, _struct$17.nsec, _struct$17.loc)), err1$2 = _tuple$15[1];
			} else {
				_tuple$16 = parseGeneralizedTime(innerBytes$1), time$1 = (_struct$18 = _tuple$16[0], new time.Time.Ptr(_struct$18.sec, _struct$18.nsec, _struct$18.loc)), err1$2 = _tuple$16[1];
			}
			if (go$interfaceIsEqual(err1$2, null)) {
				v.Set((_struct$19 = reflect.ValueOf(new time$1.constructor.Struct(time$1)), new reflect.Value.Ptr(_struct$19.typ, _struct$19.val, _struct$19.flag)));
			}
			err = err1$2;
			return [offset, err];
		} else if (go$interfaceIsEqual(_ref$2, enumeratedType)) {
			_tuple$17 = parseInt32(innerBytes$1), parsedInt = _tuple$17[0], err1$3 = _tuple$17[1];
			if (go$interfaceIsEqual(err1$3, null)) {
				v.SetInt(new Go$Int64(0, parsedInt));
			}
			err = err1$3;
			return [offset, err];
		} else if (go$interfaceIsEqual(_ref$2, flagType)) {
			v.SetBool(true);
			return [offset, err];
		} else if (go$interfaceIsEqual(_ref$2, bigIntType)) {
			parsedInt$1 = parseBigInt(innerBytes$1);
			v.Set((_struct$20 = reflect.ValueOf(parsedInt$1), new reflect.Value.Ptr(_struct$20.typ, _struct$20.val, _struct$20.flag)));
			return [offset, err];
		}
		val = (_struct$21 = v, new reflect.Value.Ptr(_struct$21.typ, _struct$21.val, _struct$21.flag));
		_ref$3 = val.Kind();
		if (_ref$3 === 1) {
			_tuple$18 = parseBool(innerBytes$1), parsedBool = _tuple$18[0], err1$4 = _tuple$18[1];
			if (go$interfaceIsEqual(err1$4, null)) {
				val.SetBool(parsedBool);
			}
			err = err1$4;
			return [offset, err];
		} else if (_ref$3 === 2 || _ref$3 === 5 || _ref$3 === 6) {
			if (val.Type().Size() === 4) {
				_tuple$19 = parseInt32(innerBytes$1), parsedInt$2 = _tuple$19[0], err1$5 = _tuple$19[1];
				if (go$interfaceIsEqual(err1$5, null)) {
					val.SetInt(new Go$Int64(0, parsedInt$2));
				}
				err = err1$5;
			} else {
				_tuple$20 = parseInt64(innerBytes$1), parsedInt$3 = _tuple$20[0], err1$6 = _tuple$20[1];
				if (go$interfaceIsEqual(err1$6, null)) {
					val.SetInt(parsedInt$3);
				}
				err = err1$6;
			}
			return [offset, err];
		} else if (_ref$3 === 25) {
			structType = fieldType;
			if (structType.NumField() > 0 && go$interfaceIsEqual(structType.Field(0).Type, rawContentsType)) {
				bytes$2 = go$subslice(bytes$1, initOffset, offset);
				val.Field(0).Set((_struct$22 = reflect.ValueOf(go$subslice(new RawContent(bytes$2.array), bytes$2.offset, bytes$2.offset + bytes$2.length)), new reflect.Value.Ptr(_struct$22.typ, _struct$22.val, _struct$22.flag)));
			}
			innerOffset = 0;
			i = 0;
			while (i < structType.NumField()) {
				field = (_struct$23 = structType.Field(i), new reflect.StructField.Ptr(_struct$23.Name, _struct$23.PkgPath, _struct$23.Type, _struct$23.Tag, _struct$23.Offset, _struct$23.Index, _struct$23.Anonymous));
				if ((i === 0) && go$interfaceIsEqual(field.Type, rawContentsType)) {
					i = i + 1 >> 0;
					continue;
				}
				_tuple$21 = parseField((_struct$24 = val.Field(i), new reflect.Value.Ptr(_struct$24.typ, _struct$24.val, _struct$24.flag)), innerBytes$1, innerOffset, (_struct$25 = parseFieldParameters((new reflect.StructTag(field.Tag)).Get("asn1")), new fieldParameters.Ptr(_struct$25.optional, _struct$25.explicit, _struct$25.application, _struct$25.defaultValue, _struct$25.tag, _struct$25.stringType, _struct$25.set, _struct$25.omitEmpty))), innerOffset = _tuple$21[0], err = _tuple$21[1];
				if (!(go$interfaceIsEqual(err, null))) {
					return [offset, err];
				}
				i = i + 1 >> 0;
			}
			return [offset, err];
		} else if (_ref$3 === 23) {
			sliceType = fieldType;
			if (sliceType.Elem().Kind() === 8) {
				val.Set((_struct$26 = reflect.MakeSlice(sliceType, innerBytes$1.length, innerBytes$1.length), new reflect.Value.Ptr(_struct$26.typ, _struct$26.val, _struct$26.flag)));
				reflect.Copy((_struct$27 = val, new reflect.Value.Ptr(_struct$27.typ, _struct$27.val, _struct$27.flag)), (_struct$28 = reflect.ValueOf(innerBytes$1), new reflect.Value.Ptr(_struct$28.typ, _struct$28.val, _struct$28.flag)));
				return [offset, err];
			}
			_tuple$22 = parseSequenceOf(innerBytes$1, sliceType, sliceType.Elem()), newSlice$1 = (_struct$29 = _tuple$22[0], new reflect.Value.Ptr(_struct$29.typ, _struct$29.val, _struct$29.flag)), err1$7 = _tuple$22[1];
			if (go$interfaceIsEqual(err1$7, null)) {
				val.Set((_struct$30 = newSlice$1, new reflect.Value.Ptr(_struct$30.typ, _struct$30.val, _struct$30.flag)));
			}
			err = err1$7;
			return [offset, err];
		} else if (_ref$3 === 24) {
			v$1 = "";
			_ref$4 = universalTag;
			if (_ref$4 === 19) {
				_tuple$23 = parsePrintableString(innerBytes$1), v$1 = _tuple$23[0], err = _tuple$23[1];
			} else if (_ref$4 === 22) {
				_tuple$24 = parseIA5String(innerBytes$1), v$1 = _tuple$24[0], err = _tuple$24[1];
			} else if (_ref$4 === 20) {
				_tuple$25 = parseT61String(innerBytes$1), v$1 = _tuple$25[0], err = _tuple$25[1];
			} else if (_ref$4 === 12) {
				_tuple$26 = parseUTF8String(innerBytes$1), v$1 = _tuple$26[0], err = _tuple$26[1];
			} else if (_ref$4 === 27) {
				_tuple$27 = parseT61String(innerBytes$1), v$1 = _tuple$27[0], err = _tuple$27[1];
			} else {
				err = (x$8 = new SyntaxError.Ptr(fmt.Sprintf("internal error: unknown string type %d", new (go$sliceType(go$emptyInterface))([new Go$Int(universalTag)]))), new x$8.constructor.Struct(x$8));
			}
			if (go$interfaceIsEqual(err, null)) {
				val.SetString(v$1);
			}
			return [offset, err];
		}
		err = (x$9 = new StructuralError.Ptr("unsupported: " + v.Type().String()), new x$9.constructor.Struct(x$9));
		return [offset, err];
	};
	setDefaultValue = function(v, params) {
		var ok, _struct, val, _ref;
		ok = false;
		if (!params.optional) {
			return ok;
		}
		ok = true;
		if (go$pointerIsEqual(params.defaultValue, (go$ptrType(Go$Int64)).nil)) {
			return ok;
		}
		val = (_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		_ref = val.Kind();
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			val.SetInt(params.defaultValue.go$get());
		}
		return ok;
	};
	Unmarshal = go$pkg.Unmarshal = function(b, val) {
		var rest, err, _tuple;
		rest = (go$sliceType(Go$Uint8)).nil;
		err = null;
		_tuple = UnmarshalWithParams(b, val, ""), rest = _tuple[0], err = _tuple[1];
		return [rest, err];
	};
	UnmarshalWithParams = go$pkg.UnmarshalWithParams = function(b, val, params) {
		var rest, err, _struct, v, _tuple, _struct$1, _struct$2, offset, _tuple$1, _tuple$2;
		rest = (go$sliceType(Go$Uint8)).nil;
		err = null;
		v = (_struct = reflect.ValueOf(val).Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		_tuple = parseField((_struct$1 = v, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), b, 0, (_struct$2 = parseFieldParameters(params), new fieldParameters.Ptr(_struct$2.optional, _struct$2.explicit, _struct$2.application, _struct$2.defaultValue, _struct$2.tag, _struct$2.stringType, _struct$2.set, _struct$2.omitEmpty))), offset = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [(go$sliceType(Go$Uint8)).nil, err], rest = _tuple$1[0], err = _tuple$1[1];
			return [rest, err];
		}
		_tuple$2 = [go$subslice(b, offset), null], rest = _tuple$2[0], err = _tuple$2[1];
		return [rest, err];
	};
	parseFieldParameters = function(str) {
		var ret, _ref, _i, _slice, _index, part, _tuple, i, err, _tuple$1, i$1, err$1, _struct;
		ret = new fieldParameters.Ptr();
		_ref = strings.Split(str, ",");
		_i = 0;
		while (_i < _ref.length) {
			part = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (part === "optional") {
				ret.optional = true;
			} else if (part === "explicit") {
				ret.explicit = true;
				if (go$pointerIsEqual(ret.tag, (go$ptrType(Go$Int)).nil)) {
					ret.tag = go$newDataPointer(0, (go$ptrType(Go$Int)));
				}
			} else if (part === "ia5") {
				ret.stringType = 22;
			} else if (part === "printable") {
				ret.stringType = 19;
			} else if (part === "utf8") {
				ret.stringType = 12;
			} else if (strings.HasPrefix(part, "default:")) {
				_tuple = strconv.ParseInt(part.substring(8), 10, 64), i = _tuple[0], err = _tuple[1];
				if (go$interfaceIsEqual(err, null)) {
					ret.defaultValue = go$newDataPointer(new Go$Int64(0, 0), (go$ptrType(Go$Int64)));
					ret.defaultValue.go$set(i);
				}
			} else if (strings.HasPrefix(part, "tag:")) {
				_tuple$1 = strconv.Atoi(part.substring(4)), i$1 = _tuple$1[0], err$1 = _tuple$1[1];
				if (go$interfaceIsEqual(err$1, null)) {
					ret.tag = go$newDataPointer(0, (go$ptrType(Go$Int)));
					ret.tag.go$set(i$1);
				}
			} else if (part === "set") {
				ret.set = true;
			} else if (part === "application") {
				ret.application = true;
				if (go$pointerIsEqual(ret.tag, (go$ptrType(Go$Int)).nil)) {
					ret.tag = go$newDataPointer(0, (go$ptrType(Go$Int)));
				}
			} else if (part === "omitempty") {
				ret.omitEmpty = true;
			}
			_i++;
		}
		return (_struct = ret, new fieldParameters.Ptr(_struct.optional, _struct.explicit, _struct.application, _struct.defaultValue, _struct.tag, _struct.stringType, _struct.set, _struct.omitEmpty));
	};
	getUniversalType = function(t) {
		var tagNumber, isCompound, ok, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _ref$1, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12;
		tagNumber = 0;
		isCompound = false;
		ok = false;
		_ref = t;
		if (go$interfaceIsEqual(_ref, objectIdentifierType)) {
			_tuple = [6, false, true], tagNumber = _tuple[0], isCompound = _tuple[1], ok = _tuple[2];
			return [tagNumber, isCompound, ok];
		} else if (go$interfaceIsEqual(_ref, bitStringType)) {
			_tuple$1 = [3, false, true], tagNumber = _tuple$1[0], isCompound = _tuple$1[1], ok = _tuple$1[2];
			return [tagNumber, isCompound, ok];
		} else if (go$interfaceIsEqual(_ref, timeType)) {
			_tuple$2 = [23, false, true], tagNumber = _tuple$2[0], isCompound = _tuple$2[1], ok = _tuple$2[2];
			return [tagNumber, isCompound, ok];
		} else if (go$interfaceIsEqual(_ref, enumeratedType)) {
			_tuple$3 = [10, false, true], tagNumber = _tuple$3[0], isCompound = _tuple$3[1], ok = _tuple$3[2];
			return [tagNumber, isCompound, ok];
		} else if (go$interfaceIsEqual(_ref, bigIntType)) {
			_tuple$4 = [2, false, true], tagNumber = _tuple$4[0], isCompound = _tuple$4[1], ok = _tuple$4[2];
			return [tagNumber, isCompound, ok];
		}
		_ref$1 = t.Kind();
		if (_ref$1 === 1) {
			_tuple$5 = [1, false, true], tagNumber = _tuple$5[0], isCompound = _tuple$5[1], ok = _tuple$5[2];
			return [tagNumber, isCompound, ok];
		} else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) {
			_tuple$6 = [2, false, true], tagNumber = _tuple$6[0], isCompound = _tuple$6[1], ok = _tuple$6[2];
			return [tagNumber, isCompound, ok];
		} else if (_ref$1 === 25) {
			_tuple$7 = [16, true, true], tagNumber = _tuple$7[0], isCompound = _tuple$7[1], ok = _tuple$7[2];
			return [tagNumber, isCompound, ok];
		} else if (_ref$1 === 23) {
			if (t.Elem().Kind() === 8) {
				_tuple$8 = [4, false, true], tagNumber = _tuple$8[0], isCompound = _tuple$8[1], ok = _tuple$8[2];
				return [tagNumber, isCompound, ok];
			}
			if (strings.HasSuffix(t.Name(), "SET")) {
				_tuple$9 = [17, true, true], tagNumber = _tuple$9[0], isCompound = _tuple$9[1], ok = _tuple$9[2];
				return [tagNumber, isCompound, ok];
			}
			_tuple$10 = [16, true, true], tagNumber = _tuple$10[0], isCompound = _tuple$10[1], ok = _tuple$10[2];
			return [tagNumber, isCompound, ok];
		} else if (_ref$1 === 24) {
			_tuple$11 = [19, false, true], tagNumber = _tuple$11[0], isCompound = _tuple$11[1], ok = _tuple$11[2];
			return [tagNumber, isCompound, ok];
		}
		_tuple$12 = [0, false, false], tagNumber = _tuple$12[0], isCompound = _tuple$12[1], ok = _tuple$12[2];
		return [tagNumber, isCompound, ok];
	};
	go$pkg.init = function() {
		StructuralError.init([["Msg", "", Go$String, ""]]);
		StructuralError.methods = [["Error", "", [], [Go$String], false]];
		(go$ptrType(StructuralError)).methods = [["Error", "", [], [Go$String], false]];
		SyntaxError.init([["Msg", "", Go$String, ""]]);
		SyntaxError.methods = [["Error", "", [], [Go$String], false]];
		(go$ptrType(SyntaxError)).methods = [["Error", "", [], [Go$String], false]];
		BitString.init([["Bytes", "", (go$sliceType(Go$Uint8)), ""], ["BitLength", "", Go$Int, ""]]);
		BitString.methods = [["At", "", [Go$Int], [Go$Int], false], ["RightAlign", "", [], [(go$sliceType(Go$Uint8))], false]];
		(go$ptrType(BitString)).methods = [["At", "", [Go$Int], [Go$Int], false], ["RightAlign", "", [], [(go$sliceType(Go$Uint8))], false]];
		ObjectIdentifier.init(Go$Int);
		ObjectIdentifier.methods = [["Equal", "", [ObjectIdentifier], [Go$Bool], false]];
		(go$ptrType(ObjectIdentifier)).methods = [["Equal", "", [ObjectIdentifier], [Go$Bool], false]];
		RawValue.init([["Class", "", Go$Int, ""], ["Tag", "", Go$Int, ""], ["IsCompound", "", Go$Bool, ""], ["Bytes", "", (go$sliceType(Go$Uint8)), ""], ["FullBytes", "", (go$sliceType(Go$Uint8)), ""]]);
		RawContent.init(Go$Uint8);
		tagAndLength.init([["class", "encoding/asn1", Go$Int, ""], ["tag", "encoding/asn1", Go$Int, ""], ["length", "encoding/asn1", Go$Int, ""], ["isCompound", "encoding/asn1", Go$Bool, ""]]);
		fieldParameters.init([["optional", "encoding/asn1", Go$Bool, ""], ["explicit", "encoding/asn1", Go$Bool, ""], ["application", "encoding/asn1", Go$Bool, ""], ["defaultValue", "encoding/asn1", (go$ptrType(Go$Int64)), ""], ["tag", "encoding/asn1", (go$ptrType(Go$Int)), ""], ["stringType", "encoding/asn1", Go$Int, ""], ["set", "encoding/asn1", Go$Bool, ""], ["omitEmpty", "encoding/asn1", Go$Bool, ""]]);
		bigOne = big.NewInt(new Go$Int64(0, 1));
		var x;
		bitStringType = reflect.TypeOf((x = new BitString.Ptr((go$sliceType(Go$Uint8)).nil, 0), new x.constructor.Struct(x)));
		objectIdentifierType = reflect.TypeOf(new ObjectIdentifier([]));
		enumeratedType = reflect.TypeOf(new Enumerated(0));
		flagType = reflect.TypeOf(new Flag(false));
		var x$1;
		timeType = reflect.TypeOf((x$1 = new time.Time.Ptr(new Go$Int64(0, 0), 0, (go$ptrType(time.Location)).nil), new x$1.constructor.Struct(x$1)));
		var x$2;
		rawValueType = reflect.TypeOf((x$2 = new RawValue.Ptr(0, 0, false, (go$sliceType(Go$Uint8)).nil, (go$sliceType(Go$Uint8)).nil), new x$2.constructor.Struct(x$2)));
		rawContentsType = reflect.TypeOf(RawContent.nil);
		bigIntType = reflect.TypeOf(new big.Int.Ptr());
	}
	return go$pkg;
})();
go$packages["github.com/gopherjs/gopherjs/gcexporter"] = (function() {
	var go$pkg = {}, exact = go$packages["code.google.com/p/go.tools/go/exact"], types = go$packages["code.google.com/p/go.tools/go/types"], fmt = go$packages["fmt"], io = go$packages["io"], strconv = go$packages["strconv"], strings = go$packages["strings"], unicode = go$packages["unicode"], exporter, Write;
	exporter = go$pkg.exporter = go$newType(0, "Struct", "gcexporter.exporter", "exporter", "github.com/gopherjs/gopherjs/gcexporter", function(pkg_, imports_, toExport_, out_) {
		this.go$val = this;
		this.pkg = pkg_ !== undefined ? pkg_ : (go$ptrType(types.Package)).nil;
		this.imports = imports_ !== undefined ? imports_ : false;
		this.toExport = toExport_ !== undefined ? toExport_ : (go$sliceType(types.Object)).nil;
		this.out = out_ !== undefined ? out_ : null;
	});
	Write = go$pkg.Write = function(pkg, out, sizes) {
		var e, _ref, _i, _slice, _index, imp, _ref$1, _i$1, _slice$1, _index$1, name, obj, _tuple, isTypeName, i, o, _ref$2, _type, _slice$2, _index$2, isInterface, _tuple$1, x, writeMethods, optType, _tuple$2, x$1, basic, isBasic, x$2, val, _tuple$3, d, _tuple$4, d$1, _tuple$5, f, _tuple$6, r, _tuple$7, i$1;
		fmt.Fprintf(out, "package %s\n", new (go$sliceType(go$emptyInterface))([new Go$String(pkg.Name())]));
		e = new exporter.Ptr(pkg, new Go$Map(), (go$sliceType(types.Object)).nil, out);
		_ref = pkg.Imports();
		_i = 0;
		while (_i < _ref.length) {
			imp = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			e.addImport(imp);
			_i++;
		}
		_ref$1 = pkg.Scope().Names();
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			name = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			obj = pkg.Scope().Lookup(name);
			_tuple = (obj !== null && obj.constructor === (go$ptrType(types.TypeName)) ? [obj.go$val, true] : [(go$ptrType(types.TypeName)).nil, false]), isTypeName = _tuple[1];
			if (obj.Exported() || isTypeName) {
				e.toExport = go$append(e.toExport, obj);
			}
			_i$1++;
		}
		i = 0;
		while (i < e.toExport.length) {
			_ref$2 = (_slice$2 = e.toExport, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			_type = _ref$2 !== null ? _ref$2.constructor : null;
			if (_type === (go$ptrType(types.TypeName))) {
				o = _ref$2.go$val;
				fmt.Fprintf(out, "type %s %s\n", new (go$sliceType(go$emptyInterface))([new Go$String(e.makeName(o)), new Go$String(e.makeType(o.object.Type().Underlying()))]));
				if (_tuple$1 = (x = o.object.Type().Underlying(), (x !== null && x.constructor === (go$ptrType(types.Interface)) ? [x.go$val, true] : [(go$ptrType(types.Interface)).nil, false])), isInterface = _tuple$1[1], !isInterface) {
					writeMethods = (function(t) {
						var methods, i$1, m;
						methods = types.NewMethodSet(t);
						i$1 = 0;
						while (i$1 < methods.Len()) {
							m = methods.At(i$1);
							if (m.Index().length > 1) {
								i$1 = i$1 + 1 >> 0;
								continue;
							}
							out.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("func (? " + e.makeType(m.Recv()) + ") " + e.makeName(m.Obj()) + e.makeSignature(m.Type()) + "\n")));
							i$1 = i$1 + 1 >> 0;
						}
					});
					writeMethods(o.object.Type());
					writeMethods(types.NewPointer(o.object.Type()));
				}
			} else if (_type === (go$ptrType(types.Func))) {
				o = _ref$2.go$val;
				out.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("func " + e.makeName(o) + e.makeSignature(o.object.Type()) + "\n")));
			} else if (_type === (go$ptrType(types.Const))) {
				o = _ref$2.go$val;
				optType = "";
				_tuple$2 = (x$1 = o.object.Type(), (x$1 !== null && x$1.constructor === (go$ptrType(types.Basic)) ? [x$1.go$val, true] : [(go$ptrType(types.Basic)).nil, false])), basic = _tuple$2[0], isBasic = _tuple$2[1];
				if (!isBasic || ((basic.Info() & 64) === 0)) {
					optType = " " + e.makeType(o.object.Type());
				}
				basic = (x$2 = o.object.Type().Underlying(), (x$2 !== null && x$2.constructor === (go$ptrType(types.Basic)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(types.Basic)))));
				val = "";
				switch (0) { default: if (!(((basic.Info() & 1) === 0))) {
					val = strconv.FormatBool(exact.BoolVal(o.Val()));
				} else if (!(((basic.Info() & 2) === 0))) {
					if (basic.Kind() === 11) {
						_tuple$3 = exact.Uint64Val(o.Val()), d = _tuple$3[0];
						val = fmt.Sprintf("%#x", new (go$sliceType(go$emptyInterface))([d]));
						break;
					}
					_tuple$4 = exact.Int64Val(o.Val()), d$1 = _tuple$4[0];
					if (basic.Kind() === 21) {
						if ((d$1.high < 0 || (d$1.high === 0 && d$1.low < 0)) || (d$1.high > 0 || (d$1.high === 0 && d$1.low > 1114111))) {
							val = fmt.Sprintf("('\\x00' + %d)", new (go$sliceType(go$emptyInterface))([d$1]));
						} else if ((d$1.high > 0 || (d$1.high === 0 && d$1.low > 65535))) {
							val = fmt.Sprintf("'\\U%08x'", new (go$sliceType(go$emptyInterface))([d$1]));
						} else {
							val = fmt.Sprintf("'\\u%04x'", new (go$sliceType(go$emptyInterface))([d$1]));
						}
						break;
					}
					val = fmt.Sprintf("%#x", new (go$sliceType(go$emptyInterface))([d$1]));
				} else if (!(((basic.Info() & 8) === 0))) {
					_tuple$5 = exact.Float64Val(o.Val()), f = _tuple$5[0];
					val = strconv.FormatFloat(f, 98, -1, 64);
				} else if (!(((basic.Info() & 16) === 0))) {
					_tuple$6 = exact.Float64Val(exact.Real(o.Val())), r = _tuple$6[0];
					_tuple$7 = exact.Float64Val(exact.Imag(o.Val())), i$1 = _tuple$7[0];
					val = fmt.Sprintf("(%s+%si)", new (go$sliceType(go$emptyInterface))([new Go$String(strconv.FormatFloat(r, 98, -1, 64)), new Go$String(strconv.FormatFloat(i$1, 98, -1, 64))]));
				} else if (!(((basic.Info() & 32) === 0))) {
					val = fmt.Sprintf("%#v", new (go$sliceType(go$emptyInterface))([new Go$String(exact.StringVal(o.Val()))]));
				} else {
					throw go$panic(new Go$String("Unhandled constant type: " + basic.String()));
				} }
				out.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("const " + e.makeName(o) + optType + " = " + val + "\n")));
			} else if (_type === (go$ptrType(types.Var))) {
				o = _ref$2.go$val;
				out.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("var " + e.makeName(o) + " " + e.makeType(o.object.Type()) + "\n")));
			} else {
				o = _ref$2;
				throw go$panic(new Go$String(fmt.Sprintf("Unhandled object: %T\n", new (go$sliceType(go$emptyInterface))([o]))));
			}
			i = i + 1 >> 0;
		}
		fmt.Fprintf(out, "$$\n", new (go$sliceType(go$emptyInterface))([]));
	};
	exporter.Ptr.prototype.addImport = function(pkg) {
		var e, found, _tuple, _entry, _key;
		e = this;
		if (_tuple = (_entry = e.imports[pkg.go$key()], _entry !== undefined ? [_entry.v, true] : [false, false]), found = _tuple[1], found) {
			return;
		}
		fmt.Fprintf(e.out, "import %s \"%s\"\n", new (go$sliceType(go$emptyInterface))([new Go$String(pkg.Name()), new Go$String(pkg.Path())]));
		_key = pkg, (e.imports || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: true };
	};
	exporter.prototype.addImport = function(pkg) { return this.go$val.addImport(pkg); };
	exporter.Ptr.prototype.makeName = function(o) {
		var e, _ref, pkgPath;
		e = this;
		_ref = o.Name();
		if (_ref === "") {
			return "?";
		} else if (_ref === "_") {
			return "_";
		} else {
			pkgPath = "";
			if (!(o.Pkg() === (go$ptrType(types.Package)).nil) && !(o.Pkg() === e.pkg)) {
				e.addImport(o.Pkg());
				pkgPath = o.Pkg().Path();
			}
			return "@\"" + pkgPath + "\"." + o.Name();
		}
	};
	exporter.prototype.makeName = function(o) { return this.go$val.makeName(o); };
	exporter.Ptr.prototype.makeType = function(ty) {
		var e, t, _ref, _type, fields, _ref$1, _i, i, field, name, tag, _slice, _index, methods, _ref$2, _i$1, i$1, m, _slice$1, _index$1, _ref$3, found, _ref$4, _i$2, _slice$2, _index$2, o;
		e = this;
		_ref = ty;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Basic))) {
			t = _ref.go$val;
			if (t.Kind() === 18) {
				return "@\"unsafe\".Pointer";
			}
			return t.Name();
		} else if (_type === (go$ptrType(types.Array))) {
			t = _ref.go$val;
			return "[" + strconv.FormatInt(t.Len(), 10) + "]" + e.makeType(t.Elem());
		} else if (_type === (go$ptrType(types.Slice))) {
			t = _ref.go$val;
			return "[]" + e.makeType(t.Elem());
		} else if (_type === (go$ptrType(types.Map))) {
			t = _ref.go$val;
			return "map[" + e.makeType(t.Key()) + "]" + e.makeType(t.Elem());
		} else if (_type === (go$ptrType(types.Pointer))) {
			t = _ref.go$val;
			return "*" + e.makeType(t.Elem());
		} else if (_type === (go$ptrType(types.Struct))) {
			t = _ref.go$val;
			fields = (go$sliceType(Go$String)).make(t.NumFields(), 0, function() { return ""; });
			_ref$1 = fields;
			_i = 0;
			while (_i < _ref$1.length) {
				i = _i;
				field = t.Field(i);
				name = "?";
				if (!field.Anonymous()) {
					name = e.makeName(field);
				}
				tag = "";
				if (!(t.Tag(i) === "")) {
					tag = fmt.Sprintf(" %#v", new (go$sliceType(go$emptyInterface))([new Go$String(t.Tag(i))]));
				}
				_slice = fields, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = name + " " + e.makeType(field.object.Type()) + tag) : go$throwRuntimeError("index out of range");
				_i++;
			}
			return "struct { " + strings.Join(fields, "; ") + " }";
		} else if (_type === (go$ptrType(types.Interface))) {
			t = _ref.go$val;
			methods = (go$sliceType(Go$String)).make(t.NumMethods(), 0, function() { return ""; });
			_ref$2 = methods;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				i$1 = _i$1;
				m = t.Method(i$1);
				_slice$1 = methods, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = e.makeName(m) + e.makeSignature(m.object.Type())) : go$throwRuntimeError("index out of range");
				_i$1++;
			}
			return "interface { " + strings.Join(methods, "; ") + " }";
		} else if (_type === (go$ptrType(types.Signature))) {
			t = _ref.go$val;
			return "func " + e.makeSignature(t);
		} else if (_type === (go$ptrType(types.Chan))) {
			t = _ref.go$val;
			_ref$3 = t.Dir();
			if (_ref$3 === 0) {
				return "chan " + e.makeType(t.Elem());
			} else if (_ref$3 === 1) {
				return "chan<- " + e.makeType(t.Elem());
			} else if (_ref$3 === 2) {
				return "<-chan " + e.makeType(t.Elem());
			} else {
				throw go$panic(new Go$String("invalid channel direction"));
			}
		} else if (_type === (go$ptrType(types.Named))) {
			t = _ref.go$val;
			if (t.Obj().object.Pkg() === (go$ptrType(types.Package)).nil) {
				return t.Obj().object.Name();
			}
			found = false;
			_ref$4 = e.toExport;
			_i$2 = 0;
			while (_i$2 < _ref$4.length) {
				o = (_slice$2 = _ref$4, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				if (go$interfaceIsEqual(o, t.Obj())) {
					found = true;
					break;
				}
				_i$2++;
			}
			if (!found) {
				e.toExport = go$append(e.toExport, t.Obj());
			}
			return e.makeName(t.Obj());
		} else {
			t = _ref;
			throw go$panic(new Go$String(fmt.Sprintf("Unhandled type: %T\n", new (go$sliceType(go$emptyInterface))([t]))));
		}
	};
	exporter.prototype.makeType = function(ty) { return this.go$val.makeType(ty); };
	exporter.Ptr.prototype.makeSignature = function(t) {
		var e, sig;
		e = this;
		sig = (t !== null && t.constructor === (go$ptrType(types.Signature)) ? t.go$val : go$typeAssertionFailed(t, (go$ptrType(types.Signature))));
		return "(" + e.makeParameters(sig.Params(), sig.Variadic()) + ") (" + e.makeParameters(sig.Results(), false) + ")";
	};
	exporter.prototype.makeSignature = function(t) { return this.go$val.makeSignature(t); };
	exporter.Ptr.prototype.makeParameters = function(tuple, variadic) {
		var e, params, _ref, _i, i, param, paramType, dots, _slice, _index;
		e = this;
		params = (go$sliceType(Go$String)).make(tuple.Len(), 0, function() { return ""; });
		_ref = params;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			param = tuple.At(i);
			paramType = param.object.Type();
			dots = "";
			if (variadic && (i === (tuple.Len() - 1 >> 0))) {
				dots = "...";
				paramType = (paramType !== null && paramType.constructor === (go$ptrType(types.Slice)) ? paramType.go$val : go$typeAssertionFailed(paramType, (go$ptrType(types.Slice)))).Elem();
			}
			_slice = params, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = e.makeName(param) + " " + dots + e.makeType(paramType)) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return strings.Join(params, ", ");
	};
	exporter.prototype.makeParameters = function(tuple, variadic) { return this.go$val.makeParameters(tuple, variadic); };
	go$pkg.init = function() {
		exporter.init([["pkg", "github.com/gopherjs/gopherjs/gcexporter", (go$ptrType(types.Package)), ""], ["imports", "github.com/gopherjs/gopherjs/gcexporter", (go$mapType((go$ptrType(types.Package)), Go$Bool)), ""], ["toExport", "github.com/gopherjs/gopherjs/gcexporter", (go$sliceType(types.Object)), ""], ["out", "github.com/gopherjs/gopherjs/gcexporter", io.Writer, ""]]);
		(go$ptrType(exporter)).methods = [["addImport", "github.com/gopherjs/gopherjs/gcexporter", [(go$ptrType(types.Package))], [], false], ["makeName", "github.com/gopherjs/gopherjs/gcexporter", [types.Object], [Go$String], false], ["makeParameters", "github.com/gopherjs/gopherjs/gcexporter", [(go$ptrType(types.Tuple)), Go$Bool], [Go$String], false], ["makeSignature", "github.com/gopherjs/gopherjs/gcexporter", [types.Type], [Go$String], false], ["makeType", "github.com/gopherjs/gopherjs/gcexporter", [types.Type], [Go$String], false]];
	}
	return go$pkg;
})();
go$packages["github.com/gopherjs/gopherjs/translator"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], exact = go$packages["code.google.com/p/go.tools/go/exact"], types = go$packages["code.google.com/p/go.tools/go/types"], fmt = go$packages["fmt"], ast = go$packages["go/ast"], token = go$packages["go/token"], strconv = go$packages["strconv"], strings = go$packages["strings"], gcexporter = go$packages["github.com/gopherjs/gopherjs/gcexporter"], sort = go$packages["sort"], gcimporter = go$packages["code.google.com/p/go.tools/go/gcimporter"], asn1 = go$packages["encoding/asn1"], io = go$packages["io"], expression, ErrorList, pkgContext, funcContext, flowData, hasDeferVisitor, gotoVisitor, This, branch, hasBreakVisitor, hasCallVisitor, escapeAnalysis, escapingObjectCollector, Archive, Import, Decl, Object, TranslatePackage, hasFallthrough, WriteProgramCode, WritePkgCode, ReadArchive, fieldName, typeKind, toJavaScriptType, is64Bit, isBlank, isWrapped, elemType, encodeString, isJsObject, getJsTag, pkgNatives, reservedKeywords, prelude, sizes32, typesPackages;
	expression = go$pkg.expression = go$newType(0, "Struct", "translator.expression", "expression", "github.com/gopherjs/gopherjs/translator", function(str_, parens_) {
		this.go$val = this;
		this.str = str_ !== undefined ? str_ : "";
		this.parens = parens_ !== undefined ? parens_ : false;
	});
	ErrorList = go$pkg.ErrorList = go$newType(0, "Slice", "translator.ErrorList", "ErrorList", "github.com/gopherjs/gopherjs/translator", null);
	pkgContext = go$pkg.pkgContext = go$newType(0, "Struct", "translator.pkgContext", "pkgContext", "github.com/gopherjs/gopherjs/translator", function(pkg_, info_, pkgVars_, objectVars_, output_, delayedOutput_, indentation_, dependencies_, f_) {
		this.go$val = this;
		this.pkg = pkg_ !== undefined ? pkg_ : (go$ptrType(types.Package)).nil;
		this.info = info_ !== undefined ? info_ : (go$ptrType(types.Info)).nil;
		this.pkgVars = pkgVars_ !== undefined ? pkgVars_ : false;
		this.objectVars = objectVars_ !== undefined ? objectVars_ : false;
		this.output = output_ !== undefined ? output_ : (go$sliceType(Go$Uint8)).nil;
		this.delayedOutput = delayedOutput_ !== undefined ? delayedOutput_ : (go$sliceType(Go$Uint8)).nil;
		this.indentation = indentation_ !== undefined ? indentation_ : 0;
		this.dependencies = dependencies_ !== undefined ? dependencies_ : false;
		this.f = f_ !== undefined ? f_ : (go$ptrType(funcContext)).nil;
	});
	funcContext = go$pkg.funcContext = go$newType(0, "Struct", "translator.funcContext", "funcContext", "github.com/gopherjs/gopherjs/translator", function(sig_, allVars_, localVars_, resultNames_, flowDatas_, escapingVars_, flattened_, caseCounter_, labelCases_, hasGoto_) {
		this.go$val = this;
		this.sig = sig_ !== undefined ? sig_ : (go$ptrType(types.Signature)).nil;
		this.allVars = allVars_ !== undefined ? allVars_ : false;
		this.localVars = localVars_ !== undefined ? localVars_ : (go$sliceType(Go$String)).nil;
		this.resultNames = resultNames_ !== undefined ? resultNames_ : (go$sliceType(ast.Expr)).nil;
		this.flowDatas = flowDatas_ !== undefined ? flowDatas_ : false;
		this.escapingVars = escapingVars_ !== undefined ? escapingVars_ : (go$sliceType(Go$String)).nil;
		this.flattened = flattened_ !== undefined ? flattened_ : false;
		this.caseCounter = caseCounter_ !== undefined ? caseCounter_ : 0;
		this.labelCases = labelCases_ !== undefined ? labelCases_ : false;
		this.hasGoto = hasGoto_ !== undefined ? hasGoto_ : false;
	});
	flowData = go$pkg.flowData = go$newType(0, "Struct", "translator.flowData", "flowData", "github.com/gopherjs/gopherjs/translator", function(postStmt_, beginCase_, endCase_) {
		this.go$val = this;
		this.postStmt = postStmt_ !== undefined ? postStmt_ : "";
		this.beginCase = beginCase_ !== undefined ? beginCase_ : 0;
		this.endCase = endCase_ !== undefined ? endCase_ : 0;
	});
	hasDeferVisitor = go$pkg.hasDeferVisitor = go$newType(0, "Struct", "translator.hasDeferVisitor", "hasDeferVisitor", "github.com/gopherjs/gopherjs/translator", function(hasDefer_) {
		this.go$val = this;
		this.hasDefer = hasDefer_ !== undefined ? hasDefer_ : false;
	});
	gotoVisitor = go$pkg.gotoVisitor = go$newType(0, "Struct", "translator.gotoVisitor", "gotoVisitor", "github.com/gopherjs/gopherjs/translator", function(f_, stack_) {
		this.go$val = this;
		this.f = f_ !== undefined ? f_ : (go$ptrType(funcContext)).nil;
		this.stack = stack_ !== undefined ? stack_ : (go$sliceType(ast.Node)).nil;
	});
	This = go$pkg.This = go$newType(0, "Struct", "translator.This", "This", "github.com/gopherjs/gopherjs/translator", function(Ident_) {
		this.go$val = this;
		this.Ident = Ident_ !== undefined ? Ident_ : new ast.Ident.Ptr();
	});
	This.prototype.End = function() { return this.go$val.End(); };
	This.Ptr.prototype.End = function() { return this.Ident.End(); };
	This.prototype.IsExported = function() { return this.go$val.IsExported(); };
	This.Ptr.prototype.IsExported = function() { return this.Ident.IsExported(); };
	This.prototype.Pos = function() { return this.go$val.Pos(); };
	This.Ptr.prototype.Pos = function() { return this.Ident.Pos(); };
	This.prototype.String = function() { return this.go$val.String(); };
	This.Ptr.prototype.String = function() { return this.Ident.String(); };
	This.prototype.exprNode = function() { return this.go$val.exprNode(); };
	This.Ptr.prototype.exprNode = function() { return this.Ident.exprNode(); };
	branch = go$pkg.branch = go$newType(0, "Struct", "translator.branch", "branch", "github.com/gopherjs/gopherjs/translator", function(clause_, condition_, body_) {
		this.go$val = this;
		this.clause = clause_ !== undefined ? clause_ : (go$ptrType(ast.CaseClause)).nil;
		this.condition = condition_ !== undefined ? condition_ : "";
		this.body = body_ !== undefined ? body_ : (go$sliceType(ast.Stmt)).nil;
	});
	hasBreakVisitor = go$pkg.hasBreakVisitor = go$newType(0, "Struct", "translator.hasBreakVisitor", "hasBreakVisitor", "github.com/gopherjs/gopherjs/translator", function(hasBreak_) {
		this.go$val = this;
		this.hasBreak = hasBreak_ !== undefined ? hasBreak_ : false;
	});
	hasCallVisitor = go$pkg.hasCallVisitor = go$newType(0, "Struct", "translator.hasCallVisitor", "hasCallVisitor", "github.com/gopherjs/gopherjs/translator", function(info_, hasCall_) {
		this.go$val = this;
		this.info = info_ !== undefined ? info_ : (go$ptrType(types.Info)).nil;
		this.hasCall = hasCall_ !== undefined ? hasCall_ : false;
	});
	escapeAnalysis = go$pkg.escapeAnalysis = go$newType(0, "Struct", "translator.escapeAnalysis", "escapeAnalysis", "github.com/gopherjs/gopherjs/translator", function(info_, candidates_, escaping_) {
		this.go$val = this;
		this.info = info_ !== undefined ? info_ : (go$ptrType(types.Info)).nil;
		this.candidates = candidates_ !== undefined ? candidates_ : false;
		this.escaping = escaping_ !== undefined ? escaping_ : false;
	});
	escapingObjectCollector = go$pkg.escapingObjectCollector = go$newType(0, "Struct", "translator.escapingObjectCollector", "escapingObjectCollector", "github.com/gopherjs/gopherjs/translator", function(analysis_) {
		this.go$val = this;
		this.analysis = analysis_ !== undefined ? analysis_ : (go$ptrType(escapeAnalysis)).nil;
	});
	Archive = go$pkg.Archive = go$newType(0, "Struct", "translator.Archive", "Archive", "github.com/gopherjs/gopherjs/translator", function(ImportPath_, GcData_, Dependencies_, Imports_, Declarations_, Tests_) {
		this.go$val = this;
		this.ImportPath = ImportPath_ !== undefined ? ImportPath_ : "";
		this.GcData = GcData_ !== undefined ? GcData_ : (go$sliceType(Go$Uint8)).nil;
		this.Dependencies = Dependencies_ !== undefined ? Dependencies_ : (go$sliceType(Go$String)).nil;
		this.Imports = Imports_ !== undefined ? Imports_ : (go$sliceType(Import)).nil;
		this.Declarations = Declarations_ !== undefined ? Declarations_ : (go$sliceType(Decl)).nil;
		this.Tests = Tests_ !== undefined ? Tests_ : (go$sliceType(Go$String)).nil;
	});
	Import = go$pkg.Import = go$newType(0, "Struct", "translator.Import", "Import", "github.com/gopherjs/gopherjs/translator", function(Path_, VarName_) {
		this.go$val = this;
		this.Path = Path_ !== undefined ? Path_ : "";
		this.VarName = VarName_ !== undefined ? VarName_ : "";
	});
	Decl = go$pkg.Decl = go$newType(0, "Struct", "translator.Decl", "Decl", "github.com/gopherjs/gopherjs/translator", function(Var_, BodyCode_, InitCode_, DceFilters_, DceDeps_) {
		this.go$val = this;
		this.Var = Var_ !== undefined ? Var_ : "";
		this.BodyCode = BodyCode_ !== undefined ? BodyCode_ : (go$sliceType(Go$Uint8)).nil;
		this.InitCode = InitCode_ !== undefined ? InitCode_ : (go$sliceType(Go$Uint8)).nil;
		this.DceFilters = DceFilters_ !== undefined ? DceFilters_ : (go$sliceType(Go$String)).nil;
		this.DceDeps = DceDeps_ !== undefined ? DceDeps_ : (go$sliceType(Object)).nil;
	});
	Object = go$pkg.Object = go$newType(0, "Struct", "translator.Object", "Object", "github.com/gopherjs/gopherjs/translator", function(PkgPath_, Name_) {
		this.go$val = this;
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Name = Name_ !== undefined ? Name_ : "";
	});
	expression.Ptr.prototype.String = function() {
		var e;
		e = this;
		return e.str;
	};
	expression.prototype.String = function() { return this.go$val.String(); };
	expression.Ptr.prototype.StringWithParens = function() {
		var e;
		e = this;
		if (e.parens) {
			return "(" + e.str + ")";
		}
		return e.str;
	};
	expression.prototype.StringWithParens = function() { return this.go$val.StringWithParens(); };
	pkgContext.Ptr.prototype.translateExpr = function(expr) {
		var c, _entry, exprType, value, _entry$1, basic, x, _tuple, d, _tuple$1, d$1, _tuple$2, f, _tuple$3, r, _tuple$4, i, e, _ref, _type, isPointer, _tuple$5, ptrType, collectIndexedElements, t, _ref$1, _type$1, elements, zero, x$1, x$2, mapVar, keyVar, assignments, _ref$2, _i, _slice, _index, element, kve, elements$1, isKeyValue, _tuple$6, x$3, _slice$1, _index$1, _ref$3, _i$1, _slice$2, _index$2, element$1, i$1, _slice$3, _index$3, _ref$4, _i$2, i$2, _slice$4, _index$4, _ref$5, _i$3, _slice$5, _index$5, element$2, kve$1, _ref$6, _i$4, j, x$4, _slice$6, _index$6, _tuple$7, params, body, list, _ref$7, _ref$8, _type$2, _entry$2, isComposite, _tuple$8, x$5, _entry$3, closurePrefix, closureSuffix, list$1, vVar, _entry$4, t$1, x$6, basic$1, _ref$9, x$7, _entry$5, t$2, _entry$6, t2, _tuple$9, x$8, isInterface, isBasic, basic$2, _tuple$10, x$9, _ref$10, _ref$11, _ref$12, _ref$13, shift, op, _entry$7, y, _ref$14, x$10, y$1, x$11, y$2, u, _ref$15, _type$3, x$12, y$3, conds, i$3, field, _tuple$11, x$13, xUnary, xIsUnary, _tuple$12, x$14, yUnary, yIsUnary, _tuple$13, x$15, xIndex, xIsIndex, _tuple$14, x$16, yIndex, yIsIndex, _ref$16, _type$4, x$17, t$3, _ref$17, _type$5, _entry$8, sliceVar, indexVar, key, isTuple, _tuple$15, isBasic$1, b, _tuple$16, x$18, _entry$9, low, slice, low$1, _entry$10, sel, parameterName, makeParametersList, _ref$18, _tuple$17, fields, jsTag, ok, _tuple$18, x$19, _key, parameters, target, recv, _key$1, recv$1, parameters$1, x$20, _ref$19, plainFun, isParen, _tuple$19, p, isType, _slice$7, _index$7, _entry$11, fun, f$1, _ref$20, _type$6, ok$1, _tuple$20, x$21, _entry$12, o, _ref$21, x$22, _entry$13, t$4, _ref$22, _type$7, argType, _ref$23, _type$8, _slice$8, _index$8, _entry$14, _slice$9, _index$9, length, capacity, _slice$10, _index$10, _slice$11, _index$11, _entry$15, _slice$12, _index$12, _entry$16, _slice$13, _index$13, arg, argType$1, _ref$24, _type$9, _slice$14, _index$14, _entry$17, x$23, _slice$15, _index$15, arg$1, argType$2, _ref$25, _type$10, _slice$16, _index$16, _entry$18, x$24, _slice$17, _index$17, _slice$18, _index$18, _slice$19, _index$19, _slice$20, _index$20, x$25, sliceType, _slice$21, _index$21, _slice$22, _index$22, _slice$23, _index$23, x$26, _slice$24, _index$24, _entry$19, isBasic$2, basic$3, _tuple$21, x$27, _slice$25, _index$25, _entry$20, _slice$26, _index$26, _slice$27, _index$27, _slice$28, _index$28, _slice$29, _index$29, _entry$21, _slice$30, _index$30, _slice$31, _index$31, _slice$32, _index$32, _slice$33, _index$33, _entry$22, sel$1, o$1, externalizeExpr, externalizeArgs, _ref$26, _key$2, methodName, _entry$23, t$5, _ref$27, _i$5, _slice$34, _index$34, index, isPtr, _tuple$22, ptr, x$28, s, _ref$28, ok$2, _tuple$23, _slice$35, _index$35, id, _slice$36, _index$36, ok$3, _tuple$24, _slice$37, _index$37, id$1, _slice$38, _index$38, _slice$39, _index$39, _slice$40, _index$40, _slice$41, _index$41, _slice$42, _index$42, _slice$43, _index$43, ok$4, _tuple$25, _slice$44, _index$44, id$2, objVar, _slice$45, _index$45, objVar$1, _slice$46, _index$46, _slice$47, _index$47, _slice$48, _index$48, _slice$49, _index$49, _slice$50, _index$50, x$29, methodsRecvType, _tuple$26, pointerExpected, _tuple$27, x$30, isPointer$1, _tuple$28, x$31, isStruct, _tuple$29, x$32, isArray, vVar$1, _tuple$30, fields$1, jsTag$1, x$33, sig, x$34, _entry$24, sig$1, isTuple$1, _tuple$31, x$35, _slice$51, _index$51, _entry$25, tuple, tupleVar, args, _ref$29, _i$6, i$4, _slice$52, _index$52, _slice$53, _index$53, isCall, c1, _tuple$32, x$36, isCall$1, c2, _entry$26, _tuple$33, x$37, _slice$54, _index$54, isUnary, unary, _tuple$34, x$38, _slice$55, _index$55, _ref$30, _type$11, _entry$27, t$6, check, valueSuffix, isInterface$1, _tuple$35, x$39, isTuple$2, _tuple$36, _entry$28, o$2, _ref$31, _type$12, _entry$29, _entry$30, _entry$31, this$1, _entry$32;
		c = this;
		exprType = (_entry = c.info.Types[(expr || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new types.TypeAndValue.Ptr()).Type;
		if (value = (_entry$1 = c.info.Types[(expr || go$interfaceNil).go$key()], _entry$1 !== undefined ? _entry$1.v : new types.TypeAndValue.Ptr()).Value, !(go$interfaceIsEqual(value, null))) {
			basic = types.Typ[17];
			if (!((value.Kind() === 2))) {
				basic = (x = exprType.Underlying(), (x !== null && x.constructor === (go$ptrType(types.Basic)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Basic)))));
			}
			if (!(((basic.Info() & 1) === 0))) {
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(strconv.FormatBool(exact.BoolVal(value)))]));
			} else if (!(((basic.Info() & 2) === 0))) {
				if (is64Bit(basic)) {
					_tuple = exact.Uint64Val(value), d = _tuple[0];
					if (basic.Kind() === 6) {
						return c.formatExpr("new %s(%s, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(exprType)), new Go$String(strconv.FormatInt(go$shiftRightInt64(new Go$Int64(d.high, d.low), 32), 10)), new Go$String(strconv.FormatUint(new Go$Uint64(d.high & 0, (d.low & 4294967295) >>> 0), 10))]));
					}
					return c.formatExpr("new %s(%s, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(exprType)), new Go$String(strconv.FormatUint(go$shiftRightUint64(d, 32), 10)), new Go$String(strconv.FormatUint(new Go$Uint64(d.high & 0, (d.low & 4294967295) >>> 0), 10))]));
				}
				_tuple$1 = exact.Int64Val(value), d$1 = _tuple$1[0];
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(strconv.FormatInt(d$1, 10))]));
			} else if (!(((basic.Info() & 8) === 0))) {
				_tuple$2 = exact.Float64Val(value), f = _tuple$2[0];
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(strconv.FormatFloat(f, 103, -1, 64))]));
			} else if (!(((basic.Info() & 16) === 0))) {
				_tuple$3 = exact.Float64Val(exact.Real(value)), r = _tuple$3[0];
				_tuple$4 = exact.Float64Val(exact.Imag(value)), i = _tuple$4[0];
				if (basic.Kind() === 23) {
					exprType = types.Typ[16];
				}
				return c.formatExpr("new %s(%s, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(exprType)), new Go$String(strconv.FormatFloat(r, 103, -1, 64)), new Go$String(strconv.FormatFloat(i, 103, -1, 64))]));
			} else if (!(((basic.Info() & 32) === 0))) {
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(encodeString(exact.StringVal(value)))]));
			} else {
				throw go$panic(new Go$String("Unhandled constant type: " + basic.String()));
			}
		}
		_ref = expr;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.CompositeLit))) {
			e = _ref.go$val;
			if (_tuple$5 = (exprType !== null && exprType.constructor === (go$ptrType(types.Pointer)) ? [exprType.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), ptrType = _tuple$5[0], isPointer = _tuple$5[1], isPointer) {
				exprType = ptrType.Elem();
			}
			collectIndexedElements = (function(elementType) {
				var elements, i$1, zero, _ref$1, _i, _slice, _index, element, isKve, _tuple$6, kve, _tuple$7, _entry$2, key, _slice$1, _index$1;
				elements = (go$sliceType(Go$String)).make(0, 0, function() { return ""; });
				i$1 = 0;
				zero = c.zeroValue(elementType);
				_ref$1 = e.Elts;
				_i = 0;
				while (_i < _ref$1.length) {
					element = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					if (_tuple$6 = (element !== null && element.constructor === (go$ptrType(ast.KeyValueExpr)) ? [element.go$val, true] : [(go$ptrType(ast.KeyValueExpr)).nil, false]), kve = _tuple$6[0], isKve = _tuple$6[1], isKve) {
						_tuple$7 = exact.Int64Val((_entry$2 = c.info.Types[(kve.Key || go$interfaceNil).go$key()], _entry$2 !== undefined ? _entry$2.v : new types.TypeAndValue.Ptr()).Value), key = _tuple$7[0];
						i$1 = ((key.low + ((key.high >> 31) * 4294967296)) >> 0);
						element = kve.Value;
					}
					while (elements.length <= i$1) {
						elements = go$append(elements, zero);
					}
					_slice$1 = elements, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = c.translateImplicitConversion(element, elementType).String()) : go$throwRuntimeError("index out of range");
					i$1 = i$1 + 1 >> 0;
					_i++;
				}
				return elements;
			});
			_ref$1 = exprType.Underlying();
			_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
			if (_type$1 === (go$ptrType(types.Array))) {
				t = _ref$1.go$val;
				elements = collectIndexedElements(t.Elem());
				if (!((elements.length === 0))) {
					zero = c.zeroValue(t.Elem());
					while (elements.length < ((x$1 = t.Len(), x$1.low + ((x$1.high >> 31) * 4294967296)) >> 0)) {
						elements = go$append(elements, zero);
					}
					return c.formatExpr("go$toNativeArray(\"%s\", [%s])", new (go$sliceType(go$emptyInterface))([new Go$String(typeKind(t.Elem())), new Go$String(strings.Join(elements, ", "))]));
				}
				return c.formatExpr("go$makeNativeArray(\"%s\", %d, function() { return %s; })", new (go$sliceType(go$emptyInterface))([new Go$String(typeKind(t.Elem())), new Go$Int(((x$2 = t.Len(), x$2.low + ((x$2.high >> 31) * 4294967296)) >> 0)), new Go$String(c.zeroValue(t.Elem()))]));
			} else if (_type$1 === (go$ptrType(types.Slice))) {
				t = _ref$1.go$val;
				return c.formatExpr("new %s([%s])", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(exprType)), new Go$String(strings.Join(collectIndexedElements(t.Elem()), ", "))]));
			} else if (_type$1 === (go$ptrType(types.Map))) {
				t = _ref$1.go$val;
				mapVar = c.newVariable("_map");
				keyVar = c.newVariable("_key");
				assignments = "";
				_ref$2 = e.Elts;
				_i = 0;
				while (_i < _ref$2.length) {
					element = (_slice = _ref$2, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					kve = (element !== null && element.constructor === (go$ptrType(ast.KeyValueExpr)) ? element.go$val : go$typeAssertionFailed(element, (go$ptrType(ast.KeyValueExpr))));
					assignments = assignments + (c.formatExpr("%s = %s, %s[%s] = { k: %s, v: %s }, ", new (go$sliceType(go$emptyInterface))([new Go$String(keyVar), c.translateImplicitConversion(kve.Key, t.Key()), new Go$String(mapVar), new Go$String(c.makeKey(c.newIdent(keyVar, t.Key()), t.Key())), new Go$String(keyVar), c.translateImplicitConversion(kve.Value, t.Elem())])).String());
					_i++;
				}
				return c.formatExpr("(%s = new Go$Map(), %s%s)", new (go$sliceType(go$emptyInterface))([new Go$String(mapVar), new Go$String(assignments), new Go$String(mapVar)]));
			} else if (_type$1 === (go$ptrType(types.Struct))) {
				t = _ref$1.go$val;
				elements$1 = (go$sliceType(Go$String)).make(t.NumFields(), 0, function() { return ""; });
				isKeyValue = true;
				if (!((e.Elts.length === 0))) {
					_tuple$6 = (x$3 = (_slice$1 = e.Elts, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (x$3 !== null && x$3.constructor === (go$ptrType(ast.KeyValueExpr)) ? [x$3.go$val, true] : [(go$ptrType(ast.KeyValueExpr)).nil, false])), isKeyValue = _tuple$6[1];
				}
				if (!isKeyValue) {
					_ref$3 = e.Elts;
					_i$1 = 0;
					while (_i$1 < _ref$3.length) {
						element$1 = (_slice$2 = _ref$3, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
						i$1 = _i$1;
						_slice$3 = elements$1, _index$3 = i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = c.translateImplicitConversion(element$1, t.Field(i$1).object.Type()).String()) : go$throwRuntimeError("index out of range");
						_i$1++;
					}
				}
				if (isKeyValue) {
					_ref$4 = elements$1;
					_i$2 = 0;
					while (_i$2 < _ref$4.length) {
						i$2 = _i$2;
						_slice$4 = elements$1, _index$4 = i$2, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = c.zeroValue(t.Field(i$2).object.Type())) : go$throwRuntimeError("index out of range");
						_i$2++;
					}
					_ref$5 = e.Elts;
					_i$3 = 0;
					while (_i$3 < _ref$5.length) {
						element$2 = (_slice$5 = _ref$5, _index$5 = _i$3, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
						kve$1 = (element$2 !== null && element$2.constructor === (go$ptrType(ast.KeyValueExpr)) ? element$2.go$val : go$typeAssertionFailed(element$2, (go$ptrType(ast.KeyValueExpr))));
						_ref$6 = elements$1;
						_i$4 = 0;
						while (_i$4 < _ref$6.length) {
							j = _i$4;
							if ((x$4 = kve$1.Key, (x$4 !== null && x$4.constructor === (go$ptrType(ast.Ident)) ? x$4.go$val : go$typeAssertionFailed(x$4, (go$ptrType(ast.Ident))))).Name === t.Field(j).object.Name()) {
								_slice$6 = elements$1, _index$6 = j, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = c.translateImplicitConversion(kve$1.Value, t.Field(j).object.Type()).String()) : go$throwRuntimeError("index out of range");
								break;
							}
							_i$4++;
						}
						_i$3++;
					}
				}
				return c.formatExpr("new %s.Ptr(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(exprType)), new Go$String(strings.Join(elements$1, ", "))]));
			} else {
				t = _ref$1;
				throw go$panic(new Go$String(fmt.Sprintf("Unhandled CompositeLit type: %T\n", new (go$sliceType(go$emptyInterface))([t]))));
			}
		} else if (_type === (go$ptrType(ast.FuncLit))) {
			e = _ref.go$val;
			_tuple$7 = c.translateFunction(e.Type, (exprType !== null && exprType.constructor === (go$ptrType(types.Signature)) ? exprType.go$val : go$typeAssertionFailed(exprType, (go$ptrType(types.Signature)))), e.Body.List), params = _tuple$7[0], body = _tuple$7[1];
			if (!((c.f.escapingVars.length === 0))) {
				list = strings.Join(c.f.escapingVars, ", ");
				return c.formatExpr("(function(%s) { return function(%s) {\n%s%s}; })(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(list), new Go$String(strings.Join(params, ", ")), new Go$String(go$bytesToString(body)), new Go$String(strings.Repeat("\t", c.indentation)), new Go$String(list)]));
			}
			return c.formatExpr("(function(%s) {\n%s%s})", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Join(params, ", ")), new Go$String(go$bytesToString(body)), new Go$String(strings.Repeat("\t", c.indentation))]));
		} else if (_type === (go$ptrType(ast.UnaryExpr))) {
			e = _ref.go$val;
			_ref$7 = e.Op;
			if (_ref$7 === 17) {
				_ref$8 = (_entry$2 = c.info.Types[(e.X || go$interfaceNil).go$key()], _entry$2 !== undefined ? _entry$2.v : new types.TypeAndValue.Ptr()).Type.Underlying();
				_type$2 = _ref$8 !== null ? _ref$8.constructor : null;
				if (_type$2 === (go$ptrType(types.Struct)) || _type$2 === (go$ptrType(types.Array))) {
					return c.translateExpr(e.X);
				} else {
					if (_tuple$8 = (x$5 = e.X, (x$5 !== null && x$5.constructor === (go$ptrType(ast.CompositeLit)) ? [x$5.go$val, true] : [(go$ptrType(ast.CompositeLit)).nil, false])), isComposite = _tuple$8[1], isComposite) {
						return c.formatExpr("go$newDataPointer(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new Go$String(c.typeName((_entry$3 = c.info.Types[(e || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : new types.TypeAndValue.Ptr()).Type))]));
					}
					closurePrefix = "";
					closureSuffix = "";
					if (!((c.f.escapingVars.length === 0))) {
						list$1 = strings.Join(c.f.escapingVars, ", ");
						closurePrefix = "(function(" + list$1 + ") { return ";
						closureSuffix = "; })(" + list$1 + ")";
					}
					vVar = c.newVariable("v");
					return c.formatExpr("%snew %s(function() { return %s; }, function(%s) { %s; })%s", new (go$sliceType(go$emptyInterface))([new Go$String(closurePrefix), new Go$String(c.typeName(exprType)), c.translateExpr(e.X), new Go$String(vVar), new Go$String(c.translateAssign(e.X, vVar)), new Go$String(closureSuffix)]));
				}
			} else if (_ref$7 === 36) {
				return c.formatExpr("undefined", new (go$sliceType(go$emptyInterface))([]));
			}
			t$1 = (_entry$4 = c.info.Types[(e.X || go$interfaceNil).go$key()], _entry$4 !== undefined ? _entry$4.v : new types.TypeAndValue.Ptr()).Type;
			basic$1 = (x$6 = t$1.Underlying(), (x$6 !== null && x$6.constructor === (go$ptrType(types.Basic)) ? x$6.go$val : go$typeAssertionFailed(x$6, (go$ptrType(types.Basic)))));
			_ref$9 = e.Op;
			if (_ref$9 === 12) {
				return c.translateExpr(e.X);
			} else if (_ref$9 === 13) {
				if (is64Bit(basic$1)) {
					return c.formatExpr("new %1s(-%2h, -%2l)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t$1)), e.X]));
				} else if (!(((basic$1.Info() & 16) === 0))) {
					return c.formatExpr("new %1s(-%2r, -%2i)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t$1)), e.X]));
				} else if (!(((basic$1.Info() & 4) === 0))) {
					return c.fixNumber(c.formatExpr("-%s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X)])), basic$1);
				} else {
					return c.formatExpr("-%s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X)]));
				}
			} else if (_ref$9 === 19) {
				if (is64Bit(basic$1)) {
					return c.formatExpr("new %1s(~%2h, ~%2l >>> 0)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t$1)), e.X]));
				}
				return c.fixNumber(c.formatExpr("~%s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X)])), basic$1);
			} else if (_ref$9 === 43) {
				x$7 = c.translateExpr(e.X);
				if (x$7.String() === "true") {
					return c.formatExpr("false", new (go$sliceType(go$emptyInterface))([]));
				}
				if (x$7.String() === "false") {
					return c.formatExpr("true", new (go$sliceType(go$emptyInterface))([]));
				}
				return c.formatExpr("!%s", new (go$sliceType(go$emptyInterface))([x$7]));
			} else {
				throw go$panic(new token.Token(e.Op));
			}
		} else if (_type === (go$ptrType(ast.BinaryExpr))) {
			e = _ref.go$val;
			if (e.Op === 44) {
				return c.formatExpr("!(%s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(new ast.BinaryExpr.Ptr(e.X, 0, 39, e.Y))]));
			}
			t$2 = (_entry$5 = c.info.Types[(e.X || go$interfaceNil).go$key()], _entry$5 !== undefined ? _entry$5.v : new types.TypeAndValue.Ptr()).Type;
			t2 = (_entry$6 = c.info.Types[(e.Y || go$interfaceNil).go$key()], _entry$6 !== undefined ? _entry$6.v : new types.TypeAndValue.Ptr()).Type;
			_tuple$9 = (x$8 = t2.Underlying(), (x$8 !== null && x$8.constructor === (go$ptrType(types.Interface)) ? [x$8.go$val, true] : [(go$ptrType(types.Interface)).nil, false])), isInterface = _tuple$9[1];
			if (isInterface) {
				t$2 = t2;
			}
			if (_tuple$10 = (x$9 = t$2.Underlying(), (x$9 !== null && x$9.constructor === (go$ptrType(types.Basic)) ? [x$9.go$val, true] : [(go$ptrType(types.Basic)).nil, false])), basic$2 = _tuple$10[0], isBasic = _tuple$10[1], isBasic && !(((basic$2.Info() & 26) === 0))) {
				if (is64Bit(basic$2)) {
					_ref$10 = e.Op;
					if (_ref$10 === 14) {
						return c.formatExpr("go$mul64(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
					} else if (_ref$10 === 15) {
						return c.formatExpr("go$div64(%s, %s, false)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
					} else if (_ref$10 === 16) {
						return c.formatExpr("go$div64(%s, %s, true)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
					} else if (_ref$10 === 20) {
						return c.formatExpr("go$shiftLeft64(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.flatten64(e.Y)]));
					} else if (_ref$10 === 21) {
						return c.formatExpr("go$shiftRight%s(%s, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(toJavaScriptType(basic$2)), c.translateExpr(e.X), c.flatten64(e.Y)]));
					} else if (_ref$10 === 39) {
						return c.formatExpr("(%1h === %2h && %1l === %2l)", new (go$sliceType(go$emptyInterface))([e.X, e.Y]));
					} else if (_ref$10 === 40) {
						return c.formatExpr("(%1h < %2h || (%1h === %2h && %1l < %2l))", new (go$sliceType(go$emptyInterface))([e.X, e.Y]));
					} else if (_ref$10 === 45) {
						return c.formatExpr("(%1h < %2h || (%1h === %2h && %1l <= %2l))", new (go$sliceType(go$emptyInterface))([e.X, e.Y]));
					} else if (_ref$10 === 41) {
						return c.formatExpr("(%1h > %2h || (%1h === %2h && %1l > %2l))", new (go$sliceType(go$emptyInterface))([e.X, e.Y]));
					} else if (_ref$10 === 46) {
						return c.formatExpr("(%1h > %2h || (%1h === %2h && %1l >= %2l))", new (go$sliceType(go$emptyInterface))([e.X, e.Y]));
					} else if (_ref$10 === 12 || _ref$10 === 13) {
						return c.formatExpr("new %3s(%1h %4t %2h, %1l %4t %2l)", new (go$sliceType(go$emptyInterface))([e.X, e.Y, new Go$String(c.typeName(t$2)), new token.Token(e.Op)]));
					} else if (_ref$10 === 17 || _ref$10 === 18 || _ref$10 === 19) {
						return c.formatExpr("new %3s(%1h %4t %2h, (%1l %4t %2l) >>> 0)", new (go$sliceType(go$emptyInterface))([e.X, e.Y, new Go$String(c.typeName(t$2)), new token.Token(e.Op)]));
					} else if (_ref$10 === 22) {
						return c.formatExpr("new %3s(%1h &~ %2h, (%1l &~ %2l) >>> 0)", new (go$sliceType(go$emptyInterface))([e.X, e.Y, new Go$String(c.typeName(t$2))]));
					} else {
						throw go$panic(new token.Token(e.Op));
					}
				}
				if (!(((basic$2.Info() & 16) === 0))) {
					_ref$11 = e.Op;
					if (_ref$11 === 39) {
						if (basic$2.Kind() === 15) {
							return c.formatExpr("(go$float32IsEqual(%1r, %2r) && go$float32IsEqual(%1i, %2i))", new (go$sliceType(go$emptyInterface))([e.X, e.Y]));
						}
						return c.formatExpr("(%1r === %2r && %1i === %2i)", new (go$sliceType(go$emptyInterface))([e.X, e.Y]));
					} else if (_ref$11 === 12 || _ref$11 === 13) {
						return c.formatExpr("new %3s(%1r %4t %2r, %1i %4t %2i)", new (go$sliceType(go$emptyInterface))([e.X, e.Y, new Go$String(c.typeName(t$2)), new token.Token(e.Op)]));
					} else if (_ref$11 === 14) {
						return c.formatExpr("new %3s(%1r * %2r - %1i * %2i, %1r * %2i + %1i * %2r)", new (go$sliceType(go$emptyInterface))([e.X, e.Y, new Go$String(c.typeName(t$2))]));
					} else if (_ref$11 === 15) {
						return c.formatExpr("go$divComplex(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
					} else {
						throw go$panic(new token.Token(e.Op));
					}
				}
				_ref$12 = e.Op;
				if (_ref$12 === 39) {
					if (basic$2.Kind() === 13) {
						return c.formatParenExpr("go$float32IsEqual(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
					}
					return c.formatParenExpr("%s === %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
				} else if (_ref$12 === 40 || _ref$12 === 45 || _ref$12 === 41 || _ref$12 === 46) {
					return c.formatExpr("%s %t %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new token.Token(e.Op), c.translateExpr(e.Y)]));
				} else if (_ref$12 === 12 || _ref$12 === 13) {
					if (!(((basic$2.Info() & 2) === 0))) {
						return c.fixNumber(c.formatExpr("%s %t %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new token.Token(e.Op), c.translateExpr(e.Y)])), basic$2);
					}
					return c.formatExpr("%s %t %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new token.Token(e.Op), c.translateExpr(e.Y)]));
				} else if (_ref$12 === 14) {
					_ref$13 = basic$2.Kind();
					if (_ref$13 === 5 || _ref$13 === 2) {
						return c.formatParenExpr("(((%1e >>> 16 << 16) * %2e >> 0) + (%1e << 16 >>> 16) * %2e) >> 0", new (go$sliceType(go$emptyInterface))([e.X, e.Y]));
					} else if (_ref$13 === 10 || _ref$13 === 7 || _ref$13 === 12) {
						return c.formatParenExpr("(((%1e >>> 16 << 16) * %2e >>> 0) + (%1e << 16 >>> 16) * %2e) >>> 0", new (go$sliceType(go$emptyInterface))([e.X, e.Y]));
					} else if (_ref$13 === 13 || _ref$13 === 14) {
						return c.formatExpr("%s * %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
					} else {
						return c.fixNumber(c.formatExpr("%s * %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)])), basic$2);
					}
				} else if (_ref$12 === 15) {
					if (!(((basic$2.Info() & 2) === 0))) {
						shift = ">>";
						if (!(((basic$2.Info() & 4) === 0))) {
							shift = ">>>";
						}
						return c.formatExpr("(%1s = %2s / %3s, (%1s === %1s && %1s !== 1/0 && %1s !== -1/0) ? %1s %4s 0 : go$throwRuntimeError(\"integer divide by zero\"))", new (go$sliceType(go$emptyInterface))([new Go$String(c.newVariable("_q")), c.translateExpr(e.X), c.translateExpr(e.Y), new Go$String(shift)]));
					}
					return c.formatExpr("%s / %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
				} else if (_ref$12 === 16) {
					return c.formatExpr("(%1s = %2s %% %3s, %1s === %1s ? %1s : go$throwRuntimeError(\"integer divide by zero\"))", new (go$sliceType(go$emptyInterface))([new Go$String(c.newVariable("_r")), c.translateExpr(e.X), c.translateExpr(e.Y)]));
				} else if (_ref$12 === 20 || _ref$12 === 21) {
					op = (new token.Token(e.Op)).String();
					if ((e.Op === 21) && !(((basic$2.Info() & 4) === 0))) {
						op = ">>>";
					}
					if (!(go$interfaceIsEqual((_entry$7 = c.info.Types[(e.Y || go$interfaceNil).go$key()], _entry$7 !== undefined ? _entry$7.v : new types.TypeAndValue.Ptr()).Value, null))) {
						return c.fixNumber(c.formatExpr("%s %s %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new Go$String(op), c.translateExpr(e.Y)])), basic$2);
					}
					if ((e.Op === 21) && ((basic$2.Info() & 4) === 0)) {
						return c.fixNumber(c.formatParenExpr("%s >> go$min(%s, 31)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)])), basic$2);
					}
					y = c.newVariable("y");
					return c.fixNumber(c.formatExpr("(%s = %s, %s < 32 ? (%s %s %s) : 0)", new (go$sliceType(go$emptyInterface))([new Go$String(y), c.translateImplicitConversion(e.Y, types.Typ[7]), new Go$String(y), c.translateExpr(e.X), new Go$String(op), new Go$String(y)])), basic$2);
				} else if (_ref$12 === 17 || _ref$12 === 18) {
					if (!(((basic$2.Info() & 4) === 0))) {
						return c.formatParenExpr("(%s %t %s) >>> 0", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new token.Token(e.Op), c.translateExpr(e.Y)]));
					}
					return c.formatParenExpr("%s %t %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new token.Token(e.Op), c.translateExpr(e.Y)]));
				} else if (_ref$12 === 22) {
					return c.formatParenExpr("%s & ~%s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
				} else if (_ref$12 === 19) {
					return c.fixNumber(c.formatParenExpr("%s ^ %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)])), basic$2);
				} else {
					throw go$panic(new token.Token(e.Op));
				}
			}
			_ref$14 = e.Op;
			if (_ref$14 === 12 || _ref$14 === 40 || _ref$14 === 45 || _ref$14 === 41 || _ref$14 === 46) {
				return c.formatExpr("%s %t %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new token.Token(e.Op), c.translateExpr(e.Y)]));
			} else if (_ref$14 === 34) {
				x$10 = c.translateExpr(e.X);
				y$1 = c.translateExpr(e.Y);
				if (x$10.String() === "false") {
					return c.formatExpr("false", new (go$sliceType(go$emptyInterface))([]));
				}
				return c.formatExpr("%s && %s", new (go$sliceType(go$emptyInterface))([x$10, y$1]));
			} else if (_ref$14 === 35) {
				x$11 = c.translateExpr(e.X);
				y$2 = c.translateExpr(e.Y);
				if (x$11.String() === "true") {
					return c.formatExpr("true", new (go$sliceType(go$emptyInterface))([]));
				}
				return c.formatExpr("%s || %s", new (go$sliceType(go$emptyInterface))([x$11, y$2]));
			} else if (_ref$14 === 39) {
				_ref$15 = t$2.Underlying();
				_type$3 = _ref$15 !== null ? _ref$15.constructor : null;
				if (_type$3 === (go$ptrType(types.Struct))) {
					u = _ref$15.go$val;
					x$12 = c.newVariable("x");
					y$3 = c.newVariable("y");
					conds = (go$sliceType(Go$String)).nil;
					i$3 = 0;
					while (i$3 < u.NumFields()) {
						field = u.Field(i$3);
						if (field.object.Name() === "_") {
							i$3 = i$3 + 1 >> 0;
							continue;
						}
						conds = go$append(conds, c.translateExpr(new ast.BinaryExpr.Ptr(c.newIdent(x$12 + "." + fieldName(u, i$3), field.object.Type()), 0, 39, c.newIdent(y$3 + "." + fieldName(u, i$3), field.object.Type()))).String());
						i$3 = i$3 + 1 >> 0;
					}
					if (conds.length === 0) {
						conds = new (go$sliceType(Go$String))(["true"]);
					}
					return c.formatExpr("(%s = %s, %s = %s, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(x$12), c.translateExpr(e.X), new Go$String(y$3), c.translateExpr(e.Y), new Go$String(strings.Join(conds, " && "))]));
				} else if (_type$3 === (go$ptrType(types.Interface))) {
					u = _ref$15.go$val;
					return c.formatExpr("go$interfaceIsEqual(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateImplicitConversion(e.X, t$2), c.translateImplicitConversion(e.Y, t$2)]));
				} else if (_type$3 === (go$ptrType(types.Array))) {
					u = _ref$15.go$val;
					return c.formatExpr("go$arrayIsEqual(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.translateExpr(e.Y)]));
				} else if (_type$3 === (go$ptrType(types.Pointer))) {
					u = _ref$15.go$val;
					_tuple$11 = (x$13 = e.X, (x$13 !== null && x$13.constructor === (go$ptrType(ast.UnaryExpr)) ? [x$13.go$val, true] : [(go$ptrType(ast.UnaryExpr)).nil, false])), xUnary = _tuple$11[0], xIsUnary = _tuple$11[1];
					_tuple$12 = (x$14 = e.Y, (x$14 !== null && x$14.constructor === (go$ptrType(ast.UnaryExpr)) ? [x$14.go$val, true] : [(go$ptrType(ast.UnaryExpr)).nil, false])), yUnary = _tuple$12[0], yIsUnary = _tuple$12[1];
					if (xIsUnary && (xUnary.Op === 17) && yIsUnary && (yUnary.Op === 17)) {
						_tuple$13 = (x$15 = xUnary.X, (x$15 !== null && x$15.constructor === (go$ptrType(ast.IndexExpr)) ? [x$15.go$val, true] : [(go$ptrType(ast.IndexExpr)).nil, false])), xIndex = _tuple$13[0], xIsIndex = _tuple$13[1];
						_tuple$14 = (x$16 = yUnary.X, (x$16 !== null && x$16.constructor === (go$ptrType(ast.IndexExpr)) ? [x$16.go$val, true] : [(go$ptrType(ast.IndexExpr)).nil, false])), yIndex = _tuple$14[0], yIsIndex = _tuple$14[1];
						if (xIsIndex && yIsIndex) {
							return c.formatExpr("go$sliceIsEqual(%s, %s, %s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(xIndex.X), c.flatten64(xIndex.Index), c.translateExpr(yIndex.X), c.flatten64(yIndex.Index)]));
						}
					}
					_ref$16 = u.Elem().Underlying();
					_type$4 = _ref$16 !== null ? _ref$16.constructor : null;
					if (_type$4 === (go$ptrType(types.Struct)) || _type$4 === (go$ptrType(types.Interface))) {
						return c.formatExpr("%s === %s", new (go$sliceType(go$emptyInterface))([c.translateImplicitConversion(e.X, t$2), c.translateImplicitConversion(e.Y, t$2)]));
					} else if (_type$4 === (go$ptrType(types.Array))) {
						return c.formatExpr("go$arrayIsEqual(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateImplicitConversion(e.X, t$2), c.translateImplicitConversion(e.Y, t$2)]));
					} else {
						return c.formatExpr("go$pointerIsEqual(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateImplicitConversion(e.X, t$2), c.translateImplicitConversion(e.Y, t$2)]));
					}
				} else {
					u = _ref$15;
					return c.formatExpr("%s === %s", new (go$sliceType(go$emptyInterface))([c.translateImplicitConversion(e.X, t$2), c.translateImplicitConversion(e.Y, t$2)]));
				}
			} else {
				throw go$panic(new token.Token(e.Op));
			}
		} else if (_type === (go$ptrType(ast.ParenExpr))) {
			e = _ref.go$val;
			x$17 = c.translateExpr(e.X);
			if (x$17.String() === "true" || x$17.String() === "false") {
				return x$17;
			}
			return c.formatParenExpr("%s", new (go$sliceType(go$emptyInterface))([x$17]));
		} else if (_type === (go$ptrType(ast.IndexExpr))) {
			e = _ref.go$val;
			_ref$17 = (_entry$8 = c.info.Types[(e.X || go$interfaceNil).go$key()], _entry$8 !== undefined ? _entry$8.v : new types.TypeAndValue.Ptr()).Type.Underlying();
			_type$5 = _ref$17 !== null ? _ref$17.constructor : null;
			if (_type$5 === (go$ptrType(types.Array)) || _type$5 === (go$ptrType(types.Pointer))) {
				t$3 = _ref$17;
				return c.formatExpr("%s[%s]", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.flatten64(e.Index)]));
			} else if (_type$5 === (go$ptrType(types.Slice))) {
				t$3 = _ref$17.go$val;
				sliceVar = c.newVariable("_slice");
				indexVar = c.newVariable("_index");
				return c.formatExpr("(%s = %s, %s = %s, (%s >= 0 && %s < %s.length) ? %s.array[%s.offset + %s] : go$throwRuntimeError(\"index out of range\"))", new (go$sliceType(go$emptyInterface))([new Go$String(sliceVar), c.translateExpr(e.X), new Go$String(indexVar), c.flatten64(e.Index), new Go$String(indexVar), new Go$String(indexVar), new Go$String(sliceVar), new Go$String(sliceVar), new Go$String(sliceVar), new Go$String(indexVar)]));
			} else if (_type$5 === (go$ptrType(types.Map))) {
				t$3 = _ref$17.go$val;
				key = c.makeKey(e.Index, t$3.Key());
				if (_tuple$15 = (exprType !== null && exprType.constructor === (go$ptrType(types.Tuple)) ? [exprType.go$val, true] : [(go$ptrType(types.Tuple)).nil, false]), isTuple = _tuple$15[1], isTuple) {
					return c.formatExpr("(%1s = %2s[%3s], %1s !== undefined ? [%1s.v, true] : [%4s, false])", new (go$sliceType(go$emptyInterface))([new Go$String(c.newVariable("_entry")), c.translateExpr(e.X), new Go$String(key), new Go$String(c.zeroValue(t$3.Elem()))]));
				}
				return c.formatExpr("(%1s = %2s[%3s], %1s !== undefined ? %1s.v : %4s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.newVariable("_entry")), c.translateExpr(e.X), new Go$String(key), new Go$String(c.zeroValue(t$3.Elem()))]));
			} else if (_type$5 === (go$ptrType(types.Basic))) {
				t$3 = _ref$17.go$val;
				return c.formatExpr("%s.charCodeAt(%s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.flatten64(e.Index)]));
			} else {
				t$3 = _ref$17;
				throw go$panic(new Go$String(fmt.Sprintf("Unhandled IndexExpr: %T\n", new (go$sliceType(go$emptyInterface))([t$3]))));
			}
		} else if (_type === (go$ptrType(ast.SliceExpr))) {
			e = _ref.go$val;
			if (_tuple$16 = (x$18 = (_entry$9 = c.info.Types[(e.X || go$interfaceNil).go$key()], _entry$9 !== undefined ? _entry$9.v : new types.TypeAndValue.Ptr()).Type.Underlying(), (x$18 !== null && x$18.constructor === (go$ptrType(types.Basic)) ? [x$18.go$val, true] : [(go$ptrType(types.Basic)).nil, false])), b = _tuple$16[0], isBasic$1 = _tuple$16[1], isBasic$1 && !(((b.Info() & 32) === 0))) {
				if (go$interfaceIsEqual(e.High, null)) {
					if (go$interfaceIsEqual(e.Low, null)) {
						return c.translateExpr(e.X);
					}
					return c.formatExpr("%s.substring(%s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), c.flatten64(e.Low)]));
				}
				low = "0";
				if (!(go$interfaceIsEqual(e.Low, null))) {
					low = c.flatten64(e.Low).String();
				}
				return c.formatExpr("%s.substring(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new Go$String(low), c.flatten64(e.High)]));
			}
			slice = c.translateConversionToSlice(e.X, exprType);
			if (go$interfaceIsEqual(e.High, null)) {
				if (go$interfaceIsEqual(e.Low, null)) {
					return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([slice]));
				}
				return c.formatExpr("go$subslice(%s, %s)", new (go$sliceType(go$emptyInterface))([slice, c.flatten64(e.Low)]));
			}
			low$1 = "0";
			if (!(go$interfaceIsEqual(e.Low, null))) {
				low$1 = c.flatten64(e.Low).String();
			}
			if (!(go$interfaceIsEqual(e.Max, null))) {
				return c.formatExpr("go$subslice(%s, %s, %s, %s)", new (go$sliceType(go$emptyInterface))([slice, new Go$String(low$1), c.flatten64(e.High), c.flatten64(e.Max)]));
			}
			return c.formatExpr("go$subslice(%s, %s, %s)", new (go$sliceType(go$emptyInterface))([slice, new Go$String(low$1), c.flatten64(e.High)]));
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			e = _ref.go$val;
			sel = (_entry$10 = c.info.Selections[e.go$key()], _entry$10 !== undefined ? _entry$10.v : (go$ptrType(types.Selection)).nil);
			parameterName = (function(v) {
				if (v.Anonymous() || v.object.Name() === "") {
					return c.newVariable("param");
				}
				return c.newVariable(v.object.Name());
			});
			makeParametersList = (function() {
				var x$19, params$1, names, i$4, _slice$7, _index$7;
				params$1 = (x$19 = sel.Obj().Type(), (x$19 !== null && x$19.constructor === (go$ptrType(types.Signature)) ? x$19.go$val : go$typeAssertionFailed(x$19, (go$ptrType(types.Signature))))).Params();
				names = (go$sliceType(Go$String)).make(params$1.Len(), 0, function() { return ""; });
				i$4 = 0;
				while (i$4 < params$1.Len()) {
					_slice$7 = names, _index$7 = i$4, (_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = parameterName(params$1.At(i$4))) : go$throwRuntimeError("index out of range");
					i$4 = i$4 + 1 >> 0;
				}
				return names;
			});
			_ref$18 = sel.Kind();
			if (_ref$18 === 0) {
				_tuple$17 = c.translateSelection(sel), fields = _tuple$17[0], jsTag = _tuple$17[1];
				if (!(jsTag === "")) {
					if (_tuple$18 = (x$19 = sel.Type(), (x$19 !== null && x$19.constructor === (go$ptrType(types.Signature)) ? [x$19.go$val, true] : [(go$ptrType(types.Signature)).nil, false])), ok = _tuple$18[1], ok) {
						return c.formatExpr("go$internalize(%1e.%2s.%3s, %4s, %1e.%2s)", new (go$sliceType(go$emptyInterface))([e.X, new Go$String(strings.Join(fields, ".")), new Go$String(jsTag), new Go$String(c.typeName(sel.Type()))]));
					}
					return c.internalize(c.formatExpr("%s.%s.%s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new Go$String(strings.Join(fields, ".")), new Go$String(jsTag)])), sel.Type());
				}
				return c.formatExpr("%s.%s", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X), new Go$String(strings.Join(fields, "."))]));
			} else if (_ref$18 === 1) {
				if (!sel.Obj().Exported()) {
					_key = sel.Obj(), (c.dependencies || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: true };
				}
				parameters = makeParametersList();
				target = c.translateExpr(e.X);
				if (isWrapped(sel.Recv())) {
					target = c.formatParenExpr("new %s(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(sel.Recv())), target]));
				}
				recv = c.newVariable("_recv");
				return c.formatExpr("(%s = %s, function(%s) { return %s.%s(%s); })", new (go$sliceType(go$emptyInterface))([new Go$String(recv), target, new Go$String(strings.Join(parameters, ", ")), new Go$String(recv), new Go$String(e.Sel.Name), new Go$String(strings.Join(parameters, ", "))]));
			} else if (_ref$18 === 2) {
				if (!sel.Obj().Exported()) {
					_key$1 = sel.Obj(), (c.dependencies || go$throwRuntimeError("assignment to entry in nil map"))[(_key$1 || go$interfaceNil).go$key()] = { k: _key$1, v: true };
				}
				recv$1 = "recv";
				if (isWrapped(sel.Recv())) {
					recv$1 = fmt.Sprintf("(new %s(recv))", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(sel.Recv()))]));
				}
				parameters$1 = makeParametersList();
				return c.formatExpr("(function(%s) { return %s.%s(%s); })", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Join(go$appendSlice(new (go$sliceType(Go$String))(["recv"]), parameters$1), ", ")), new Go$String(recv$1), new Go$String((x$20 = sel.Obj(), (x$20 !== null && x$20.constructor === (go$ptrType(types.Func)) ? x$20.go$val : go$typeAssertionFailed(x$20, (go$ptrType(types.Func))))).object.Name()), new Go$String(strings.Join(parameters$1, ", "))]));
			} else if (_ref$18 === 3) {
				if (!(sel.Obj().Pkg() === (go$ptrType(types.Package)).nil) && sel.Obj().Pkg().Path() === "github.com/gopherjs/gopherjs/js") {
					_ref$19 = sel.Obj().Name();
					if (_ref$19 === "Global") {
						return c.formatExpr("go$global", new (go$sliceType(go$emptyInterface))([]));
					} else if (_ref$19 === "This") {
						if (c.f.flattened) {
							return c.formatExpr("go$this", new (go$sliceType(go$emptyInterface))([]));
						}
						return c.formatExpr("this", new (go$sliceType(go$emptyInterface))([]));
					} else {
						throw go$panic(new Go$String("Invalid js package object: " + sel.Obj().Name()));
					}
				}
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.objectName(sel.Obj()))]));
			}
			throw go$panic(new Go$String(""));
		} else if (_type === (go$ptrType(ast.CallExpr))) {
			e = _ref.go$val;
			plainFun = e.Fun;
			while (true) {
				if (_tuple$19 = (plainFun !== null && plainFun.constructor === (go$ptrType(ast.ParenExpr)) ? [plainFun.go$val, true] : [(go$ptrType(ast.ParenExpr)).nil, false]), p = _tuple$19[0], isParen = _tuple$19[1], isParen) {
					plainFun = p.X;
					continue;
				}
				break;
			}
			isType = go$throwNilPointerError;
			isType = (function(expr$1) {
				var e$1, _ref$20, _type$6, _tuple$20, x$21, _entry$11, ok$1, _tuple$21, x$22, _entry$12, ok$2;
				_ref$20 = expr$1;
				_type$6 = _ref$20 !== null ? _ref$20.constructor : null;
				if (_type$6 === (go$ptrType(ast.ArrayType)) || _type$6 === (go$ptrType(ast.ChanType)) || _type$6 === (go$ptrType(ast.FuncType)) || _type$6 === (go$ptrType(ast.InterfaceType)) || _type$6 === (go$ptrType(ast.MapType)) || _type$6 === (go$ptrType(ast.StructType))) {
					e$1 = _ref$20;
					return true;
				} else if (_type$6 === (go$ptrType(ast.StarExpr))) {
					e$1 = _ref$20.go$val;
					return isType(e$1.X);
				} else if (_type$6 === (go$ptrType(ast.Ident))) {
					e$1 = _ref$20.go$val;
					_tuple$20 = (x$21 = (_entry$11 = c.info.Uses[e$1.go$key()], _entry$11 !== undefined ? _entry$11.v : null), (x$21 !== null && x$21.constructor === (go$ptrType(types.TypeName)) ? [x$21.go$val, true] : [(go$ptrType(types.TypeName)).nil, false])), ok$1 = _tuple$20[1];
					return ok$1;
				} else if (_type$6 === (go$ptrType(ast.SelectorExpr))) {
					e$1 = _ref$20.go$val;
					_tuple$21 = (x$22 = (_entry$12 = c.info.Uses[e$1.Sel.go$key()], _entry$12 !== undefined ? _entry$12.v : null), (x$22 !== null && x$22.constructor === (go$ptrType(types.TypeName)) ? [x$22.go$val, true] : [(go$ptrType(types.TypeName)).nil, false])), ok$2 = _tuple$21[1];
					return ok$2;
				} else if (_type$6 === (go$ptrType(ast.ParenExpr))) {
					e$1 = _ref$20.go$val;
					return isType(e$1.X);
				} else {
					e$1 = _ref$20;
					return false;
				}
			});
			if (isType(plainFun)) {
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([c.translateConversion((_slice$7 = e.Args, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), (_entry$11 = c.info.Types[(plainFun || go$interfaceNil).go$key()], _entry$11 !== undefined ? _entry$11.v : new types.TypeAndValue.Ptr()).Type)]));
			}
			fun = (go$ptrType(expression)).nil;
			_ref$20 = plainFun;
			_type$6 = _ref$20 !== null ? _ref$20.constructor : null;
			if (_type$6 === (go$ptrType(ast.Ident))) {
				f$1 = _ref$20.go$val;
				if (_tuple$20 = (x$21 = (_entry$12 = c.info.Uses[f$1.go$key()], _entry$12 !== undefined ? _entry$12.v : null), (x$21 !== null && x$21.constructor === (go$ptrType(types.Builtin)) ? [x$21.go$val, true] : [(go$ptrType(types.Builtin)).nil, false])), o = _tuple$20[0], ok$1 = _tuple$20[1], ok$1) {
					_ref$21 = o.object.Name();
					if (_ref$21 === "new") {
						t$4 = (x$22 = (_entry$13 = c.info.Types[(e || go$interfaceNil).go$key()], _entry$13 !== undefined ? _entry$13.v : new types.TypeAndValue.Ptr()).Type, (x$22 !== null && x$22.constructor === (go$ptrType(types.Pointer)) ? x$22.go$val : go$typeAssertionFailed(x$22, (go$ptrType(types.Pointer)))));
						if (c.pkg.Path() === "syscall" && types.Identical(t$4.Elem().Underlying(), types.Typ[12])) {
							return c.formatExpr("new Uint8Array(8)", new (go$sliceType(go$emptyInterface))([]));
						}
						_ref$22 = t$4.Elem().Underlying();
						_type$7 = _ref$22 !== null ? _ref$22.constructor : null;
						if (_type$7 === (go$ptrType(types.Struct)) || _type$7 === (go$ptrType(types.Array))) {
							return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.zeroValue(t$4.Elem()))]));
						} else {
							return c.formatExpr("go$newDataPointer(%s, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.zeroValue(t$4.Elem())), new Go$String(c.typeName(t$4))]));
						}
					} else if (_ref$21 === "make") {
						_ref$23 = (_entry$14 = c.info.Types[((_slice$8 = e.Args, _index$8 = 0, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$14 !== undefined ? _entry$14.v : new types.TypeAndValue.Ptr()).Type.Underlying();
						_type$8 = _ref$23 !== null ? _ref$23.constructor : null;
						if (_type$8 === (go$ptrType(types.Slice))) {
							argType = _ref$23.go$val;
							length = c.flatten64((_slice$9 = e.Args, _index$9 = 1, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"))).String();
							capacity = "0";
							if (e.Args.length === 3) {
								capacity = c.flatten64((_slice$10 = e.Args, _index$10 = 2, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"))).String();
							}
							return c.formatExpr("%s.make(%s, %s, function() { return %s; })", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName((_entry$15 = c.info.Types[((_slice$11 = e.Args, _index$11 = 0, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$15 !== undefined ? _entry$15.v : new types.TypeAndValue.Ptr()).Type)), new Go$String(length), new Go$String(capacity), new Go$String(c.zeroValue(argType.Elem()))]));
						} else if (_type$8 === (go$ptrType(types.Map))) {
							argType = _ref$23.go$val;
							return c.formatExpr("new Go$Map()", new (go$sliceType(go$emptyInterface))([]));
						} else if (_type$8 === (go$ptrType(types.Chan))) {
							argType = _ref$23.go$val;
							return c.formatExpr("new %s()", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName((_entry$16 = c.info.Types[((_slice$12 = e.Args, _index$12 = 0, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$16 !== undefined ? _entry$16.v : new types.TypeAndValue.Ptr()).Type))]));
						} else {
							argType = _ref$23;
							throw go$panic(new Go$String(fmt.Sprintf("Unhandled make type: %T\n", new (go$sliceType(go$emptyInterface))([argType]))));
						}
					} else if (_ref$21 === "len") {
						arg = c.translateExpr((_slice$13 = e.Args, _index$13 = 0, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")));
						_ref$24 = (_entry$17 = c.info.Types[((_slice$14 = e.Args, _index$14 = 0, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$17 !== undefined ? _entry$17.v : new types.TypeAndValue.Ptr()).Type.Underlying();
						_type$9 = _ref$24 !== null ? _ref$24.constructor : null;
						if (_type$9 === (go$ptrType(types.Basic)) || _type$9 === (go$ptrType(types.Slice))) {
							argType$1 = _ref$24;
							return c.formatExpr("%s.length", new (go$sliceType(go$emptyInterface))([arg]));
						} else if (_type$9 === (go$ptrType(types.Pointer))) {
							argType$1 = _ref$24.go$val;
							return c.formatExpr("(%s, %d)", new (go$sliceType(go$emptyInterface))([arg, (x$23 = argType$1.Elem(), (x$23 !== null && x$23.constructor === (go$ptrType(types.Array)) ? x$23.go$val : go$typeAssertionFailed(x$23, (go$ptrType(types.Array))))).Len()]));
						} else if (_type$9 === (go$ptrType(types.Map))) {
							argType$1 = _ref$24.go$val;
							return c.formatExpr("go$keys(%s).length", new (go$sliceType(go$emptyInterface))([arg]));
						} else if (_type$9 === (go$ptrType(types.Chan))) {
							argType$1 = _ref$24.go$val;
							return c.formatExpr("0", new (go$sliceType(go$emptyInterface))([]));
						} else {
							argType$1 = _ref$24;
							throw go$panic(new Go$String(fmt.Sprintf("Unhandled len type: %T\n", new (go$sliceType(go$emptyInterface))([argType$1]))));
						}
					} else if (_ref$21 === "cap") {
						arg$1 = c.translateExpr((_slice$15 = e.Args, _index$15 = 0, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range")));
						_ref$25 = (_entry$18 = c.info.Types[((_slice$16 = e.Args, _index$16 = 0, (_index$16 >= 0 && _index$16 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$16] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$18 !== undefined ? _entry$18.v : new types.TypeAndValue.Ptr()).Type.Underlying();
						_type$10 = _ref$25 !== null ? _ref$25.constructor : null;
						if (_type$10 === (go$ptrType(types.Slice))) {
							argType$2 = _ref$25.go$val;
							return c.formatExpr("%s.capacity", new (go$sliceType(go$emptyInterface))([arg$1]));
						} else if (_type$10 === (go$ptrType(types.Pointer))) {
							argType$2 = _ref$25.go$val;
							return c.formatExpr("(%s, %d)", new (go$sliceType(go$emptyInterface))([arg$1, (x$24 = argType$2.Elem(), (x$24 !== null && x$24.constructor === (go$ptrType(types.Array)) ? x$24.go$val : go$typeAssertionFailed(x$24, (go$ptrType(types.Array))))).Len()]));
						} else if (_type$10 === (go$ptrType(types.Chan))) {
							argType$2 = _ref$25.go$val;
							return c.formatExpr("0", new (go$sliceType(go$emptyInterface))([]));
						} else {
							argType$2 = _ref$25;
							throw go$panic(new Go$String(fmt.Sprintf("Unhandled cap type: %T\n", new (go$sliceType(go$emptyInterface))([argType$2]))));
						}
					} else if (_ref$21 === "panic") {
						return c.formatExpr("throw go$panic(%s)", new (go$sliceType(go$emptyInterface))([c.translateImplicitConversion((_slice$17 = e.Args, _index$17 = 0, (_index$17 >= 0 && _index$17 < _slice$17.length) ? _slice$17.array[_slice$17.offset + _index$17] : go$throwRuntimeError("index out of range")), types.NewInterface((go$sliceType((go$ptrType(types.Func)))).nil, (go$sliceType((go$ptrType(types.Named)))).nil))]));
					} else if (_ref$21 === "append") {
						if (e.Args.length === 1) {
							return c.translateExpr((_slice$18 = e.Args, _index$18 = 0, (_index$18 >= 0 && _index$18 < _slice$18.length) ? _slice$18.array[_slice$18.offset + _index$18] : go$throwRuntimeError("index out of range")));
						}
						if ((new token.Pos(e.Ellipsis)).IsValid()) {
							return c.formatExpr("go$appendSlice(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr((_slice$19 = e.Args, _index$19 = 0, (_index$19 >= 0 && _index$19 < _slice$19.length) ? _slice$19.array[_slice$19.offset + _index$19] : go$throwRuntimeError("index out of range"))), c.translateConversionToSlice((_slice$20 = e.Args, _index$20 = 1, (_index$20 >= 0 && _index$20 < _slice$20.length) ? _slice$20.array[_slice$20.offset + _index$20] : go$throwRuntimeError("index out of range")), exprType)]));
						}
						sliceType = (x$25 = exprType.Underlying(), (x$25 !== null && x$25.constructor === (go$ptrType(types.Slice)) ? x$25.go$val : go$typeAssertionFailed(x$25, (go$ptrType(types.Slice)))));
						return c.formatExpr("go$append(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr((_slice$21 = e.Args, _index$21 = 0, (_index$21 >= 0 && _index$21 < _slice$21.length) ? _slice$21.array[_slice$21.offset + _index$21] : go$throwRuntimeError("index out of range"))), new Go$String(strings.Join(c.translateExprSlice(go$subslice(e.Args, 1), sliceType.Elem()), ", "))]));
					} else if (_ref$21 === "delete") {
						return c.formatExpr("delete %s[%s]", new (go$sliceType(go$emptyInterface))([c.translateExpr((_slice$22 = e.Args, _index$22 = 0, (_index$22 >= 0 && _index$22 < _slice$22.length) ? _slice$22.array[_slice$22.offset + _index$22] : go$throwRuntimeError("index out of range"))), new Go$String(c.makeKey((_slice$23 = e.Args, _index$23 = 1, (_index$23 >= 0 && _index$23 < _slice$23.length) ? _slice$23.array[_slice$23.offset + _index$23] : go$throwRuntimeError("index out of range")), (x$26 = (_entry$19 = c.info.Types[((_slice$24 = e.Args, _index$24 = 0, (_index$24 >= 0 && _index$24 < _slice$24.length) ? _slice$24.array[_slice$24.offset + _index$24] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$19 !== undefined ? _entry$19.v : new types.TypeAndValue.Ptr()).Type.Underlying(), (x$26 !== null && x$26.constructor === (go$ptrType(types.Map)) ? x$26.go$val : go$typeAssertionFailed(x$26, (go$ptrType(types.Map))))).Key()))]));
					} else if (_ref$21 === "copy") {
						if (_tuple$21 = (x$27 = (_entry$20 = c.info.Types[((_slice$25 = e.Args, _index$25 = 1, (_index$25 >= 0 && _index$25 < _slice$25.length) ? _slice$25.array[_slice$25.offset + _index$25] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$20 !== undefined ? _entry$20.v : new types.TypeAndValue.Ptr()).Type.Underlying(), (x$27 !== null && x$27.constructor === (go$ptrType(types.Basic)) ? [x$27.go$val, true] : [(go$ptrType(types.Basic)).nil, false])), basic$3 = _tuple$21[0], isBasic$2 = _tuple$21[1], isBasic$2 && !(((basic$3.Info() & 32) === 0))) {
							return c.formatExpr("go$copyString(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr((_slice$26 = e.Args, _index$26 = 0, (_index$26 >= 0 && _index$26 < _slice$26.length) ? _slice$26.array[_slice$26.offset + _index$26] : go$throwRuntimeError("index out of range"))), c.translateExpr((_slice$27 = e.Args, _index$27 = 1, (_index$27 >= 0 && _index$27 < _slice$27.length) ? _slice$27.array[_slice$27.offset + _index$27] : go$throwRuntimeError("index out of range")))]));
						}
						return c.formatExpr("go$copySlice(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr((_slice$28 = e.Args, _index$28 = 0, (_index$28 >= 0 && _index$28 < _slice$28.length) ? _slice$28.array[_slice$28.offset + _index$28] : go$throwRuntimeError("index out of range"))), c.translateExpr((_slice$29 = e.Args, _index$29 = 1, (_index$29 >= 0 && _index$29 < _slice$29.length) ? _slice$29.array[_slice$29.offset + _index$29] : go$throwRuntimeError("index out of range")))]));
					} else if (_ref$21 === "print" || _ref$21 === "println") {
						return c.formatExpr("console.log(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Join(c.translateExprSlice(e.Args, null), ", "))]));
					} else if (_ref$21 === "complex") {
						return c.formatExpr("new %s(%s, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName((_entry$21 = c.info.Types[(e || go$interfaceNil).go$key()], _entry$21 !== undefined ? _entry$21.v : new types.TypeAndValue.Ptr()).Type)), c.translateExpr((_slice$30 = e.Args, _index$30 = 0, (_index$30 >= 0 && _index$30 < _slice$30.length) ? _slice$30.array[_slice$30.offset + _index$30] : go$throwRuntimeError("index out of range"))), c.translateExpr((_slice$31 = e.Args, _index$31 = 1, (_index$31 >= 0 && _index$31 < _slice$31.length) ? _slice$31.array[_slice$31.offset + _index$31] : go$throwRuntimeError("index out of range")))]));
					} else if (_ref$21 === "real") {
						return c.formatExpr("%s.real", new (go$sliceType(go$emptyInterface))([c.translateExpr((_slice$32 = e.Args, _index$32 = 0, (_index$32 >= 0 && _index$32 < _slice$32.length) ? _slice$32.array[_slice$32.offset + _index$32] : go$throwRuntimeError("index out of range")))]));
					} else if (_ref$21 === "imag") {
						return c.formatExpr("%s.imag", new (go$sliceType(go$emptyInterface))([c.translateExpr((_slice$33 = e.Args, _index$33 = 0, (_index$33 >= 0 && _index$33 < _slice$33.length) ? _slice$33.array[_slice$33.offset + _index$33] : go$throwRuntimeError("index out of range")))]));
					} else if (_ref$21 === "recover") {
						return c.formatExpr("go$recover()", new (go$sliceType(go$emptyInterface))([]));
					} else if (_ref$21 === "close") {
						return c.formatExpr("go$notSupported(\"close\")", new (go$sliceType(go$emptyInterface))([]));
					} else {
						throw go$panic(new Go$String(fmt.Sprintf("Unhandled builtin: %s\n", new (go$sliceType(go$emptyInterface))([new Go$String(o.object.Name())]))));
					}
				}
				fun = c.translateExpr(plainFun);
			} else if (_type$6 === (go$ptrType(ast.SelectorExpr))) {
				f$1 = _ref$20.go$val;
				sel$1 = (_entry$22 = c.info.Selections[f$1.go$key()], _entry$22 !== undefined ? _entry$22.v : (go$ptrType(types.Selection)).nil);
				o$1 = sel$1.Obj();
				externalizeExpr = (function(e$1) {
					var _entry$23, t$5;
					t$5 = (_entry$23 = c.info.Types[(e$1 || go$interfaceNil).go$key()], _entry$23 !== undefined ? _entry$23.v : new types.TypeAndValue.Ptr()).Type;
					if (types.Identical(t$5, types.Typ[25])) {
						return "null";
					}
					return c.externalize(c.translateExpr(e$1).String(), t$5);
				});
				externalizeArgs = (function(args) {
					var s, _ref$26, _i$5, _slice$34, _index$34, arg$2, i$4, _slice$35, _index$35;
					s = (go$sliceType(Go$String)).make(args.length, 0, function() { return ""; });
					_ref$26 = args;
					_i$5 = 0;
					while (_i$5 < _ref$26.length) {
						arg$2 = (_slice$34 = _ref$26, _index$34 = _i$5, (_index$34 >= 0 && _index$34 < _slice$34.length) ? _slice$34.array[_slice$34.offset + _index$34] : go$throwRuntimeError("index out of range"));
						i$4 = _i$5;
						_slice$35 = s, _index$35 = i$4, (_index$35 >= 0 && _index$35 < _slice$35.length) ? (_slice$35.array[_slice$35.offset + _index$35] = externalizeExpr(arg$2)) : go$throwRuntimeError("index out of range");
						_i$5++;
					}
					return strings.Join(s, ", ");
				});
				_ref$26 = sel$1.Kind();
				switch (0) { default: if (_ref$26 === 1) {
					if (!sel$1.Obj().Exported()) {
						_key$2 = sel$1.Obj(), (c.dependencies || go$throwRuntimeError("assignment to entry in nil map"))[(_key$2 || go$interfaceNil).go$key()] = { k: _key$2, v: true };
					}
					methodName = o$1.Name();
					if ((_entry$23 = reservedKeywords[methodName], _entry$23 !== undefined ? _entry$23.v : false)) {
						methodName = methodName + "$";
					}
					fun = c.translateExpr(f$1.X);
					t$5 = sel$1.Recv();
					_ref$27 = go$subslice(sel$1.Index(), 0, (sel$1.Index().length - 1 >> 0));
					_i$5 = 0;
					while (_i$5 < _ref$27.length) {
						index = (_slice$34 = _ref$27, _index$34 = _i$5, (_index$34 >= 0 && _index$34 < _slice$34.length) ? _slice$34.array[_slice$34.offset + _index$34] : go$throwRuntimeError("index out of range"));
						if (_tuple$22 = (t$5 !== null && t$5.constructor === (go$ptrType(types.Pointer)) ? [t$5.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), ptr = _tuple$22[0], isPtr = _tuple$22[1], isPtr) {
							t$5 = ptr.Elem();
						}
						s = (x$28 = t$5.Underlying(), (x$28 !== null && x$28.constructor === (go$ptrType(types.Struct)) ? x$28.go$val : go$typeAssertionFailed(x$28, (go$ptrType(types.Struct)))));
						fun = c.formatExpr("%s.%s", new (go$sliceType(go$emptyInterface))([fun, new Go$String(fieldName(s, index))]));
						t$5 = s.Field(index).object.Type();
						_i$5++;
					}
					if (!(o$1.Pkg() === (go$ptrType(types.Package)).nil) && o$1.Pkg().Path() === "github.com/gopherjs/gopherjs/js") {
						_ref$28 = o$1.Name();
						if (_ref$28 === "Get") {
							if (_tuple$23 = c.identifierConstant((_slice$35 = e.Args, _index$35 = 0, (_index$35 >= 0 && _index$35 < _slice$35.length) ? _slice$35.array[_slice$35.offset + _index$35] : go$throwRuntimeError("index out of range"))), id = _tuple$23[0], ok$2 = _tuple$23[1], ok$2) {
								return c.formatExpr("%s.%s", new (go$sliceType(go$emptyInterface))([fun, new Go$String(id)]));
							}
							return c.formatExpr("%s[go$externalize(%s, Go$String)]", new (go$sliceType(go$emptyInterface))([fun, c.translateExpr((_slice$36 = e.Args, _index$36 = 0, (_index$36 >= 0 && _index$36 < _slice$36.length) ? _slice$36.array[_slice$36.offset + _index$36] : go$throwRuntimeError("index out of range")))]));
						} else if (_ref$28 === "Set") {
							if (_tuple$24 = c.identifierConstant((_slice$37 = e.Args, _index$37 = 0, (_index$37 >= 0 && _index$37 < _slice$37.length) ? _slice$37.array[_slice$37.offset + _index$37] : go$throwRuntimeError("index out of range"))), id$1 = _tuple$24[0], ok$3 = _tuple$24[1], ok$3) {
								return c.formatExpr("%s.%s = %s", new (go$sliceType(go$emptyInterface))([fun, new Go$String(id$1), new Go$String(externalizeExpr((_slice$38 = e.Args, _index$38 = 1, (_index$38 >= 0 && _index$38 < _slice$38.length) ? _slice$38.array[_slice$38.offset + _index$38] : go$throwRuntimeError("index out of range"))))]));
							}
							return c.formatExpr("%s[go$externalize(%s, Go$String)] = %s", new (go$sliceType(go$emptyInterface))([fun, c.translateExpr((_slice$39 = e.Args, _index$39 = 0, (_index$39 >= 0 && _index$39 < _slice$39.length) ? _slice$39.array[_slice$39.offset + _index$39] : go$throwRuntimeError("index out of range"))), new Go$String(externalizeExpr((_slice$40 = e.Args, _index$40 = 1, (_index$40 >= 0 && _index$40 < _slice$40.length) ? _slice$40.array[_slice$40.offset + _index$40] : go$throwRuntimeError("index out of range"))))]));
						} else if (_ref$28 === "Length") {
							return c.formatExpr("go$parseInt(%s.length)", new (go$sliceType(go$emptyInterface))([fun]));
						} else if (_ref$28 === "Index") {
							return c.formatExpr("%s[%s]", new (go$sliceType(go$emptyInterface))([fun, c.translateExpr((_slice$41 = e.Args, _index$41 = 0, (_index$41 >= 0 && _index$41 < _slice$41.length) ? _slice$41.array[_slice$41.offset + _index$41] : go$throwRuntimeError("index out of range")))]));
						} else if (_ref$28 === "SetIndex") {
							return c.formatExpr("%s[%s] = %s", new (go$sliceType(go$emptyInterface))([fun, c.translateExpr((_slice$42 = e.Args, _index$42 = 0, (_index$42 >= 0 && _index$42 < _slice$42.length) ? _slice$42.array[_slice$42.offset + _index$42] : go$throwRuntimeError("index out of range"))), new Go$String(externalizeExpr((_slice$43 = e.Args, _index$43 = 1, (_index$43 >= 0 && _index$43 < _slice$43.length) ? _slice$43.array[_slice$43.offset + _index$43] : go$throwRuntimeError("index out of range"))))]));
						} else if (_ref$28 === "Call") {
							if (_tuple$25 = c.identifierConstant((_slice$44 = e.Args, _index$44 = 0, (_index$44 >= 0 && _index$44 < _slice$44.length) ? _slice$44.array[_slice$44.offset + _index$44] : go$throwRuntimeError("index out of range"))), id$2 = _tuple$25[0], ok$4 = _tuple$25[1], ok$4) {
								if ((new token.Pos(e.Ellipsis)).IsValid()) {
									objVar = c.newVariable("obj");
									return c.formatExpr("(%s = %s, %s.%s.apply(%s, %s))", new (go$sliceType(go$emptyInterface))([new Go$String(objVar), fun, new Go$String(objVar), new Go$String(id$2), new Go$String(objVar), new Go$String(externalizeExpr((_slice$45 = e.Args, _index$45 = 1, (_index$45 >= 0 && _index$45 < _slice$45.length) ? _slice$45.array[_slice$45.offset + _index$45] : go$throwRuntimeError("index out of range"))))]));
								}
								return c.formatExpr("%s.%s(%s)", new (go$sliceType(go$emptyInterface))([fun, new Go$String(id$2), new Go$String(externalizeArgs(go$subslice(e.Args, 1)))]));
							}
							if ((new token.Pos(e.Ellipsis)).IsValid()) {
								objVar$1 = c.newVariable("obj");
								return c.formatExpr("(%s = %s, %s[go$externalize(%s, Go$String)].apply(%s, %s))", new (go$sliceType(go$emptyInterface))([new Go$String(objVar$1), fun, new Go$String(objVar$1), c.translateExpr((_slice$46 = e.Args, _index$46 = 0, (_index$46 >= 0 && _index$46 < _slice$46.length) ? _slice$46.array[_slice$46.offset + _index$46] : go$throwRuntimeError("index out of range"))), new Go$String(objVar$1), new Go$String(externalizeExpr((_slice$47 = e.Args, _index$47 = 1, (_index$47 >= 0 && _index$47 < _slice$47.length) ? _slice$47.array[_slice$47.offset + _index$47] : go$throwRuntimeError("index out of range"))))]));
							}
							return c.formatExpr("%s[go$externalize(%s, Go$String)](%s)", new (go$sliceType(go$emptyInterface))([fun, c.translateExpr((_slice$48 = e.Args, _index$48 = 0, (_index$48 >= 0 && _index$48 < _slice$48.length) ? _slice$48.array[_slice$48.offset + _index$48] : go$throwRuntimeError("index out of range"))), new Go$String(externalizeArgs(go$subslice(e.Args, 1)))]));
						} else if (_ref$28 === "Invoke") {
							if ((new token.Pos(e.Ellipsis)).IsValid()) {
								return c.formatExpr("%s.apply(undefined, %s)", new (go$sliceType(go$emptyInterface))([fun, new Go$String(externalizeExpr((_slice$49 = e.Args, _index$49 = 0, (_index$49 >= 0 && _index$49 < _slice$49.length) ? _slice$49.array[_slice$49.offset + _index$49] : go$throwRuntimeError("index out of range"))))]));
							}
							return c.formatExpr("%s(%s)", new (go$sliceType(go$emptyInterface))([fun, new Go$String(externalizeArgs(e.Args))]));
						} else if (_ref$28 === "New") {
							if ((new token.Pos(e.Ellipsis)).IsValid()) {
								return c.formatExpr("new (go$global.Function.prototype.bind.apply(%s, [undefined].concat(%s)))", new (go$sliceType(go$emptyInterface))([fun, new Go$String(externalizeExpr((_slice$50 = e.Args, _index$50 = 0, (_index$50 >= 0 && _index$50 < _slice$50.length) ? _slice$50.array[_slice$50.offset + _index$50] : go$throwRuntimeError("index out of range"))))]));
							}
							return c.formatExpr("new %s(%s)", new (go$sliceType(go$emptyInterface))([fun, new Go$String(externalizeArgs(e.Args))]));
						} else if (_ref$28 === "Bool") {
							return c.internalize(fun, types.Typ[1]);
						} else if (_ref$28 === "String") {
							return c.internalize(fun, types.Typ[17]);
						} else if (_ref$28 === "Int") {
							return c.internalize(fun, types.Typ[2]);
						} else if (_ref$28 === "Float") {
							return c.internalize(fun, types.Typ[14]);
						} else if (_ref$28 === "Interface") {
							return c.internalize(fun, types.NewInterface((go$sliceType((go$ptrType(types.Func)))).nil, (go$sliceType((go$ptrType(types.Named)))).nil));
						} else if (_ref$28 === "IsUndefined") {
							return c.formatParenExpr("%s === undefined", new (go$sliceType(go$emptyInterface))([fun]));
						} else if (_ref$28 === "IsNull") {
							return c.formatParenExpr("%s === null", new (go$sliceType(go$emptyInterface))([fun]));
						} else {
							throw go$panic(new Go$String("Invalid js package object: " + o$1.Name()));
						}
					}
					methodsRecvType = (x$29 = o$1.Type(), (x$29 !== null && x$29.constructor === (go$ptrType(types.Signature)) ? x$29.go$val : go$typeAssertionFailed(x$29, (go$ptrType(types.Signature))))).Recv().object.Type();
					_tuple$26 = (methodsRecvType !== null && methodsRecvType.constructor === (go$ptrType(types.Pointer)) ? [methodsRecvType.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), pointerExpected = _tuple$26[1];
					_tuple$27 = (x$30 = t$5.Underlying(), (x$30 !== null && x$30.constructor === (go$ptrType(types.Pointer)) ? [x$30.go$val, true] : [(go$ptrType(types.Pointer)).nil, false])), isPointer$1 = _tuple$27[1];
					_tuple$28 = (x$31 = t$5.Underlying(), (x$31 !== null && x$31.constructor === (go$ptrType(types.Struct)) ? [x$31.go$val, true] : [(go$ptrType(types.Struct)).nil, false])), isStruct = _tuple$28[1];
					_tuple$29 = (x$32 = t$5.Underlying(), (x$32 !== null && x$32.constructor === (go$ptrType(types.Array)) ? [x$32.go$val, true] : [(go$ptrType(types.Array)).nil, false])), isArray = _tuple$29[1];
					if (pointerExpected && !isPointer$1 && !isStruct && !isArray) {
						vVar$1 = c.newVariable("v");
						fun = c.formatExpr("(new %s(function() { return %s; }, function(%s) { %s = %s; })).%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(methodsRecvType)), fun, new Go$String(vVar$1), fun, new Go$String(vVar$1), new Go$String(methodName)]));
						break;
					}
					if (isWrapped(t$5)) {
						fun = c.formatExpr("(new %s(%s)).%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t$5)), fun, new Go$String(methodName)]));
						break;
					}
					fun = c.formatExpr("%s.%s", new (go$sliceType(go$emptyInterface))([fun, new Go$String(methodName)]));
				} else if (_ref$26 === 3) {
					fun = c.translateExpr(f$1);
				} else if (_ref$26 === 0) {
					_tuple$30 = c.translateSelection(sel$1), fields$1 = _tuple$30[0], jsTag$1 = _tuple$30[1];
					if (!(jsTag$1 === "")) {
						sig = (x$33 = sel$1.Type(), (x$33 !== null && x$33.constructor === (go$ptrType(types.Signature)) ? x$33.go$val : go$typeAssertionFailed(x$33, (go$ptrType(types.Signature)))));
						return c.internalize(c.formatExpr("%s.%s.%s(%s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(f$1.X), new Go$String(strings.Join(fields$1, ".")), new Go$String(jsTag$1), new Go$String(externalizeArgs(e.Args))])), sig.Results().At(0).object.Type());
					}
					fun = c.formatExpr("%s.%s", new (go$sliceType(go$emptyInterface))([c.translateExpr(f$1.X), new Go$String(strings.Join(fields$1, "."))]));
				} else if (_ref$26 === 2) {
					fun = c.translateExpr(f$1);
				} else {
					throw go$panic(new Go$String(""));
				} }
			} else {
				f$1 = _ref$20;
				fun = c.translateExpr(plainFun);
			}
			sig$1 = (x$34 = (_entry$24 = c.info.Types[(plainFun || go$interfaceNil).go$key()], _entry$24 !== undefined ? _entry$24.v : new types.TypeAndValue.Ptr()).Type.Underlying(), (x$34 !== null && x$34.constructor === (go$ptrType(types.Signature)) ? x$34.go$val : go$typeAssertionFailed(x$34, (go$ptrType(types.Signature)))));
			if (e.Args.length === 1) {
				if (_tuple$31 = (x$35 = (_entry$25 = c.info.Types[((_slice$51 = e.Args, _index$51 = 0, (_index$51 >= 0 && _index$51 < _slice$51.length) ? _slice$51.array[_slice$51.offset + _index$51] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$25 !== undefined ? _entry$25.v : new types.TypeAndValue.Ptr()).Type, (x$35 !== null && x$35.constructor === (go$ptrType(types.Tuple)) ? [x$35.go$val, true] : [(go$ptrType(types.Tuple)).nil, false])), tuple = _tuple$31[0], isTuple$1 = _tuple$31[1], isTuple$1) {
					tupleVar = c.newVariable("_tuple");
					args = (go$sliceType(ast.Expr)).make(tuple.Len(), 0, function() { return null; });
					_ref$29 = args;
					_i$6 = 0;
					while (_i$6 < _ref$29.length) {
						i$4 = _i$6;
						_slice$52 = args, _index$52 = i$4, (_index$52 >= 0 && _index$52 < _slice$52.length) ? (_slice$52.array[_slice$52.offset + _index$52] = c.newIdent(c.formatExpr("%s[%d]", new (go$sliceType(go$emptyInterface))([new Go$String(tupleVar), new Go$Int(i$4)])).String(), tuple.At(i$4).object.Type())) : go$throwRuntimeError("index out of range");
						_i$6++;
					}
					return c.formatExpr("(%s = %s, %s(%s))", new (go$sliceType(go$emptyInterface))([new Go$String(tupleVar), c.translateExpr((_slice$53 = e.Args, _index$53 = 0, (_index$53 >= 0 && _index$53 < _slice$53.length) ? _slice$53.array[_slice$53.offset + _index$53] : go$throwRuntimeError("index out of range"))), fun, new Go$String(c.translateArgs(sig$1, args, false))]));
				}
			}
			return c.formatExpr("%s(%s)", new (go$sliceType(go$emptyInterface))([fun, new Go$String(c.translateArgs(sig$1, e.Args, (new token.Pos(e.Ellipsis)).IsValid()))]));
		} else if (_type === (go$ptrType(ast.StarExpr))) {
			e = _ref.go$val;
			if (_tuple$32 = (x$36 = e.X, (x$36 !== null && x$36.constructor === (go$ptrType(ast.CallExpr)) ? [x$36.go$val, true] : [(go$ptrType(ast.CallExpr)).nil, false])), c1 = _tuple$32[0], isCall = _tuple$32[1], isCall && (c1.Args.length === 1)) {
				if (_tuple$33 = (x$37 = (_slice$54 = c1.Args, _index$54 = 0, (_index$54 >= 0 && _index$54 < _slice$54.length) ? _slice$54.array[_slice$54.offset + _index$54] : go$throwRuntimeError("index out of range")), (x$37 !== null && x$37.constructor === (go$ptrType(ast.CallExpr)) ? [x$37.go$val, true] : [(go$ptrType(ast.CallExpr)).nil, false])), c2 = _tuple$33[0], isCall$1 = _tuple$33[1], isCall$1 && (c2.Args.length === 1) && types.Identical((_entry$26 = c.info.Types[(c2.Fun || go$interfaceNil).go$key()], _entry$26 !== undefined ? _entry$26.v : new types.TypeAndValue.Ptr()).Type, types.Typ[18])) {
					if (_tuple$34 = (x$38 = (_slice$55 = c2.Args, _index$55 = 0, (_index$55 >= 0 && _index$55 < _slice$55.length) ? _slice$55.array[_slice$55.offset + _index$55] : go$throwRuntimeError("index out of range")), (x$38 !== null && x$38.constructor === (go$ptrType(ast.UnaryExpr)) ? [x$38.go$val, true] : [(go$ptrType(ast.UnaryExpr)).nil, false])), unary = _tuple$34[0], isUnary = _tuple$34[1], isUnary && (unary.Op === 17)) {
						return c.translateExpr(unary.X);
					}
				}
			}
			_ref$30 = exprType.Underlying();
			_type$11 = _ref$30 !== null ? _ref$30.constructor : null;
			if (_type$11 === (go$ptrType(types.Struct)) || _type$11 === (go$ptrType(types.Array))) {
				return c.translateExpr(e.X);
			}
			return c.formatExpr("%s.go$get()", new (go$sliceType(go$emptyInterface))([c.translateExpr(e.X)]));
		} else if (_type === (go$ptrType(ast.TypeAssertExpr))) {
			e = _ref.go$val;
			if (go$interfaceIsEqual(e.Type, null)) {
				return c.translateExpr(e.X);
			}
			t$6 = (_entry$27 = c.info.Types[(e.Type || go$interfaceNil).go$key()], _entry$27 !== undefined ? _entry$27.v : new types.TypeAndValue.Ptr()).Type;
			check = "%1e !== null && " + c.typeCheck("%1e.constructor", t$6);
			valueSuffix = "";
			if (_tuple$35 = (x$39 = t$6.Underlying(), (x$39 !== null && x$39.constructor === (go$ptrType(types.Interface)) ? [x$39.go$val, true] : [(go$ptrType(types.Interface)).nil, false])), isInterface$1 = _tuple$35[1], !isInterface$1) {
				valueSuffix = ".go$val";
			}
			if (_tuple$36 = (exprType !== null && exprType.constructor === (go$ptrType(types.Tuple)) ? [exprType.go$val, true] : [(go$ptrType(types.Tuple)).nil, false]), isTuple$2 = _tuple$36[1], isTuple$2) {
				return c.formatExpr("(" + check + " ? [%1e%2s, true] : [%3s, false])", new (go$sliceType(go$emptyInterface))([e.X, new Go$String(valueSuffix), new Go$String(c.zeroValue((_entry$28 = c.info.Types[(e.Type || go$interfaceNil).go$key()], _entry$28 !== undefined ? _entry$28.v : new types.TypeAndValue.Ptr()).Type))]));
			}
			return c.formatExpr("(" + check + " ? %1e%2s : go$typeAssertionFailed(%1e, %3s))", new (go$sliceType(go$emptyInterface))([e.X, new Go$String(valueSuffix), new Go$String(c.typeName(t$6))]));
		} else if (_type === (go$ptrType(ast.Ident))) {
			e = _ref.go$val;
			if (e.Name === "_") {
				throw go$panic(new Go$String("Tried to translate underscore identifier."));
			}
			_ref$31 = (_entry$29 = c.info.Uses[e.go$key()], _entry$29 !== undefined ? _entry$29.v : null);
			_type$12 = _ref$31 !== null ? _ref$31.constructor : null;
			if (_type$12 === (go$ptrType(types.PkgName))) {
				o$2 = _ref$31.go$val;
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String((_entry$30 = c.pkgVars[o$2.object.Pkg().Path()], _entry$30 !== undefined ? _entry$30.v : ""))]));
			} else if (_type$12 === (go$ptrType(types.Var)) || _type$12 === (go$ptrType(types.Const))) {
				o$2 = _ref$31;
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.objectName(o$2))]));
			} else if (_type$12 === (go$ptrType(types.Func))) {
				o$2 = _ref$31.go$val;
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.objectName(o$2))]));
			} else if (_type$12 === (go$ptrType(types.TypeName))) {
				o$2 = _ref$31.go$val;
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(o$2.object.Type()))]));
			} else if (_type$12 === (go$ptrType(types.Nil))) {
				o$2 = _ref$31.go$val;
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.zeroValue((_entry$31 = c.info.Types[(e || go$interfaceNil).go$key()], _entry$31 !== undefined ? _entry$31.v : new types.TypeAndValue.Ptr()).Type))]));
			} else {
				o$2 = _ref$31;
				throw go$panic(new Go$String(fmt.Sprintf("Unhandled object: %T\n", new (go$sliceType(go$emptyInterface))([o$2]))));
			}
		} else if (_type === (go$ptrType(This))) {
			e = _ref.go$val;
			this$1 = "this";
			if (c.f.flattened) {
				this$1 = "go$this";
			}
			if (isWrapped((_entry$32 = c.info.Types[(e || go$interfaceNil).go$key()], _entry$32 !== undefined ? _entry$32.v : new types.TypeAndValue.Ptr()).Type)) {
				this$1 = this$1 + ".go$val";
			}
			return c.formatExpr(this$1, new (go$sliceType(go$emptyInterface))([]));
		} else if (_type === null) {
			e = _ref;
			return c.formatExpr("", new (go$sliceType(go$emptyInterface))([]));
		} else {
			e = _ref;
			throw go$panic(new Go$String(fmt.Sprintf("Unhandled expression: %T\n", new (go$sliceType(go$emptyInterface))([e]))));
		}
	};
	pkgContext.prototype.translateExpr = function(expr) { return this.go$val.translateExpr(expr); };
	pkgContext.Ptr.prototype.identifierConstant = function(expr) {
		var c, _entry, val, s, _ref, _i, _rune, c$1, i;
		c = this;
		val = (_entry = c.info.Types[(expr || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new types.TypeAndValue.Ptr()).Value;
		if (go$interfaceIsEqual(val, null)) {
			return ["", false];
		}
		s = exact.StringVal(val);
		if (s.length === 0) {
			return ["", false];
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c$1 = _rune[0];
			i = _i;
			if (!((c$1 >= 97 && c$1 <= 122) || (c$1 >= 65 && c$1 <= 90) || (i > 0 && c$1 >= 48 && c$1 <= 57) || (c$1 === 95) || (c$1 === 36))) {
				return ["", false];
			}
			_i += _rune[1];
		}
		return [s, true];
	};
	pkgContext.prototype.identifierConstant = function(expr) { return this.go$val.identifierConstant(expr); };
	pkgContext.Ptr.prototype.translateExprSlice = function(exprs, desiredType) {
		var c, parts, _ref, _i, _slice, _index, expr, i, _slice$1, _index$1;
		c = this;
		parts = (go$sliceType(Go$String)).make(exprs.length, 0, function() { return ""; });
		_ref = exprs;
		_i = 0;
		while (_i < _ref.length) {
			expr = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$1 = parts, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = c.translateImplicitConversion(expr, desiredType).String()) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return parts;
	};
	pkgContext.prototype.translateExprSlice = function(exprs, desiredType) { return this.go$val.translateExprSlice(exprs, desiredType); };
	pkgContext.Ptr.prototype.translateConversion = function(expr, desiredType) {
		var c, _entry, exprType, isCall, call, _entry$1, _tuple, isPtr, _tuple$1, ptr, isNamed, _tuple$2, x, named, _slice, _index, t, _ref, _type, x$1, basicExprType, x$2, value, et, _ref$1, _type$1, isUnary, unary, _tuple$3, isIndexExpr, _tuple$4, x$3, indexExpr, isIdent, ident, _tuple$5, x$4, isPtr$1, _tuple$6, x$5, _entry$2, ptr$1, isStruct, _tuple$7, x$6, s, array, target, et$1, _ref$2, _type$2, isStruct$1, _tuple$8, x$7, s$1, array$1, target$1;
		c = this;
		exprType = (_entry = c.info.Types[(expr || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new types.TypeAndValue.Ptr()).Type;
		if (types.Identical(exprType, desiredType)) {
			return c.translateExpr(expr);
		}
		if (c.pkg.Path() === "reflect") {
			if (_tuple = (expr !== null && expr.constructor === (go$ptrType(ast.CallExpr)) ? [expr.go$val, true] : [(go$ptrType(ast.CallExpr)).nil, false]), call = _tuple[0], isCall = _tuple[1], isCall && types.Identical((_entry$1 = c.info.Types[(call.Fun || go$interfaceNil).go$key()], _entry$1 !== undefined ? _entry$1.v : new types.TypeAndValue.Ptr()).Type, types.Typ[18])) {
				if (_tuple$1 = (desiredType !== null && desiredType.constructor === (go$ptrType(types.Pointer)) ? [desiredType.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), ptr = _tuple$1[0], isPtr = _tuple$1[1], isPtr) {
					if (_tuple$2 = (x = ptr.Elem(), (x !== null && x.constructor === (go$ptrType(types.Named)) ? [x.go$val, true] : [(go$ptrType(types.Named)).nil, false])), named = _tuple$2[0], isNamed = _tuple$2[1], isNamed) {
						return c.formatExpr("%s.%s", new (go$sliceType(go$emptyInterface))([c.translateExpr((_slice = call.Args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))), new Go$String(named.Obj().object.Name())]));
					}
				}
			}
		}
		_ref = desiredType.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Basic))) {
			t = _ref.go$val;
			if (!(((t.Info() & 2) === 0))) {
				basicExprType = (x$1 = exprType.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(types.Basic)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(types.Basic)))));
				if (is64Bit(t)) {
					if (!is64Bit(basicExprType)) {
						if (basicExprType.Kind() === 12) {
							return c.formatExpr("new %1s(0, %2e.constructor === Number ? %2e : 1)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), expr]));
						}
						return c.formatExpr("new %s(0, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), c.translateExpr(expr)]));
					}
					return c.formatExpr("new %1s(%2h, %2l)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), expr]));
				} else if (is64Bit(basicExprType)) {
					if (((t.Info() & 4) === 0) && ((basicExprType.Info() & 4) === 0)) {
						return c.fixNumber(c.formatParenExpr("%1l + ((%1h >> 31) * 4294967296)", new (go$sliceType(go$emptyInterface))([expr])), t);
					}
					return c.fixNumber(c.formatExpr("%s.low", new (go$sliceType(go$emptyInterface))([c.translateExpr(expr)])), t);
				} else if (!(((basicExprType.Info() & 8) === 0))) {
					return c.formatParenExpr("%s >> 0", new (go$sliceType(go$emptyInterface))([c.translateExpr(expr)]));
				} else if (types.Identical(exprType, types.Typ[18])) {
					return c.translateExpr(expr);
				} else {
					return c.fixNumber(c.translateExpr(expr), t);
				}
			} else if (!(((t.Info() & 8) === 0))) {
				if ((t.Kind() === 14) && ((x$2 = exprType.Underlying(), (x$2 !== null && x$2.constructor === (go$ptrType(types.Basic)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(types.Basic))))).Kind() === 13)) {
					return c.formatExpr("go$float32frombits(go$float32bits(%s))", new (go$sliceType(go$emptyInterface))([c.flatten64(expr)]));
				}
				return c.flatten64(expr);
			} else if (!(((t.Info() & 16) === 0))) {
				return c.formatExpr("new %1s(%2r, %2i)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), expr]));
			} else if (!(((t.Info() & 32) === 0))) {
				value = c.translateExpr(expr);
				_ref$1 = exprType.Underlying();
				_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
				if (_type$1 === (go$ptrType(types.Basic))) {
					et = _ref$1.go$val;
					if (is64Bit(et)) {
						value = c.formatExpr("%s.low", new (go$sliceType(go$emptyInterface))([value]));
					}
					if (!(((et.Info() & 26) === 0))) {
						return c.formatExpr("go$encodeRune(%s)", new (go$sliceType(go$emptyInterface))([value]));
					}
					return value;
				} else if (_type$1 === (go$ptrType(types.Slice))) {
					et = _ref$1.go$val;
					if (types.Identical(et.Elem().Underlying(), types.Typ[5])) {
						return c.formatExpr("go$runesToString(%s)", new (go$sliceType(go$emptyInterface))([value]));
					}
					return c.formatExpr("go$bytesToString(%s)", new (go$sliceType(go$emptyInterface))([value]));
				} else {
					et = _ref$1;
					throw go$panic(new Go$String(fmt.Sprintf("Unhandled conversion: %v\n", new (go$sliceType(go$emptyInterface))([et]))));
				}
			} else if (t.Kind() === 18) {
				if (_tuple$3 = (expr !== null && expr.constructor === (go$ptrType(ast.UnaryExpr)) ? [expr.go$val, true] : [(go$ptrType(ast.UnaryExpr)).nil, false]), unary = _tuple$3[0], isUnary = _tuple$3[1], isUnary && (unary.Op === 17)) {
					if (_tuple$4 = (x$3 = unary.X, (x$3 !== null && x$3.constructor === (go$ptrType(ast.IndexExpr)) ? [x$3.go$val, true] : [(go$ptrType(ast.IndexExpr)).nil, false])), indexExpr = _tuple$4[0], isIndexExpr = _tuple$4[1], isIndexExpr) {
						return c.formatExpr("go$sliceToArray(%s)", new (go$sliceType(go$emptyInterface))([c.translateConversionToSlice(indexExpr.X, types.NewSlice(types.Typ[8]))]));
					}
					if (_tuple$5 = (x$4 = unary.X, (x$4 !== null && x$4.constructor === (go$ptrType(ast.Ident)) ? [x$4.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), ident = _tuple$5[0], isIdent = _tuple$5[1], isIdent && ident.Name === "_zero") {
						return c.formatExpr("new Uint8Array(0)", new (go$sliceType(go$emptyInterface))([]));
					}
				}
				if (_tuple$6 = (x$5 = (_entry$2 = c.info.Types[(expr || go$interfaceNil).go$key()], _entry$2 !== undefined ? _entry$2.v : new types.TypeAndValue.Ptr()).Type, (x$5 !== null && x$5.constructor === (go$ptrType(types.Pointer)) ? [x$5.go$val, true] : [(go$ptrType(types.Pointer)).nil, false])), ptr$1 = _tuple$6[0], isPtr$1 = _tuple$6[1], c.pkg.Path() === "syscall" && isPtr$1) {
					if (_tuple$7 = (x$6 = ptr$1.Elem().Underlying(), (x$6 !== null && x$6.constructor === (go$ptrType(types.Struct)) ? [x$6.go$val, true] : [(go$ptrType(types.Struct)).nil, false])), s = _tuple$7[0], isStruct = _tuple$7[1], isStruct) {
						array = c.newVariable("_array");
						target = c.newVariable("_struct");
						c.Printf("%s = new Uint8Array(%d);", new (go$sliceType(go$emptyInterface))([new Go$String(array), sizes32.Sizeof(s)]));
						c.Delayed((function() {
							c.Printf("%s = %s, %s;", new (go$sliceType(go$emptyInterface))([new Go$String(target), c.translateExpr(expr), new Go$String(c.loadStruct(array, target, s))]));
						}));
						return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(array)]));
					}
				}
			}
		} else if (_type === (go$ptrType(types.Slice))) {
			t = _ref.go$val;
			_ref$2 = exprType.Underlying();
			_type$2 = _ref$2 !== null ? _ref$2.constructor : null;
			if (_type$2 === (go$ptrType(types.Basic))) {
				et$1 = _ref$2.go$val;
				if (!(((et$1.Info() & 32) === 0))) {
					if (types.Identical(t.Elem().Underlying(), types.Typ[5])) {
						return c.formatExpr("new %s(go$stringToRunes(%s))", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), c.translateExpr(expr)]));
					}
					return c.formatExpr("new %s(go$stringToBytes(%s))", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), c.translateExpr(expr)]));
				}
			} else if (_type$2 === (go$ptrType(types.Array)) || _type$2 === (go$ptrType(types.Pointer))) {
				et$1 = _ref$2;
				return c.formatExpr("new %s(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), c.translateExpr(expr)]));
			}
		} else if (_type === (go$ptrType(types.Pointer))) {
			t = _ref.go$val;
			if (_tuple$8 = (x$7 = t.Elem().Underlying(), (x$7 !== null && x$7.constructor === (go$ptrType(types.Struct)) ? [x$7.go$val, true] : [(go$ptrType(types.Struct)).nil, false])), s$1 = _tuple$8[0], isStruct$1 = _tuple$8[1], isStruct$1) {
				if (c.pkg.Path() === "syscall" && types.Identical(exprType, types.Typ[18])) {
					array$1 = c.newVariable("_array");
					target$1 = c.newVariable("_struct");
					return c.formatExpr("(%s = %s, %s = %s, %s, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(array$1), c.translateExpr(expr), new Go$String(target$1), new Go$String(c.zeroValue(t.Elem())), new Go$String(c.loadStruct(array$1, target$1, s$1)), new Go$String(target$1)]));
				}
				return c.clone(c.translateExpr(expr), t.Elem());
			}
			if (!types.Identical(exprType, types.Typ[18])) {
				return c.formatExpr("new %1s(%2e.go$get, %2e.go$set)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), expr]));
			}
		}
		return c.translateImplicitConversion(expr, desiredType);
	};
	pkgContext.prototype.translateConversion = function(expr, desiredType) { return this.go$val.translateConversion(expr, desiredType); };
	pkgContext.Ptr.prototype.translateImplicitConversion = function(expr, desiredType) {
		var c, _ref, _type, isComposite, _tuple, _entry, exprType, _tuple$1, x, basicExprType, isBasicExpr, _ref$1, _type$1, isStruct, _tuple$2, x$1;
		c = this;
		if (go$interfaceIsEqual(desiredType, null)) {
			return c.translateExpr(expr);
		}
		if (go$interfaceIsEqual(expr, null)) {
			return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.zeroValue(desiredType))]));
		}
		_ref = desiredType.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Struct)) || _type === (go$ptrType(types.Array))) {
			if (_tuple = (expr !== null && expr.constructor === (go$ptrType(ast.CompositeLit)) ? [expr.go$val, true] : [(go$ptrType(ast.CompositeLit)).nil, false]), isComposite = _tuple[1], !isComposite) {
				return c.clone(c.translateExpr(expr), desiredType);
			}
		}
		exprType = (_entry = c.info.Types[(expr || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new types.TypeAndValue.Ptr()).Type;
		if (types.Identical(exprType, desiredType)) {
			return c.translateExpr(expr);
		}
		_tuple$1 = (x = exprType.Underlying(), (x !== null && x.constructor === (go$ptrType(types.Basic)) ? [x.go$val, true] : [(go$ptrType(types.Basic)).nil, false])), basicExprType = _tuple$1[0], isBasicExpr = _tuple$1[1];
		if (isBasicExpr && (basicExprType.Kind() === 25)) {
			return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.zeroValue(desiredType))]));
		}
		_ref$1 = desiredType.Underlying();
		_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
		if (_type$1 === (go$ptrType(types.Slice))) {
			return c.formatExpr("go$subslice(new %1s(%2e.array), %2e.offset, %2e.offset + %2e.length)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), expr]));
		} else if (_type$1 === (go$ptrType(types.Interface))) {
			if (isWrapped(exprType)) {
				return c.formatExpr("new %s(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(exprType)), c.translateExpr(expr)]));
			}
			if (_tuple$2 = (x$1 = exprType.Underlying(), (x$1 !== null && x$1.constructor === (go$ptrType(types.Struct)) ? [x$1.go$val, true] : [(go$ptrType(types.Struct)).nil, false])), isStruct = _tuple$2[1], isStruct) {
				return c.formatExpr("new %1e.constructor.Struct(%1e)", new (go$sliceType(go$emptyInterface))([expr]));
			}
		}
		return c.translateExpr(expr);
	};
	pkgContext.prototype.translateImplicitConversion = function(expr, desiredType) { return this.go$val.translateImplicitConversion(expr, desiredType); };
	pkgContext.Ptr.prototype.translateConversionToSlice = function(expr, desiredType) {
		var c, _ref, _type, _entry;
		c = this;
		_ref = (_entry = c.info.Types[(expr || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new types.TypeAndValue.Ptr()).Type.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Basic))) {
			return c.formatExpr("new %s(go$stringToBytes(%s))", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), c.translateExpr(expr)]));
		} else if (_type === (go$ptrType(types.Array)) || _type === (go$ptrType(types.Pointer))) {
			return c.formatExpr("new %s(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(desiredType)), c.translateExpr(expr)]));
		}
		return c.translateExpr(expr);
	};
	pkgContext.prototype.translateConversionToSlice = function(expr, desiredType) { return this.go$val.translateConversionToSlice(expr, desiredType); };
	pkgContext.Ptr.prototype.clone = function(src, ty) {
		var c, t, _ref, _type, structVar, fields, _ref$1, _i, i, _slice, _index, constructor, isNamed, _tuple, named;
		c = this;
		_ref = ty.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Struct))) {
			t = _ref.go$val;
			structVar = c.newVariable("_struct");
			fields = (go$sliceType(Go$String)).make(t.NumFields(), 0, function() { return ""; });
			_ref$1 = fields;
			_i = 0;
			while (_i < _ref$1.length) {
				i = _i;
				_slice = fields, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = c.clone(c.formatExpr("%s.%s", new (go$sliceType(go$emptyInterface))([new Go$String(structVar), new Go$String(fieldName(t, i))])), t.Field(i).object.Type()).String()) : go$throwRuntimeError("index out of range");
				_i++;
			}
			constructor = structVar + ".constructor";
			if (_tuple = (ty !== null && ty.constructor === (go$ptrType(types.Named)) ? [ty.go$val, true] : [(go$ptrType(types.Named)).nil, false]), named = _tuple[0], isNamed = _tuple[1], isNamed) {
				constructor = c.objectName(named.Obj()) + ".Ptr";
			}
			return c.formatExpr("(%s = %s, new %s(%s))", new (go$sliceType(go$emptyInterface))([new Go$String(structVar), src, new Go$String(constructor), new Go$String(strings.Join(fields, ", "))]));
		} else if (_type === (go$ptrType(types.Array))) {
			t = _ref.go$val;
			return c.formatExpr("go$mapArray(%s, function(entry) { return %s; })", new (go$sliceType(go$emptyInterface))([src, c.clone(c.formatExpr("entry", new (go$sliceType(go$emptyInterface))([])), t.Elem())]));
		} else {
			t = _ref;
			return src;
		}
	};
	pkgContext.prototype.clone = function(src, ty) { return this.go$val.clone(src, ty); };
	pkgContext.Ptr.prototype.loadStruct = function(array, target, s) {
		var c, view, code, fields, collectFields, offsets, _ref, _i, _slice, _index, field, i, t, _ref$1, _type, x, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4;
		c = this;
		view = c.newVariable("_view");
		code = fmt.Sprintf("%s = new DataView(%s.buffer, %s.byteOffset)", new (go$sliceType(go$emptyInterface))([new Go$String(view), new Go$String(array), new Go$String(array)]));
		fields = (go$sliceType((go$ptrType(types.Var)))).nil;
		collectFields = go$throwNilPointerError;
		collectFields = (function(s$1, path) {
			var i, field, isStruct, _tuple, x, fs;
			i = 0;
			while (i < s$1.NumFields()) {
				field = s$1.Field(i);
				if (_tuple = (x = field.object.Type().Underlying(), (x !== null && x.constructor === (go$ptrType(types.Struct)) ? [x.go$val, true] : [(go$ptrType(types.Struct)).nil, false])), fs = _tuple[0], isStruct = _tuple[1], isStruct) {
					collectFields(fs, path + "." + fieldName(s$1, i));
					i = i + 1 >> 0;
					continue;
				}
				fields = go$append(fields, types.NewVar(0, (go$ptrType(types.Package)).nil, path + "." + fieldName(s$1, i), field.object.Type()));
				i = i + 1 >> 0;
			}
		});
		collectFields(s, target);
		offsets = sizes32.Offsetsof(fields);
		_ref = fields;
		_i = 0;
		while (_i < _ref.length) {
			field = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_ref$1 = field.object.Type().Underlying();
			_type = _ref$1 !== null ? _ref$1.constructor : null;
			switch (0) { default: if (_type === (go$ptrType(types.Basic))) {
				t = _ref$1.go$val;
				if (!(((t.Info() & 26) === 0))) {
					if (is64Bit(t)) {
						code = code + (fmt.Sprintf(", %s = new %s(%s.getUint32(%d, true), %s.getUint32(%d, true))", new (go$sliceType(go$emptyInterface))([new Go$String(field.object.Name()), new Go$String(c.typeName(field.object.Type())), new Go$String(view), (x = (_slice$1 = offsets, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new Go$Int64(x.high + 0, x.low + 4)), new Go$String(view), (_slice$2 = offsets, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))])));
						break;
					}
					code = code + (fmt.Sprintf(", %s = %s.get%s(%d, true)", new (go$sliceType(go$emptyInterface))([new Go$String(field.object.Name()), new Go$String(view), new Go$String(toJavaScriptType(t)), (_slice$3 = offsets, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))])));
				}
			} else if (_type === (go$ptrType(types.Array))) {
				t = _ref$1.go$val;
				code = code + (fmt.Sprintf(", %s = new (go$nativeArray(\"%s\"))(%s.buffer, go$min(%s.byteOffset + %d, %s.buffer.byteLength))", new (go$sliceType(go$emptyInterface))([new Go$String(field.object.Name()), new Go$String(typeKind(t.Elem())), new Go$String(array), new Go$String(array), (_slice$4 = offsets, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), new Go$String(array)])));
			} }
			_i++;
		}
		return code;
	};
	pkgContext.prototype.loadStruct = function(array, target, s) { return this.go$val.loadStruct(array, target, s); };
	pkgContext.Ptr.prototype.typeCheck = function(of, to) {
		var c, isInterface, _tuple, x, in$1;
		c = this;
		if (_tuple = (x = to.Underlying(), (x !== null && x.constructor === (go$ptrType(types.Interface)) ? [x.go$val, true] : [(go$ptrType(types.Interface)).nil, false])), in$1 = _tuple[0], isInterface = _tuple[1], isInterface) {
			if (in$1.Empty()) {
				return "true";
			}
			return fmt.Sprintf("%s.implementedBy.indexOf(%s) !== -1", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(to)), new Go$String(of)]));
		}
		return of + " === " + c.typeName(to);
	};
	pkgContext.prototype.typeCheck = function(of, to) { return this.go$val.typeCheck(of, to); };
	pkgContext.Ptr.prototype.flatten64 = function(expr) {
		var c, x, _entry;
		c = this;
		if (is64Bit((x = (_entry = c.info.Types[(expr || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new types.TypeAndValue.Ptr()).Type.Underlying(), (x !== null && x.constructor === (go$ptrType(types.Basic)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Basic))))))) {
			return c.formatExpr("go$flatten64(%s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(expr)]));
		}
		return c.translateExpr(expr);
	};
	pkgContext.prototype.flatten64 = function(expr) { return this.go$val.flatten64(expr); };
	pkgContext.Ptr.prototype.fixNumber = function(value, basic) {
		var c, _ref;
		c = this;
		_ref = basic.Kind();
		if (_ref === 3) {
			return c.formatParenExpr("%s << 24 >> 24", new (go$sliceType(go$emptyInterface))([value]));
		} else if (_ref === 8) {
			return c.formatParenExpr("%s << 24 >>> 24", new (go$sliceType(go$emptyInterface))([value]));
		} else if (_ref === 4) {
			return c.formatParenExpr("%s << 16 >> 16", new (go$sliceType(go$emptyInterface))([value]));
		} else if (_ref === 9) {
			return c.formatParenExpr("%s << 16 >>> 16", new (go$sliceType(go$emptyInterface))([value]));
		} else if (_ref === 5 || _ref === 2) {
			return c.formatParenExpr("%s >> 0", new (go$sliceType(go$emptyInterface))([value]));
		} else if (_ref === 10 || _ref === 7 || _ref === 12) {
			return c.formatParenExpr("%s >>> 0", new (go$sliceType(go$emptyInterface))([value]));
		} else {
			throw go$panic(new Go$Int((basic.Kind() >> 0)));
		}
	};
	pkgContext.prototype.fixNumber = function(value, basic) { return this.go$val.fixNumber(value, basic); };
	pkgContext.Ptr.prototype.internalize = function(s, t) {
		var c, u, _ref, _type;
		c = this;
		if (isJsObject(t)) {
			return s;
		}
		_ref = t.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Basic))) {
			u = _ref.go$val;
			if (!(((u.Info() & 1) === 0))) {
				return c.formatExpr("!!(%s)", new (go$sliceType(go$emptyInterface))([s]));
			} else if (!(((u.Info() & 2) === 0)) && !is64Bit(u)) {
				return c.fixNumber(c.formatExpr("go$parseInt(%s)", new (go$sliceType(go$emptyInterface))([s])), u);
			} else if (!(((u.Info() & 8) === 0))) {
				return c.formatExpr("go$parseFloat(%s)", new (go$sliceType(go$emptyInterface))([s]));
			}
		}
		return c.formatExpr("go$internalize(%s, %s)", new (go$sliceType(go$emptyInterface))([s, new Go$String(c.typeName(t))]));
	};
	pkgContext.prototype.internalize = function(s, t) { return this.go$val.internalize(s, t); };
	pkgContext.Ptr.prototype.formatExpr = function(format, a) {
		var c;
		c = this;
		return c.formatExprInternal(format, a, false);
	};
	pkgContext.prototype.formatExpr = function(format, a) { return this.go$val.formatExpr(format, a); };
	pkgContext.Ptr.prototype.formatParenExpr = function(format, a) {
		var c;
		c = this;
		return c.formatExprInternal(format, a, true);
	};
	pkgContext.prototype.formatParenExpr = function(format, a) { return this.go$val.formatParenExpr(format, a); };
	pkgContext.Ptr.prototype.formatExprInternal = function(format, a, parens) {
		var c, vars, assignments, varFor, out, n, i, b, k, _ref, ok, _tuple, x, _slice, _index, e, x$1, _slice$1, _index$1, x$2, _slice$2, _index$2, x$3, _slice$3, _index$3, val, x$4, _slice$4, _index$4, _entry, _tuple$1, d, x$5, x$6, _slice$5, _index$5, _entry$1, val$1, x$7, _slice$6, _index$6, _entry$2, _tuple$2, d$1, val$2, x$8, _slice$7, _index$7, _entry$3, _tuple$3, r, val$3, x$9, _slice$8, _index$8, _entry$4, _tuple$4, i$1;
		c = this;
		vars = (go$sliceType(Go$String)).make(a.length, 0, function() { return ""; });
		assignments = (go$sliceType(Go$String)).nil;
		varFor = (function(i) {
			var _slice, _index, v, x, _slice$1, _index$1, e, isIdent, _tuple, ident, _slice$2, _index$2, _slice$3, _index$3;
			v = (_slice = vars, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!(v === "")) {
				return v;
			}
			e = (x = (_slice$1 = a, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (x !== null && ast.Expr.implementedBy.indexOf(x.constructor) !== -1 ? x : go$typeAssertionFailed(x, ast.Expr)));
			if (_tuple = (e !== null && e.constructor === (go$ptrType(ast.Ident)) ? [e.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), ident = _tuple[0], isIdent = _tuple[1], isIdent) {
				v = c.translateExpr(ident).String();
				_slice$2 = vars, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = v) : go$throwRuntimeError("index out of range");
				return v;
			}
			v = c.newVariable("x");
			assignments = go$append(assignments, v + " = " + c.translateExpr(e).String());
			_slice$3 = vars, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = v) : go$throwRuntimeError("index out of range");
			return v;
		});
		out = bytes.NewBuffer((go$sliceType(Go$Uint8)).nil);
		n = 0;
		i = 0;
		while (i < format.length) {
			b = format.charCodeAt(i);
			if (b === 37) {
				i = i + 1 >> 0;
				k = format.charCodeAt(i);
				if (k >= 48 && k <= 57) {
					n = (((k - 48 << 24 >>> 24) - 1 << 24 >>> 24) >> 0);
					i = i + 1 >> 0;
					k = format.charCodeAt(i);
				}
				_ref = k;
				switch (0) { default: if (_ref === 115) {
					if (_tuple = (x = (_slice = a, _index = n, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$ptrType(expression)) ? [x.go$val, true] : [(go$ptrType(expression)).nil, false])), e = _tuple[0], ok = _tuple[1], ok) {
						out.WriteString(e.StringWithParens());
						break;
					}
					out.WriteString((x$1 = (_slice$1 = a, _index$1 = n, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (x$1 !== null && x$1.constructor === Go$String ? x$1.go$val : go$typeAssertionFailed(x$1, Go$String))));
				} else if (_ref === 100) {
					out.WriteString(strconv.Itoa((x$2 = (_slice$2 = a, _index$2 = n, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), (x$2 !== null && x$2.constructor === Go$Int ? x$2.go$val : go$typeAssertionFailed(x$2, Go$Int)))));
				} else if (_ref === 116) {
					out.WriteString((new token.Token((x$3 = (_slice$3 = a, _index$3 = n, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), (x$3 !== null && x$3.constructor === token.Token ? x$3.go$val : go$typeAssertionFailed(x$3, token.Token))))).String());
				} else if (_ref === 101) {
					out.WriteString(varFor(n));
				} else if (_ref === 104) {
					if (val = (_entry = c.info.Types[((x$4 = (_slice$4 = a, _index$4 = n, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), (x$4 !== null && ast.Expr.implementedBy.indexOf(x$4.constructor) !== -1 ? x$4 : go$typeAssertionFailed(x$4, ast.Expr))) || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new types.TypeAndValue.Ptr()).Value, !(go$interfaceIsEqual(val, null))) {
						_tuple$1 = exact.Uint64Val(val), d = _tuple$1[0];
						if ((x$5 = (_entry$1 = c.info.Types[((x$6 = (_slice$5 = a, _index$5 = n, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")), (x$6 !== null && ast.Expr.implementedBy.indexOf(x$6.constructor) !== -1 ? x$6 : go$typeAssertionFailed(x$6, ast.Expr))) || go$interfaceNil).go$key()], _entry$1 !== undefined ? _entry$1.v : new types.TypeAndValue.Ptr()).Type.Underlying(), (x$5 !== null && x$5.constructor === (go$ptrType(types.Basic)) ? x$5.go$val : go$typeAssertionFailed(x$5, (go$ptrType(types.Basic))))).Kind() === 6) {
							out.WriteString(strconv.FormatInt(go$shiftRightInt64(new Go$Int64(d.high, d.low), 32), 10));
							i = i + 1 >> 0;
							continue;
						}
						out.WriteString(strconv.FormatUint(go$shiftRightUint64(d, 32), 10));
						i = i + 1 >> 0;
						continue;
					}
					out.WriteString(varFor(n) + ".high");
				} else if (_ref === 108) {
					if (val$1 = (_entry$2 = c.info.Types[((x$7 = (_slice$6 = a, _index$6 = n, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")), (x$7 !== null && ast.Expr.implementedBy.indexOf(x$7.constructor) !== -1 ? x$7 : go$typeAssertionFailed(x$7, ast.Expr))) || go$interfaceNil).go$key()], _entry$2 !== undefined ? _entry$2.v : new types.TypeAndValue.Ptr()).Value, !(go$interfaceIsEqual(val$1, null))) {
						_tuple$2 = exact.Uint64Val(val$1), d$1 = _tuple$2[0];
						out.WriteString(strconv.FormatUint(new Go$Uint64(d$1.high & 0, (d$1.low & 4294967295) >>> 0), 10));
						i = i + 1 >> 0;
						continue;
					}
					out.WriteString(varFor(n) + ".low");
				} else if (_ref === 114) {
					if (val$2 = (_entry$3 = c.info.Types[((x$8 = (_slice$7 = a, _index$7 = n, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), (x$8 !== null && ast.Expr.implementedBy.indexOf(x$8.constructor) !== -1 ? x$8 : go$typeAssertionFailed(x$8, ast.Expr))) || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : new types.TypeAndValue.Ptr()).Value, !(go$interfaceIsEqual(val$2, null))) {
						_tuple$3 = exact.Float64Val(exact.Real(val$2)), r = _tuple$3[0];
						out.WriteString(strconv.FormatFloat(r, 103, -1, 64));
						i = i + 1 >> 0;
						continue;
					}
					out.WriteString(varFor(n) + ".real");
				} else if (_ref === 105) {
					if (val$3 = (_entry$4 = c.info.Types[((x$9 = (_slice$8 = a, _index$8 = n, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")), (x$9 !== null && ast.Expr.implementedBy.indexOf(x$9.constructor) !== -1 ? x$9 : go$typeAssertionFailed(x$9, ast.Expr))) || go$interfaceNil).go$key()], _entry$4 !== undefined ? _entry$4.v : new types.TypeAndValue.Ptr()).Value, !(go$interfaceIsEqual(val$3, null))) {
						_tuple$4 = exact.Float64Val(exact.Imag(val$3)), i$1 = _tuple$4[0];
						out.WriteString(strconv.FormatFloat(i$1, 103, -1, 64));
						i = i + 1 >> 0;
						continue;
					}
					out.WriteString(varFor(n) + ".imag");
				} else if (_ref === 37) {
					out.WriteRune(37);
				} else {
					throw go$panic(new Go$String("formatExpr: " + format.substring(i, (i + 3 >> 0))));
				} }
				n = n + 1 >> 0;
				i = i + 1 >> 0;
				continue;
			}
			out.WriteByte(b);
			i = i + 1 >> 0;
		}
		if (assignments.length === 0) {
			return new expression.Ptr(out.String(), parens);
		}
		return new expression.Ptr("(" + strings.Join(assignments, ", ") + ", " + out.String() + ")", false);
	};
	pkgContext.prototype.formatExprInternal = function(format, a, parens) { return this.go$val.formatExprInternal(format, a, parens); };
	ErrorList.prototype.Error = function() {
		var err, _slice, _index;
		err = this;
		return (_slice = err, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Error();
	};
	go$ptrType(ErrorList).prototype.Error = function() { return this.go$get().Error(); };
	pkgContext.Ptr.prototype.Write = function(b) {
		var c;
		c = this;
		c.output = go$appendSlice(c.output, b);
		return [b.length, null];
	};
	pkgContext.prototype.Write = function(b) { return this.go$val.Write(b); };
	pkgContext.Ptr.prototype.Printf = function(format, values) {
		var c;
		c = this;
		c.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes(strings.Repeat("\t", c.indentation))));
		fmt.Fprintf(c, format, values);
		c.Write(new (go$sliceType(Go$Uint8))([10]));
		c.Write(c.delayedOutput);
		c.delayedOutput = (go$sliceType(Go$Uint8)).nil;
	};
	pkgContext.prototype.Printf = function(format, values) { return this.go$val.Printf(format, values); };
	pkgContext.Ptr.prototype.PrintCond = function(cond, onTrue, onFalse) {
		var c;
		c = this;
		if (!cond) {
			c.Printf("/* %s */ %s", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Replace(onTrue, "*/", "<star>/", -1)), new Go$String(onFalse)]));
			return;
		}
		c.Printf("%s", new (go$sliceType(go$emptyInterface))([new Go$String(onTrue)]));
	};
	pkgContext.prototype.PrintCond = function(cond, onTrue, onFalse) { return this.go$val.PrintCond(cond, onTrue, onFalse); };
	pkgContext.Ptr.prototype.Indent = function(f) {
		var c;
		c = this;
		c.indentation = c.indentation + 1 >> 0;
		f();
		c.indentation = c.indentation - 1 >> 0;
	};
	pkgContext.prototype.Indent = function(f) { return this.go$val.Indent(f); };
	pkgContext.Ptr.prototype.CatchOutput = function(indent, f) {
		var c, origoutput, catched;
		c = this;
		origoutput = c.output;
		c.output = (go$sliceType(Go$Uint8)).nil;
		c.indentation = c.indentation + (indent) >> 0;
		f();
		catched = c.output;
		c.output = origoutput;
		c.indentation = c.indentation - (indent) >> 0;
		return catched;
	};
	pkgContext.prototype.CatchOutput = function(indent, f) { return this.go$val.CatchOutput(indent, f); };
	pkgContext.Ptr.prototype.Delayed = function(f) {
		var c;
		c = this;
		c.delayedOutput = c.CatchOutput(0, f);
	};
	pkgContext.prototype.Delayed = function(f) { return this.go$val.Delayed(f); };
	TranslatePackage = go$pkg.TranslatePackage = function(importPath, files, fileSet, importPkg) {
		var info, errList, previousErr, config, _tuple, typesPkg, err, _key, _map, _key$1, c, _ref, _i, _keys, _entry, name, _key$2, functions, initStmts, toplevelTypes, vars, _ref$1, _i$1, _slice, _index, file, _ref$2, _i$2, _slice$1, _index$1, decl, d, _ref$3, _type, x, x$1, _entry$1, sig, recvType, isPtr, _tuple$1, ptr, _entry$2, _ref$4, _ref$5, _i$3, _slice$2, _index$2, spec, x$2, _entry$3, o, _ref$6, _i$4, _slice$3, _index$3, spec$1, _ref$7, _i$5, _slice$4, _index$4, name$1, x$3, _entry$4, o$1, collectDependencies, gcData, archive, _ref$8, _i$6, _slice$5, _index$5, importedPkg, varName, _key$3, _ref$9, _i$7, d$1, _slice$6, _index$6, o$2, typeName, _struct, _entry$5, natives, _ref$10, _i$8, d$2, native$1, _slice$7, _index$7, fun, x$4, _entry$6, o$3, funName, x$5, recvType$1, _tuple$2, ptr$1, isPointer, _tuple$3, namedRecvType, x$6, _entry$7, _struct$1, initOrder, findInit, i, j, _slice$8, _index$8, _slice$9, _index$9, _tuple$4, _slice$10, _index$10, _slice$11, _index$11, varsWithInit, _ref$11, _i$9, _slice$12, _index$12, init, _ref$12, _i$10, _slice$13, _index$13, o$4, _key$4, _ref$13, _i$11, d$3, _slice$14, _index$14, o$5, ok, _tuple$5, _entry$8, _struct$2, _ref$14, _i$12, d$4, lhs, _slice$15, _index$15, init$1, _ref$15, _i$13, _slice$16, _index$16, o$6, i$1, ident, _key$5, _key$6, _slice$17, _index$17, _key$7, v, _slice$18, _index$18, _struct$3, toplevel, _entry$9, ok$1, _tuple$6, _entry$10, toplevelDependencies, _ref$16, _i$14, _slice$19, _index$19, dep, dot, _struct$4, init$2, _struct$5, importedPaths, _ref$17, _i$15, _slice$20, _index$20, imp, _ref$18, _i$16, _slice$21, _index$21, impPath, _tuple$7, impOutput, err$1;
		info = new types.Info.Ptr(new Go$Map(), new Go$Map(), new Go$Map(), new Go$Map(), new Go$Map(), false, (go$sliceType((go$ptrType(types.Initializer)))).nil);
		errList = ErrorList.nil;
		previousErr = null;
		config = new types.Config.Ptr(false, false, typesPackages, (function(err) {
			if (!(go$interfaceIsEqual(previousErr, null)) && previousErr.Error() === err.Error()) {
				return;
			}
			errList = go$append(errList, err);
			previousErr = err;
		}), (function(param, path) {
			var err, _tuple, _entry;
			if (_tuple = importPkg(path), err = _tuple[1], !(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(types.Package)).nil, err];
			}
			return [(_entry = typesPackages[path], _entry !== undefined ? _entry.v : (go$ptrType(types.Package)).nil), null];
		}), sizes32);
		_tuple = config.Check(importPath, fileSet, files, info), typesPkg = _tuple[0], err = _tuple[1];
		if (!(errList === ErrorList.nil)) {
			return [(go$ptrType(Archive)).nil, errList];
		}
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Archive)).nil, err];
		}
		_key = importPath, (typesPackages || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: typesPkg };
		c = new pkgContext.Ptr(typesPkg, info, new Go$Map(), new Go$Map(), (go$sliceType(Go$Uint8)).nil, (go$sliceType(Go$Uint8)).nil, 1, new Go$Map(), new funcContext.Ptr((go$ptrType(types.Signature)).nil, new Go$Map(), (go$sliceType(Go$String)).nil, (go$sliceType(ast.Expr)).nil, (_map = new Go$Map(), _key$1 = "", _map[_key$1] = { k: _key$1, v: new flowData.Ptr("", 0, 0) }, _map), (go$sliceType(Go$String)).nil, false, 1, new Go$Map(), new Go$Map()));
		_ref = reservedKeywords;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			name = _entry.k;
			_key$2 = name, (c.f.allVars || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: 1 };
			_i++;
		}
		functions = (go$sliceType((go$ptrType(ast.FuncDecl)))).nil;
		initStmts = (go$sliceType(ast.Stmt)).nil;
		toplevelTypes = (go$sliceType((go$ptrType(types.TypeName)))).nil;
		vars = (go$sliceType((go$ptrType(types.Var)))).nil;
		_ref$1 = files;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			file = (_slice = _ref$1, _index = _i$1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_ref$2 = file.Decls;
			_i$2 = 0;
			while (_i$2 < _ref$2.length) {
				decl = (_slice$1 = _ref$2, _index$1 = _i$2, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				_ref$3 = decl;
				_type = _ref$3 !== null ? _ref$3.constructor : null;
				if (_type === (go$ptrType(ast.FuncDecl))) {
					d = _ref$3.go$val;
					sig = (x = (x$1 = (_entry$1 = c.info.Defs[d.Name.go$key()], _entry$1 !== undefined ? _entry$1.v : null), (x$1 !== null && x$1.constructor === (go$ptrType(types.Func)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(types.Func))))).object.Type(), (x !== null && x.constructor === (go$ptrType(types.Signature)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Signature)))));
					recvType = null;
					if (!(sig.Recv() === (go$ptrType(types.Var)).nil)) {
						recvType = sig.Recv().object.Type();
						if (_tuple$1 = (recvType !== null && recvType.constructor === (go$ptrType(types.Pointer)) ? [recvType.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), ptr = _tuple$1[0], isPtr = _tuple$1[1], isPtr) {
							recvType = ptr.Elem();
						}
					}
					if (isBlank(d.Name)) {
						_i$2++;
						continue;
					}
					if (sig.Recv() === (go$ptrType(types.Var)).nil && d.Name.Name === "init") {
						initStmts = go$appendSlice(initStmts, d.Body.List);
						_i$2++;
						continue;
					}
					functions = go$append(functions, d);
					if (sig.Recv() === (go$ptrType(types.Var)).nil) {
						c.objectName((_entry$2 = c.info.Defs[d.Name.go$key()], _entry$2 !== undefined ? _entry$2.v : null));
					}
				} else if (_type === (go$ptrType(ast.GenDecl))) {
					d = _ref$3.go$val;
					_ref$4 = d.Tok;
					if (_ref$4 === 84) {
						_ref$5 = d.Specs;
						_i$3 = 0;
						while (_i$3 < _ref$5.length) {
							spec = (_slice$2 = _ref$5, _index$2 = _i$3, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
							o = (x$2 = (_entry$3 = c.info.Defs[(spec !== null && spec.constructor === (go$ptrType(ast.TypeSpec)) ? spec.go$val : go$typeAssertionFailed(spec, (go$ptrType(ast.TypeSpec)))).Name.go$key()], _entry$3 !== undefined ? _entry$3.v : null), (x$2 !== null && x$2.constructor === (go$ptrType(types.TypeName)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(types.TypeName)))));
							toplevelTypes = go$append(toplevelTypes, o);
							c.objectName(o);
							_i$3++;
						}
					} else if (_ref$4 === 85) {
						_ref$6 = d.Specs;
						_i$4 = 0;
						while (_i$4 < _ref$6.length) {
							spec$1 = (_slice$3 = _ref$6, _index$3 = _i$4, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
							_ref$7 = (spec$1 !== null && spec$1.constructor === (go$ptrType(ast.ValueSpec)) ? spec$1.go$val : go$typeAssertionFailed(spec$1, (go$ptrType(ast.ValueSpec)))).Names;
							_i$5 = 0;
							while (_i$5 < _ref$7.length) {
								name$1 = (_slice$4 = _ref$7, _index$4 = _i$5, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
								if (!isBlank(name$1)) {
									o$1 = (x$3 = (_entry$4 = c.info.Defs[name$1.go$key()], _entry$4 !== undefined ? _entry$4.v : null), (x$3 !== null && x$3.constructor === (go$ptrType(types.Var)) ? x$3.go$val : go$typeAssertionFailed(x$3, (go$ptrType(types.Var)))));
									vars = go$append(vars, o$1);
									c.objectName(o$1);
								}
								_i$5++;
							}
							_i$4++;
						}
					}
				}
				_i$2++;
			}
			_i$1++;
		}
		collectDependencies = (function(self, f) {
			var deps, _ref$8, _i$6, _keys$1, _entry$5, dep;
			c.dependencies = new Go$Map();
			f();
			deps = (go$sliceType(Object)).nil;
			_ref$8 = c.dependencies;
			_i$6 = 0;
			_keys$1 = go$keys(_ref$8);
			while (_i$6 < _keys$1.length) {
				_entry$5 = _ref$8[_keys$1[_i$6]];
				dep = _entry$5.k;
				if (!(go$interfaceIsEqual(dep, self))) {
					deps = go$append(deps, new Object.Ptr(dep.Pkg().Path(), strings.Replace(dep.Name(), "_", "-", -1)));
				}
				_i$6++;
			}
			return deps;
		});
		gcData = bytes.NewBuffer((go$sliceType(Go$Uint8)).nil);
		gcexporter.Write(typesPkg, gcData, sizes32);
		archive = new Archive.Ptr(importPath, gcData.Bytes(), new (go$sliceType(Go$String))(["runtime"]), (go$sliceType(Import)).nil, (go$sliceType(Decl)).nil, (go$sliceType(Go$String)).nil);
		_ref$8 = typesPkg.Imports();
		_i$6 = 0;
		while (_i$6 < _ref$8.length) {
			importedPkg = (_slice$5 = _ref$8, _index$5 = _i$6, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
			varName = c.newVariable(importedPkg.Name());
			_key$3 = importedPkg.Path(), (c.pkgVars || go$throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: varName };
			archive.Imports = go$append(archive.Imports, new Import.Ptr(importedPkg.Path(), varName));
			_i$6++;
		}
		_ref$9 = toplevelTypes;
		_i$7 = 0;
		while (_i$7 < _ref$9.length) {
			d$1 = [undefined];
			o$2 = (_slice$6 = _ref$9, _index$6 = _i$7, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
			typeName = c.objectName(o$2);
			d$1[0] = new Decl.Ptr();
			d$1[0].Var = typeName;
			d$1[0].DceFilters = new (go$sliceType(Go$String))([strings.Replace(o$2.object.Name(), "_", "-", -1)]);
			d$1[0].DceDeps = collectDependencies(o$2, (function(d$1) { return function() {
				d$1[0].BodyCode = c.CatchOutput(0, (function() {
					c.translateType(o$2, true);
				}));
				d$1[0].InitCode = c.CatchOutput(1, (function() {
					c.initType(o$2);
				}));
			}; })(d$1));
			archive.Declarations = go$append(archive.Declarations, (_struct = d$1[0], new Decl.Ptr(_struct.Var, _struct.BodyCode, _struct.InitCode, _struct.DceFilters, _struct.DceDeps)));
			_i$7++;
		}
		natives = (_entry$5 = pkgNatives[importPath], _entry$5 !== undefined ? _entry$5.v : false);
		_ref$10 = functions;
		_i$8 = 0;
		while (_i$8 < _ref$10.length) {
			d$2 = [undefined];
			native$1 = [undefined];
			fun = (_slice$7 = _ref$10, _index$7 = _i$8, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"));
			d$2[0] = new Decl.Ptr();
			o$3 = (x$4 = (_entry$6 = c.info.Defs[fun.Name.go$key()], _entry$6 !== undefined ? _entry$6.v : null), (x$4 !== null && x$4.constructor === (go$ptrType(types.Func)) ? x$4.go$val : go$typeAssertionFailed(x$4, (go$ptrType(types.Func)))));
			funName = fun.Name.Name;
			if (fun.Recv === (go$ptrType(ast.FieldList)).nil) {
				d$2[0].Var = c.objectName(o$3);
				if (!(o$3.object.Name() === "main")) {
					d$2[0].DceFilters = new (go$sliceType(Go$String))([strings.Replace(o$3.object.Name(), "_", "-", -1)]);
				}
			}
			if (!(fun.Recv === (go$ptrType(ast.FieldList)).nil)) {
				recvType$1 = (x$5 = o$3.object.Type(), (x$5 !== null && x$5.constructor === (go$ptrType(types.Signature)) ? x$5.go$val : go$typeAssertionFailed(x$5, (go$ptrType(types.Signature))))).Recv().object.Type();
				_tuple$2 = (recvType$1 !== null && recvType$1.constructor === (go$ptrType(types.Pointer)) ? [recvType$1.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), ptr$1 = _tuple$2[0], isPointer = _tuple$2[1];
				_tuple$3 = (recvType$1 !== null && recvType$1.constructor === (go$ptrType(types.Named)) ? [recvType$1.go$val, true] : [(go$ptrType(types.Named)).nil, false]), namedRecvType = _tuple$3[0];
				if (isPointer) {
					namedRecvType = (x$6 = ptr$1.Elem(), (x$6 !== null && x$6.constructor === (go$ptrType(types.Named)) ? x$6.go$val : go$typeAssertionFailed(x$6, (go$ptrType(types.Named)))));
				}
				funName = namedRecvType.Obj().object.Name() + "." + funName;
				d$2[0].DceFilters = new (go$sliceType(Go$String))([strings.Replace(namedRecvType.Obj().object.Name(), "_", "-", -1)]);
				if (!fun.Name.IsExported()) {
					d$2[0].DceFilters = go$append(d$2[0].DceFilters, strings.Replace(fun.Name.Name, "_", "-", -1));
				}
			}
			native$1[0] = (_entry$7 = natives[funName], _entry$7 !== undefined ? _entry$7.v : "");
			delete natives[funName];
			d$2[0].DceDeps = collectDependencies(o$3, (function(d$2, native$1) { return function() {
				d$2[0].BodyCode = c.translateToplevelFunction(fun, native$1[0]);
			}; })(d$2, native$1));
			archive.Declarations = go$append(archive.Declarations, (_struct$1 = d$2[0], new Decl.Ptr(_struct$1.Var, _struct$1.BodyCode, _struct$1.InitCode, _struct$1.DceFilters, _struct$1.DceDeps)));
			if (strings.HasPrefix(fun.Name.String(), "Test")) {
				archive.Tests = go$append(archive.Tests, fun.Name.String());
			}
			_i$8++;
		}
		initOrder = c.info.InitOrder;
		if (importPath === "math/rand") {
			findInit = (function(name$2) {
				var _ref$11, _i$9, _slice$8, _index$8, init, i, _slice$9, _index$9;
				_ref$11 = initOrder;
				_i$9 = 0;
				while (_i$9 < _ref$11.length) {
					init = (_slice$8 = _ref$11, _index$8 = _i$9, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
					i = _i$9;
					if ((_slice$9 = init.Lhs, _index$9 = 0, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")).object.Name() === name$2) {
						return i;
					}
					_i$9++;
				}
				throw go$panic(new Go$String("init not found"));
			});
			i = findInit("rng_cooked");
			j = findInit("globalRand");
			if (i > j) {
				_tuple$4 = [(_slice$8 = initOrder, _index$8 = j, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")), (_slice$9 = initOrder, _index$9 = i, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"))], _slice$10 = initOrder, _index$10 = i, (_index$10 >= 0 && _index$10 < _slice$10.length) ? (_slice$10.array[_slice$10.offset + _index$10] = _tuple$4[0]) : go$throwRuntimeError("index out of range"), _slice$11 = initOrder, _index$11 = j, (_index$11 >= 0 && _index$11 < _slice$11.length) ? (_slice$11.array[_slice$11.offset + _index$11] = _tuple$4[1]) : go$throwRuntimeError("index out of range");
			}
		}
		varsWithInit = new Go$Map();
		_ref$11 = initOrder;
		_i$9 = 0;
		while (_i$9 < _ref$11.length) {
			init = (_slice$12 = _ref$11, _index$12 = _i$9, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range"));
			_ref$12 = init.Lhs;
			_i$10 = 0;
			while (_i$10 < _ref$12.length) {
				o$4 = (_slice$13 = _ref$12, _index$13 = _i$10, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range"));
				_key$4 = o$4, (varsWithInit || go$throwRuntimeError("assignment to entry in nil map"))[_key$4.go$key()] = { k: _key$4, v: true };
				_i$10++;
			}
			_i$9++;
		}
		_ref$13 = vars;
		_i$11 = 0;
		while (_i$11 < _ref$13.length) {
			d$3 = [undefined];
			o$5 = (_slice$14 = _ref$13, _index$14 = _i$11, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range"));
			d$3[0] = new Decl.Ptr();
			if (!o$5.object.Exported()) {
				d$3[0].Var = c.objectName(o$5);
			}
			if (_tuple$5 = (_entry$8 = varsWithInit[o$5.go$key()], _entry$8 !== undefined ? [_entry$8.v, true] : [false, false]), ok = _tuple$5[1], !ok) {
				d$3[0].DceDeps = collectDependencies(null, (function(d$3) { return function() {
					var value, ok$1, _tuple$6, _entry$9, native$2;
					value = c.zeroValue(o$5.object.Type());
					if (_tuple$6 = (_entry$9 = natives[o$5.object.Name()], _entry$9 !== undefined ? [_entry$9.v, true] : ["", false]), native$2 = _tuple$6[0], ok$1 = _tuple$6[1], ok$1) {
						value = native$2;
						delete natives[o$5.object.Name()];
					}
					d$3[0].InitCode = new (go$sliceType(Go$Uint8))(go$stringToBytes(fmt.Sprintf("\t\t%s = %s;\n", new (go$sliceType(go$emptyInterface))([new Go$String(c.objectName(o$5)), new Go$String(value)]))));
				}; })(d$3));
			}
			d$3[0].DceFilters = new (go$sliceType(Go$String))([strings.Replace(o$5.object.Name(), "_", "-", -1)]);
			archive.Declarations = go$append(archive.Declarations, (_struct$2 = d$3[0], new Decl.Ptr(_struct$2.Var, _struct$2.BodyCode, _struct$2.InitCode, _struct$2.DceFilters, _struct$2.DceDeps)));
			_i$11++;
		}
		_ref$14 = initOrder;
		_i$12 = 0;
		while (_i$12 < _ref$14.length) {
			d$4 = [undefined];
			lhs = [undefined];
			init$1 = (_slice$15 = _ref$14, _index$15 = _i$12, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range"));
			lhs[0] = (go$sliceType(ast.Expr)).make(init$1.Lhs.length, 0, function() { return null; });
			_ref$15 = init$1.Lhs;
			_i$13 = 0;
			while (_i$13 < _ref$15.length) {
				o$6 = (_slice$16 = _ref$15, _index$16 = _i$13, (_index$16 >= 0 && _index$16 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$16] : go$throwRuntimeError("index out of range"));
				i$1 = _i$13;
				ident = ast.NewIdent(o$6.object.Name());
				_key$5 = ident, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key$5 || go$interfaceNil).go$key()] = { k: _key$5, v: new types.TypeAndValue.Ptr(o$6.object.Type(), null) };
				_key$6 = ident, (c.info.Defs || go$throwRuntimeError("assignment to entry in nil map"))[_key$6.go$key()] = { k: _key$6, v: o$6 };
				_slice$17 = lhs[0], _index$17 = i$1, (_index$17 >= 0 && _index$17 < _slice$17.length) ? (_slice$17.array[_slice$17.offset + _index$17] = ident) : go$throwRuntimeError("index out of range");
				_key$7 = o$6, (varsWithInit || go$throwRuntimeError("assignment to entry in nil map"))[_key$7.go$key()] = { k: _key$7, v: true };
				_i$13++;
			}
			d$4[0] = new Decl.Ptr();
			d$4[0].DceDeps = collectDependencies(null, (function(d$4, lhs) { return function() {
				d$4[0].InitCode = c.translateFunctionBody(1, new (go$sliceType(ast.Stmt))([new ast.AssignStmt.Ptr(lhs[0], 0, 47, new (go$sliceType(ast.Expr))([init$1.Rhs]))]));
			}; })(d$4, lhs));
			if (init$1.Lhs.length === 1) {
				v = new hasCallVisitor.Ptr(c.info, false);
				ast.Walk(v, init$1.Rhs);
				if (!v.hasCall) {
					d$4[0].DceFilters = new (go$sliceType(Go$String))([strings.Replace((_slice$18 = init$1.Lhs, _index$18 = 0, (_index$18 >= 0 && _index$18 < _slice$18.length) ? _slice$18.array[_slice$18.offset + _index$18] : go$throwRuntimeError("index out of range")).object.Name(), "_", "-", -1)]);
				}
			}
			archive.Declarations = go$append(archive.Declarations, (_struct$3 = d$4[0], new Decl.Ptr(_struct$3.Var, _struct$3.BodyCode, _struct$3.InitCode, _struct$3.DceFilters, _struct$3.DceDeps)));
			_i$12++;
		}
		toplevel = new Decl.Ptr();
		toplevel.BodyCode = new (go$sliceType(Go$Uint8))(go$stringToBytes((_entry$9 = natives["toplevel"], _entry$9 !== undefined ? _entry$9.v : "")));
		delete natives["toplevel"];
		if (_tuple$6 = (_entry$10 = natives["toplevelDependencies"], _entry$10 !== undefined ? [_entry$10.v, true] : ["", false]), toplevelDependencies = _tuple$6[0], ok$1 = _tuple$6[1], ok$1) {
			_ref$16 = strings.Split(toplevelDependencies, " ");
			_i$14 = 0;
			while (_i$14 < _ref$16.length) {
				dep = (_slice$19 = _ref$16, _index$19 = _i$14, (_index$19 >= 0 && _index$19 < _slice$19.length) ? _slice$19.array[_slice$19.offset + _index$19] : go$throwRuntimeError("index out of range"));
				dot = strings.LastIndex(dep, ".");
				toplevel.DceDeps = go$append(toplevel.DceDeps, new Object.Ptr(dep.substring(0, dot), strings.Replace(dep.substring((dot + 1 >> 0)), "_", "-", -1)));
				_i$14++;
			}
			delete natives["toplevelDependencies"];
		}
		archive.Declarations = go$append(archive.Declarations, (_struct$4 = toplevel, new Decl.Ptr(_struct$4.Var, _struct$4.BodyCode, _struct$4.InitCode, _struct$4.DceFilters, _struct$4.DceDeps)));
		init$2 = new Decl.Ptr();
		init$2.DceDeps = collectDependencies(null, (function() {
			init$2.InitCode = c.translateFunctionBody(1, initStmts);
		}));
		archive.Declarations = go$append(archive.Declarations, (_struct$5 = init$2, new Decl.Ptr(_struct$5.Var, _struct$5.BodyCode, _struct$5.InitCode, _struct$5.DceFilters, _struct$5.DceDeps)));
		if (!((go$keys(natives).length === 0))) {
			throw go$panic(new Go$String("not all natives used: " + importPath));
		}
		importedPaths = (go$sliceType(Go$String)).nil;
		_ref$17 = typesPkg.Imports();
		_i$15 = 0;
		while (_i$15 < _ref$17.length) {
			imp = (_slice$20 = _ref$17, _index$20 = _i$15, (_index$20 >= 0 && _index$20 < _slice$20.length) ? _slice$20.array[_slice$20.offset + _index$20] : go$throwRuntimeError("index out of range"));
			importedPaths = go$append(importedPaths, imp.Path());
			_i$15++;
		}
		sort.Strings(importedPaths);
		_ref$18 = importedPaths;
		_i$16 = 0;
		while (_i$16 < _ref$18.length) {
			impPath = (_slice$21 = _ref$18, _index$21 = _i$16, (_index$21 >= 0 && _index$21 < _slice$21.length) ? _slice$21.array[_slice$21.offset + _index$21] : go$throwRuntimeError("index out of range"));
			_tuple$7 = importPkg(impPath), impOutput = _tuple$7[0], err$1 = _tuple$7[1];
			if (!(go$interfaceIsEqual(err$1, null))) {
				return [(go$ptrType(Archive)).nil, err$1];
			}
			archive.AddDependenciesOf(impOutput);
			_i$16++;
		}
		archive.AddDependency(importPath);
		return [archive, null];
	};
	pkgContext.Ptr.prototype.translateType = function(o, toplevel) {
		var c, typeName, lhs, size, t, _ref, _type, params, i, _slice, _index, i$1, field, fieldType, _tuple, isPointer, _tuple$1, x, isUnderlyingInterface, methods, j, name, x$1, sig, params$1, _ref$1, _i, k, _slice$1, _index$1, value, paramList;
		c = this;
		typeName = c.objectName(o);
		lhs = typeName;
		if (toplevel) {
			lhs = lhs + (" = go$pkg." + typeName);
		}
		size = new Go$Int64(0, 0);
		_ref = o.object.Type().Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Struct))) {
			t = _ref.go$val;
			params = (go$sliceType(Go$String)).make(t.NumFields(), 0, function() { return ""; });
			i = 0;
			while (i < t.NumFields()) {
				_slice = params, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = fieldName(t, i) + "_") : go$throwRuntimeError("index out of range");
				i = i + 1 >> 0;
			}
			c.Printf("%s = go$newType(0, \"Struct\", \"%s.%s\", \"%s\", \"%s\", function(%s) {", new (go$sliceType(go$emptyInterface))([new Go$String(lhs), new Go$String(o.object.Pkg().Name()), new Go$String(o.object.Name()), new Go$String(o.object.Name()), new Go$String(o.object.Pkg().Path()), new Go$String(strings.Join(params, ", "))]));
			c.Indent((function() {
				var i$1, name;
				c.Printf("this.go$val = this;", new (go$sliceType(go$emptyInterface))([]));
				i$1 = 0;
				while (i$1 < t.NumFields()) {
					name = fieldName(t, i$1);
					c.Printf("this.%s = %s_ !== undefined ? %s_ : %s;", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$String(name), new Go$String(name), new Go$String(c.zeroValue(t.Field(i$1).object.Type()))]));
					i$1 = i$1 + 1 >> 0;
				}
			}));
			c.Printf("});", new (go$sliceType(go$emptyInterface))([]));
			i$1 = 0;
			while (i$1 < t.NumFields()) {
				field = t.Field(i$1);
				if (field.Anonymous()) {
					fieldType = field.object.Type();
					_tuple = (fieldType !== null && fieldType.constructor === (go$ptrType(types.Pointer)) ? [fieldType.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), isPointer = _tuple[1];
					_tuple$1 = (x = fieldType.Underlying(), (x !== null && x.constructor === (go$ptrType(types.Interface)) ? [x.go$val, true] : [(go$ptrType(types.Interface)).nil, false])), isUnderlyingInterface = _tuple$1[1];
					if (!isPointer && !isUnderlyingInterface) {
						fieldType = types.NewPointer(fieldType);
					}
					methods = types.NewMethodSet(fieldType);
					j = 0;
					while (j < methods.Len()) {
						name = methods.At(j).Obj().Name();
						sig = (x$1 = methods.At(j).Type(), (x$1 !== null && x$1.constructor === (go$ptrType(types.Signature)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(types.Signature)))));
						params$1 = (go$sliceType(Go$String)).make(sig.Params().Len(), 0, function() { return ""; });
						_ref$1 = params$1;
						_i = 0;
						while (_i < _ref$1.length) {
							k = _i;
							_slice$1 = params$1, _index$1 = k, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = sig.Params().At(k).object.Name()) : go$throwRuntimeError("index out of range");
							_i++;
						}
						value = "this." + fieldName(t, i$1);
						if (isWrapped(field.object.Type())) {
							value = fmt.Sprintf("new %s(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(field.object.Type())), new Go$String(value)]));
						}
						paramList = strings.Join(params$1, ", ");
						c.Printf("%s.prototype.%s = function(%s) { return this.go$val.%s(%s); };", new (go$sliceType(go$emptyInterface))([new Go$String(typeName), new Go$String(name), new Go$String(paramList), new Go$String(name), new Go$String(paramList)]));
						c.Printf("%s.Ptr.prototype.%s = function(%s) { return %s.%s(%s); };", new (go$sliceType(go$emptyInterface))([new Go$String(typeName), new Go$String(name), new Go$String(paramList), new Go$String(value), new Go$String(name), new Go$String(paramList)]));
						j = j + 1 >> 0;
					}
				}
				i$1 = i$1 + 1 >> 0;
			}
			return;
		} else if (_type === (go$ptrType(types.Basic))) {
			t = _ref.go$val;
			if (!(((t.Info() & 2) === 0))) {
				size = sizes32.Sizeof(t);
			}
		}
		c.Printf("%s = go$newType(%d, \"%s\", \"%s.%s\", \"%s\", \"%s\", null);", new (go$sliceType(go$emptyInterface))([new Go$String(lhs), size, new Go$String(typeKind(o.object.Type())), new Go$String(o.object.Pkg().Name()), new Go$String(o.object.Name()), new Go$String(o.object.Name()), new Go$String(o.object.Pkg().Path())]));
	};
	pkgContext.prototype.translateType = function(o, toplevel) { return this.go$val.translateType(o, toplevel); };
	pkgContext.Ptr.prototype.initType = function(o) {
		var c, t, _ref, _type, isInterface, _tuple, x, writeMethodSet;
		c = this;
		_ref = o.Type().Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Array)) || _type === (go$ptrType(types.Chan)) || _type === (go$ptrType(types.Interface)) || _type === (go$ptrType(types.Map)) || _type === (go$ptrType(types.Pointer)) || _type === (go$ptrType(types.Slice)) || _type === (go$ptrType(types.Signature)) || _type === (go$ptrType(types.Struct))) {
			t = _ref;
			c.Printf("%s.init(%s);", new (go$sliceType(go$emptyInterface))([new Go$String(c.objectName(o)), new Go$String(c.initArgs(t))]));
		}
		if (_tuple = (x = o.Type().Underlying(), (x !== null && x.constructor === (go$ptrType(types.Interface)) ? [x.go$val, true] : [(go$ptrType(types.Interface)).nil, false])), isInterface = _tuple[1], !isInterface) {
			writeMethodSet = (function(t$1) {
				var methodSet, methods, _ref$1, _i, i, method, pkgPath, x$1, t$2, _slice, _index;
				methodSet = types.NewMethodSet(t$1);
				if (methodSet.Len() === 0) {
					return;
				}
				methods = (go$sliceType(Go$String)).make(methodSet.Len(), 0, function() { return ""; });
				_ref$1 = methods;
				_i = 0;
				while (_i < _ref$1.length) {
					i = _i;
					method = methodSet.At(i).Obj();
					pkgPath = "";
					if (!method.Exported()) {
						pkgPath = method.Pkg().Path();
					}
					t$2 = (x$1 = method.Type(), (x$1 !== null && x$1.constructor === (go$ptrType(types.Signature)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(types.Signature)))));
					_slice = methods, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = fmt.Sprintf("[\"%s\", \"%s\", %s, %s, %t]", new (go$sliceType(go$emptyInterface))([new Go$String(method.Name()), new Go$String(pkgPath), new Go$String(c.typeArray(t$2.Params())), new Go$String(c.typeArray(t$2.Results())), new Go$Bool(t$2.Variadic())]))) : go$throwRuntimeError("index out of range");
					_i++;
				}
				c.Printf("%s.methods = [%s];", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t$1)), new Go$String(strings.Join(methods, ", "))]));
			});
			writeMethodSet(o.Type());
			writeMethodSet(types.NewPointer(o.Type()));
		}
	};
	pkgContext.prototype.initType = function(o) { return this.go$val.initType(o); };
	pkgContext.Ptr.prototype.initArgs = function(ty) {
		var c, t, _ref, _type, methods, _ref$1, _i, i, method, pkgPath, _slice, _index, fields, _ref$2, _i$1, i$1, field, name, pkgPath$1, _slice$1, _index$1;
		c = this;
		_ref = ty;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Array))) {
			t = _ref.go$val;
			return fmt.Sprintf("%s, %d", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t.Elem())), t.Len()]));
		} else if (_type === (go$ptrType(types.Chan))) {
			t = _ref.go$val;
			return fmt.Sprintf("%s, %t, %t", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t.Elem())), new Go$Bool(!(((t.Dir() & 1) === 0))), new Go$Bool(!(((t.Dir() & 2) === 0)))]));
		} else if (_type === (go$ptrType(types.Interface))) {
			t = _ref.go$val;
			methods = (go$sliceType(Go$String)).make(t.NumMethods(), 0, function() { return ""; });
			_ref$1 = methods;
			_i = 0;
			while (_i < _ref$1.length) {
				i = _i;
				method = t.Method(i);
				pkgPath = "";
				if (!method.object.Exported()) {
					pkgPath = method.object.Pkg().Path();
				}
				_slice = methods, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = fmt.Sprintf("[\"%s\", \"%s\", %s]", new (go$sliceType(go$emptyInterface))([new Go$String(method.object.Name()), new Go$String(pkgPath), new Go$String(c.typeName(method.object.Type()))]))) : go$throwRuntimeError("index out of range");
				_i++;
			}
			return fmt.Sprintf("[%s]", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Join(methods, ", "))]));
		} else if (_type === (go$ptrType(types.Map))) {
			t = _ref.go$val;
			return fmt.Sprintf("%s, %s", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t.Key())), new Go$String(c.typeName(t.Elem()))]));
		} else if (_type === (go$ptrType(types.Pointer))) {
			t = _ref.go$val;
			return fmt.Sprintf("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t.Elem()))]));
		} else if (_type === (go$ptrType(types.Slice))) {
			t = _ref.go$val;
			return fmt.Sprintf("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(t.Elem()))]));
		} else if (_type === (go$ptrType(types.Signature))) {
			t = _ref.go$val;
			return fmt.Sprintf("%s, %s, %t", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeArray(t.Params())), new Go$String(c.typeArray(t.Results())), new Go$Bool(t.Variadic())]));
		} else if (_type === (go$ptrType(types.Struct))) {
			t = _ref.go$val;
			fields = (go$sliceType(Go$String)).make(t.NumFields(), 0, function() { return ""; });
			_ref$2 = fields;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				i$1 = _i$1;
				field = t.Field(i$1);
				name = "";
				if (!field.Anonymous()) {
					name = field.object.Name();
				}
				pkgPath$1 = "";
				if (!field.object.Exported()) {
					pkgPath$1 = field.object.Pkg().Path();
				}
				_slice$1 = fields, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = fmt.Sprintf("[\"%s\", \"%s\", %s, %s]", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$String(pkgPath$1), new Go$String(c.typeName(field.object.Type())), new Go$String(encodeString(t.Tag(i$1)))]))) : go$throwRuntimeError("index out of range");
				_i$1++;
			}
			return fmt.Sprintf("[%s]", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Join(fields, ", "))]));
		} else {
			t = _ref;
			throw go$panic(new Go$String("invalid type"));
		}
	};
	pkgContext.prototype.initArgs = function(ty) { return this.go$val.initArgs(ty); };
	pkgContext.Ptr.prototype.translateToplevelFunction = function(fun, native$1) {
		var c, x, _entry, o, x$1, sig, recv, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, joinedParams, primaryFunction, funName, lhs, recvType, _tuple, ptr, isPointer, _tuple$1, namedRecvType, x$2, typeName, funName$1, _entry$1, code, isStruct, _tuple$2, x$3, isArray, _tuple$3, x$4, value, value$1;
		c = this;
		o = (x = (_entry = c.info.Defs[fun.Name.go$key()], _entry !== undefined ? _entry.v : null), (x !== null && x.constructor === (go$ptrType(types.Func)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Func)))));
		sig = (x$1 = o.object.Type(), (x$1 !== null && x$1.constructor === (go$ptrType(types.Signature)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(types.Signature)))));
		recv = (go$ptrType(ast.Ident)).nil;
		if (!(fun.Recv === (go$ptrType(ast.FieldList)).nil) && !((_slice = fun.Recv.List, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Names === (go$sliceType((go$ptrType(ast.Ident)))).nil)) {
			recv = (_slice$1 = (_slice$2 = fun.Recv.List, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).Names, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		}
		joinedParams = "";
		primaryFunction = (function(lhs, fullName) {
			var stmts, this$1, _key, _tuple, params, body;
			if (!(native$1 === "")) {
				return new (go$sliceType(Go$Uint8))(go$stringToBytes(fmt.Sprintf("\t%s = %s;\n", new (go$sliceType(go$emptyInterface))([new Go$String(lhs), new Go$String(native$1)]))));
			}
			if (fun.Body === (go$ptrType(ast.BlockStmt)).nil) {
				return new (go$sliceType(Go$Uint8))(go$stringToBytes(fmt.Sprintf("\t%s = function() {\n\t\tthrow go$panic(\"Native function not implemented: %s\");\n\t};\n", new (go$sliceType(go$emptyInterface))([new Go$String(lhs), new Go$String(fullName)]))));
			}
			stmts = fun.Body.List;
			if (!(recv === (go$ptrType(ast.Ident)).nil)) {
				this$1 = new This.Ptr(new ast.Ident.Ptr());
				_key = this$1, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: new types.TypeAndValue.Ptr(sig.Recv().object.Type(), null) };
				stmts = go$appendSlice(new (go$sliceType(ast.Stmt))([new ast.AssignStmt.Ptr(new (go$sliceType(ast.Expr))([recv]), 0, 47, new (go$sliceType(ast.Expr))([this$1]))]), stmts);
			}
			_tuple = c.translateFunction(fun.Type, sig, stmts), params = _tuple[0], body = _tuple[1];
			joinedParams = strings.Join(params, ", ");
			return new (go$sliceType(Go$Uint8))(go$stringToBytes(fmt.Sprintf("\t%s = function(%s) {\n%s\t};\n", new (go$sliceType(go$emptyInterface))([new Go$String(lhs), new Go$String(joinedParams), new Go$String(go$bytesToString(body))]))));
		});
		if (fun.Recv === (go$ptrType(ast.FieldList)).nil) {
			funName = c.objectName(o);
			lhs = funName;
			if (fun.Name.IsExported() || fun.Name.Name === "main") {
				lhs = lhs + (" = go$pkg." + funName);
			}
			return primaryFunction(lhs, funName);
		}
		recvType = sig.Recv().object.Type();
		_tuple = (recvType !== null && recvType.constructor === (go$ptrType(types.Pointer)) ? [recvType.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), ptr = _tuple[0], isPointer = _tuple[1];
		_tuple$1 = (recvType !== null && recvType.constructor === (go$ptrType(types.Named)) ? [recvType.go$val, true] : [(go$ptrType(types.Named)).nil, false]), namedRecvType = _tuple$1[0];
		if (isPointer) {
			namedRecvType = (x$2 = ptr.Elem(), (x$2 !== null && x$2.constructor === (go$ptrType(types.Named)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(types.Named)))));
		}
		typeName = c.objectName(namedRecvType.Obj());
		funName$1 = fun.Name.Name;
		if ((_entry$1 = reservedKeywords[funName$1], _entry$1 !== undefined ? _entry$1.v : false)) {
			funName$1 = funName$1 + "$";
		}
		code = bytes.NewBuffer((go$sliceType(Go$Uint8)).nil);
		if (_tuple$2 = (x$3 = namedRecvType.Underlying(), (x$3 !== null && x$3.constructor === (go$ptrType(types.Struct)) ? [x$3.go$val, true] : [(go$ptrType(types.Struct)).nil, false])), isStruct = _tuple$2[1], isStruct) {
			code.Write(primaryFunction(typeName + ".Ptr.prototype." + funName$1, typeName + "." + funName$1));
			fmt.Fprintf(code, "\t%s.prototype.%s = function(%s) { return this.go$val.%s(%s); };\n", new (go$sliceType(go$emptyInterface))([new Go$String(typeName), new Go$String(funName$1), new Go$String(joinedParams), new Go$String(funName$1), new Go$String(joinedParams)]));
			return code.Bytes();
		}
		if (isPointer) {
			if (_tuple$3 = (x$4 = ptr.Elem().Underlying(), (x$4 !== null && x$4.constructor === (go$ptrType(types.Array)) ? [x$4.go$val, true] : [(go$ptrType(types.Array)).nil, false])), isArray = _tuple$3[1], isArray) {
				code.Write(primaryFunction(typeName + ".prototype." + funName$1, typeName + "." + funName$1));
				fmt.Fprintf(code, "\tgo$ptrType(%s).prototype.%s = function(%s) { return (new %s(this.go$get())).%s(%s); };\n", new (go$sliceType(go$emptyInterface))([new Go$String(typeName), new Go$String(funName$1), new Go$String(joinedParams), new Go$String(typeName), new Go$String(funName$1), new Go$String(joinedParams)]));
				return code.Bytes();
			}
			value = "this";
			if (isWrapped(ptr.Elem())) {
				value = "this.go$val";
			}
			code.Write(primaryFunction(fmt.Sprintf("go$ptrType(%s).prototype.%s", new (go$sliceType(go$emptyInterface))([new Go$String(typeName), new Go$String(funName$1)])), typeName + "." + funName$1));
			fmt.Fprintf(code, "\t%s.prototype.%s = function(%s) { var obj = %s; return (new (go$ptrType(%s))(function() { return obj; }, null)).%s(%s); };\n", new (go$sliceType(go$emptyInterface))([new Go$String(typeName), new Go$String(funName$1), new Go$String(joinedParams), new Go$String(value), new Go$String(typeName), new Go$String(funName$1), new Go$String(joinedParams)]));
			return code.Bytes();
		}
		value$1 = "this.go$get()";
		if (isWrapped(recvType)) {
			value$1 = fmt.Sprintf("new %s(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(typeName), new Go$String(value$1)]));
		}
		code.Write(primaryFunction(typeName + ".prototype." + funName$1, typeName + "." + funName$1));
		fmt.Fprintf(code, "\tgo$ptrType(%s).prototype.%s = function(%s) { return %s.%s(%s); };\n", new (go$sliceType(go$emptyInterface))([new Go$String(typeName), new Go$String(funName$1), new Go$String(joinedParams), new Go$String(value$1), new Go$String(funName$1), new Go$String(joinedParams)]));
		return code.Bytes();
	};
	pkgContext.prototype.translateToplevelFunction = function(fun, native$1) { return this.go$val.translateToplevelFunction(fun, native$1); };
	pkgContext.Ptr.prototype.translateFunction = function(t, sig, stmts) {
		var params, body, c, outerFuncContext, vars, _ref, _i, _keys, _entry, v, k, _key, _map, _key$1, _ref$1, _i$1, _slice, _index, param, _ref$2, _i$2, _slice$1, _index$1, ident, _entry$1;
		params = (go$sliceType(Go$String)).nil;
		body = (go$sliceType(Go$Uint8)).nil;
		c = this;
		outerFuncContext = c.f;
		vars = new Go$Map();
		_ref = c.f.allVars;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			v = _entry.v;
			k = _entry.k;
			_key = k, (vars || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: v };
			_i++;
		}
		c.f = new funcContext.Ptr(sig, vars, (go$sliceType(Go$String)).nil, (go$sliceType(ast.Expr)).nil, (_map = new Go$Map(), _key$1 = "", _map[_key$1] = { k: _key$1, v: new flowData.Ptr("", 0, 0) }, _map), (go$sliceType(Go$String)).nil, false, 1, new Go$Map(), new Go$Map());
		_ref$1 = t.Params.List;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			param = (_slice = _ref$1, _index = _i$1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_ref$2 = param.Names;
			_i$2 = 0;
			while (_i$2 < _ref$2.length) {
				ident = (_slice$1 = _ref$2, _index$1 = _i$2, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				if (isBlank(ident)) {
					params = go$append(params, c.newVariable("param"));
					_i$2++;
					continue;
				}
				params = go$append(params, c.objectName((_entry$1 = c.info.Defs[ident.go$key()], _entry$1 !== undefined ? _entry$1.v : null)));
				_i$2++;
			}
			_i$1++;
		}
		body = c.translateFunctionBody(1, stmts);
		c.f = outerFuncContext;
		return [params, body];
	};
	pkgContext.prototype.translateFunction = function(t, sig, stmts) { return this.go$val.translateFunction(t, sig, stmts); };
	pkgContext.Ptr.prototype.translateFunctionBody = function(indent, stmts) {
		var c, v, _ref, _i, _slice, _index, stmt, body;
		c = this;
		v = new gotoVisitor.Ptr(c.f, (go$sliceType(ast.Node)).nil);
		_ref = stmts;
		_i = 0;
		while (_i < _ref.length) {
			stmt = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			ast.Walk(v, stmt);
			_i++;
		}
		c.f.localVars = (go$sliceType(Go$String)).nil;
		if (c.f.flattened) {
			c.f.localVars = go$append(c.f.localVars, "go$this = this");
		}
		body = c.CatchOutput(indent, (function() {
			var i, result, name, id, _key, _key$1, _slice$1, _index$1, printBody, v$1;
			if (!(c.f.sig === (go$ptrType(types.Signature)).nil) && !((c.f.sig.Results().Len() === 0)) && !(c.f.sig.Results().At(0).object.Name() === "")) {
				c.f.resultNames = (go$sliceType(ast.Expr)).make(c.f.sig.Results().Len(), 0, function() { return null; });
				i = 0;
				while (i < c.f.sig.Results().Len()) {
					result = c.f.sig.Results().At(i);
					name = result.object.Name();
					if (result.object.Name() === "_") {
						name = "result";
					}
					c.Printf("%s = %s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.objectName(result)), new Go$String(c.zeroValue(result.object.Type()))]));
					id = ast.NewIdent(name);
					_key = id, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: new types.TypeAndValue.Ptr(result.object.Type(), null) };
					_key$1 = id, (c.info.Uses || go$throwRuntimeError("assignment to entry in nil map"))[_key$1.go$key()] = { k: _key$1, v: result };
					_slice$1 = c.f.resultNames, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = id) : go$throwRuntimeError("index out of range");
					i = i + 1 >> 0;
				}
			}
			printBody = (function() {
				if (c.f.flattened) {
					c.Printf("/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:", new (go$sliceType(go$emptyInterface))([]));
					c.translateStmtList(stmts);
					c.Printf("/* */ } break; } }; return go$f();", new (go$sliceType(go$emptyInterface))([]));
					return;
				}
				c.translateStmtList(stmts);
			});
			v$1 = new hasDeferVisitor.Ptr(false);
			ast.Walk(v$1, new ast.BlockStmt.Ptr(0, stmts, 0));
			if (v$1.hasDefer) {
				c.Printf("var go$deferred = [];", new (go$sliceType(go$emptyInterface))([]));
				c.Printf("try {", new (go$sliceType(go$emptyInterface))([]));
				c.Indent((function() {
					printBody();
				}));
				c.Printf("} catch(go$err) {", new (go$sliceType(go$emptyInterface))([]));
				c.Indent((function() {
					var _ref$1, zeros, _ref$2, _i$1, i$1, _slice$2, _index$2;
					c.Printf("go$pushErr(go$err);", new (go$sliceType(go$emptyInterface))([]));
					if (!(c.f.sig === (go$ptrType(types.Signature)).nil) && c.f.resultNames === (go$sliceType(ast.Expr)).nil) {
						_ref$1 = c.f.sig.Results().Len();
						if (_ref$1 === 0) {
						} else if (_ref$1 === 1) {
							c.Printf("return %s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.zeroValue(c.f.sig.Results().At(0).object.Type()))]));
						} else {
							zeros = (go$sliceType(Go$String)).make(c.f.sig.Results().Len(), 0, function() { return ""; });
							_ref$2 = zeros;
							_i$1 = 0;
							while (_i$1 < _ref$2.length) {
								i$1 = _i$1;
								_slice$2 = zeros, _index$2 = i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = c.zeroValue(c.f.sig.Results().At(i$1).object.Type())) : go$throwRuntimeError("index out of range");
								_i$1++;
							}
							c.Printf("return [%s];", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Join(zeros, ", "))]));
						}
					}
				}));
				c.Printf("} finally {", new (go$sliceType(go$emptyInterface))([]));
				c.Indent((function() {
					c.Printf("go$callDeferred(go$deferred);", new (go$sliceType(go$emptyInterface))([]));
					if (!(c.f.resultNames === (go$sliceType(ast.Expr)).nil)) {
						c.translateStmt(new ast.ReturnStmt.Ptr(0, (go$sliceType(ast.Expr)).nil), "");
					}
				}));
				c.Printf("}", new (go$sliceType(go$emptyInterface))([]));
				return;
			}
			printBody();
		}));
		if (!((c.f.localVars.length === 0))) {
			body = go$appendSlice(new (go$sliceType(Go$Uint8))(go$stringToBytes(fmt.Sprintf("%svar %s;\n", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Repeat("\t", c.indentation + indent >> 0)), new Go$String(strings.Join(c.f.localVars, ", "))])))), body);
		}
		return body;
	};
	pkgContext.prototype.translateFunctionBody = function(indent, stmts) { return this.go$val.translateFunctionBody(indent, stmts); };
	hasDeferVisitor.Ptr.prototype.Visit = function(node) {
		var w, v, _ref, _type;
		w = null;
		v = this;
		if (v.hasDefer) {
			w = null;
			return w;
		}
		_ref = node;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.DeferStmt))) {
			v.hasDefer = true;
			w = null;
			return w;
		} else if (ast.Expr.implementedBy.indexOf(_type) !== -1) {
			w = null;
			return w;
		}
		w = v;
		return w;
	};
	hasDeferVisitor.prototype.Visit = function(node) { return this.go$val.Visit(node); };
	gotoVisitor.Ptr.prototype.Visit = function(node) {
		var w, v, n, _ref, _type, _ref$1, _i, _slice, _index, n2, _key, ok, _tuple, _entry, _key$1;
		w = null;
		v = this;
		if (go$interfaceIsEqual(node, null)) {
			v.stack = go$subslice(v.stack, 0, (v.stack.length - 1 >> 0));
			return w;
		}
		_ref = node;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BranchStmt))) {
			n = _ref.go$val;
			if (n.Tok === 73) {
				v.f.flattened = true;
				_ref$1 = v.stack;
				_i = 0;
				while (_i < _ref$1.length) {
					n2 = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					_key = n2, (v.f.hasGoto || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: true };
					_i++;
				}
				if (_tuple = (_entry = v.f.labelCases[n.Label.String()], _entry !== undefined ? [_entry.v, true] : [0, false]), ok = _tuple[1], !ok) {
					_key$1 = n.Label.String(), (v.f.labelCases || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: v.f.caseCounter };
					v.f.caseCounter = v.f.caseCounter + 1 >> 0;
				}
				w = null;
				return w;
			}
		} else if (ast.Expr.implementedBy.indexOf(_type) !== -1) {
			n = _ref;
			w = null;
			return w;
		}
		v.stack = go$append(v.stack, node);
		w = v;
		return w;
	};
	gotoVisitor.prototype.Visit = function(node) { return this.go$val.Visit(node); };
	pkgContext.Ptr.prototype.translateStmtList = function(stmts) {
		var c, _ref, _i, _slice, _index, stmt;
		c = this;
		_ref = stmts;
		_i = 0;
		while (_i < _ref.length) {
			stmt = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			c.translateStmt(stmt, "");
			_i++;
		}
	};
	pkgContext.prototype.translateStmtList = function(stmts) { return this.go$val.translateStmtList(stmts); };
	pkgContext.Ptr.prototype.translateStmt = function(stmt, label) {
		var c, s, _ref, _type, caseClauses, initStmts, ifStmt, elseStmt, _ref$1, _type$1, expr, _recv, _entry, translateCond, refVar, _entry$1, expr$1, typeSwitchVar, a, _ref$2, _type$2, x, _slice, _index, x$1, _slice$1, _index$1, _ref$3, _i, _slice$2, _index$2, caseClause, _key, _entry$2, x$2, refVar$1, typeVar, translateCond$1, printCaseBodyPrefix, _entry$3, cond, post, _entry$4, refVar$2, iVar, t, _ref$4, _type$3, _entry$5, runeVar, _entry$6, keysVar, _entry$7, length, t2, _ref$5, _type$4, x$3, _entry$8, labelSuffix, _entry$9, data, _entry$10, _ref$6, _entry$11, results, _ref$7, _slice$3, _index$3, _slice$4, _index$4, v, values, _ref$8, _i$1, _slice$5, _index$5, result, i, _slice$6, _index$6, isIdent, _tuple, x$4, ident, isBuiltin, _tuple$1, x$5, _entry$12, builtin, args, _ref$9, _i$2, _slice$7, _index$7, arg, i$1, _entry$13, _slice$8, _index$8, call, x$6, _entry$14, sig, args$1, isSelector, _tuple$2, x$7, sel, _entry$15, obj, _key$1, x$8, decl, _ref$10, _ref$11, _i$3, _slice$9, _index$9, spec, x$9, _entry$16, o, r;
		c = this;
		_ref = stmt;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BlockStmt))) {
			s = _ref.go$val;
			c.translateStmtList(s.List);
		} else if (_type === (go$ptrType(ast.IfStmt))) {
			s = _ref.go$val;
			caseClauses = (go$sliceType(ast.Stmt)).nil;
			initStmts = (go$sliceType(ast.Stmt)).nil;
			ifStmt = s;
			while (true) {
				caseClauses = go$append(caseClauses, new ast.CaseClause.Ptr(0, new (go$sliceType(ast.Expr))([ifStmt.Cond]), 0, ifStmt.Body.List));
				initStmts = go$append(initStmts, ifStmt.Init);
				_ref$1 = ifStmt.Else;
				_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
				if (_type$1 === (go$ptrType(ast.IfStmt))) {
					elseStmt = _ref$1.go$val;
					ifStmt = elseStmt;
					continue;
				} else if (_type$1 === (go$ptrType(ast.BlockStmt))) {
					elseStmt = _ref$1.go$val;
					caseClauses = go$append(caseClauses, new ast.CaseClause.Ptr(0, (go$sliceType(ast.Expr)).nil, 0, elseStmt.List));
					initStmts = go$append(initStmts, null);
				} else if (_type$1 === (go$ptrType(ast.EmptyStmt)) || _type$1 === null) {
					elseStmt = _ref$1;
				} else {
					elseStmt = _ref$1;
					throw go$panic(new Go$String(fmt.Sprintf("Unhandled else: %T\n", new (go$sliceType(go$emptyInterface))([elseStmt]))));
				}
				break;
			}
			c.translateBranchingStmt(caseClauses, initStmts, false, (_recv = c, function(expr) { return _recv.translateExpr(expr); }), go$throwNilPointerError, label, (_entry = c.f.hasGoto[(s || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : false));
		} else if (_type === (go$ptrType(ast.SwitchStmt))) {
			s = _ref.go$val;
			if (!(go$interfaceIsEqual(s.Init, null))) {
				c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateSimpleStmt(s.Init))]));
			}
			translateCond = (function(cond) {
				return c.translateExpr(cond);
			});
			if (!(go$interfaceIsEqual(s.Tag, null))) {
				refVar = c.newVariable("_ref");
				c.Printf("%s = %s;", new (go$sliceType(go$emptyInterface))([new Go$String(refVar), c.translateExpr(s.Tag)]));
				translateCond = (function(cond) {
					var _entry$1, refIdent;
					refIdent = c.newIdent(refVar, (_entry$1 = c.info.Types[(s.Tag || go$interfaceNil).go$key()], _entry$1 !== undefined ? _entry$1.v : new types.TypeAndValue.Ptr()).Type);
					return c.translateExpr(new ast.BinaryExpr.Ptr(refIdent, 0, 39, cond));
				});
			}
			c.translateBranchingStmt(s.Body.List, (go$sliceType(ast.Stmt)).nil, true, translateCond, go$throwNilPointerError, label, (_entry$1 = c.f.hasGoto[(s || go$interfaceNil).go$key()], _entry$1 !== undefined ? _entry$1.v : false));
		} else if (_type === (go$ptrType(ast.TypeSwitchStmt))) {
			s = _ref.go$val;
			if (!(go$interfaceIsEqual(s.Init, null))) {
				c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateSimpleStmt(s.Init))]));
			}
			expr$1 = null;
			typeSwitchVar = "";
			_ref$2 = s.Assign;
			_type$2 = _ref$2 !== null ? _ref$2.constructor : null;
			if (_type$2 === (go$ptrType(ast.AssignStmt))) {
				a = _ref$2.go$val;
				expr$1 = (x = (_slice = a.Rhs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$ptrType(ast.TypeAssertExpr)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(ast.TypeAssertExpr))))).X;
				typeSwitchVar = c.newVariable((x$1 = (_slice$1 = a.Lhs, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (x$1 !== null && x$1.constructor === (go$ptrType(ast.Ident)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(ast.Ident))))).Name);
				_ref$3 = s.Body.List;
				_i = 0;
				while (_i < _ref$3.length) {
					caseClause = (_slice$2 = _ref$3, _index$2 = _i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
					_key = (_entry$2 = c.info.Implicits[(caseClause || go$interfaceNil).go$key()], _entry$2 !== undefined ? _entry$2.v : null), (c.objectVars || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: typeSwitchVar };
					_i++;
				}
			} else if (_type$2 === (go$ptrType(ast.ExprStmt))) {
				a = _ref$2.go$val;
				expr$1 = (x$2 = a.X, (x$2 !== null && x$2.constructor === (go$ptrType(ast.TypeAssertExpr)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(ast.TypeAssertExpr))))).X;
			}
			refVar$1 = c.newVariable("_ref");
			typeVar = c.newVariable("_type");
			c.Printf("%s = %s;", new (go$sliceType(go$emptyInterface))([new Go$String(refVar$1), c.translateExpr(expr$1)]));
			c.Printf("%s = %s !== null ? %s.constructor : null;", new (go$sliceType(go$emptyInterface))([new Go$String(typeVar), new Go$String(refVar$1), new Go$String(refVar$1)]));
			translateCond$1 = (function(cond) {
				var _entry$3;
				return c.formatExpr("%s", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeCheck(typeVar, (_entry$3 = c.info.Types[(cond || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : new types.TypeAndValue.Ptr()).Type))]));
			});
			printCaseBodyPrefix = (function(conds) {
				var value, _slice$3, _index$3, _entry$3, t, isInterface, _tuple, x$3;
				if (typeSwitchVar === "") {
					return;
				}
				value = refVar$1;
				if (conds.length === 1) {
					t = (_entry$3 = c.info.Types[((_slice$3 = conds, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : new types.TypeAndValue.Ptr()).Type;
					if (_tuple = (x$3 = t.Underlying(), (x$3 !== null && x$3.constructor === (go$ptrType(types.Interface)) ? [x$3.go$val, true] : [(go$ptrType(types.Interface)).nil, false])), isInterface = _tuple[1], !isInterface && !types.Identical(t, types.Typ[25])) {
						value = value + ".go$val";
					}
				}
				c.Printf("%s = %s;", new (go$sliceType(go$emptyInterface))([new Go$String(typeSwitchVar), new Go$String(value)]));
			});
			c.translateBranchingStmt(s.Body.List, (go$sliceType(ast.Stmt)).nil, true, translateCond$1, printCaseBodyPrefix, label, (_entry$3 = c.f.hasGoto[(s || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : false));
		} else if (_type === (go$ptrType(ast.ForStmt))) {
			s = _ref.go$val;
			if (!(go$interfaceIsEqual(s.Init, null))) {
				c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateSimpleStmt(s.Init))]));
			}
			cond = "true";
			if (!(go$interfaceIsEqual(s.Cond, null))) {
				cond = c.translateExpr(s.Cond).String();
			}
			post = "";
			if (!(go$interfaceIsEqual(s.Post, null))) {
				post = c.translateSimpleStmt(s.Post);
			}
			c.translateLoopingStmt(cond, post, s.Body, go$throwNilPointerError, label, (_entry$4 = c.f.hasGoto[(s || go$interfaceNil).go$key()], _entry$4 !== undefined ? _entry$4.v : false));
		} else if (_type === (go$ptrType(ast.RangeStmt))) {
			s = _ref.go$val;
			refVar$2 = c.newVariable("_ref");
			c.Printf("%s = %s;", new (go$sliceType(go$emptyInterface))([new Go$String(refVar$2), c.translateExpr(s.X)]));
			iVar = c.newVariable("_i");
			c.Printf("%s = 0;", new (go$sliceType(go$emptyInterface))([new Go$String(iVar)]));
			_ref$4 = (_entry$5 = c.info.Types[(s.X || go$interfaceNil).go$key()], _entry$5 !== undefined ? _entry$5.v : new types.TypeAndValue.Ptr()).Type.Underlying();
			_type$3 = _ref$4 !== null ? _ref$4.constructor : null;
			if (_type$3 === (go$ptrType(types.Basic))) {
				t = _ref$4.go$val;
				runeVar = c.newVariable("_rune");
				c.translateLoopingStmt(iVar + " < " + refVar$2 + ".length", iVar + " += " + runeVar + "[1]", s.Body, (function() {
					c.Printf("%s = go$decodeRune(%s, %s);", new (go$sliceType(go$emptyInterface))([new Go$String(runeVar), new Go$String(refVar$2), new Go$String(iVar)]));
					if (!isBlank(s.Value)) {
						c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateAssign(s.Value, runeVar + "[0]"))]));
					}
					if (!isBlank(s.Key)) {
						c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateAssign(s.Key, iVar))]));
					}
				}), label, (_entry$6 = c.f.hasGoto[(s || go$interfaceNil).go$key()], _entry$6 !== undefined ? _entry$6.v : false));
			} else if (_type$3 === (go$ptrType(types.Map))) {
				t = _ref$4.go$val;
				keysVar = c.newVariable("_keys");
				c.Printf("%s = go$keys(%s);", new (go$sliceType(go$emptyInterface))([new Go$String(keysVar), new Go$String(refVar$2)]));
				c.translateLoopingStmt(iVar + " < " + keysVar + ".length", iVar + "++", s.Body, (function() {
					var entryVar;
					entryVar = c.newVariable("_entry");
					c.Printf("%s = %s[%s[%s]];", new (go$sliceType(go$emptyInterface))([new Go$String(entryVar), new Go$String(refVar$2), new Go$String(keysVar), new Go$String(iVar)]));
					if (!isBlank(s.Value)) {
						c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateAssign(s.Value, entryVar + ".v"))]));
					}
					if (!isBlank(s.Key)) {
						c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateAssign(s.Key, entryVar + ".k"))]));
					}
				}), label, (_entry$7 = c.f.hasGoto[(s || go$interfaceNil).go$key()], _entry$7 !== undefined ? _entry$7.v : false));
			} else if (_type$3 === (go$ptrType(types.Array)) || _type$3 === (go$ptrType(types.Pointer)) || _type$3 === (go$ptrType(types.Slice))) {
				t = _ref$4;
				length = "";
				_ref$5 = t;
				_type$4 = _ref$5 !== null ? _ref$5.constructor : null;
				if (_type$4 === (go$ptrType(types.Array))) {
					t2 = _ref$5.go$val;
					length = fmt.Sprintf("%d", new (go$sliceType(go$emptyInterface))([t2.Len()]));
				} else if (_type$4 === (go$ptrType(types.Pointer))) {
					t2 = _ref$5.go$val;
					length = fmt.Sprintf("%d", new (go$sliceType(go$emptyInterface))([(x$3 = t2.Elem().Underlying(), (x$3 !== null && x$3.constructor === (go$ptrType(types.Array)) ? x$3.go$val : go$typeAssertionFailed(x$3, (go$ptrType(types.Array))))).Len()]));
				} else if (_type$4 === (go$ptrType(types.Slice))) {
					t2 = _ref$5.go$val;
					length = refVar$2 + ".length";
				}
				c.translateLoopingStmt(iVar + " < " + length, iVar + "++", s.Body, (function() {
					var indexExpr, et, _key$1;
					if (!isBlank(s.Value)) {
						indexExpr = new ast.IndexExpr.Ptr(c.newIdent(refVar$2, t), 0, c.newIdent(iVar, types.Typ[2]), 0);
						et = elemType(t);
						_key$1 = indexExpr, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key$1 || go$interfaceNil).go$key()] = { k: _key$1, v: new types.TypeAndValue.Ptr(et, null) };
						c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateAssign(s.Value, c.translateImplicitConversion(indexExpr, et).String()))]));
					}
					if (!isBlank(s.Key)) {
						c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateAssign(s.Key, iVar))]));
					}
				}), label, (_entry$8 = c.f.hasGoto[(s || go$interfaceNil).go$key()], _entry$8 !== undefined ? _entry$8.v : false));
			} else if (_type$3 === (go$ptrType(types.Chan))) {
				t = _ref$4.go$val;
				c.printLabel(label);
			} else {
				t = _ref$4;
				throw go$panic(new Go$String(""));
			}
		} else if (_type === (go$ptrType(ast.BranchStmt))) {
			s = _ref.go$val;
			c.printLabel(label);
			labelSuffix = "";
			data = (_entry$9 = c.f.flowDatas[""], _entry$9 !== undefined ? _entry$9.v : (go$ptrType(flowData)).nil);
			if (!(s.Label === (go$ptrType(ast.Ident)).nil)) {
				labelSuffix = " " + s.Label.Name;
				data = (_entry$10 = c.f.flowDatas[s.Label.Name], _entry$10 !== undefined ? _entry$10.v : (go$ptrType(flowData)).nil);
			}
			_ref$6 = s.Tok;
			if (_ref$6 === 61) {
				c.PrintCond(data.endCase === 0, fmt.Sprintf("break%s;", new (go$sliceType(go$emptyInterface))([new Go$String(labelSuffix)])), fmt.Sprintf("go$s = %d; continue;", new (go$sliceType(go$emptyInterface))([new Go$Int(data.endCase)])));
			} else if (_ref$6 === 65) {
				if (!(data.postStmt === "")) {
					c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(data.postStmt)]));
				}
				c.PrintCond(data.beginCase === 0, fmt.Sprintf("continue%s;", new (go$sliceType(go$emptyInterface))([new Go$String(labelSuffix)])), fmt.Sprintf("go$s = %d; continue;", new (go$sliceType(go$emptyInterface))([new Go$Int(data.beginCase)])));
			} else if (_ref$6 === 73) {
				c.PrintCond(false, "goto " + s.Label.Name, fmt.Sprintf("go$s = %d; continue;", new (go$sliceType(go$emptyInterface))([new Go$Int((_entry$11 = c.f.labelCases[s.Label.Name], _entry$11 !== undefined ? _entry$11.v : 0))])));
			} else if (_ref$6 === 69) {
			} else {
				throw go$panic(new Go$String("Unhandled branch statment: " + (new token.Token(s.Tok)).String()));
			}
		} else if (_type === (go$ptrType(ast.ReturnStmt))) {
			s = _ref.go$val;
			c.printLabel(label);
			results = s.Results;
			if (!(c.f.resultNames === (go$sliceType(ast.Expr)).nil)) {
				if (!((s.Results.length === 0))) {
					c.translateStmt(new ast.AssignStmt.Ptr(c.f.resultNames, 0, 42, s.Results), "");
				}
				results = c.f.resultNames;
			}
			_ref$7 = results.length;
			switch (0) { default: if (_ref$7 === 0) {
				c.Printf("return;", new (go$sliceType(go$emptyInterface))([]));
			} else if (_ref$7 === 1) {
				if (c.f.sig.Results().Len() > 1) {
					c.Printf("return %s;", new (go$sliceType(go$emptyInterface))([c.translateExpr((_slice$3 = results, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")))]));
					break;
				}
				v = c.translateImplicitConversion((_slice$4 = results, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), c.f.sig.Results().At(0).object.Type());
				c.delayedOutput = (go$sliceType(Go$Uint8)).nil;
				c.Printf("return %s;", new (go$sliceType(go$emptyInterface))([v]));
			} else {
				values = (go$sliceType(Go$String)).make(results.length, 0, function() { return ""; });
				_ref$8 = results;
				_i$1 = 0;
				while (_i$1 < _ref$8.length) {
					result = (_slice$5 = _ref$8, _index$5 = _i$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
					i = _i$1;
					_slice$6 = values, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = c.translateImplicitConversion(result, c.f.sig.Results().At(i).object.Type()).String()) : go$throwRuntimeError("index out of range");
					_i$1++;
				}
				c.delayedOutput = (go$sliceType(Go$Uint8)).nil;
				c.Printf("return [%s];", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Join(values, ", "))]));
			} }
		} else if (_type === (go$ptrType(ast.DeferStmt))) {
			s = _ref.go$val;
			c.printLabel(label);
			if (_tuple = (x$4 = s.Call.Fun, (x$4 !== null && x$4.constructor === (go$ptrType(ast.Ident)) ? [x$4.go$val, true] : [(go$ptrType(ast.Ident)).nil, false])), ident = _tuple[0], isIdent = _tuple[1], isIdent) {
				if (_tuple$1 = (x$5 = (_entry$12 = c.info.Uses[ident.go$key()], _entry$12 !== undefined ? _entry$12.v : null), (x$5 !== null && x$5.constructor === (go$ptrType(types.Builtin)) ? [x$5.go$val, true] : [(go$ptrType(types.Builtin)).nil, false])), builtin = _tuple$1[0], isBuiltin = _tuple$1[1], isBuiltin) {
					if (builtin.object.Name() === "recover") {
						c.Printf("go$deferred.push({ fun: go$recover, args: [] });", new (go$sliceType(go$emptyInterface))([]));
						return;
					}
					args = (go$sliceType(ast.Expr)).make(s.Call.Args.length, 0, function() { return null; });
					_ref$9 = s.Call.Args;
					_i$2 = 0;
					while (_i$2 < _ref$9.length) {
						arg = (_slice$7 = _ref$9, _index$7 = _i$2, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"));
						i$1 = _i$2;
						_slice$8 = args, _index$8 = i$1, (_index$8 >= 0 && _index$8 < _slice$8.length) ? (_slice$8.array[_slice$8.offset + _index$8] = c.newIdent(c.newVariable("_arg"), (_entry$13 = c.info.Types[(arg || go$interfaceNil).go$key()], _entry$13 !== undefined ? _entry$13.v : new types.TypeAndValue.Ptr()).Type)) : go$throwRuntimeError("index out of range");
						_i$2++;
					}
					call = c.translateExpr(new ast.CallExpr.Ptr(s.Call.Fun, 0, args, s.Call.Ellipsis, 0));
					c.Printf("go$deferred.push({ fun: function(%s) { %s; }, args: [%s] });", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Join(c.translateExprSlice(args, null), ", ")), call, new Go$String(strings.Join(c.translateExprSlice(s.Call.Args, null), ", "))]));
					return;
				}
			}
			sig = (x$6 = (_entry$14 = c.info.Types[(s.Call.Fun || go$interfaceNil).go$key()], _entry$14 !== undefined ? _entry$14.v : new types.TypeAndValue.Ptr()).Type.Underlying(), (x$6 !== null && x$6.constructor === (go$ptrType(types.Signature)) ? x$6.go$val : go$typeAssertionFailed(x$6, (go$ptrType(types.Signature)))));
			args$1 = c.translateArgs(sig, s.Call.Args, (new token.Pos(s.Call.Ellipsis)).IsValid());
			if (_tuple$2 = (x$7 = s.Call.Fun, (x$7 !== null && x$7.constructor === (go$ptrType(ast.SelectorExpr)) ? [x$7.go$val, true] : [(go$ptrType(ast.SelectorExpr)).nil, false])), sel = _tuple$2[0], isSelector = _tuple$2[1], isSelector) {
				obj = (_entry$15 = c.info.Selections[sel.go$key()], _entry$15 !== undefined ? _entry$15.v : (go$ptrType(types.Selection)).nil).Obj();
				if (!obj.Exported()) {
					_key$1 = obj, (c.dependencies || go$throwRuntimeError("assignment to entry in nil map"))[(_key$1 || go$interfaceNil).go$key()] = { k: _key$1, v: true };
				}
				c.Printf("go$deferred.push({ recv: %s, method: \"%s\", args: [%s] });", new (go$sliceType(go$emptyInterface))([c.translateExpr(sel.X), new Go$String(sel.Sel.Name), new Go$String(args$1)]));
				return;
			}
			c.Printf("go$deferred.push({ fun: %s, args: [%s] });", new (go$sliceType(go$emptyInterface))([c.translateExpr(s.Call.Fun), new Go$String(args$1)]));
		} else if (_type === (go$ptrType(ast.DeclStmt))) {
			s = _ref.go$val;
			c.printLabel(label);
			decl = (x$8 = s.Decl, (x$8 !== null && x$8.constructor === (go$ptrType(ast.GenDecl)) ? x$8.go$val : go$typeAssertionFailed(x$8, (go$ptrType(ast.GenDecl)))));
			_ref$10 = decl.Tok;
			if (_ref$10 === 85) {
				c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(c.translateSimpleStmt(stmt))]));
			} else if (_ref$10 === 84) {
				_ref$11 = decl.Specs;
				_i$3 = 0;
				while (_i$3 < _ref$11.length) {
					spec = (_slice$9 = _ref$11, _index$9 = _i$3, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"));
					o = (x$9 = (_entry$16 = c.info.Defs[(spec !== null && spec.constructor === (go$ptrType(ast.TypeSpec)) ? spec.go$val : go$typeAssertionFailed(spec, (go$ptrType(ast.TypeSpec)))).Name.go$key()], _entry$16 !== undefined ? _entry$16.v : null), (x$9 !== null && x$9.constructor === (go$ptrType(types.TypeName)) ? x$9.go$val : go$typeAssertionFailed(x$9, (go$ptrType(types.TypeName)))));
					c.translateType(o, false);
					c.initType(o);
					_i$3++;
				}
			}
		} else if (_type === (go$ptrType(ast.LabeledStmt))) {
			s = _ref.go$val;
			c.printLabel(label);
			c.translateStmt(s.Stmt, s.Label.Name);
		} else if (_type === (go$ptrType(ast.SelectStmt))) {
			s = _ref.go$val;
			c.printLabel(label);
			c.Printf("go$notSupported(\"select\")", new (go$sliceType(go$emptyInterface))([]));
		} else if (_type === (go$ptrType(ast.GoStmt))) {
			s = _ref.go$val;
			c.printLabel(label);
			c.Printf("go$notSupported(\"go\")", new (go$sliceType(go$emptyInterface))([]));
		} else if (_type === (go$ptrType(ast.EmptyStmt))) {
			s = _ref.go$val;
		} else {
			s = _ref;
			c.printLabel(label);
			if (r = c.translateSimpleStmt(stmt), !(r === "")) {
				c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(r)]));
			}
		}
	};
	pkgContext.prototype.translateStmt = function(stmt, label) { return this.go$val.translateStmt(stmt, label); };
	pkgContext.Ptr.prototype.translateBranchingStmt = function(caseClauses, initStmts, isSwitch, translateCond, printCaseBodyPrefix, label, flatten) {
		var c, branches, defaultBranch, openBranches, _ref, _i, _slice, _index, cc, i, clause, branch$1, _ref$1, _i$1, _slice$1, _index$1, openBranch, conds, _ref$2, _i$2, _slice$2, _index$2, cond, x, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, hasBreak, _ref$3, v, _ref$4, _i$3, _slice$6, _index$6, child, _tuple, caseOffset, endCase, ok, _tuple$1, _entry, prevFlowData, _entry$1, data, _key, _key$1, prefix, jump, jumpList, _ref$5, _i$4, _slice$7, _index$7, branch$2, i$1, _ref$6, _i$5, _slice$8, _index$8, branch$3, i$2, _key$2;
		c = this;
		branches = (go$sliceType((go$ptrType(branch)))).nil;
		defaultBranch = (go$ptrType(branch)).nil;
		openBranches = (go$sliceType((go$ptrType(branch)))).nil;
		_ref = caseClauses;
		_i = 0;
		clauseLoop:
		while (_i < _ref.length) {
			cc = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			clause = (cc !== null && cc.constructor === (go$ptrType(ast.CaseClause)) ? cc.go$val : go$typeAssertionFailed(cc, (go$ptrType(ast.CaseClause))));
			branch$1 = new branch.Ptr(clause, "", (go$sliceType(ast.Stmt)).nil);
			openBranches = go$append(openBranches, branch$1);
			_ref$1 = openBranches;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				openBranch = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				openBranch.body = go$appendSlice(openBranch.body, clause.Body);
				_i$1++;
			}
			if (!hasFallthrough(clause)) {
				openBranches = (go$sliceType((go$ptrType(branch)))).nil;
			}
			if (clause.List.length === 0) {
				defaultBranch = branch$1;
				_i++;
				continue;
			}
			conds = (go$sliceType(Go$String)).nil;
			_ref$2 = clause.List;
			_i$2 = 0;
			while (_i$2 < _ref$2.length) {
				cond = (_slice$2 = _ref$2, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				x = translateCond(cond).String();
				if (x === "true") {
					defaultBranch = branch$1;
					break clauseLoop;
				}
				if (!(x === "false")) {
					conds = go$append(conds, x);
				}
				_i$2++;
			}
			if (conds.length === 0) {
				_i++;
				continue;
			}
			branch$1.condition = strings.Join(conds, " || ");
			if (!(initStmts === (go$sliceType(ast.Stmt)).nil) && !(go$interfaceIsEqual((_slice$3 = initStmts, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), null))) {
				branch$1.condition = c.translateSimpleStmt((_slice$4 = initStmts, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"))) + ", " + branch$1.condition;
			}
			branches = go$append(branches, branch$1);
			_i++;
		}
		while (defaultBranch === (go$ptrType(branch)).nil && !((branches.length === 0)) && ((_slice$5 = branches, _index$5 = (branches.length - 1 >> 0), (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")).body.length === 0)) {
			branches = go$subslice(branches, 0, (branches.length - 1 >> 0));
		}
		if (branches.length === 0) {
			if (!(defaultBranch === (go$ptrType(branch)).nil)) {
				c.translateStmtList(defaultBranch.body);
				return;
			}
			return;
		}
		hasBreak = false;
		if (isSwitch) {
			_ref$3 = label;
			if (_ref$3 === "") {
				v = new hasBreakVisitor.Ptr(false);
				_ref$4 = caseClauses;
				_i$3 = 0;
				while (_i$3 < _ref$4.length) {
					child = (_slice$6 = _ref$4, _index$6 = _i$3, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
					ast.Walk(v, child);
					_i$3++;
				}
				hasBreak = v.hasBreak;
			} else {
				hasBreak = true;
			}
		}
		_tuple = [0, 0], caseOffset = _tuple[0], endCase = _tuple[1];
		if (_tuple$1 = (_entry = c.f.labelCases[label], _entry !== undefined ? [_entry.v, true] : [0, false]), ok = _tuple$1[1], ok) {
			flatten = true;
		}
		if (flatten) {
			caseOffset = c.f.caseCounter;
			endCase = (caseOffset + branches.length >> 0) - 1 >> 0;
			if (!(defaultBranch === (go$ptrType(branch)).nil)) {
				endCase = endCase + 1 >> 0;
			}
			c.f.caseCounter = endCase + 1 >> 0;
		}
		prevFlowData = (go$ptrType(flowData)).nil;
		if (isSwitch) {
			prevFlowData = (_entry$1 = c.f.flowDatas[""], _entry$1 !== undefined ? _entry$1.v : (go$ptrType(flowData)).nil);
			data = new flowData.Ptr(prevFlowData.postStmt, prevFlowData.beginCase, endCase);
			_key = "", (c.f.flowDatas || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: data };
			_key$1 = label, (c.f.flowDatas || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: data };
		}
		c.printLabel(label);
		prefix = "";
		if (hasBreak) {
			prefix = "switch (0) { default: ";
		}
		jump = "";
		if (flatten) {
			jumpList = (go$sliceType(Go$String)).nil;
			_ref$5 = branches;
			_i$4 = 0;
			while (_i$4 < _ref$5.length) {
				branch$2 = (_slice$7 = _ref$5, _index$7 = _i$4, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"));
				i$1 = _i$4;
				if (i$1 === 0) {
					jumpList = go$append(jumpList, fmt.Sprintf("if (%s) {}", new (go$sliceType(go$emptyInterface))([new Go$String(branch$2.condition)])));
					_i$4++;
					continue;
				}
				jumpList = go$append(jumpList, fmt.Sprintf("if (%s) { go$s = %d; continue; }", new (go$sliceType(go$emptyInterface))([new Go$String(branch$2.condition), new Go$Int(((caseOffset + i$1 >> 0) - 1 >> 0))])));
				_i$4++;
			}
			jumpList = go$append(jumpList, fmt.Sprintf("{ go$s = %d; continue; }", new (go$sliceType(go$emptyInterface))([new Go$Int(((caseOffset + branches.length >> 0) - 1 >> 0))])));
			jump = strings.Join(jumpList, " else ");
		}
		_ref$6 = branches;
		_i$5 = 0;
		while (_i$5 < _ref$6.length) {
			branch$3 = (_slice$8 = _ref$6, _index$8 = _i$5, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
			i$2 = _i$5;
			c.PrintCond(!flatten, fmt.Sprintf("%sif (%s) {", new (go$sliceType(go$emptyInterface))([new Go$String(prefix), new Go$String(branch$3.condition)])), jump);
			c.Indent((function() {
				if (!(printCaseBodyPrefix === go$throwNilPointerError)) {
					printCaseBodyPrefix(branch$3.clause.List);
				}
				c.translateStmtList(branch$3.body);
			}));
			prefix = "} else ";
			jump = fmt.Sprintf("go$s = %d; continue; case %d: ", new (go$sliceType(go$emptyInterface))([new Go$Int(endCase), new Go$Int((caseOffset + i$2 >> 0))]));
			_i$5++;
		}
		if (!(defaultBranch === (go$ptrType(branch)).nil)) {
			c.PrintCond(!flatten, "} else {", jump);
			c.Indent((function() {
				if (!(printCaseBodyPrefix === go$throwNilPointerError)) {
					printCaseBodyPrefix((go$sliceType(ast.Expr)).nil);
				}
				c.translateStmtList(defaultBranch.body);
			}));
		}
		if (hasBreak) {
			c.PrintCond(!flatten, "} }", fmt.Sprintf("case %d:", new (go$sliceType(go$emptyInterface))([new Go$Int(endCase)])));
			return;
		}
		c.PrintCond(!flatten, "}", fmt.Sprintf("case %d:", new (go$sliceType(go$emptyInterface))([new Go$Int(endCase)])));
		if (isSwitch) {
			delete c.f.flowDatas[label];
			_key$2 = "", (c.f.flowDatas || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: prevFlowData };
		}
	};
	pkgContext.prototype.translateBranchingStmt = function(caseClauses, initStmts, isSwitch, translateCond, printCaseBodyPrefix, label, flatten) { return this.go$val.translateBranchingStmt(caseClauses, initStmts, isSwitch, translateCond, printCaseBodyPrefix, label, flatten); };
	pkgContext.Ptr.prototype.translateLoopingStmt = function(cond, post, body, bodyPrefix, label, flatten) {
		var c, _entry, prevFlowData, data, ok, _tuple, _entry$1, _key, _key$1, _key$2;
		c = this;
		prevFlowData = (_entry = c.f.flowDatas[""], _entry !== undefined ? _entry.v : (go$ptrType(flowData)).nil);
		data = new flowData.Ptr(post, 0, 0);
		if (_tuple = (_entry$1 = c.f.labelCases[label], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]), ok = _tuple[1], ok) {
			flatten = true;
		}
		if (flatten) {
			data.beginCase = c.f.caseCounter;
			data.endCase = c.f.caseCounter + 1 >> 0;
			c.f.caseCounter = c.f.caseCounter + 2 >> 0;
		}
		_key = "", (c.f.flowDatas || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: data };
		_key$1 = label, (c.f.flowDatas || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: data };
		c.printLabel(label);
		c.PrintCond(!flatten, fmt.Sprintf("while (%s) {", new (go$sliceType(go$emptyInterface))([new Go$String(cond)])), fmt.Sprintf("case %d: if(!(%s)) { go$s = %d; continue; }", new (go$sliceType(go$emptyInterface))([new Go$Int(data.beginCase), new Go$String(cond), new Go$Int(data.endCase)])));
		c.Indent((function() {
			var v, prevEV, _ref, _i, _keys, _entry$2, escaping, _entry$3, _lhs, _index, _entry$4, _key$2, isTerminated, _ref$1, _type, _slice, _index$1;
			v = new escapeAnalysis.Ptr(c.info, new Go$Map(), new Go$Map());
			ast.Walk(v, body);
			prevEV = c.f.escapingVars;
			_ref = v.escaping;
			_i = 0;
			_keys = go$keys(_ref);
			while (_i < _keys.length) {
				_entry$2 = _ref[_keys[_i]];
				escaping = _entry$2.k;
				c.Printf("%s = [undefined];", new (go$sliceType(go$emptyInterface))([new Go$String(c.objectName(escaping))]));
				c.f.escapingVars = go$append(c.f.escapingVars, (_entry$3 = c.objectVars[(escaping || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : ""));
				_lhs = c.objectVars, _index = escaping, _key$2 = _index, (_lhs || go$throwRuntimeError("assignment to entry in nil map"))[(_key$2 || go$interfaceNil).go$key()] = { k: _key$2, v: (_entry$4 = _lhs[(_index || go$interfaceNil).go$key()], _entry$4 !== undefined ? _entry$4.v : "") + "[0]" };
				_i++;
			}
			if (!(bodyPrefix === go$throwNilPointerError)) {
				bodyPrefix();
			}
			c.translateStmtList(body.List);
			isTerminated = false;
			if (!((body.List.length === 0))) {
				_ref$1 = (_slice = body.List, _index$1 = (body.List.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice.length) ? _slice.array[_slice.offset + _index$1] : go$throwRuntimeError("index out of range"));
				_type = _ref$1 !== null ? _ref$1.constructor : null;
				if (_type === (go$ptrType(ast.ReturnStmt)) || _type === (go$ptrType(ast.BranchStmt))) {
					isTerminated = true;
				}
			}
			if (!(post === "") && !isTerminated) {
				c.Printf("%s;", new (go$sliceType(go$emptyInterface))([new Go$String(post)]));
			}
			c.f.escapingVars = prevEV;
		}));
		c.PrintCond(!flatten, "}", fmt.Sprintf("go$s = %d; continue; case %d:", new (go$sliceType(go$emptyInterface))([new Go$Int(data.beginCase), new Go$Int(data.endCase)])));
		delete c.f.flowDatas[label];
		_key$2 = "", (c.f.flowDatas || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: prevFlowData };
	};
	pkgContext.prototype.translateLoopingStmt = function(cond, post, body, bodyPrefix, label, flatten) { return this.go$val.translateLoopingStmt(cond, post, body, bodyPrefix, label, flatten); };
	pkgContext.Ptr.prototype.translateSimpleStmt = function(stmt) {
		var c, s, _ref, _type, op, _ref$1, parts, _slice, _index, lhs, l, _ref$2, _type$1, lhsVar, indexVar, _entry, _entry$1, _entry$2, _struct, _key, lhsVar$1, _entry$3, _entry$4, _struct$1, _key$1, v, lhsVar$2, _entry$5, _entry$6, _struct$2, _key$2, _entry$7, _key$3, _slice$1, _index$1, parenExpr, _slice$2, _index$2, _entry$8, _struct$3, _key$4, binaryExpr, _slice$3, _index$3, _entry$9, _struct$4, _key$5, _ref$3, _i, _slice$4, _index$4, lhs$1, _entry$10, _key$6, removeParens, _slice$5, _index$5, lhs$2, v$1, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _entry$11, tupleVar, _slice$10, _index$10, out, x, _slice$11, _index$11, _entry$12, tuple, _ref$4, _i$1, _slice$12, _index$12, lhs$3, i, _slice$13, _index$13, _entry$13, parts$1, _ref$5, _i$2, _slice$14, _index$14, rhs, i$1, _slice$15, _index$15, _entry$14, _slice$16, _index$16, tupleVar$1, out$1, _ref$6, _i$3, _slice$17, _index$17, lhs$4, i$2, _entry$15, t, isIExpr, _tuple, x$1, iExpr, u, _ref$7, _type$2, _entry$16, tok, one, _key$7, parts$2, _ref$8, x$2, _i$4, _slice$18, _index$18, spec, valueSpec, lhs$5, _ref$9, _i$5, _slice$19, _index$19, name, i$3, _slice$20, _index$20, rhs$1, isTuple, _tuple$1, x$3, _slice$21, _index$21, _entry$17;
		c = this;
		_ref = stmt;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.AssignStmt))) {
			s = _ref.go$val;
			if (!((s.Tok === 42)) && !((s.Tok === 47))) {
				op = 0;
				_ref$1 = s.Tok;
				if (_ref$1 === 23) {
					op = 12;
				} else if (_ref$1 === 24) {
					op = 13;
				} else if (_ref$1 === 25) {
					op = 14;
				} else if (_ref$1 === 26) {
					op = 15;
				} else if (_ref$1 === 27) {
					op = 16;
				} else if (_ref$1 === 28) {
					op = 17;
				} else if (_ref$1 === 29) {
					op = 18;
				} else if (_ref$1 === 30) {
					op = 19;
				} else if (_ref$1 === 31) {
					op = 20;
				} else if (_ref$1 === 32) {
					op = 21;
				} else if (_ref$1 === 33) {
					op = 22;
				} else {
					throw go$panic(new token.Token(s.Tok));
				}
				parts = (go$sliceType(Go$String)).nil;
				lhs = (_slice = s.Lhs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				_ref$2 = lhs;
				_type$1 = _ref$2 !== null ? _ref$2.constructor : null;
				if (_type$1 === (go$ptrType(ast.IndexExpr))) {
					l = _ref$2.go$val;
					lhsVar = c.newVariable("_lhs");
					indexVar = c.newVariable("_index");
					parts = go$append(parts, lhsVar + " = " + c.translateExpr(l.X).String());
					parts = go$append(parts, indexVar + " = " + c.translateExpr(l.Index).String());
					lhs = new ast.IndexExpr.Ptr(c.newIdent(lhsVar, (_entry = c.info.Types[(l.X || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new types.TypeAndValue.Ptr()).Type), 0, c.newIdent(indexVar, (_entry$1 = c.info.Types[(l.Index || go$interfaceNil).go$key()], _entry$1 !== undefined ? _entry$1.v : new types.TypeAndValue.Ptr()).Type), 0);
					_key = lhs, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: (_struct = (_entry$2 = c.info.Types[(l || go$interfaceNil).go$key()], _entry$2 !== undefined ? _entry$2.v : new types.TypeAndValue.Ptr()), new types.TypeAndValue.Ptr(_struct.Type, _struct.Value)) };
				} else if (_type$1 === (go$ptrType(ast.StarExpr))) {
					l = _ref$2.go$val;
					lhsVar$1 = c.newVariable("_lhs");
					parts = go$append(parts, lhsVar$1 + " = " + c.translateExpr(l.X).String());
					lhs = new ast.StarExpr.Ptr(0, c.newIdent(lhsVar$1, (_entry$3 = c.info.Types[(l.X || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : new types.TypeAndValue.Ptr()).Type));
					_key$1 = lhs, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key$1 || go$interfaceNil).go$key()] = { k: _key$1, v: (_struct$1 = (_entry$4 = c.info.Types[(l || go$interfaceNil).go$key()], _entry$4 !== undefined ? _entry$4.v : new types.TypeAndValue.Ptr()), new types.TypeAndValue.Ptr(_struct$1.Type, _struct$1.Value)) };
				} else if (_type$1 === (go$ptrType(ast.SelectorExpr))) {
					l = _ref$2.go$val;
					v = new hasCallVisitor.Ptr(c.info, false);
					ast.Walk(v, l.X);
					if (v.hasCall) {
						lhsVar$2 = c.newVariable("_lhs");
						parts = go$append(parts, lhsVar$2 + " = " + c.translateExpr(l.X).String());
						lhs = new ast.SelectorExpr.Ptr(c.newIdent(lhsVar$2, (_entry$5 = c.info.Types[(l.X || go$interfaceNil).go$key()], _entry$5 !== undefined ? _entry$5.v : new types.TypeAndValue.Ptr()).Type), l.Sel);
						_key$2 = lhs, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key$2 || go$interfaceNil).go$key()] = { k: _key$2, v: (_struct$2 = (_entry$6 = c.info.Types[(l || go$interfaceNil).go$key()], _entry$6 !== undefined ? _entry$6.v : new types.TypeAndValue.Ptr()), new types.TypeAndValue.Ptr(_struct$2.Type, _struct$2.Value)) };
						_key$3 = (lhs !== null && lhs.constructor === (go$ptrType(ast.SelectorExpr)) ? lhs.go$val : go$typeAssertionFailed(lhs, (go$ptrType(ast.SelectorExpr)))), (c.info.Selections || go$throwRuntimeError("assignment to entry in nil map"))[_key$3.go$key()] = { k: _key$3, v: (_entry$7 = c.info.Selections[l.go$key()], _entry$7 !== undefined ? _entry$7.v : (go$ptrType(types.Selection)).nil) };
					}
				}
				parenExpr = new ast.ParenExpr.Ptr(0, (_slice$1 = s.Rhs, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), 0);
				_key$4 = parenExpr, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key$4 || go$interfaceNil).go$key()] = { k: _key$4, v: (_struct$3 = (_entry$8 = c.info.Types[((_slice$2 = s.Rhs, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$8 !== undefined ? _entry$8.v : new types.TypeAndValue.Ptr()), new types.TypeAndValue.Ptr(_struct$3.Type, _struct$3.Value)) };
				binaryExpr = new ast.BinaryExpr.Ptr(lhs, 0, op, parenExpr);
				_key$5 = binaryExpr, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key$5 || go$interfaceNil).go$key()] = { k: _key$5, v: (_struct$4 = (_entry$9 = c.info.Types[((_slice$3 = s.Lhs, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$9 !== undefined ? _entry$9.v : new types.TypeAndValue.Ptr()), new types.TypeAndValue.Ptr(_struct$4.Type, _struct$4.Value)) };
				parts = go$append(parts, c.translateAssign(lhs, c.translateExpr(binaryExpr).String()));
				return strings.Join(parts, ", ");
			}
			if (s.Tok === 47) {
				_ref$3 = s.Lhs;
				_i = 0;
				while (_i < _ref$3.length) {
					lhs$1 = (_slice$4 = _ref$3, _index$4 = _i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
					if (!isBlank(lhs$1)) {
						_key$6 = lhs$1, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key$6 || go$interfaceNil).go$key()] = { k: _key$6, v: new types.TypeAndValue.Ptr((_entry$10 = c.info.Defs[(lhs$1 !== null && lhs$1.constructor === (go$ptrType(ast.Ident)) ? lhs$1.go$val : go$typeAssertionFailed(lhs$1, (go$ptrType(ast.Ident)))).go$key()], _entry$10 !== undefined ? _entry$10.v : null).Type(), null) };
					}
					_i++;
				}
			}
			removeParens = (function(e) {
				var isParen, _tuple, p;
				while (true) {
					if (_tuple = (e !== null && e.constructor === (go$ptrType(ast.ParenExpr)) ? [e.go$val, true] : [(go$ptrType(ast.ParenExpr)).nil, false]), p = _tuple[0], isParen = _tuple[1], isParen) {
						e = p.X;
						continue;
					}
					break;
				}
				return e;
			});
			if ((s.Lhs.length === 1) && (s.Rhs.length === 1)) {
				lhs$2 = removeParens((_slice$5 = s.Lhs, _index$5 = 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")));
				if (isBlank(lhs$2)) {
					v$1 = new hasCallVisitor.Ptr(c.info, false);
					ast.Walk(v$1, (_slice$6 = s.Rhs, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")));
					if (v$1.hasCall) {
						return c.translateExpr((_slice$7 = s.Rhs, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"))).String();
					}
					return "";
				}
				return c.translateAssign(lhs$2, c.translateImplicitConversion((_slice$8 = s.Rhs, _index$8 = 0, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")), (_entry$11 = c.info.Types[((_slice$9 = s.Lhs, _index$9 = 0, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$11 !== undefined ? _entry$11.v : new types.TypeAndValue.Ptr()).Type).String());
			} else if (s.Lhs.length > 1 && (s.Rhs.length === 1)) {
				tupleVar = c.newVariable("_tuple");
				out = tupleVar + " = " + c.translateExpr((_slice$10 = s.Rhs, _index$10 = 0, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"))).String();
				tuple = (x = (_entry$12 = c.info.Types[((_slice$11 = s.Rhs, _index$11 = 0, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$12 !== undefined ? _entry$12.v : new types.TypeAndValue.Ptr()).Type, (x !== null && x.constructor === (go$ptrType(types.Tuple)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Tuple)))));
				_ref$4 = s.Lhs;
				_i$1 = 0;
				while (_i$1 < _ref$4.length) {
					lhs$3 = (_slice$12 = _ref$4, _index$12 = _i$1, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range"));
					i = _i$1;
					lhs$3 = removeParens(lhs$3);
					if (!isBlank(lhs$3)) {
						out = out + (", " + c.translateAssign(lhs$3, c.translateImplicitConversion(c.newIdent(fmt.Sprintf("%s[%d]", new (go$sliceType(go$emptyInterface))([new Go$String(tupleVar), new Go$Int(i)])), tuple.At(i).object.Type()), (_entry$13 = c.info.Types[((_slice$13 = s.Lhs, _index$13 = i, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$13 !== undefined ? _entry$13.v : new types.TypeAndValue.Ptr()).Type).String()));
					}
					_i$1++;
				}
				return out;
			} else if (s.Lhs.length === s.Rhs.length) {
				parts$1 = (go$sliceType(Go$String)).make(s.Rhs.length, 0, function() { return ""; });
				_ref$5 = s.Rhs;
				_i$2 = 0;
				while (_i$2 < _ref$5.length) {
					rhs = (_slice$14 = _ref$5, _index$14 = _i$2, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range"));
					i$1 = _i$2;
					_slice$16 = parts$1, _index$16 = i$1, (_index$16 >= 0 && _index$16 < _slice$16.length) ? (_slice$16.array[_slice$16.offset + _index$16] = c.translateImplicitConversion(rhs, (_entry$14 = c.info.Types[((_slice$15 = s.Lhs, _index$15 = i$1, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$14 !== undefined ? _entry$14.v : new types.TypeAndValue.Ptr()).Type).String()) : go$throwRuntimeError("index out of range");
					_i$2++;
				}
				tupleVar$1 = c.newVariable("_tuple");
				out$1 = tupleVar$1 + " = [" + strings.Join(parts$1, ", ") + "]";
				_ref$6 = s.Lhs;
				_i$3 = 0;
				while (_i$3 < _ref$6.length) {
					lhs$4 = (_slice$17 = _ref$6, _index$17 = _i$3, (_index$17 >= 0 && _index$17 < _slice$17.length) ? _slice$17.array[_slice$17.offset + _index$17] : go$throwRuntimeError("index out of range"));
					i$2 = _i$3;
					lhs$4 = removeParens(lhs$4);
					if (!isBlank(lhs$4)) {
						out$1 = out$1 + (", " + c.translateAssign(lhs$4, fmt.Sprintf("%s[%d]", new (go$sliceType(go$emptyInterface))([new Go$String(tupleVar$1), new Go$Int(i$2)]))));
					}
					_i$3++;
				}
				return out$1;
			} else {
				throw go$panic(new Go$String("Invalid arity of AssignStmt."));
			}
		} else if (_type === (go$ptrType(ast.IncDecStmt))) {
			s = _ref.go$val;
			t = (_entry$15 = c.info.Types[(s.X || go$interfaceNil).go$key()], _entry$15 !== undefined ? _entry$15.v : new types.TypeAndValue.Ptr()).Type;
			if (_tuple = (x$1 = s.X, (x$1 !== null && x$1.constructor === (go$ptrType(ast.IndexExpr)) ? [x$1.go$val, true] : [(go$ptrType(ast.IndexExpr)).nil, false])), iExpr = _tuple[0], isIExpr = _tuple[1], isIExpr) {
				_ref$7 = (_entry$16 = c.info.Types[(iExpr.X || go$interfaceNil).go$key()], _entry$16 !== undefined ? _entry$16.v : new types.TypeAndValue.Ptr()).Type.Underlying();
				_type$2 = _ref$7 !== null ? _ref$7.constructor : null;
				if (_type$2 === (go$ptrType(types.Array))) {
					u = _ref$7.go$val;
					t = u.Elem();
				} else if (_type$2 === (go$ptrType(types.Slice))) {
					u = _ref$7.go$val;
					t = u.Elem();
				} else if (_type$2 === (go$ptrType(types.Map))) {
					u = _ref$7.go$val;
					t = u.Elem();
				}
			}
			tok = 23;
			if (s.Tok === 38) {
				tok = 24;
			}
			one = new ast.BasicLit.Ptr(0, 5, "1");
			_key$7 = one, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key$7 || go$interfaceNil).go$key()] = { k: _key$7, v: new types.TypeAndValue.Ptr(t, exact.MakeInt64(new Go$Int64(0, 1))) };
			return c.translateSimpleStmt(new ast.AssignStmt.Ptr(new (go$sliceType(ast.Expr))([s.X]), 0, tok, new (go$sliceType(ast.Expr))([one])));
		} else if (_type === (go$ptrType(ast.ExprStmt))) {
			s = _ref.go$val;
			return c.translateExpr(s.X).String();
		} else if (_type === (go$ptrType(ast.DeclStmt))) {
			s = _ref.go$val;
			parts$2 = (go$sliceType(Go$String)).nil;
			_ref$8 = (x$2 = s.Decl, (x$2 !== null && x$2.constructor === (go$ptrType(ast.GenDecl)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(ast.GenDecl))))).Specs;
			_i$4 = 0;
			while (_i$4 < _ref$8.length) {
				spec = (_slice$18 = _ref$8, _index$18 = _i$4, (_index$18 >= 0 && _index$18 < _slice$18.length) ? _slice$18.array[_slice$18.offset + _index$18] : go$throwRuntimeError("index out of range"));
				valueSpec = (spec !== null && spec.constructor === (go$ptrType(ast.ValueSpec)) ? spec.go$val : go$typeAssertionFailed(spec, (go$ptrType(ast.ValueSpec))));
				lhs$5 = (go$sliceType(ast.Expr)).make(valueSpec.Names.length, 0, function() { return null; });
				_ref$9 = valueSpec.Names;
				_i$5 = 0;
				while (_i$5 < _ref$9.length) {
					name = (_slice$19 = _ref$9, _index$19 = _i$5, (_index$19 >= 0 && _index$19 < _slice$19.length) ? _slice$19.array[_slice$19.offset + _index$19] : go$throwRuntimeError("index out of range"));
					i$3 = _i$5;
					_slice$20 = lhs$5, _index$20 = i$3, (_index$20 >= 0 && _index$20 < _slice$20.length) ? (_slice$20.array[_slice$20.offset + _index$20] = name) : go$throwRuntimeError("index out of range");
					_i$5++;
				}
				rhs$1 = valueSpec.Values;
				isTuple = false;
				if (rhs$1.length === 1) {
					_tuple$1 = (x$3 = (_entry$17 = c.info.Types[((_slice$21 = rhs$1, _index$21 = 0, (_index$21 >= 0 && _index$21 < _slice$21.length) ? _slice$21.array[_slice$21.offset + _index$21] : go$throwRuntimeError("index out of range")) || go$interfaceNil).go$key()], _entry$17 !== undefined ? _entry$17.v : new types.TypeAndValue.Ptr()).Type, (x$3 !== null && x$3.constructor === (go$ptrType(types.Tuple)) ? [x$3.go$val, true] : [(go$ptrType(types.Tuple)).nil, false])), isTuple = _tuple$1[1];
				}
				while (rhs$1.length < lhs$5.length && !isTuple) {
					rhs$1 = go$append(rhs$1, null);
				}
				parts$2 = go$append(parts$2, c.translateSimpleStmt(new ast.AssignStmt.Ptr(lhs$5, 0, 47, rhs$1)));
				_i$4++;
			}
			return strings.Join(parts$2, ", ");
		} else if (_type === (go$ptrType(ast.SendStmt))) {
			s = _ref.go$val;
			return "go$notSupported(\"send\")";
		} else {
			s = _ref;
			throw go$panic(new Go$String(fmt.Sprintf("Unhandled statement: %T\n", new (go$sliceType(go$emptyInterface))([s]))));
		}
	};
	pkgContext.prototype.translateSimpleStmt = function(stmt) { return this.go$val.translateSimpleStmt(stmt); };
	pkgContext.Ptr.prototype.translateAssign = function(lhs, rhs) {
		var c, isParenExpr, _tuple, p, l, _ref, _type, _entry, o, _entry$1, _entry$2, sel, _ref$1, _tuple$1, fields, jsTag, u, _ref$2, _type$1, _entry$3, lVar, rVar, out, i, name, t, _ref$3, _type$2, _entry$4, sliceVar, indexVar, keyVar;
		c = this;
		if (isBlank(lhs)) {
			throw go$panic(new Go$String("translateAssign with blank lhs"));
		}
		while (true) {
			if (_tuple = (lhs !== null && lhs.constructor === (go$ptrType(ast.ParenExpr)) ? [lhs.go$val, true] : [(go$ptrType(ast.ParenExpr)).nil, false]), p = _tuple[0], isParenExpr = _tuple[1], isParenExpr) {
				lhs = p.X;
				continue;
			}
			break;
		}
		_ref = lhs;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.Ident))) {
			l = _ref.go$val;
			o = (_entry = c.info.Defs[l.go$key()], _entry !== undefined ? _entry.v : null);
			if (go$interfaceIsEqual(o, null)) {
				o = (_entry$1 = c.info.Uses[l.go$key()], _entry$1 !== undefined ? _entry$1.v : null);
			}
			return c.objectName(o) + " = " + rhs;
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			l = _ref.go$val;
			sel = (_entry$2 = c.info.Selections[l.go$key()], _entry$2 !== undefined ? _entry$2.v : (go$ptrType(types.Selection)).nil);
			_ref$1 = sel.Kind();
			if (_ref$1 === 0) {
				_tuple$1 = c.translateSelection(sel), fields = _tuple$1[0], jsTag = _tuple$1[1];
				if (!(jsTag === "")) {
					return fmt.Sprintf("%s.%s.%s = %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(l.X), new Go$String(strings.Join(fields, ".")), new Go$String(jsTag), new Go$String(c.externalize(rhs, sel.Type()))]));
				}
				return fmt.Sprintf("%s.%s = %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(l.X), new Go$String(strings.Join(fields, ".")), new Go$String(rhs)]));
			} else if (_ref$1 === 3) {
				return c.translateExpr(l.X).String() + "." + l.Sel.Name + " = " + rhs;
			} else {
				throw go$panic(new Go$Int((sel.Kind() >> 0)));
			}
		} else if (_type === (go$ptrType(ast.StarExpr))) {
			l = _ref.go$val;
			_ref$2 = (_entry$3 = c.info.Types[(lhs || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : new types.TypeAndValue.Ptr()).Type.Underlying();
			_type$1 = _ref$2 !== null ? _ref$2.constructor : null;
			if (_type$1 === (go$ptrType(types.Struct))) {
				u = _ref$2.go$val;
				lVar = c.newVariable("l");
				rVar = c.newVariable("r");
				out = fmt.Sprintf("%s = %s, %s = %s", new (go$sliceType(go$emptyInterface))([new Go$String(lVar), c.translateExpr(l.X), new Go$String(rVar), new Go$String(rhs)]));
				i = 0;
				while (i < u.NumFields()) {
					name = fieldName(u, i);
					out = out + (fmt.Sprintf(", %s.%s = %s.%s", new (go$sliceType(go$emptyInterface))([new Go$String(lVar), new Go$String(name), new Go$String(rVar), new Go$String(name)])));
					i = i + 1 >> 0;
				}
				return out;
			} else if (_type$1 === (go$ptrType(types.Array))) {
				u = _ref$2.go$val;
				return fmt.Sprintf("go$copyArray(%s, %s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(l.X), new Go$String(rhs)]));
			} else {
				u = _ref$2;
				return fmt.Sprintf("%s.go$set(%s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(l.X), new Go$String(rhs)]));
			}
		} else if (_type === (go$ptrType(ast.IndexExpr))) {
			l = _ref.go$val;
			_ref$3 = (_entry$4 = c.info.Types[(l.X || go$interfaceNil).go$key()], _entry$4 !== undefined ? _entry$4.v : new types.TypeAndValue.Ptr()).Type.Underlying();
			_type$2 = _ref$3 !== null ? _ref$3.constructor : null;
			if (_type$2 === (go$ptrType(types.Array)) || _type$2 === (go$ptrType(types.Pointer))) {
				t = _ref$3;
				return fmt.Sprintf("%s[%s] = %s", new (go$sliceType(go$emptyInterface))([c.translateExpr(l.X), c.flatten64(l.Index), new Go$String(rhs)]));
			} else if (_type$2 === (go$ptrType(types.Slice))) {
				t = _ref$3.go$val;
				sliceVar = c.newVariable("_slice");
				indexVar = c.newVariable("_index");
				return fmt.Sprintf("%s = %s, %s = %s", new (go$sliceType(go$emptyInterface))([new Go$String(sliceVar), c.translateExpr(l.X), new Go$String(indexVar), c.flatten64(l.Index)])) + fmt.Sprintf(", (%s >= 0 && %s < %s.length) ? (%s.array[%s.offset + %s] = %s) : go$throwRuntimeError(\"index out of range\")", new (go$sliceType(go$emptyInterface))([new Go$String(indexVar), new Go$String(indexVar), new Go$String(sliceVar), new Go$String(sliceVar), new Go$String(sliceVar), new Go$String(indexVar), new Go$String(rhs)]));
			} else if (_type$2 === (go$ptrType(types.Map))) {
				t = _ref$3.go$val;
				keyVar = c.newVariable("_key");
				return fmt.Sprintf("%s = %s, (%s || go$throwRuntimeError(\"assignment to entry in nil map\"))[%s] = { k: %s, v: %s }", new (go$sliceType(go$emptyInterface))([new Go$String(keyVar), c.translateImplicitConversion(l.Index, t.Key()), c.translateExpr(l.X), new Go$String(c.makeKey(c.newIdent(keyVar, t.Key()), t.Key())), new Go$String(keyVar), new Go$String(rhs)]));
			} else {
				t = _ref$3;
				throw go$panic(new Go$String(fmt.Sprintf("Unhandled lhs type: %T\n", new (go$sliceType(go$emptyInterface))([t]))));
			}
		} else {
			l = _ref;
			throw go$panic(new Go$String(fmt.Sprintf("Unhandled lhs type: %T\n", new (go$sliceType(go$emptyInterface))([l]))));
		}
	};
	pkgContext.prototype.translateAssign = function(lhs, rhs) { return this.go$val.translateAssign(lhs, rhs); };
	pkgContext.Ptr.prototype.printLabel = function(label) {
		var c, _tuple, _entry, labelCase, ok;
		c = this;
		if (!(label === "")) {
			_tuple = (_entry = c.f.labelCases[label], _entry !== undefined ? [_entry.v, true] : [0, false]), labelCase = _tuple[0], ok = _tuple[1];
			c.PrintCond(!ok, label + ":", fmt.Sprintf("case %d:", new (go$sliceType(go$emptyInterface))([new Go$Int(labelCase)])));
		}
	};
	pkgContext.prototype.printLabel = function(label) { return this.go$val.printLabel(label); };
	hasFallthrough = function(caseClause) {
		var _tuple, x, _slice, _index, b, isBranchStmt;
		if (caseClause.Body.length === 0) {
			return false;
		}
		_tuple = (x = (_slice = caseClause.Body, _index = (caseClause.Body.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$ptrType(ast.BranchStmt)) ? [x.go$val, true] : [(go$ptrType(ast.BranchStmt)).nil, false])), b = _tuple[0], isBranchStmt = _tuple[1];
		return isBranchStmt && (b.Tok === 69);
	};
	hasBreakVisitor.Ptr.prototype.Visit = function(node) {
		var w, v, n, _ref, _type;
		w = null;
		v = this;
		if (v.hasBreak) {
			w = null;
			return w;
		}
		_ref = node;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BranchStmt))) {
			n = _ref.go$val;
			if ((n.Tok === 61) && n.Label === (go$ptrType(ast.Ident)).nil) {
				v.hasBreak = true;
				w = null;
				return w;
			}
		} else if (_type === (go$ptrType(ast.ForStmt)) || _type === (go$ptrType(ast.RangeStmt)) || _type === (go$ptrType(ast.SwitchStmt)) || _type === (go$ptrType(ast.TypeSwitchStmt)) || _type === (go$ptrType(ast.SelectStmt)) || ast.Expr.implementedBy.indexOf(_type) !== -1) {
			n = _ref;
			w = null;
			return w;
		}
		w = v;
		return w;
	};
	hasBreakVisitor.prototype.Visit = function(node) { return this.go$val.Visit(node); };
	hasCallVisitor.Ptr.prototype.Visit = function(node) {
		var w, v, isCall, _tuple, call, isSig, _tuple$1, x, _entry;
		w = null;
		v = this;
		if (v.hasCall) {
			w = null;
			return w;
		}
		if (_tuple = (node !== null && node.constructor === (go$ptrType(ast.CallExpr)) ? [node.go$val, true] : [(go$ptrType(ast.CallExpr)).nil, false]), call = _tuple[0], isCall = _tuple[1], isCall) {
			if (_tuple$1 = (x = (_entry = v.info.Types[(call.Fun || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : new types.TypeAndValue.Ptr()).Type, (x !== null && x.constructor === (go$ptrType(types.Signature)) ? [x.go$val, true] : [(go$ptrType(types.Signature)).nil, false])), isSig = _tuple$1[1], isSig) {
				v.hasCall = true;
				w = null;
				return w;
			}
		}
		w = v;
		return w;
	};
	hasCallVisitor.prototype.Visit = function(node) { return this.go$val.Visit(node); };
	escapeAnalysis.Ptr.prototype.Visit = function(node) {
		var w, v, n, _ref, _type, _ref$1, _i, _slice, _index, name, _key, _entry, _ref$2, _i$1, _slice$1, _index$1, name$1, _entry$1, def, _key$1, _ref$3, _type$1, _entry$2;
		w = null;
		v = this;
		_ref = node;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.ValueSpec))) {
			n = _ref.go$val;
			_ref$1 = n.Names;
			_i = 0;
			while (_i < _ref$1.length) {
				name = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				_key = (_entry = v.info.Defs[name.go$key()], _entry !== undefined ? _entry.v : null), (v.candidates || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: true };
				_i++;
			}
		} else if (_type === (go$ptrType(ast.AssignStmt))) {
			n = _ref.go$val;
			if (n.Tok === 47) {
				_ref$2 = n.Lhs;
				_i$1 = 0;
				while (_i$1 < _ref$2.length) {
					name$1 = (_slice$1 = _ref$2, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					def = (_entry$1 = v.info.Defs[(name$1 !== null && name$1.constructor === (go$ptrType(ast.Ident)) ? name$1.go$val : go$typeAssertionFailed(name$1, (go$ptrType(ast.Ident)))).go$key()], _entry$1 !== undefined ? _entry$1.v : null);
					if (!(go$interfaceIsEqual(def, null))) {
						_key$1 = def, (v.candidates || go$throwRuntimeError("assignment to entry in nil map"))[(_key$1 || go$interfaceNil).go$key()] = { k: _key$1, v: true };
					}
					_i$1++;
				}
			}
		} else if (_type === (go$ptrType(ast.UnaryExpr))) {
			n = _ref.go$val;
			if (n.Op === 17) {
				_ref$3 = (_entry$2 = v.info.Types[(n.X || go$interfaceNil).go$key()], _entry$2 !== undefined ? _entry$2.v : new types.TypeAndValue.Ptr()).Type.Underlying();
				_type$1 = _ref$3 !== null ? _ref$3.constructor : null;
				if (_type$1 === (go$ptrType(types.Struct)) || _type$1 === (go$ptrType(types.Array))) {
					w = null;
					return w;
				} else {
					w = new escapingObjectCollector.Ptr(v);
					return w;
				}
			}
		} else if (_type === (go$ptrType(ast.FuncLit))) {
			n = _ref.go$val;
			w = new escapingObjectCollector.Ptr(v);
			return w;
		} else if (_type === (go$ptrType(ast.ForStmt)) || _type === (go$ptrType(ast.RangeStmt))) {
			n = _ref;
			w = null;
			return w;
		}
		w = v;
		return w;
	};
	escapeAnalysis.prototype.Visit = function(node) { return this.go$val.Visit(node); };
	escapingObjectCollector.Ptr.prototype.Visit = function(node) {
		var w, v, isIdent, _tuple, id, _entry, obj, _entry$1, _key;
		w = null;
		v = this;
		if (_tuple = (node !== null && node.constructor === (go$ptrType(ast.Ident)) ? [node.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), id = _tuple[0], isIdent = _tuple[1], isIdent) {
			obj = (_entry = v.analysis.info.Uses[id.go$key()], _entry !== undefined ? _entry.v : null);
			if ((_entry$1 = v.analysis.candidates[(obj || go$interfaceNil).go$key()], _entry$1 !== undefined ? _entry$1.v : false)) {
				_key = obj, (v.analysis.escaping || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: true };
			}
		}
		w = v;
		return w;
	};
	escapingObjectCollector.prototype.Visit = function(node) { return this.go$val.Visit(node); };
	Archive.Ptr.prototype.AddDependency = function(path) {
		var a, _ref, _i, _slice, _index, dep;
		a = this;
		_ref = a.Dependencies;
		_i = 0;
		while (_i < _ref.length) {
			dep = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (dep === path) {
				return;
			}
			_i++;
		}
		a.Dependencies = go$append(a.Dependencies, path);
	};
	Archive.prototype.AddDependency = function(path) { return this.go$val.AddDependency(path); };
	Archive.Ptr.prototype.AddDependenciesOf = function(other) {
		var a, _ref, _i, _slice, _index, path;
		a = this;
		_ref = other.Dependencies;
		_i = 0;
		while (_i < _ref.length) {
			path = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			a.AddDependency(path);
			_i++;
		}
	};
	Archive.prototype.AddDependenciesOf = function(other) { return this.go$val.AddDependenciesOf(other); };
	WriteProgramCode = go$pkg.WriteProgramCode = function(pkgs, mainPkgPath, w) {
		var declsByObject, pendingDecls, _ref, _i, _slice, _index, pkg, _ref$1, _i$1, i, _slice$1, _index$1, d, _ref$2, _i$2, _slice$2, _index$2, f, o, _entry, _key, _struct, _slice$3, _index$3, d$1, _ref$3, _i$3, _slice$4, _index$4, _struct$1, o$1, ok, _tuple, _entry$1, decls, _ref$4, _i$4, _slice$5, _index$5, d$2, _ref$5, _i$5, _slice$6, _index$6, f$1, i$1, _slice$7, _index$7, _slice$8, _index$8, _ref$6, _i$6, _slice$9, _index$9, pkg$1, x, allTypeNames, _ref$7, _i$7, _slice$10, _index$10, pkg$2, _entry$2, scope, _ref$8, _i$8, _slice$11, _index$11, name, isTypeName, _tuple$1, x$1, typeName, notUsed, _tuple$2, _entry$3, _ref$9, _i$9, _slice$12, _index$12, t, isInterface, _tuple$3, x$2, in$1, implementedBy, _ref$10, _i$10, _slice$13, _index$13, other, otherType, _ref$11, _type, _key$1, _key$2, _key$3, _key$4, list, _ref$12, _i$11, _keys, _entry$4, ref, target, _ref$13, _ref$14, _i$12, _slice$14, _index$14, pkg$3;
		declsByObject = new Go$Map();
		pendingDecls = (go$sliceType((go$ptrType(Decl)))).nil;
		_ref = pkgs;
		_i = 0;
		while (_i < _ref.length) {
			pkg = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_ref$1 = pkg.Declarations;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				i = _i$1;
				d = (_slice$1 = pkg.Declarations, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				if (d.DceFilters.length === 0) {
					pendingDecls = go$append(pendingDecls, d);
					_i$1++;
					continue;
				}
				_ref$2 = d.DceFilters;
				_i$2 = 0;
				while (_i$2 < _ref$2.length) {
					f = (_slice$2 = _ref$2, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
					o = new Object.Ptr(pkg.ImportPath, f);
					_key = (_struct = o, new Object.Ptr(_struct.PkgPath, _struct.Name)), (declsByObject || go$throwRuntimeError("assignment to entry in nil map"))[(new Object(_key)).go$key()] = { k: _key, v: go$append((_entry = declsByObject[(new Object(o)).go$key()], _entry !== undefined ? _entry.v : (go$sliceType((go$ptrType(Decl)))).nil), d) };
					_i$2++;
				}
				_i$1++;
			}
			_i++;
		}
		while (!((pendingDecls.length === 0))) {
			d$1 = (_slice$3 = pendingDecls, _index$3 = (pendingDecls.length - 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			pendingDecls = go$subslice(pendingDecls, 0, (pendingDecls.length - 1 >> 0));
			_ref$3 = d$1.DceDeps;
			_i$3 = 0;
			while (_i$3 < _ref$3.length) {
				o$1 = (_struct$1 = (_slice$4 = _ref$3, _index$4 = _i$3, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), new Object.Ptr(_struct$1.PkgPath, _struct$1.Name));
				if (_tuple = (_entry$1 = declsByObject[(new Object(o$1)).go$key()], _entry$1 !== undefined ? [_entry$1.v, true] : [(go$sliceType((go$ptrType(Decl)))).nil, false]), decls = _tuple[0], ok = _tuple[1], ok) {
					delete declsByObject[(new Object(o$1)).go$key()];
					_ref$4 = decls;
					_i$4 = 0;
					while (_i$4 < _ref$4.length) {
						d$2 = (_slice$5 = _ref$4, _index$5 = _i$4, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
						_ref$5 = d$2.DceFilters;
						_i$5 = 0;
						while (_i$5 < _ref$5.length) {
							f$1 = (_slice$6 = _ref$5, _index$6 = _i$5, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
							i$1 = _i$5;
							if (f$1 === o$1.Name) {
								_slice$8 = d$2.DceFilters, _index$8 = i$1, (_index$8 >= 0 && _index$8 < _slice$8.length) ? (_slice$8.array[_slice$8.offset + _index$8] = (_slice$7 = d$2.DceFilters, _index$7 = (d$2.DceFilters.length - 1 >> 0), (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"))) : go$throwRuntimeError("index out of range");
								d$2.DceFilters = go$subslice(d$2.DceFilters, 0, (d$2.DceFilters.length - 1 >> 0));
								break;
							}
							_i$5++;
						}
						if (d$2.DceFilters.length === 0) {
							pendingDecls = go$append(pendingDecls, d$2);
						}
						_i$4++;
					}
				}
				_i$3++;
			}
		}
		w.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("\"use strict\";\n(function() {\n\n")));
		w.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes(strings.TrimSpace(prelude))));
		w.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("\n")));
		_ref$6 = pkgs;
		_i$6 = 0;
		while (_i$6 < _ref$6.length) {
			pkg$1 = (_slice$9 = _ref$6, _index$9 = _i$6, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"));
			WritePkgCode(pkg$1, w);
			_i$6++;
		}
		allTypeNames = new (go$sliceType((go$ptrType(types.TypeName))))([(x = types.New("error"), (x !== null && x.constructor === (go$ptrType(types.Named)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Named))))).Obj()]);
		_ref$7 = pkgs;
		_i$7 = 0;
		while (_i$7 < _ref$7.length) {
			pkg$2 = (_slice$10 = _ref$7, _index$10 = _i$7, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"));
			scope = (_entry$2 = typesPackages[pkg$2.ImportPath], _entry$2 !== undefined ? _entry$2.v : (go$ptrType(types.Package)).nil).Scope();
			_ref$8 = scope.Names();
			_i$8 = 0;
			while (_i$8 < _ref$8.length) {
				name = (_slice$11 = _ref$8, _index$11 = _i$8, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range"));
				if (_tuple$1 = (x$1 = scope.Lookup(name), (x$1 !== null && x$1.constructor === (go$ptrType(types.TypeName)) ? [x$1.go$val, true] : [(go$ptrType(types.TypeName)).nil, false])), typeName = _tuple$1[0], isTypeName = _tuple$1[1], isTypeName) {
					if (_tuple$2 = (_entry$3 = declsByObject[(new Object(new Object.Ptr(pkg$2.ImportPath, strings.Replace(name, "_", "-", -1)))).go$key()], _entry$3 !== undefined ? [_entry$3.v, true] : [(go$sliceType((go$ptrType(Decl)))).nil, false]), notUsed = _tuple$2[1], !notUsed) {
						allTypeNames = go$append(allTypeNames, typeName);
					}
				}
				_i$8++;
			}
			_i$7++;
		}
		_ref$9 = allTypeNames;
		_i$9 = 0;
		while (_i$9 < _ref$9.length) {
			t = (_slice$12 = _ref$9, _index$12 = _i$9, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range"));
			if (_tuple$3 = (x$2 = t.object.Type().Underlying(), (x$2 !== null && x$2.constructor === (go$ptrType(types.Interface)) ? [x$2.go$val, true] : [(go$ptrType(types.Interface)).nil, false])), in$1 = _tuple$3[0], isInterface = _tuple$3[1], isInterface) {
				if (in$1.Empty()) {
					_i$9++;
					continue;
				}
				implementedBy = new Go$Map();
				_ref$10 = allTypeNames;
				_i$10 = 0;
				while (_i$10 < _ref$10.length) {
					other = (_slice$13 = _ref$10, _index$13 = _i$10, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range"));
					otherType = other.object.Type();
					_ref$11 = otherType.Underlying();
					_type = _ref$11 !== null ? _ref$11.constructor : null;
					if (_type === (go$ptrType(types.Interface))) {
					} else if (_type === (go$ptrType(types.Struct))) {
						if (types.AssignableTo(otherType, in$1)) {
							_key$1 = fmt.Sprintf("go$packages[\"%s\"].%s", new (go$sliceType(go$emptyInterface))([new Go$String(other.object.Pkg().Path()), new Go$String(other.object.Name())])), (implementedBy || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: true };
						}
						if (types.AssignableTo(types.NewPointer(otherType), in$1)) {
							_key$2 = fmt.Sprintf("go$packages[\"%s\"].%s.Ptr", new (go$sliceType(go$emptyInterface))([new Go$String(other.object.Pkg().Path()), new Go$String(other.object.Name())])), (implementedBy || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: true };
						}
					} else {
						if (types.AssignableTo(otherType, in$1)) {
							_key$3 = fmt.Sprintf("go$packages[\"%s\"].%s", new (go$sliceType(go$emptyInterface))([new Go$String(other.object.Pkg().Path()), new Go$String(other.object.Name())])), (implementedBy || go$throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: true };
						}
						if (types.AssignableTo(types.NewPointer(otherType), in$1)) {
							_key$4 = fmt.Sprintf("go$ptrType(go$packages[\"%s\"].%s)", new (go$sliceType(go$emptyInterface))([new Go$String(other.object.Pkg().Path()), new Go$String(other.object.Name())])), (implementedBy || go$throwRuntimeError("assignment to entry in nil map"))[_key$4] = { k: _key$4, v: true };
						}
					}
					_i$10++;
				}
				list = (go$sliceType(Go$String)).make(0, go$keys(implementedBy).length, function() { return ""; });
				_ref$12 = implementedBy;
				_i$11 = 0;
				_keys = go$keys(_ref$12);
				while (_i$11 < _keys.length) {
					_entry$4 = _ref$12[_keys[_i$11]];
					ref = _entry$4.k;
					list = go$append(list, ref);
					_i$11++;
				}
				sort.Strings(list);
				target = "";
				_ref$13 = t.object.Name();
				if (_ref$13 === "error") {
					target = "go$error";
				} else {
					target = fmt.Sprintf("go$packages[\"%s\"].%s", new (go$sliceType(go$emptyInterface))([new Go$String(t.object.Pkg().Path()), new Go$String(t.object.Name())]));
				}
				fmt.Fprintf(w, "%s.implementedBy = [%s];\n", new (go$sliceType(go$emptyInterface))([new Go$String(target), new Go$String(strings.Join(list, ", "))]));
			}
			_i$9++;
		}
		_ref$14 = pkgs;
		_i$12 = 0;
		while (_i$12 < _ref$14.length) {
			pkg$3 = (_slice$14 = _ref$14, _index$14 = _i$12, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range"));
			w.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("go$packages[\"" + pkg$3.ImportPath + "\"].init();\n")));
			_i$12++;
		}
		w.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("go$packages[\"" + mainPkgPath + "\"].main();\n\n})();")));
	};
	WritePkgCode = go$pkg.WritePkgCode = function(pkg, w) {
		var vars, _ref, _i, _slice, _index, _struct, imp, _ref$1, _i$1, _slice$1, _index$1, _struct$1, d, _ref$2, _i$2, _slice$2, _index$2, _struct$2, d$1, _ref$3, _i$3, _slice$3, _index$3, _struct$3, d$2;
		fmt.Fprintf(w, "go$packages[\"%s\"] = (function() {\n", new (go$sliceType(go$emptyInterface))([new Go$String(pkg.ImportPath)]));
		vars = new (go$sliceType(Go$String))(["go$pkg = {}"]);
		_ref = pkg.Imports;
		_i = 0;
		while (_i < _ref.length) {
			imp = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new Import.Ptr(_struct.Path, _struct.VarName));
			vars = go$append(vars, fmt.Sprintf("%s = go$packages[\"%s\"]", new (go$sliceType(go$emptyInterface))([new Go$String(imp.VarName), new Go$String(imp.Path)])));
			_i++;
		}
		_ref$1 = pkg.Declarations;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			d = (_struct$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new Decl.Ptr(_struct$1.Var, _struct$1.BodyCode, _struct$1.InitCode, _struct$1.DceFilters, _struct$1.DceDeps));
			if ((d.DceFilters.length === 0) && !(d.Var === "")) {
				vars = go$append(vars, d.Var);
			}
			_i$1++;
		}
		if (!((vars.length === 0))) {
			fmt.Fprintf(w, "\tvar %s;\n", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Join(vars, ", "))]));
		}
		_ref$2 = pkg.Declarations;
		_i$2 = 0;
		while (_i$2 < _ref$2.length) {
			d$1 = (_struct$2 = (_slice$2 = _ref$2, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), new Decl.Ptr(_struct$2.Var, _struct$2.BodyCode, _struct$2.InitCode, _struct$2.DceFilters, _struct$2.DceDeps));
			if (d$1.DceFilters.length === 0) {
				w.Write(d$1.BodyCode);
			}
			_i$2++;
		}
		w.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("\tgo$pkg.init = function() {\n")));
		_ref$3 = pkg.Declarations;
		_i$3 = 0;
		while (_i$3 < _ref$3.length) {
			d$2 = (_struct$3 = (_slice$3 = _ref$3, _index$3 = _i$3, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), new Decl.Ptr(_struct$3.Var, _struct$3.BodyCode, _struct$3.InitCode, _struct$3.DceFilters, _struct$3.DceDeps));
			if (d$2.DceFilters.length === 0) {
				w.Write(d$2.InitCode);
			}
			_i$3++;
		}
		w.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes("\t}\n\treturn go$pkg;\n})();\n")));
	};
	ReadArchive = go$pkg.ReadArchive = function(filename, id, data) {
		var a, _tuple, err, _tuple$1, pkg, _key;
		a = new Archive.Ptr();
		_tuple = asn1.Unmarshal(data, a), err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Archive)).nil, err];
		}
		_tuple$1 = gcimporter.ImportData(typesPackages, filename, id, bytes.NewReader(a.GcData)), pkg = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Archive)).nil, err];
		}
		_key = pkg.Path(), (typesPackages || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: pkg };
		return [a, null];
	};
	pkgContext.Ptr.prototype.translateArgs = function(sig, args, ellipsis) {
		var c, params, _ref, _i, i, x, varargType, varargs, _ref$1, _i$1, _slice, _index, arg, j, _slice$1, _index$1, _slice$2, _index$2, argType, _slice$3, _index$3, _slice$4, _index$4;
		c = this;
		params = (go$sliceType(Go$String)).make(sig.Params().Len(), 0, function() { return ""; });
		_ref = params;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			if (sig.Variadic() && (i === (params.length - 1 >> 0)) && !ellipsis) {
				varargType = (x = sig.Params().At(i).object.Type(), (x !== null && x.constructor === (go$ptrType(types.Slice)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Slice)))));
				varargs = (go$sliceType(Go$String)).make(args.length - i >> 0, 0, function() { return ""; });
				_ref$1 = go$subslice(args, i);
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					arg = (_slice = _ref$1, _index = _i$1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					j = _i$1;
					_slice$1 = varargs, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = c.translateImplicitConversion(arg, varargType.Elem()).String()) : go$throwRuntimeError("index out of range");
					_i$1++;
				}
				_slice$2 = params, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = fmt.Sprintf("new %s([%s])", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(varargType)), new Go$String(strings.Join(varargs, ", "))]))) : go$throwRuntimeError("index out of range");
				break;
			}
			argType = sig.Params().At(i).object.Type();
			_slice$4 = params, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = c.translateImplicitConversion((_slice$3 = args, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), argType).String()) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return strings.Join(params, ", ");
	};
	pkgContext.prototype.translateArgs = function(sig, args, ellipsis) { return this.go$val.translateArgs(sig, args, ellipsis); };
	pkgContext.Ptr.prototype.translateSelection = function(sel) {
		var fields, jsTag, c, t, _ref, _i, _slice, _index, index, isPtr, _tuple, ptr, x, s, i;
		fields = (go$sliceType(Go$String)).nil;
		jsTag = "";
		c = this;
		t = sel.Recv();
		_ref = sel.Index();
		_i = 0;
		while (_i < _ref.length) {
			index = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (_tuple = (t !== null && t.constructor === (go$ptrType(types.Pointer)) ? [t.go$val, true] : [(go$ptrType(types.Pointer)).nil, false]), ptr = _tuple[0], isPtr = _tuple[1], isPtr) {
				t = ptr.Elem();
			}
			s = (x = t.Underlying(), (x !== null && x.constructor === (go$ptrType(types.Struct)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Struct)))));
			if (jsTag = getJsTag(s.Tag(index)), !(jsTag === "")) {
				i = 0;
				while (i < s.NumFields()) {
					if (isJsObject(s.Field(i).object.Type())) {
						fields = go$append(fields, fieldName(s, i));
						return [fields, jsTag];
					}
					i = i + 1 >> 0;
				}
			}
			fields = go$append(fields, fieldName(s, index));
			t = s.Field(index).object.Type();
			_i++;
		}
		return [fields, jsTag];
	};
	pkgContext.prototype.translateSelection = function(sel) { return this.go$val.translateSelection(sel); };
	pkgContext.Ptr.prototype.zeroValue = function(ty) {
		var c, t, _ref, _type, isNamed, _tuple, named, fields, _ref$1, _i, i, _slice, _index;
		c = this;
		_ref = ty.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Basic))) {
			t = _ref.go$val;
			if (is64Bit(t) || !(((t.Info() & 16) === 0))) {
				return fmt.Sprintf("new %s(0, 0)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(ty))]));
			} else if (!(((t.Info() & 1) === 0))) {
				return "false";
			} else if (!(((t.Info() & 26) === 0)) || t.Kind() === 18) {
				return "0";
			} else if (!(((t.Info() & 32) === 0))) {
				return "\"\"";
			} else if (t.Kind() === 25) {
				throw go$panic(new Go$String("Zero value for untyped nil."));
			} else {
				throw go$panic(new Go$String("Unhandled type"));
			}
		} else if (_type === (go$ptrType(types.Array))) {
			t = _ref.go$val;
			return fmt.Sprintf("go$makeNativeArray(\"%s\", %d, function() { return %s; })", new (go$sliceType(go$emptyInterface))([new Go$String(typeKind(t.Elem())), t.Len(), new Go$String(c.zeroValue(t.Elem()))]));
		} else if (_type === (go$ptrType(types.Signature))) {
			t = _ref.go$val;
			return "go$throwNilPointerError";
		} else if (_type === (go$ptrType(types.Slice))) {
			t = _ref.go$val;
			return fmt.Sprintf("%s.nil", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(ty))]));
		} else if (_type === (go$ptrType(types.Struct))) {
			t = _ref.go$val;
			if (_tuple = (ty !== null && ty.constructor === (go$ptrType(types.Named)) ? [ty.go$val, true] : [(go$ptrType(types.Named)).nil, false]), named = _tuple[0], isNamed = _tuple[1], isNamed) {
				return fmt.Sprintf("new %s.Ptr()", new (go$sliceType(go$emptyInterface))([new Go$String(c.objectName(named.Obj()))]));
			}
			fields = (go$sliceType(Go$String)).make(t.NumFields(), 0, function() { return ""; });
			_ref$1 = fields;
			_i = 0;
			while (_i < _ref$1.length) {
				i = _i;
				_slice = fields, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = c.zeroValue(t.Field(i).object.Type())) : go$throwRuntimeError("index out of range");
				_i++;
			}
			return fmt.Sprintf("new %s.Ptr(%s)", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(ty)), new Go$String(strings.Join(fields, ", "))]));
		} else if (_type === (go$ptrType(types.Map))) {
			t = _ref.go$val;
			return "false";
		} else if (_type === (go$ptrType(types.Interface))) {
			t = _ref.go$val;
			return "null";
		}
		return fmt.Sprintf("%s.nil", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(ty))]));
	};
	pkgContext.prototype.zeroValue = function(ty) { return this.go$val.zeroValue(ty); };
	pkgContext.Ptr.prototype.newVariable = function(name) {
		var c, _ref, _i, _slice, _index, b, _entry, n, _key;
		c = this;
		if (name === "") {
			throw go$panic(new Go$String("newVariable: empty name"));
		}
		_ref = new (go$sliceType(Go$Uint8))(go$stringToBytes(name));
		_i = 0;
		while (_i < _ref.length) {
			b = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (b < 48 || b > 122) {
				name = "nonAsciiName";
				break;
			}
			_i++;
		}
		if (strings.HasPrefix(name, "dollar_")) {
			name = "$" + name.substring(7);
		}
		n = (_entry = c.f.allVars[name], _entry !== undefined ? _entry.v : 0);
		_key = name, (c.f.allVars || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: n + 1 >> 0 };
		if (n > 0) {
			name = fmt.Sprintf("%s$%d", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$Int(n)]));
		}
		c.f.localVars = go$append(c.f.localVars, name);
		return name;
	};
	pkgContext.prototype.newVariable = function(name) { return this.go$val.newVariable(name); };
	pkgContext.Ptr.prototype.newIdent = function(name, t) {
		var c, ident, _key, obj, _key$1, _key$2;
		c = this;
		ident = ast.NewIdent(name);
		_key = ident, (c.info.Types || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: new types.TypeAndValue.Ptr(t, null) };
		obj = types.NewVar(0, c.pkg, name, t);
		_key$1 = ident, (c.info.Uses || go$throwRuntimeError("assignment to entry in nil map"))[_key$1.go$key()] = { k: _key$1, v: obj };
		_key$2 = obj, (c.objectVars || go$throwRuntimeError("assignment to entry in nil map"))[(_key$2 || go$interfaceNil).go$key()] = { k: _key$2, v: name };
		return ident;
	};
	pkgContext.prototype.newIdent = function(name, t) { return this.go$val.newIdent(name, t); };
	pkgContext.Ptr.prototype.objectName = function(o) {
		var c, _key, _tuple, _entry, pkgVar, found, _tuple$1, _entry$1, name, found$1, _key$1, _ref, _type;
		c = this;
		if (!(o.Pkg() === c.pkg) || o.Parent() === c.pkg.Scope()) {
			_key = o, (c.dependencies || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: true };
		}
		if (!(o.Pkg() === c.pkg)) {
			_tuple = (_entry = c.pkgVars[o.Pkg().Path()], _entry !== undefined ? [_entry.v, true] : ["", false]), pkgVar = _tuple[0], found = _tuple[1];
			if (!found) {
				pkgVar = fmt.Sprintf("go$packages[\"%s\"]", new (go$sliceType(go$emptyInterface))([new Go$String(o.Pkg().Path())]));
			}
			return pkgVar + "." + o.Name();
		}
		_tuple$1 = (_entry$1 = c.objectVars[(o || go$interfaceNil).go$key()], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]), name = _tuple$1[0], found$1 = _tuple$1[1];
		if (!found$1) {
			name = c.newVariable(o.Name());
			_key$1 = o, (c.objectVars || go$throwRuntimeError("assignment to entry in nil map"))[(_key$1 || go$interfaceNil).go$key()] = { k: _key$1, v: name };
		}
		_ref = o;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Var)) || _type === (go$ptrType(types.Const))) {
			if (o.Exported() && o.Parent() === c.pkg.Scope()) {
				return "go$pkg." + name;
			}
		}
		return name;
	};
	pkgContext.prototype.objectName = function(o) { return this.go$val.objectName(o); };
	pkgContext.Ptr.prototype.typeName = function(ty) {
		var c, t, _ref, _type, _ref$1;
		c = this;
		_ref = ty;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Basic))) {
			t = _ref.go$val;
			_ref$1 = t.Kind();
			if (_ref$1 === 25) {
				return "null";
			} else if (_ref$1 === 18) {
				return "Go$UnsafePointer";
			} else {
				return "Go$" + toJavaScriptType(t);
			}
		} else if (_type === (go$ptrType(types.Named))) {
			t = _ref.go$val;
			if (t.Obj().object.Name() === "error") {
				return "go$error";
			}
			return c.objectName(t.Obj());
		} else if (_type === (go$ptrType(types.Pointer))) {
			t = _ref.go$val;
			return fmt.Sprintf("(go$ptrType(%s))", new (go$sliceType(go$emptyInterface))([new Go$String(c.initArgs(t))]));
		} else if (_type === (go$ptrType(types.Interface))) {
			t = _ref.go$val;
			if (t.Empty()) {
				return "go$emptyInterface";
			}
			return fmt.Sprintf("(go$interfaceType(%s))", new (go$sliceType(go$emptyInterface))([new Go$String(c.initArgs(t))]));
		} else if (_type === (go$ptrType(types.Array)) || _type === (go$ptrType(types.Chan)) || _type === (go$ptrType(types.Slice)) || _type === (go$ptrType(types.Map)) || _type === (go$ptrType(types.Signature)) || _type === (go$ptrType(types.Struct))) {
			t = _ref;
			return fmt.Sprintf("(go$%sType(%s))", new (go$sliceType(go$emptyInterface))([new Go$String(strings.ToLower(typeKind(t))), new Go$String(c.initArgs(t))]));
		} else {
			t = _ref;
			throw go$panic(new Go$String(fmt.Sprintf("Unhandled type: %T\n", new (go$sliceType(go$emptyInterface))([t]))));
		}
	};
	pkgContext.prototype.typeName = function(ty) { return this.go$val.typeName(ty); };
	pkgContext.Ptr.prototype.makeKey = function(expr, keyType) {
		var c, t, _ref, _type;
		c = this;
		_ref = keyType.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Array)) || _type === (go$ptrType(types.Struct))) {
			t = _ref;
			return fmt.Sprintf("(new %s(%s)).go$key()", new (go$sliceType(go$emptyInterface))([new Go$String(c.typeName(keyType)), c.translateExpr(expr)]));
		} else if (_type === (go$ptrType(types.Basic))) {
			t = _ref.go$val;
			if (is64Bit(t)) {
				return fmt.Sprintf("%s.go$key()", new (go$sliceType(go$emptyInterface))([c.translateExpr(expr)]));
			}
			if (!(((t.Info() & 8) === 0))) {
				return fmt.Sprintf("go$floatKey(%s)", new (go$sliceType(go$emptyInterface))([c.translateExpr(expr)]));
			}
			return c.translateImplicitConversion(expr, keyType).String();
		} else if (_type === (go$ptrType(types.Chan)) || _type === (go$ptrType(types.Pointer))) {
			t = _ref;
			return fmt.Sprintf("%s.go$key()", new (go$sliceType(go$emptyInterface))([c.translateImplicitConversion(expr, keyType)]));
		} else if (_type === (go$ptrType(types.Interface))) {
			t = _ref.go$val;
			return fmt.Sprintf("(%s || go$interfaceNil).go$key()", new (go$sliceType(go$emptyInterface))([c.translateImplicitConversion(expr, keyType)]));
		} else {
			t = _ref;
			return c.translateImplicitConversion(expr, keyType).String();
		}
	};
	pkgContext.prototype.makeKey = function(expr, keyType) { return this.go$val.makeKey(expr, keyType); };
	pkgContext.Ptr.prototype.typeArray = function(t) {
		var c, s, _ref, _i, i, _slice, _index;
		c = this;
		s = (go$sliceType(Go$String)).make(t.Len(), 0, function() { return ""; });
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = c.typeName(t.At(i).object.Type())) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return "[" + strings.Join(s, ", ") + "]";
	};
	pkgContext.prototype.typeArray = function(t) { return this.go$val.typeArray(t); };
	pkgContext.Ptr.prototype.externalize = function(s, t) {
		var c, u, _ref, _type;
		c = this;
		if (isJsObject(t)) {
			return s;
		}
		_ref = t.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Basic))) {
			u = _ref.go$val;
			if (!(((u.Info() & 26) === 0)) && !is64Bit(u) && ((u.Info() & 16) === 0)) {
				return s;
			}
			if (u.Kind() === 25) {
				return "null";
			}
		}
		return fmt.Sprintf("go$externalize(%s, %s)", new (go$sliceType(go$emptyInterface))([new Go$String(s), new Go$String(c.typeName(t))]));
	};
	pkgContext.prototype.externalize = function(s, t) { return this.go$val.externalize(s, t); };
	fieldName = function(t, i) {
		var name, _entry;
		name = t.Field(i).object.Name();
		if (name === "_" || (_entry = reservedKeywords[name], _entry !== undefined ? _entry.v : false)) {
			return fmt.Sprintf("%s$%d", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$Int(i)]));
		}
		return name;
	};
	typeKind = function(ty) {
		var t, _ref, _type;
		_ref = ty.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Basic))) {
			t = _ref.go$val;
			return toJavaScriptType(t);
		} else if (_type === (go$ptrType(types.Array))) {
			t = _ref.go$val;
			return "Array";
		} else if (_type === (go$ptrType(types.Chan))) {
			t = _ref.go$val;
			return "Chan";
		} else if (_type === (go$ptrType(types.Interface))) {
			t = _ref.go$val;
			return "Interface";
		} else if (_type === (go$ptrType(types.Map))) {
			t = _ref.go$val;
			return "Map";
		} else if (_type === (go$ptrType(types.Signature))) {
			t = _ref.go$val;
			return "Func";
		} else if (_type === (go$ptrType(types.Slice))) {
			t = _ref.go$val;
			return "Slice";
		} else if (_type === (go$ptrType(types.Struct))) {
			t = _ref.go$val;
			return "Struct";
		} else if (_type === (go$ptrType(types.Pointer))) {
			t = _ref.go$val;
			return "Ptr";
		} else {
			t = _ref;
			throw go$panic(new Go$String(fmt.Sprintf("Unhandled type: %T\n", new (go$sliceType(go$emptyInterface))([t]))));
		}
	};
	toJavaScriptType = function(t) {
		var _ref, name;
		_ref = t.Kind();
		if (_ref === 20) {
			return "Int";
		} else if (_ref === 8) {
			return "Uint8";
		} else if (_ref === 5) {
			return "Int32";
		} else if (_ref === 18) {
			return "UnsafePointer";
		} else {
			name = t.String();
			return strings.ToUpper(name.substring(0, 1)) + name.substring(1);
		}
	};
	is64Bit = function(t) {
		return (t.Kind() === 6) || (t.Kind() === 11);
	};
	isBlank = function(expr) {
		var isIdent, _tuple, id;
		if (go$interfaceIsEqual(expr, null)) {
			return true;
		}
		if (_tuple = (expr !== null && expr.constructor === (go$ptrType(ast.Ident)) ? [expr.go$val, true] : [(go$ptrType(ast.Ident)).nil, false]), id = _tuple[0], isIdent = _tuple[1], isIdent) {
			return id.Name === "_";
		}
		return false;
	};
	isWrapped = function(ty) {
		var t, _ref, _type, _tuple, x, isArray;
		_ref = ty.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Basic))) {
			t = _ref.go$val;
			return !is64Bit(t) && ((t.Info() & 16) === 0) && !((t.Kind() === 25));
		} else if (_type === (go$ptrType(types.Array)) || _type === (go$ptrType(types.Map)) || _type === (go$ptrType(types.Signature))) {
			t = _ref;
			return true;
		} else if (_type === (go$ptrType(types.Pointer))) {
			t = _ref.go$val;
			_tuple = (x = t.Elem().Underlying(), (x !== null && x.constructor === (go$ptrType(types.Array)) ? [x.go$val, true] : [(go$ptrType(types.Array)).nil, false])), isArray = _tuple[1];
			return isArray;
		}
		return false;
	};
	elemType = function(ty) {
		var t, _ref, _type, x;
		_ref = ty.Underlying();
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(types.Array))) {
			t = _ref.go$val;
			return t.Elem();
		} else if (_type === (go$ptrType(types.Slice))) {
			t = _ref.go$val;
			return t.Elem();
		} else if (_type === (go$ptrType(types.Pointer))) {
			t = _ref.go$val;
			return (x = t.Elem().Underlying(), (x !== null && x.constructor === (go$ptrType(types.Array)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(types.Array))))).Elem();
		} else {
			t = _ref;
			throw go$panic(new Go$String(""));
		}
	};
	encodeString = function(s) {
		var buffer, _ref, _i, _slice, _index, r, _ref$1;
		buffer = bytes.NewBuffer((go$sliceType(Go$Uint8)).nil);
		_ref = new (go$sliceType(Go$Uint8))(go$stringToBytes(s));
		_i = 0;
		while (_i < _ref.length) {
			r = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_ref$1 = r;
			if (_ref$1 === 8) {
				buffer.WriteString("\\b");
			} else if (_ref$1 === 12) {
				buffer.WriteString("\\f");
			} else if (_ref$1 === 10) {
				buffer.WriteString("\\n");
			} else if (_ref$1 === 13) {
				buffer.WriteString("\\r");
			} else if (_ref$1 === 9) {
				buffer.WriteString("\\t");
			} else if (_ref$1 === 11) {
				buffer.WriteString("\\v");
			} else if (_ref$1 === 34) {
				buffer.WriteString("\\\"");
			} else if (_ref$1 === 92) {
				buffer.WriteString("\\\\");
			} else {
				if (r < 32 || r > 126) {
					fmt.Fprintf(buffer, "\\x%02X", new (go$sliceType(go$emptyInterface))([new Go$Uint8(r)]));
					_i++;
					continue;
				}
				buffer.WriteByte(r);
			}
			_i++;
		}
		return "\"" + buffer.String() + "\"";
	};
	isJsObject = function(t) {
		var _tuple, named, isNamed;
		_tuple = (t !== null && t.constructor === (go$ptrType(types.Named)) ? [t.go$val, true] : [(go$ptrType(types.Named)).nil, false]), named = _tuple[0], isNamed = _tuple[1];
		return isNamed && named.Obj().object.Pkg().Path() === "github.com/gopherjs/gopherjs/js" && named.Obj().object.Name() === "Object";
	};
	getJsTag = function(tag) {
		var i, name, qvalue, _tuple, value;
		while (!(tag === "")) {
			i = 0;
			while (i < tag.length && (tag.charCodeAt(i) === 32)) {
				i = i + 1 >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34))) {
				i = i + 1 >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (i < tag.length && !((tag.charCodeAt(i) === 34))) {
				if (tag.charCodeAt(i) === 92) {
					i = i + 1 >> 0;
				}
				i = i + 1 >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (name === "js") {
				_tuple = strconv.Unquote(qvalue), value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	go$pkg.init = function() {
		expression.init([["str", "github.com/gopherjs/gopherjs/translator", Go$String, ""], ["parens", "github.com/gopherjs/gopherjs/translator", Go$Bool, ""]]);
		(go$ptrType(expression)).methods = [["String", "", [], [Go$String], false], ["StringWithParens", "", [], [Go$String], false]];
		ErrorList.init(go$error);
		ErrorList.methods = [["Error", "", [], [Go$String], false]];
		(go$ptrType(ErrorList)).methods = [["Error", "", [], [Go$String], false]];
		pkgContext.init([["pkg", "github.com/gopherjs/gopherjs/translator", (go$ptrType(types.Package)), ""], ["info", "github.com/gopherjs/gopherjs/translator", (go$ptrType(types.Info)), ""], ["pkgVars", "github.com/gopherjs/gopherjs/translator", (go$mapType(Go$String, Go$String)), ""], ["objectVars", "github.com/gopherjs/gopherjs/translator", (go$mapType(types.Object, Go$String)), ""], ["output", "github.com/gopherjs/gopherjs/translator", (go$sliceType(Go$Uint8)), ""], ["delayedOutput", "github.com/gopherjs/gopherjs/translator", (go$sliceType(Go$Uint8)), ""], ["indentation", "github.com/gopherjs/gopherjs/translator", Go$Int, ""], ["dependencies", "github.com/gopherjs/gopherjs/translator", (go$mapType(types.Object, Go$Bool)), ""], ["f", "github.com/gopherjs/gopherjs/translator", (go$ptrType(funcContext)), ""]]);
		(go$ptrType(pkgContext)).methods = [["CatchOutput", "", [Go$Int, (go$funcType([], [], false))], [(go$sliceType(Go$Uint8))], false], ["Delayed", "", [(go$funcType([], [], false))], [], false], ["Indent", "", [(go$funcType([], [], false))], [], false], ["PrintCond", "", [Go$Bool, Go$String, Go$String], [], false], ["Printf", "", [Go$String, (go$sliceType(go$emptyInterface))], [], true], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["clone", "github.com/gopherjs/gopherjs/translator", [(go$ptrType(expression)), types.Type], [(go$ptrType(expression))], false], ["externalize", "github.com/gopherjs/gopherjs/translator", [Go$String, types.Type], [Go$String], false], ["fixNumber", "github.com/gopherjs/gopherjs/translator", [(go$ptrType(expression)), (go$ptrType(types.Basic))], [(go$ptrType(expression))], false], ["flatten64", "github.com/gopherjs/gopherjs/translator", [ast.Expr], [(go$ptrType(expression))], false], ["formatExpr", "github.com/gopherjs/gopherjs/translator", [Go$String, (go$sliceType(go$emptyInterface))], [(go$ptrType(expression))], true], ["formatExprInternal", "github.com/gopherjs/gopherjs/translator", [Go$String, (go$sliceType(go$emptyInterface)), Go$Bool], [(go$ptrType(expression))], false], ["formatParenExpr", "github.com/gopherjs/gopherjs/translator", [Go$String, (go$sliceType(go$emptyInterface))], [(go$ptrType(expression))], true], ["identifierConstant", "github.com/gopherjs/gopherjs/translator", [ast.Expr], [Go$String, Go$Bool], false], ["initArgs", "github.com/gopherjs/gopherjs/translator", [types.Type], [Go$String], false], ["initType", "github.com/gopherjs/gopherjs/translator", [types.Object], [], false], ["internalize", "github.com/gopherjs/gopherjs/translator", [(go$ptrType(expression)), types.Type], [(go$ptrType(expression))], false], ["loadStruct", "github.com/gopherjs/gopherjs/translator", [Go$String, Go$String, (go$ptrType(types.Struct))], [Go$String], false], ["makeKey", "github.com/gopherjs/gopherjs/translator", [ast.Expr, types.Type], [Go$String], false], ["newIdent", "github.com/gopherjs/gopherjs/translator", [Go$String, types.Type], [(go$ptrType(ast.Ident))], false], ["newVariable", "github.com/gopherjs/gopherjs/translator", [Go$String], [Go$String], false], ["objectName", "github.com/gopherjs/gopherjs/translator", [types.Object], [Go$String], false], ["printLabel", "github.com/gopherjs/gopherjs/translator", [Go$String], [], false], ["translateArgs", "github.com/gopherjs/gopherjs/translator", [(go$ptrType(types.Signature)), (go$sliceType(ast.Expr)), Go$Bool], [Go$String], false], ["translateAssign", "github.com/gopherjs/gopherjs/translator", [ast.Expr, Go$String], [Go$String], false], ["translateBranchingStmt", "github.com/gopherjs/gopherjs/translator", [(go$sliceType(ast.Stmt)), (go$sliceType(ast.Stmt)), Go$Bool, (go$funcType([ast.Expr], [(go$ptrType(expression))], false)), (go$funcType([(go$sliceType(ast.Expr))], [], false)), Go$String, Go$Bool], [], false], ["translateConversion", "github.com/gopherjs/gopherjs/translator", [ast.Expr, types.Type], [(go$ptrType(expression))], false], ["translateConversionToSlice", "github.com/gopherjs/gopherjs/translator", [ast.Expr, types.Type], [(go$ptrType(expression))], false], ["translateExpr", "github.com/gopherjs/gopherjs/translator", [ast.Expr], [(go$ptrType(expression))], false], ["translateExprSlice", "github.com/gopherjs/gopherjs/translator", [(go$sliceType(ast.Expr)), types.Type], [(go$sliceType(Go$String))], false], ["translateFunction", "github.com/gopherjs/gopherjs/translator", [(go$ptrType(ast.FuncType)), (go$ptrType(types.Signature)), (go$sliceType(ast.Stmt))], [(go$sliceType(Go$String)), (go$sliceType(Go$Uint8))], false], ["translateFunctionBody", "github.com/gopherjs/gopherjs/translator", [Go$Int, (go$sliceType(ast.Stmt))], [(go$sliceType(Go$Uint8))], false], ["translateImplicitConversion", "github.com/gopherjs/gopherjs/translator", [ast.Expr, types.Type], [(go$ptrType(expression))], false], ["translateLoopingStmt", "github.com/gopherjs/gopherjs/translator", [Go$String, Go$String, (go$ptrType(ast.BlockStmt)), (go$funcType([], [], false)), Go$String, Go$Bool], [], false], ["translateSelection", "github.com/gopherjs/gopherjs/translator", [(go$ptrType(types.Selection))], [(go$sliceType(Go$String)), Go$String], false], ["translateSimpleStmt", "github.com/gopherjs/gopherjs/translator", [ast.Stmt], [Go$String], false], ["translateStmt", "github.com/gopherjs/gopherjs/translator", [ast.Stmt, Go$String], [], false], ["translateStmtList", "github.com/gopherjs/gopherjs/translator", [(go$sliceType(ast.Stmt))], [], false], ["translateToplevelFunction", "github.com/gopherjs/gopherjs/translator", [(go$ptrType(ast.FuncDecl)), Go$String], [(go$sliceType(Go$Uint8))], false], ["translateType", "github.com/gopherjs/gopherjs/translator", [(go$ptrType(types.TypeName)), Go$Bool], [], false], ["typeArray", "github.com/gopherjs/gopherjs/translator", [(go$ptrType(types.Tuple))], [Go$String], false], ["typeCheck", "github.com/gopherjs/gopherjs/translator", [Go$String, types.Type], [Go$String], false], ["typeName", "github.com/gopherjs/gopherjs/translator", [types.Type], [Go$String], false], ["zeroValue", "github.com/gopherjs/gopherjs/translator", [types.Type], [Go$String], false]];
		funcContext.init([["sig", "github.com/gopherjs/gopherjs/translator", (go$ptrType(types.Signature)), ""], ["allVars", "github.com/gopherjs/gopherjs/translator", (go$mapType(Go$String, Go$Int)), ""], ["localVars", "github.com/gopherjs/gopherjs/translator", (go$sliceType(Go$String)), ""], ["resultNames", "github.com/gopherjs/gopherjs/translator", (go$sliceType(ast.Expr)), ""], ["flowDatas", "github.com/gopherjs/gopherjs/translator", (go$mapType(Go$String, (go$ptrType(flowData)))), ""], ["escapingVars", "github.com/gopherjs/gopherjs/translator", (go$sliceType(Go$String)), ""], ["flattened", "github.com/gopherjs/gopherjs/translator", Go$Bool, ""], ["caseCounter", "github.com/gopherjs/gopherjs/translator", Go$Int, ""], ["labelCases", "github.com/gopherjs/gopherjs/translator", (go$mapType(Go$String, Go$Int)), ""], ["hasGoto", "github.com/gopherjs/gopherjs/translator", (go$mapType(ast.Node, Go$Bool)), ""]]);
		flowData.init([["postStmt", "github.com/gopherjs/gopherjs/translator", Go$String, ""], ["beginCase", "github.com/gopherjs/gopherjs/translator", Go$Int, ""], ["endCase", "github.com/gopherjs/gopherjs/translator", Go$Int, ""]]);
		hasDeferVisitor.init([["hasDefer", "github.com/gopherjs/gopherjs/translator", Go$Bool, ""]]);
		(go$ptrType(hasDeferVisitor)).methods = [["Visit", "", [ast.Node], [ast.Visitor], false]];
		gotoVisitor.init([["f", "github.com/gopherjs/gopherjs/translator", (go$ptrType(funcContext)), ""], ["stack", "github.com/gopherjs/gopherjs/translator", (go$sliceType(ast.Node)), ""]]);
		(go$ptrType(gotoVisitor)).methods = [["Visit", "", [ast.Node], [ast.Visitor], false]];
		This.init([["", "", ast.Ident, ""]]);
		(go$ptrType(This)).methods = [["End", "", [], [token.Pos], false], ["IsExported", "", [], [Go$Bool], false], ["Pos", "", [], [token.Pos], false], ["String", "", [], [Go$String], false], ["exprNode", "go/ast", [], [], false]];
		branch.init([["clause", "github.com/gopherjs/gopherjs/translator", (go$ptrType(ast.CaseClause)), ""], ["condition", "github.com/gopherjs/gopherjs/translator", Go$String, ""], ["body", "github.com/gopherjs/gopherjs/translator", (go$sliceType(ast.Stmt)), ""]]);
		hasBreakVisitor.init([["hasBreak", "github.com/gopherjs/gopherjs/translator", Go$Bool, ""]]);
		(go$ptrType(hasBreakVisitor)).methods = [["Visit", "", [ast.Node], [ast.Visitor], false]];
		hasCallVisitor.init([["info", "github.com/gopherjs/gopherjs/translator", (go$ptrType(types.Info)), ""], ["hasCall", "github.com/gopherjs/gopherjs/translator", Go$Bool, ""]]);
		(go$ptrType(hasCallVisitor)).methods = [["Visit", "", [ast.Node], [ast.Visitor], false]];
		escapeAnalysis.init([["info", "github.com/gopherjs/gopherjs/translator", (go$ptrType(types.Info)), ""], ["candidates", "github.com/gopherjs/gopherjs/translator", (go$mapType(types.Object, Go$Bool)), ""], ["escaping", "github.com/gopherjs/gopherjs/translator", (go$mapType(types.Object, Go$Bool)), ""]]);
		(go$ptrType(escapeAnalysis)).methods = [["Visit", "", [ast.Node], [ast.Visitor], false]];
		escapingObjectCollector.init([["analysis", "github.com/gopherjs/gopherjs/translator", (go$ptrType(escapeAnalysis)), ""]]);
		(go$ptrType(escapingObjectCollector)).methods = [["Visit", "", [ast.Node], [ast.Visitor], false]];
		Archive.init([["ImportPath", "", Go$String, ""], ["GcData", "", (go$sliceType(Go$Uint8)), ""], ["Dependencies", "", (go$sliceType(Go$String)), ""], ["Imports", "", (go$sliceType(Import)), ""], ["Declarations", "", (go$sliceType(Decl)), ""], ["Tests", "", (go$sliceType(Go$String)), ""]]);
		(go$ptrType(Archive)).methods = [["AddDependenciesOf", "", [(go$ptrType(Archive))], [], false], ["AddDependency", "", [Go$String], [], false]];
		Import.init([["Path", "", Go$String, ""], ["VarName", "", Go$String, ""]]);
		Decl.init([["Var", "", Go$String, ""], ["BodyCode", "", (go$sliceType(Go$Uint8)), ""], ["InitCode", "", (go$sliceType(Go$Uint8)), ""], ["DceFilters", "", (go$sliceType(Go$String)), ""], ["DceDeps", "", (go$sliceType(Object)), ""]]);
		Object.init([["PkgPath", "", Go$String, ""], ["Name", "", Go$String, ""]]);
		pkgNatives = new Go$Map();
		reservedKeywords = new Go$Map();
		prelude = "\nError.stackTraceLimit = -1;\n\nvar go$reservedKeywords = [\"abstract\", \"arguments\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"eval\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"throws\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\"];\n\nvar go$global;\nif (typeof window !== \"undefined\") {\n\tgo$global = window;\n} else if (typeof GLOBAL !== \"undefined\") {\n\tgo$global = GLOBAL;\n}\n\nvar go$idCounter = 0;\nvar go$keys = function(m) { return m ? Object.keys(m) : []; };\nvar go$min = Math.min;\nvar go$parseInt = parseInt;\nvar go$parseFloat = parseFloat;\nvar go$toString = String;\nvar go$reflect, go$newStringPtr;\nvar Go$Array = Array;\nvar Go$Error = Error;\n\nvar go$floatKey = function(f) {\n\tif (f !== f) {\n\t\tgo$idCounter++;\n\t\treturn \"NaN$\" + go$idCounter;\n\t}\n\treturn String(f);\n};\n\nvar go$mapArray = function(array, f) {\n\tvar newArray = new array.constructor(array.length), i;\n\tfor (i = 0; i < array.length; i++) {\n\t\tnewArray[i] = f(array[i]);\n\t}\n\treturn newArray;\n};\n\nvar go$newType = function(size, kind, string, name, pkgPath, constructor) {\n\tvar typ;\n\tswitch(kind) {\n\tcase \"Bool\":\n\tcase \"Int\":\n\tcase \"Int8\":\n\tcase \"Int16\":\n\tcase \"Int32\":\n\tcase \"Uint\":\n\tcase \"Uint8\" :\n\tcase \"Uint16\":\n\tcase \"Uint32\":\n\tcase \"Uintptr\":\n\tcase \"String\":\n\tcase \"UnsafePointer\":\n\t\ttyp = function(v) { this.go$val = v; };\n\t\ttyp.prototype.go$key = function() { return string + \"$\" + this.go$val; };\n\t\tbreak;\n\n\tcase \"Float32\":\n\tcase \"Float64\":\n\t\ttyp = function(v) { this.go$val = v; };\n\t\ttyp.prototype.go$key = function() { return string + \"$\" + go$floatKey(this.go$val); };\n\t\tbreak;\n\n\tcase \"Int64\":\n\t\ttyp = function(high, low) {\n\t\t\tthis.high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;\n\t\t\tthis.low = low >>> 0;\n\t\t\tthis.go$val = this;\n\t\t};\n\t\ttyp.prototype.go$key = function() { return string + \"$\" + this.high + \"$\" + this.low; };\n\t\tbreak;\n\n\tcase \"Uint64\":\n\t\ttyp = function(high, low) {\n\t\t\tthis.high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;\n\t\t\tthis.low = low >>> 0;\n\t\t\tthis.go$val = this;\n\t\t};\n\t\ttyp.prototype.go$key = function() { return string + \"$\" + this.high + \"$\" + this.low; };\n\t\tbreak;\n\n\tcase \"Complex64\":\n\tcase \"Complex128\":\n\t\ttyp = function(real, imag) {\n\t\t\tthis.real = real;\n\t\t\tthis.imag = imag;\n\t\t\tthis.go$val = this;\n\t\t};\n\t\ttyp.prototype.go$key = function() { return string + \"$\" + this.real + \"$\" + this.imag; };\n\t\tbreak;\n\n\tcase \"Array\":\n\t\ttyp = function(v) { this.go$val = v; };\n\t\ttyp.Ptr = go$newType(4, \"Ptr\", \"*\" + string, \"\", \"\", function(array) {\n\t\t\tthis.go$get = function() { return array; };\n\t\t\tthis.go$val = array;\n\t\t});\n\t\ttyp.init = function(elem, len) {\n\t\t\ttyp.elem = elem;\n\t\t\ttyp.len = len;\n\t\t\ttyp.prototype.go$key = function() {\n\t\t\t\treturn string + \"$\" + go$mapArray(this.go$val, function(e) {\n\t\t\t\t\tvar key = e.go$key ? e.go$key() : String(e);\n\t\t\t\t\treturn key.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\$/g, \"\\\\$\");\n\t\t\t\t}).join(\"$\");\n\t\t\t};\n\t\t\ttyp.extendReflectType = function(rt) {\n\t\t\t\trt.arrayType = new go$reflect.arrayType(rt, elem.reflectType(), undefined, len);\n\t\t\t};\n\t\t\ttyp.Ptr.init(typ);\n\t\t};\n\t\tbreak;\n\n\tcase \"Chan\":\n\t\ttyp = function() { this.go$val = this; };\n\t\ttyp.prototype.go$key = function() {\n\t\t\tif (this.go$id === undefined) {\n\t\t\t\tgo$idCounter++;\n\t\t\t\tthis.go$id = go$idCounter;\n\t\t\t}\n\t\t\treturn String(this.go$id);\n\t\t};\n\t\ttyp.init = function(elem, sendOnly, recvOnly) {\n\t\t\ttyp.nil = new typ();\n\t\t\ttyp.extendReflectType = function(rt) {\n\t\t\t\trt.chanType = new go$reflect.chanType(rt, elem.reflectType(), sendOnly ? go$reflect.SendDir : (recvOnly ? go$reflect.RecvDir : go$reflect.BothDir));\n\t\t\t};\n\t\t};\n\t\tbreak;\n\n\tcase \"Func\":\n\t\ttyp = function(v) { this.go$val = v; };\n\t\ttyp.init = function(params, results, variadic) {\n\t\t\ttyp.params = params;\n\t\t\ttyp.results = results;\n\t\t\ttyp.variadic = variadic;\n\t\t\ttyp.extendReflectType = function(rt) {\n\t\t\t\tvar typeSlice = (go$sliceType(go$ptrType(go$reflect.rtype)));\n\t\t\t\trt.funcType = new go$reflect.funcType(rt, variadic, new typeSlice(go$mapArray(params, function(p) { return p.reflectType(); })), new typeSlice(go$mapArray(results, function(p) { return p.reflectType(); })));\n\t\t\t};\n\t\t};\n\t\tbreak;\n\n\tcase \"Interface\":\n\t\ttyp = { implementedBy: [] };\n\t\ttyp.init = function(methods) {\n\t\t\ttyp.extendReflectType = function(rt) {\n\t\t\t\tvar imethods = go$mapArray(methods, function(m) {\n\t\t\t\t\treturn new go$reflect.imethod(go$newStringPtr(m[0]), go$newStringPtr(m[1]), m[2].reflectType());\n\t\t\t\t});\n\t\t\t\tvar methodSlice = (go$sliceType(go$ptrType(go$reflect.imethod)));\n\t\t\t\trt.interfaceType = new go$reflect.interfaceType(rt, new methodSlice(imethods));\n\t\t\t};\n\t\t};\n\t\tbreak;\n\n\tcase \"Map\":\n\t\ttyp = function(v) { this.go$val = v; };\n\t\ttyp.init = function(key, elem) {\n\t\t\ttyp.key = key;\n\t\t\ttyp.elem = elem;\n\t\t\ttyp.extendReflectType = function(rt) {\n\t\t\t\trt.mapType = new go$reflect.mapType(rt, key.reflectType(), elem.reflectType(), undefined, undefined);\n\t\t\t};\n\t\t};\n\t\tbreak;\n\n\tcase \"Ptr\":\n\t\ttyp = constructor || function(getter, setter) {\n\t\t\tthis.go$get = getter;\n\t\t\tthis.go$set = setter;\n\t\t\tthis.go$val = this;\n\t\t};\n\t\ttyp.prototype.go$key = function() {\n\t\t\tif (this.go$id === undefined) {\n\t\t\t\tgo$idCounter++;\n\t\t\t\tthis.go$id = go$idCounter;\n\t\t\t}\n\t\t\treturn String(this.go$id);\n\t\t};\n\t\ttyp.init = function(elem) {\n\t\t\ttyp.nil = new typ(go$throwNilPointerError, go$throwNilPointerError);\n\t\t\ttyp.extendReflectType = function(rt) {\n\t\t\t\trt.ptrType = new go$reflect.ptrType(rt, elem.reflectType());\n\t\t\t};\n\t\t};\n\t\tbreak;\n\n\tcase \"Slice\":\n\t\tvar nativeArray;\n\t\ttyp = function(array) {\n\t\t\tif (array.constructor !== nativeArray) {\n\t\t\t\tarray = new nativeArray(array);\n\t\t\t}\n\t\t\tthis.array = array;\n\t\t\tthis.offset = 0;\n\t\t\tthis.length = array.length;\n\t\t\tthis.capacity = array.length;\n\t\t\tthis.go$val = this;\n\t\t};\n\t\ttyp.make = function(length, capacity, zero) {\n\t\t\tcapacity = capacity || length;\n\t\t\tvar array = new nativeArray(capacity), i;\n\t\t\tfor (i = 0; i < capacity; i++) {\n\t\t\t\tarray[i] = zero();\n\t\t\t}\n\t\t\tvar slice = new typ(array);\n\t\t\tslice.length = length;\n\t\t\treturn slice;\n\t\t};\n\t\ttyp.init = function(elem) {\n\t\t\ttyp.elem = elem;\n\t\t\tnativeArray = go$nativeArray(elem.kind);\n\t\t\ttyp.nil = new typ([]);\n\t\t\ttyp.extendReflectType = function(rt) {\n\t\t\t\trt.sliceType = new go$reflect.sliceType(rt, elem.reflectType());\n\t\t\t};\n\t\t};\n\t\tbreak;\n\n\tcase \"Struct\":\n\t\ttyp = function(v) { this.go$val = v; };\n\t\ttyp.Ptr = go$newType(4, \"Ptr\", \"*\" + string, \"\", \"\", constructor);\n\t\ttyp.Ptr.Struct = typ;\n\t\ttyp.init = function(fields) {\n\t\t\ttyp.Ptr.init(typ);\n\t\t\ttyp.Ptr.nil = new constructor();\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < fields.length; i++) {\n\t\t\t\tvar field = fields[i];\n\t\t\t\tObject.defineProperty(typ.Ptr.nil, field[0], { get: go$throwNilPointerError, set: go$throwNilPointerError });\n\t\t\t}\n\t\t\ttyp.prototype.go$key = function() {\n\t\t\t\tvar keys = new Array(fields.length);\n\t\t\t\tfor (i = 0; i < fields.length; i++) {\n\t\t\t\t\tvar v = this.go$val[go$fieldName(fields, i)];\n\t\t\t\t\tvar key = v.go$key ? v.go$key() : String(v);\n\t\t\t\t\tkeys[i] = key.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\$/g, \"\\\\$\");\n\t\t\t\t}\n\t\t\t\treturn string + \"$\" + keys.join(\"$\");\n\t\t\t};\n\t\t\ttyp.extendReflectType = function(rt) {\n\t\t\t\tvar reflectFields = new Array(fields.length), i;\n\t\t\t\tfor (i = 0; i < fields.length; i++) {\n\t\t\t\t\tvar field = fields[i];\n\t\t\t\t\treflectFields[i] = new go$reflect.structField(go$newStringPtr(field[0]), go$newStringPtr(field[1]), field[2].reflectType(), go$newStringPtr(field[3]), i);\n\t\t\t\t}\n\t\t\t\trt.structType = new go$reflect.structType(rt, new (go$sliceType(go$reflect.structField))(reflectFields));\n\t\t\t};\n\t\t};\n\t\tbreak;\n\n\tdefault:\n\t\tthrow go$panic(new Go$String(\"invalid kind: \" + kind));\n\t}\n\n\ttyp.kind = kind;\n\ttyp.string = string;\n\ttyp.typeName = name;\n\ttyp.pkgPath = pkgPath;\n\tvar rt = null;\n\ttyp.reflectType = function() {\n\t\tif (rt === null) {\n\t\t\trt = new go$reflect.rtype(size, 0, 0, 0, 0, go$reflect.kinds[kind], undefined, undefined, go$newStringPtr(string), undefined, undefined);\n\t\t\trt.jsType = typ;\n\n\t\t\tvar methods = [];\n\t\t\tif (typ.methods !== undefined) {\n\t\t\t\tvar i;\n\t\t\t\tfor (i = 0; i < typ.methods.length; i++) {\n\t\t\t\t\tvar m = typ.methods[i];\n\t\t\t\t\tmethods.push(new go$reflect.method(go$newStringPtr(m[0]), go$newStringPtr(m[1]), go$funcType(m[2], m[3], m[4]).reflectType(), go$funcType([typ].concat(m[2]), m[3], m[4]).reflectType(), undefined, undefined));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (name !== \"\" || methods.length !== 0) {\n\t\t\t\tvar methodSlice = (go$sliceType(go$ptrType(go$reflect.method)));\n\t\t\t\trt.uncommonType = new go$reflect.uncommonType(go$newStringPtr(name), go$newStringPtr(pkgPath), new methodSlice(methods));\n\t\t\t}\n\n\t\t\tif (typ.extendReflectType !== undefined) {\n\t\t\t\ttyp.extendReflectType(rt);\n\t\t\t}\n\t\t}\n\t\treturn rt;\n\t};\n\treturn typ;\n};\n\nvar Go$Bool          = go$newType( 1, \"Bool\",          \"bool\",           \"bool\",       \"\", null);\nvar Go$Int           = go$newType( 4, \"Int\",           \"int\",            \"int\",        \"\", null);\nvar Go$Int8          = go$newType( 1, \"Int8\",          \"int8\",           \"int8\",       \"\", null);\nvar Go$Int16         = go$newType( 2, \"Int16\",         \"int16\",          \"int16\",      \"\", null);\nvar Go$Int32         = go$newType( 4, \"Int32\",         \"int32\",          \"int32\",      \"\", null);\nvar Go$Int64         = go$newType( 8, \"Int64\",         \"int64\",          \"int64\",      \"\", null);\nvar Go$Uint          = go$newType( 4, \"Uint\",          \"uint\",           \"uint\",       \"\", null);\nvar Go$Uint8         = go$newType( 1, \"Uint8\",         \"uint8\",          \"uint8\",      \"\", null);\nvar Go$Uint16        = go$newType( 2, \"Uint16\",        \"uint16\",         \"uint16\",     \"\", null);\nvar Go$Uint32        = go$newType( 4, \"Uint32\",        \"uint32\",         \"uint32\",     \"\", null);\nvar Go$Uint64        = go$newType( 8, \"Uint64\",        \"uint64\",         \"uint64\",     \"\", null);\nvar Go$Uintptr       = go$newType( 4, \"Uintptr\",       \"uintptr\",        \"uintptr\",    \"\", null);\nvar Go$Float32       = go$newType( 4, \"Float32\",       \"float32\",        \"float32\",    \"\", null);\nvar Go$Float64       = go$newType( 8, \"Float64\",       \"float64\",        \"float64\",    \"\", null);\nvar Go$Complex64     = go$newType( 8, \"Complex64\",     \"complex64\",      \"complex64\",  \"\", null);\nvar Go$Complex128    = go$newType(16, \"Complex128\",    \"complex128\",     \"complex128\", \"\", null);\nvar Go$String        = go$newType( 0, \"String\",        \"string\",         \"string\",     \"\", null);\nvar Go$UnsafePointer = go$newType( 4, \"UnsafePointer\", \"unsafe.Pointer\", \"Pointer\",    \"\", null);\n\nvar go$nativeArray = function(elemKind) {\n\treturn ({ Int: Int32Array, Int8: Int8Array, Int16: Int16Array, Int32: Int32Array, Uint: Uint32Array, Uint8: Uint8Array, Uint16: Uint16Array, Uint32: Uint32Array, Uintptr: Uint32Array, Float32: Float32Array, Float64: Float64Array })[elemKind] || Array;\n};\nvar go$toNativeArray = function(elemKind, array) {\n\tvar nativeArray = go$nativeArray(elemKind);\n\tif (nativeArray === Array) {\n\t\treturn array;\n\t}\n\treturn new nativeArray(array);\n};\nvar go$makeNativeArray = function(elemKind, length, zero) {\n\tvar array = new (go$nativeArray(elemKind))(length), i;\n\tfor (i = 0; i < length; i++) {\n\t\tarray[i] = zero();\n\t}\n\treturn array;\n};\nvar go$arrayTypes = {};\nvar go$arrayType = function(elem, len) {\n\tvar string = \"[\" + len + \"]\" + elem.string;\n\tvar typ = go$arrayTypes[string];\n\tif (typ === undefined) {\n\t\ttyp = go$newType(0, \"Array\", string, \"\", \"\", null);\n\t\ttyp.init(elem, len);\n\t\tgo$arrayTypes[string] = typ;\n\t}\n\treturn typ;\n};\n\nvar go$chanType = function(elem, sendOnly, recvOnly) {\n\tvar string = (recvOnly ? \"<-\" : \"\") + \"chan\" + (sendOnly ? \"<- \" : \" \") + elem.string;\n\tvar field = sendOnly ? \"SendChan\" : (recvOnly ? \"RecvChan\" : \"Chan\");\n\tvar typ = elem[field];\n\tif (typ === undefined) {\n\t\ttyp = go$newType(0, \"Chan\", string, \"\", \"\", null);\n\t\ttyp.init(elem, sendOnly, recvOnly);\n\t\telem[field] = typ;\n\t}\n\treturn typ;\n};\n\nvar go$funcTypes = {};\nvar go$funcType = function(params, results, variadic) {\n\tvar paramTypes = go$mapArray(params, function(p) { return p.string; });\n\tif (variadic) {\n\t\tparamTypes[paramTypes.length - 1] = \"...\" + paramTypes[paramTypes.length - 1].substr(2);\n\t}\n\tvar string = \"func(\" + paramTypes.join(\", \") + \")\";\n\tif (results.length === 1) {\n\t\tstring += \" \" + results[0].string;\n\t} else if (results.length > 1) {\n\t\tstring += \" (\" + go$mapArray(results, function(r) { return r.string; }).join(\", \") + \")\";\n\t}\n\tvar typ = go$funcTypes[string];\n\tif (typ === undefined) {\n\t\ttyp = go$newType(0, \"Func\", string, \"\", \"\", null);\n\t\ttyp.init(params, results, variadic);\n\t\tgo$funcTypes[string] = typ;\n\t}\n\treturn typ;\n};\n\nvar go$interfaceTypes = {};\nvar go$interfaceType = function(methods) {\n\tvar string = \"interface {}\";\n\tif (methods.length !== 0) {\n\t\tstring = \"interface { \" + go$mapArray(methods, function(m) {\n\t\t\treturn (m[1] !== \"\" ? m[1] + \".\" : \"\") + m[0] + m[2].string.substr(4);\n\t\t}).join(\"; \") + \" }\";\n\t}\n\tvar typ = go$interfaceTypes[string];\n\tif (typ === undefined) {\n\t\ttyp = go$newType(0, \"Interface\", string, \"\", \"\", null);\n\t\ttyp.init(methods);\n\t\tgo$interfaceTypes[string] = typ;\n\t}\n\treturn typ;\n};\nvar go$emptyInterface = go$interfaceType([]);\nvar go$interfaceNil = { go$key: function() { return \"nil\"; } };\nvar go$error = go$newType(8, \"Interface\", \"error\", \"error\", \"\", null);\ngo$error.init([[\"Error\", \"\", go$funcType([], [Go$String], false)]]);\n\nvar Go$Map = function() {};\n(function() {\n\tvar names = Object.getOwnPropertyNames(Object.prototype), i;\n\tfor (i = 0; i < names.length; i++) {\n\t\tGo$Map.prototype[names[i]] = undefined;\n\t}\n})();\nvar go$mapTypes = {};\nvar go$mapType = function(key, elem) {\n\tvar string = \"map[\" + key.string + \"]\" + elem.string;\n\tvar typ = go$mapTypes[string];\n\tif (typ === undefined) {\n\t\ttyp = go$newType(0, \"Map\", string, \"\", \"\", null);\n\t\ttyp.init(key, elem);\n\t\tgo$mapTypes[string] = typ;\n\t}\n\treturn typ;\n};\n\nvar go$throwNilPointerError = function() { go$throwRuntimeError(\"invalid memory address or nil pointer dereference\"); };\nvar go$ptrType = function(elem) {\n\tvar typ = elem.Ptr;\n\tif (typ === undefined) {\n\t\ttyp = go$newType(0, \"Ptr\", \"*\" + elem.string, \"\", \"\", null);\n\t\ttyp.init(elem);\n\t\telem.Ptr = typ;\n\t}\n\treturn typ;\n};\n\nvar go$sliceType = function(elem) {\n\tvar typ = elem.Slice;\n\tif (typ === undefined) {\n\t\ttyp = go$newType(0, \"Slice\", \"[]\" + elem.string, \"\", \"\", null);\n\t\ttyp.init(elem);\n\t\telem.Slice = typ;\n\t}\n\treturn typ;\n};\n\nvar go$fieldName = function(fields, i) {\n\tvar field = fields[i];\n\tvar name = field[0];\n\tif (name === \"\") {\n\t\tvar ntyp = field[2];\n\t\tif (ntyp.kind === \"Ptr\") {\n\t\t\tntyp = ntyp.elem;\n\t\t}\n\t\treturn ntyp.typeName;\n\t}\n\tif (name === \"_\" || go$reservedKeywords.indexOf(name) != -1) {\n\t\treturn name + \"$\" + i;\n\t}\n\treturn name;\n};\n\nvar go$structTypes = {};\nvar go$structType = function(fields) {\n\tvar string = \"struct { \" + go$mapArray(fields, function(f) {\n\t\treturn f[0] + \" \" + f[2].string + (f[3] !== \"\" ? (' \"' + f[3].replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"') : \"\");\n\t}).join(\"; \") + \" }\";\n\tvar typ = go$structTypes[string];\n\tif (typ === undefined) {\n\t\ttyp = go$newType(0, \"Struct\", string, \"\", \"\", function() {\n\t\t\tthis.go$val = this;\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < fields.length; i++) {\n\t\t\t\tthis[go$fieldName(fields, i)] = arguments[i];\n\t\t\t}\n\t\t});\n\t\ttyp.init(fields);\n\t\tvar i, j;\n\t\tfor (i = 0; i < fields.length; i++) {\n\t\t\tvar field = fields[i];\n\t\t\tif (field[0] === \"\" && field[2].prototype !== undefined) {\n\t\t\t\tvar methods = Object.keys(field[2].prototype);\n\t\t\t\tfor (j = 0; j < methods.length; j++) {\n\t\t\t\t\t(function(fieldName, methodName, method) {\n\t\t\t\t\t\ttyp.prototype[methodName] = function() {\n\t\t\t\t\t\t\treturn method.apply(this.go$val[fieldName], arguments);\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttyp.Ptr.prototype[methodName] = function() {\n\t\t\t\t\t\t\treturn method.apply(this[fieldName], arguments);\n\t\t\t\t\t\t};\n\t\t\t\t\t})(field[0], methods[j], field[2].prototype[methods[j]]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tgo$structTypes[string] = typ;\n\t}\n\treturn typ;\n};\n\nvar go$stringPtrMap = new Go$Map();\ngo$newStringPtr = function(str) {\n\tif (str === undefined || str === \"\") {\n\t\treturn go$ptrType(Go$String).nil;\n\t}\n\tvar ptr = go$stringPtrMap[str];\n\tif (ptr === undefined) {\n\t\tptr = new (go$ptrType(Go$String))(function() { return str; }, function(v) { str = v; });\n\t\tgo$stringPtrMap[str] = ptr;\n\t}\n\treturn ptr;\n};\nvar go$newDataPointer = function(data, constructor) {\n\treturn new constructor(function() { return data; }, function(v) { data = v; });\n};\n\nvar go$ldexp = function(frac, exp) {\n\tif (frac === 0) { return frac; }\n\tif (exp >= 1024) { return frac * Math.pow(2, 1023) * Math.pow(2, exp - 1023); }\n\tif (exp <= -1024) { return frac * Math.pow(2, -1023) * Math.pow(2, exp + 1023); }\n\treturn frac * Math.pow(2, exp);\n};\nvar go$float32bits = function(f) {\n\tvar s, e, r;\n\tif (f === 0) {\n\t\tif (f === 0 && 1 / f === 1 / -0) {\n\t\t\treturn 2147483648;\n\t\t}\n\t\treturn 0;\n\t}\n\tif (f !== f) {\n\t\treturn 2143289344;\n\t}\n\ts = 0;\n\tif (f < 0) {\n\t\ts = 2147483648;\n\t\tf = -f;\n\t}\n\te = 150;\n\twhile (f >= 1.6777216e+07) {\n\t\tf = f / 2;\n\t\tif (e === 255) {\n\t\t\tbreak;\n\t\t}\n\t\te = e + 1 >>> 0;\n\t}\n\twhile (f < 8.388608e+06) {\n\t\te = e - 1 >>> 0;\n\t\tif (e === 0) {\n\t\t\tbreak;\n\t\t}\n\t\tf = f * 2;\n\t}\n\tr = f % 2;\n\tif ((r > 0.5 && r < 1) || r >= 1.5) {\n\t\tf++;\n\t}\n\treturn (((s | (e << 23 >>> 0)) >>> 0) | (((f >> 0) & ~8388608))) >>> 0;\n};\nvar go$float32frombits = function(b) {\n\tvar s, e, m;\n\ts = 1;\n\tif (((b & 2147483648) >>> 0) !== 0) {\n\t\ts = -1;\n\t}\n\te = (((b >>> 23 >>> 0)) & 255) >>> 0;\n\tm = (b & 8388607) >>> 0;\n\tif (e === 255) {\n\t\tif (m === 0) {\n\t\t\treturn s / 0;\n\t\t}\n\t\treturn 0/0;\n\t}\n\tif (e !== 0) {\n\t\tm = m + 8388608 >>> 0;\n\t}\n\tif (e === 0) {\n\t\te = 1;\n\t}\n\treturn go$ldexp(m, e - 127 - 23) * s;\n};\n\nvar go$flatten64 = function(x) {\n\treturn x.high * 4294967296 + x.low;\n};\nvar go$shiftLeft64 = function(x, y) {\n\tif (y === 0) {\n\t\treturn x;\n\t}\n\tif (y < 32) {\n\t\treturn new x.constructor(x.high << y | x.low >>> (32 - y), (x.low << y) >>> 0);\n\t}\n\tif (y < 64) {\n\t\treturn new x.constructor(x.low << (y - 32), 0);\n\t}\n\treturn new x.constructor(0, 0);\n};\nvar go$shiftRightInt64 = function(x, y) {\n\tif (y === 0) {\n\t\treturn x;\n\t}\n\tif (y < 32) {\n\t\treturn new x.constructor(x.high >> y, (x.low >>> y | x.high << (32 - y)) >>> 0);\n\t}\n\tif (y < 64) {\n\t\treturn new x.constructor(x.high >> 31, (x.high >> (y - 32)) >>> 0);\n\t}\n\tif (x.high < 0) {\n\t\treturn new x.constructor(-1, 4294967295);\n\t}\n\treturn new x.constructor(0, 0);\n};\nvar go$shiftRightUint64 = function(x, y) {\n\tif (y === 0) {\n\t\treturn x;\n\t}\n\tif (y < 32) {\n\t\treturn new x.constructor(x.high >>> y, (x.low >>> y | x.high << (32 - y)) >>> 0);\n\t}\n\tif (y < 64) {\n\t\treturn new x.constructor(0, x.high >>> (y - 32));\n\t}\n\treturn new x.constructor(0, 0);\n};\nvar go$mul64 = function(x, y) {\n\tvar high = 0, low = 0, i;\n\tif ((y.low & 1) !== 0) {\n\t\thigh = x.high;\n\t\tlow = x.low;\n\t}\n\tfor (i = 1; i < 32; i++) {\n\t\tif ((y.low & 1<<i) !== 0) {\n\t\t\thigh += x.high << i | x.low >>> (32 - i);\n\t\t\tlow += (x.low << i) >>> 0;\n\t\t}\n\t}\n\tfor (i = 0; i < 32; i++) {\n\t\tif ((y.high & 1<<i) !== 0) {\n\t\t\thigh += x.low << i;\n\t\t}\n\t}\n\treturn new x.constructor(high, low);\n};\nvar go$div64 = function(x, y, returnRemainder) {\n\tif (y.high === 0 && y.low === 0) {\n\t\tgo$throwRuntimeError(\"integer divide by zero\");\n\t}\n\n\tvar s = 1;\n\tvar rs = 1;\n\n\tvar xHigh = x.high;\n\tvar xLow = x.low;\n\tif (xHigh < 0) {\n\t\ts = -1;\n\t\trs = -1;\n\t\txHigh = -xHigh;\n\t\tif (xLow !== 0) {\n\t\t\txHigh--;\n\t\t\txLow = 4294967296 - xLow;\n\t\t}\n\t}\n\n\tvar yHigh = y.high;\n\tvar yLow = y.low;\n\tif (y.high < 0) {\n\t\ts *= -1;\n\t\tyHigh = -yHigh;\n\t\tif (yLow !== 0) {\n\t\t\tyHigh--;\n\t\t\tyLow = 4294967296 - yLow;\n\t\t}\n\t}\n\n\tvar high = 0, low = 0, n = 0, i;\n\twhile (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {\n\t\tyHigh = (yHigh << 1 | yLow >>> 31) >>> 0;\n\t\tyLow = (yLow << 1) >>> 0;\n\t\tn++;\n\t}\n\tfor (i = 0; i <= n; i++) {\n\t\thigh = high << 1 | low >>> 31;\n\t\tlow = (low << 1) >>> 0;\n\t\tif ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {\n\t\t\txHigh = xHigh - yHigh;\n\t\t\txLow = xLow - yLow;\n\t\t\tif (xLow < 0) {\n\t\t\t\txHigh--;\n\t\t\t\txLow += 4294967296;\n\t\t\t}\n\t\t\tlow++;\n\t\t\tif (low === 4294967296) {\n\t\t\t\thigh++;\n\t\t\t\tlow = 0;\n\t\t\t}\n\t\t}\n\t\tyLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;\n\t\tyHigh = yHigh >>> 1;\n\t}\n\n\tif (returnRemainder) {\n\t\treturn new x.constructor(xHigh * rs, xLow * rs);\n\t}\n\treturn new x.constructor(high * s, low * s);\n};\n\nvar go$divComplex = function(n, d) {\n\tvar ninf = n.real === 1/0 || n.real === -1/0 || n.imag === 1/0 || n.imag === -1/0;\n\tvar dinf = d.real === 1/0 || d.real === -1/0 || d.imag === 1/0 || d.imag === -1/0;\n\tvar nnan = !ninf && (n.real !== n.real || n.imag !== n.imag);\n\tvar dnan = !dinf && (d.real !== d.real || d.imag !== d.imag);\n\tif(nnan || dnan) {\n\t\treturn new n.constructor(0/0, 0/0);\n\t}\n\tif (ninf && !dinf) {\n\t\treturn new n.constructor(1/0, 1/0);\n\t}\n\tif (!ninf && dinf) {\n\t\treturn new n.constructor(0, 0);\n\t}\n\tif (d.real === 0 && d.imag === 0) {\n\t\tif (n.real === 0 && n.imag === 0) {\n\t\t\treturn new n.constructor(0/0, 0/0);\n\t\t}\n\t\treturn new n.constructor(1/0, 1/0);\n\t}\n\tvar a = Math.abs(d.real);\n\tvar b = Math.abs(d.imag);\n\tif (a <= b) {\n\t\tvar ratio = d.real / d.imag;\n\t\tvar denom = d.real * ratio + d.imag;\n\t\treturn new n.constructor((n.real * ratio + n.imag) / denom, (n.imag * ratio - n.real) / denom);\n\t}\n\tvar ratio = d.imag / d.real;\n\tvar denom = d.imag * ratio + d.real;\n\treturn new n.constructor((n.imag * ratio + n.real) / denom, (n.imag - n.real * ratio) / denom);\n};\n\nvar go$subslice = function(slice, low, high, max) {\n\tif (low < 0 || high < low || max < high || high > slice.capacity || max > slice.capacity) {\n\t\tgo$throwRuntimeError(\"slice bounds out of range\");\n\t}\n\tvar s = new slice.constructor(slice.array);\n\ts.offset = slice.offset + low;\n\ts.length = slice.length - low;\n\ts.capacity = slice.capacity - low;\n\tif (high !== undefined) {\n\t\ts.length = high - low;\n\t}\n\tif (max !== undefined) {\n\t\ts.capacity = max - low;\n\t}\n\treturn s;\n};\n\nvar go$sliceToArray = function(slice) {\n\tif (slice.length === 0) {\n\t\treturn [];\n\t}\n\tif (slice.array.constructor !== Array) {\n\t\treturn slice.array.subarray(slice.offset, slice.offset + slice.length);\n\t}\n\treturn slice.array.slice(slice.offset, slice.offset + slice.length);\n};\n\nvar go$decodeRune = function(str, pos) {\n\tvar c0 = str.charCodeAt(pos);\n\n\tif (c0 < 0x80) {\n\t\treturn [c0, 1];\n\t}\n\n\tif (c0 !== c0 || c0 < 0xC0) {\n\t\treturn [0xFFFD, 1];\n\t}\n\n\tvar c1 = str.charCodeAt(pos + 1);\n\tif (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {\n\t\treturn [0xFFFD, 1];\n\t}\n\n\tif (c0 < 0xE0) {\n\t\tvar r = (c0 & 0x1F) << 6 | (c1 & 0x3F);\n\t\tif (r <= 0x7F) {\n\t\t\treturn [0xFFFD, 1];\n\t\t}\n\t\treturn [r, 2];\n\t}\n\n\tvar c2 = str.charCodeAt(pos + 2);\n\tif (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {\n\t\treturn [0xFFFD, 1];\n\t}\n\n\tif (c0 < 0xF0) {\n\t\tvar r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);\n\t\tif (r <= 0x7FF) {\n\t\t\treturn [0xFFFD, 1];\n\t\t}\n\t\tif (0xD800 <= r && r <= 0xDFFF) {\n\t\t\treturn [0xFFFD, 1];\n\t\t}\n\t\treturn [r, 3];\n\t}\n\n\tvar c3 = str.charCodeAt(pos + 3);\n\tif (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {\n\t\treturn [0xFFFD, 1];\n\t}\n\n\tif (c0 < 0xF8) {\n\t\tvar r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);\n\t\tif (r <= 0xFFFF || 0x10FFFF < r) {\n\t\t\treturn [0xFFFD, 1];\n\t\t}\n\t\treturn [r, 4];\n\t}\n\n\treturn [0xFFFD, 1];\n};\n\nvar go$encodeRune = function(r) {\n\tif (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {\n\t\tr = 0xFFFD;\n\t}\n\tif (r <= 0x7F) {\n\t\treturn String.fromCharCode(r);\n\t}\n\tif (r <= 0x7FF) {\n\t\treturn String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));\n\t}\n\tif (r <= 0xFFFF) {\n\t\treturn String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));\n\t}\n\treturn String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));\n};\n\nvar go$stringToBytes = function(str, terminateWithNull) {\n\tvar array = new Uint8Array(terminateWithNull ? str.length + 1 : str.length), i;\n\tfor (i = 0; i < str.length; i++) {\n\t\tarray[i] = str.charCodeAt(i);\n\t}\n\tif (terminateWithNull) {\n\t\tarray[str.length] = 0;\n\t}\n\treturn array;\n};\n\nvar go$bytesToString = function(slice) {\n\tif (slice.length === 0) {\n\t\treturn \"\";\n\t}\n\tvar str = \"\", i;\n\tfor (i = 0; i < slice.length; i += 10000) {\n\t\tstr += String.fromCharCode.apply(null, slice.array.subarray(slice.offset + i, slice.offset + Math.min(slice.length, i + 10000)));\n\t}\n\treturn str;\n};\n\nvar go$stringToRunes = function(str) {\n\tvar array = new Int32Array(str.length);\n\tvar rune, i, j = 0;\n\tfor (i = 0; i < str.length; i += rune[1], j++) {\n\t\trune = go$decodeRune(str, i);\n\t\tarray[j] = rune[0];\n\t}\n\treturn array.subarray(0, j);\n};\n\nvar go$runesToString = function(slice) {\n\tif (slice.length === 0) {\n\t\treturn \"\";\n\t}\n\tvar str = \"\", i;\n\tfor (i = 0; i < slice.length; i++) {\n\t\tstr += go$encodeRune(slice.array[slice.offset + i]);\n\t}\n\treturn str;\n};\n\nvar go$needsExternalization = function(t) {\n\tswitch (t.kind) {\n\t\tcase \"Int64\":\n\t\tcase \"Uint64\":\n\t\tcase \"Array\":\n\t\tcase \"Func\":\n\t\tcase \"Interface\":\n\t\tcase \"Map\":\n\t\tcase \"Slice\":\n\t\tcase \"String\":\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n};\n\nvar go$externalize = function(v, t) {\n\tswitch (t.kind) {\n\tcase \"Int64\":\n\tcase \"Uint64\":\n\t\treturn go$flatten64(v);\n\tcase \"Array\":\n\t\tif (go$needsExternalization(t.elem)) {\n\t\t\treturn go$mapArray(v, function(e) { return go$externalize(e, t.elem); });\n\t\t}\n\t\treturn v;\n\tcase \"Func\":\n\t\tif (v === go$throwNilPointerError) {\n\t\t\treturn null;\n\t\t}\n\t\tvar convert = false;\n\t\tvar i;\n\t\tfor (i = 0; i < t.params.length; i++) {\n\t\t\tconvert = convert || (t.params[i] !== go$packages[\"github.com/gopherjs/gopherjs/js\"].Object);\n\t\t}\n\t\tfor (i = 0; i < t.results.length; i++) {\n\t\t\tconvert = convert || go$needsExternalization(t.results[i]);\n\t\t}\n\t\tif (!convert) {\n\t\t\treturn v;\n\t\t}\n\t\treturn function() {\n\t\t\tvar args = [], i;\n\t\t\tfor (i = 0; i < t.params.length; i++) {\n\t\t\t\tif (t.variadic && i === t.params.length - 1) {\n\t\t\t\t\tvar vt = t.params[i].elem, varargs = [], j;\n\t\t\t\t\tfor (j = i; j < arguments.length; j++) {\n\t\t\t\t\t\tvarargs.push(go$internalize(arguments[j], vt));\n\t\t\t\t\t}\n\t\t\t\t\targs.push(new (t.params[i])(varargs));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\targs.push(go$internalize(arguments[i], t.params[i]));\n\t\t\t}\n\t\t\tvar result = v.apply(undefined, args);\n\t\t\tswitch (t.results.length) {\n\t\t\tcase 0:\n\t\t\t\treturn;\n\t\t\tcase 1:\n\t\t\t\treturn go$externalize(result, t.results[0]);\n\t\t\tdefault:\n\t\t\t\tfor (i = 0; i < t.results.length; i++) {\n\t\t\t\t\tresult[i] = go$externalize(result[i], t.results[i]);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\tcase \"Interface\":\n\t\tif (v === null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (v.constructor.kind === undefined) {\n\t\t\treturn v; // js.Object\n\t\t}\n\t\treturn go$externalize(v.go$val, v.constructor);\n\tcase \"Map\":\n\t\tvar m = {};\n\t\tvar keys = go$keys(v), i;\n\t\tfor (i = 0; i < keys.length; i++) {\n\t\t\tvar entry = v[keys[i]];\n\t\t\tm[go$externalize(entry.k, t.key)] = go$externalize(entry.v, t.elem);\n\t\t}\n\t\treturn m;\n\tcase \"Slice\":\n\t\tif (go$needsExternalization(t.elem)) {\n\t\t\treturn go$mapArray(go$sliceToArray(v), function(e) { return go$externalize(e, t.elem); });\n\t\t}\n\t\treturn go$sliceToArray(v);\n\tcase \"String\":\n\t\tvar s = \"\", r, i, j = 0;\n\t\tfor (i = 0; i < v.length; i += r[1], j++) {\n\t\t\tr = go$decodeRune(v, i);\n\t\t\ts += String.fromCharCode(r[0]);\n\t\t}\n\t\treturn s;\n\tcase \"Struct\":\n\t\tvar timePkg = go$packages[\"time\"];\n\t\tif (timePkg && v.constructor === timePkg.Time.Ptr) {\n\t\t\tvar milli = go$div64(v.UnixNano(), new Go$Int64(0, 1000000));\n\t\t\treturn new Date(go$flatten64(milli));\n\t\t}\n\t\treturn v;\n\tdefault:\n\t\treturn v;\n\t}\n};\n\nvar go$internalize = function(v, t, recv) {\n\tswitch (t.kind) {\n\tcase \"Bool\":\n\t\treturn !!v;\n\tcase \"Int\":\n\t\treturn parseInt(v);\n\tcase \"Int8\":\n\t\treturn parseInt(v) << 24 >> 24;\n\tcase \"Int16\":\n\t\treturn parseInt(v) << 16 >> 16;\n\tcase \"Int32\":\n\t\treturn parseInt(v) >> 0;\n\tcase \"Uint\":\n\t\treturn parseInt(v);\n\tcase \"Uint8\" :\n\t\treturn parseInt(v) << 24 >>> 24;\n\tcase \"Uint16\":\n\t\treturn parseInt(v) << 16 >>> 16;\n\tcase \"Uint32\":\n\tcase \"Uintptr\":\n\t\treturn parseInt(v) >>> 0;\n\tcase \"Int64\":\n\tcase \"Uint64\":\n\t\treturn new t(0, v);\n\tcase \"Float32\":\n\tcase \"Float64\":\n\t\treturn parseFloat(v);\n\tcase \"Array\":\n\t\tif (v.length !== t.len) {\n\t\t\tgo$throwRuntimeError(\"got array with wrong size from JavaScript native\");\n\t\t}\n\t\treturn go$mapArray(v, function(e) { return go$internalize(e, t.elem); });\n\tcase \"Func\":\n\t\treturn function() {\n\t\t\tvar args = [], i;\n\t\t\tfor (i = 0; i < t.params.length; i++) {\n\t\t\t\tif (t.variadic && i === t.params.length - 1) {\n\t\t\t\t\tvar vt = t.params[i].elem, varargs = arguments[i], j;\n\t\t\t\t\tfor (j = 0; j < varargs.length; j++) {\n\t\t\t\t\t\targs.push(go$externalize(varargs.array[varargs.offset + j], vt));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\targs.push(go$externalize(arguments[i], t.params[i]));\n\t\t\t}\n\t\t\tvar result = v.apply(recv, args);\n\t\t\tswitch (t.results.length) {\n\t\t\tcase 0:\n\t\t\t\treturn;\n\t\t\tcase 1:\n\t\t\t\treturn go$internalize(result, t.results[0]);\n\t\t\tdefault:\n\t\t\t\tfor (i = 0; i < t.results.length; i++) {\n\t\t\t\t\tresult[i] = go$internalize(result[i], t.results[i]);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\tcase \"Interface\":\n\t\tif (t === go$packages[\"github.com/gopherjs/gopherjs/js\"].Object) {\n\t\t\treturn v;\n\t\t}\n\t\tswitch (v.constructor) {\n\t\tcase Int8Array:\n\t\t\treturn new (go$sliceType(Go$Int8))(v);\n\t\tcase Int16Array:\n\t\t\treturn new (go$sliceType(Go$Int16))(v);\n\t\tcase Int32Array:\n\t\t\treturn new (go$sliceType(Go$Int))(v);\n\t\tcase Uint8Array:\n\t\t\treturn new (go$sliceType(Go$Uint8))(v);\n\t\tcase Uint16Array:\n\t\t\treturn new (go$sliceType(Go$Uint16))(v);\n\t\tcase Uint32Array:\n\t\t\treturn new (go$sliceType(Go$Uint))(v);\n\t\tcase Float32Array:\n\t\t\treturn new (go$sliceType(Go$Float32))(v);\n\t\tcase Float64Array:\n\t\t\treturn new (go$sliceType(Go$Float64))(v);\n\t\tcase Array:\n\t\t\treturn go$internalize(v, go$sliceType(go$emptyInterface));\n\t\tcase Boolean:\n\t\t\treturn new Go$Bool(!!v);\n\t\tcase Date:\n\t\t\tvar timePkg = go$packages[\"time\"];\n\t\t\tif (timePkg) {\n\t\t\t\treturn new timePkg.Time(timePkg.Unix(new Go$Int64(0, 0), new Go$Int64(0, v.getTime() * 1000000)));\n\t\t\t}\n\t\tcase Function:\n\t\t\tvar funcType = go$funcType([go$sliceType(go$emptyInterface)], [go$packages[\"github.com/gopherjs/gopherjs/js\"].Object], true);\n\t\t\treturn new funcType(go$internalize(v, funcType));\n\t\tcase Number:\n\t\t\treturn new Go$Float64(parseFloat(v));\n\t\tcase Object:\n\t\t\tvar mapType = go$mapType(Go$String, go$emptyInterface);\n\t\t\treturn new mapType(go$internalize(v, mapType));\n\t\tcase String:\n\t\t\treturn new Go$String(go$internalize(v, Go$String));\n\t\t}\n\t\treturn v;\n\tcase \"Map\":\n\t\tvar m = new Go$Map();\n\t\tvar keys = go$keys(v), i;\n\t\tfor (i = 0; i < keys.length; i++) {\n\t\t\tvar key = go$internalize(keys[i], t.key);\n\t\t\tm[key.go$key ? key.go$key() : key] = { k: key, v: go$internalize(v[keys[i]], t.elem) };\n\t\t}\n\t\treturn m;\n\tcase \"Slice\":\n\t\treturn new t(go$mapArray(v, function(e) { return go$internalize(e, t.elem); }));\n\tcase \"String\":\n\t\tv = String(v);\n\t\tvar s = \"\", i;\n\t\tfor (i = 0; i < v.length; i++) {\n\t\t\ts += go$encodeRune(v.charCodeAt(i));\n\t\t}\n\t\treturn s;\n\tdefault:\n\t\treturn v;\n\t}\n};\n\nvar go$copySlice = function(dst, src) {\n\tvar n = Math.min(src.length, dst.length), i;\n\tif (dst.array.constructor !== Array && n !== 0) {\n\t\tdst.array.set(src.array.subarray(src.offset, src.offset + n), dst.offset);\n\t\treturn n;\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\tdst.array[dst.offset + i] = src.array[src.offset + i];\n\t}\n\treturn n;\n};\n\nvar go$copyString = function(dst, src) {\n\tvar n = Math.min(src.length, dst.length), i;\n\tfor (i = 0; i < n; i++) {\n\t\tdst.array[dst.offset + i] = src.charCodeAt(i);\n\t}\n\treturn n;\n};\n\nvar go$copyArray = function(dst, src) {\n\tvar i;\n\tfor (i = 0; i < src.length; i++) {\n\t\tdst[i] = src[i];\n\t}\n};\n\nvar go$growSlice = function(slice, length) {\n\tvar newCapacity = Math.max(length, slice.capacity < 1024 ? slice.capacity * 2 : Math.floor(slice.capacity * 5 / 4));\n\n\tvar newArray;\n\tif (slice.array.constructor === Array) {\n\t\tnewArray = slice.array;\n\t\tif (slice.offset !== 0 || newArray.length !== slice.offset + slice.capacity) {\n\t\t\tnewArray = newArray.slice(slice.offset);\n\t\t}\n\t\tnewArray.length = newCapacity;\n\t} else {\n\t\tnewArray = new slice.array.constructor(newCapacity);\n\t\tnewArray.set(slice.array.subarray(slice.offset));\n\t}\n\n\tvar newSlice = new slice.constructor(newArray);\n\tnewSlice.length = slice.length;\n\tnewSlice.capacity = newCapacity;\n\treturn newSlice;\n};\n\nvar go$append = function(slice) {\n\tif (arguments.length === 1) {\n\t\treturn slice;\n\t}\n\n\tvar newLength = slice.length + arguments.length - 1;\n\tif (newLength > slice.capacity) {\n\t\tslice = go$growSlice(slice, newLength);\n\t}\n\n\tvar array = slice.array;\n\tvar leftOffset = slice.offset + slice.length - 1, i;\n\tfor (i = 1; i < arguments.length; i++) {\n\t\tarray[leftOffset + i] = arguments[i];\n\t}\n\n\tvar newSlice = new slice.constructor(array);\n\tnewSlice.offset = slice.offset;\n\tnewSlice.length = newLength;\n\tnewSlice.capacity = slice.capacity;\n\treturn newSlice;\n};\n\nvar go$appendSlice = function(slice, toAppend) {\n\tif (toAppend.length === 0) {\n\t\treturn slice;\n\t}\n\n\tvar newLength = slice.length + toAppend.length;\n\tif (newLength > slice.capacity) {\n\t\tslice = go$growSlice(slice, newLength);\n\t}\n\n\tvar array = slice.array;\n\tvar leftOffset = slice.offset + slice.length, rightOffset = toAppend.offset, i;\n\tfor (i = 0; i < toAppend.length; i++) {\n\t\tarray[leftOffset + i] = toAppend.array[rightOffset + i];\n\t}\n\n\tvar newSlice = new slice.constructor(array);\n\tnewSlice.offset = slice.offset;\n\tnewSlice.length = newLength;\n\tnewSlice.capacity = slice.capacity;\n\treturn newSlice;\n};\n\nvar go$panic = function(value) {\n\tvar message;\n\tif (value.constructor === Go$String) {\n\t\tmessage = value.go$val;\n\t} else if (value.Error !== undefined) {\n\t\tmessage = value.Error();\n\t} else if (value.String !== undefined) {\n\t\tmessage = value.String();\n\t} else {\n\t\tmessage = value;\n\t}\n\tvar err = new Error(message);\n\terr.go$panicValue = value;\n\treturn err;\n};\nvar go$notSupported = function(feature) {\n\tvar err = new Error(\"not supported by GopherJS: \" + feature + \" (hint: the file optional.go.patch contains patches for core packages)\");\n\terr.go$notSupported = feature;\n\tthrow err;\n};\nvar go$throwRuntimeError; // set by package \"runtime\"\n\nvar go$errorStack = [], go$jsErr = null;\n\nvar go$pushErr = function(err) {\n\tif (err.go$panicValue === undefined) {\n\t\tvar jsPkg = go$packages[\"github.com/gopherjs/gopherjs/js\"];\n\t\tif (err.go$notSupported !== undefined || jsPkg === undefined) {\n\t\t\tgo$jsErr = err;\n\t\t\treturn;\n\t\t}\n\t\terr.go$panicValue = new jsPkg.Error.Ptr(err);\n\t}\n\tgo$errorStack.push({ frame: go$getStackDepth(), error: err });\n};\n\nvar go$callDeferred = function(deferred) {\n\tif (go$jsErr !== null) {\n\t\tthrow go$jsErr;\n\t}\n\tvar i;\n\tfor (i = deferred.length - 1; i >= 0; i--) {\n\t\tvar call = deferred[i];\n\t\ttry {\n\t\t\tif (call.recv !== undefined) {\n\t\t\t\tcall.recv[call.method].apply(call.recv, call.args);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcall.fun.apply(undefined, call.args);\n\t\t} catch (err) {\n\t\t\tgo$errorStack.push({ frame: go$getStackDepth(), error: err });\n\t\t}\n\t}\n\tvar err = go$errorStack[go$errorStack.length - 1];\n\tif (err !== undefined && err.frame === go$getStackDepth()) {\n\t\tgo$errorStack.pop();\n\t\tthrow err.error;\n\t}\n};\n\nvar go$recover = function() {\n\tvar err = go$errorStack[go$errorStack.length - 1];\n\tif (err === undefined || err.frame !== go$getStackDepth()) {\n\t\treturn null;\n\t}\n\tgo$errorStack.pop();\n\treturn err.error.go$panicValue;\n};\n\nvar go$getStack = function() {\n\treturn (new Error()).stack.split(\"\\n\");\n};\n\nvar go$getStackDepth = function() {\n\tvar s = go$getStack(), d = 0, i;\n\tfor (i = 0; i < s.length; i++) {\n\t\tif (s[i].indexOf(\"go$\") === -1) {\n\t\t\td++;\n\t\t}\n\t}\n\treturn d;\n};\n\nvar go$interfaceIsEqual = function(a, b) {\n\tif (a === null || b === null) {\n\t\treturn a === null && b === null;\n\t}\n\tif (a.constructor !== b.constructor) {\n\t\treturn false;\n\t}\n\tswitch (a.constructor.kind) {\n\tcase \"Float32\":\n\t\treturn go$float32IsEqual(a.go$val, b.go$val);\n\tcase \"Complex64\":\n\t\treturn go$float32IsEqual(a.go$val.real, b.go$val.real) && go$float32IsEqual(a.go$val.imag, b.go$val.imag);\n\tcase \"Complex128\":\n\t\treturn a.go$val.real === b.go$val.real && a.go$val.imag === b.go$val.imag;\n\tcase \"Int64\":\n\tcase \"Uint64\":\n\t\treturn a.go$val.high === b.go$val.high && a.go$val.low === b.go$val.low;\n\tcase \"Array\":\n\t\treturn go$arrayIsEqual(a.go$val, b.go$val);\n\tcase \"Ptr\":\n\t\tif (a.constructor.Struct) {\n\t\t\treturn a === b;\n\t\t}\n\t\treturn go$pointerIsEqual(a, b);\n\tcase \"Func\":\n\tcase \"Map\":\n\tcase \"Slice\":\n\tcase \"Struct\":\n\t\tgo$throwRuntimeError(\"comparing uncomparable type \" + a.constructor);\n\tcase undefined: // js.Object\n\t\treturn a === b;\n\tdefault:\n\t\treturn a.go$val === b.go$val;\n\t}\n};\nvar go$float32IsEqual = function(a, b) {\n\treturn a === a && b === b && go$float32bits(a) === go$float32bits(b);\n}\nvar go$arrayIsEqual = function(a, b) {\n\tif (a.length != b.length) {\n\t\treturn false;\n\t}\n\tvar i;\n\tfor (i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\nvar go$sliceIsEqual = function(a, ai, b, bi) {\n\treturn a.array === b.array && a.offset + ai === b.offset + bi;\n};\nvar go$pointerIsEqual = function(a, b) {\n\tif (a === b) {\n\t\treturn true;\n\t}\n\tif (a.go$get === go$throwNilPointerError || b.go$get === go$throwNilPointerError) {\n\t\treturn a.go$get === go$throwNilPointerError && b.go$get === go$throwNilPointerError;\n\t}\n\tvar old = a.go$get();\n\tvar dummy = new Object();\n\ta.go$set(dummy);\n\tvar equal = b.go$get() === dummy;\n\ta.go$set(old);\n\treturn equal;\n};\n\nvar go$typeAssertionFailed = function(obj, expected) {\n\tvar got = \"\";\n\tif (obj !== null) {\n\t\tgot = obj.constructor.string;\n\t}\n\tthrow go$panic(new go$packages[\"runtime\"].TypeAssertionError.Ptr(\"\", got, expected.string, \"\"));\n};\n\nvar go$now = function() { var msec = (new Date()).getTime(); return [new Go$Int64(0, Math.floor(msec / 1000)), (msec % 1000) * 1000000]; };\n\nvar go$packages = {};\n";
		sizes32 = new types.StdSizes.Ptr(new Go$Int64(0, 4), new Go$Int64(0, 8));
		var _map, _key;
		typesPackages = (_map = new Go$Map(), _key = "unsafe", _map[_key] = { k: _key, v: types.Unsafe }, _map);
		var _map$1, _key$1, _key$2, _map$2, _key$3, _key$4, _map$3, _key$5, _key$6, _map$4, _key$7, _key$8, _map$5, _key$9, _key$10, _map$6, _key$11, _key$12, _map$7, _key$13, _key$14, _map$8, _key$15, _key$16, _map$9, _key$17, _key$18, _map$10, _key$19, _key$20, atomicAdd32, atomicAdd64, atomicCompareAndSwap, atomicLoad, atomicStore, atomicSwap, _map$11, _key$21, _key$22, _map$12, _key$23, _key$24, _map$13, _key$25, _key$26, _map$14, _key$27, _key$28, _map$15, _key$29, _key$30, _map$16, _key$31, _key$32, _ref, _i, _slice, _index, keyword, _key$33, _map$17, _key$34, _key$35;
		_key$2 = "bytes", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: (_map$1 = new Go$Map(), _key$1 = "Compare", _map$1[_key$1] = { k: _key$1, v: "function(a, b) {\n\t\t\tvar l = Math.min(a.length, b.length), i;\n\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\tvar va = a.array[a.offset + i];\n\t\t\t\tvar vb = b.array[b.offset + i];\n\t\t\t\tif (va < vb) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (va > vb) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (a.length < b.length) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a.length > b.length) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}" }, _key$1 = "Equal", _map$1[_key$1] = { k: _key$1, v: "function(a, b) {\n\t\t\tif (a.length !== b.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\tif (a.array[a.offset + i] !== b.array[b.offset + i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}" }, _key$1 = "IndexByte", _map$1[_key$1] = { k: _key$1, v: "function(s, c) {\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < s.length; i++) {\n\t\t\t\tif (s.array[s.offset + i] === c) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}" }, _map$1) };
		_key$4 = "encoding/gob", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$4] = { k: _key$4, v: (_map$2 = new Go$Map(), _key$3 = "NewDecoder", _map$2[_key$3] = { k: _key$3, v: "function() { go$notSupported(\"encoding/gob\"); }" }, _key$3 = "NewEncoder", _map$2[_key$3] = { k: _key$3, v: "function() { go$notSupported(\"encoding/gob\"); }" }, _map$2) };
		_key$6 = "encoding/json", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$6] = { k: _key$6, v: (_map$3 = new Go$Map(), _key$5 = "toplevel", _map$3[_key$5] = { k: _key$5, v: "\n\t\t  var encodeStates = [];\n\t\t" }, _key$5 = "newEncodeState", _map$3[_key$5] = { k: _key$5, v: "function() {\n\t\t\tvar e = encodeStates.pop();\n\t\t\tif (e !== undefined) {\n\t\t\t\te.Reset();\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\treturn new encodeState.Ptr();\n\t\t}" }, _key$5 = "putEncodeState", _map$3[_key$5] = { k: _key$5, v: "function(e) {\n\t\t\tencodeStates.push(e);\n\t\t}" }, _map$3) };
		_key$8 = "io/ioutil", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$8] = { k: _key$8, v: (_map$4 = new Go$Map(), _key$7 = "toplevel", _map$4[_key$7] = { k: _key$7, v: "\n\t\t\tvar blackHoles = [];\n\t\t" }, _key$7 = "blackHole", _map$4[_key$7] = { k: _key$7, v: "function() {\n\t\t\treturn blackHoles.pop() || go$sliceType(Go$Uint8).make(8192, 0, function() { return 0; });\n\t\t}" }, _key$7 = "blackHolePut", _map$4[_key$7] = { k: _key$7, v: "function(p) {\n\t\t\tblackHoles.push(p);\n\t\t}" }, _map$4) };
		_key$10 = "math", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$10] = { k: _key$10, v: (_map$5 = new Go$Map(), _key$9 = "toplevelDependencies", _map$5[_key$9] = { k: _key$9, v: "math.expm1 math.frexp math.hypot math.log10 math.log1p math.log2 math.remainder" }, _key$9 = "Abs", _map$5[_key$9] = { k: _key$9, v: "Math.abs" }, _key$9 = "Acos", _map$5[_key$9] = { k: _key$9, v: "Math.acos" }, _key$9 = "Asin", _map$5[_key$9] = { k: _key$9, v: "Math.asin" }, _key$9 = "Atan", _map$5[_key$9] = { k: _key$9, v: "Math.atan" }, _key$9 = "Atan2", _map$5[_key$9] = { k: _key$9, v: "Math.atan2" }, _key$9 = "Ceil", _map$5[_key$9] = { k: _key$9, v: "Math.ceil" }, _key$9 = "Copysign", _map$5[_key$9] = { k: _key$9, v: "function(x, y) { return (x < 0 || 1/x === 1/-0) !== (y < 0 || 1/y === 1/-0) ? -x : x; }" }, _key$9 = "Cos", _map$5[_key$9] = { k: _key$9, v: "Math.cos" }, _key$9 = "Dim", _map$5[_key$9] = { k: _key$9, v: "function(x, y) { return Math.max(x - y, 0); }" }, _key$9 = "Exp", _map$5[_key$9] = { k: _key$9, v: "Math.exp" }, _key$9 = "Exp2", _map$5[_key$9] = { k: _key$9, v: "function(x) { return Math.pow(2, x); }" }, _key$9 = "Expm1", _map$5[_key$9] = { k: _key$9, v: "function(x) { return expm1(x); }" }, _key$9 = "Floor", _map$5[_key$9] = { k: _key$9, v: "Math.floor" }, _key$9 = "Frexp", _map$5[_key$9] = { k: _key$9, v: "function(f) { return frexp(f); }" }, _key$9 = "Hypot", _map$5[_key$9] = { k: _key$9, v: "function(p, q) { return hypot(p, q); }" }, _key$9 = "Inf", _map$5[_key$9] = { k: _key$9, v: "function(sign) { return sign >= 0 ? 1/0 : -1/0; }" }, _key$9 = "IsInf", _map$5[_key$9] = { k: _key$9, v: "function(f, sign) { if (f === -1/0) { return sign <= 0; } if (f === 1/0) { return sign >= 0; } return false; }" }, _key$9 = "IsNaN", _map$5[_key$9] = { k: _key$9, v: "function(f) { return f !== f; }" }, _key$9 = "Ldexp", _map$5[_key$9] = { k: _key$9, v: "go$ldexp" }, _key$9 = "Log", _map$5[_key$9] = { k: _key$9, v: "Math.log" }, _key$9 = "Log10", _map$5[_key$9] = { k: _key$9, v: "function(x) { return log10(x); }" }, _key$9 = "Log1p", _map$5[_key$9] = { k: _key$9, v: "function(x) { return log1p(x); }" }, _key$9 = "Log2", _map$5[_key$9] = { k: _key$9, v: "function(x) { return log2(x); }" }, _key$9 = "Max", _map$5[_key$9] = { k: _key$9, v: "function(x, y) { return (x === 1/0 || y === 1/0) ? 1/0 : Math.max(x, y); }" }, _key$9 = "Min", _map$5[_key$9] = { k: _key$9, v: "function(x, y) { return (x === -1/0 || y === -1/0) ? -1/0 : Math.min(x, y); }" }, _key$9 = "Mod", _map$5[_key$9] = { k: _key$9, v: "function(x, y) { return x % y; }" }, _key$9 = "Modf", _map$5[_key$9] = { k: _key$9, v: "function(f) { if (f === -1/0 || f === 1/0) { return [f, 0/0]; } var frac = f % 1; return [f - frac, frac]; }" }, _key$9 = "NaN", _map$5[_key$9] = { k: _key$9, v: "function() { return 0/0; }" }, _key$9 = "Pow", _map$5[_key$9] = { k: _key$9, v: "function(x, y) { return ((x === 1) || (x === -1 && (y === -1/0 || y === 1/0))) ? 1 : Math.pow(x, y); }" }, _key$9 = "Remainder", _map$5[_key$9] = { k: _key$9, v: "function(x, y) { return remainder(x, y); }" }, _key$9 = "Signbit", _map$5[_key$9] = { k: _key$9, v: "function(x) { return x < 0 || 1/x === 1/-0; }" }, _key$9 = "Sin", _map$5[_key$9] = { k: _key$9, v: "Math.sin" }, _key$9 = "Sincos", _map$5[_key$9] = { k: _key$9, v: "function(x) { return [Math.sin(x), Math.cos(x)]; }" }, _key$9 = "Sqrt", _map$5[_key$9] = { k: _key$9, v: "Math.sqrt" }, _key$9 = "Tan", _map$5[_key$9] = { k: _key$9, v: "Math.tan" }, _key$9 = "Trunc", _map$5[_key$9] = { k: _key$9, v: "function(x) { return (x === 1/0 || x === -1/0 || x !== x || 1/x === 1/-0) ? x : x >> 0; }" }, _key$9 = "Float32bits", _map$5[_key$9] = { k: _key$9, v: "go$float32bits" }, _key$9 = "Float32frombits", _map$5[_key$9] = { k: _key$9, v: "go$float32frombits" }, _key$9 = "Float64bits", _map$5[_key$9] = { k: _key$9, v: "function(f) {\n\t\t\tvar s, e, x, x$1, x$2, x$3;\n\t\t\tif (f === 0) {\n\t\t\t\tif (f === 0 && 1 / f === 1 / -0) {\n\t\t\t\t\treturn new Go$Uint64(2147483648, 0);\n\t\t\t\t}\n\t\t\t\treturn new Go$Uint64(0, 0);\n\t\t\t}\n\t\t\tif (f !== f) {\n\t\t\t\treturn new Go$Uint64(2146959360, 1);\n\t\t\t}\n\t\t\ts = new Go$Uint64(0, 0);\n\t\t\tif (f < 0) {\n\t\t\t\ts = new Go$Uint64(2147483648, 0);\n\t\t\t\tf = -f;\n\t\t\t}\n\t\t\te = 1075;\n\t\t\twhile (f >= 9.007199254740992e+15) {\n\t\t\t\tf = f / 2;\n\t\t\t\tif (e === 2047) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\te = e + 1 >>> 0;\n\t\t\t}\n\t\t\twhile (f < 4.503599627370496e+15) {\n\t\t\t\te = e - 1 >>> 0;\n\t\t\t\tif (e === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tf = f * 2;\n\t\t\t}\n\t\t\treturn (x = (x$1 = go$shiftLeft64(new Go$Uint64(0, e), 52), new Go$Uint64(s.high | x$1.high, (s.low | x$1.low) >>> 0)), x$2 = (x$3 = new Go$Uint64(0, f), new Go$Uint64(x$3.high &~ 1048576, (x$3.low &~ 0) >>> 0)), new Go$Uint64(x.high | x$2.high, (x.low | x$2.low) >>> 0));\n\t\t}" }, _key$9 = "Float64frombits", _map$5[_key$9] = { k: _key$9, v: "function(b) {\n\t\t\tvar s, x, x$1, e, m;\n\t\t\ts = 1;\n\t\t\tif (!((x = new Go$Uint64(b.high & 2147483648, (b.low & 0) >>> 0), (x.high === 0 && x.low === 0)))) {\n\t\t\t\ts = -1;\n\t\t\t}\n\t\t\te = (x$1 = go$shiftRightUint64(b, 52), new Go$Uint64(x$1.high & 0, (x$1.low & 2047) >>> 0));\n\t\t\tm = new Go$Uint64(b.high & 1048575, (b.low & 4294967295) >>> 0);\n\t\t\tif ((e.high === 0 && e.low === 2047)) {\n\t\t\t\tif ((m.high === 0 && m.low === 0)) {\n\t\t\t\t\treturn s / 0;\n\t\t\t\t}\n\t\t\t\treturn 0/0;\n\t\t\t}\n\t\t\tif (!((e.high === 0 && e.low === 0))) {\n\t\t\t\tm = new Go$Uint64(m.high + 1048576, m.low + 0);\n\t\t\t}\n\t\t\tif ((e.high === 0 && e.low === 0)) {\n\t\t\t\te = new Go$Uint64(0, 1);\n\t\t\t}\n\t\t\treturn go$ldexp(go$flatten64(m), ((e.low >> 0) - 1023 >> 0) - 52 >> 0) * s;\n\t\t}" }, _map$5) };
		_key$12 = "math/big", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$12] = { k: _key$12, v: (_map$6 = new Go$Map(), _key$11 = "toplevelDependencies", _map$6[_key$11] = { k: _key$11, v: "math/big.mulWW_g math/big.divWW_g math/big.addVV_g math/big.subVV_g math/big.addVW_g math/big.subVW_g math/big.shlVU_g math/big.shrVU_g math/big.mulAddVWW_g math/big.addMulVVW_g math/big.divWVW_g math/big.bitLen_g" }, _key$11 = "mulWW", _map$6[_key$11] = { k: _key$11, v: "function(x, y) { return mulWW_g(x, y); }" }, _key$11 = "divWW", _map$6[_key$11] = { k: _key$11, v: "function(x1, x0, y) { return divWW_g(x1, x0, y); }" }, _key$11 = "addVV", _map$6[_key$11] = { k: _key$11, v: "function(z, x, y) { return addVV_g(z, x, y); }" }, _key$11 = "subVV", _map$6[_key$11] = { k: _key$11, v: "function(z, x, y) { return subVV_g(z, x, y); }" }, _key$11 = "addVW", _map$6[_key$11] = { k: _key$11, v: "function(z, x, y) { return addVW_g(z, x, y); }" }, _key$11 = "subVW", _map$6[_key$11] = { k: _key$11, v: "function(z, x, y) { return subVW_g(z, x, y); }" }, _key$11 = "shlVU", _map$6[_key$11] = { k: _key$11, v: "function(z, x, s) { return shlVU_g(z, x, s); }" }, _key$11 = "shrVU", _map$6[_key$11] = { k: _key$11, v: "function(z, x, s) { return shrVU_g(z, x, s); }" }, _key$11 = "mulAddVWW", _map$6[_key$11] = { k: _key$11, v: "function(z, x, y, r) { return mulAddVWW_g(z, x, y, r); }" }, _key$11 = "addMulVVW", _map$6[_key$11] = { k: _key$11, v: "function(z, x, y) { return addMulVVW_g(z, x, y); }" }, _key$11 = "divWVW", _map$6[_key$11] = { k: _key$11, v: "function(z, xn, x, y) { return divWVW_g(z, xn, x, y); }" }, _key$11 = "bitLen", _map$6[_key$11] = { k: _key$11, v: "function(x) { return bitLen_g(x); }" }, _map$6) };
		_key$14 = "os", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$14] = { k: _key$14, v: (_map$7 = new Go$Map(), _key$13 = "toplevel", _map$7[_key$13] = { k: _key$13, v: "\n\t\t\tif (go$packages[\"syscall\"].Syscall15 !== undefined) { // windows\n\t\t\t\tNewFile = go$pkg.NewFile = function() { return new File.Ptr(); };\n\t\t\t}\n\t\t" }, _key$13 = "toplevelDependencies", _map$7[_key$13] = { k: _key$13, v: "syscall.Syscall15 os.NewFile" }, _key$13 = "Args", _map$7[_key$13] = { k: _key$13, v: "new (go$sliceType(Go$String))((typeof process !== 'undefined') ? process.argv.slice(1) : [])" }, _map$7) };
		_key$16 = "runtime", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$16] = { k: _key$16, v: (_map$8 = new Go$Map(), _key$15 = "toplevel", _map$8[_key$15] = { k: _key$15, v: "\n\t\t\tgo$throwRuntimeError = function(msg) { throw go$panic(new errorString(msg)); };\n\t\t" }, _key$15 = "toplevelDependencies", _map$8[_key$15] = { k: _key$15, v: "runtime.errorString runtime.TypeAssertionError" }, _key$15 = "getgoroot", _map$8[_key$15] = { k: _key$15, v: "function() {\n\t\t\treturn (typeof process !== 'undefined') ? (process.env[\"GOROOT\"] || \"\") : \"/\";\n\t\t}" }, _key$15 = "sizeof_C_MStats", _map$8[_key$15] = { k: _key$15, v: "3712" }, _key$15 = "Caller", _map$8[_key$15] = { k: _key$15, v: "function(skip) {\n\t\t\tvar line = go$getStack()[skip + 3];\n\t\t\tif (line === undefined) {\n\t\t\t\treturn [0, \"\", 0, false];\n\t\t\t}\n\t\t\tvar parts = line.substring(line.indexOf(\"(\") + 1, line.indexOf(\")\")).split(\":\");\n\t\t\treturn [0, parts[0], parseInt(parts[1]), true];\n\t\t}" }, _key$15 = "GC", _map$8[_key$15] = { k: _key$15, v: "function() {}" }, _key$15 = "GOMAXPROCS", _map$8[_key$15] = { k: _key$15, v: "function(n) {\n\t\t\tif (n > 1) {\n\t\t\t\tgo$notSupported(\"GOMAXPROCS != 1\");\n\t\t\t}\n\t\t\treturn 1;\n\t\t}" }, _key$15 = "Goexit", _map$8[_key$15] = { k: _key$15, v: "function() {\n\t\t\tvar err = new Go$Error();\n\t\t\terr.go$exit = true;\n\t\t\tthrow err;\n\t\t}" }, _key$15 = "NumCPU", _map$8[_key$15] = { k: _key$15, v: "function() { return 1; }" }, _key$15 = "ReadMemStats", _map$8[_key$15] = { k: _key$15, v: "function() {}" }, _key$15 = "SetFinalizer", _map$8[_key$15] = { k: _key$15, v: "function() {}" }, _map$8) };
		_key$18 = "strings", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$18] = { k: _key$18, v: (_map$9 = new Go$Map(), _key$17 = "IndexByte", _map$9[_key$17] = { k: _key$17, v: "function(s, c) { return s.indexOf(String.fromCharCode(c)); }" }, _map$9) };
		_key$20 = "sync", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$20] = { k: _key$20, v: (_map$10 = new Go$Map(), _key$19 = "copyChecker.check", _map$10[_key$19] = { k: _key$19, v: "function() {}" }, _key$19 = "runtime_Syncsemcheck", _map$10[_key$19] = { k: _key$19, v: "function() {}" }, _map$10) };
		atomicAdd32 = "function(addr, delta) {\n\t\tvar value = addr.go$get() + delta;\n\t\taddr.go$set(value);\n\t\treturn value;\n\t}";
		atomicAdd64 = "function(addr, delta) {\n\t\tvar value = addr.go$get();\n\t\tvalue = new value.constructor(value.high + delta.high, value.low + delta.low);\n\t\taddr.go$set(value);\n\t\treturn value;\n\t}";
		atomicCompareAndSwap = "function(addr, oldVal, newVal) {\n\t\tif (addr.go$get() === oldVal) {\n\t\t\taddr.go$set(newVal);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}";
		atomicLoad = "function(addr) {\n\t\treturn addr.go$get();\n\t}";
		atomicStore = "function(addr, val) {\n\t\taddr.go$set(val);\n\t}";
		atomicSwap = "function(addr, newVal) {\n\t\tvar value = addr.go$get();\n\t\taddr.go$set(newVal);\n\t\treturn value;\n\t}";
		_key$22 = "sync/atomic", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$22] = { k: _key$22, v: (_map$11 = new Go$Map(), _key$21 = "AddInt32", _map$11[_key$21] = { k: _key$21, v: atomicAdd32 }, _key$21 = "AddUint32", _map$11[_key$21] = { k: _key$21, v: atomicAdd32 }, _key$21 = "AddUintptr", _map$11[_key$21] = { k: _key$21, v: atomicAdd32 }, _key$21 = "AddInt64", _map$11[_key$21] = { k: _key$21, v: atomicAdd64 }, _key$21 = "AddUint64", _map$11[_key$21] = { k: _key$21, v: atomicAdd64 }, _key$21 = "CompareAndSwapInt32", _map$11[_key$21] = { k: _key$21, v: atomicCompareAndSwap }, _key$21 = "CompareAndSwapInt64", _map$11[_key$21] = { k: _key$21, v: atomicCompareAndSwap }, _key$21 = "CompareAndSwapPointer", _map$11[_key$21] = { k: _key$21, v: atomicCompareAndSwap }, _key$21 = "CompareAndSwapUint32", _map$11[_key$21] = { k: _key$21, v: atomicCompareAndSwap }, _key$21 = "CompareAndSwapUint64", _map$11[_key$21] = { k: _key$21, v: atomicCompareAndSwap }, _key$21 = "CompareAndSwapUintptr", _map$11[_key$21] = { k: _key$21, v: atomicCompareAndSwap }, _key$21 = "LoadInt32", _map$11[_key$21] = { k: _key$21, v: atomicLoad }, _key$21 = "LoadInt64", _map$11[_key$21] = { k: _key$21, v: atomicLoad }, _key$21 = "LoadPointer", _map$11[_key$21] = { k: _key$21, v: atomicLoad }, _key$21 = "LoadUint32", _map$11[_key$21] = { k: _key$21, v: atomicLoad }, _key$21 = "LoadUint64", _map$11[_key$21] = { k: _key$21, v: atomicLoad }, _key$21 = "LoadUintptr", _map$11[_key$21] = { k: _key$21, v: atomicLoad }, _key$21 = "StoreInt32", _map$11[_key$21] = { k: _key$21, v: atomicStore }, _key$21 = "StoreInt64", _map$11[_key$21] = { k: _key$21, v: atomicStore }, _key$21 = "StorePointer", _map$11[_key$21] = { k: _key$21, v: atomicStore }, _key$21 = "StoreUint32", _map$11[_key$21] = { k: _key$21, v: atomicStore }, _key$21 = "StoreUint64", _map$11[_key$21] = { k: _key$21, v: atomicStore }, _key$21 = "StoreUintptr", _map$11[_key$21] = { k: _key$21, v: atomicStore }, _key$21 = "SwapInt32", _map$11[_key$21] = { k: _key$21, v: atomicSwap }, _key$21 = "SwapInt64", _map$11[_key$21] = { k: _key$21, v: atomicSwap }, _key$21 = "SwapPointer", _map$11[_key$21] = { k: _key$21, v: atomicSwap }, _key$21 = "SwapUint32", _map$11[_key$21] = { k: _key$21, v: atomicSwap }, _key$21 = "SwapUint64", _map$11[_key$21] = { k: _key$21, v: atomicSwap }, _key$21 = "SwapUintptr", _map$11[_key$21] = { k: _key$21, v: atomicSwap }, _map$11) };
		_key$24 = "syscall", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$24] = { k: _key$24, v: (_map$12 = new Go$Map(), _key$23 = "toplevel", _map$12[_key$23] = { k: _key$23, v: "\n\t\t\tif (go$pkg.Syscall15 !== undefined) { // windows\n\t\t\t\tSyscall = Syscall6 = Syscall9 = Syscall12 = Syscall15 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.Syscall9 = go$pkg.Syscall12 = go$pkg.Syscall15 = loadlibrary = getprocaddress = function() { throw new Error(\"Syscalls not available.\"); };\n\t\t\t\tgetStdHandle = GetCommandLine = go$pkg.GetCommandLine = function() {};\n\t\t\t\tCommandLineToArgv = go$pkg.CommandLineToArgv = function() { return [null, {}]; };\n\t\t\t\tGetenv = go$pkg.Getenv = function(key) { return [\"\", false]; };\n\t\t\t\tGetTimeZoneInformation = go$pkg.GetTimeZoneInformation = function() { return [undefined, true]; };\n\t\t\t} else if (typeof process === \"undefined\") {\n\t\t\t\tvar syscall = function() { throw new Error(\"Syscalls not available.\"); };\n\t\t\t\tif (typeof go$syscall !== \"undefined\") {\n\t\t\t\t\tsyscall = go$syscall;\n\t\t\t\t}\n\t\t\t\tSyscall = Syscall6 = RawSyscall = RawSyscall6 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.RawSyscall = go$pkg.RawSyscall6 = syscall;\n\t\t\t\tenvs = new (go$sliceType(Go$String))(new Array(0));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar syscall = require(\"syscall\");\n\t\t\t\t\tSyscall = go$pkg.Syscall = syscall.Syscall;\n\t\t\t\t\tSyscall6 = go$pkg.Syscall6 = syscall.Syscall6;\n\t\t\t\t\tRawSyscall = go$pkg.RawSyscall = syscall.Syscall;\n\t\t\t\t\tRawSyscall6 = go$pkg.RawSyscall6 = syscall.Syscall6;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tSyscall = Syscall6 = RawSyscall = RawSyscall6 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.RawSyscall = go$pkg.RawSyscall6 = function() { throw e; };\n\t\t\t\t}\n\t\t\t\tBytePtrFromString = go$pkg.BytePtrFromString = function(s) { return [go$stringToBytes(s, true), null]; };\n\n\t\t\t\tvar envkeys = Object.keys(process.env);\n\t\t\t\tenvs = new (go$sliceType(Go$String))(new Array(envkeys.length));\n\t\t\t\tvar i;\n\t\t\t\tfor(i = 0; i < envkeys.length; i++) {\n\t\t\t\t\tenvs.array[i] = envkeys[i] + \"=\" + process.env[envkeys[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t" }, _key$23 = "toplevelDependencies", _map$12[_key$23] = { k: _key$23, v: "syscall.Syscall syscall.Syscall6 syscall.Syscall9 syscall.Syscall12 syscall.Syscall15 syscall.loadlibrary syscall.getprocaddress syscall.getStdHandle syscall.GetCommandLine syscall.CommandLineToArgv syscall.Getenv syscall.GetTimeZoneInformation syscall.RawSyscall syscall.RawSyscall6 syscall.BytePtrFromString" }, _map$12) };
		_key$26 = "testing", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$26] = { k: _key$26, v: (_map$13 = new Go$Map(), _key$25 = "toplevel", _map$13[_key$25] = { k: _key$25, v: "\n\t\t\tgo$pkg.RunTests2 = function(pkgPath, dir, names, tests) {\n\t\t\t\tif (tests.length === 0) {\n\t\t\t\t\tconsole.log(\"?   \\t\" + pkgPath + \"\\t[no test files]\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tos.Open(dir)[0].Chdir();\n\t\t\t\tvar start = time.Now(), ok = true, i;\n\t\t\t\tfor (i = 0; i < tests.length; i++) {\n\t\t\t\t\tvar t = new T.Ptr(new common.Ptr(undefined, undefined, undefined, undefined, time.Now(), undefined, undefined, undefined), names[i], null);\n\t\t\t\t\tvar err = null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (chatty.go$get()) {\n\t\t\t\t\t\t\tconsole.log(\"=== RUN \" + t.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttests[i](t);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tgo$jsErr = null;\n\t\t\t\t\t\tif (e.go$exit) {\n\t\t\t\t\t\t\t// test failed or skipped\n\t\t\t\t\t\t} else if (e.go$notSupported) {\n\t\t\t\t\t\t\tt.log(e.message);\n\t\t\t\t\t\t\tt.skip();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tt.Fail();\n\t\t\t\t\t\t\t// t.log(e.message);\n\t\t\t\t\t\t\terr = e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tt.common.duration = time.Now().Sub(t.common.start);\n\t\t\t\t\tt.report();\n\t\t\t\t\tif (err !== null) {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t\tok = ok && !t.common.failed;\n\t\t\t\t}\n\t\t\t\tvar duration = time.Now().Sub(start);\n\t\t\t\tfmt.Printf(\"%s\\t%s\\t%.3fs\\n\", new (go$sliceType(go$emptyInterface))([new Go$String(ok ? \"ok  \" : \"FAIL\"), new Go$String(pkgPath), new Go$Float64(duration.Seconds())]));\n\t\t\t\treturn ok;\n\t\t\t};\n\t\t" }, _key$25 = "toplevelDependencies", _map$13[_key$25] = { k: _key$25, v: "os.Open time.Now testing.T testing.common testing.report" }, _map$13) };
		_key$28 = "time", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$28] = { k: _key$28, v: (_map$14 = new Go$Map(), _key$27 = "now", _map$14[_key$27] = { k: _key$27, v: "go$now" }, _key$27 = "After", _map$14[_key$27] = { k: _key$27, v: "function() { go$notSupported(\"time.After (use time.AfterFunc instead)\") }" }, _key$27 = "AfterFunc", _map$14[_key$27] = { k: _key$27, v: "function(d, f) {\n\t\t\tsetTimeout(f, go$div64(d, new Duration(0, 1000000)).low);\n\t\t\treturn null;\n\t\t}" }, _key$27 = "NewTimer", _map$14[_key$27] = { k: _key$27, v: "function() { go$notSupported(\"time.NewTimer (use time.AfterFunc instead)\") }" }, _key$27 = "Sleep", _map$14[_key$27] = { k: _key$27, v: "function() { go$notSupported(\"time.Sleep (use time.AfterFunc instead)\") }" }, _key$27 = "Tick", _map$14[_key$27] = { k: _key$27, v: "function() { go$notSupported(\"time.Tick (use time.AfterFunc instead)\") }" }, _map$14) };
		_key$30 = "github.com/gopherjs/gopherjs/js", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$30] = { k: _key$30, v: (_map$15 = new Go$Map(), _key$29 = "toplevelDependencies", _map$15[_key$29] = { k: _key$29, v: "github.com/gopherjs/gopherjs/js.Error" }, _map$15) };
		_key$32 = "github.com/gopherjs/gopherjs/js_test", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$32] = { k: _key$32, v: (_map$16 = new Go$Map(), _key$31 = "dummys", _map$16[_key$31] = { k: _key$31, v: "{\n\t\t\tsomeBool: true,\n\t\t\tsomeString: \"abc\\u1234\",\n\t\t\tsomeInt: 42,\n\t\t\tsomeFloat: 42.123,\n\t\t\tsomeArray: [41, 42, 43],\n\t\t\tadd: function(a, b) {\n\t\t\t\treturn a + b;\n\t\t\t},\n\t\t\tmapArray: go$mapArray,\n\t\t\ttoUnixTimestamp: function(d) {\n\t\t\t\treturn d.getTime() / 1000;\n\t\t\t},\n\t\t}" }, _map$16) };
		_ref = new (go$sliceType(Go$String))(["abstract", "arguments", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "eval", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "var", "void", "volatile", "while", "with", "yield"]);
		_i = 0;
		while (_i < _ref.length) {
			keyword = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_key$33 = keyword, (reservedKeywords || go$throwRuntimeError("assignment to entry in nil map"))[_key$33] = { k: _key$33, v: true };
			_i++;
		}
		_key$35 = "reflect", (pkgNatives || go$throwRuntimeError("assignment to entry in nil map"))[_key$35] = { k: _key$35, v: (_map$17 = new Go$Map(), _key$34 = "toplevel", _map$17[_key$34] = { k: _key$34, v: "\n\t\t\tvar Invalid = 0;\n\t\t\tvar Bool = 1;\n\t\t\tvar Int = 2;\n\t\t\tvar Int8 = 3;\n\t\t\tvar Int16 = 4;\n\t\t\tvar Int32 = 5;\n\t\t\tvar Int64 = 6;\n\t\t\tvar Uint = 7;\n\t\t\tvar Uint8 = 8;\n\t\t\tvar Uint16 = 9;\n\t\t\tvar Uint32 = 10;\n\t\t\tvar Uint64 = 11;\n\t\t\tvar Uintptr = 12;\n\t\t\tvar Float32 = 13;\n\t\t\tvar Float64 = 14;\n\t\t\tvar Complex64 = 15;\n\t\t\tvar Complex128 = 16;\n\t\t\tvar Array = 17;\n\t\t\tvar Chan = 18;\n\t\t\tvar Func = 19;\n\t\t\tvar Interface = 20;\n\t\t\tvar Map = 21;\n\t\t\tvar Ptr = 22;\n\t\t\tvar Slice = 23;\n\t\t\tvar String = 24;\n\t\t\tvar Struct = 25;\n\t\t\tvar UnsafePointer = 26;\n\n\t\t\tvar RecvDir = 1;\n\t\t\tvar SendDir = 2;\n\t\t\tvar BothDir = 3;\n\n\t\t\tvar flagRO = 1;\n\t\t\tvar flagIndir = 2;\n\t\t\tvar flagAddr = 4;\n\t\t\tvar flagMethod = 8;\n\t\t\tvar flagKindShift = 4;\n\t\t\tvar flagKindWidth = 5;\n\t\t\tvar flagKindMask = 31;\n\t\t\tvar flagMethodShift = 9;\n\n\t\t\tgo$reflect = {\n\t\t\t\trtype: rtype.Ptr, uncommonType: uncommonType.Ptr, method: method.Ptr, arrayType: arrayType.Ptr, chanType: chanType.Ptr, funcType: funcType.Ptr, interfaceType: interfaceType.Ptr, mapType: mapType.Ptr, ptrType: ptrType.Ptr, sliceType: sliceType.Ptr, structType: structType.Ptr,\n\t\t\t\timethod: imethod.Ptr, structField: structField.Ptr,\n\t\t\t\tkinds: { Bool: Bool, Int: Int, Int8: Int8, Int16: Int16, Int32: Int32, Int64: Int64, Uint: Uint, Uint8: Uint8, Uint16: Uint16, Uint32: Uint32, Uint64: Uint64, Uintptr: Uintptr, Float32: Float32, Float64: Float64, Complex64: Complex64, Complex128: Complex128, Array: Array, Chan: Chan, Func: Func, Interface: Interface, Map: Map, Ptr: Ptr, Slice: Slice, String: String, Struct: Struct, UnsafePointer: UnsafePointer },\n\t\t\t\tRecvDir: RecvDir, SendDir: SendDir, BothDir: BothDir\n\t\t\t};\n\n\t\t\tvar isWrapped = function(typ) {\n\t\t\t\tswitch (typ.Kind()) {\n\t\t\t\tcase Bool:\n\t\t\t\tcase Int:\n\t\t\t\tcase Int8:\n\t\t\t\tcase Int16:\n\t\t\t\tcase Int32:\n\t\t\t\tcase Uint:\n\t\t\t\tcase Uint8:\n\t\t\t\tcase Uint16:\n\t\t\t\tcase Uint32:\n\t\t\t\tcase Uintptr:\n\t\t\t\tcase Float32:\n\t\t\t\tcase Float64:\n\t\t\t\tcase Array:\n\t\t\t\tcase Map:\n\t\t\t\tcase Func:\n\t\t\t\tcase String:\n\t\t\t\tcase Struct:\n\t\t\t\t\treturn true;\n\t\t\t\tcase Ptr:\n\t\t\t\t\treturn typ.Elem().Kind() === Array;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\t\t\tvar fieldName = function(field, i) {\n\t\t\t\tif (field.name.go$get === go$throwNilPointerError) {\n\t\t\t\t\tvar ntyp = field.typ;\n\t\t\t\t\tif (ntyp.Kind() === Ptr) {\n\t\t\t\t\t\tntyp = ntyp.Elem().common();\n\t\t\t\t\t}\n\t\t\t\t\treturn ntyp.Name();\n\t\t\t\t}\n\t\t\t\tvar name = field.name.go$get();\n\t\t\t\tif (name === \"_\" || go$reservedKeywords.indexOf(name) != -1) {\n\t\t\t\t\treturn name + \"$\" + i;\n\t\t\t\t}\n\t\t\t\treturn name;\n\t\t\t};\n\t\t\tvar copyStruct = function(dst, src, typ) {\n\t\t\t\tvar fields = typ.structType.fields.array, i;\n\t\t\t\tfor (i = 0; i < fields.length; i++) {\n\t\t\t\t\tvar field = fields[i];\n\t\t\t\t\tvar name = fieldName(field, i);\n\t\t\t\t\tdst[name] = src[name];\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar deepValueEqual = function(v1, v2, visited) {\n\t\t\t\tif (!v1.IsValid() || !v2.IsValid()) {\n\t\t\t\t\treturn !v1.IsValid() && !v2.IsValid();\n\t\t\t\t}\n\t\t\t\tif (v1.Type() !== v2.Type()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar i;\n\t\t\t\tswitch(v1.Kind()) {\n\t\t\t\tcase Array:\n\t\t\t\tcase Map:\n\t\t\t\tcase Slice:\n\t\t\t\tcase Struct:\n\t\t\t\t\tfor (i = 0; i < visited.length; i++) {\n\t\t\t\t\t\tvar entry = visited[i];\n\t\t\t\t\t\tif (v1.val === entry[0] && v2.val === entry[1]) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvisited.push([v1.val, v2.val]);\n\t\t\t\t}\n\n\t\t\t\tswitch(v1.Kind()) {\n\t\t\t\tcase Array:\n\t\t\t\tcase Slice:\n\t\t\t\t\tif (v1.Kind() === Slice) {\n\t\t\t\t\t\tif (v1.IsNil() !== v2.IsNil()) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v1.iword() === v2.iword()) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar n = v1.Len();\n\t\t\t\t\tif (n !== v2.Len()) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\t\t\tif (!deepValueEqual(v1.Index(i), v2.Index(i), visited)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\tcase Interface:\n\t\t\t\t\tif (v1.IsNil() || v2.IsNil()) {\n\t\t\t\t\t\treturn v1.IsNil() && v2.IsNil();\n\t\t\t\t\t}\n\t\t\t\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited);\n\t\t\t\tcase Ptr:\n\t\t\t\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited);\n\t\t\t\tcase Struct:\n\t\t\t\t\tvar n = v1.NumField();\n\t\t\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\t\t\tif (!deepValueEqual(v1.Field(i), v2.Field(i), visited)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\tcase Map:\n\t\t\t\t\tif (v1.IsNil() !== v2.IsNil()) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (v1.iword() === v2.iword()) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tvar keys = v1.MapKeys();\n\t\t\t\t\tif (keys.length !== v2.Len()) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tfor (i = 0; i < keys.length; i++) {\n\t\t\t\t\t\tvar k = keys.array[i];\n\t\t\t\t\t\tif (!deepValueEqual(v1.MapIndex(k), v2.MapIndex(k), visited)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\tcase Func:\n\t\t\t\t\treturn v1.IsNil() && v2.IsNil();\n\t\t\t\t}\n\n\t\t\t\treturn go$interfaceIsEqual(valueInterface(v1, false), valueInterface(v2, false));\n\t\t\t};\n\t\t\tvar zeroVal = function(typ) {\n\t\t\t\tswitch (typ.Kind()) {\n\t\t\t\tcase Bool:\n\t\t\t\t\treturn false;\n\t\t\t\tcase Int:\n\t\t\t\tcase Int8:\n\t\t\t\tcase Int16:\n\t\t\t\tcase Int32:\n\t\t\t\tcase Uint:\n\t\t\t\tcase Uint8:\n\t\t\t\tcase Uint16:\n\t\t\t\tcase Uint32:\n\t\t\t\tcase Uintptr:\n\t\t\t\tcase Float32:\n\t\t\t\tcase Float64:\n\t\t\t\t\treturn 0;\n\t\t\t\tcase Int64:\n\t\t\t\tcase Uint64:\n\t\t\t\tcase Complex64:\n\t\t\t\tcase Complex128:\n\t\t\t\t\treturn new typ.jsType(0, 0);\n\t\t\t\tcase Array:\n\t\t\t\t\tvar elemType = typ.Elem();\n\t\t\t\t\treturn go$makeNativeArray(elemType.jsType.kind, typ.Len(), function() { return zeroVal(elemType); });\n\t\t\t\tcase Func:\n\t\t\t\t\treturn go$throwNilPointerError;\n\t\t\t\tcase Interface:\n\t\t\t\t\treturn null;\n\t\t\t\tcase Map:\n\t\t\t\t\treturn false;\n\t\t\t\tcase Chan:\n\t\t\t\tcase Ptr:\n\t\t\t\tcase Slice:\n\t\t\t\t\treturn typ.jsType.nil;\n\t\t\t\tcase String:\n\t\t\t\t\treturn \"\";\n\t\t\t\tcase Struct:\n\t\t\t\t\treturn new typ.jsType.Ptr();\n\t\t\t\tdefault:\n\t\t\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Zero\", this.kind()));\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar makeIndir = function(t, v) {\n\t\t\t\tif (t.size > 4) {\n\t\t\t\t\treturn go$newDataPointer(v, t.ptrTo().jsType);\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t};\n\t\t" }, _key$34 = "toplevelDependencies", _map$17[_key$34] = { k: _key$34, v: "reflect.rtype reflect.uncommonType reflect.method reflect.arrayType reflect.chanType reflect.funcType reflect.interfaceType reflect.mapType reflect.ptrType reflect.sliceType reflect.structType reflect.imethod reflect.structField reflect.methodReceiver reflect.ValueOf reflect.SliceOf reflect.MakeSlice reflect.valueInterface reflect.makeMethodValue reflect.methodReceiver reflect.typesMustMatch reflect.mustBeAssignable reflect.mustBeExported reflect.mustBe reflect.assignTo" }, _key$34 = "TypeOf", _map$17[_key$34] = { k: _key$34, v: "function(i) {\n\t\t\tif (i === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (i.constructor.kind === undefined) { // js.Object\n\t\t\t\treturn Go$String.reflectType();\n\t\t\t}\n\t\t\treturn i.constructor.reflectType();\n\t\t}" }, _key$34 = "ValueOf", _map$17[_key$34] = { k: _key$34, v: "function(i) {\n\t\t\tif (i === null) {\n\t\t\t\treturn new Value.Ptr();\n\t\t\t}\n\t\t\tif (i.constructor.kind === undefined) { // js.Object\n\t\t\t\treturn new Value.Ptr(Go$String.reflectType(), go$toString(i), String << flagKindShift);\n\t\t\t}\n\t\t\tvar typ = i.constructor.reflectType();\n\t\t\treturn new Value.Ptr(typ, i.go$val, typ.Kind() << flagKindShift);\n\t\t}" }, _key$34 = "arrayOf", _map$17[_key$34] = { k: _key$34, v: "function(n, t) {\n\t\t\treturn go$arrayType(t.jsType, n).reflectType();\n\t\t}" }, _key$34 = "ChanOf", _map$17[_key$34] = { k: _key$34, v: "function(dir, t) {\n\t\t\treturn go$chanType(t.jsType, dir === SendDir, dir === RecvDir).reflectType();\n\t\t}" }, _key$34 = "MapOf", _map$17[_key$34] = { k: _key$34, v: "function(key, elem) {\n\t\t\tswitch (key.Kind()) {\n\t\t\tcase Func:\n\t\t\tcase Map:\n\t\t\tcase Slice:\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.MapOf: invalid key type \" + key.String()));\n\t\t\t}\n\t\t\treturn go$mapType(key.jsType, elem.jsType).reflectType();\n\t\t}" }, _key$34 = "rtype.ptrTo", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\treturn go$ptrType(this.jsType).reflectType();\n\t\t}" }, _key$34 = "SliceOf", _map$17[_key$34] = { k: _key$34, v: "function(t) {\n\t\t\treturn go$sliceType(t.jsType).reflectType();\n\t\t}" }, _key$34 = "Zero", _map$17[_key$34] = { k: _key$34, v: "function(typ) {\n\t\t\treturn new Value.Ptr(typ, zeroVal(typ), typ.Kind() << flagKindShift);\n\t\t}" }, _key$34 = "unsafe_New", _map$17[_key$34] = { k: _key$34, v: "function(typ) {\n\t\t\tswitch (typ.Kind()) {\n\t\t\tcase Struct:\n\t\t\t\treturn new typ.jsType.Ptr();\n\t\t\tcase Array:\n\t\t\t\treturn zeroVal(typ);\n\t\t\tdefault:\n\t\t\t\treturn go$newDataPointer(zeroVal(typ), typ.ptrTo().jsType);\n\t\t\t}\n\t\t}" }, _key$34 = "makechan", _map$17[_key$34] = { k: _key$34, v: "function(typ, size) {\n\t\t\treturn new typ.jsType();\n\t\t}" }, _key$34 = "makeComplex", _map$17[_key$34] = { k: _key$34, v: "function(f, v, typ) {\n\t\t\treturn new Value.Ptr(typ, new typ.jsType(v.real, v.imag), f | (typ.Kind() << flagKindShift));\n\t\t}" }, _key$34 = "MakeFunc", _map$17[_key$34] = { k: _key$34, v: "function(typ, fn) {\n\t\t\tvar fv = function() {\n\t\t\t\tvar args = new Go$Array(typ.NumIn()), i;\n\t\t\t\tfor (i = 0; i < typ.NumIn(); i++) {\n\t\t\t\t\tvar t = typ.In(i);\n\t\t\t\t\targs[i] = new Value.Ptr(t, arguments[i], t.Kind() << flagKindShift);\n\t\t\t\t}\n\t\t\t\tvar resultsSlice = fn(new (go$sliceType(Value.Ptr))(args));\n\t\t\t\tswitch (typ.NumOut()) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn;\n\t\t\t\tcase 1:\n\t\t\t\t\treturn resultsSlice.array[resultsSlice.offset].iword();\n\t\t\t\tdefault:\n\t\t\t\t\tvar results = new Go$Array(typ.NumOut());\n\t\t\t\t\tfor (i = 0; i < typ.NumOut(); i++) {\n\t\t\t\t\t\tresults[i] = resultsSlice.array[resultsSlice.offset + i].iword();\n\t\t\t\t\t}\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\t\t  return new Value.Ptr(typ, fv, Func << flagKindShift);\n\t\t}" }, _key$34 = "makeInt", _map$17[_key$34] = { k: _key$34, v: "function(f, bits, typ) {\n\t\t\tvar val;\n\t\t\tswitch (typ.Kind()) {\n\t\t\tcase Int8:\n\t\t\t\tval = bits.low << 24 >> 24;\n\t\t\t\tbreak;\n\t\t\tcase Int16:\n\t\t\t\tval = bits.low << 16 >> 16;\n\t\t\t\tbreak;\n\t\t\tcase Int:\n\t\t\tcase Int32:\n\t\t\t\tval = bits.low >> 0;\n\t\t\t\tbreak;\n\t\t\tcase Int64:\n\t\t\t\treturn new Value.Ptr(typ, go$newDataPointer(new Go$Int64(bits.high, bits.low), typ.ptrTo().jsType), f | flagIndir | (Int64 << flagKindShift));\n\t\t\tcase Uint8:\n\t\t\t\tval = bits.low << 24 >>> 24;\n\t\t\t\tbreak;\n\t\t\tcase Uint16:\n\t\t\t\tval = bits.low << 16 >>> 16;\n\t\t\t\tbreak;\n\t\t\tcase Uint64:\n\t\t\t\treturn new Value.Ptr(typ, go$newDataPointer(bits, typ.ptrTo().jsType), f | flagIndir | (Int64 << flagKindShift));\n\t\t\tcase Uint:\n\t\t\tcase Uint32:\n\t\t\tcase Uintptr:\n\t\t\t\tval = bits.low >>> 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn new Value.Ptr(typ, val, f | (typ.Kind() << flagKindShift));\n\t\t}" }, _key$34 = "MakeSlice", _map$17[_key$34] = { k: _key$34, v: "function(typ, len, cap) {\n\t\t\tif (typ.Kind() !== Slice) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.MakeSlice of non-slice type\"));\n\t\t\t}\n\t\t\tif (len < 0) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.MakeSlice: negative len\"));\n\t\t\t}\n\t\t\tif (cap < 0) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.MakeSlice: negative cap\"));\n\t\t\t}\n\t\t\tif (len > cap) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.MakeSlice: len > cap\"));\n\t\t\t}\n\t\t\treturn new Value.Ptr(typ.common(), typ.jsType.make(len, cap, function() { return zeroVal(typ.Elem()); }), Slice << flagKindShift);\n\t\t}" }, _key$34 = "cvtDirect", _map$17[_key$34] = { k: _key$34, v: "function(v, typ) {\n\t\t\tvar srcVal = v.iword();\n\t\t\tif (srcVal === v.typ.jsType.nil) {\n\t\t\t\treturn new Value.Ptr(typ, typ.jsType.nil, v.flag);\n\t\t\t}\n\n\t\t\tvar val;\n\t\t\tswitch (typ.Kind()) {\n\t\t\tcase Chan:\n\t\t\t\tval = new typ.jsType();\n\t\t\t\tbreak;\n\t\t\tcase Slice:\n\t\t\t\tval = new typ.jsType(srcVal.array);\n\t\t\t\tval.length = srcVal.length;\n\t\t\t\tval.cap = srcVal.cap;\n\t\t\t\tbreak;\n\t\t\tcase Ptr:\n\t\t\t\tif (typ.Elem().Kind() === Struct) {\n\t\t\t\t\tif (typ.Elem() === v.typ.Elem()) {\n\t\t\t\t\t\tval = srcVal;\n\t\t\t\t\t}\n\t\t\t\t\tval = new typ.jsType();\n\t\t\t\t\tcopyStruct(val, srcVal, typ.Elem());\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tval = new typ.jsType(srcVal.go$get, srcVal.go$set);\n\t\t\t\tbreak;\n\t\t\tcase Struct:\n\t\t\t\tval = new typ.jsType.Ptr();\n\t\t\t\tcopyStruct(val, srcVal, typ);\n\t\t\t\tbreak;\n\t\t\tcase Array:\n\t\t\tcase Func:\n\t\t\tcase Interface:\n\t\t\tcase Map:\n\t\t\tcase String:\n\t\t\t\tval = srcVal;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Convert\", typ.Kind()));\n\t\t\t}\n\t\t\treturn new Value.Ptr(typ, val, (v.flag & flagRO) | (typ.Kind() << flagKindShift));\n\t\t}" }, _key$34 = "cvtStringBytes", _map$17[_key$34] = { k: _key$34, v: "function(v, typ) {\n\t\t\treturn new Value.Ptr(typ, new typ.jsType(go$stringToBytes(v.iword())), (v.flag & flagRO) | (Slice << flagKindShift));\n\t\t}" }, _key$34 = "cvtStringRunes", _map$17[_key$34] = { k: _key$34, v: "function(v, typ) {\n\t\t\treturn new Value.Ptr(typ, new typ.jsType(go$stringToRunes(v.iword())), (v.flag & flagRO) | (Slice << flagKindShift));\n\t\t}" }, _key$34 = "makemap", _map$17[_key$34] = { k: _key$34, v: "function(t) {\n\t\t\treturn new Go$Map();\n\t\t}" }, _key$34 = "mapaccess", _map$17[_key$34] = { k: _key$34, v: "function(t, m, key) {\n\t\t\tvar entry = m[key.go$key ? key.go$key() : key];\n\t\t\tif (entry === undefined) {\n\t\t\t\treturn [undefined, false];\n\t\t\t}\n\t\t\treturn [makeIndir(t.Elem(), entry.v), true];\n\t\t}" }, _key$34 = "mapassign", _map$17[_key$34] = { k: _key$34, v: "function(t, m, key, val, ok) {\n\t\t\tif (!ok) {\n\t\t\t\tdelete m[key.go$key ? key.go$key() : key];\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (t.Elem().kind === Struct) {\n\t\t\t\tvar newVal = {};\n\t\t\t\tcopyStruct(newVal, val, t.Elem());\n\t\t\t\tval = newVal;\n\t\t\t}\n\t\t\tm[key.go$key ? key.go$key() : key] = { k: key, v: val };\n\t\t}" }, _key$34 = "maplen", _map$17[_key$34] = { k: _key$34, v: "function(m) {\n\t\t\treturn go$keys(m).length;\n\t\t}" }, _key$34 = "mapiterinit", _map$17[_key$34] = { k: _key$34, v: "function(t, m) {\n\t\t\treturn {t: t, m: m, keys: go$keys(m), i: 0};\n\t\t}" }, _key$34 = "mapiterkey", _map$17[_key$34] = { k: _key$34, v: "function(it) {\n\t\t\tvar key = it.keys[it.i];\n\t\t\treturn [makeIndir(it.t.Key(), it.m[key].k), true];\n\t\t}" }, _key$34 = "mapiternext", _map$17[_key$34] = { k: _key$34, v: "function(it) {\n\t\t\tit.i++;\n\t\t}" }, _key$34 = "chancap", _map$17[_key$34] = { k: _key$34, v: "function(ch) { go$notSupported(\"channels\"); }" }, _key$34 = "chanclose", _map$17[_key$34] = { k: _key$34, v: "function(ch) { go$notSupported(\"channels\"); }" }, _key$34 = "chanlen", _map$17[_key$34] = { k: _key$34, v: "function(ch) { go$notSupported(\"channels\"); }" }, _key$34 = "chanrecv", _map$17[_key$34] = { k: _key$34, v: "function(t, ch, nb) { go$notSupported(\"channels\"); }" }, _key$34 = "chansend", _map$17[_key$34] = { k: _key$34, v: "function(t, ch, val, nb) { go$notSupported(\"channels\"); }" }, _key$34 = "valueInterface", _map$17[_key$34] = { k: _key$34, v: "function(v, safe) {\n\t\t\tif (v.flag === 0) {\n\t\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.Interface\", 0));\n\t\t\t}\n\t\t\tif (safe && (v.flag & flagRO) !== 0) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.Value.Interface: cannot return value obtained from unexported field or method\"))\n\t\t\t}\n\t\t\tif ((v.flag & flagMethod) !== 0) {\n\t\t\t\tv = makeMethodValue(\"Interface\", v);\n\t\t\t}\n\t\t\tif (isWrapped(v.typ)) {\n\t\t\t\treturn new v.typ.jsType(v.iword());\n\t\t\t}\n\t\t\treturn v.iword();\n\t\t}" }, _key$34 = "makeMethodValue", _map$17[_key$34] = { k: _key$34, v: "function(op, v) {\n\t\t\tif ((v.flag & flagMethod) === 0) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect: internal error: invalid use of makePartialFunc\"));\n\t\t\t}\n\n\t\t\tvar tuple = methodReceiver(op, v, v.flag >> flagMethodShift);\n\t\t\tvar fn = tuple[1];\n\t\t\tvar rcvr = tuple[2];\n\t\t\tvar fv = function() { return fn.apply(rcvr, arguments); };\n\t\t\treturn new Value.Ptr(v.Type(), fv, (v.flag & flagRO) | (Func << flagKindShift));\n\t\t}" }, _key$34 = "methodReceiver", _map$17[_key$34] = { k: _key$34, v: "function(op, v, i) {\n\t\t\tvar m, t;\n\t\t\tif (v.typ.Kind() === Interface) {\n\t\t\t\tvar tt = v.typ.interfaceType;\n\t\t\t\tif (i < 0 || i >= tt.methods.length) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: internal error: invalid method index\"));\n\t\t\t\t}\n\t\t\t\tif (v.IsNil()) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: \" + op + \" of method on nil interface value\"));\n\t\t\t\t}\n\t\t\t\tm = tt.methods.array[i];\n\t\t\t\tt = m.typ;\n\t\t\t} else {\n\t\t\t\tvar ut = v.typ.uncommon();\n\t\t\t\tif (ut === uncommonType.Ptr.nil || i < 0 || i >= ut.methods.length) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: internal error: invalid method index\"));\n\t\t\t\t}\n\t\t\t\tm = ut.methods.array[i];\n\t\t\t\tt = m.mtyp;\n\t\t\t}\n\t\t\tif (m.pkgPath.go$get !== go$throwNilPointerError) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect: \" + op + \" of unexported method\"));\n\t\t\t}\n\t\t\tvar name = m.name.go$get()\n\t\t\tif (go$reservedKeywords.indexOf(name) !== -1) {\n\t\t\t\tname += \"$\";\n\t\t\t}\n\t\t\tvar rcvr = v.iword();\n\t\t\tif (isWrapped(v.typ)) {\n\t\t\t\trcvr = new v.typ.jsType(rcvr);\n\t\t\t}\n\t\t\treturn [t, rcvr[name], rcvr];\n\t\t}" }, _key$34 = "ifaceE2I", _map$17[_key$34] = { k: _key$34, v: "function(t, src, dst) {\n\t\t\tdst.go$set(src);\n\t\t}" }, _key$34 = "methodName", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\treturn \"?FIXME?\";\n\t\t}" }, _key$34 = "Copy", _map$17[_key$34] = { k: _key$34, v: "function(dst, src) {\n\t\t\tvar dk = dst.kind();\n\t\t\tif (dk !== Array && dk !== Slice) {\n\t\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Copy\", dk));\n\t\t\t}\n\t\t\tif (dk === Array) {\n\t\t\t\tdst.mustBeAssignable();\n\t\t\t}\n\t\t\tdst.mustBeExported();\n\n\t\t\tvar sk = src.kind();\n\t\t\tif (sk !== Array && sk != Slice) {\n\t\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Copy\", sk));\n\t\t\t}\n\t\t\tsrc.mustBeExported();\n\n\t\t\ttypesMustMatch(\"reflect.Copy\", dst.typ.Elem(), src.typ.Elem());\n\n\t\t\tvar dstVal = dst.iword();\n\t\t\tif (dk === Array) {\n\t\t\t\tdstVal = new (go$sliceType(dst.typ.Elem().jsType))(dstVal);\n\t\t\t}\n\t\t\tvar srcVal = src.iword();\n\t\t\tif (sk === Array) {\n\t\t\t\tsrcVal = new (go$sliceType(src.typ.Elem().jsType))(srcVal);\n\t\t\t}\n\t\t\treturn go$copySlice(dstVal, srcVal);\n\t\t}" }, _key$34 = "uncommonType.Method", _map$17[_key$34] = { k: _key$34, v: "function(i) {\n\t\t\tif (this === uncommonType.Ptr.nil || i < 0 || i >= this.methods.length) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect: Method index out of range\"));\n\t\t\t}\n\t\t\tvar p = this.methods.array[i];\n\t\t\tvar fl = Func << flagKindShift;\n\t\t\tvar pkgPath = \"\";\n\t\t\tif (p.pkgPath.go$get !== go$throwNilPointerError) {\n\t\t\t\tpkgPath = p.pkgPath.go$get();\n\t\t\t\tfl |= flagRO;\n\t\t\t}\n\t\t\tvar mt = p.typ;\n\t\t\tvar name = p.name.go$get();\n\t\t\tif (go$reservedKeywords.indexOf(name) !== -1) {\n\t\t\t\tname += \"$\";\n\t\t\t}\n\t\t\tvar fn = function(rcvr) {\n\t\t\t\treturn rcvr[name].apply(rcvr, Go$Array.prototype.slice.apply(arguments, [1]));\n\t\t\t}\n\t\t\treturn new Method.Ptr(p.name.go$get(), pkgPath, mt, new Value.Ptr(mt, fn, fl), i);\n\t\t}" }, _key$34 = "Value.iword", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\tif ((this.flag & flagIndir) !== 0 && this.typ.Kind() !== Array && this.typ.Kind() !== Struct) {\n\t\t\t\treturn this.val.go$get();\n\t\t\t}\n\t\t\treturn this.val;\n\t\t}" }, _key$34 = "Value.Bytes", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\tthis.mustBe(Slice);\n\t\t\tif (this.typ.Elem().Kind() !== Uint8) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.Value.Bytes of non-byte slice\"));\n\t\t\t}\n\t\t\treturn this.iword();\n\t\t}" }, _key$34 = "Value.call", _map$17[_key$34] = { k: _key$34, v: "function(op, args) {\n\t\t\tvar t = this.typ, fn, rcvr;\n\n\t\t\tif ((this.flag & flagMethod) !== 0) {\n\t\t\t\tvar tuple = methodReceiver(op, this, this.flag >> flagMethodShift);\n\t\t\t\tt = tuple[0];\n\t\t\t\tfn = tuple[1];\n\t\t\t\trcvr = tuple[2];\n\t\t\t} else {\n\t\t\t\tfn = this.iword();\n\t\t\t}\n\n\t\t\tif (fn === go$throwNilPointerError) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.Value.Call: call of nil function\"));\n\t\t\t}\n\n\t\t\tvar isSlice = (op === \"CallSlice\");\n\t\t\tvar n = t.NumIn();\n\t\t\tif (isSlice) {\n\t\t\t\tif (!t.IsVariadic()) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: CallSlice of non-variadic function\"));\n\t\t\t\t}\n\t\t\t\tif (args.length < n) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: CallSlice with too few input arguments\"));\n\t\t\t\t}\n\t\t\t\tif (args.length > n) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: CallSlice with too many input arguments\"));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (t.IsVariadic()) {\n\t\t\t\t\tn--;\n\t\t\t\t}\n\t\t\t\tif (args.length < n) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: Call with too few input arguments\"));\n\t\t\t\t}\n\t\t\t\tif (!t.IsVariadic() && args.length > n) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: Call with too many input arguments\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < args.length; i++) {\n\t\t\t\tif (args.array[args.offset + i].Kind() === Invalid) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: \" + op + \" using zero Value argument\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\tvar xt = args.array[args.offset + i].Type(), targ = t.In(i);\n\t\t\t\tif (!xt.AssignableTo(targ)) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: \" + op + \" using \" + xt.String() + \" as type \" + targ.String()));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!isSlice && t.IsVariadic()) {\n\t\t\t\tvar m = args.length - n;\n\t\t\t\tvar slice = MakeSlice(t.In(n), m, m);\n\t\t\t\tvar elem = t.In(n).Elem();\n\t\t\t\tfor (i = 0; i < m; i++) {\n\t\t\t\t\tvar x = args.array[args.offset + n + i];\n\t\t\t\t\tvar xt = x.Type();\n\t\t\t\t\tif (!xt.AssignableTo(elem)) {\n\t\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: cannot use \" + xt.String() + \" as type \" + elem.String() + \" in \" + op));\n\t\t\t\t\t}\n\t\t\t\t\tslice.Index(i).Set(x);\n\t\t\t\t}\n\t\t\t\targs = new (go$sliceType(Value))(go$sliceToArray(args).slice(0, n).concat([slice]));\n\t\t\t}\n\n\t\t\tif (args.length !== t.NumIn()) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.Value.Call: wrong argument count\"));\n\t\t\t}\n\n\t\t\tvar argsArray = new Go$Array(t.NumIn());\n\t\t\tfor (i = 0; i < t.NumIn(); i++) {\n\t\t\t\targsArray[i] = args.array[args.offset + i].assignTo(\"reflect.Value.Call\", t.In(i), go$ptrType(go$emptyInterface).nil).iword();\n\t\t\t}\n\t\t\tvar results = fn.apply(rcvr, argsArray);\n\t\t\tif (t.NumOut() === 0) {\n\t\t\t\tresults = [];\n\t\t\t} else if (t.NumOut() === 1) {\n\t\t\t\tresults = [results];\n\t\t\t}\n\t\t\tfor (i = 0; i < t.NumOut(); i++) {\n\t\t\t\tvar typ = t.Out(i);\n\t\t\t\tvar flag = typ.Kind() << flagKindShift;\n\t\t\t\tresults[i] = new Value.Ptr(typ, results[i], flag);\n\t\t\t}\n\t\t\treturn new (go$sliceType(Value))(results);\n\t\t}" }, _key$34 = "Value.Cap", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\tvar k = this.kind();\n\t\t\tswitch (k) {\n\t\t\tcase Slice:\n\t\t\t\treturn this.iword().capacity;\n\t\t\t}\n\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.Cap\", k));\n\t\t}" }, _key$34 = "Value.Complex", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\treturn this.iword();\n\t\t}" }, _key$34 = "Value.Elem", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\tswitch (this.kind()) {\n\t\t\tcase Interface:\n\t\t\t\tvar val = this.iword();\n\t\t\t\tif (val === null) {\n\t\t\t\t\treturn new Value.Ptr();\n\t\t\t\t}\n\t\t\t\tif (val.constructor.kind === undefined) { // js.Object\n\t\t\t\t\treturn new Value.Ptr(Go$String.reflectType(), go$toString(val), String << flagKindShift);\n\t\t\t\t}\n\t\t\t\tvar typ = val.constructor.reflectType();\n\t\t\t\tvar fl = this.flag & flagRO;\n\t\t\t\tfl |= typ.Kind() << flagKindShift;\n\t\t\t\treturn new Value.Ptr(typ, val.go$val, fl);\n\n\t\t\tcase Ptr:\n\t\t\t\tvar val = this.iword();\n\t\t\t\tif (this.IsNil()) {\n\t\t\t\t\treturn new Value.Ptr();\n\t\t\t\t}\n\t\t\t\tvar tt = this.typ.ptrType;\n\t\t\t\tvar fl = (this.flag & flagRO) | flagIndir | flagAddr;\n\t\t\t\tfl |= tt.elem.Kind() << flagKindShift;\n\t\t\t\treturn new Value.Ptr(tt.elem, val, fl);\n\t\t\t}\n\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.Elem\", this.kind()));\n\t\t}" }, _key$34 = "Value.Field", _map$17[_key$34] = { k: _key$34, v: "function(i) {\n\t\t\tthis.mustBe(Struct);\n\t\t\tvar tt = this.typ.structType;\n\t\t\tif (i < 0 || i >= tt.fields.length) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect: Field index out of range\"));\n\t\t\t}\n\t\t\tvar field = tt.fields.array[i];\n\t\t\tvar name = fieldName(field, i);\n\t\t\tvar typ = field.typ;\n\t\t\tvar fl = this.flag & (flagRO | flagIndir | flagAddr);\n\t\t\tif (field.pkgPath.go$get !== go$throwNilPointerError) {\n\t\t\t\tfl |= flagRO;\n\t\t\t}\n\t\t\tfl |= typ.Kind() << flagKindShift;\n\t\t\tif ((this.flag & flagIndir) !== 0 && typ.Kind() !== Array && typ.Kind() !== Struct) {\n\t\t\t\tvar struct = this.val;\n\t\t\t\treturn new Value.Ptr(typ, new (go$ptrType(typ.jsType))(function() { return struct[name]; }, function(v) { struct[name] = v; }), fl);\n\t\t\t}\n\t\t\treturn new Value.Ptr(typ, this.val[name], fl);\n\t\t}" }, _key$34 = "Value.Index", _map$17[_key$34] = { k: _key$34, v: "function(i) {\n\t\t\tvar k = this.kind();\n\t\t\tswitch (k) {\n\t\t\tcase Array:\n\t\t\t\tvar tt = this.typ.arrayType;\n\t\t\t\tif (i < 0 || i >= tt.len) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: array index out of range\"));\n\t\t\t\t}\n\t\t\t\tvar typ = tt.elem;\n\t\t\t\tvar fl = this.flag & (flagRO | flagIndir | flagAddr);\n\t\t\t\tfl |= typ.Kind() << flagKindShift;\n\t\t\t\tif ((this.flag & flagIndir) !== 0 && typ.Kind() !== Array && typ.Kind() !== Struct) {\n\t\t\t\t\tvar array = this.val;\n\t\t\t\t\treturn new Value.Ptr(typ, new (go$ptrType(typ.jsType))(function() { return array[i]; }, function(v) { array[i] = v; }), fl);\n\t\t\t\t}\n\t\t\t\treturn new Value.Ptr(typ, this.iword()[i], fl);\n\t\t\tcase Slice:\n\t\t\t\tif (i < 0 || i >= this.iword().length) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: slice index out of range\"));\n\t\t\t\t}\n\t\t\t\tvar typ = this.typ.sliceType.elem;\n\t\t\t\tvar fl = flagAddr | flagIndir | (this.flag & flagRO);\n\t\t\t\tfl |= typ.Kind() << flagKindShift;\n\t\t\t\ti += this.iword().offset;\n\t\t\t\tvar array = this.iword().array;\n\t\t\t\tif (typ.Kind() === Struct) {\n\t\t\t\t\treturn new Value.Ptr(typ, array[i], fl);\n\t\t\t\t}\n\t\t\t\treturn new Value.Ptr(typ, new (go$ptrType(typ.jsType))(function() { return array[i]; }, function(v) { array[i] = v; }), fl);\n\t\t\tcase String:\n\t\t\t\tvar string = this.iword();\n\t\t\t\tif (i < 0 || i >= string.length) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect: string index out of range\"));\n\t\t\t\t}\n\t\t\t\tvar fl = (this.flag & flagRO) | (Uint8 << flagKindShift);\n\t\t\t\treturn new Value.Ptr(uint8Type, string.charCodeAt(i), fl);\n\t\t\t}\n\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.Index\", k));\n\t\t}" }, _key$34 = "Value.IsNil", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\tswitch (this.kind()) {\n\t\t\tcase Chan:\n\t\t\tcase Ptr:\n\t\t\tcase Slice:\n\t\t\t\treturn this.iword() === this.typ.jsType.nil;\n\t\t\tcase Func:\n\t\t\t\treturn this.iword() === go$throwNilPointerError;\n\t\t\tcase Map:\n\t\t\t\treturn this.iword() === false;\n\t\t\tcase Interface:\n\t\t\t\treturn this.iword() === null;\n\t\t\t}\n\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.IsNil\", this.kind()));\n\t\t}" }, _key$34 = "Value.Len", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\tvar k = this.kind();\n\t\t\tswitch (k) {\n\t\t\tcase Array:\n\t\t\tcase Slice:\n\t\t\tcase String:\n\t\t\t\treturn this.iword().length;\n\t\t\tcase Map:\n\t\t\t\treturn go$keys(this.iword()).length;\n\t\t\t}\n\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.Len\", k));\n\t\t}" }, _key$34 = "Value.runes", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\tthis.mustBe(Slice);\n\t\t\tif (this.typ.Elem().Kind() !== Int32) {\n\t\t\t\tthrow new go$panic(new Go$String(\"reflect.Value.Bytes of non-rune slice\"));\n\t\t\t}\n\t\t\treturn this.iword();\n\t\t}" }, _key$34 = "Value.Pointer", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\tvar k = this.kind();\n\t\t\tswitch (k) {\n\t\t\tcase Chan:\n\t\t\tcase Map:\n\t\t\tcase Ptr:\n\t\t\tcase Slice:\n\t\t\tcase UnsafePointer:\n\t\t\t\tif (this.IsNil()) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn this.iword();\n\t\t\tcase Func:\n\t\t\t\tif (this.IsNil()) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.Pointer\", k));\n\t\t}" }, _key$34 = "Value.Set", _map$17[_key$34] = { k: _key$34, v: "function(x) {\n\t\t\tthis.mustBeAssignable();\n\t\t\tx.mustBeExported();\n\t\t\tif ((this.flag & flagIndir) !== 0) {\n\t\t\t\tswitch (this.typ.Kind()) {\n\t\t\t\tcase Array:\n\t\t\t\t\tgo$copyArray(this.val, x.val);\n\t\t\t\t\treturn;\n\t\t\t\tcase Interface:\n\t\t\t\t\tthis.val.go$set(valueInterface(x, false));\n\t\t\t\t\treturn;\n\t\t\t\tcase Struct:\n\t\t\t\t\tcopyStruct(this.val, x.val, this.typ);\n\t\t\t\t\treturn;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.val.go$set(x.iword());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.val = x.val;\n\t\t}" }, _key$34 = "Value.SetInt", _map$17[_key$34] = { k: _key$34, v: "function(x) {\n\t\t\tthis.mustBeAssignable();\n\t\t\tvar k = this.kind();\n\t\t\tswitch (k) {\n\t\t\tcase Int:\n\t\t\tcase Int8:\n\t\t\tcase Int16:\n\t\t\tcase Int32:\n\t\t\t\tthis.val.go$set(go$flatten64(x));\n\t\t\t\treturn;\n\t\t\tcase Int64:\n\t\t\t\tthis.val.go$set(new this.typ.jsType(x.high, x.low));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.SetInt\", k));\n\t\t}" }, _key$34 = "Value.SetUint", _map$17[_key$34] = { k: _key$34, v: "function(x) {\n\t\t\tthis.mustBeAssignable();\n\t\t\tvar k = this.kind();\n\t\t\tswitch (k) {\n\t\t\tcase Uint:\n\t\t\tcase Uint8:\n\t\t\tcase Uint16:\n\t\t\tcase Uint32:\n\t\t\tcase Uintptr:\n\t\t\t\tthis.val.go$set(x.low);\n\t\t\t\treturn;\n\t\t\tcase Uint64:\n\t\t\t\tthis.val.go$set(new this.typ.jsType(x.high, x.low));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.SetUint\", k));\n\t\t}" }, _key$34 = "Value.SetComplex", _map$17[_key$34] = { k: _key$34, v: "function(x) {\n\t\t\tthis.mustBeAssignable();\n\t\t\tvar k = this.kind();\n\t\t\tswitch (k) {\n\t\t\tcase Complex64:\n\t\t\tcase Complex128:\n\t\t\t\tthis.val.go$set(new this.typ.jsType(x.real, x.imag));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.SetComplex\", k));\n\t\t}" }, _key$34 = "Value.SetCap", _map$17[_key$34] = { k: _key$34, v: "function(n) {\n\t\t\tthis.mustBeAssignable();\n\t\t\tthis.mustBe(Slice);\n\t\t\tvar s = this.val.go$get();\n\t\t\tif (n < s.length || n > s.capacity) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect: slice capacity out of range in SetCap\"));\n\t\t\t}\n\t\t\tvar newSlice = new this.typ.jsType(s.array);\n\t\t\tnewSlice.offset = s.offset;\n\t\t\tnewSlice.length = s.length;\n\t\t\tnewSlice.capacity = n;\n\t\t\tthis.val.go$set(newSlice);\n\t\t}" }, _key$34 = "Value.SetLen", _map$17[_key$34] = { k: _key$34, v: "function(n) {\n\t\t\tthis.mustBeAssignable();\n\t\t\tthis.mustBe(Slice);\n\t\t\tvar s = this.val.go$get();\n\t\t\tif (n < 0 || n > s.capacity) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect: slice length out of range in SetLen\"));\n\t\t\t}\n\t\t\tvar newSlice = new this.typ.jsType(s.array);\n\t\t\tnewSlice.offset = s.offset;\n\t\t\tnewSlice.length = n;\n\t\t\tnewSlice.capacity = s.capacity;\n\t\t\tthis.val.go$set(newSlice);\n\t\t}" }, _key$34 = "Value.Slice", _map$17[_key$34] = { k: _key$34, v: "function(i, j) {\n\t\t\tvar typ, s, cap;\n\t\t\tvar kind = this.kind();\n\t\t\tswitch (kind) {\n\t\t\tcase Array:\n\t\t\t\tif ((this.flag & flagAddr) === 0) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect.Value.Slice: slice of unaddressable array\"));\n\t\t\t\t}\n\t\t\t\tvar tt = this.typ.arrayType;\n\t\t\t\tcap = tt.len;\n\t\t\t\ttyp = SliceOf(tt.elem);\n\t\t\t\ts = new typ.jsType(this.iword());\n\t\t\t\tbreak;\n\t\t\tcase Slice:\n\t\t\t\ttyp = this.typ.sliceType;\n\t\t\t\ts = this.iword();\n\t\t\t\tcap = s.capacity;\n\t\t\t\tbreak;\n\t\t\tcase String:\n\t\t\t\ts = this.iword();\n\t\t\t\tif (i < 0 || j < i || j > s.length) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect.Value.Slice: string slice index out of bounds\"));\n\t\t\t\t}\n\t\t\t\treturn new Value.Ptr(this.typ, s.substring(i, j), this.flag);\n\t\t\tdefault:\n\t\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.Slice\", kind));\n\t\t\t}\n\n\t\t\tif (i < 0 || j < i || j > cap) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.Value.Slice: slice index out of bounds\"));\n\t\t\t}\n\n\t\t\tvar fl = (this.flag & flagRO) | (Slice << flagKindShift);\n\t\t\treturn new Value.Ptr(typ.common(), go$subslice(s, i, j), fl);\n\t\t}" }, _key$34 = "Value.Slice3", _map$17[_key$34] = { k: _key$34, v: "function(i, j, k) {\n\t\t\tvar typ, s, cap;\n\t\t\tvar kind = this.kind();\n\t\t\tswitch (kind) {\n\t\t\tcase Array:\n\t\t\t\tif ((this.flag & flagAddr) === 0) {\n\t\t\t\t\tthrow go$panic(new Go$String(\"reflect.Value.Slice3: slice of unaddressable array\"));\n\t\t\t\t}\n\t\t\t\tvar tt = this.typ.arrayType;\n\t\t\t\tcap = tt.len;\n\t\t\t\ttyp = SliceOf(tt.elem);\n\t\t\t\ts = new typ.jsType(this.iword());\n\t\t\t\tbreak;\n\t\t\tcase Slice:\n\t\t\t\ttyp = this.typ.sliceType;\n\t\t\t\ts = this.iword();\n\t\t\t\tcap = s.capacity;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow go$panic(new ValueError.Ptr(\"reflect.Value.Slice3\", kind));\n\t\t\t}\n\n\t\t\tif (i < 0 || j < i || k < j || k > cap) {\n\t\t\t\tthrow go$panic(new Go$String(\"reflect.Value.Slice3: slice index out of bounds\"));\n\t\t\t}\n\n\t\t\tvar fl = (this.flag & flagRO) | (Slice << flagKindShift);\n\t\t\treturn new Value.Ptr(typ.common(), go$subslice(s, i, j, k), fl);\n\t\t}" }, _key$34 = "Value.String", _map$17[_key$34] = { k: _key$34, v: "function() {\n\t\t\tswitch (this.kind()) {\n\t\t\tcase Invalid:\n\t\t\t\treturn \"<invalid Value>\";\n\t\t\tcase String:\n\t\t\t\treturn this.iword();\n\t\t\t}\n\t\t\treturn \"<\" + this.typ.String() + \" Value>\";\n\t\t}" }, _key$34 = "DeepEqual", _map$17[_key$34] = { k: _key$34, v: "function(a1, a2) {\n\t\t\tif (a1 === a2) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (a1 === null || a2 === null || a1.constructor !== a2.constructor) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn deepValueEqual(ValueOf(a1), ValueOf(a2), []);\n\t\t}" }, _map$17) };
	}
	return go$pkg;
})();
go$packages["text/tabwriter"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], io = go$packages["io"], utf8 = go$packages["unicode/utf8"], cell, Writer, osError, handlePanic, NewWriter, newline, tabs, vbar, hbar;
	cell = go$pkg.cell = go$newType(0, "Struct", "tabwriter.cell", "cell", "text/tabwriter", function(size_, width_, htab_) {
		this.go$val = this;
		this.size = size_ !== undefined ? size_ : 0;
		this.width = width_ !== undefined ? width_ : 0;
		this.htab = htab_ !== undefined ? htab_ : false;
	});
	Writer = go$pkg.Writer = go$newType(0, "Struct", "tabwriter.Writer", "Writer", "text/tabwriter", function(output_, minwidth_, tabwidth_, padding_, padbytes_, flags_, buf_, pos_, cell_, endChar_, lines_, widths_) {
		this.go$val = this;
		this.output = output_ !== undefined ? output_ : null;
		this.minwidth = minwidth_ !== undefined ? minwidth_ : 0;
		this.tabwidth = tabwidth_ !== undefined ? tabwidth_ : 0;
		this.padding = padding_ !== undefined ? padding_ : 0;
		this.padbytes = padbytes_ !== undefined ? padbytes_ : go$makeNativeArray("Uint8", 8, function() { return 0; });
		this.flags = flags_ !== undefined ? flags_ : 0;
		this.buf = buf_ !== undefined ? buf_ : new bytes.Buffer.Ptr();
		this.pos = pos_ !== undefined ? pos_ : 0;
		this.cell = cell_ !== undefined ? cell_ : new cell.Ptr();
		this.endChar = endChar_ !== undefined ? endChar_ : 0;
		this.lines = lines_ !== undefined ? lines_ : (go$sliceType((go$sliceType(cell)))).nil;
		this.widths = widths_ !== undefined ? widths_ : (go$sliceType(Go$Int)).nil;
	});
	osError = go$pkg.osError = go$newType(0, "Struct", "tabwriter.osError", "osError", "text/tabwriter", function(err_) {
		this.go$val = this;
		this.err = err_ !== undefined ? err_ : null;
	});
	Writer.Ptr.prototype.addLine = function() {
		var b;
		b = this;
		b.lines = go$append(b.lines, new (go$sliceType(cell))([]));
	};
	Writer.prototype.addLine = function() { return this.go$val.addLine(); };
	Writer.Ptr.prototype.reset = function() {
		var b;
		b = this;
		b.buf.Reset();
		b.pos = 0;
		b.cell = new cell.Ptr(0, 0, false);
		b.endChar = 0;
		b.lines = go$subslice(b.lines, 0, 0);
		b.widths = go$subslice(b.widths, 0, 0);
		b.addLine();
	};
	Writer.prototype.reset = function() { return this.go$val.reset(); };
	Writer.Ptr.prototype.Init = function(output, minwidth, tabwidth, padding, padchar, flags) {
		var b, _ref, _i, i;
		b = this;
		if (minwidth < 0 || tabwidth < 0 || padding < 0) {
			throw go$panic(new Go$String("negative minwidth, tabwidth, or padding"));
		}
		b.output = output;
		b.minwidth = minwidth;
		b.tabwidth = tabwidth;
		b.padding = padding;
		_ref = b.padbytes;
		_i = 0;
		while (_i < 8) {
			i = _i;
			b.padbytes[i] = padchar;
			_i++;
		}
		if (padchar === 9) {
			flags = flags & ~4;
		}
		b.flags = flags;
		b.reset();
		return b;
	};
	Writer.prototype.Init = function(output, minwidth, tabwidth, padding, padchar, flags) { return this.go$val.Init(output, minwidth, tabwidth, padding, padchar, flags); };
	Writer.Ptr.prototype.write0 = function(buf) {
		var b, _tuple, n, err, x;
		b = this;
		_tuple = b.output.Write(buf), n = _tuple[0], err = _tuple[1];
		if (!((n === buf.length)) && go$interfaceIsEqual(err, null)) {
			err = io.ErrShortWrite;
		}
		if (!(go$interfaceIsEqual(err, null))) {
			throw go$panic((x = new osError.Ptr(err), new x.constructor.Struct(x)));
		}
	};
	Writer.prototype.write0 = function(buf) { return this.go$val.write0(buf); };
	Writer.Ptr.prototype.writeN = function(src, n) {
		var b;
		b = this;
		while (n > src.length) {
			b.write0(src);
			n = n - (src.length) >> 0;
		}
		b.write0(go$subslice(src, 0, n));
	};
	Writer.prototype.writeN = function(src, n) { return this.go$val.writeN(src, n); };
	Writer.Ptr.prototype.writePadding = function(textw, cellw, useTabs) {
		var b, x, _q, x$1, n, _q$1;
		b = this;
		if ((b.padbytes[0] === 9) || useTabs) {
			if (b.tabwidth === 0) {
				return;
			}
			cellw = (x = (_q = (((cellw + b.tabwidth >> 0) - 1 >> 0)) / b.tabwidth, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), x$1 = b.tabwidth, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
			n = cellw - textw >> 0;
			if (n < 0) {
				throw go$panic(new Go$String("internal error"));
			}
			b.writeN(tabs, (_q$1 = (((n + b.tabwidth >> 0) - 1 >> 0)) / b.tabwidth, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero")));
			return;
		}
		b.writeN(go$subslice(new (go$sliceType(Go$Uint8))(b.padbytes), 0), cellw - textw >> 0);
	};
	Writer.prototype.writePadding = function(textw, cellw, useTabs) { return this.go$val.writePadding(textw, cellw, useTabs); };
	Writer.Ptr.prototype.writeLines = function(pos0, line0, line1) {
		var pos, b, i, _slice, _index, line, useTabs, _ref, _i, _slice$1, _index$1, _struct, c, j, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4;
		pos = 0;
		b = this;
		pos = pos0;
		i = line0;
		while (i < line1) {
			line = (_slice = b.lines, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			useTabs = !((((b.flags & 16) >>> 0) === 0));
			_ref = line;
			_i = 0;
			while (_i < _ref.length) {
				c = (_struct = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new cell.Ptr(_struct.size, _struct.width, _struct.htab));
				j = _i;
				if (j > 0 && !((((b.flags & 32) >>> 0) === 0))) {
					b.write0(vbar);
				}
				if (c.size === 0) {
					if (j < b.widths.length) {
						b.writePadding(c.width, (_slice$2 = b.widths, _index$2 = j, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), useTabs);
					}
				} else {
					useTabs = false;
					if (((b.flags & 4) >>> 0) === 0) {
						b.write0(go$subslice(b.buf.Bytes(), pos, (pos + c.size >> 0)));
						pos = pos + (c.size) >> 0;
						if (j < b.widths.length) {
							b.writePadding(c.width, (_slice$3 = b.widths, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), false);
						}
					} else {
						if (j < b.widths.length) {
							b.writePadding(c.width, (_slice$4 = b.widths, _index$4 = j, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), false);
						}
						b.write0(go$subslice(b.buf.Bytes(), pos, (pos + c.size >> 0)));
						pos = pos + (c.size) >> 0;
					}
				}
				_i++;
			}
			if ((i + 1 >> 0) === b.lines.length) {
				b.write0(go$subslice(b.buf.Bytes(), pos, (pos + b.cell.size >> 0)));
				pos = pos + (b.cell.size) >> 0;
			} else {
				b.write0(newline);
			}
			i = i + 1 >> 0;
		}
		return pos;
	};
	Writer.prototype.writeLines = function(pos0, line0, line1) { return this.go$val.writeLines(pos0, line0, line1); };
	Writer.Ptr.prototype.format = function(pos0, line0, line1) {
		var pos, b, column, this$1, _slice, _index, line, width, discardable, _slice$1, _index$1, _slice$2, _index$2, _struct, c, w;
		pos = 0;
		b = this;
		pos = pos0;
		column = b.widths.length;
		this$1 = line0;
		while (this$1 < line1) {
			line = (_slice = b.lines, _index = this$1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (column < (line.length - 1 >> 0)) {
				pos = b.writeLines(pos, line0, this$1);
				line0 = this$1;
				width = b.minwidth;
				discardable = true;
				while (this$1 < line1) {
					line = (_slice$1 = b.lines, _index$1 = this$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					if (column < (line.length - 1 >> 0)) {
						c = (_struct = (_slice$2 = line, _index$2 = column, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), new cell.Ptr(_struct.size, _struct.width, _struct.htab));
						if (w = c.width + b.padding >> 0, w > width) {
							width = w;
						}
						if (c.width > 0 || c.htab) {
							discardable = false;
						}
					} else {
						break;
					}
					this$1 = this$1 + 1 >> 0;
				}
				if (discardable && !((((b.flags & 8) >>> 0) === 0))) {
					width = 0;
				}
				b.widths = go$append(b.widths, width);
				pos = b.format(pos, line0, this$1);
				b.widths = go$subslice(b.widths, 0, (b.widths.length - 1 >> 0));
				line0 = this$1;
			}
			this$1 = this$1 + 1 >> 0;
		}
		pos = b.writeLines(pos, line0, line1);
		return pos;
	};
	Writer.prototype.format = function(pos0, line0, line1) { return this.go$val.format(pos0, line0, line1); };
	Writer.Ptr.prototype.append = function(text) {
		var b;
		b = this;
		b.buf.Write(text);
		b.cell.size = b.cell.size + (text.length) >> 0;
	};
	Writer.prototype.append = function(text) { return this.go$val.append(text); };
	Writer.Ptr.prototype.updateWidth = function() {
		var b;
		b = this;
		b.cell.width = b.cell.width + (utf8.RuneCount(go$subslice(b.buf.Bytes(), b.pos, b.buf.Len()))) >> 0;
		b.pos = b.buf.Len();
	};
	Writer.prototype.updateWidth = function() { return this.go$val.updateWidth(); };
	Writer.Ptr.prototype.startEscape = function(ch) {
		var b, _ref;
		b = this;
		_ref = ch;
		if (_ref === 255) {
			b.endChar = 255;
		} else if (_ref === 60) {
			b.endChar = 62;
		} else if (_ref === 38) {
			b.endChar = 59;
		}
	};
	Writer.prototype.startEscape = function(ch) { return this.go$val.startEscape(ch); };
	Writer.Ptr.prototype.endEscape = function() {
		var b, _ref;
		b = this;
		_ref = b.endChar;
		if (_ref === 255) {
			b.updateWidth();
			if (((b.flags & 2) >>> 0) === 0) {
				b.cell.width = b.cell.width - 2 >> 0;
			}
		} else if (_ref === 62) {
		} else if (_ref === 59) {
			b.cell.width = b.cell.width + 1 >> 0;
		}
		b.pos = b.buf.Len();
		b.endChar = 0;
	};
	Writer.prototype.endEscape = function() { return this.go$val.endEscape(); };
	Writer.Ptr.prototype.terminateCell = function(htab) {
		var b, v, _slice, _index, _slice$1, _index$1, line, _struct;
		b = this;
		b.cell.htab = htab;
		line = new (go$ptrType((go$sliceType(cell))))(function() { return (_slice = b.lines, _index = (b.lines.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = b.lines, _index$1 = b.lines.length - 1 >> 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); });
		line.go$set(go$append(line.go$get(), (_struct = b.cell, new cell.Ptr(_struct.size, _struct.width, _struct.htab))));
		b.cell = new cell.Ptr(0, 0, false);
		return line.go$get().length;
	};
	Writer.prototype.terminateCell = function(htab) { return this.go$val.terminateCell(htab); };
	handlePanic = function(err) {
		var e;
		if (e = go$recover(), !(go$interfaceIsEqual(e, null))) {
			err.go$set((e !== null && e.constructor === osError ? e.go$val : go$typeAssertionFailed(e, osError)).err);
		}
	};
	Writer.Ptr.prototype.Flush = function() {
		var err, b, v;
		err = null;
		var go$deferred = [];
		try {
			b = this;
			go$deferred.push({ recv: b, method: "reset", args: [] });
			go$deferred.push({ fun: handlePanic, args: [new (go$ptrType(go$error))(function() { return err; }, function(v) { err = v; })] });
			if (b.cell.size > 0) {
				if (!((b.endChar === 0))) {
					b.endEscape();
				}
				b.terminateCell(false);
			}
			b.format(0, 0, b.lines.length);
			return err;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return err;
		}
	};
	Writer.prototype.Flush = function() { return this.go$val.Flush(); };
	Writer.Ptr.prototype.Write = function(buf) {
		var n, err, b, v, _ref, _i, _slice, _index, ch, i, _ref$1, ncells, j;
		n = 0;
		err = null;
		var go$deferred = [];
		try {
			b = this;
			go$deferred.push({ fun: handlePanic, args: [new (go$ptrType(go$error))(function() { return err; }, function(v) { err = v; })] });
			n = 0;
			_ref = buf;
			_i = 0;
			while (_i < _ref.length) {
				ch = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (b.endChar === 0) {
					_ref$1 = ch;
					if (_ref$1 === 9 || _ref$1 === 11 || _ref$1 === 10 || _ref$1 === 12) {
						b.append(go$subslice(buf, n, i));
						b.updateWidth();
						n = i + 1 >> 0;
						ncells = b.terminateCell(ch === 9);
						if ((ch === 10) || (ch === 12)) {
							b.addLine();
							if ((ch === 12) || (ncells === 1)) {
								if (err = b.Flush(), !(go$interfaceIsEqual(err, null))) {
									return [n, err];
								}
								if ((ch === 12) && !((((b.flags & 32) >>> 0) === 0))) {
									b.write0(hbar);
								}
							}
						}
					} else if (_ref$1 === 255) {
						b.append(go$subslice(buf, n, i));
						b.updateWidth();
						n = i;
						if (!((((b.flags & 2) >>> 0) === 0))) {
							n = n + 1 >> 0;
						}
						b.startEscape(255);
					} else if (_ref$1 === 60 || _ref$1 === 38) {
						if (!((((b.flags & 1) >>> 0) === 0))) {
							b.append(go$subslice(buf, n, i));
							b.updateWidth();
							n = i;
							b.startEscape(ch);
						}
					}
				} else {
					if (ch === b.endChar) {
						j = i + 1 >> 0;
						if ((ch === 255) && !((((b.flags & 2) >>> 0) === 0))) {
							j = i;
						}
						b.append(go$subslice(buf, n, j));
						n = i + 1 >> 0;
						b.endEscape();
					}
				}
				_i++;
			}
			b.append(go$subslice(buf, n));
			n = buf.length;
			return [n, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [n, err];
		}
	};
	Writer.prototype.Write = function(buf) { return this.go$val.Write(buf); };
	NewWriter = go$pkg.NewWriter = function(output, minwidth, tabwidth, padding, padchar, flags) {
		return new Writer.Ptr().Init(output, minwidth, tabwidth, padding, padchar, flags);
	};
	go$pkg.init = function() {
		cell.init([["size", "text/tabwriter", Go$Int, ""], ["width", "text/tabwriter", Go$Int, ""], ["htab", "text/tabwriter", Go$Bool, ""]]);
		Writer.init([["output", "text/tabwriter", io.Writer, ""], ["minwidth", "text/tabwriter", Go$Int, ""], ["tabwidth", "text/tabwriter", Go$Int, ""], ["padding", "text/tabwriter", Go$Int, ""], ["padbytes", "text/tabwriter", (go$arrayType(Go$Uint8, 8)), ""], ["flags", "text/tabwriter", Go$Uint, ""], ["buf", "text/tabwriter", bytes.Buffer, ""], ["pos", "text/tabwriter", Go$Int, ""], ["cell", "text/tabwriter", cell, ""], ["endChar", "text/tabwriter", Go$Uint8, ""], ["lines", "text/tabwriter", (go$sliceType((go$sliceType(cell)))), ""], ["widths", "text/tabwriter", (go$sliceType(Go$Int)), ""]]);
		(go$ptrType(Writer)).methods = [["Flush", "", [], [go$error], false], ["Init", "", [io.Writer, Go$Int, Go$Int, Go$Int, Go$Uint8, Go$Uint], [(go$ptrType(Writer))], false], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["addLine", "text/tabwriter", [], [], false], ["append", "text/tabwriter", [(go$sliceType(Go$Uint8))], [], false], ["dump", "text/tabwriter", [], [], false], ["endEscape", "text/tabwriter", [], [], false], ["format", "text/tabwriter", [Go$Int, Go$Int, Go$Int], [Go$Int], false], ["reset", "text/tabwriter", [], [], false], ["startEscape", "text/tabwriter", [Go$Uint8], [], false], ["terminateCell", "text/tabwriter", [Go$Bool], [Go$Int], false], ["updateWidth", "text/tabwriter", [], [], false], ["write0", "text/tabwriter", [(go$sliceType(Go$Uint8))], [], false], ["writeLines", "text/tabwriter", [Go$Int, Go$Int, Go$Int], [Go$Int], false], ["writeN", "text/tabwriter", [(go$sliceType(Go$Uint8)), Go$Int], [], false], ["writePadding", "text/tabwriter", [Go$Int, Go$Int, Go$Bool], [], false]];
		osError.init([["err", "text/tabwriter", go$error, ""]]);
		newline = new (go$sliceType(Go$Uint8))([10]);
		tabs = new (go$sliceType(Go$Uint8))(go$stringToBytes("\t\t\t\t\t\t\t\t"));
		vbar = new (go$sliceType(Go$Uint8))([124]);
		hbar = new (go$sliceType(Go$Uint8))(go$stringToBytes("---\n"));
	}
	return go$pkg;
})();
go$packages["go/printer"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], ast = go$packages["go/ast"], token = go$packages["go/token"], utf8 = go$packages["unicode/utf8"], fmt = go$packages["fmt"], io = go$packages["io"], os = go$packages["os"], strconv = go$packages["strconv"], strings = go$packages["strings"], tabwriter = go$packages["text/tabwriter"], unicode = go$packages["unicode"], exprListMode, whiteSpace, pmode, printer, trimmer, Mode, Config, CommentedNode, identListSize, walkBinary, cutoff, diffPrec, reduceDepth, isBinary, isTypeName, stripParens, stripParensAlways, keepTypeColumn, declToken, isBlank, commonPrefix, trimRight, stripCommonPrefix, nlimit, mayCombine, getDoc, aNewline;
	exprListMode = go$pkg.exprListMode = go$newType(4, "Uint", "printer.exprListMode", "exprListMode", "go/printer", null);
	whiteSpace = go$pkg.whiteSpace = go$newType(1, "Uint8", "printer.whiteSpace", "whiteSpace", "go/printer", null);
	pmode = go$pkg.pmode = go$newType(4, "Int", "printer.pmode", "pmode", "go/printer", null);
	printer = go$pkg.printer = go$newType(0, "Struct", "printer.printer", "printer", "go/printer", function(Config_, fset_, output_, indent_, mode_, impliedSemi_, lastTok_, wsbuf_, pos_, out_, last_, comments_, cindex_, useNodeComments_, comment_, commentOffset_, commentNewline_, nodeSizes_, cachedPos_, cachedLine_) {
		this.go$val = this;
		this.Config = Config_ !== undefined ? Config_ : new Config.Ptr();
		this.fset = fset_ !== undefined ? fset_ : (go$ptrType(token.FileSet)).nil;
		this.output = output_ !== undefined ? output_ : (go$sliceType(Go$Uint8)).nil;
		this.indent = indent_ !== undefined ? indent_ : 0;
		this.mode = mode_ !== undefined ? mode_ : 0;
		this.impliedSemi = impliedSemi_ !== undefined ? impliedSemi_ : false;
		this.lastTok = lastTok_ !== undefined ? lastTok_ : 0;
		this.wsbuf = wsbuf_ !== undefined ? wsbuf_ : (go$sliceType(whiteSpace)).nil;
		this.pos = pos_ !== undefined ? pos_ : new token.Position.Ptr();
		this.out = out_ !== undefined ? out_ : new token.Position.Ptr();
		this.last = last_ !== undefined ? last_ : new token.Position.Ptr();
		this.comments = comments_ !== undefined ? comments_ : (go$sliceType((go$ptrType(ast.CommentGroup)))).nil;
		this.cindex = cindex_ !== undefined ? cindex_ : 0;
		this.useNodeComments = useNodeComments_ !== undefined ? useNodeComments_ : false;
		this.comment = comment_ !== undefined ? comment_ : (go$ptrType(ast.CommentGroup)).nil;
		this.commentOffset = commentOffset_ !== undefined ? commentOffset_ : 0;
		this.commentNewline = commentNewline_ !== undefined ? commentNewline_ : false;
		this.nodeSizes = nodeSizes_ !== undefined ? nodeSizes_ : false;
		this.cachedPos = cachedPos_ !== undefined ? cachedPos_ : 0;
		this.cachedLine = cachedLine_ !== undefined ? cachedLine_ : 0;
	});
	printer.prototype.Fprint = function(output, fset, node) { return this.go$val.Fprint(output, fset, node); };
	printer.Ptr.prototype.Fprint = function(output, fset, node) { return this.Config.Fprint(output, fset, node); };
	printer.prototype.fprint = function(output, fset, node, nodeSizes) { return this.go$val.fprint(output, fset, node, nodeSizes); };
	printer.Ptr.prototype.fprint = function(output, fset, node, nodeSizes) { return this.Config.fprint(output, fset, node, nodeSizes); };
	trimmer = go$pkg.trimmer = go$newType(0, "Struct", "printer.trimmer", "trimmer", "go/printer", function(output_, state_, space_) {
		this.go$val = this;
		this.output = output_ !== undefined ? output_ : null;
		this.state = state_ !== undefined ? state_ : 0;
		this.space = space_ !== undefined ? space_ : (go$sliceType(Go$Uint8)).nil;
	});
	Mode = go$pkg.Mode = go$newType(4, "Uint", "printer.Mode", "Mode", "go/printer", null);
	Config = go$pkg.Config = go$newType(0, "Struct", "printer.Config", "Config", "go/printer", function(Mode_, Tabwidth_, Indent_) {
		this.go$val = this;
		this.Mode = Mode_ !== undefined ? Mode_ : 0;
		this.Tabwidth = Tabwidth_ !== undefined ? Tabwidth_ : 0;
		this.Indent = Indent_ !== undefined ? Indent_ : 0;
	});
	CommentedNode = go$pkg.CommentedNode = go$newType(0, "Struct", "printer.CommentedNode", "CommentedNode", "go/printer", function(Node_, Comments_) {
		this.go$val = this;
		this.Node = Node_ !== undefined ? Node_ : null;
		this.Comments = Comments_ !== undefined ? Comments_ : (go$sliceType((go$ptrType(ast.CommentGroup)))).nil;
	});
	printer.Ptr.prototype.linebreak = function(line, min, ws, newSection) {
		var printedBreak, p, n;
		printedBreak = false;
		p = this;
		n = nlimit(line - p.pos.Line >> 0);
		if (n < min) {
			n = min;
		}
		if (n > 0) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(ws)]));
			if (newSection) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(12)]));
				n = n - 1 >> 0;
			}
			while (n > 0) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(10)]));
				n = n - 1 >> 0;
			}
			printedBreak = true;
		}
		return printedBreak;
	};
	printer.prototype.linebreak = function(line, min, ws, newSection) { return this.go$val.linebreak(line, min, ws, newSection); };
	printer.Ptr.prototype.setComment = function(g) {
		var p, _slice, _index, _struct, _slice$1, _index$1;
		p = this;
		if (g === (go$ptrType(ast.CommentGroup)).nil || !p.useNodeComments) {
			return;
		}
		if (p.comments === (go$sliceType((go$ptrType(ast.CommentGroup)))).nil) {
			p.comments = (go$sliceType((go$ptrType(ast.CommentGroup)))).make(1, 0, function() { return (go$ptrType(ast.CommentGroup)).nil; });
		} else if (p.cindex < p.comments.length) {
			p.flush((_struct = p.posFor((_slice = g.List, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos()), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)), 0);
			p.comments = go$subslice(p.comments, 0, 1);
			p.internalError(new (go$sliceType(go$emptyInterface))([new Go$String("setComment found pending comments")]));
		}
		_slice$1 = p.comments, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = g) : go$throwRuntimeError("index out of range");
		p.cindex = 0;
		if (p.commentOffset === 1073741824) {
			p.nextComment();
		}
	};
	printer.prototype.setComment = function(g) { return this.go$val.setComment(g); };
	printer.Ptr.prototype.identList = function(list, indent) {
		var p, xlist, _ref, _i, _slice, _index, x, i, _slice$1, _index$1, mode;
		p = this;
		xlist = (go$sliceType(ast.Expr)).make(list.length, 0, function() { return null; });
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$1 = xlist, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = x) : go$throwRuntimeError("index out of range");
			_i++;
		}
		mode = 0;
		if (!indent) {
			mode = 2;
		}
		p.exprList(0, xlist, 1, mode, 0);
	};
	printer.prototype.identList = function(list, indent) { return this.go$val.identList(list, indent); };
	printer.Ptr.prototype.exprList = function(prev0, list, depth, mode, next0) {
		var p, _struct, prev, _struct$1, next, _slice, _index, line, _slice$1, _index$1, endLine, _ref, _i, _slice$2, _index$2, x, i, ws, prevBreak, size, _ref$1, _i$1, _slice$3, _index$3, x$1, i$1, prevLine, useFF, prevSize, _tuple, pair, isPair, ratio, needsLinebreak, needsBlank;
		p = this;
		if (list.length === 0) {
			return;
		}
		prev = (_struct = p.posFor(prev0), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
		next = (_struct$1 = p.posFor(next0), new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column));
		line = p.lineFor((_slice = list, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos());
		endLine = p.lineFor((_slice$1 = list, _index$1 = (list.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).End());
		if (prev.IsValid() && (prev.Line === line) && (line === endLine)) {
			_ref = list;
			_i = 0;
			while (_i < _ref.length) {
				x = (_slice$2 = _ref, _index$2 = _i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (i > 0) {
					p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Pos()), new token.Token(52), new whiteSpace(32)]));
				}
				p.expr0(x, depth);
				_i++;
			}
			return;
		}
		ws = 0;
		if (((mode & 2) >>> 0) === 0) {
			ws = 62;
		}
		prevBreak = -1;
		if (prev.IsValid() && prev.Line < line && p.linebreak(line, 0, ws, true)) {
			ws = 0;
			prevBreak = 0;
		}
		size = 0;
		_ref$1 = list;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			x$1 = (_slice$3 = _ref$1, _index$3 = _i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			i$1 = _i$1;
			prevLine = line;
			line = p.lineFor(x$1.Pos());
			useFF = true;
			prevSize = size;
			size = p.nodeSize(x$1, 1000000);
			_tuple = (x$1 !== null && x$1.constructor === (go$ptrType(ast.KeyValueExpr)) ? [x$1.go$val, true] : [(go$ptrType(ast.KeyValueExpr)).nil, false]), pair = _tuple[0], isPair = _tuple[1];
			if (size <= 1000000 && prev.IsValid() && next.IsValid()) {
				if (isPair) {
					size = p.nodeSize(pair.Key, 1000000);
				}
			} else {
				size = 0;
			}
			if (prevSize > 0 && size > 0) {
				if (prevSize <= 20 && size <= 20) {
					useFF = false;
				} else {
					ratio = size / prevSize;
					useFF = ratio <= 0.25 || 4 <= ratio;
				}
			}
			if (i$1 > 0) {
				needsLinebreak = prevLine < line && prevLine > 0 && line > 0;
				if (!needsLinebreak) {
					p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x$1.Pos())]));
				}
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(52)]));
				needsBlank = true;
				if (needsLinebreak) {
					if (p.linebreak(line, 0, ws, useFF || (prevBreak + 1 >> 0) < i$1)) {
						ws = 0;
						prevBreak = i$1;
						needsBlank = false;
					}
				}
				if (needsBlank) {
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				}
			}
			if (isPair && size > 0 && list.length > 1) {
				p.expr(pair.Key);
				p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(pair.Colon), new token.Token(58), new whiteSpace(11)]));
				p.expr(pair.Value);
			} else {
				p.expr0(x$1, depth);
			}
			_i$1++;
		}
		if (!((((mode & 1) >>> 0) === 0)) && next.IsValid() && p.pos.Line < next.Line) {
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(52)]));
			if ((ws === 0) && (((mode & 2) >>> 0) === 0)) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60)]));
			}
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(12)]));
			return;
		}
		if ((ws === 0) && (((mode & 2) >>> 0) === 0)) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60)]));
		}
	};
	printer.prototype.exprList = function(prev0, list, depth, mode, next0) { return this.go$val.exprList(prev0, list, depth, mode, next0); };
	printer.Ptr.prototype.parameters = function(fields) {
		var p, prevLine, ws, _ref, _i, _slice, _index, par, i, parLineBeg, _slice$1, _index$1, parLineEnd, needsLinebreak, closing;
		p = this;
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(fields.Opening), new token.Token(49)]));
		if (fields.List.length > 0) {
			prevLine = p.lineFor(fields.Opening);
			ws = 62;
			_ref = fields.List;
			_i = 0;
			while (_i < _ref.length) {
				par = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				parLineBeg = 0;
				if (par.Names.length > 0) {
					parLineBeg = p.lineFor((_slice$1 = par.Names, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Pos());
				} else {
					parLineBeg = p.lineFor(par.Type.Pos());
				}
				parLineEnd = p.lineFor(par.Type.End());
				needsLinebreak = 0 < prevLine && prevLine < parLineBeg;
				if (i > 0) {
					if (!needsLinebreak) {
						p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(par.Pos())]));
					}
					p.print(new (go$sliceType(go$emptyInterface))([new token.Token(52)]));
				}
				if (needsLinebreak && p.linebreak(parLineBeg, 0, ws, true)) {
					ws = 0;
				} else if (i > 0) {
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				}
				if (par.Names.length > 0) {
					p.identList(par.Names, ws === 62);
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				}
				p.expr(stripParensAlways(par.Type));
				prevLine = parLineEnd;
				_i++;
			}
			if (closing = p.lineFor(fields.Closing), 0 < prevLine && prevLine < closing) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(52)]));
				p.linebreak(closing, 0, 0, true);
			}
			if (ws === 0) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60)]));
			}
		}
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(fields.Closing), new token.Token(54)]));
	};
	printer.prototype.parameters = function(fields) { return this.go$val.parameters(fields); };
	printer.Ptr.prototype.signature = function(params, result) {
		var p, n, _slice, _index, _slice$1, _index$1;
		p = this;
		if (!(params === (go$ptrType(ast.FieldList)).nil)) {
			p.parameters(params);
		} else {
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(49), new token.Token(54)]));
		}
		n = result.NumFields();
		if (n > 0) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
			if ((n === 1) && (_slice = result.List, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Names === (go$sliceType((go$ptrType(ast.Ident)))).nil) {
				p.expr(stripParensAlways((_slice$1 = result.List, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Type));
				return;
			}
			p.parameters(result);
		}
	};
	printer.prototype.signature = function(params, result) { return this.go$val.signature(params, result); };
	identListSize = function(list, maxSize) {
		var size, _ref, _i, _slice, _index, x, i;
		size = 0;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				size = size + 2 >> 0;
			}
			size = size + (utf8.RuneCountInString(x.Name)) >> 0;
			if (size >= maxSize) {
				break;
			}
			_i++;
		}
		return size;
	};
	printer.Ptr.prototype.isOneLineFieldList = function(list) {
		var p, _slice, _index, f, namesSize, typeSize;
		p = this;
		if (!((list.length === 1))) {
			return false;
		}
		f = (_slice = list, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (!(f.Tag === (go$ptrType(ast.BasicLit)).nil) || !(f.Comment === (go$ptrType(ast.CommentGroup)).nil)) {
			return false;
		}
		namesSize = identListSize(f.Names, 30);
		if (namesSize > 0) {
			namesSize = 1;
		}
		typeSize = p.nodeSize(f.Type, 30);
		return (namesSize + typeSize >> 0) <= 30;
	};
	printer.prototype.isOneLineFieldList = function(list) { return this.go$val.isOneLineFieldList(list); };
	printer.Ptr.prototype.setLineComment = function(text) {
		var p;
		p = this;
		p.setComment(new ast.CommentGroup.Ptr(new (go$sliceType((go$ptrType(ast.Comment))))([new ast.Comment.Ptr(0, text)])));
	};
	printer.prototype.setLineComment = function(text) { return this.go$val.setLineComment(text); };
	printer.Ptr.prototype.isMultiLine = function(n) {
		var p;
		p = this;
		return (p.lineFor(n.End()) - p.lineFor(n.Pos()) >> 0) > 0;
	};
	printer.prototype.isMultiLine = function(n) { return this.go$val.isMultiLine(n); };
	printer.Ptr.prototype.fieldList = function(fields, isStruct, isIncomplete) {
		var p, lbrace, list, rbrace, _struct, hasComments, srcIsOneLine, _slice, _index, f, _ref, _i, _slice$1, _index$1, x, i, sep, newSection, _ref$1, _i$1, _slice$2, _index$2, f$1, i$1, extraTabs, _struct$1, newSection$1, _ref$2, _i$2, _slice$3, _index$3, f$2, i$2, isFtyp, _tuple, x$1, ftyp, _slice$4, _index$4, _struct$2;
		p = this;
		lbrace = fields.Opening;
		list = fields.List;
		rbrace = fields.Closing;
		hasComments = isIncomplete || p.commentBefore((_struct = p.posFor(rbrace), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)));
		srcIsOneLine = (new token.Pos(lbrace)).IsValid() && (new token.Pos(rbrace)).IsValid() && (p.lineFor(lbrace) === p.lineFor(rbrace));
		if (!hasComments && srcIsOneLine) {
			if (list.length === 0) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(lbrace), new token.Token(51), new token.Pos(rbrace), new token.Token(56)]));
				return;
			} else if (isStruct && p.isOneLineFieldList(list)) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(lbrace), new token.Token(51), new whiteSpace(32)]));
				f = (_slice = list, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				_ref = f.Names;
				_i = 0;
				while (_i < _ref.length) {
					x = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					i = _i;
					if (i > 0) {
						p.print(new (go$sliceType(go$emptyInterface))([new token.Token(52), new whiteSpace(32)]));
					}
					p.expr(x);
					_i++;
				}
				if (f.Names.length > 0) {
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				}
				p.expr(f.Type);
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32), new token.Pos(rbrace), new token.Token(56)]));
				return;
			}
		}
		p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32), new token.Pos(lbrace), new token.Token(51), new whiteSpace(62)]));
		if (hasComments || list.length > 0) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(12)]));
		}
		if (isStruct) {
			sep = 11;
			if (list.length === 1) {
				sep = 32;
			}
			newSection = false;
			_ref$1 = list;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				f$1 = (_slice$2 = _ref$1, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				i$1 = _i$1;
				if (i$1 > 0) {
					p.linebreak(p.lineFor(f$1.Pos()), 1, 0, newSection);
				}
				extraTabs = 0;
				p.setComment(f$1.Doc);
				if (f$1.Names.length > 0) {
					p.identList(f$1.Names, false);
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(sep)]));
					p.expr(f$1.Type);
					extraTabs = 1;
				} else {
					p.expr(f$1.Type);
					extraTabs = 2;
				}
				if (!(f$1.Tag === (go$ptrType(ast.BasicLit)).nil)) {
					if (f$1.Names.length > 0 && (sep === 11)) {
						p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(sep)]));
					}
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(sep)]));
					p.expr(f$1.Tag);
					extraTabs = 0;
				}
				if (!(f$1.Comment === (go$ptrType(ast.CommentGroup)).nil)) {
					while (extraTabs > 0) {
						p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(sep)]));
						extraTabs = extraTabs - 1 >> 0;
					}
					p.setComment(f$1.Comment);
				}
				newSection = p.isMultiLine(f$1);
				_i$1++;
			}
			if (isIncomplete) {
				if (list.length > 0) {
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(12)]));
				}
				p.flush((_struct$1 = p.posFor(rbrace), new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column)), 56);
				p.setLineComment("// contains filtered or unexported fields");
			}
		} else {
			newSection$1 = false;
			_ref$2 = list;
			_i$2 = 0;
			while (_i$2 < _ref$2.length) {
				f$2 = (_slice$3 = _ref$2, _index$3 = _i$2, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
				i$2 = _i$2;
				if (i$2 > 0) {
					p.linebreak(p.lineFor(f$2.Pos()), 1, 0, newSection$1);
				}
				p.setComment(f$2.Doc);
				if (_tuple = (x$1 = f$2.Type, (x$1 !== null && x$1.constructor === (go$ptrType(ast.FuncType)) ? [x$1.go$val, true] : [(go$ptrType(ast.FuncType)).nil, false])), ftyp = _tuple[0], isFtyp = _tuple[1], isFtyp) {
					p.expr((_slice$4 = f$2.Names, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")));
					p.signature(ftyp.Params, ftyp.Results);
				} else {
					p.expr(f$2.Type);
				}
				p.setComment(f$2.Comment);
				newSection$1 = p.isMultiLine(f$2);
				_i$2++;
			}
			if (isIncomplete) {
				if (list.length > 0) {
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(12)]));
				}
				p.flush((_struct$2 = p.posFor(rbrace), new token.Position.Ptr(_struct$2.Filename, _struct$2.Offset, _struct$2.Line, _struct$2.Column)), 56);
				p.setLineComment("// contains filtered or unexported methods");
			}
		}
		p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60), new whiteSpace(12), new token.Pos(rbrace), new token.Token(56)]));
	};
	printer.prototype.fieldList = function(fields, isStruct, isIncomplete) { return this.go$val.fieldList(fields, isStruct, isIncomplete); };
	walkBinary = function(e) {
		var has4, has5, maxProblem, _ref, l, _ref$1, _type, _tuple, h4, h5, mp, r, _ref$2, _type$1, _tuple$1, h4$1, h5$1, mp$1, _ref$3;
		has4 = false;
		has5 = false;
		maxProblem = 0;
		_ref = (new token.Token(e.Op)).Precedence();
		if (_ref === 4) {
			has4 = true;
		} else if (_ref === 5) {
			has5 = true;
		}
		_ref$1 = e.X;
		_type = _ref$1 !== null ? _ref$1.constructor : null;
		switch (0) { default: if (_type === (go$ptrType(ast.BinaryExpr))) {
			l = _ref$1.go$val;
			if ((new token.Token(l.Op)).Precedence() < (new token.Token(e.Op)).Precedence()) {
				break;
			}
			_tuple = walkBinary(l), h4 = _tuple[0], h5 = _tuple[1], mp = _tuple[2];
			has4 = has4 || h4;
			has5 = has5 || h5;
			if (maxProblem < mp) {
				maxProblem = mp;
			}
		} }
		_ref$2 = e.Y;
		_type$1 = _ref$2 !== null ? _ref$2.constructor : null;
		switch (0) { default: if (_type$1 === (go$ptrType(ast.BinaryExpr))) {
			r = _ref$2.go$val;
			if ((new token.Token(r.Op)).Precedence() <= (new token.Token(e.Op)).Precedence()) {
				break;
			}
			_tuple$1 = walkBinary(r), h4$1 = _tuple$1[0], h5$1 = _tuple$1[1], mp$1 = _tuple$1[2];
			has4 = has4 || h4$1;
			has5 = has5 || h5$1;
			if (maxProblem < mp$1) {
				maxProblem = mp$1;
			}
		} else if (_type$1 === (go$ptrType(ast.StarExpr))) {
			r = _ref$2.go$val;
			if (e.Op === 15) {
				maxProblem = 5;
			}
		} else if (_type$1 === (go$ptrType(ast.UnaryExpr))) {
			r = _ref$2.go$val;
			_ref$3 = (new token.Token(e.Op)).String() + (new token.Token(r.Op)).String();
			if (_ref$3 === "/*" || _ref$3 === "&&" || _ref$3 === "&^") {
				maxProblem = 5;
			} else if (_ref$3 === "++" || _ref$3 === "--") {
				if (maxProblem < 4) {
					maxProblem = 4;
				}
			}
		} }
		return [has4, has5, maxProblem];
	};
	cutoff = function(e, depth) {
		var _tuple, has4, has5, maxProblem;
		_tuple = walkBinary(e), has4 = _tuple[0], has5 = _tuple[1], maxProblem = _tuple[2];
		if (maxProblem > 0) {
			return maxProblem + 1 >> 0;
		}
		if (has4 && has5) {
			if (depth === 1) {
				return 5;
			}
			return 4;
		}
		if (depth === 1) {
			return 6;
		}
		return 4;
	};
	diffPrec = function(expr, prec) {
		var _tuple, x, ok;
		_tuple = (expr !== null && expr.constructor === (go$ptrType(ast.BinaryExpr)) ? [expr.go$val, true] : [(go$ptrType(ast.BinaryExpr)).nil, false]), x = _tuple[0], ok = _tuple[1];
		if (!ok || !((prec === (new token.Token(x.Op)).Precedence()))) {
			return 1;
		}
		return 0;
	};
	reduceDepth = function(depth) {
		depth = depth - 1 >> 0;
		if (depth < 1) {
			depth = 1;
		}
		return depth;
	};
	printer.Ptr.prototype.binaryExpr = function(x, prec1, cutoff$1, depth) {
		var p, prec, printBlank, ws, xline, yline;
		p = this;
		prec = (new token.Token(x.Op)).Precedence();
		if (prec < prec1) {
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(49)]));
			p.expr0(x, reduceDepth(depth));
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(54)]));
			return;
		}
		printBlank = prec < cutoff$1;
		ws = 62;
		p.expr1(x.X, prec, depth + diffPrec(x.X, prec) >> 0);
		if (printBlank) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
		}
		xline = p.pos.Line;
		yline = p.lineFor(x.Y.Pos());
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.OpPos), new token.Token(x.Op)]));
		if (!((xline === yline)) && xline > 0 && yline > 0) {
			if (p.linebreak(yline, 1, ws, true)) {
				ws = 0;
				printBlank = false;
			}
		}
		if (printBlank) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
		}
		p.expr1(x.Y, prec + 1 >> 0, depth + 1 >> 0);
		if (ws === 0) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60)]));
		}
	};
	printer.prototype.binaryExpr = function(x, prec1, cutoff$1, depth) { return this.go$val.binaryExpr(x, prec1, cutoff$1, depth); };
	isBinary = function(expr) {
		var _tuple, ok;
		_tuple = (expr !== null && expr.constructor === (go$ptrType(ast.BinaryExpr)) ? [expr.go$val, true] : [(go$ptrType(ast.BinaryExpr)).nil, false]), ok = _tuple[1];
		return ok;
	};
	printer.Ptr.prototype.expr1 = function(expr, prec1, depth) {
		var p, x, _ref, _type, hasParens, _tuple, x$1, line, indices, _ref$1, _i, _slice, _index, y, i, _slice$1, _index$1, x$2, ok, _tuple$1, x$3, _ref$2;
		p = this;
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(expr.Pos())]));
		_ref = expr;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadExpr))) {
			x = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new Go$String("BadExpr")]));
		} else if (_type === (go$ptrType(ast.Ident))) {
			x = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([x]));
		} else if (_type === (go$ptrType(ast.BinaryExpr))) {
			x = _ref.go$val;
			if (depth < 1) {
				p.internalError(new (go$sliceType(go$emptyInterface))([new Go$String("depth < 1:"), new Go$Int(depth)]));
				depth = 1;
			}
			p.binaryExpr(x, prec1, cutoff(x, depth), depth);
		} else if (_type === (go$ptrType(ast.KeyValueExpr))) {
			x = _ref.go$val;
			p.expr(x.Key);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Colon), new token.Token(58), new whiteSpace(32)]));
			p.expr(x.Value);
		} else if (_type === (go$ptrType(ast.StarExpr))) {
			x = _ref.go$val;
			if (6 < prec1) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(49)]));
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(14)]));
				p.expr(x.X);
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(54)]));
			} else {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(14)]));
				p.expr(x.X);
			}
		} else if (_type === (go$ptrType(ast.UnaryExpr))) {
			x = _ref.go$val;
			if (6 < prec1) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(49)]));
				p.expr(x);
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(54)]));
			} else {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(x.Op)]));
				if (x.Op === 79) {
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				}
				p.expr1(x.X, 6, depth);
			}
		} else if (_type === (go$ptrType(ast.BasicLit))) {
			x = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([x]));
		} else if (_type === (go$ptrType(ast.FuncLit))) {
			x = _ref.go$val;
			p.expr(x.Type);
			p.adjBlock(p.distanceFrom(x.Type.Pos()), 32, x.Body);
		} else if (_type === (go$ptrType(ast.ParenExpr))) {
			x = _ref.go$val;
			if (_tuple = (x$1 = x.X, (x$1 !== null && x$1.constructor === (go$ptrType(ast.ParenExpr)) ? [x$1.go$val, true] : [(go$ptrType(ast.ParenExpr)).nil, false])), hasParens = _tuple[1], hasParens) {
				p.expr0(x.X, reduceDepth(depth));
			} else {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(49)]));
				p.expr0(x.X, reduceDepth(depth));
				p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Rparen), new token.Token(54)]));
			}
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			x = _ref.go$val;
			p.expr1(x.X, 7, depth);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(53)]));
			if (line = p.lineFor(x.Sel.Pos()), p.pos.IsValid() && p.pos.Line < line) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(62), new whiteSpace(10), new token.Pos(x.Sel.Pos()), x.Sel, new whiteSpace(60)]));
			} else {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Sel.Pos()), x.Sel]));
			}
		} else if (_type === (go$ptrType(ast.TypeAssertExpr))) {
			x = _ref.go$val;
			p.expr1(x.X, 7, depth);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(53), new token.Pos(x.Lparen), new token.Token(49)]));
			if (!(go$interfaceIsEqual(x.Type, null))) {
				p.expr(x.Type);
			} else {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(84)]));
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Rparen), new token.Token(54)]));
		} else if (_type === (go$ptrType(ast.IndexExpr))) {
			x = _ref.go$val;
			p.expr1(x.X, 7, 1);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Lbrack), new token.Token(50)]));
			p.expr0(x.Index, depth + 1 >> 0);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Rbrack), new token.Token(55)]));
		} else if (_type === (go$ptrType(ast.SliceExpr))) {
			x = _ref.go$val;
			p.expr1(x.X, 7, 1);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Lbrack), new token.Token(50)]));
			indices = new (go$sliceType(ast.Expr))([x.Low, x.High]);
			if (!(go$interfaceIsEqual(x.Max, null))) {
				indices = go$append(indices, x.Max);
			}
			_ref$1 = indices;
			_i = 0;
			while (_i < _ref$1.length) {
				y = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (i > 0) {
					x$2 = (_slice$1 = indices, _index$1 = (i - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					if (depth <= 1 && !(go$interfaceIsEqual(x$2, null)) && !(go$interfaceIsEqual(y, null)) && (isBinary(x$2) || isBinary(y))) {
						p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32), new token.Token(58), new whiteSpace(32)]));
					} else {
						p.print(new (go$sliceType(go$emptyInterface))([new token.Token(58)]));
					}
				}
				if (!(go$interfaceIsEqual(y, null))) {
					p.expr0(y, depth + 1 >> 0);
				}
				_i++;
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Rbrack), new token.Token(55)]));
		} else if (_type === (go$ptrType(ast.CallExpr))) {
			x = _ref.go$val;
			if (x.Args.length > 1) {
				depth = depth + 1 >> 0;
			}
			if (_tuple$1 = (x$3 = x.Fun, (x$3 !== null && x$3.constructor === (go$ptrType(ast.FuncType)) ? [x$3.go$val, true] : [(go$ptrType(ast.FuncType)).nil, false])), ok = _tuple$1[1], ok) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(49)]));
				p.expr1(x.Fun, 7, depth);
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(54)]));
			} else {
				p.expr1(x.Fun, 7, depth);
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Lparen), new token.Token(49)]));
			if ((new token.Pos(x.Ellipsis)).IsValid()) {
				p.exprList(x.Lparen, x.Args, depth, 0, x.Ellipsis);
				p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Ellipsis), new token.Token(48)]));
				if ((new token.Pos(x.Rparen)).IsValid() && p.lineFor(x.Ellipsis) < p.lineFor(x.Rparen)) {
					p.print(new (go$sliceType(go$emptyInterface))([new token.Token(52), new whiteSpace(12)]));
				}
			} else {
				p.exprList(x.Lparen, x.Args, depth, 1, x.Rparen);
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Rparen), new token.Token(54)]));
		} else if (_type === (go$ptrType(ast.CompositeLit))) {
			x = _ref.go$val;
			if (!(go$interfaceIsEqual(x.Type, null))) {
				p.expr1(x.Type, 7, depth);
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(x.Lbrace), new token.Token(51)]));
			p.exprList(x.Lbrace, x.Elts, 1, 1, x.Rbrace);
			p.print(new (go$sliceType(go$emptyInterface))([new pmode(1), new token.Pos(x.Rbrace), new token.Token(56), new pmode(1)]));
		} else if (_type === (go$ptrType(ast.Ellipsis))) {
			x = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(48)]));
			if (!(go$interfaceIsEqual(x.Elt, null))) {
				p.expr(x.Elt);
			}
		} else if (_type === (go$ptrType(ast.ArrayType))) {
			x = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(50)]));
			if (!(go$interfaceIsEqual(x.Len, null))) {
				p.expr(x.Len);
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(55)]));
			p.expr(x.Elt);
		} else if (_type === (go$ptrType(ast.StructType))) {
			x = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(82)]));
			p.fieldList(x.Fields, true, x.Incomplete);
		} else if (_type === (go$ptrType(ast.FuncType))) {
			x = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(71)]));
			p.signature(x.Params, x.Results);
		} else if (_type === (go$ptrType(ast.InterfaceType))) {
			x = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(76)]));
			p.fieldList(x.Methods, false, x.Incomplete);
		} else if (_type === (go$ptrType(ast.MapType))) {
			x = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(77), new token.Token(50)]));
			p.expr(x.Key);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(55)]));
			p.expr(x.Value);
		} else if (_type === (go$ptrType(ast.ChanType))) {
			x = _ref.go$val;
			_ref$2 = x.Dir;
			if (_ref$2 === 3) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(63)]));
			} else if (_ref$2 === 2) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(36), new token.Token(63)]));
			} else if (_ref$2 === 1) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(63), new token.Pos(x.Arrow), new token.Token(36)]));
			}
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
			p.expr(x.Value);
		} else {
			x = _ref;
			throw go$panic(new Go$String("unreachable"));
		}
		return;
	};
	printer.prototype.expr1 = function(expr, prec1, depth) { return this.go$val.expr1(expr, prec1, depth); };
	printer.Ptr.prototype.expr0 = function(x, depth) {
		var p;
		p = this;
		p.expr1(x, 0, depth);
	};
	printer.prototype.expr0 = function(x, depth) { return this.go$val.expr0(x, depth); };
	printer.Ptr.prototype.expr = function(x) {
		var p;
		p = this;
		p.expr1(x, 0, 1);
	};
	printer.prototype.expr = function(x) { return this.go$val.expr(x); };
	printer.Ptr.prototype.stmtList = function(list, nindent, nextIsRBrace) {
		var p, multiLine, i, _ref, _i, _slice, _index, s, isEmpty, _tuple;
		p = this;
		if (nindent > 0) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(62)]));
		}
		multiLine = false;
		i = 0;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (_tuple = (s !== null && s.constructor === (go$ptrType(ast.EmptyStmt)) ? [s.go$val, true] : [(go$ptrType(ast.EmptyStmt)).nil, false]), isEmpty = _tuple[1], !isEmpty) {
				if (p.output.length > 0) {
					p.linebreak(p.lineFor(s.Pos()), 1, 0, (i === 0) || (nindent === 0) || multiLine);
				}
				p.stmt(s, nextIsRBrace && (i === (list.length - 1 >> 0)));
				multiLine = p.isMultiLine(s);
				i = i + 1 >> 0;
			}
			_i++;
		}
		if (nindent > 0) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60)]));
		}
	};
	printer.prototype.stmtList = function(list, nindent, nextIsRBrace) { return this.go$val.stmtList(list, nindent, nextIsRBrace); };
	printer.Ptr.prototype.block = function(b, nindent) {
		var p;
		p = this;
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(b.Lbrace), new token.Token(51)]));
		p.stmtList(b.List, nindent, true);
		p.linebreak(p.lineFor(b.Rbrace), 1, 0, true);
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(b.Rbrace), new token.Token(56)]));
	};
	printer.prototype.block = function(b, nindent) { return this.go$val.block(b, nindent); };
	isTypeName = function(x) {
		var t, _ref, _type;
		_ref = x;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.Ident))) {
			t = _ref.go$val;
			return true;
		} else if (_type === (go$ptrType(ast.SelectorExpr))) {
			t = _ref.go$val;
			return isTypeName(t.X);
		}
		return false;
	};
	stripParens = function(x) {
		var strip, _tuple, px;
		if (_tuple = (x !== null && x.constructor === (go$ptrType(ast.ParenExpr)) ? [x.go$val, true] : [(go$ptrType(ast.ParenExpr)).nil, false]), px = _tuple[0], strip = _tuple[1], strip) {
			ast.Inspect(px.X, (function(node) {
				var x$1, _ref, _type;
				_ref = node;
				_type = _ref !== null ? _ref.constructor : null;
				if (_type === (go$ptrType(ast.ParenExpr))) {
					x$1 = _ref.go$val;
					return false;
				} else if (_type === (go$ptrType(ast.CompositeLit))) {
					x$1 = _ref.go$val;
					if (isTypeName(x$1.Type)) {
						strip = false;
					}
					return false;
				}
				return true;
			}));
			if (strip) {
				return stripParens(px.X);
			}
		}
		return x;
	};
	stripParensAlways = function(x) {
		var ok, _tuple, x$1;
		if (_tuple = (x !== null && x.constructor === (go$ptrType(ast.ParenExpr)) ? [x.go$val, true] : [(go$ptrType(ast.ParenExpr)).nil, false]), x$1 = _tuple[0], ok = _tuple[1], ok) {
			return stripParensAlways(x$1.X);
		}
		return x;
	};
	printer.Ptr.prototype.controlClause = function(isForStmt, init, expr, post) {
		var p, needsBlank;
		p = this;
		p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
		needsBlank = false;
		if (go$interfaceIsEqual(init, null) && go$interfaceIsEqual(post, null)) {
			if (!(go$interfaceIsEqual(expr, null))) {
				p.expr(stripParens(expr));
				needsBlank = true;
			}
		} else {
			if (!(go$interfaceIsEqual(init, null))) {
				p.stmt(init, false);
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(57), new whiteSpace(32)]));
			if (!(go$interfaceIsEqual(expr, null))) {
				p.expr(stripParens(expr));
				needsBlank = true;
			}
			if (isForStmt) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(57), new whiteSpace(32)]));
				needsBlank = false;
				if (!(go$interfaceIsEqual(post, null))) {
					p.stmt(post, false);
					needsBlank = true;
				}
			}
		}
		if (needsBlank) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
		}
	};
	printer.prototype.controlClause = function(isForStmt, init, expr, post) { return this.go$val.controlClause(isForStmt, init, expr, post); };
	printer.Ptr.prototype.indentList = function(list) {
		var p, _slice, _index, b, _slice$1, _index$1, e, n, line, _ref, _i, _slice$2, _index$2, x, xb, xe;
		p = this;
		if (list.length >= 2) {
			b = p.lineFor((_slice = list, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos());
			e = p.lineFor((_slice$1 = list, _index$1 = (list.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).End());
			if (0 < b && b < e) {
				n = 0;
				line = b;
				_ref = list;
				_i = 0;
				while (_i < _ref.length) {
					x = (_slice$2 = _ref, _index$2 = _i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
					xb = p.lineFor(x.Pos());
					xe = p.lineFor(x.End());
					if (line < xb) {
						return true;
					}
					if (xb < xe) {
						n = n + 1 >> 0;
					}
					line = xe;
					_i++;
				}
				return n > 1;
			}
		}
		return false;
	};
	printer.prototype.indentList = function(list) { return this.go$val.indentList(list); };
	printer.Ptr.prototype.stmt = function(stmt, nextIsRBrace) {
		var p, s, _ref, _type, isEmpty, _tuple, x, e, depth, _ref$1, _type$1, body, _struct;
		p = this;
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(stmt.Pos())]));
		_ref = stmt;
		_type = _ref !== null ? _ref.constructor : null;
		switch (0) { default: if (_type === (go$ptrType(ast.BadStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new Go$String("BadStmt")]));
		} else if (_type === (go$ptrType(ast.DeclStmt))) {
			s = _ref.go$val;
			p.decl(s.Decl);
		} else if (_type === (go$ptrType(ast.EmptyStmt))) {
			s = _ref.go$val;
		} else if (_type === (go$ptrType(ast.LabeledStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60)]));
			p.expr(s.Label);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(s.Colon), new token.Token(58), new whiteSpace(62)]));
			if (_tuple = (x = s.Stmt, (x !== null && x.constructor === (go$ptrType(ast.EmptyStmt)) ? [x.go$val, true] : [(go$ptrType(ast.EmptyStmt)).nil, false])), e = _tuple[0], isEmpty = _tuple[1], isEmpty) {
				if (!nextIsRBrace) {
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(10), new token.Pos(e.Pos()), new token.Token(57)]));
					break;
				}
			} else {
				p.linebreak(p.lineFor(s.Stmt.Pos()), 1, 0, true);
			}
			p.stmt(s.Stmt, nextIsRBrace);
		} else if (_type === (go$ptrType(ast.ExprStmt))) {
			s = _ref.go$val;
			p.expr0(s.X, 1);
		} else if (_type === (go$ptrType(ast.SendStmt))) {
			s = _ref.go$val;
			p.expr0(s.Chan, 1);
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32), new token.Pos(s.Arrow), new token.Token(36), new whiteSpace(32)]));
			p.expr0(s.Value, 1);
		} else if (_type === (go$ptrType(ast.IncDecStmt))) {
			s = _ref.go$val;
			p.expr0(s.X, 2);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(s.TokPos), new token.Token(s.Tok)]));
		} else if (_type === (go$ptrType(ast.AssignStmt))) {
			s = _ref.go$val;
			depth = 1;
			if (s.Lhs.length > 1 && s.Rhs.length > 1) {
				depth = depth + 1 >> 0;
			}
			p.exprList(s.Pos(), s.Lhs, depth, 0, s.TokPos);
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32), new token.Pos(s.TokPos), new token.Token(s.Tok), new whiteSpace(32)]));
			p.exprList(s.TokPos, s.Rhs, depth, 0, 0);
		} else if (_type === (go$ptrType(ast.GoStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(72), new whiteSpace(32)]));
			p.expr(s.Call);
		} else if (_type === (go$ptrType(ast.DeferStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(67), new whiteSpace(32)]));
			p.expr(s.Call);
		} else if (_type === (go$ptrType(ast.ReturnStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(80)]));
			if (!(s.Results === (go$sliceType(ast.Expr)).nil)) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				if (p.indentList(s.Results)) {
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(62)]));
					p.exprList(s.Pos(), s.Results, 1, 2, 0);
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60)]));
				} else {
					p.exprList(s.Pos(), s.Results, 1, 0, 0);
				}
			}
		} else if (_type === (go$ptrType(ast.BranchStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(s.Tok)]));
			if (!(s.Label === (go$ptrType(ast.Ident)).nil)) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				p.expr(s.Label);
			}
		} else if (_type === (go$ptrType(ast.BlockStmt))) {
			s = _ref.go$val;
			p.block(s, 1);
		} else if (_type === (go$ptrType(ast.IfStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(74)]));
			p.controlClause(false, s.Init, s.Cond, null);
			p.block(s.Body, 1);
			if (!(go$interfaceIsEqual(s.Else, null))) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32), new token.Token(68), new whiteSpace(32)]));
				_ref$1 = s.Else;
				_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
				if (_type$1 === (go$ptrType(ast.BlockStmt)) || _type$1 === (go$ptrType(ast.IfStmt))) {
					p.stmt(s.Else, nextIsRBrace);
				} else {
					p.print(new (go$sliceType(go$emptyInterface))([new token.Token(51), new whiteSpace(62), new whiteSpace(12)]));
					p.stmt(s.Else, true);
					p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60), new whiteSpace(12), new token.Token(56)]));
				}
			}
		} else if (_type === (go$ptrType(ast.CaseClause))) {
			s = _ref.go$val;
			if (!(s.List === (go$sliceType(ast.Expr)).nil)) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(62), new whiteSpace(32)]));
				p.exprList(s.Pos(), s.List, 1, 0, s.Colon);
			} else {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(66)]));
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(s.Colon), new token.Token(58)]));
			p.stmtList(s.Body, 1, nextIsRBrace);
		} else if (_type === (go$ptrType(ast.SwitchStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(83)]));
			p.controlClause(false, s.Init, s.Tag, null);
			p.block(s.Body, 0);
		} else if (_type === (go$ptrType(ast.TypeSwitchStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(83)]));
			if (!(go$interfaceIsEqual(s.Init, null))) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				p.stmt(s.Init, false);
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(57)]));
			}
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
			p.stmt(s.Assign, false);
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
			p.block(s.Body, 0);
		} else if (_type === (go$ptrType(ast.CommClause))) {
			s = _ref.go$val;
			if (!(go$interfaceIsEqual(s.Comm, null))) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(62), new whiteSpace(32)]));
				p.stmt(s.Comm, false);
			} else {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Token(66)]));
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(s.Colon), new token.Token(58)]));
			p.stmtList(s.Body, 1, nextIsRBrace);
		} else if (_type === (go$ptrType(ast.SelectStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(81), new whiteSpace(32)]));
			body = s.Body;
			if ((body.List.length === 0) && !p.commentBefore((_struct = p.posFor(body.Rbrace), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)))) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(body.Lbrace), new token.Token(51), new token.Pos(body.Rbrace), new token.Token(56)]));
			} else {
				p.block(body, 0);
			}
		} else if (_type === (go$ptrType(ast.ForStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(70)]));
			p.controlClause(true, s.Init, s.Cond, s.Post);
			p.block(s.Body, 1);
		} else if (_type === (go$ptrType(ast.RangeStmt))) {
			s = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Token(70), new whiteSpace(32)]));
			p.expr(s.Key);
			if (!(go$interfaceIsEqual(s.Value, null))) {
				p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(s.Value.Pos()), new token.Token(52), new whiteSpace(32)]));
				p.expr(s.Value);
			}
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32), new token.Pos(s.TokPos), new token.Token(s.Tok), new whiteSpace(32), new token.Token(79), new whiteSpace(32)]));
			p.expr(stripParens(s.X));
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
			p.block(s.Body, 1);
		} else {
			s = _ref;
			throw go$panic(new Go$String("unreachable"));
		} }
		return;
	};
	printer.prototype.stmt = function(stmt, nextIsRBrace) { return this.go$val.stmt(stmt, nextIsRBrace); };
	keepTypeColumn = function(specs) {
		var m, populate, i0, keepType, _ref, _i, _slice, _index, s, i, t;
		m = (go$sliceType(Go$Bool)).make(specs.length, 0, function() { return false; });
		populate = (function(i, j, keepType) {
			var _slice, _index;
			if (keepType) {
				while (i < j) {
					_slice = m, _index = i, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = true) : go$throwRuntimeError("index out of range");
					i = i + 1 >> 0;
				}
			}
		});
		i0 = -1;
		keepType = false;
		_ref = specs;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			t = (s !== null && s.constructor === (go$ptrType(ast.ValueSpec)) ? s.go$val : go$typeAssertionFailed(s, (go$ptrType(ast.ValueSpec))));
			if (!(t.Values === (go$sliceType(ast.Expr)).nil)) {
				if (i0 < 0) {
					i0 = i;
					keepType = false;
				}
			} else {
				if (i0 >= 0) {
					populate(i0, i, keepType);
					i0 = -1;
				}
			}
			if (!(go$interfaceIsEqual(t.Type, null))) {
				keepType = true;
			}
			_i++;
		}
		if (i0 >= 0) {
			populate(i0, specs.length, keepType);
		}
		return m;
	};
	printer.Ptr.prototype.valueSpec = function(s, keepType) {
		var p, extraTabs;
		p = this;
		p.setComment(s.Doc);
		p.identList(s.Names, false);
		extraTabs = 3;
		if (!(go$interfaceIsEqual(s.Type, null)) || keepType) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(11)]));
			extraTabs = extraTabs - 1 >> 0;
		}
		if (!(go$interfaceIsEqual(s.Type, null))) {
			p.expr(s.Type);
		}
		if (!(s.Values === (go$sliceType(ast.Expr)).nil)) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(11), new token.Token(42), new whiteSpace(32)]));
			p.exprList(0, s.Values, 1, 0, 0);
			extraTabs = extraTabs - 1 >> 0;
		}
		if (!(s.Comment === (go$ptrType(ast.CommentGroup)).nil)) {
			while (extraTabs > 0) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(11)]));
				extraTabs = extraTabs - 1 >> 0;
			}
			p.setComment(s.Comment);
		}
	};
	printer.prototype.valueSpec = function(s, keepType) { return this.go$val.valueSpec(s, keepType); };
	printer.Ptr.prototype.spec = function(spec, n, doIndent) {
		var p, s, _ref, _type;
		p = this;
		_ref = spec;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.ImportSpec))) {
			s = _ref.go$val;
			p.setComment(s.Doc);
			if (!(s.Name === (go$ptrType(ast.Ident)).nil)) {
				p.expr(s.Name);
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
			}
			p.expr(s.Path);
			p.setComment(s.Comment);
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(s.EndPos)]));
		} else if (_type === (go$ptrType(ast.ValueSpec))) {
			s = _ref.go$val;
			if (!((n === 1))) {
				p.internalError(new (go$sliceType(go$emptyInterface))([new Go$String("expected n = 1; got"), new Go$Int(n)]));
			}
			p.setComment(s.Doc);
			p.identList(s.Names, doIndent);
			if (!(go$interfaceIsEqual(s.Type, null))) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				p.expr(s.Type);
			}
			if (!(s.Values === (go$sliceType(ast.Expr)).nil)) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32), new token.Token(42), new whiteSpace(32)]));
				p.exprList(0, s.Values, 1, 0, 0);
			}
			p.setComment(s.Comment);
		} else if (_type === (go$ptrType(ast.TypeSpec))) {
			s = _ref.go$val;
			p.setComment(s.Doc);
			p.expr(s.Name);
			if (n === 1) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
			} else {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(11)]));
			}
			p.expr(s.Type);
			p.setComment(s.Comment);
		} else {
			s = _ref;
			throw go$panic(new Go$String("unreachable"));
		}
	};
	printer.prototype.spec = function(spec, n, doIndent) { return this.go$val.spec(spec, n, doIndent); };
	printer.Ptr.prototype.genDecl = function(d) {
		var p, n, keepType, newSection, _ref, _i, _slice, _index, s, i, _slice$1, _index$1, newSection$1, _ref$1, _i$1, _slice$2, _index$2, s$1, i$1, _slice$3, _index$3;
		p = this;
		p.setComment(d.Doc);
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(d.Pos()), new token.Token(d.Tok), new whiteSpace(32)]));
		if ((new token.Pos(d.Lparen)).IsValid()) {
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(d.Lparen), new token.Token(49)]));
			if (n = d.Specs.length, n > 0) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(62), new whiteSpace(12)]));
				if (n > 1 && ((d.Tok === 64) || (d.Tok === 85))) {
					keepType = keepTypeColumn(d.Specs);
					newSection = false;
					_ref = d.Specs;
					_i = 0;
					while (_i < _ref.length) {
						s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
						i = _i;
						if (i > 0) {
							p.linebreak(p.lineFor(s.Pos()), 1, 0, newSection);
						}
						p.valueSpec((s !== null && s.constructor === (go$ptrType(ast.ValueSpec)) ? s.go$val : go$typeAssertionFailed(s, (go$ptrType(ast.ValueSpec)))), (_slice$1 = keepType, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
						newSection = p.isMultiLine(s);
						_i++;
					}
				} else {
					newSection$1 = false;
					_ref$1 = d.Specs;
					_i$1 = 0;
					while (_i$1 < _ref$1.length) {
						s$1 = (_slice$2 = _ref$1, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
						i$1 = _i$1;
						if (i$1 > 0) {
							p.linebreak(p.lineFor(s$1.Pos()), 1, 0, newSection$1);
						}
						p.spec(s$1, n, false);
						newSection$1 = p.isMultiLine(s$1);
						_i$1++;
					}
				}
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(60), new whiteSpace(12)]));
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(d.Rparen), new token.Token(54)]));
		} else {
			p.spec((_slice$3 = d.Specs, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), 1, true);
		}
	};
	printer.prototype.genDecl = function(d) { return this.go$val.genDecl(d); };
	printer.Ptr.prototype.nodeSize = function(n, maxSize) {
		var size, p, found, _tuple, _entry, size$1, _key, cfg, buf, err, _ref, _i, _slice, _index, ch, _key$1;
		size = 0;
		p = this;
		if (_tuple = (_entry = p.nodeSizes[(n || go$interfaceNil).go$key()], _entry !== undefined ? [_entry.v, true] : [0, false]), size$1 = _tuple[0], found = _tuple[1], found) {
			size = size$1;
			return size;
		}
		size = maxSize + 1 >> 0;
		_key = n, (p.nodeSizes || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: size };
		cfg = new Config.Ptr(1, 0, 0);
		buf = new bytes.Buffer.Ptr();
		if (err = cfg.fprint(buf, p.fset, n, p.nodeSizes), !(go$interfaceIsEqual(err, null))) {
			return size;
		}
		if (buf.Len() <= maxSize) {
			_ref = buf.Bytes();
			_i = 0;
			while (_i < _ref.length) {
				ch = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (ch < 32) {
					return size;
				}
				_i++;
			}
			size = buf.Len();
			_key$1 = n, (p.nodeSizes || go$throwRuntimeError("assignment to entry in nil map"))[(_key$1 || go$interfaceNil).go$key()] = { k: _key$1, v: size };
		}
		return size;
	};
	printer.prototype.nodeSize = function(n, maxSize) { return this.go$val.nodeSize(n, maxSize); };
	printer.Ptr.prototype.bodySize = function(b, maxSize) {
		var p, pos1, pos2, _struct, bodySize, _ref, _i, _slice, _index, s, i;
		p = this;
		pos1 = b.Pos();
		pos2 = b.Rbrace;
		if ((new token.Pos(pos1)).IsValid() && (new token.Pos(pos2)).IsValid() && !((p.lineFor(pos1) === p.lineFor(pos2)))) {
			return maxSize + 1 >> 0;
		}
		if (b.List.length > 5 || p.commentBefore((_struct = p.posFor(pos2), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)))) {
			return maxSize + 1 >> 0;
		}
		bodySize = 0;
		_ref = b.List;
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				bodySize = bodySize + 2 >> 0;
			}
			bodySize = bodySize + (p.nodeSize(s, maxSize)) >> 0;
			_i++;
		}
		return bodySize;
	};
	printer.prototype.bodySize = function(b, maxSize) { return this.go$val.bodySize(b, maxSize); };
	printer.Ptr.prototype.adjBlock = function(headerSize, sep, b) {
		var p, _ref, _i, _slice, _index, s, i;
		p = this;
		if (b === (go$ptrType(ast.BlockStmt)).nil) {
			return;
		}
		if ((headerSize + p.bodySize(b, 100) >> 0) <= 100) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(sep), new token.Pos(b.Lbrace), new token.Token(51)]));
			if (b.List.length > 0) {
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
				_ref = b.List;
				_i = 0;
				while (_i < _ref.length) {
					s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					i = _i;
					if (i > 0) {
						p.print(new (go$sliceType(go$emptyInterface))([new token.Token(57), new whiteSpace(32)]));
					}
					p.stmt(s, i === (b.List.length - 1 >> 0));
					_i++;
				}
				p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
			}
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(b.Rbrace), new token.Token(56)]));
			return;
		}
		if (!((sep === 0))) {
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
		}
		p.block(b, 1);
	};
	printer.prototype.adjBlock = function(headerSize, sep, b) { return this.go$val.adjBlock(headerSize, sep, b); };
	printer.Ptr.prototype.distanceFrom = function(from) {
		var p, f, _struct;
		p = this;
		if ((new token.Pos(from)).IsValid() && p.pos.IsValid()) {
			if (f = (_struct = p.posFor(from), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)), f.Line === p.pos.Line) {
				return p.pos.Column - f.Column >> 0;
			}
		}
		return 1073741824;
	};
	printer.prototype.distanceFrom = function(from) { return this.go$val.distanceFrom(from); };
	printer.Ptr.prototype.funcDecl = function(d) {
		var p;
		p = this;
		p.setComment(d.Doc);
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(d.Pos()), new token.Token(71), new whiteSpace(32)]));
		if (!(d.Recv === (go$ptrType(ast.FieldList)).nil)) {
			p.parameters(d.Recv);
			p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(32)]));
		}
		p.expr(d.Name);
		p.signature(d.Type.Params, d.Type.Results);
		p.adjBlock(p.distanceFrom(d.Pos()), 11, d.Body);
	};
	printer.prototype.funcDecl = function(d) { return this.go$val.funcDecl(d); };
	printer.Ptr.prototype.decl = function(decl) {
		var p, d, _ref, _type;
		p = this;
		_ref = decl;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.BadDecl))) {
			d = _ref.go$val;
			p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(d.Pos()), new Go$String("BadDecl")]));
		} else if (_type === (go$ptrType(ast.GenDecl))) {
			d = _ref.go$val;
			p.genDecl(d);
		} else if (_type === (go$ptrType(ast.FuncDecl))) {
			d = _ref.go$val;
			p.funcDecl(d);
		} else {
			d = _ref;
			throw go$panic(new Go$String("unreachable"));
		}
	};
	printer.prototype.decl = function(decl) { return this.go$val.decl(decl); };
	declToken = function(decl) {
		var tok, d, _ref, _type;
		tok = 0;
		tok = 0;
		_ref = decl;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.GenDecl))) {
			d = _ref.go$val;
			tok = d.Tok;
		} else if (_type === (go$ptrType(ast.FuncDecl))) {
			d = _ref.go$val;
			tok = 71;
		}
		return tok;
	};
	printer.Ptr.prototype.declList = function(list) {
		var p, tok, _ref, _i, _slice, _index, d, prev, min;
		p = this;
		tok = 0;
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			d = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			prev = tok;
			tok = declToken(d);
			if (p.output.length > 0) {
				min = 1;
				if (!((prev === tok)) || !(getDoc(d) === (go$ptrType(ast.CommentGroup)).nil)) {
					min = 2;
				}
				p.linebreak(p.lineFor(d.Pos()), min, 0, false);
			}
			p.decl(d);
			_i++;
		}
	};
	printer.prototype.declList = function(list) { return this.go$val.declList(list); };
	printer.Ptr.prototype.file = function(src) {
		var p;
		p = this;
		p.setComment(src.Doc);
		p.print(new (go$sliceType(go$emptyInterface))([new token.Pos(src.Pos()), new token.Token(78), new whiteSpace(32)]));
		p.expr(src.Name);
		p.declList(src.Decls);
		p.print(new (go$sliceType(go$emptyInterface))([new whiteSpace(10)]));
	};
	printer.prototype.file = function(src) { return this.go$val.file(src); };
	printer.Ptr.prototype.init = function(cfg, fset, nodeSizes) {
		var p, _struct;
		p = this;
		p.Config = (_struct = cfg, new Config.Ptr(_struct.Mode, _struct.Tabwidth, _struct.Indent));
		p.fset = fset;
		p.pos = new token.Position.Ptr("", 0, 1, 1);
		p.out = new token.Position.Ptr("", 0, 1, 1);
		p.wsbuf = (go$sliceType(whiteSpace)).make(0, 16, function() { return 0; });
		p.nodeSizes = nodeSizes;
		p.cachedPos = -1;
	};
	printer.prototype.init = function(cfg, fset, nodeSizes) { return this.go$val.init(cfg, fset, nodeSizes); };
	printer.Ptr.prototype.commentsHaveNewline = function(list) {
		var p, _slice, _index, line, _ref, _i, _slice$1, _index$1, c, i, _slice$2, _index$2, t;
		p = this;
		line = p.lineFor((_slice = list, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Pos());
		_ref = list;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0 && !((p.lineFor((_slice$2 = list, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).Pos()) === line))) {
				return true;
			}
			if (t = c.Text, t.length >= 2 && ((t.charCodeAt(1) === 47) || strings.Contains(t, "\n"))) {
				return true;
			}
			_i++;
		}
		return false;
	};
	printer.prototype.commentsHaveNewline = function(list) { return this.go$val.commentsHaveNewline(list); };
	printer.Ptr.prototype.nextComment = function() {
		var p, _slice, _index, c, list, _slice$1, _index$1;
		p = this;
		while (p.cindex < p.comments.length) {
			c = (_slice = p.comments, _index = p.cindex, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			p.cindex = p.cindex + 1 >> 0;
			if (list = c.List, list.length > 0) {
				p.comment = c;
				p.commentOffset = p.posFor((_slice$1 = list, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Pos()).Offset;
				p.commentNewline = p.commentsHaveNewline(list);
				return;
			}
		}
		p.commentOffset = 1073741824;
	};
	printer.prototype.nextComment = function() { return this.go$val.nextComment(); };
	printer.Ptr.prototype.internalError = function(msg) {
		var p;
		p = this;
	};
	printer.prototype.internalError = function(msg) { return this.go$val.internalError(msg); };
	printer.Ptr.prototype.posFor = function(pos) {
		var p, _struct;
		p = this;
		return (_struct = p.fset.Position(pos), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
	};
	printer.prototype.posFor = function(pos) { return this.go$val.posFor(pos); };
	printer.Ptr.prototype.lineFor = function(pos) {
		var p;
		p = this;
		if (!((pos === p.cachedPos))) {
			p.cachedPos = pos;
			p.cachedLine = p.fset.Position(pos).Line;
		}
		return p.cachedLine;
	};
	printer.prototype.lineFor = function(pos) { return this.go$val.lineFor(pos); };
	printer.Ptr.prototype.atLineBegin = function(pos) {
		var p, n, i;
		p = this;
		if (!((((p.Config.Mode & 8) >>> 0) === 0)) && pos.IsValid() && (!((p.out.Line === pos.Line)) || !(p.out.Filename === pos.Filename))) {
			p.output = go$append(p.output, 255);
			p.output = go$appendSlice(p.output, new (go$sliceType(Go$Uint8))(go$stringToBytes(fmt.Sprintf("//line %s:%d\n", new (go$sliceType(go$emptyInterface))([new Go$String(pos.Filename), new Go$Int(pos.Line)])))));
			p.output = go$append(p.output, 255);
			p.out.Filename = pos.Filename;
			p.out.Line = pos.Line;
		}
		n = p.Config.Indent + p.indent >> 0;
		i = 0;
		while (i < n) {
			p.output = go$append(p.output, 9);
			i = i + 1 >> 0;
		}
		p.pos.Offset = p.pos.Offset + (n) >> 0;
		p.pos.Column = p.pos.Column + (n) >> 0;
		p.out.Column = p.out.Column + (n) >> 0;
	};
	printer.prototype.atLineBegin = function(pos) { return this.go$val.atLineBegin(pos); };
	printer.Ptr.prototype.writeByte = function(ch, n) {
		var p, _struct, i;
		p = this;
		if (p.out.Column === 1) {
			p.atLineBegin((_struct = p.pos, new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)));
		}
		i = 0;
		while (i < n) {
			p.output = go$append(p.output, ch);
			i = i + 1 >> 0;
		}
		p.pos.Offset = p.pos.Offset + (n) >> 0;
		if ((ch === 10) || (ch === 12)) {
			p.pos.Line = p.pos.Line + (n) >> 0;
			p.out.Line = p.out.Line + (n) >> 0;
			p.pos.Column = 1;
			p.out.Column = 1;
			return;
		}
		p.pos.Column = p.pos.Column + (n) >> 0;
		p.out.Column = p.out.Column + (n) >> 0;
	};
	printer.prototype.writeByte = function(ch, n) { return this.go$val.writeByte(ch, n); };
	printer.Ptr.prototype.writeString = function(pos, s, isLit) {
		var p, _struct, _struct$1, nlines, li, i, c, _struct$2;
		p = this;
		if (p.out.Column === 1) {
			p.atLineBegin((_struct = pos, new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)));
		}
		if (pos.IsValid()) {
			p.pos = (_struct$1 = pos, new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column));
		}
		if (isLit) {
			p.output = go$append(p.output, 255);
		}
		p.output = go$appendSlice(p.output, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
		nlines = 0;
		li = 0;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === 10) {
				nlines = nlines + 1 >> 0;
				li = i;
			}
			i = i + 1 >> 0;
		}
		p.pos.Offset = p.pos.Offset + (s.length) >> 0;
		if (nlines > 0) {
			p.pos.Line = p.pos.Line + (nlines) >> 0;
			p.out.Line = p.out.Line + (nlines) >> 0;
			c = s.length - li >> 0;
			p.pos.Column = c;
			p.out.Column = c;
		} else {
			p.pos.Column = p.pos.Column + (s.length) >> 0;
			p.out.Column = p.out.Column + (s.length) >> 0;
		}
		if (isLit) {
			p.output = go$append(p.output, 255);
		}
		p.last = (_struct$2 = p.pos, new token.Position.Ptr(_struct$2.Filename, _struct$2.Offset, _struct$2.Line, _struct$2.Column));
	};
	printer.prototype.writeString = function(pos, s, isLit) { return this.go$val.writeString(pos, s, isLit); };
	printer.Ptr.prototype.writeCommentPrefix = function(pos, next, prev, comment, tok) {
		var p, hasSep, j, _ref, _i, _slice, _index, ch, i, _ref$1, _slice$1, _index$1, sep, droppedLinebreak, j$1, _ref$2, _i$1, _slice$2, _index$2, ch$1, i$1, _ref$3, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, n;
		p = this;
		if (p.output.length === 0) {
			return;
		}
		if (pos.IsValid() && !(pos.Filename === p.last.Filename)) {
			p.writeByte(12, 2);
			return;
		}
		if ((pos.Line === p.last.Line) && (prev === (go$ptrType(ast.Comment)).nil || !((prev.Text.charCodeAt(1) === 47)))) {
			hasSep = false;
			if (prev === (go$ptrType(ast.Comment)).nil) {
				j = 0;
				_ref = p.wsbuf;
				_i = 0;
				while (_i < _ref.length) {
					ch = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					i = _i;
					_ref$1 = ch;
					if (_ref$1 === 32) {
						_slice$1 = p.wsbuf, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 0) : go$throwRuntimeError("index out of range");
						_i++;
						continue;
					} else if (_ref$1 === 11) {
						hasSep = true;
						_i++;
						continue;
					} else if (_ref$1 === 62) {
						_i++;
						continue;
					}
					j = i;
					break;
				}
				p.writeWhitespace(j);
			}
			if (!hasSep) {
				sep = 9;
				if (pos.Line === next.Line) {
					sep = 32;
				}
				p.writeByte(sep, 1);
			}
		} else {
			droppedLinebreak = false;
			j$1 = 0;
			_ref$2 = p.wsbuf;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				ch$1 = (_slice$2 = _ref$2, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				i$1 = _i$1;
				_ref$3 = ch$1;
				if (_ref$3 === 32 || _ref$3 === 11) {
					_slice$3 = p.wsbuf, _index$3 = i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = 0) : go$throwRuntimeError("index out of range");
					_i$1++;
					continue;
				} else if (_ref$3 === 62) {
					_i$1++;
					continue;
				} else if (_ref$3 === 60) {
					if ((i$1 + 1 >> 0) < p.wsbuf.length && ((_slice$4 = p.wsbuf, _index$4 = (i$1 + 1 >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) === 60)) {
						_i$1++;
						continue;
					}
					if (!((tok === 56)) && (pos.Column === next.Column)) {
						_i$1++;
						continue;
					}
				} else if (_ref$3 === 10 || _ref$3 === 12) {
					_slice$5 = p.wsbuf, _index$5 = i$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = 0) : go$throwRuntimeError("index out of range");
					droppedLinebreak = prev === (go$ptrType(ast.Comment)).nil;
				}
				j$1 = i$1;
				break;
			}
			p.writeWhitespace(j$1);
			n = 0;
			if (pos.IsValid() && p.last.IsValid()) {
				n = pos.Line - p.last.Line >> 0;
				if (n < 0) {
					n = 0;
				}
			}
			if ((p.indent === 0) && droppedLinebreak) {
				n = n + 1 >> 0;
			}
			if ((n === 0) && !(prev === (go$ptrType(ast.Comment)).nil) && (prev.Text.charCodeAt(1) === 47)) {
				n = 1;
			}
			if (n > 0) {
				p.writeByte(12, nlimit(n));
			}
		}
	};
	printer.prototype.writeCommentPrefix = function(pos, next, prev, comment, tok) { return this.go$val.writeCommentPrefix(pos, next, prev, comment, tok); };
	isBlank = function(s) {
		var i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) > 32) {
				return false;
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	commonPrefix = function(a, b) {
		var i;
		i = 0;
		while (i < a.length && i < b.length && (a.charCodeAt(i) === b.charCodeAt(i)) && (a.charCodeAt(i) <= 32 || (a.charCodeAt(i) === 42))) {
			i = i + 1 >> 0;
		}
		return a.substring(0, i);
	};
	trimRight = function(s) {
		return strings.TrimRightFunc(s, unicode.IsSpace);
	};
	stripCommonPrefix = function(lines) {
		var prefix, first, _ref, _i, _slice, _index, line, i, _slice$1, _index$1, _slice$2, _index$2, line$1, lineOfStars, i$1, _slice$3, _index$3, first$1, i$2, n, suffix, n$1, _slice$4, _index$4, _slice$5, _index$5, _tuple, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, last, closing, i$3, _slice$9, _index$9, _ref$1, _i$1, _slice$10, _index$10, line$2, i$4, _slice$11, _index$11;
		if (lines.length <= 1) {
			return;
		}
		prefix = "";
		if (lines.length > 2) {
			first = true;
			_ref = go$subslice(lines, 1, (lines.length - 1 >> 0));
			_i = 0;
			while (_i < _ref.length) {
				line = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (isBlank(line)) {
					_slice$1 = lines, _index$1 = 1 + i >> 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = "") : go$throwRuntimeError("index out of range");
				} else if (first) {
					prefix = commonPrefix(line, line);
					first = false;
				} else {
					prefix = commonPrefix(prefix, line);
				}
				_i++;
			}
		} else {
			line$1 = (_slice$2 = lines, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			prefix = commonPrefix(line$1, line$1);
		}
		lineOfStars = false;
		if (i$1 = strings.Index(prefix, "*"), i$1 >= 0) {
			if (i$1 > 0 && (prefix.charCodeAt((i$1 - 1 >> 0)) === 32)) {
				i$1 = i$1 - 1 >> 0;
			}
			prefix = prefix.substring(0, i$1);
			lineOfStars = true;
		} else {
			first$1 = (_slice$3 = lines, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			if (isBlank(first$1.substring(2))) {
				i$2 = prefix.length;
				n = 0;
				while (n < 3 && i$2 > 0 && (prefix.charCodeAt((i$2 - 1 >> 0)) === 32)) {
					i$2 = i$2 - 1 >> 0;
					n = n + 1 >> 0;
				}
				if ((i$2 === prefix.length) && i$2 > 0 && (prefix.charCodeAt((i$2 - 1 >> 0)) === 9)) {
					i$2 = i$2 - 1 >> 0;
				}
				prefix = prefix.substring(0, i$2);
			} else {
				suffix = (go$sliceType(Go$Uint8)).make(first$1.length, 0, function() { return 0; });
				n$1 = 2;
				while (n$1 < first$1.length && first$1.charCodeAt(n$1) <= 32) {
					_slice$4 = suffix, _index$4 = n$1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = first$1.charCodeAt(n$1)) : go$throwRuntimeError("index out of range");
					n$1 = n$1 + 1 >> 0;
				}
				if (n$1 > 2 && ((_slice$5 = suffix, _index$5 = 2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")) === 9)) {
					suffix = go$subslice(suffix, 2, n$1);
				} else {
					_tuple = [32, 32], _slice$6 = suffix, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$7 = suffix, _index$7 = 1, (_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = _tuple[1]) : go$throwRuntimeError("index out of range");
					suffix = go$subslice(suffix, 0, n$1);
				}
				prefix = strings.TrimSuffix(prefix, go$bytesToString(suffix));
			}
		}
		last = (_slice$8 = lines, _index$8 = (lines.length - 1 >> 0), (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
		closing = "*/";
		i$3 = strings.Index(last, closing);
		if (isBlank(last.substring(0, i$3))) {
			if (lineOfStars) {
				closing = " */";
			}
			_slice$9 = lines, _index$9 = lines.length - 1 >> 0, (_index$9 >= 0 && _index$9 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$9] = prefix + closing) : go$throwRuntimeError("index out of range");
		} else {
			prefix = commonPrefix(prefix, last);
		}
		_ref$1 = lines;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			line$2 = (_slice$10 = _ref$1, _index$10 = _i$1, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range"));
			i$4 = _i$1;
			if (i$4 > 0 && !(line$2 === "")) {
				_slice$11 = lines, _index$11 = i$4, (_index$11 >= 0 && _index$11 < _slice$11.length) ? (_slice$11.array[_slice$11.offset + _index$11] = line$2.substring(prefix.length)) : go$throwRuntimeError("index out of range");
			}
			_i$1++;
		}
	};
	printer.Ptr.prototype.writeComment = function(comment) {
		var p, text, _struct, pos, ldir, i, err, line, _tuple, indent, _struct$1, lines, _ref, _i, _slice, _index, line$1, i$1, _slice$1, _index$1, _ref$1, _i$1, _slice$2, _index$2, line$2, i$2, _struct$2, _struct$3;
		var go$deferred = [];
		try {
			p = this;
			text = comment.Text;
			pos = (_struct = p.posFor(comment.Pos()), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
			if (strings.HasPrefix(text, "//line ") && (!pos.IsValid() || (pos.Column === 1))) {
				ldir = strings.TrimSpace(text.substring(7));
				if (i = strings.LastIndex(ldir, ":"), i >= 0) {
					if (_tuple = strconv.Atoi(ldir.substring((i + 1 >> 0))), line = _tuple[0], err = _tuple[1], go$interfaceIsEqual(err, null) && line > 0) {
						indent = p.indent;
						p.indent = 0;
						go$deferred.push({ fun: (function() {
							p.pos.Filename = ldir.substring(0, i);
							p.pos.Line = line;
							p.pos.Column = 1;
							p.indent = indent;
						}), args: [] });
					}
				}
			}
			if (text.charCodeAt(1) === 47) {
				p.writeString((_struct$1 = pos, new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column)), trimRight(text), true);
				return;
			}
			lines = strings.Split(text, "\n");
			if (pos.IsValid() && (pos.Column === 1) && p.indent > 0) {
				_ref = go$subslice(lines, 1);
				_i = 0;
				while (_i < _ref.length) {
					line$1 = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					i$1 = _i;
					_slice$1 = lines, _index$1 = 1 + i$1 >> 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = "   " + line$1) : go$throwRuntimeError("index out of range");
					_i++;
				}
			}
			stripCommonPrefix(lines);
			_ref$1 = lines;
			_i$1 = 0;
			while (_i$1 < _ref$1.length) {
				line$2 = (_slice$2 = _ref$1, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				i$2 = _i$1;
				if (i$2 > 0) {
					p.writeByte(12, 1);
					pos = (_struct$2 = p.pos, new token.Position.Ptr(_struct$2.Filename, _struct$2.Offset, _struct$2.Line, _struct$2.Column));
				}
				if (line$2.length > 0) {
					p.writeString((_struct$3 = pos, new token.Position.Ptr(_struct$3.Filename, _struct$3.Offset, _struct$3.Line, _struct$3.Column)), trimRight(line$2), true);
				}
				_i$1++;
			}
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	printer.prototype.writeComment = function(comment) { return this.go$val.writeComment(comment); };
	printer.Ptr.prototype.writeCommentSuffix = function(needsLinebreak) {
		var wroteNewline, droppedFF, p, _ref, _i, _slice, _index, ch, i, _ref$1, _slice$1, _index$1, _slice$2, _index$2;
		wroteNewline = false;
		droppedFF = false;
		p = this;
		_ref = p.wsbuf;
		_i = 0;
		while (_i < _ref.length) {
			ch = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_ref$1 = ch;
			if (_ref$1 === 32 || _ref$1 === 11) {
				_slice$1 = p.wsbuf, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 0) : go$throwRuntimeError("index out of range");
			} else if (_ref$1 === 62 || _ref$1 === 60) {
			} else if (_ref$1 === 10 || _ref$1 === 12) {
				if (needsLinebreak) {
					needsLinebreak = false;
					wroteNewline = true;
				} else {
					if (ch === 12) {
						droppedFF = true;
					}
					_slice$2 = p.wsbuf, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 0) : go$throwRuntimeError("index out of range");
				}
			}
			_i++;
		}
		p.writeWhitespace(p.wsbuf.length);
		if (needsLinebreak) {
			p.writeByte(10, 1);
			wroteNewline = true;
		}
		return [wroteNewline, droppedFF];
	};
	printer.prototype.writeCommentSuffix = function(needsLinebreak) { return this.go$val.writeCommentSuffix(needsLinebreak); };
	printer.Ptr.prototype.intersperseComments = function(next, tok) {
		var wroteNewline, droppedFF, p, last, _struct, _ref, _i, _slice, _index, c, _struct$1, _struct$2, needsLinebreak, _tuple;
		wroteNewline = false;
		droppedFF = false;
		p = this;
		last = (go$ptrType(ast.Comment)).nil;
		while (p.commentBefore((_struct = next, new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)))) {
			_ref = p.comment.List;
			_i = 0;
			while (_i < _ref.length) {
				c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				p.writeCommentPrefix((_struct$1 = p.posFor(c.Pos()), new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column)), (_struct$2 = next, new token.Position.Ptr(_struct$2.Filename, _struct$2.Offset, _struct$2.Line, _struct$2.Column)), last, c, tok);
				p.writeComment(c);
				last = c;
				_i++;
			}
			p.nextComment();
		}
		if (!(last === (go$ptrType(ast.Comment)).nil)) {
			if ((last.Text.charCodeAt(1) === 42) && (p.lineFor(last.Pos()) === next.Line) && !((tok === 52)) && !((tok === 54)) && !((tok === 55)) && !((tok === 56))) {
				p.writeByte(32, 1);
			}
			needsLinebreak = (last.Text.charCodeAt(1) === 47) || (tok === 56) && ((p.mode & 1) === 0) || (tok === 1);
			_tuple = p.writeCommentSuffix(needsLinebreak), wroteNewline = _tuple[0], droppedFF = _tuple[1];
			return [wroteNewline, droppedFF];
		}
		p.internalError(new (go$sliceType(go$emptyInterface))([new Go$String("intersperseComments called without pending comments")]));
		return [wroteNewline, droppedFF];
	};
	printer.prototype.intersperseComments = function(next, tok) { return this.go$val.intersperseComments(next, tok); };
	printer.Ptr.prototype.writeWhitespace = function(n) {
		var p, i, _slice, _index, ch, _ref, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3, i$1, _slice$4, _index$4, _slice$5, _index$5;
		p = this;
		i = 0;
		while (i < n) {
			ch = (_slice = p.wsbuf, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_ref = ch;
			if (_ref === 0) {
			} else if (_ref === 62) {
				p.indent = p.indent + 1 >> 0;
			} else if (_ref === 60) {
				p.indent = p.indent - 1 >> 0;
				if (p.indent < 0) {
					p.internalError(new (go$sliceType(go$emptyInterface))([new Go$String("negative indentation:"), new Go$Int(p.indent)]));
					p.indent = 0;
				}
			} else if (_ref === 10 || _ref === 12) {
				if ((i + 1 >> 0) < n && ((_slice$1 = p.wsbuf, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 60)) {
					_tuple = [60, 12], _slice$2 = p.wsbuf, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$3 = p.wsbuf, _index$3 = i + 1 >> 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
					i = i - 1 >> 0;
					i = i + 1 >> 0;
					continue;
				}
				p.writeByte((ch << 24 >>> 24), 1);
			} else {
				p.writeByte((ch << 24 >>> 24), 1);
			}
			i = i + 1 >> 0;
		}
		i$1 = 0;
		while (n < p.wsbuf.length) {
			_slice$5 = p.wsbuf, _index$5 = i$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = (_slice$4 = p.wsbuf, _index$4 = n, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"))) : go$throwRuntimeError("index out of range");
			i$1 = i$1 + 1 >> 0;
			n = n + 1 >> 0;
		}
		p.wsbuf = go$subslice(p.wsbuf, 0, i$1);
	};
	printer.prototype.writeWhitespace = function(n) { return this.go$val.writeWhitespace(n); };
	nlimit = function(n) {
		if (n > 2) {
			n = 2;
		}
		return n;
	};
	mayCombine = function(prev, next) {
		var b, _ref;
		b = false;
		_ref = prev;
		if (_ref === 5) {
			b = next === 46;
		} else if (_ref === 12) {
			b = next === 43;
		} else if (_ref === 13) {
			b = next === 45;
		} else if (_ref === 15) {
			b = next === 42;
		} else if (_ref === 40) {
			b = (next === 45) || (next === 60);
		} else if (_ref === 17) {
			b = (next === 38) || (next === 94);
		}
		return b;
	};
	printer.Ptr.prototype.print = function(args) {
		var p, _ref, _i, _slice, _index, arg, data, isLit, impliedSemi, x, _ref$1, _type, i, _slice$1, _index$1, s, _slice$2, _index$2, _ref$2, _struct, _struct$1, next, _tuple, _struct$2, wroteNewline, droppedFF, n, ch, _struct$3;
		p = this;
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			arg = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			data = "";
			isLit = false;
			impliedSemi = false;
			_ref$1 = arg;
			_type = _ref$1 !== null ? _ref$1.constructor : null;
			if (_type === pmode) {
				x = _ref$1.go$val;
				p.mode = (p.mode ^ (x)) >> 0;
				_i++;
				continue;
			} else if (_type === whiteSpace) {
				x = _ref$1.go$val;
				if (x === 0) {
					_i++;
					continue;
				}
				i = p.wsbuf.length;
				if (i === p.wsbuf.capacity) {
					p.writeWhitespace(i);
					i = 0;
				}
				p.wsbuf = go$subslice(p.wsbuf, 0, (i + 1 >> 0));
				_slice$1 = p.wsbuf, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = x) : go$throwRuntimeError("index out of range");
				if ((x === 10) || (x === 12)) {
					p.impliedSemi = false;
				}
				p.lastTok = 0;
				_i++;
				continue;
			} else if (_type === (go$ptrType(ast.Ident))) {
				x = _ref$1.go$val;
				data = x.Name;
				impliedSemi = true;
				p.lastTok = 4;
			} else if (_type === (go$ptrType(ast.BasicLit))) {
				x = _ref$1.go$val;
				data = x.Value;
				isLit = true;
				impliedSemi = true;
				p.lastTok = x.Kind;
			} else if (_type === token.Token) {
				x = _ref$1.go$val;
				s = (new token.Token(x)).String();
				if (mayCombine(p.lastTok, s.charCodeAt(0))) {
					if (!((p.wsbuf.length === 0))) {
						p.internalError(new (go$sliceType(go$emptyInterface))([new Go$String("whitespace buffer not empty")]));
					}
					p.wsbuf = go$subslice(p.wsbuf, 0, 1);
					_slice$2 = p.wsbuf, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 32) : go$throwRuntimeError("index out of range");
				}
				data = s;
				_ref$2 = x;
				if (_ref$2 === 61 || _ref$2 === 65 || _ref$2 === 69 || _ref$2 === 80 || _ref$2 === 37 || _ref$2 === 38 || _ref$2 === 54 || _ref$2 === 55 || _ref$2 === 56) {
					impliedSemi = true;
				}
				p.lastTok = x;
			} else if (_type === token.Pos) {
				x = _ref$1.go$val;
				if ((new token.Pos(x)).IsValid()) {
					p.pos = (_struct = p.posFor(x), new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column));
				}
				_i++;
				continue;
			} else if (_type === Go$String) {
				x = _ref$1.go$val;
				data = x;
				isLit = true;
				impliedSemi = true;
				p.lastTok = 9;
			} else {
				x = _ref$1;
				fmt.Fprintf(os.Stderr, "print: unsupported argument %v (%T)\n", new (go$sliceType(go$emptyInterface))([arg, arg]));
				throw go$panic(new Go$String("go/printer type"));
			}
			next = (_struct$1 = p.pos, new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column));
			_tuple = p.flush((_struct$2 = next, new token.Position.Ptr(_struct$2.Filename, _struct$2.Offset, _struct$2.Line, _struct$2.Column)), p.lastTok), wroteNewline = _tuple[0], droppedFF = _tuple[1];
			if (!p.impliedSemi) {
				n = nlimit(next.Line - p.pos.Line >> 0);
				if (wroteNewline && (n === 2)) {
					n = 1;
				}
				if (n > 0) {
					ch = 10;
					if (droppedFF) {
						ch = 12;
					}
					p.writeByte(ch, n);
					impliedSemi = false;
				}
			}
			p.writeString((_struct$3 = next, new token.Position.Ptr(_struct$3.Filename, _struct$3.Offset, _struct$3.Line, _struct$3.Column)), data, isLit);
			p.impliedSemi = impliedSemi;
			_i++;
		}
	};
	printer.prototype.print = function(args) { return this.go$val.print(args); };
	printer.Ptr.prototype.commentBefore = function(next) {
		var result, p;
		result = false;
		p = this;
		result = p.commentOffset < next.Offset && (!p.impliedSemi || !p.commentNewline);
		return result;
	};
	printer.prototype.commentBefore = function(next) { return this.go$val.commentBefore(next); };
	printer.Ptr.prototype.flush = function(next, tok) {
		var wroteNewline, droppedFF, p, _struct, _tuple, _struct$1;
		wroteNewline = false;
		droppedFF = false;
		p = this;
		if (p.commentBefore((_struct = next, new token.Position.Ptr(_struct.Filename, _struct.Offset, _struct.Line, _struct.Column)))) {
			_tuple = p.intersperseComments((_struct$1 = next, new token.Position.Ptr(_struct$1.Filename, _struct$1.Offset, _struct$1.Line, _struct$1.Column)), tok), wroteNewline = _tuple[0], droppedFF = _tuple[1];
		} else {
			p.writeWhitespace(p.wsbuf.length);
		}
		return [wroteNewline, droppedFF];
	};
	printer.prototype.flush = function(next, tok) { return this.go$val.flush(next, tok); };
	getDoc = function(n) {
		var n$1, _ref, _type;
		_ref = n;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(ast.Field))) {
			n$1 = _ref.go$val;
			return n$1.Doc;
		} else if (_type === (go$ptrType(ast.ImportSpec))) {
			n$1 = _ref.go$val;
			return n$1.Doc;
		} else if (_type === (go$ptrType(ast.ValueSpec))) {
			n$1 = _ref.go$val;
			return n$1.Doc;
		} else if (_type === (go$ptrType(ast.TypeSpec))) {
			n$1 = _ref.go$val;
			return n$1.Doc;
		} else if (_type === (go$ptrType(ast.GenDecl))) {
			n$1 = _ref.go$val;
			return n$1.Doc;
		} else if (_type === (go$ptrType(ast.FuncDecl))) {
			n$1 = _ref.go$val;
			return n$1.Doc;
		} else if (_type === (go$ptrType(ast.File))) {
			n$1 = _ref.go$val;
			return n$1.Doc;
		}
		return (go$ptrType(ast.CommentGroup)).nil;
	};
	printer.Ptr.prototype.printNode = function(node) {
		var go$this = this, p, comments, ok, _tuple, cnode, ok$1, _tuple$1, n, _tuple$2, n$1, ok$2, beg, end, doc, i, _slice, _index, j, _slice$1, _index$1, n$2, _ref, _type, ok$3, _tuple$3, _ref$1, _i, _slice$2, _index$2, s, ok$4, _tuple$4;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		p = go$this;
		comments = (go$sliceType((go$ptrType(ast.CommentGroup)))).nil;
		if (_tuple = (node !== null && node.constructor === (go$ptrType(CommentedNode)) ? [node.go$val, true] : [(go$ptrType(CommentedNode)).nil, false]), cnode = _tuple[0], ok = _tuple[1], ok) {
			node = cnode.Node;
			comments = cnode.Comments;
		}
		/* if (!(comments === (go$sliceType((go$ptrType(ast.CommentGroup)))).nil)) { */ if (!(comments === (go$sliceType((go$ptrType(ast.CommentGroup)))).nil)) {} else if (_tuple$1 = (node !== null && node.constructor === (go$ptrType(ast.File)) ? [node.go$val, true] : [(go$ptrType(ast.File)).nil, false]), n = _tuple$1[0], ok$1 = _tuple$1[1], ok$1) { go$s = 2; continue; } else { go$s = 3; continue; }
			_tuple$2 = (node !== null && ast.Node.implementedBy.indexOf(node.constructor) !== -1 ? [node, true] : [null, false]), n$1 = _tuple$2[0], ok$2 = _tuple$2[1];
			/* if (!ok$2) { */ if (!ok$2) {} else { go$s = 4; continue; }
				/* goto unsupported */ go$s = 1; continue;
			/* } */ case 4:
			beg = n$1.Pos();
			end = n$1.End();
			if (doc = getDoc(n$1), !(doc === (go$ptrType(ast.CommentGroup)).nil)) {
				beg = doc.Pos();
			}
			i = 0;
			while (i < comments.length && (_slice = comments, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).End() < beg) {
				i = i + 1 >> 0;
			}
			j = i;
			while (j < comments.length && (_slice$1 = comments, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Pos() < end) {
				j = j + 1 >> 0;
			}
			if (i < j) {
				p.comments = go$subslice(comments, i, j);
			}
		/* } else if (_tuple$1 = (node !== null && node.constructor === (go$ptrType(ast.File)) ? [node.go$val, true] : [(go$ptrType(ast.File)).nil, false]), n = _tuple$1[0], ok$1 = _tuple$1[1], ok$1) { */ go$s = 3; continue; case 2: 
			p.comments = n.Comments;
		/* } */ case 3:
		p.useNodeComments = p.comments === (go$sliceType((go$ptrType(ast.CommentGroup)))).nil;
		p.nextComment();
		_ref = node;
		_type = _ref !== null ? _ref.constructor : null;
		/* if (ast.Expr.implementedBy.indexOf(_type) !== -1) { */ if (ast.Expr.implementedBy.indexOf(_type) !== -1) {} else if (ast.Stmt.implementedBy.indexOf(_type) !== -1) { go$s = 5; continue; } else if (ast.Decl.implementedBy.indexOf(_type) !== -1) { go$s = 6; continue; } else if (ast.Spec.implementedBy.indexOf(_type) !== -1) { go$s = 7; continue; } else if (_type === (go$sliceType(ast.Stmt))) { go$s = 8; continue; } else if (_type === (go$sliceType(ast.Decl))) { go$s = 9; continue; } else if (_type === (go$ptrType(ast.File))) { go$s = 10; continue; } else { go$s = 11; continue; }
			n$2 = _ref;
			p.expr(n$2);
		/* } else if (ast.Stmt.implementedBy.indexOf(_type) !== -1) { */ go$s = 12; continue; case 5: 
			n$2 = _ref;
			if (_tuple$3 = (n$2 !== null && n$2.constructor === (go$ptrType(ast.LabeledStmt)) ? [n$2.go$val, true] : [(go$ptrType(ast.LabeledStmt)).nil, false]), ok$3 = _tuple$3[1], ok$3) {
				p.indent = 1;
			}
			p.stmt(n$2, false);
		/* } else if (ast.Decl.implementedBy.indexOf(_type) !== -1) { */ go$s = 12; continue; case 6: 
			n$2 = _ref;
			p.decl(n$2);
		/* } else if (ast.Spec.implementedBy.indexOf(_type) !== -1) { */ go$s = 12; continue; case 7: 
			n$2 = _ref;
			p.spec(n$2, 1, false);
		/* } else if (_type === (go$sliceType(ast.Stmt))) { */ go$s = 12; continue; case 8: 
			n$2 = _ref.go$val;
			_ref$1 = n$2;
			_i = 0;
			while (_i < _ref$1.length) {
				s = (_slice$2 = _ref$1, _index$2 = _i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				if (_tuple$4 = (s !== null && s.constructor === (go$ptrType(ast.LabeledStmt)) ? [s.go$val, true] : [(go$ptrType(ast.LabeledStmt)).nil, false]), ok$4 = _tuple$4[1], ok$4) {
					p.indent = 1;
				}
				_i++;
			}
			p.stmtList(n$2, 0, false);
		/* } else if (_type === (go$sliceType(ast.Decl))) { */ go$s = 12; continue; case 9: 
			n$2 = _ref.go$val;
			p.declList(n$2);
		/* } else if (_type === (go$ptrType(ast.File))) { */ go$s = 12; continue; case 10: 
			n$2 = _ref.go$val;
			p.file(n$2);
		/* } else { */ go$s = 12; continue; case 11: 
			n$2 = _ref;
			/* goto unsupported */ go$s = 1; continue;
		/* } */ case 12:
		return null;
		/* unsupported: */ case 1:
		return fmt.Errorf("go/printer: unsupported node type %T", new (go$sliceType(go$emptyInterface))([node]));
		/* */ } break; } }; return go$f();
	};
	printer.prototype.printNode = function(node) { return this.go$val.printNode(node); };
	trimmer.Ptr.prototype.resetSpace = function() {
		var p;
		p = this;
		p.state = 0;
		p.space = go$subslice(p.space, 0, 0);
	};
	trimmer.prototype.resetSpace = function() { return this.go$val.resetSpace(); };
	trimmer.Ptr.prototype.Write = function(data) {
		var n, err, p, m, b, _ref, _i, _slice, _index, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _ref$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _ref$4, _tuple$8;
		n = 0;
		err = null;
		p = this;
		m = 0;
		b = 0;
		_ref = data;
		_i = 0;
		while (_i < _ref.length) {
			b = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			n = _i;
			if (b === 11) {
				b = 9;
			}
			_ref$1 = p.state;
			if (_ref$1 === 0) {
				_ref$2 = b;
				if (_ref$2 === 9 || _ref$2 === 32) {
					p.space = go$append(p.space, b);
				} else if (_ref$2 === 10 || _ref$2 === 12) {
					p.resetSpace();
					_tuple = p.output.Write(aNewline), err = _tuple[1];
				} else if (_ref$2 === 255) {
					_tuple$1 = p.output.Write(p.space), err = _tuple$1[1];
					p.state = 1;
					m = n + 1 >> 0;
				} else {
					_tuple$2 = p.output.Write(p.space), err = _tuple$2[1];
					p.state = 2;
					m = n;
				}
			} else if (_ref$1 === 1) {
				if (b === 255) {
					_tuple$3 = p.output.Write(go$subslice(data, m, n)), err = _tuple$3[1];
					p.resetSpace();
				}
			} else if (_ref$1 === 2) {
				_ref$3 = b;
				if (_ref$3 === 9 || _ref$3 === 32) {
					_tuple$4 = p.output.Write(go$subslice(data, m, n)), err = _tuple$4[1];
					p.resetSpace();
					p.space = go$append(p.space, b);
				} else if (_ref$3 === 10 || _ref$3 === 12) {
					_tuple$5 = p.output.Write(go$subslice(data, m, n)), err = _tuple$5[1];
					p.resetSpace();
					_tuple$6 = p.output.Write(aNewline), err = _tuple$6[1];
				} else if (_ref$3 === 255) {
					_tuple$7 = p.output.Write(go$subslice(data, m, n)), err = _tuple$7[1];
					p.state = 1;
					m = n + 1 >> 0;
				}
			} else {
				throw go$panic(new Go$String("unreachable"));
			}
			if (!(go$interfaceIsEqual(err, null))) {
				return [n, err];
			}
			_i++;
		}
		n = data.length;
		_ref$4 = p.state;
		if (_ref$4 === 1 || _ref$4 === 2) {
			_tuple$8 = p.output.Write(go$subslice(data, m, n)), err = _tuple$8[1];
			p.resetSpace();
		}
		return [n, err];
	};
	trimmer.prototype.Write = function(data) { return this.go$val.Write(data); };
	Config.Ptr.prototype.fprint = function(output, fset, node, nodeSizes) {
		var err, cfg, p, minwidth, padchar, twmode, _tuple, tw, _tuple$1;
		err = null;
		cfg = this;
		p = new printer.Ptr();
		p.init(cfg, fset, nodeSizes);
		if (err = p.printNode(node), !(go$interfaceIsEqual(err, null))) {
			return err;
		}
		p.impliedSemi = false;
		p.flush(new token.Position.Ptr("", 1073741824, 1073741824, 0), 1);
		output = new trimmer.Ptr(output, 0, (go$sliceType(Go$Uint8)).nil);
		if (((cfg.Mode & 1) >>> 0) === 0) {
			minwidth = cfg.Tabwidth;
			padchar = 9;
			if (!((((cfg.Mode & 4) >>> 0) === 0))) {
				padchar = 32;
			}
			twmode = 8;
			if (!((((cfg.Mode & 2) >>> 0) === 0))) {
				minwidth = 0;
				twmode = (twmode | 16) >>> 0;
			}
			output = tabwriter.NewWriter(output, minwidth, cfg.Tabwidth, 1, padchar, twmode);
		}
		if (_tuple = output.Write(p.output), err = _tuple[1], !(go$interfaceIsEqual(err, null))) {
			return err;
		}
		if (_tuple$1 = (output !== null && output.constructor === (go$ptrType(tabwriter.Writer)) ? [output.go$val, true] : [(go$ptrType(tabwriter.Writer)).nil, false]), tw = _tuple$1[0], !(tw === (go$ptrType(tabwriter.Writer)).nil)) {
			err = tw.Flush();
		}
		return err;
	};
	Config.prototype.fprint = function(output, fset, node, nodeSizes) { return this.go$val.fprint(output, fset, node, nodeSizes); };
	Config.Ptr.prototype.Fprint = function(output, fset, node) {
		var cfg;
		cfg = this;
		return cfg.fprint(output, fset, node, new Go$Map());
	};
	Config.prototype.Fprint = function(output, fset, node) { return this.go$val.Fprint(output, fset, node); };
	go$pkg.init = function() {
		printer.init([["", "", Config, ""], ["fset", "go/printer", (go$ptrType(token.FileSet)), ""], ["output", "go/printer", (go$sliceType(Go$Uint8)), ""], ["indent", "go/printer", Go$Int, ""], ["mode", "go/printer", pmode, ""], ["impliedSemi", "go/printer", Go$Bool, ""], ["lastTok", "go/printer", token.Token, ""], ["wsbuf", "go/printer", (go$sliceType(whiteSpace)), ""], ["pos", "go/printer", token.Position, ""], ["out", "go/printer", token.Position, ""], ["last", "go/printer", token.Position, ""], ["comments", "go/printer", (go$sliceType((go$ptrType(ast.CommentGroup)))), ""], ["cindex", "go/printer", Go$Int, ""], ["useNodeComments", "go/printer", Go$Bool, ""], ["comment", "go/printer", (go$ptrType(ast.CommentGroup)), ""], ["commentOffset", "go/printer", Go$Int, ""], ["commentNewline", "go/printer", Go$Bool, ""], ["nodeSizes", "go/printer", (go$mapType(ast.Node, Go$Int)), ""], ["cachedPos", "go/printer", token.Pos, ""], ["cachedLine", "go/printer", Go$Int, ""]]);
		(go$ptrType(printer)).methods = [["Fprint", "", [io.Writer, (go$ptrType(token.FileSet)), go$emptyInterface], [go$error], false], ["adjBlock", "go/printer", [Go$Int, whiteSpace, (go$ptrType(ast.BlockStmt))], [], false], ["atLineBegin", "go/printer", [token.Position], [], false], ["binaryExpr", "go/printer", [(go$ptrType(ast.BinaryExpr)), Go$Int, Go$Int, Go$Int], [], false], ["block", "go/printer", [(go$ptrType(ast.BlockStmt)), Go$Int], [], false], ["bodySize", "go/printer", [(go$ptrType(ast.BlockStmt)), Go$Int], [Go$Int], false], ["commentBefore", "go/printer", [token.Position], [Go$Bool], false], ["commentsHaveNewline", "go/printer", [(go$sliceType((go$ptrType(ast.Comment))))], [Go$Bool], false], ["controlClause", "go/printer", [Go$Bool, ast.Stmt, ast.Expr, ast.Stmt], [], false], ["decl", "go/printer", [ast.Decl], [], false], ["declList", "go/printer", [(go$sliceType(ast.Decl))], [], false], ["distanceFrom", "go/printer", [token.Pos], [Go$Int], false], ["expr", "go/printer", [ast.Expr], [], false], ["expr0", "go/printer", [ast.Expr, Go$Int], [], false], ["expr1", "go/printer", [ast.Expr, Go$Int, Go$Int], [], false], ["exprList", "go/printer", [token.Pos, (go$sliceType(ast.Expr)), Go$Int, exprListMode, token.Pos], [], false], ["fieldList", "go/printer", [(go$ptrType(ast.FieldList)), Go$Bool, Go$Bool], [], false], ["file", "go/printer", [(go$ptrType(ast.File))], [], false], ["flush", "go/printer", [token.Position, token.Token], [Go$Bool, Go$Bool], false], ["fprint", "go/printer", [io.Writer, (go$ptrType(token.FileSet)), go$emptyInterface, (go$mapType(ast.Node, Go$Int))], [go$error], false], ["funcDecl", "go/printer", [(go$ptrType(ast.FuncDecl))], [], false], ["genDecl", "go/printer", [(go$ptrType(ast.GenDecl))], [], false], ["identList", "go/printer", [(go$sliceType((go$ptrType(ast.Ident)))), Go$Bool], [], false], ["indentList", "go/printer", [(go$sliceType(ast.Expr))], [Go$Bool], false], ["init", "go/printer", [(go$ptrType(Config)), (go$ptrType(token.FileSet)), (go$mapType(ast.Node, Go$Int))], [], false], ["internalError", "go/printer", [(go$sliceType(go$emptyInterface))], [], true], ["intersperseComments", "go/printer", [token.Position, token.Token], [Go$Bool, Go$Bool], false], ["isMultiLine", "go/printer", [ast.Node], [Go$Bool], false], ["isOneLineFieldList", "go/printer", [(go$sliceType((go$ptrType(ast.Field))))], [Go$Bool], false], ["lineFor", "go/printer", [token.Pos], [Go$Int], false], ["linebreak", "go/printer", [Go$Int, Go$Int, whiteSpace, Go$Bool], [Go$Bool], false], ["nextComment", "go/printer", [], [], false], ["nodeSize", "go/printer", [ast.Node, Go$Int], [Go$Int], false], ["parameters", "go/printer", [(go$ptrType(ast.FieldList))], [], false], ["posFor", "go/printer", [token.Pos], [token.Position], false], ["print", "go/printer", [(go$sliceType(go$emptyInterface))], [], true], ["printNode", "go/printer", [go$emptyInterface], [go$error], false], ["setComment", "go/printer", [(go$ptrType(ast.CommentGroup))], [], false], ["setLineComment", "go/printer", [Go$String], [], false], ["signature", "go/printer", [(go$ptrType(ast.FieldList)), (go$ptrType(ast.FieldList))], [], false], ["spec", "go/printer", [ast.Spec, Go$Int, Go$Bool], [], false], ["stmt", "go/printer", [ast.Stmt, Go$Bool], [], false], ["stmtList", "go/printer", [(go$sliceType(ast.Stmt)), Go$Int, Go$Bool], [], false], ["valueSpec", "go/printer", [(go$ptrType(ast.ValueSpec)), Go$Bool], [], false], ["writeByte", "go/printer", [Go$Uint8, Go$Int], [], false], ["writeComment", "go/printer", [(go$ptrType(ast.Comment))], [], false], ["writeCommentPrefix", "go/printer", [token.Position, token.Position, (go$ptrType(ast.Comment)), (go$ptrType(ast.Comment)), token.Token], [], false], ["writeCommentSuffix", "go/printer", [Go$Bool], [Go$Bool, Go$Bool], false], ["writeString", "go/printer", [token.Position, Go$String, Go$Bool], [], false], ["writeWhitespace", "go/printer", [Go$Int], [], false]];
		trimmer.init([["output", "go/printer", io.Writer, ""], ["state", "go/printer", Go$Int, ""], ["space", "go/printer", (go$sliceType(Go$Uint8)), ""]]);
		(go$ptrType(trimmer)).methods = [["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false], ["resetSpace", "go/printer", [], [], false]];
		Config.init([["Mode", "", Mode, ""], ["Tabwidth", "", Go$Int, ""], ["Indent", "", Go$Int, ""]]);
		(go$ptrType(Config)).methods = [["Fprint", "", [io.Writer, (go$ptrType(token.FileSet)), go$emptyInterface], [go$error], false], ["fprint", "go/printer", [io.Writer, (go$ptrType(token.FileSet)), go$emptyInterface, (go$mapType(ast.Node, Go$Int))], [go$error], false]];
		CommentedNode.init([["Node", "", go$emptyInterface, ""], ["Comments", "", (go$sliceType((go$ptrType(ast.CommentGroup)))), ""]]);
		aNewline = new (go$sliceType(Go$Uint8))(go$stringToBytes("\n"));
	}
	return go$pkg;
})();
go$packages["go/format"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], fmt = go$packages["fmt"], ast = go$packages["go/ast"], parser = go$packages["go/parser"], printer = go$packages["go/printer"], token = go$packages["go/token"], io = go$packages["io"], strings = go$packages["strings"], Source, isSpace, parse, config;
	Source = go$pkg.Source = function(src) {
		var fset, _tuple, node, err, buf, ok, _tuple$1, file, err$1, _tuple$2, i, j, _slice, _index, _slice$1, _index$1, indent, hasSpace, _ref, _i, _slice$2, _index$2, b, _ref$1, _struct, cfg, err$2, _slice$3, _index$3;
		fset = token.NewFileSet();
		_tuple = parse(fset, src), node = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$sliceType(Go$Uint8)).nil, err];
		}
		buf = new bytes.Buffer.Ptr();
		if (_tuple$1 = (node !== null && node.constructor === (go$ptrType(ast.File)) ? [node.go$val, true] : [(go$ptrType(ast.File)).nil, false]), file = _tuple$1[0], ok = _tuple$1[1], ok) {
			ast.SortImports(fset, file);
			err$1 = config.Fprint(buf, fset, file);
			if (!(go$interfaceIsEqual(err$1, null))) {
				return [(go$sliceType(Go$Uint8)).nil, err$1];
			}
		} else {
			_tuple$2 = [0, 0], i = _tuple$2[0], j = _tuple$2[1];
			while (j < src.length && isSpace((_slice = src, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")))) {
				if ((_slice$1 = src, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 10) {
					i = j + 1 >> 0;
				}
				j = j + 1 >> 0;
			}
			buf.Write(go$subslice(src, 0, i));
			indent = 0;
			hasSpace = false;
			_ref = go$subslice(src, i, j);
			_i = 0;
			while (_i < _ref.length) {
				b = (_slice$2 = _ref, _index$2 = _i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				_ref$1 = b;
				if (_ref$1 === 32) {
					hasSpace = true;
				} else if (_ref$1 === 9) {
					indent = indent + 1 >> 0;
				}
				_i++;
			}
			if ((indent === 0) && hasSpace) {
				indent = 1;
			}
			cfg = (_struct = config, new printer.Config.Ptr(_struct.Mode, _struct.Tabwidth, _struct.Indent));
			cfg.Indent = indent;
			err$2 = cfg.Fprint(buf, fset, node);
			if (!(go$interfaceIsEqual(err$2, null))) {
				return [(go$sliceType(Go$Uint8)).nil, err$2];
			}
			i = src.length;
			while (i > 0 && isSpace((_slice$3 = src, _index$3 = (i - 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")))) {
				i = i - 1 >> 0;
			}
			buf.Write(go$subslice(src, i));
		}
		return [buf.Bytes(), null];
	};
	isSpace = function(b) {
		return (b === 32) || (b === 9) || (b === 10) || (b === 13);
	};
	parse = function(fset, src) {
		var _tuple, file, err, psrc, _tuple$1, fsrc, _tuple$2, x, _slice, _index;
		_tuple = parser.ParseFile(fset, "", src, 4), file = _tuple[0], err = _tuple[1];
		if (go$interfaceIsEqual(err, null)) {
			return [file, null];
		}
		if (!strings.Contains(err.Error(), "expected 'package'")) {
			return [null, err];
		}
		psrc = go$appendSlice(new (go$sliceType(Go$Uint8))(go$stringToBytes("package p;")), src);
		_tuple$1 = parser.ParseFile(fset, "", psrc, 4), file = _tuple$1[0], err = _tuple$1[1];
		if (go$interfaceIsEqual(err, null)) {
			return [file.Decls, null];
		}
		if (!strings.Contains(err.Error(), "expected declaration")) {
			return [null, err];
		}
		fsrc = go$append(go$appendSlice(new (go$sliceType(Go$Uint8))(go$stringToBytes("package p; func _() {")), src), 125);
		_tuple$2 = parser.ParseFile(fset, "", fsrc, 4), file = _tuple$2[0], err = _tuple$2[1];
		if (go$interfaceIsEqual(err, null)) {
			return [(x = (_slice = file.Decls, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$ptrType(ast.FuncDecl)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(ast.FuncDecl))))).Body.List, null];
		}
		return [null, err];
	};
	go$pkg.init = function() {
		config = new printer.Config.Ptr(6, 8, 0);
	}
	return go$pkg;
})();
go$packages["github.com/gopherjs/gopherjs.github.io/playground"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], angularjs = go$packages["github.com/gopherjs/go-angularjs"], js = go$packages["github.com/gopherjs/gopherjs/js"], translator = go$packages["github.com/gopherjs/gopherjs/translator"], ast = go$packages["go/ast"], format = go$packages["go/format"], parser = go$packages["go/parser"], scanner = go$packages["go/scanner"], token = go$packages["go/token"], strings = go$packages["strings"], time = go$packages["time"], Line, main, writeString, setupEnvironment, output;
	Line = go$pkg.Line = go$newType(0, "Map", "main.Line", "Line", "github.com/gopherjs/gopherjs.github.io/playground", null);
	main = go$pkg.main = function() {
		var app;
		app = angularjs.NewModule("playground", (go$sliceType(Go$String)).nil, go$throwNilPointerError);
		app.NewController("PlaygroundCtrl", (function(scope) {
			var packages, fileSet, pkgsToLoad, pkgsReceived, codeArea, run;
			scope.Object.code = go$externalize("package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gopherjs/gopherjs/js\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello, playground\")\n\tjs.Global.Call(\"alert\", \"Hello, JavaScript\")\n\tprintln(\"Hello, JS console\")\n}\n", Go$String);
			scope.Object.showGenerated = go$externalize(false, Go$Bool);
			scope.Object.generated = go$externalize("(generated code will be shown here after clicking \"Run\")", Go$String);
			packages = new Go$Map();
			fileSet = token.NewFileSet();
			pkgsToLoad = (go$sliceType(Go$String)).nil;
			pkgsReceived = 0;
			setupEnvironment(scope);
			codeArea = angularjs.ElementById("code");
			codeArea.On("keydown", (function(e) {
				var toInsert, _ref, start, code, i, c, start$1, end, code$1;
				toInsert = "";
				_ref = go$parseInt(e.Object.keyCode) >> 0;
				if (_ref === 9) {
					toInsert = "\t";
				} else if (_ref === 13) {
					toInsert = "\n";
					start = go$parseInt(codeArea.Prop("selectionStart")) >> 0;
					code = go$internalize(scope.Object.code, Go$String);
					i = strings.LastIndex(code.substring(0, start), "\n") + 1 >> 0;
					while (i < start) {
						c = code.charCodeAt(i);
						if (!((c === 32)) && !((c === 9))) {
							break;
						}
						toInsert = toInsert + (go$encodeRune(c));
						i = i + 1 >> 0;
					}
				}
				if (!(toInsert === "")) {
					start$1 = go$parseInt(codeArea.Prop("selectionStart")) >> 0;
					end = go$parseInt(codeArea.Prop("selectionEnd")) >> 0;
					code$1 = go$internalize(scope.Object.code, Go$String);
					scope.Apply((function() {
						scope.Object.code = go$externalize(code$1.substring(0, start$1) + toInsert + code$1.substring(end), Go$String);
					}));
					codeArea.SetProp(new Go$String("selectionStart"), new Go$Int((start$1 + toInsert.length >> 0)));
					codeArea.SetProp(new Go$String("selectionEnd"), new Go$Int((start$1 + toInsert.length >> 0)));
					e.PreventDefault();
				}
			}));
			run = go$throwNilPointerError;
			run = (function(loadOnly) {
				var _tuple, file, err, ok, _tuple$1, list, _ref, _i, _slice, _index, entry, _map, _key, _map$1, _key$1, importPackage, _tuple$2, mainPkg, _key$2, ok$1, _tuple$3, list$1, output$1, _ref$1, _i$1, _slice$1, _index$1, entry$1, _map$2, _key$3, _map$3, _key$4, allPkgs, _ref$2, _i$2, _slice$2, _index$2, depPath, _tuple$4, dep, _ref$3, _i$3, req, path, _slice$3, _index$3, p, mainPkgCode, _entry, jsCode;
				output = (go$sliceType(Line)).nil;
				scope.Object.output = go$externalize(output, (go$sliceType(Line)));
				pkgsToLoad = (go$sliceType(Go$String)).nil;
				_tuple = parser.ParseFile(fileSet, "prog.go", new (go$sliceType(Go$Uint8))(go$stringToBytes(go$internalize(scope.Object.code, Go$String))), 0), file = _tuple[0], err = _tuple[1];
				if (!(go$interfaceIsEqual(err, null))) {
					if (_tuple$1 = (err !== null && err.constructor === scanner.ErrorList ? [err.go$val, true] : [scanner.ErrorList.nil, false]), list = _tuple$1[0], ok = _tuple$1[1], ok) {
						_ref = list;
						_i = 0;
						while (_i < _ref.length) {
							entry = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
							output = go$append(output, (_map = new Go$Map(), _key = "type", _map[_key] = { k: _key, v: "err" }, _key = "content", _map[_key] = { k: _key, v: entry.Error() }, _map));
							_i++;
						}
						scope.Object.output = go$externalize(output, (go$sliceType(Line)));
						return;
					}
					scope.Object.output = go$externalize(new (go$sliceType(Line))([(_map$1 = new Go$Map(), _key$1 = "type", _map$1[_key$1] = { k: _key$1, v: "err" }, _key$1 = "content", _map$1[_key$1] = { k: _key$1, v: err.Error() }, _map$1)]), (go$sliceType(Line)));
					return;
				}
				importPackage = (function(path) {
					var found, _tuple$2, _entry, pkg;
					if (_tuple$2 = (_entry = packages[path], _entry !== undefined ? [_entry.v, true] : [(go$ptrType(translator.Archive)).nil, false]), pkg = _tuple$2[0], found = _tuple$2[1], found) {
						return [pkg, null];
					}
					pkgsToLoad = go$append(pkgsToLoad, path);
					return [new translator.Archive.Ptr("", (go$sliceType(Go$Uint8)).nil, (go$sliceType(Go$String)).nil, (go$sliceType(translator.Import)).nil, (go$sliceType(translator.Decl)).nil, (go$sliceType(Go$String)).nil), null];
				});
				_tuple$2 = translator.TranslatePackage("main", new (go$sliceType((go$ptrType(ast.File))))([file]), fileSet, importPackage), mainPkg = _tuple$2[0], err = _tuple$2[1];
				_key$2 = "main", (packages || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: mainPkg };
				if (!(go$interfaceIsEqual(err, null)) && (pkgsToLoad.length === 0)) {
					if (_tuple$3 = (err !== null && err.constructor === translator.ErrorList ? [err.go$val, true] : [translator.ErrorList.nil, false]), list$1 = _tuple$3[0], ok$1 = _tuple$3[1], ok$1) {
						output$1 = (go$sliceType(Line)).make(0, 0, function() { return false; });
						_ref$1 = list$1;
						_i$1 = 0;
						while (_i$1 < _ref$1.length) {
							entry$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
							output$1 = go$append(output$1, (_map$2 = new Go$Map(), _key$3 = "type", _map$2[_key$3] = { k: _key$3, v: "err" }, _key$3 = "content", _map$2[_key$3] = { k: _key$3, v: entry$1.Error() }, _map$2));
							_i$1++;
						}
						scope.Object.output = go$externalize(output$1, (go$sliceType(Line)));
						return;
					}
					scope.Object.output = go$externalize(new (go$sliceType(Line))([(_map$3 = new Go$Map(), _key$4 = "type", _map$3[_key$4] = { k: _key$4, v: "err" }, _key$4 = "content", _map$3[_key$4] = { k: _key$4, v: err.Error() }, _map$3)]), (go$sliceType(Line)));
					return;
				}
				allPkgs = (go$sliceType((go$ptrType(translator.Archive)))).nil;
				if (pkgsToLoad.length === 0) {
					_ref$2 = mainPkg.Dependencies;
					_i$2 = 0;
					while (_i$2 < _ref$2.length) {
						depPath = (_slice$2 = _ref$2, _index$2 = _i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
						_tuple$4 = importPackage(depPath), dep = _tuple$4[0];
						allPkgs = go$append(allPkgs, dep);
						_i$2++;
					}
				}
				if (!((pkgsToLoad.length === 0))) {
					pkgsReceived = 0;
					_ref$3 = pkgsToLoad;
					_i$3 = 0;
					while (_i$3 < _ref$3.length) {
						req = [undefined];
						path = [undefined];
						p = (_slice$3 = _ref$3, _index$3 = _i$3, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
						path[0] = p;
						req[0] = new go$global.XMLHttpRequest();
						req[0].open(go$externalize("GET", Go$String), go$externalize("pkg/" + path[0] + ".a", Go$String), go$externalize(true, Go$Bool));
						req[0].responseType = go$externalize("arraybuffer", Go$String);
						req[0].onload = go$externalize((function(req, path) { return function() {
							var x, data, _tuple$5, _key$5;
							if (!(((go$parseInt(req[0].status) >> 0) === 200))) {
								scope.Apply((function() {
									var _map$4, _key$5;
									scope.Object.output = go$externalize(new (go$sliceType(Line))([(_map$4 = new Go$Map(), _key$5 = "type", _map$4[_key$5] = { k: _key$5, v: "err" }, _key$5 = "content", _map$4[_key$5] = { k: _key$5, v: "cannot load package \"" + path[0] + "\"" }, _map$4)]), (go$sliceType(Line)));
								}));
								return;
							}
							data = (x = go$internalize(new go$global.Uint8Array(req[0].response), go$emptyInterface), (x !== null && x.constructor === (go$sliceType(Go$Uint8)) ? x.go$val : go$typeAssertionFailed(x, (go$sliceType(Go$Uint8)))));
							_tuple$5 = translator.ReadArchive(path[0] + ".a", path[0], data), _key$5 = path[0], (packages || go$throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: _tuple$5[0] }, err = _tuple$5[1];
							if (!(go$interfaceIsEqual(err, null))) {
								scope.Apply((function() {
									var _map$4, _key$6;
									scope.Object.output = go$externalize(new (go$sliceType(Line))([(_map$4 = new Go$Map(), _key$6 = "type", _map$4[_key$6] = { k: _key$6, v: "err" }, _key$6 = "content", _map$4[_key$6] = { k: _key$6, v: err.Error() }, _map$4)]), (go$sliceType(Line)));
								}));
								return;
							}
							pkgsReceived = pkgsReceived + 1 >> 0;
							if (pkgsReceived === pkgsToLoad.length) {
								run(loadOnly);
							}
						}; })(req, path), (go$funcType([], [], false)));
						req[0].send();
						_i$3++;
					}
					return;
				}
				if (loadOnly) {
					return;
				}
				mainPkgCode = bytes.NewBuffer((go$sliceType(Go$Uint8)).nil);
				translator.WritePkgCode((_entry = packages["main"], _entry !== undefined ? _entry.v : (go$ptrType(translator.Archive)).nil), mainPkgCode);
				scope.Object.generated = go$externalize(mainPkgCode.String(), Go$String);
				jsCode = bytes.NewBuffer((go$sliceType(Go$Uint8)).nil);
				jsCode.WriteString("try{\n");
				translator.WriteProgramCode(allPkgs, "main", jsCode);
				jsCode.WriteString("} catch (err) {\ngo$panicHandler(err.message);\n}\n");
				go$global.eval(go$externalize(jsCode.String(), Go$String));
			});
			scope.Object.run = go$externalize(run, (go$funcType([Go$Bool], [], false)));
			run(true);
			scope.Object.format = go$externalize((function() {
				var _tuple, out, err, _map, _key;
				_tuple = format.Source(new (go$sliceType(Go$Uint8))(go$stringToBytes(go$internalize(scope.Object.code, Go$String)))), out = _tuple[0], err = _tuple[1];
				if (!(go$interfaceIsEqual(err, null))) {
					scope.Object.output = go$externalize(new (go$sliceType(Line))([(_map = new Go$Map(), _key = "type", _map[_key] = { k: _key, v: "err" }, _key = "content", _map[_key] = { k: _key, v: err.Error() }, _map)]), (go$sliceType(Line)));
					return;
				}
				scope.Object.code = go$externalize(go$bytesToString(out), Go$String);
				scope.Object.output = go$externalize(new (go$sliceType(Line))([]), (go$sliceType(Line)));
			}), (go$funcType([], [], false)));
		}));
	};
	writeString = function(scope, s) {
		var lines, _entry, _slice, _index, _map, _key, _lhs, _index$1, _slice$1, _index$2, _entry$1, _slice$2, _index$3, _key$1, i, _map$1, _key$2, _slice$3, _index$4;
		lines = strings.Split(s, "\n");
		if ((output.length === 0) || !((_entry = (_slice = output, _index = (output.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))["type"], _entry !== undefined ? _entry.v : "") === "out")) {
			output = go$append(output, (_map = new Go$Map(), _key = "type", _map[_key] = { k: _key, v: "out" }, _key = "content", _map[_key] = { k: _key, v: "" }, _map));
		}
		_lhs = (_slice$1 = output, _index$2 = (output.length - 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$2] : go$throwRuntimeError("index out of range")), _index$1 = "content", _key$1 = _index$1, (_lhs || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: (_entry$1 = _lhs[_index$1], _entry$1 !== undefined ? _entry$1.v : "") + ((_slice$2 = lines, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$3] : go$throwRuntimeError("index out of range"))) };
		i = 1;
		while (i < lines.length) {
			output = go$append(output, (_map$1 = new Go$Map(), _key$2 = "type", _map$1[_key$2] = { k: _key$2, v: "out" }, _key$2 = "content", _map$1[_key$2] = { k: _key$2, v: (_slice$3 = lines, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$4] : go$throwRuntimeError("index out of range")) }, _map$1));
			i = i + 1 >> 0;
		}
		scope.Object.output = go$externalize(output, (go$sliceType(Line)));
		scope.EvalAsync((function() {
			time.AfterFunc(new time.Duration(0, 0), (function() {
				var box;
				box = angularjs.ElementById("output");
				box.SetProp(new Go$String("scrollTop"), box.Prop("scrollHeight"));
			}));
		}));
	};
	setupEnvironment = function(scope) {
		go$global.go$syscall = go$externalize((function(trap, a1, a2, a3) {
			var r1, r2, err, _ref, x, s, _tuple;
			r1 = 0;
			r2 = 0;
			err = null;
			_ref = trap;
			if (_ref === 4) {
				s = go$bytesToString((x = go$internalize(a2, go$emptyInterface), (x !== null && x.constructor === (go$sliceType(Go$Uint8)) ? x.go$val : go$typeAssertionFailed(x, (go$sliceType(Go$Uint8))))));
				writeString(scope, s);
				_tuple = [s.length, 0, null], r1 = _tuple[0], r2 = _tuple[1], err = _tuple[2];
				return [r1, r2, err];
			} else {
				throw go$panic(new Go$String("syscall not supported"));
			}
		}), (go$funcType([Go$Int, js.Object, js.Object, js.Object], [Go$Int, Go$Int, go$error], false)));
		go$global.go$panicHandler = go$externalize((function(msg) {
			var _map, _key;
			output = go$append(output, (_map = new Go$Map(), _key = "type", _map[_key] = { k: _key, v: "err" }, _key = "content", _map[_key] = { k: _key, v: "panic: " + msg }, _map));
			scope.Object.output = go$externalize(output, (go$sliceType(Line)));
		}), (go$funcType([Go$String], [], false)));
	};
	go$pkg.init = function() {
		Line.init(Go$String, Go$String);
		output = (go$sliceType(Line)).nil;
	}
	return go$pkg;
})();
go$error.implementedBy = [go$packages["code.google.com/p/go.tools/go/gcimporter"].importError, go$packages["code.google.com/p/go.tools/go/gcimporter"].importError.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Error, go$packages["code.google.com/p/go.tools/go/types"].Error.Ptr, go$packages["encoding/asn1"].StructuralError, go$packages["encoding/asn1"].StructuralError.Ptr, go$packages["encoding/asn1"].SyntaxError, go$packages["encoding/asn1"].SyntaxError.Ptr, go$packages["errors"].errorString.Ptr, go$packages["github.com/gopherjs/gopherjs/js"].Error.Ptr, go$packages["github.com/gopherjs/gopherjs/translator"].ErrorList, go$packages["go/build"].NoGoError.Ptr, go$packages["go/scanner"].Error, go$packages["go/scanner"].Error.Ptr, go$packages["go/scanner"].ErrorList, go$packages["os"].PathError.Ptr, go$packages["os"].SyscallError.Ptr, go$packages["reflect"].ValueError.Ptr, go$packages["regexp/syntax"].Error.Ptr, go$packages["runtime"].TypeAssertionError.Ptr, go$packages["runtime"].errorString, go$packages["strconv"].NumError.Ptr, go$packages["syscall"].Errno, go$packages["time"].ParseError.Ptr, go$ptrType(go$packages["github.com/gopherjs/gopherjs/translator"].ErrorList), go$ptrType(go$packages["go/scanner"].ErrorList), go$ptrType(go$packages["runtime"].errorString), go$ptrType(go$packages["syscall"].Errno)];
go$packages["sync"].Locker.implementedBy = [go$packages["sync"].Mutex.Ptr, go$packages["sync"].RWMutex.Ptr, go$packages["sync"].rlocker.Ptr, go$packages["syscall"].mmapper.Ptr];
go$packages["io"].ReadCloser.implementedBy = [go$packages["os"].File.Ptr];
go$packages["io"].Reader.implementedBy = [go$packages["bufio"].Reader.Ptr, go$packages["bytes"].Buffer.Ptr, go$packages["bytes"].Reader.Ptr, go$packages["fmt"].ss.Ptr, go$packages["os"].File.Ptr, go$packages["strings"].Reader.Ptr];
go$packages["io"].ReaderFrom.implementedBy = [go$packages["bytes"].Buffer.Ptr];
go$packages["io"].RuneReader.implementedBy = [go$packages["bufio"].Reader.Ptr, go$packages["bytes"].Buffer.Ptr, go$packages["bytes"].Reader.Ptr, go$packages["fmt"].ss.Ptr, go$packages["strings"].Reader.Ptr];
go$packages["io"].RuneScanner.implementedBy = [go$packages["bufio"].Reader.Ptr, go$packages["bytes"].Buffer.Ptr, go$packages["bytes"].Reader.Ptr, go$packages["fmt"].ss.Ptr, go$packages["strings"].Reader.Ptr];
go$packages["io"].Writer.implementedBy = [go$packages["bytes"].Buffer.Ptr, go$packages["fmt"].pp.Ptr, go$packages["github.com/gopherjs/gopherjs/translator"].pkgContext.Ptr, go$packages["go/printer"].trimmer.Ptr, go$packages["os"].File.Ptr, go$packages["text/tabwriter"].Writer.Ptr, go$ptrType(go$packages["fmt"].buffer)];
go$packages["io"].WriterTo.implementedBy = [go$packages["bufio"].Reader.Ptr, go$packages["bytes"].Buffer.Ptr, go$packages["bytes"].Reader.Ptr, go$packages["strings"].Reader.Ptr];
go$packages["io"].stringWriter.implementedBy = [go$packages["bytes"].Buffer.Ptr, go$packages["os"].File.Ptr, go$ptrType(go$packages["fmt"].buffer)];
go$packages["github.com/gopherjs/gopherjs/js"].Object.implementedBy = [go$packages["github.com/gopherjs/go-angularjs"].Event, go$packages["github.com/gopherjs/go-angularjs"].Event.Ptr, go$packages["github.com/gopherjs/go-angularjs"].JQueryElement, go$packages["github.com/gopherjs/go-angularjs"].JQueryElement.Ptr, go$packages["github.com/gopherjs/go-angularjs"].Module, go$packages["github.com/gopherjs/go-angularjs"].Module.Ptr, go$packages["github.com/gopherjs/go-angularjs"].Scope, go$packages["github.com/gopherjs/go-angularjs"].Scope.Ptr, go$packages["github.com/gopherjs/gopherjs/js"].Error, go$packages["github.com/gopherjs/gopherjs/js"].Error.Ptr];
go$packages["os"].FileInfo.implementedBy = [go$packages["os"].fileStat.Ptr];
go$packages["reflect"].Type.implementedBy = [go$packages["reflect"].arrayType.Ptr, go$packages["reflect"].chanType.Ptr, go$packages["reflect"].funcType.Ptr, go$packages["reflect"].interfaceType.Ptr, go$packages["reflect"].mapType.Ptr, go$packages["reflect"].ptrType.Ptr, go$packages["reflect"].rtype.Ptr, go$packages["reflect"].sliceType.Ptr, go$packages["reflect"].structType.Ptr];
go$packages["fmt"].Formatter.implementedBy = [go$packages["math/big"].Int.Ptr];
go$packages["fmt"].GoStringer.implementedBy = [go$packages["encoding/binary"].bigEndian, go$packages["encoding/binary"].bigEndian.Ptr];
go$packages["fmt"].ScanState.implementedBy = [go$packages["fmt"].ss.Ptr];
go$packages["fmt"].State.implementedBy = [go$packages["fmt"].pp.Ptr];
go$packages["fmt"].Stringer.implementedBy = [go$packages["bytes"].Buffer.Ptr, go$packages["code.google.com/p/go.tools/go/exact"].boolVal, go$packages["code.google.com/p/go.tools/go/exact"].complexVal, go$packages["code.google.com/p/go.tools/go/exact"].complexVal.Ptr, go$packages["code.google.com/p/go.tools/go/exact"].floatVal, go$packages["code.google.com/p/go.tools/go/exact"].floatVal.Ptr, go$packages["code.google.com/p/go.tools/go/exact"].int64Val, go$packages["code.google.com/p/go.tools/go/exact"].intVal, go$packages["code.google.com/p/go.tools/go/exact"].intVal.Ptr, go$packages["code.google.com/p/go.tools/go/exact"].stringVal, go$packages["code.google.com/p/go.tools/go/exact"].unknownVal, go$packages["code.google.com/p/go.tools/go/exact"].unknownVal.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Array.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Basic.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Builtin.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Chan.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Const.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Func.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Initializer.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Interface.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Label.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Map.Ptr, go$packages["code.google.com/p/go.tools/go/types"].MethodSet.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Named.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Nil.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Package.Ptr, go$packages["code.google.com/p/go.tools/go/types"].PkgName.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Pointer.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Scope.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Selection.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Signature.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Slice.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Struct.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Tuple.Ptr, go$packages["code.google.com/p/go.tools/go/types"].TypeName.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Var.Ptr, go$packages["code.google.com/p/go.tools/go/types"].object.Ptr, go$packages["code.google.com/p/go.tools/go/types"].operand.Ptr, go$packages["encoding/binary"].bigEndian, go$packages["encoding/binary"].bigEndian.Ptr, go$packages["github.com/gopherjs/go-angularjs"].Event, go$packages["github.com/gopherjs/go-angularjs"].Event.Ptr, go$packages["github.com/gopherjs/go-angularjs"].JQueryElement, go$packages["github.com/gopherjs/go-angularjs"].JQueryElement.Ptr, go$packages["github.com/gopherjs/go-angularjs"].Module, go$packages["github.com/gopherjs/go-angularjs"].Module.Ptr, go$packages["github.com/gopherjs/go-angularjs"].Scope, go$packages["github.com/gopherjs/go-angularjs"].Scope.Ptr, go$packages["github.com/gopherjs/gopherjs/js"].Error, go$packages["github.com/gopherjs/gopherjs/js"].Error.Ptr, go$packages["github.com/gopherjs/gopherjs/translator"].This.Ptr, go$packages["github.com/gopherjs/gopherjs/translator"].expression.Ptr, go$packages["go/ast"].Ident.Ptr, go$packages["go/ast"].ObjKind, go$packages["go/ast"].Scope.Ptr, go$packages["go/token"].Position, go$packages["go/token"].Position.Ptr, go$packages["go/token"].Token, go$packages["math/big"].Int.Ptr, go$packages["math/big"].Rat.Ptr, go$packages["os"].FileMode, go$packages["reflect"].ChanDir, go$packages["reflect"].Kind, go$packages["reflect"].Value, go$packages["reflect"].Value.Ptr, go$packages["reflect"].arrayType.Ptr, go$packages["reflect"].chanType.Ptr, go$packages["reflect"].funcType.Ptr, go$packages["reflect"].interfaceType.Ptr, go$packages["reflect"].mapType.Ptr, go$packages["reflect"].ptrType.Ptr, go$packages["reflect"].rtype.Ptr, go$packages["reflect"].sliceType.Ptr, go$packages["reflect"].structType.Ptr, go$packages["regexp"].Regexp.Ptr, go$packages["regexp/syntax"].ErrorCode, go$packages["regexp/syntax"].Inst.Ptr, go$packages["regexp/syntax"].Prog.Ptr, go$packages["regexp/syntax"].Regexp.Ptr, go$packages["strconv"].decimal.Ptr, go$packages["text/scanner"].Position, go$packages["text/scanner"].Position.Ptr, go$packages["text/scanner"].Scanner, go$packages["text/scanner"].Scanner.Ptr, go$packages["time"].Duration, go$packages["time"].Location.Ptr, go$packages["time"].Month, go$packages["time"].Time, go$packages["time"].Time.Ptr, go$packages["time"].Weekday, go$ptrType(go$packages["code.google.com/p/go.tools/go/exact"].boolVal), go$ptrType(go$packages["code.google.com/p/go.tools/go/exact"].int64Val), go$ptrType(go$packages["code.google.com/p/go.tools/go/exact"].stringVal), go$ptrType(go$packages["go/ast"].ObjKind), go$ptrType(go$packages["go/token"].Token), go$ptrType(go$packages["os"].FileMode), go$ptrType(go$packages["reflect"].ChanDir), go$ptrType(go$packages["reflect"].Kind), go$ptrType(go$packages["regexp/syntax"].ErrorCode), go$ptrType(go$packages["time"].Duration), go$ptrType(go$packages["time"].Month), go$ptrType(go$packages["time"].Weekday)];
go$packages["fmt"].runeUnreader.implementedBy = [go$packages["bufio"].Reader.Ptr, go$packages["bytes"].Buffer.Ptr, go$packages["bytes"].Reader.Ptr, go$packages["fmt"].ss.Ptr, go$packages["strings"].Reader.Ptr];
go$packages["math/rand"].Source.implementedBy = [go$packages["math/rand"].Rand.Ptr, go$packages["math/rand"].lockedSource.Ptr, go$packages["math/rand"].rngSource.Ptr];
go$packages["code.google.com/p/go.tools/go/exact"].Value.implementedBy = [go$packages["code.google.com/p/go.tools/go/exact"].boolVal, go$packages["code.google.com/p/go.tools/go/exact"].complexVal, go$packages["code.google.com/p/go.tools/go/exact"].complexVal.Ptr, go$packages["code.google.com/p/go.tools/go/exact"].floatVal, go$packages["code.google.com/p/go.tools/go/exact"].floatVal.Ptr, go$packages["code.google.com/p/go.tools/go/exact"].int64Val, go$packages["code.google.com/p/go.tools/go/exact"].intVal, go$packages["code.google.com/p/go.tools/go/exact"].intVal.Ptr, go$packages["code.google.com/p/go.tools/go/exact"].stringVal, go$packages["code.google.com/p/go.tools/go/exact"].unknownVal, go$packages["code.google.com/p/go.tools/go/exact"].unknownVal.Ptr, go$ptrType(go$packages["code.google.com/p/go.tools/go/exact"].boolVal), go$ptrType(go$packages["code.google.com/p/go.tools/go/exact"].int64Val), go$ptrType(go$packages["code.google.com/p/go.tools/go/exact"].stringVal)];
go$packages["go/ast"].Decl.implementedBy = [go$packages["go/ast"].BadDecl.Ptr, go$packages["go/ast"].FuncDecl.Ptr, go$packages["go/ast"].GenDecl.Ptr];
go$packages["go/ast"].Expr.implementedBy = [go$packages["github.com/gopherjs/gopherjs/translator"].This.Ptr, go$packages["go/ast"].ArrayType.Ptr, go$packages["go/ast"].BadExpr.Ptr, go$packages["go/ast"].BasicLit.Ptr, go$packages["go/ast"].BinaryExpr.Ptr, go$packages["go/ast"].CallExpr.Ptr, go$packages["go/ast"].ChanType.Ptr, go$packages["go/ast"].CompositeLit.Ptr, go$packages["go/ast"].Ellipsis.Ptr, go$packages["go/ast"].FuncLit.Ptr, go$packages["go/ast"].FuncType.Ptr, go$packages["go/ast"].Ident.Ptr, go$packages["go/ast"].IndexExpr.Ptr, go$packages["go/ast"].InterfaceType.Ptr, go$packages["go/ast"].KeyValueExpr.Ptr, go$packages["go/ast"].MapType.Ptr, go$packages["go/ast"].ParenExpr.Ptr, go$packages["go/ast"].SelectorExpr.Ptr, go$packages["go/ast"].SliceExpr.Ptr, go$packages["go/ast"].StarExpr.Ptr, go$packages["go/ast"].StructType.Ptr, go$packages["go/ast"].TypeAssertExpr.Ptr, go$packages["go/ast"].UnaryExpr.Ptr];
go$packages["go/ast"].Node.implementedBy = [go$packages["github.com/gopherjs/gopherjs/translator"].This.Ptr, go$packages["go/ast"].ArrayType.Ptr, go$packages["go/ast"].AssignStmt.Ptr, go$packages["go/ast"].BadDecl.Ptr, go$packages["go/ast"].BadExpr.Ptr, go$packages["go/ast"].BadStmt.Ptr, go$packages["go/ast"].BasicLit.Ptr, go$packages["go/ast"].BinaryExpr.Ptr, go$packages["go/ast"].BlockStmt.Ptr, go$packages["go/ast"].BranchStmt.Ptr, go$packages["go/ast"].CallExpr.Ptr, go$packages["go/ast"].CaseClause.Ptr, go$packages["go/ast"].ChanType.Ptr, go$packages["go/ast"].CommClause.Ptr, go$packages["go/ast"].Comment.Ptr, go$packages["go/ast"].CommentGroup.Ptr, go$packages["go/ast"].CompositeLit.Ptr, go$packages["go/ast"].DeclStmt.Ptr, go$packages["go/ast"].DeferStmt.Ptr, go$packages["go/ast"].Ellipsis.Ptr, go$packages["go/ast"].EmptyStmt.Ptr, go$packages["go/ast"].ExprStmt.Ptr, go$packages["go/ast"].Field.Ptr, go$packages["go/ast"].FieldList.Ptr, go$packages["go/ast"].File.Ptr, go$packages["go/ast"].ForStmt.Ptr, go$packages["go/ast"].FuncDecl.Ptr, go$packages["go/ast"].FuncLit.Ptr, go$packages["go/ast"].FuncType.Ptr, go$packages["go/ast"].GenDecl.Ptr, go$packages["go/ast"].GoStmt.Ptr, go$packages["go/ast"].Ident.Ptr, go$packages["go/ast"].IfStmt.Ptr, go$packages["go/ast"].ImportSpec.Ptr, go$packages["go/ast"].IncDecStmt.Ptr, go$packages["go/ast"].IndexExpr.Ptr, go$packages["go/ast"].InterfaceType.Ptr, go$packages["go/ast"].KeyValueExpr.Ptr, go$packages["go/ast"].LabeledStmt.Ptr, go$packages["go/ast"].MapType.Ptr, go$packages["go/ast"].Package.Ptr, go$packages["go/ast"].ParenExpr.Ptr, go$packages["go/ast"].RangeStmt.Ptr, go$packages["go/ast"].ReturnStmt.Ptr, go$packages["go/ast"].SelectStmt.Ptr, go$packages["go/ast"].SelectorExpr.Ptr, go$packages["go/ast"].SendStmt.Ptr, go$packages["go/ast"].SliceExpr.Ptr, go$packages["go/ast"].StarExpr.Ptr, go$packages["go/ast"].StructType.Ptr, go$packages["go/ast"].SwitchStmt.Ptr, go$packages["go/ast"].TypeAssertExpr.Ptr, go$packages["go/ast"].TypeSpec.Ptr, go$packages["go/ast"].TypeSwitchStmt.Ptr, go$packages["go/ast"].UnaryExpr.Ptr, go$packages["go/ast"].ValueSpec.Ptr];
go$packages["go/ast"].Spec.implementedBy = [go$packages["go/ast"].ImportSpec.Ptr, go$packages["go/ast"].TypeSpec.Ptr, go$packages["go/ast"].ValueSpec.Ptr];
go$packages["go/ast"].Stmt.implementedBy = [go$packages["go/ast"].AssignStmt.Ptr, go$packages["go/ast"].BadStmt.Ptr, go$packages["go/ast"].BlockStmt.Ptr, go$packages["go/ast"].BranchStmt.Ptr, go$packages["go/ast"].CaseClause.Ptr, go$packages["go/ast"].CommClause.Ptr, go$packages["go/ast"].DeclStmt.Ptr, go$packages["go/ast"].DeferStmt.Ptr, go$packages["go/ast"].EmptyStmt.Ptr, go$packages["go/ast"].ExprStmt.Ptr, go$packages["go/ast"].ForStmt.Ptr, go$packages["go/ast"].GoStmt.Ptr, go$packages["go/ast"].IfStmt.Ptr, go$packages["go/ast"].IncDecStmt.Ptr, go$packages["go/ast"].LabeledStmt.Ptr, go$packages["go/ast"].RangeStmt.Ptr, go$packages["go/ast"].ReturnStmt.Ptr, go$packages["go/ast"].SelectStmt.Ptr, go$packages["go/ast"].SendStmt.Ptr, go$packages["go/ast"].SwitchStmt.Ptr, go$packages["go/ast"].TypeSwitchStmt.Ptr];
go$packages["go/ast"].Visitor.implementedBy = [go$packages["github.com/gopherjs/gopherjs/translator"].escapeAnalysis.Ptr, go$packages["github.com/gopherjs/gopherjs/translator"].escapingObjectCollector.Ptr, go$packages["github.com/gopherjs/gopherjs/translator"].gotoVisitor.Ptr, go$packages["github.com/gopherjs/gopherjs/translator"].hasBreakVisitor.Ptr, go$packages["github.com/gopherjs/gopherjs/translator"].hasCallVisitor.Ptr, go$packages["github.com/gopherjs/gopherjs/translator"].hasDeferVisitor.Ptr, go$packages["go/ast"].inspector, go$ptrType(go$packages["go/ast"].inspector)];
go$packages["code.google.com/p/go.tools/go/types"].Object.implementedBy = [go$packages["code.google.com/p/go.tools/go/types"].Builtin.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Const.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Func.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Label.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Nil.Ptr, go$packages["code.google.com/p/go.tools/go/types"].PkgName.Ptr, go$packages["code.google.com/p/go.tools/go/types"].TypeName.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Var.Ptr, go$packages["code.google.com/p/go.tools/go/types"].object.Ptr];
go$packages["code.google.com/p/go.tools/go/types"].Sizes.implementedBy = [go$packages["code.google.com/p/go.tools/go/types"].StdSizes.Ptr];
go$packages["code.google.com/p/go.tools/go/types"].Type.implementedBy = [go$packages["code.google.com/p/go.tools/go/types"].Array.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Basic.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Chan.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Interface.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Map.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Named.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Pointer.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Signature.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Slice.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Struct.Ptr, go$packages["code.google.com/p/go.tools/go/types"].Tuple.Ptr];
go$packages["regexp"].input.implementedBy = [go$packages["regexp"].inputBytes.Ptr, go$packages["regexp"].inputReader.Ptr, go$packages["regexp"].inputString.Ptr];
go$packages["runtime"].init();
go$packages["errors"].init();
go$packages["sync/atomic"].init();
go$packages["sync"].init();
go$packages["io"].init();
go$packages["unicode"].init();
go$packages["unicode/utf8"].init();
go$packages["bytes"].init();
go$packages["github.com/gopherjs/gopherjs/js"].init();
go$packages["github.com/gopherjs/go-angularjs"].init();
go$packages["math"].init();
go$packages["syscall"].init();
go$packages["time"].init();
go$packages["os"].init();
go$packages["strconv"].init();
go$packages["reflect"].init();
go$packages["fmt"].init();
go$packages["sort"].init();
go$packages["go/token"].init();
go$packages["encoding/binary"].init();
go$packages["math/rand"].init();
go$packages["strings"].init();
go$packages["math/big"].init();
go$packages["code.google.com/p/go.tools/go/exact"].init();
go$packages["bufio"].init();
go$packages["path/filepath"].init();
go$packages["go/scanner"].init();
go$packages["go/ast"].init();
go$packages["io/ioutil"].init();
go$packages["go/parser"].init();
go$packages["code.google.com/p/go.tools/go/types"].init();
go$packages["path"].init();
go$packages["regexp/syntax"].init();
go$packages["regexp"].init();
go$packages["net/url"].init();
go$packages["container/list"].init();
go$packages["text/template/parse"].init();
go$packages["text/template"].init();
go$packages["go/doc"].init();
go$packages["log"].init();
go$packages["go/build"].init();
go$packages["text/scanner"].init();
go$packages["code.google.com/p/go.tools/go/gcimporter"].init();
go$packages["encoding/asn1"].init();
go$packages["github.com/gopherjs/gopherjs/gcexporter"].init();
go$packages["github.com/gopherjs/gopherjs/translator"].init();
go$packages["text/tabwriter"].init();
go$packages["go/printer"].init();
go$packages["go/format"].init();
go$packages["github.com/gopherjs/gopherjs.github.io/playground"].init();
go$packages["github.com/gopherjs/gopherjs.github.io/playground"].main();

})();