0ƒ!Ýƒ%:package syscall
import sync "sync"
import runtime "runtime"
import errors "errors"
const @"".AF_APPLETALK = 0x10
const @"".AF_CCITT = 0xa
const @"".AF_CHAOS = 0x5
const @"".AF_CNT = 0x15
const @"".AF_COIP = 0x14
const @"".AF_DATAKIT = 0x9
const @"".AF_DECnet = 0xc
const @"".AF_DLI = 0xd
const @"".AF_E164 = 0x1c
const @"".AF_ECMA = 0x8
const @"".AF_HYLINK = 0xf
const @"".AF_IEEE80211 = 0x25
const @"".AF_IMPLINK = 0x3
const @"".AF_INET = 0x2
const @"".AF_INET6 = 0x1e
const @"".AF_IPX = 0x17
const @"".AF_ISDN = 0x1c
const @"".AF_ISO = 0x7
const @"".AF_LAT = 0xe
const @"".AF_LINK = 0x12
const @"".AF_LOCAL = 0x1
const @"".AF_MAX = 0x26
const @"".AF_NATM = 0x1f
const @"".AF_NDRV = 0x1b
const @"".AF_NETBIOS = 0x21
const @"".AF_NS = 0x6
const @"".AF_OSI = 0x7
const @"".AF_PPP = 0x22
const @"".AF_PUP = 0x4
const @"".AF_RESERVED_36 = 0x24
const @"".AF_ROUTE = 0x11
const @"".AF_SIP = 0x18
const @"".AF_SNA = 0xb
const @"".AF_SYSTEM = 0x20
const @"".AF_UNIX = 0x1
const @"".AF_UNSPEC = 0x0
func @"".Accept(@"".fd int) (@"".nfd int, @"".sa @"".Sockaddr, @"".err error)
func @"".Access(@"".path string, @"".mode uint32) (@"".err error)
func @"".Adjtime(@"".delta *@"".Timeval, @"".olddelta *@"".Timeval) (@"".err error)
const @"".B0 = 0x0
const @"".B110 = 0x6e
const @"".B115200 = 0x1c200
const @"".B1200 = 0x4b0
const @"".B134 = 0x86
const @"".B14400 = 0x3840
const @"".B150 = 0x96
const @"".B1800 = 0x708
const @"".B19200 = 0x4b00
const @"".B200 = 0xc8
const @"".B230400 = 0x38400
const @"".B2400 = 0x960
const @"".B28800 = 0x7080
const @"".B300 = 0x12c
const @"".B38400 = 0x9600
const @"".B4800 = 0x12c0
const @"".B50 = 0x32
const @"".B57600 = 0xe100
const @"".B600 = 0x258
const @"".B7200 = 0x1c20
const @"".B75 = 0x4b
const @"".B76800 = 0x12c00
const @"".B9600 = 0x2580
const @"".BIOCFLUSH = 0x20004268
const @"".BIOCGBLEN = 0x40044266
const @"".BIOCGDLT = 0x4004426a
const @"".BIOCGDLTLIST = 0xc00c4279
const @"".BIOCGETIF = 0x4020426b
const @"".BIOCGHDRCMPLT = 0x40044274
const @"".BIOCGRSIG = 0x40044272
const @"".BIOCGRTIMEOUT = 0x4010426e
const @"".BIOCGSEESENT = 0x40044276
const @"".BIOCGSTATS = 0x4008426f
const @"".BIOCIMMEDIATE = 0x80044270
const @"".BIOCPROMISC = 0x20004269
const @"".BIOCSBLEN = 0xc0044266
const @"".BIOCSDLT = 0x80044278
const @"".BIOCSETF = 0x80104267
const @"".BIOCSETIF = 0x8020426c
const @"".BIOCSHDRCMPLT = 0x80044275
const @"".BIOCSRSIG = 0x80044273
const @"".BIOCSRTIMEOUT = 0x8010426d
const @"".BIOCSSEESENT = 0x80044277
const @"".BIOCVERSION = 0x40044271
const @"".BPF_A = 0x10
const @"".BPF_ABS = 0x20
const @"".BPF_ADD = 0x0
const @"".BPF_ALIGNMENT = 0x4
const @"".BPF_ALU = 0x4
const @"".BPF_AND = 0x50
const @"".BPF_B = 0x10
const @"".BPF_DIV = 0x30
const @"".BPF_H = 0x8
const @"".BPF_IMM = 0x0
const @"".BPF_IND = 0x40
const @"".BPF_JA = 0x0
const @"".BPF_JEQ = 0x10
const @"".BPF_JGE = 0x30
const @"".BPF_JGT = 0x20
const @"".BPF_JMP = 0x5
const @"".BPF_JSET = 0x40
const @"".BPF_K = 0x0
const @"".BPF_LD = 0x0
const @"".BPF_LDX = 0x1
const @"".BPF_LEN = 0x80
const @"".BPF_LSH = 0x60
const @"".BPF_MAJOR_VERSION = 0x1
const @"".BPF_MAXBUFSIZE = 0x80000
const @"".BPF_MAXINSNS = 0x200
const @"".BPF_MEM = 0x60
const @"".BPF_MEMWORDS = 0x10
const @"".BPF_MINBUFSIZE = 0x20
const @"".BPF_MINOR_VERSION = 0x1
const @"".BPF_MISC = 0x7
const @"".BPF_MSH = 0xa0
const @"".BPF_MUL = 0x20
const @"".BPF_NEG = 0x80
const @"".BPF_OR = 0x40
const @"".BPF_RELEASE = 0x30bb6
const @"".BPF_RET = 0x6
const @"".BPF_RSH = 0x70
const @"".BPF_ST = 0x2
const @"".BPF_STX = 0x3
const @"".BPF_SUB = 0x10
const @"".BPF_TAX = 0x0
const @"".BPF_TXA = 0x80
const @"".BPF_W = 0x0
const @"".BPF_X = 0x8
const @"".BRKINT = 0x2
func @"".Bind(@"".fd int, @"".sa @"".Sockaddr) (@"".err error)
func @"".BpfBuflen(@"".fd int) (? int, ? error)
func @"".BpfDatalink(@"".fd int) (? int, ? error)
type @"".BpfHdr struct { @"".Tstamp @"".Timeval32; @"".Caplen uint32; @"".Datalen uint32; @"".Hdrlen uint16; @"".Pad_cgo_0 [2]byte }
func @"".BpfHeadercmpl(@"".fd int) (? int, ? error)
type @"".BpfInsn struct { @"".Code uint16; @"".Jt uint8; @"".Jf uint8; @"".K uint32 }
func @"".BpfInterface(@"".fd int, @"".name string) (? string, ? error)
func @"".BpfJump(@"".code int, @"".k int, @"".jt int, @"".jf int) (? *@"".BpfInsn)
type @"".BpfProgram struct { @"".Len uint32; @"".Pad_cgo_0 [4]byte; @"".Insns *@"".BpfInsn }
type @"".BpfStat struct { @"".Recv uint32; @"".Drop uint32 }
func @"".BpfStats(@"".fd int) (? *@"".BpfStat, ? error)
func @"".BpfStmt(@"".code int, @"".k int) (? *@"".BpfInsn)
func @"".BpfTimeout(@"".fd int) (? *@"".Timeval, ? error)
type @"".BpfVersion struct { @"".Major uint16; @"".Minor uint16 }
func @"".BytePtrFromString(@"".s string) (? *byte, ? error)
func @"".ByteSliceFromString(@"".s string) (? []byte, ? error)
const @"".CFLUSH = 0xf
const @"".CLOCAL = 0x8000
const @"".CREAD = 0x800
const @"".CS5 = 0x0
const @"".CS6 = 0x100
const @"".CS7 = 0x200
const @"".CS8 = 0x300
const @"".CSIZE = 0x300
const @"".CSTART = 0x11
const @"".CSTATUS = 0x14
const @"".CSTOP = 0x13
const @"".CSTOPB = 0x400
const @"".CSUSP = 0x1a
const @"".CTL_MAXNAME = 0xc
const @"".CTL_NET = 0x4
func @"".Chdir(@"".path string) (@"".err error)
func @"".CheckBpfVersion(@"".fd int) (? error)
func @"".Chflags(@"".path string, @"".flags int) (@"".err error)
func @"".Chmod(@"".path string, @"".mode uint32) (@"".err error)
func @"".Chown(@"".path string, @"".uid int, @"".gid int) (@"".err error)
func @"".Chroot(@"".path string) (@"".err error)
func @"".Clearenv() ()
func @"".Close(@"".fd int) (@"".err error)
func @"".CloseOnExec(@"".fd int) ()
func @"".CmsgLen(@"".datalen int) (? int)
func @"".CmsgSpace(@"".datalen int) (? int)
type @"".Cmsghdr struct { @"".Len uint32; @"".Level int32; @"".Type int32 }
func (? *@"".Cmsghdr) @"".SetLen(@"".length int) ()
func @"".Connect(@"".fd int, @"".sa @"".Sockaddr) (@"".err error)
type @"".Credential struct { @"".Uid uint32; @"".Gid uint32; @"".Groups []uint32 }
const @"".DLT_APPLE_IP_OVER_IEEE1394 = 0x8a
const @"".DLT_ARCNET = 0x7
const @"".DLT_ATM_CLIP = 0x13
const @"".DLT_ATM_RFC1483 = 0xb
const @"".DLT_AX25 = 0x3
const @"".DLT_CHAOS = 0x5
const @"".DLT_CHDLC = 0x68
const @"".DLT_C_HDLC = 0x68
const @"".DLT_EN10MB = 0x1
const @"".DLT_EN3MB = 0x2
const @"".DLT_FDDI = 0xa
const @"".DLT_IEEE802 = 0x6
const @"".DLT_IEEE802_11 = 0x69
const @"".DLT_IEEE802_11_RADIO = 0x7f
const @"".DLT_IEEE802_11_RADIO_AVS = 0xa3
const @"".DLT_LINUX_SLL = 0x71
const @"".DLT_LOOP = 0x6c
const @"".DLT_NULL = 0x0
const @"".DLT_PFLOG = 0x75
const @"".DLT_PFSYNC = 0x12
const @"".DLT_PPP = 0x9
const @"".DLT_PPP_BSDOS = 0x10
const @"".DLT_PPP_SERIAL = 0x32
const @"".DLT_PRONET = 0x4
const @"".DLT_RAW = 0xc
const @"".DLT_SLIP = 0x8
const @"".DLT_SLIP_BSDOS = 0xf
const @"".DT_BLK = 0x6
const @"".DT_CHR = 0x2
const @"".DT_DIR = 0x4
const @"".DT_FIFO = 0x1
const @"".DT_LNK = 0xa
const @"".DT_REG = 0x8
const @"".DT_SOCK = 0xc
const @"".DT_UNKNOWN = 0x0
const @"".DT_WHT = 0xe
type @"".Dirent struct { @"".Ino uint64; @"".Seekoff uint64; @"".Reclen uint16; @"".Namlen uint16; @"".Type uint8; @"".Name [1024]int8; @"".Pad_cgo_0 [3]byte }
func @"".Dup(@"".fd int) (@"".nfd int, @"".err error)
func @"".Dup2(@"".from int, @"".to int) (@"".err error)
const @"".E2BIG @"".Errno = 0x7
const @"".EACCES @"".Errno = 0xd
const @"".EADDRINUSE @"".Errno = 0x30
const @"".EADDRNOTAVAIL @"".Errno = 0x31
const @"".EAFNOSUPPORT @"".Errno = 0x2f
const @"".EAGAIN @"".Errno = 0x23
const @"".EALREADY @"".Errno = 0x25
const @"".EAUTH @"".Errno = 0x50
const @"".EBADARCH @"".Errno = 0x56
const @"".EBADEXEC @"".Errno = 0x55
const @"".EBADF @"".Errno = 0x9
const @"".EBADMACHO @"".Errno = 0x58
const @"".EBADMSG @"".Errno = 0x5e
const @"".EBADRPC @"".Errno = 0x48
const @"".EBUSY @"".Errno = 0x10
const @"".ECANCELED @"".Errno = 0x59
const @"".ECHILD @"".Errno = 0xa
const @"".ECHO = 0x8
const @"".ECHOCTL = 0x40
const @"".ECHOE = 0x2
const @"".ECHOK = 0x4
const @"".ECHOKE = 0x1
const @"".ECHONL = 0x10
const @"".ECHOPRT = 0x20
const @"".ECONNABORTED @"".Errno = 0x35
const @"".ECONNREFUSED @"".Errno = 0x3d
const @"".ECONNRESET @"".Errno = 0x36
const @"".EDEADLK @"".Errno = 0xb
const @"".EDESTADDRREQ @"".Errno = 0x27
const @"".EDEVERR @"".Errno = 0x53
const @"".EDOM @"".Errno = 0x21
const @"".EDQUOT @"".Errno = 0x45
const @"".EEXIST @"".Errno = 0x11
const @"".EFAULT @"".Errno = 0xe
const @"".EFBIG @"".Errno = 0x1b
const @"".EFTYPE @"".Errno = 0x4f
const @"".EHOSTDOWN @"".Errno = 0x40
const @"".EHOSTUNREACH @"".Errno = 0x41
const @"".EIDRM @"".Errno = 0x5a
const @"".EILSEQ @"".Errno = 0x5c
const @"".EINPROGRESS @"".Errno = 0x24
const @"".EINTR @"".Errno = 0x4
const @"".EINVAL @"".Errno = 0x16
const @"".EIO @"".Errno = 0x5
const @"".EISCONN @"".Errno = 0x38
const @"".EISDIR @"".Errno = 0x15
const @"".ELAST @"".Errno = 0x69
const @"".ELOOP @"".Errno = 0x3e
const @"".EMFILE @"".Errno = 0x18
const @"".EMLINK @"".Errno = 0x1f
const @"".EMSGSIZE @"".Errno = 0x28
const @"".EMULTIHOP @"".Errno = 0x5f
const @"".ENAMETOOLONG @"".Errno = 0x3f
const @"".ENEEDAUTH @"".Errno = 0x51
const @"".ENETDOWN @"".Errno = 0x32
const @"".ENETRESET @"".Errno = 0x34
const @"".ENETUNREACH @"".Errno = 0x33
const @"".ENFILE @"".Errno = 0x17
const @"".ENOATTR @"".Errno = 0x5d
const @"".ENOBUFS @"".Errno = 0x37
const @"".ENODATA @"".Errno = 0x60
const @"".ENODEV @"".Errno = 0x13
const @"".ENOENT @"".Errno = 0x2
const @"".ENOEXEC @"".Errno = 0x8
const @"".ENOLCK @"".Errno = 0x4d
const @"".ENOLINK @"".Errno = 0x61
const @"".ENOMEM @"".Errno = 0xc
const @"".ENOMSG @"".Errno = 0x5b
const @"".ENOPOLICY @"".Errno = 0x67
const @"".ENOPROTOOPT @"".Errno = 0x2a
const @"".ENOSPC @"".Errno = 0x1c
const @"".ENOSR @"".Errno = 0x62
const @"".ENOSTR @"".Errno = 0x63
const @"".ENOSYS @"".Errno = 0x4e
const @"".ENOTBLK @"".Errno = 0xf
const @"".ENOTCONN @"".Errno = 0x39
const @"".ENOTDIR @"".Errno = 0x14
const @"".ENOTEMPTY @"".Errno = 0x42
const @"".ENOTRECOVERABLE @"".Errno = 0x68
const @"".ENOTSOCK @"".Errno = 0x26
const @"".ENOTSUP @"".Errno = 0x2d
const @"".ENOTTY @"".Errno = 0x19
const @"".ENXIO @"".Errno = 0x6
const @"".EOPNOTSUPP @"".Errno = 0x66
const @"".EOVERFLOW @"".Errno = 0x54
const @"".EOWNERDEAD @"".Errno = 0x69
const @"".EPERM @"".Errno = 0x1
const @"".EPFNOSUPPORT @"".Errno = 0x2e
const @"".EPIPE @"".Errno = 0x20
const @"".EPROCLIM @"".Errno = 0x43
const @"".EPROCUNAVAIL @"".Errno = 0x4c
const @"".EPROGMISMATCH @"".Errno = 0x4b
const @"".EPROGUNAVAIL @"".Errno = 0x4a
const @"".EPROTO @"".Errno = 0x64
const @"".EPROTONOSUPPORT @"".Errno = 0x2b
const @"".EPROTOTYPE @"".Errno = 0x29
const @"".EPWROFF @"".Errno = 0x52
const @"".ERANGE @"".Errno = 0x22
const @"".EREMOTE @"".Errno = 0x47
const @"".EROFS @"".Errno = 0x1e
const @"".ERPCMISMATCH @"".Errno = 0x49
const @"".ESHLIBVERS @"".Errno = 0x57
const @"".ESHUTDOWN @"".Errno = 0x3a
const @"".ESOCKTNOSUPPORT @"".Errno = 0x2c
const @"".ESPIPE @"".Errno = 0x1d
const @"".ESRCH @"".Errno = 0x3
const @"".ESTALE @"".Errno = 0x46
const @"".ETIME @"".Errno = 0x65
const @"".ETIMEDOUT @"".Errno = 0x3c
const @"".ETOOMANYREFS @"".Errno = 0x3b
const @"".ETXTBSY @"".Errno = 0x1a
const @"".EUSERS @"".Errno = 0x44
const @"".EVFILT_AIO = -0x3
const @"".EVFILT_FS = -0x9
const @"".EVFILT_MACHPORT = -0x8
const @"".EVFILT_PROC = -0x5
const @"".EVFILT_READ = -0x1
const @"".EVFILT_SIGNAL = -0x6
const @"".EVFILT_SYSCOUNT = 0xc
const @"".EVFILT_THREADMARKER = 0xc
const @"".EVFILT_TIMER = -0x7
const @"".EVFILT_USER = -0xa
const @"".EVFILT_VM = -0xc
const @"".EVFILT_VNODE = -0x4
const @"".EVFILT_WRITE = -0x2
const @"".EV_ADD = 0x1
const @"".EV_CLEAR = 0x20
const @"".EV_DELETE = 0x2
const @"".EV_DISABLE = 0x8
const @"".EV_DISPATCH = 0x80
const @"".EV_ENABLE = 0x4
const @"".EV_EOF = 0x8000
const @"".EV_ERROR = 0x4000
const @"".EV_FLAG0 = 0x1000
const @"".EV_FLAG1 = 0x2000
const @"".EV_ONESHOT = 0x10
const @"".EV_OOBAND = 0x2000
const @"".EV_POLL = 0x1000
const @"".EV_RECEIPT = 0x40
const @"".EV_SYSFLAGS = 0xf000
const @"".EWOULDBLOCK @"".Errno = 0x23
const @"".EXDEV @"".Errno = 0x12
const @"".EXTA = 0x4b00
const @"".EXTB = 0x9600
const @"".EXTPROC = 0x800
func @"".Environ() (? []string)
type @"".Errno uintptr
func (? @"".Errno) @"".Error() (? string)
func (? @"".Errno) @"".Temporary() (? bool)
func (? @"".Errno) @"".Timeout() (? bool)
func (? *@"".Errno) @"".Error() (? string)
func (? *@"".Errno) @"".Temporary() (? bool)
func (? *@"".Errno) @"".Timeout() (? bool)
func @"".Exchangedata(@"".path1 string, @"".path2 string, @"".options int) (@"".err error)
func @"".Exec(@"".argv0 string, @"".argv []string, @"".envv []string) (@"".err error)
func @"".Exit(@"".code int) ()
const @"".FD_CLOEXEC = 0x1
const @"".FD_SETSIZE = 0x400
const @"".FLUSHO = 0x800000
const @"".F_ADDFILESIGS = 0x3d
const @"".F_ADDSIGS = 0x3b
const @"".F_ALLOCATEALL = 0x4
const @"".F_ALLOCATECONTIG = 0x2
const @"".F_CHKCLEAN = 0x29
const @"".F_DUPFD = 0x0
const @"".F_DUPFD_CLOEXEC = 0x43
const @"".F_FLUSH_DATA = 0x28
const @"".F_FREEZE_FS = 0x35
const @"".F_FULLFSYNC = 0x33
const @"".F_GETFD = 0x1
const @"".F_GETFL = 0x3
const @"".F_GETLK = 0x7
const @"".F_GETLKPID = 0x42
const @"".F_GETNOSIGPIPE = 0x4a
const @"".F_GETOWN = 0x5
const @"".F_GETPATH = 0x32
const @"".F_GETPATH_MTMINFO = 0x47
const @"".F_GETPROTECTIONCLASS = 0x3f
const @"".F_GLOBAL_NOCACHE = 0x37
const @"".F_LOG2PHYS = 0x31
const @"".F_LOG2PHYS_EXT = 0x41
const @"".F_MARKDEPENDENCY = 0x3c
const @"".F_NOCACHE = 0x30
const @"".F_NODIRECT = 0x3e
const @"".F_OK = 0x0
const @"".F_PATHPKG_CHECK = 0x34
const @"".F_PEOFPOSMODE = 0x3
const @"".F_PREALLOCATE = 0x2a
const @"".F_RDADVISE = 0x2c
const @"".F_RDAHEAD = 0x2d
const @"".F_RDLCK = 0x1
const @"".F_READBOOTSTRAP = 0x2e
const @"".F_SETBACKINGSTORE = 0x46
const @"".F_SETFD = 0x2
const @"".F_SETFL = 0x4
const @"".F_SETLK = 0x8
const @"".F_SETLKW = 0x9
const @"".F_SETNOSIGPIPE = 0x49
const @"".F_SETOWN = 0x6
const @"".F_SETPROTECTIONCLASS = 0x40
const @"".F_SETSIZE = 0x2b
const @"".F_THAW_FS = 0x36
const @"".F_UNLCK = 0x2
const @"".F_VOLPOSMODE = 0x4
const @"".F_WRITEBOOTSTRAP = 0x2f
const @"".F_WRLCK = 0x3
type @"".Fbootstraptransfer_t struct { @"".Offset int64; @"".Length uint64; @"".Buffer *byte }
func @"".Fchdir(@"".fd int) (@"".err error)
func @"".Fchflags(@"".fd int, @"".flags int) (@"".err error)
func @"".Fchmod(@"".fd int, @"".mode uint32) (@"".err error)
func @"".Fchown(@"".fd int, @"".uid int, @"".gid int) (@"".err error)
type @"".FdSet struct { @"".Bits [32]int32 }
func @"".Flock(@"".fd int, @"".how int) (@"".err error)
type @"".Flock_t struct { @"".Start int64; @"".Len int64; @"".Pid int32; @"".Type int16; @"".Whence int16 }
func @"".FlushBpf(@"".fd int) (? error)
func @"".ForkExec(@"".argv0 string, @"".argv []string, @"".attr *@"".ProcAttr) (@"".pid int, @"".err error)
var @"".ForkLock @"sync".RWMutex
func @"".Fpathconf(@"".fd int, @"".name int) (@"".val int, @"".err error)
type @"".Fsid struct { @"".Val [2]int32 }
func @"".Fstat(@"".fd int, @"".stat *@"".Stat_t) (@"".err error)
func @"".Fstatfs(@"".fd int, @"".stat *@"".Statfs_t) (@"".err error)
type @"".Fstore_t struct { @"".Flags uint32; @"".Posmode int32; @"".Offset int64; @"".Length int64; @"".Bytesalloc int64 }
func @"".Fsync(@"".fd int) (@"".err error)
func @"".Ftruncate(@"".fd int, @"".length int64) (@"".err error)
func @"".Futimes(@"".fd int, @"".tv []@"".Timeval) (@"".err error)
func @"".Getdirentries(@"".fd int, @"".buf []byte, @"".basep *uintptr) (@"".n int, @"".err error)
func @"".Getdtablesize() (@"".size int)
func @"".Getegid() (@"".egid int)
func @"".Getenv(@"".key string) (@"".value string, @"".found bool)
func @"".Geteuid() (@"".uid int)
func @"".Getfsstat(@"".buf []@"".Statfs_t, @"".flags int) (@"".n int, @"".err error)
func @"".Getgid() (@"".gid int)
func @"".Getgroups() (@"".gids []int, @"".err error)
func @"".Getpagesize() (? int)
func @"".Getpeername(@"".fd int) (@"".sa @"".Sockaddr, @"".err error)
func @"".Getpgid(@"".pid int) (@"".pgid int, @"".err error)
func @"".Getpgrp() (@"".pgrp int)
func @"".Getpid() (@"".pid int)
func @"".Getppid() (@"".ppid int)
func @"".Getpriority(@"".which int, @"".who int) (@"".prio int, @"".err error)
func @"".Getrlimit(@"".which int, @"".lim *@"".Rlimit) (@"".err error)
func @"".Getrusage(@"".who int, @"".rusage *@"".Rusage) (@"".err error)
func @"".Getsid(@"".pid int) (@"".sid int, @"".err error)
func @"".Getsockname(@"".fd int) (@"".sa @"".Sockaddr, @"".err error)
func @"".GetsockoptByte(@"".fd int, @"".level int, @"".opt int) (@"".value byte, @"".err error)
func @"".GetsockoptICMPv6Filter(@"".fd int, @"".level int, @"".opt int) (? *@"".ICMPv6Filter, ? error)
func @"".GetsockoptIPMreq(@"".fd int, @"".level int, @"".opt int) (? *@"".IPMreq, ? error)
func @"".GetsockoptIPv6MTUInfo(@"".fd int, @"".level int, @"".opt int) (? *@"".IPv6MTUInfo, ? error)
func @"".GetsockoptIPv6Mreq(@"".fd int, @"".level int, @"".opt int) (? *@"".IPv6Mreq, ? error)
func @"".GetsockoptInet4Addr(@"".fd int, @"".level int, @"".opt int) (@"".value [4]byte, @"".err error)
func @"".GetsockoptInt(@"".fd int, @"".level int, @"".opt int) (@"".value int, @"".err error)
func @"".Gettimeofday(@"".tv *@"".Timeval) (@"".err error)
func @"".Getuid() (@"".uid int)
func @"".Getwd() (? string, ? error)
const @"".HUPCL = 0x4000
const @"".ICANON = 0x100
const @"".ICMP6_FILTER = 0x12
type @"".ICMPv6Filter struct { @"".Filt [8]uint32 }
const @"".ICRNL = 0x100
const @"".IEXTEN = 0x400
const @"".IFF_ALLMULTI = 0x200
const @"".IFF_ALTPHYS = 0x4000
const @"".IFF_BROADCAST = 0x2
const @"".IFF_DEBUG = 0x4
const @"".IFF_LINK0 = 0x1000
const @"".IFF_LINK1 = 0x2000
const @"".IFF_LINK2 = 0x4000
const @"".IFF_LOOPBACK = 0x8
const @"".IFF_MULTICAST = 0x8000
const @"".IFF_NOARP = 0x80
const @"".IFF_NOTRAILERS = 0x20
const @"".IFF_OACTIVE = 0x400
const @"".IFF_POINTOPOINT = 0x10
const @"".IFF_PROMISC = 0x100
const @"".IFF_RUNNING = 0x40
const @"".IFF_SIMPLEX = 0x800
const @"".IFF_UP = 0x1
const @"".IFNAMSIZ = 0x10
const @"".IFT_1822 = 0x2
const @"".IFT_AAL5 = 0x31
const @"".IFT_ARCNET = 0x23
const @"".IFT_ARCNETPLUS = 0x24
const @"".IFT_ATM = 0x25
const @"".IFT_BRIDGE = 0xd1
const @"".IFT_CARP = 0xf8
const @"".IFT_CELLULAR = 0xff
const @"".IFT_CEPT = 0x13
const @"".IFT_DS3 = 0x1e
const @"".IFT_ENC = 0xf4
const @"".IFT_EON = 0x19
const @"".IFT_ETHER = 0x6
const @"".IFT_FAITH = 0x38
const @"".IFT_FDDI = 0xf
const @"".IFT_FRELAY = 0x20
const @"".IFT_FRELAYDCE = 0x2c
const @"".IFT_GIF = 0x37
const @"".IFT_HDH1822 = 0x3
const @"".IFT_HIPPI = 0x2f
const @"".IFT_HSSI = 0x2e
const @"".IFT_HY = 0xe
const @"".IFT_IEEE1394 = 0x90
const @"".IFT_IEEE8023ADLAG = 0x88
const @"".IFT_ISDNBASIC = 0x14
const @"".IFT_ISDNPRIMARY = 0x15
const @"".IFT_ISO88022LLC = 0x29
const @"".IFT_ISO88023 = 0x7
const @"".IFT_ISO88024 = 0x8
const @"".IFT_ISO88025 = 0x9
const @"".IFT_ISO88026 = 0xa
const @"".IFT_L2VLAN = 0x87
const @"".IFT_LAPB = 0x10
const @"".IFT_LOCALTALK = 0x2a
const @"".IFT_LOOP = 0x18
const @"".IFT_MIOX25 = 0x26
const @"".IFT_MODEM = 0x30
const @"".IFT_NSIP = 0x1b
const @"".IFT_OTHER = 0x1
const @"".IFT_P10 = 0xc
const @"".IFT_P80 = 0xd
const @"".IFT_PARA = 0x22
const @"".IFT_PDP = 0xff
const @"".IFT_PFLOG = 0xf5
const @"".IFT_PFSYNC = 0xf6
const @"".IFT_PPP = 0x17
const @"".IFT_PROPMUX = 0x36
const @"".IFT_PROPVIRTUAL = 0x35
const @"".IFT_PTPSERIAL = 0x16
const @"".IFT_RS232 = 0x21
const @"".IFT_SDLC = 0x11
const @"".IFT_SIP = 0x1f
const @"".IFT_SLIP = 0x1c
const @"".IFT_SMDSDXI = 0x2b
const @"".IFT_SMDSICIP = 0x34
const @"".IFT_SONET = 0x27
const @"".IFT_SONETPATH = 0x32
const @"".IFT_SONETVT = 0x33
const @"".IFT_STARLAN = 0xb
const @"".IFT_STF = 0x39
const @"".IFT_T1 = 0x12
const @"".IFT_ULTRA = 0x1d
const @"".IFT_V35 = 0x2d
const @"".IFT_X25 = 0x5
const @"".IFT_X25DDN = 0x4
const @"".IFT_X25PLE = 0x28
const @"".IFT_XETHER = 0x1a
const @"".IGNBRK = 0x1
const @"".IGNCR = 0x80
const @"".IGNPAR = 0x4
const @"".IMAXBEL = 0x2000
const @"".INLCR = 0x40
const @"".INPCK = 0x10
const @"".IN_CLASSA_HOST = 0xffffff
const @"".IN_CLASSA_MAX = 0x80
const @"".IN_CLASSA_NET = 0xff000000
const @"".IN_CLASSA_NSHIFT = 0x18
const @"".IN_CLASSB_HOST = 0xffff
const @"".IN_CLASSB_MAX = 0x10000
const @"".IN_CLASSB_NET = 0xffff0000
const @"".IN_CLASSB_NSHIFT = 0x10
const @"".IN_CLASSC_HOST = 0xff
const @"".IN_CLASSC_NET = 0xffffff00
const @"".IN_CLASSC_NSHIFT = 0x8
const @"".IN_CLASSD_HOST = 0xfffffff
const @"".IN_CLASSD_NET = 0xf0000000
const @"".IN_CLASSD_NSHIFT = 0x1c
const @"".IN_LINKLOCALNETNUM = 0xa9fe0000
const @"".IN_LOOPBACKNET = 0x7f
type @"".IPMreq struct { @"".Multiaddr [4]byte; @"".Interface [4]byte }
const @"".IPPROTO_3PC = 0x22
const @"".IPPROTO_ADFS = 0x44
const @"".IPPROTO_AH = 0x33
const @"".IPPROTO_AHIP = 0x3d
const @"".IPPROTO_APES = 0x63
const @"".IPPROTO_ARGUS = 0xd
const @"".IPPROTO_AX25 = 0x5d
const @"".IPPROTO_BHA = 0x31
const @"".IPPROTO_BLT = 0x1e
const @"".IPPROTO_BRSATMON = 0x4c
const @"".IPPROTO_CFTP = 0x3e
const @"".IPPROTO_CHAOS = 0x10
const @"".IPPROTO_CMTP = 0x26
const @"".IPPROTO_CPHB = 0x49
const @"".IPPROTO_CPNX = 0x48
const @"".IPPROTO_DDP = 0x25
const @"".IPPROTO_DGP = 0x56
const @"".IPPROTO_DIVERT = 0xfe
const @"".IPPROTO_DONE = 0x101
const @"".IPPROTO_DSTOPTS = 0x3c
const @"".IPPROTO_EGP = 0x8
const @"".IPPROTO_EMCON = 0xe
const @"".IPPROTO_ENCAP = 0x62
const @"".IPPROTO_EON = 0x50
const @"".IPPROTO_ESP = 0x32
const @"".IPPROTO_ETHERIP = 0x61
const @"".IPPROTO_FRAGMENT = 0x2c
const @"".IPPROTO_GGP = 0x3
const @"".IPPROTO_GMTP = 0x64
const @"".IPPROTO_GRE = 0x2f
const @"".IPPROTO_HELLO = 0x3f
const @"".IPPROTO_HMP = 0x14
const @"".IPPROTO_HOPOPTS = 0x0
const @"".IPPROTO_ICMP = 0x1
const @"".IPPROTO_ICMPV6 = 0x3a
const @"".IPPROTO_IDP = 0x16
const @"".IPPROTO_IDPR = 0x23
const @"".IPPROTO_IDRP = 0x2d
const @"".IPPROTO_IGMP = 0x2
const @"".IPPROTO_IGP = 0x55
const @"".IPPROTO_IGRP = 0x58
const @"".IPPROTO_IL = 0x28
const @"".IPPROTO_INLSP = 0x34
const @"".IPPROTO_INP = 0x20
const @"".IPPROTO_IP = 0x0
const @"".IPPROTO_IPCOMP = 0x6c
const @"".IPPROTO_IPCV = 0x47
const @"".IPPROTO_IPEIP = 0x5e
const @"".IPPROTO_IPIP = 0x4
const @"".IPPROTO_IPPC = 0x43
const @"".IPPROTO_IPV4 = 0x4
const @"".IPPROTO_IPV6 = 0x29
const @"".IPPROTO_IRTP = 0x1c
const @"".IPPROTO_KRYPTOLAN = 0x41
const @"".IPPROTO_LARP = 0x5b
const @"".IPPROTO_LEAF1 = 0x19
const @"".IPPROTO_LEAF2 = 0x1a
const @"".IPPROTO_MAX = 0x100
const @"".IPPROTO_MAXID = 0x34
const @"".IPPROTO_MEAS = 0x13
const @"".IPPROTO_MHRP = 0x30
const @"".IPPROTO_MICP = 0x5f
const @"".IPPROTO_MTP = 0x5c
const @"".IPPROTO_MUX = 0x12
const @"".IPPROTO_ND = 0x4d
const @"".IPPROTO_NHRP = 0x36
const @"".IPPROTO_NONE = 0x3b
const @"".IPPROTO_NSP = 0x1f
const @"".IPPROTO_NVPII = 0xb
const @"".IPPROTO_OSPFIGP = 0x59
const @"".IPPROTO_PGM = 0x71
const @"".IPPROTO_PIGP = 0x9
const @"".IPPROTO_PIM = 0x67
const @"".IPPROTO_PRM = 0x15
const @"".IPPROTO_PUP = 0xc
const @"".IPPROTO_PVP = 0x4b
const @"".IPPROTO_RAW = 0xff
const @"".IPPROTO_RCCMON = 0xa
const @"".IPPROTO_RDP = 0x1b
const @"".IPPROTO_ROUTING = 0x2b
const @"".IPPROTO_RSVP = 0x2e
const @"".IPPROTO_RVD = 0x42
const @"".IPPROTO_SATEXPAK = 0x40
const @"".IPPROTO_SATMON = 0x45
const @"".IPPROTO_SCCSP = 0x60
const @"".IPPROTO_SCTP = 0x84
const @"".IPPROTO_SDRP = 0x2a
const @"".IPPROTO_SEP = 0x21
const @"".IPPROTO_SRPC = 0x5a
const @"".IPPROTO_ST = 0x7
const @"".IPPROTO_SVMTP = 0x52
const @"".IPPROTO_SWIPE = 0x35
const @"".IPPROTO_TCF = 0x57
const @"".IPPROTO_TCP = 0x6
const @"".IPPROTO_TP = 0x1d
const @"".IPPROTO_TPXX = 0x27
const @"".IPPROTO_TRUNK1 = 0x17
const @"".IPPROTO_TRUNK2 = 0x18
const @"".IPPROTO_TTP = 0x54
const @"".IPPROTO_UDP = 0x11
const @"".IPPROTO_VINES = 0x53
const @"".IPPROTO_VISA = 0x46
const @"".IPPROTO_VMTP = 0x51
const @"".IPPROTO_WBEXPAK = 0x4f
const @"".IPPROTO_WBMON = 0x4e
const @"".IPPROTO_WSN = 0x4a
const @"".IPPROTO_XNET = 0xf
const @"".IPPROTO_XTP = 0x24
const @"".IPV6_2292DSTOPTS = 0x17
const @"".IPV6_2292HOPLIMIT = 0x14
const @"".IPV6_2292HOPOPTS = 0x16
const @"".IPV6_2292NEXTHOP = 0x15
const @"".IPV6_2292PKTINFO = 0x13
const @"".IPV6_2292PKTOPTIONS = 0x19
const @"".IPV6_2292RTHDR = 0x18
const @"".IPV6_BINDV6ONLY = 0x1b
const @"".IPV6_BOUND_IF = 0x7d
const @"".IPV6_CHECKSUM = 0x1a
const @"".IPV6_DEFAULT_MULTICAST_HOPS = 0x1
const @"".IPV6_DEFAULT_MULTICAST_LOOP = 0x1
const @"".IPV6_DEFHLIM = 0x40
const @"".IPV6_FAITH = 0x1d
const @"".IPV6_FLOWINFO_MASK = 0xffffff0f
const @"".IPV6_FLOWLABEL_MASK = 0xffff0f00
const @"".IPV6_FRAGTTL = 0x78
const @"".IPV6_FW_ADD = 0x1e
const @"".IPV6_FW_DEL = 0x1f
const @"".IPV6_FW_FLUSH = 0x20
const @"".IPV6_FW_GET = 0x22
const @"".IPV6_FW_ZERO = 0x21
const @"".IPV6_HLIMDEC = 0x1
const @"".IPV6_IPSEC_POLICY = 0x1c
const @"".IPV6_JOIN_GROUP = 0xc
const @"".IPV6_LEAVE_GROUP = 0xd
const @"".IPV6_MAXHLIM = 0xff
const @"".IPV6_MAXOPTHDR = 0x800
const @"".IPV6_MAXPACKET = 0xffff
const @"".IPV6_MAX_GROUP_SRC_FILTER = 0x200
const @"".IPV6_MAX_MEMBERSHIPS = 0xfff
const @"".IPV6_MAX_SOCK_SRC_FILTER = 0x80
const @"".IPV6_MIN_MEMBERSHIPS = 0x1f
const @"".IPV6_MMTU = 0x500
const @"".IPV6_MULTICAST_HOPS = 0xa
const @"".IPV6_MULTICAST_IF = 0x9
const @"".IPV6_MULTICAST_LOOP = 0xb
const @"".IPV6_PORTRANGE = 0xe
const @"".IPV6_PORTRANGE_DEFAULT = 0x0
const @"".IPV6_PORTRANGE_HIGH = 0x1
const @"".IPV6_PORTRANGE_LOW = 0x2
const @"".IPV6_RECVTCLASS = 0x23
const @"".IPV6_RTHDR_LOOSE = 0x0
const @"".IPV6_RTHDR_STRICT = 0x1
const @"".IPV6_RTHDR_TYPE_0 = 0x0
const @"".IPV6_SOCKOPT_RESERVED1 = 0x3
const @"".IPV6_TCLASS = 0x24
const @"".IPV6_UNICAST_HOPS = 0x4
const @"".IPV6_V6ONLY = 0x1b
const @"".IPV6_VERSION = 0x60
const @"".IPV6_VERSION_MASK = 0xf0
const @"".IP_ADD_MEMBERSHIP = 0xc
const @"".IP_ADD_SOURCE_MEMBERSHIP = 0x46
const @"".IP_BLOCK_SOURCE = 0x48
const @"".IP_BOUND_IF = 0x19
const @"".IP_DEFAULT_MULTICAST_LOOP = 0x1
const @"".IP_DEFAULT_MULTICAST_TTL = 0x1
const @"".IP_DF = 0x4000
const @"".IP_DROP_MEMBERSHIP = 0xd
const @"".IP_DROP_SOURCE_MEMBERSHIP = 0x47
const @"".IP_DUMMYNET_CONFIGURE = 0x3c
const @"".IP_DUMMYNET_DEL = 0x3d
const @"".IP_DUMMYNET_FLUSH = 0x3e
const @"".IP_DUMMYNET_GET = 0x40
const @"".IP_FAITH = 0x16
const @"".IP_FW_ADD = 0x28
const @"".IP_FW_DEL = 0x29
const @"".IP_FW_FLUSH = 0x2a
const @"".IP_FW_GET = 0x2c
const @"".IP_FW_RESETLOG = 0x2d
const @"".IP_FW_ZERO = 0x2b
const @"".IP_HDRINCL = 0x2
const @"".IP_IPSEC_POLICY = 0x15
const @"".IP_MAXPACKET = 0xffff
const @"".IP_MAX_GROUP_SRC_FILTER = 0x200
const @"".IP_MAX_MEMBERSHIPS = 0xfff
const @"".IP_MAX_SOCK_MUTE_FILTER = 0x80
const @"".IP_MAX_SOCK_SRC_FILTER = 0x80
const @"".IP_MF = 0x2000
const @"".IP_MIN_MEMBERSHIPS = 0x1f
const @"".IP_MSFILTER = 0x4a
const @"".IP_MSS = 0x240
const @"".IP_MULTICAST_IF = 0x9
const @"".IP_MULTICAST_IFINDEX = 0x42
const @"".IP_MULTICAST_LOOP = 0xb
const @"".IP_MULTICAST_TTL = 0xa
const @"".IP_MULTICAST_VIF = 0xe
const @"".IP_NAT__XXX = 0x37
const @"".IP_OFFMASK = 0x1fff
const @"".IP_OLD_FW_ADD = 0x32
const @"".IP_OLD_FW_DEL = 0x33
const @"".IP_OLD_FW_FLUSH = 0x34
const @"".IP_OLD_FW_GET = 0x36
const @"".IP_OLD_FW_RESETLOG = 0x38
const @"".IP_OLD_FW_ZERO = 0x35
const @"".IP_OPTIONS = 0x1
const @"".IP_PKTINFO = 0x1a
const @"".IP_PORTRANGE = 0x13
const @"".IP_PORTRANGE_DEFAULT = 0x0
const @"".IP_PORTRANGE_HIGH = 0x1
const @"".IP_PORTRANGE_LOW = 0x2
const @"".IP_RECVDSTADDR = 0x7
const @"".IP_RECVIF = 0x14
const @"".IP_RECVOPTS = 0x5
const @"".IP_RECVPKTINFO = 0x1a
const @"".IP_RECVRETOPTS = 0x6
const @"".IP_RECVTTL = 0x18
const @"".IP_RETOPTS = 0x8
const @"".IP_RF = 0x8000
const @"".IP_RSVP_OFF = 0x10
const @"".IP_RSVP_ON = 0xf
const @"".IP_RSVP_VIF_OFF = 0x12
const @"".IP_RSVP_VIF_ON = 0x11
const @"".IP_STRIPHDR = 0x17
const @"".IP_TOS = 0x3
const @"".IP_TRAFFIC_MGT_BACKGROUND = 0x41
const @"".IP_TTL = 0x4
const @"".IP_UNBLOCK_SOURCE = 0x49
type @"".IPv6MTUInfo struct { @"".Addr @"".RawSockaddrInet6; @"".Mtu uint32 }
type @"".IPv6Mreq struct { @"".Multiaddr [16]byte; @"".Interface uint32 }
const @"".ISIG = 0x80
const @"".ISTRIP = 0x20
const @"".IUTF8 = 0x4000
const @"".IXANY = 0x800
const @"".IXOFF = 0x400
const @"".IXON = 0x200
type @"".IfData struct { @"".Type uint8; @"".Typelen uint8; @"".Physical uint8; @"".Addrlen uint8; @"".Hdrlen uint8; @"".Recvquota uint8; @"".Xmitquota uint8; @"".Unused1 uint8; @"".Mtu uint32; @"".Metric uint32; @"".Baudrate uint32; @"".Ipackets uint32; @"".Ierrors uint32; @"".Opackets uint32; @"".Oerrors uint32; @"".Collisions uint32; @"".Ibytes uint32; @"".Obytes uint32; @"".Imcasts uint32; @"".Omcasts uint32; @"".Iqdrops uint32; @"".Noproto uint32; @"".Recvtiming uint32; @"".Xmittiming uint32; @"".Lastchange @"".Timeval32; @"".Unused2 uint32; @"".Hwassist uint32; @"".Reserved1 uint32; @"".Reserved2 uint32 }
type @"".IfMsghdr struct { @"".Msglen uint16; @"".Version uint8; @"".Type uint8; @"".Addrs int32; @"".Flags int32; @"".Index uint16; @"".Pad_cgo_0 [2]byte; @"".Data @"".IfData }
type @"".IfaMsghdr struct { @"".Msglen uint16; @"".Version uint8; @"".Type uint8; @"".Addrs int32; @"".Flags int32; @"".Index uint16; @"".Pad_cgo_0 [2]byte; @"".Metric int32 }
type @"".IfmaMsghdr struct { @"".Msglen uint16; @"".Version uint8; @"".Type uint8; @"".Addrs int32; @"".Flags int32; @"".Index uint16; @"".Pad_cgo_0 [2]byte }
type @"".IfmaMsghdr2 struct { @"".Msglen uint16; @"".Version uint8; @"".Type uint8; @"".Addrs int32; @"".Flags int32; @"".Index uint16; @"".Pad_cgo_0 [2]byte; @"".Refcount int32 }
const @"".ImplementsGetwd = true
type @"".Inet4Pktinfo struct { @"".Ifindex uint32; @"".Spec_dst [4]byte; @"".Addr [4]byte }
type @"".Inet6Pktinfo struct { @"".Addr [16]byte; @"".Ifindex uint32 }
type @"".InterfaceAddrMessage struct { @"".Header @"".IfaMsghdr; @"".Data []byte }
func (? *@"".InterfaceAddrMessage) @"".sockaddr() (@"".sas []@"".Sockaddr)
type @"".InterfaceMessage struct { @"".Header @"".IfMsghdr; @"".Data []byte }
func (? *@"".InterfaceMessage) @"".sockaddr() (@"".sas []@"".Sockaddr)
type @"".InterfaceMulticastAddrMessage struct { @"".Header @"".IfmaMsghdr2; @"".Data []byte }
func (? *@"".InterfaceMulticastAddrMessage) @"".sockaddr() (@"".sas []@"".Sockaddr)
type @"".Iovec struct { @"".Base *byte; @"".Len uint64 }
func (? *@"".Iovec) @"".SetLen(@"".length int) ()
func @"".Issetugid() (@"".tainted bool)
func @"".Kevent(@"".kq int, @"".changes []@"".Kevent_t, @"".events []@"".Kevent_t, @"".timeout *@"".Timespec) (@"".n int, @"".err error)
type @"".Kevent_t struct { @"".Ident uint64; @"".Filter int16; @"".Flags uint16; @"".Fflags uint32; @"".Data int64; @"".Udata *byte }
func @"".Kill(@"".pid int, @"".signum @"".Signal) (@"".err error)
func @"".Kqueue() (@"".fd int, @"".err error)
const @"".LOCK_EX = 0x2
const @"".LOCK_NB = 0x4
const @"".LOCK_SH = 0x1
const @"".LOCK_UN = 0x8
func @"".Lchown(@"".path string, @"".uid int, @"".gid int) (@"".err error)
type @"".Linger struct { @"".Onoff int32; @"".Linger int32 }
func @"".Link(@"".path string, @"".link string) (@"".err error)
func @"".Listen(@"".s int, @"".backlog int) (@"".err error)
type @"".Log2phys_t struct { @"".Flags uint32; @"".Contigbytes int64; @"".Devoffset int64 }
func @"".Lstat(@"".path string, @"".stat *@"".Stat_t) (@"".err error)
const @"".MADV_CAN_REUSE = 0x9
const @"".MADV_DONTNEED = 0x4
const @"".MADV_FREE = 0x5
const @"".MADV_FREE_REUSABLE = 0x7
const @"".MADV_FREE_REUSE = 0x8
const @"".MADV_NORMAL = 0x0
const @"".MADV_RANDOM = 0x1
const @"".MADV_SEQUENTIAL = 0x2
const @"".MADV_WILLNEED = 0x3
const @"".MADV_ZERO_WIRED_PAGES = 0x6
const @"".MAP_ANON = 0x1000
const @"".MAP_COPY = 0x2
const @"".MAP_FILE = 0x0
const @"".MAP_FIXED = 0x10
const @"".MAP_HASSEMAPHORE = 0x200
const @"".MAP_JIT = 0x800
const @"".MAP_NOCACHE = 0x400
const @"".MAP_NOEXTEND = 0x100
const @"".MAP_NORESERVE = 0x40
const @"".MAP_PRIVATE = 0x2
const @"".MAP_RENAME = 0x20
const @"".MAP_RESERVED0080 = 0x80
const @"".MAP_SHARED = 0x1
const @"".MCL_CURRENT = 0x1
const @"".MCL_FUTURE = 0x2
const @"".MSG_CTRUNC = 0x20
const @"".MSG_DONTROUTE = 0x4
const @"".MSG_DONTWAIT = 0x80
const @"".MSG_EOF = 0x100
const @"".MSG_EOR = 0x8
const @"".MSG_FLUSH = 0x400
const @"".MSG_HAVEMORE = 0x2000
const @"".MSG_HOLD = 0x800
const @"".MSG_NEEDSA = 0x10000
const @"".MSG_OOB = 0x1
const @"".MSG_PEEK = 0x2
const @"".MSG_RCVMORE = 0x4000
const @"".MSG_SEND = 0x1000
const @"".MSG_TRUNC = 0x10
const @"".MSG_WAITALL = 0x40
const @"".MSG_WAITSTREAM = 0x200
const @"".MS_ASYNC = 0x1
const @"".MS_DEACTIVATE = 0x8
const @"".MS_INVALIDATE = 0x2
const @"".MS_KILLPAGES = 0x4
const @"".MS_SYNC = 0x10
func @"".Mkdir(@"".path string, @"".mode uint32) (@"".err error)
func @"".Mkfifo(@"".path string, @"".mode uint32) (@"".err error)
func @"".Mknod(@"".path string, @"".mode uint32, @"".dev int) (@"".err error)
func @"".Mmap(@"".fd int, @"".offset int64, @"".length int, @"".prot int, @"".flags int) (@"".data []byte, @"".err error)
type @"".Msghdr struct { @"".Name *byte; @"".Namelen uint32; @"".Pad_cgo_0 [4]byte; @"".Iov *@"".Iovec; @"".Iovlen int32; @"".Pad_cgo_1 [4]byte; @"".Control *byte; @"".Controllen uint32; @"".Flags int32 }
func (? *@"".Msghdr) @"".SetControllen(@"".length int) ()
func @"".Munmap(@"".b []byte) (@"".err error)
const @"".NAME_MAX = 0xff
const @"".NET_RT_DUMP = 0x1
const @"".NET_RT_DUMP2 = 0x7
const @"".NET_RT_FLAGS = 0x2
const @"".NET_RT_IFLIST = 0x3
const @"".NET_RT_IFLIST2 = 0x6
const @"".NET_RT_MAXID = 0xa
const @"".NET_RT_STAT = 0x4
const @"".NET_RT_TRASH = 0x5
const @"".NOFLSH = 0x80000000
const @"".NOTE_ABSOLUTE = 0x8
const @"".NOTE_ATTRIB = 0x8
const @"".NOTE_CHILD = 0x4
const @"".NOTE_DELETE = 0x1
const @"".NOTE_EXEC = 0x20000000
const @"".NOTE_EXIT = 0x80000000
const @"".NOTE_EXITSTATUS = 0x4000000
const @"".NOTE_EXTEND = 0x4
const @"".NOTE_FFAND = 0x40000000
const @"".NOTE_FFCOPY = 0xc0000000
const @"".NOTE_FFCTRLMASK = 0xc0000000
const @"".NOTE_FFLAGSMASK = 0xffffff
const @"".NOTE_FFNOP = 0x0
const @"".NOTE_FFOR = 0x80000000
const @"".NOTE_FORK = 0x40000000
const @"".NOTE_LINK = 0x10
const @"".NOTE_LOWAT = 0x1
const @"".NOTE_NONE = 0x80
const @"".NOTE_NSECONDS = 0x4
const @"".NOTE_PCTRLMASK = -0x100000
const @"".NOTE_PDATAMASK = 0xfffff
const @"".NOTE_REAP = 0x10000000
const @"".NOTE_RENAME = 0x20
const @"".NOTE_RESOURCEEND = 0x2000000
const @"".NOTE_REVOKE = 0x40
const @"".NOTE_SECONDS = 0x1
const @"".NOTE_SIGNAL = 0x8000000
const @"".NOTE_TRACK = 0x1
const @"".NOTE_TRACKERR = 0x2
const @"".NOTE_TRIGGER = 0x1000000
const @"".NOTE_USECONDS = 0x2
const @"".NOTE_VM_ERROR = 0x10000000
const @"".NOTE_VM_PRESSURE = 0x80000000
const @"".NOTE_VM_PRESSURE_SUDDEN_TERMINATE = 0x20000000
const @"".NOTE_VM_PRESSURE_TERMINATE = 0x40000000
const @"".NOTE_WRITE = 0x2
func @"".NsecToTimespec(@"".nsec int64) (@"".ts @"".Timespec)
func @"".NsecToTimeval(@"".nsec int64) (@"".tv @"".Timeval)
const @"".OCRNL = 0x10
const @"".OFDEL = 0x20000
const @"".OFILL = 0x80
const @"".ONLCR = 0x2
const @"".ONLRET = 0x40
const @"".ONOCR = 0x20
const @"".ONOEOT = 0x8
const @"".OPOST = 0x1
const @"".O_ACCMODE = 0x3
const @"".O_ALERT = 0x20000000
const @"".O_APPEND = 0x8
const @"".O_ASYNC = 0x40
const @"".O_CLOEXEC = 0x1000000
const @"".O_CREAT = 0x200
const @"".O_DIRECTORY = 0x100000
const @"".O_DSYNC = 0x400000
const @"".O_EVTONLY = 0x8000
const @"".O_EXCL = 0x800
const @"".O_EXLOCK = 0x20
const @"".O_FSYNC = 0x80
const @"".O_NDELAY = 0x4
const @"".O_NOCTTY = 0x20000
const @"".O_NOFOLLOW = 0x100
const @"".O_NONBLOCK = 0x4
const @"".O_POPUP = 0x80000000
const @"".O_RDONLY = 0x0
const @"".O_RDWR = 0x2
const @"".O_SHLOCK = 0x10
const @"".O_SYMLINK = 0x200000
const @"".O_SYNC = 0x80
const @"".O_TRUNC = 0x400
const @"".O_WRONLY = 0x1
func @"".Open(@"".path string, @"".mode int, @"".perm uint32) (@"".fd int, @"".err error)
const @"".PARENB = 0x1000
const @"".PARMRK = 0x8
const @"".PARODD = 0x2000
const @"".PENDIN = 0x20000000
const @"".PRIO_PGRP = 0x1
const @"".PRIO_PROCESS = 0x0
const @"".PRIO_USER = 0x2
const @"".PROT_EXEC = 0x4
const @"".PROT_NONE = 0x0
const @"".PROT_READ = 0x1
const @"".PROT_WRITE = 0x2
const @"".PTRACE_CONT = 0x7
const @"".PTRACE_KILL = 0x8
const @"".PTRACE_TRACEME = 0x0
const @"".PT_ATTACH = 0xa
const @"".PT_ATTACHEXC = 0xe
const @"".PT_CONTINUE = 0x7
const @"".PT_DENY_ATTACH = 0x1f
const @"".PT_DETACH = 0xb
const @"".PT_FIRSTMACH = 0x20
const @"".PT_FORCEQUOTA = 0x1e
const @"".PT_KILL = 0x8
const @"".PT_READ_D = 0x2
const @"".PT_READ_I = 0x1
const @"".PT_READ_U = 0x3
const @"".PT_SIGEXC = 0xc
const @"".PT_STEP = 0x9
const @"".PT_THUPDATE = 0xd
const @"".PT_TRACE_ME = 0x0
const @"".PT_WRITE_D = 0x5
const @"".PT_WRITE_I = 0x4
const @"".PT_WRITE_U = 0x6
func @"".ParseDirent(@"".buf []byte, @"".max int, @"".names []string) (@"".consumed int, @"".count int, @"".newnames []string)
func @"".ParseRoutingMessage(@"".b []byte) (@"".msgs []@"".RoutingMessage, @"".err error)
func @"".ParseRoutingSockaddr(@"".msg @"".RoutingMessage) (@"".sas []@"".Sockaddr, @"".err error)
func @"".ParseSocketControlMessage(@"".b []byte) (? []@"".SocketControlMessage, ? error)
func @"".ParseUnixRights(@"".m *@"".SocketControlMessage) (? []int, ? error)
func @"".Pathconf(@"".path string, @"".name int) (@"".val int, @"".err error)
func @"".Pipe(@"".p []int) (@"".err error)
func @"".Pread(@"".fd int, @"".p []byte, @"".offset int64) (@"".n int, @"".err error)
type @"".ProcAttr struct { @"".Dir string; @"".Env []string; @"".Files []uintptr; @"".Sys *@"".SysProcAttr }
func @"".PtraceAttach(@"".pid int) (@"".err error)
func @"".PtraceDetach(@"".pid int) (@"".err error)
func @"".Pwrite(@"".fd int, @"".p []byte, @"".offset int64) (@"".n int, @"".err error)
const @"".RLIMIT_AS = 0x5
const @"".RLIMIT_CORE = 0x4
const @"".RLIMIT_CPU = 0x0
const @"".RLIMIT_DATA = 0x2
const @"".RLIMIT_FSIZE = 0x1
const @"".RLIMIT_NOFILE = 0x8
const @"".RLIMIT_STACK = 0x3
const @"".RLIM_INFINITY = 0x7fffffffffffffff
const @"".RTAX_AUTHOR = 0x6
const @"".RTAX_BRD = 0x7
const @"".RTAX_DST = 0x0
const @"".RTAX_GATEWAY = 0x1
const @"".RTAX_GENMASK = 0x3
const @"".RTAX_IFA = 0x5
const @"".RTAX_IFP = 0x4
const @"".RTAX_MAX = 0x8
const @"".RTAX_NETMASK = 0x2
const @"".RTA_AUTHOR = 0x40
const @"".RTA_BRD = 0x80
const @"".RTA_DST = 0x1
const @"".RTA_GATEWAY = 0x2
const @"".RTA_GENMASK = 0x8
const @"".RTA_IFA = 0x20
const @"".RTA_IFP = 0x10
const @"".RTA_NETMASK = 0x4
const @"".RTF_BLACKHOLE = 0x1000
const @"".RTF_BROADCAST = 0x400000
const @"".RTF_CLONING = 0x100
const @"".RTF_CONDEMNED = 0x2000000
const @"".RTF_DELCLONE = 0x80
const @"".RTF_DONE = 0x40
const @"".RTF_DYNAMIC = 0x10
const @"".RTF_GATEWAY = 0x2
const @"".RTF_HOST = 0x4
const @"".RTF_IFREF = 0x4000000
const @"".RTF_IFSCOPE = 0x1000000
const @"".RTF_LLINFO = 0x400
const @"".RTF_LOCAL = 0x200000
const @"".RTF_MODIFIED = 0x20
const @"".RTF_MULTICAST = 0x800000
const @"".RTF_PINNED = 0x100000
const @"".RTF_PRCLONING = 0x10000
const @"".RTF_PROTO1 = 0x8000
const @"".RTF_PROTO2 = 0x4000
const @"".RTF_PROTO3 = 0x40000
const @"".RTF_REJECT = 0x8
const @"".RTF_STATIC = 0x800
const @"".RTF_UP = 0x1
const @"".RTF_WASCLONED = 0x20000
const @"".RTF_XRESOLVE = 0x200
const @"".RTM_ADD = 0x1
const @"".RTM_CHANGE = 0x3
const @"".RTM_DELADDR = 0xd
const @"".RTM_DELETE = 0x2
const @"".RTM_DELMADDR = 0x10
const @"".RTM_GET = 0x4
const @"".RTM_GET2 = 0x14
const @"".RTM_IFINFO = 0xe
const @"".RTM_IFINFO2 = 0x12
const @"".RTM_LOCK = 0x8
const @"".RTM_LOSING = 0x5
const @"".RTM_MISS = 0x7
const @"".RTM_NEWADDR = 0xc
const @"".RTM_NEWMADDR = 0xf
const @"".RTM_NEWMADDR2 = 0x13
const @"".RTM_OLDADD = 0x9
const @"".RTM_OLDDEL = 0xa
const @"".RTM_REDIRECT = 0x6
const @"".RTM_RESOLVE = 0xb
const @"".RTM_RTTUNIT = 0xf4240
const @"".RTM_VERSION = 0x5
const @"".RTV_EXPIRE = 0x4
const @"".RTV_HOPCOUNT = 0x2
const @"".RTV_MTU = 0x1
const @"".RTV_RPIPE = 0x8
const @"".RTV_RTT = 0x40
const @"".RTV_RTTVAR = 0x80
const @"".RTV_SPIPE = 0x10
const @"".RTV_SSTHRESH = 0x20
const @"".RUSAGE_CHILDREN = -0x1
const @"".RUSAGE_SELF = 0x0
type @"".Radvisory_t struct { @"".Offset int64; @"".Count int32; @"".Pad_cgo_0 [4]byte }
type @"".RawSockaddr struct { @"".Len uint8; @"".Family uint8; @"".Data [14]int8 }
type @"".RawSockaddrAny struct { @"".Addr @"".RawSockaddr; @"".Pad [92]int8 }
type @"".RawSockaddrDatalink struct { @"".Len uint8; @"".Family uint8; @"".Index uint16; @"".Type uint8; @"".Nlen uint8; @"".Alen uint8; @"".Slen uint8; @"".Data [12]int8 }
type @"".RawSockaddrInet4 struct { @"".Len uint8; @"".Family uint8; @"".Port uint16; @"".Addr [4]byte; @"".Zero [8]int8 }
type @"".RawSockaddrInet6 struct { @"".Len uint8; @"".Family uint8; @"".Port uint16; @"".Flowinfo uint32; @"".Addr [16]byte; @"".Scope_id uint32 }
type @"".RawSockaddrUnix struct { @"".Len uint8; @"".Family uint8; @"".Path [104]int8 }
func @"".RawSyscall(@"".trap uintptr, @"".a1 uintptr, @"".a2 uintptr, @"".a3 uintptr) (@"".r1 uintptr, @"".r2 uintptr, @"".err @"".Errno)
func @"".RawSyscall6(@"".trap uintptr, @"".a1 uintptr, @"".a2 uintptr, @"".a3 uintptr, @"".a4 uintptr, @"".a5 uintptr, @"".a6 uintptr) (@"".r1 uintptr, @"".r2 uintptr, @"".err @"".Errno)
func @"".Read(@"".fd int, @"".p []byte) (@"".n int, @"".err error)
func @"".ReadDirent(@"".fd int, @"".buf []byte) (@"".n int, @"".err error)
func @"".Readlink(@"".path string, @"".buf []byte) (@"".n int, @"".err error)
func @"".Recvfrom(@"".fd int, @"".p []byte, @"".flags int) (@"".n int, @"".from @"".Sockaddr, @"".err error)
func @"".Recvmsg(@"".fd int, @"".p []byte, @"".oob []byte, @"".flags int) (@"".n int, @"".oobn int, @"".recvflags int, @"".from @"".Sockaddr, @"".err error)
func @"".Rename(@"".from string, @"".to string) (@"".err error)
func @"".Revoke(@"".path string) (@"".err error)
type @"".Rlimit struct { @"".Cur uint64; @"".Max uint64 }
func @"".Rmdir(@"".path string) (@"".err error)
type @"".RouteMessage struct { @"".Header @"".RtMsghdr; @"".Data []byte }
func (? *@"".RouteMessage) @"".sockaddr() (? []@"".Sockaddr)
func @"".RouteRIB(@"".facility int, @"".param int) (? []byte, ? error)
type @"".RoutingMessage interface { @"".sockaddr() (? []@"".Sockaddr) }
type @"".RtMetrics struct { @"".Locks uint32; @"".Mtu uint32; @"".Hopcount uint32; @"".Expire int32; @"".Recvpipe uint32; @"".Sendpipe uint32; @"".Ssthresh uint32; @"".Rtt uint32; @"".Rttvar uint32; @"".Pksent uint32; @"".Filler [4]uint32 }
type @"".RtMsghdr struct { @"".Msglen uint16; @"".Version uint8; @"".Type uint8; @"".Index uint16; @"".Pad_cgo_0 [2]byte; @"".Flags int32; @"".Addrs int32; @"".Pid int32; @"".Seq int32; @"".Errno int32; @"".Use int32; @"".Inits uint32; @"".Rmx @"".RtMetrics }
type @"".Rusage struct { @"".Utime @"".Timeval; @"".Stime @"".Timeval; @"".Maxrss int64; @"".Ixrss int64; @"".Idrss int64; @"".Isrss int64; @"".Minflt int64; @"".Majflt int64; @"".Nswap int64; @"".Inblock int64; @"".Oublock int64; @"".Msgsnd int64; @"".Msgrcv int64; @"".Nsignals int64; @"".Nvcsw int64; @"".Nivcsw int64 }
const @"".SCM_CREDS = 0x3
const @"".SCM_RIGHTS = 0x1
const @"".SCM_TIMESTAMP = 0x2
const @"".SCM_TIMESTAMP_MONOTONIC = 0x4
const @"".SHUT_RD = 0x0
const @"".SHUT_RDWR = 0x2
const @"".SHUT_WR = 0x1
const @"".SIGABRT @"".Signal = 0x6
const @"".SIGALRM @"".Signal = 0xe
const @"".SIGBUS @"".Signal = 0xa
const @"".SIGCHLD @"".Signal = 0x14
const @"".SIGCONT @"".Signal = 0x13
const @"".SIGEMT @"".Signal = 0x7
const @"".SIGFPE @"".Signal = 0x8
const @"".SIGHUP @"".Signal = 0x1
const @"".SIGILL @"".Signal = 0x4
const @"".SIGINFO @"".Signal = 0x1d
const @"".SIGINT @"".Signal = 0x2
const @"".SIGIO @"".Signal = 0x17
const @"".SIGIOT @"".Signal = 0x6
const @"".SIGKILL @"".Signal = 0x9
const @"".SIGPIPE @"".Signal = 0xd
const @"".SIGPROF @"".Signal = 0x1b
const @"".SIGQUIT @"".Signal = 0x3
const @"".SIGSEGV @"".Signal = 0xb
const @"".SIGSTOP @"".Signal = 0x11
const @"".SIGSYS @"".Signal = 0xc
const @"".SIGTERM @"".Signal = 0xf
const @"".SIGTRAP @"".Signal = 0x5
const @"".SIGTSTP @"".Signal = 0x12
const @"".SIGTTIN @"".Signal = 0x15
const @"".SIGTTOU @"".Signal = 0x16
const @"".SIGURG @"".Signal = 0x10
const @"".SIGUSR1 @"".Signal = 0x1e
const @"".SIGUSR2 @"".Signal = 0x1f
const @"".SIGVTALRM @"".Signal = 0x1a
const @"".SIGWINCH @"".Signal = 0x1c
const @"".SIGXCPU @"".Signal = 0x18
const @"".SIGXFSZ @"".Signal = 0x19
const @"".SIOCADDMULTI = 0x80206931
const @"".SIOCAIFADDR = 0x8040691a
const @"".SIOCALIFADDR = 0x8118691d
const @"".SIOCARPIPLL = 0xc0206928
const @"".SIOCATMARK = 0x40047307
const @"".SIOCAUTOADDR = 0xc0206926
const @"".SIOCAUTONETMASK = 0x80206927
const @"".SIOCDELMULTI = 0x80206932
const @"".SIOCDIFADDR = 0x80206919
const @"".SIOCDIFPHYADDR = 0x80206941
const @"".SIOCDLIFADDR = 0x8118691f
const @"".SIOCGDRVSPEC = 0xc028697b
const @"".SIOCGETSGCNT = 0xc014721c
const @"".SIOCGETVIFCNT = 0xc014721b
const @"".SIOCGETVLAN = 0xc020697f
const @"".SIOCGHIWAT = 0x40047301
const @"".SIOCGIFADDR = 0xc0206921
const @"".SIOCGIFALTMTU = 0xc0206948
const @"".SIOCGIFASYNCMAP = 0xc020697c
const @"".SIOCGIFBOND = 0xc0206947
const @"".SIOCGIFBRDADDR = 0xc0206923
const @"".SIOCGIFCAP = 0xc020695b
const @"".SIOCGIFCONF = 0xc00c6924
const @"".SIOCGIFDEVMTU = 0xc0206944
const @"".SIOCGIFDSTADDR = 0xc0206922
const @"".SIOCGIFFLAGS = 0xc0206911
const @"".SIOCGIFGENERIC = 0xc020693a
const @"".SIOCGIFKPI = 0xc0206987
const @"".SIOCGIFMAC = 0xc0206982
const @"".SIOCGIFMEDIA = 0xc02c6938
const @"".SIOCGIFMETRIC = 0xc0206917
const @"".SIOCGIFMTU = 0xc0206933
const @"".SIOCGIFNETMASK = 0xc0206925
const @"".SIOCGIFPDSTADDR = 0xc0206940
const @"".SIOCGIFPHYS = 0xc0206935
const @"".SIOCGIFPSRCADDR = 0xc020693f
const @"".SIOCGIFSTATUS = 0xc331693d
const @"".SIOCGIFVLAN = 0xc020697f
const @"".SIOCGIFWAKEFLAGS = 0xc0206988
const @"".SIOCGLIFADDR = 0xc118691e
const @"".SIOCGLIFPHYADDR = 0xc1186943
const @"".SIOCGLOWAT = 0x40047303
const @"".SIOCGPGRP = 0x40047309
const @"".SIOCIFCREATE = 0xc0206978
const @"".SIOCIFCREATE2 = 0xc020697a
const @"".SIOCIFDESTROY = 0x80206979
const @"".SIOCRSLVMULTI = 0xc010693b
const @"".SIOCSDRVSPEC = 0x8028697b
const @"".SIOCSETVLAN = 0x8020697e
const @"".SIOCSHIWAT = 0x80047300
const @"".SIOCSIFADDR = 0x8020690c
const @"".SIOCSIFALTMTU = 0x80206945
const @"".SIOCSIFASYNCMAP = 0x8020697d
const @"".SIOCSIFBOND = 0x80206946
const @"".SIOCSIFBRDADDR = 0x80206913
const @"".SIOCSIFCAP = 0x8020695a
const @"".SIOCSIFDSTADDR = 0x8020690e
const @"".SIOCSIFFLAGS = 0x80206910
const @"".SIOCSIFGENERIC = 0x80206939
const @"".SIOCSIFKPI = 0x80206986
const @"".SIOCSIFLLADDR = 0x8020693c
const @"".SIOCSIFMAC = 0x80206983
const @"".SIOCSIFMEDIA = 0xc0206937
const @"".SIOCSIFMETRIC = 0x80206918
const @"".SIOCSIFMTU = 0x80206934
const @"".SIOCSIFNETMASK = 0x80206916
const @"".SIOCSIFPHYADDR = 0x8040693e
const @"".SIOCSIFPHYS = 0x80206936
const @"".SIOCSIFVLAN = 0x8020697e
const @"".SIOCSLIFPHYADDR = 0x81186942
const @"".SIOCSLOWAT = 0x80047302
const @"".SIOCSPGRP = 0x80047308
const @"".SOCK_DGRAM = 0x2
const @"".SOCK_MAXADDRLEN = 0xff
const @"".SOCK_RAW = 0x3
const @"".SOCK_RDM = 0x4
const @"".SOCK_SEQPACKET = 0x5
const @"".SOCK_STREAM = 0x1
const @"".SOL_SOCKET = 0xffff
const @"".SOMAXCONN = 0x80
const @"".SO_ACCEPTCONN = 0x2
const @"".SO_BROADCAST = 0x20
const @"".SO_DEBUG = 0x1
const @"".SO_DONTROUTE = 0x10
const @"".SO_DONTTRUNC = 0x2000
const @"".SO_ERROR = 0x1007
const @"".SO_KEEPALIVE = 0x8
const @"".SO_LABEL = 0x1010
const @"".SO_LINGER = 0x80
const @"".SO_LINGER_SEC = 0x1080
const @"".SO_NKE = 0x1021
const @"".SO_NOADDRERR = 0x1023
const @"".SO_NOSIGPIPE = 0x1022
const @"".SO_NOTIFYCONFLICT = 0x1026
const @"".SO_NP_EXTENSIONS = 0x1083
const @"".SO_NREAD = 0x1020
const @"".SO_NWRITE = 0x1024
const @"".SO_OOBINLINE = 0x100
const @"".SO_PEERLABEL = 0x1011
const @"".SO_RANDOMPORT = 0x1082
const @"".SO_RCVBUF = 0x1002
const @"".SO_RCVLOWAT = 0x1004
const @"".SO_RCVTIMEO = 0x1006
const @"".SO_RESTRICTIONS = 0x1081
const @"".SO_RESTRICT_DENYIN = 0x1
const @"".SO_RESTRICT_DENYOUT = 0x2
const @"".SO_RESTRICT_DENYSET = 0x80000000
const @"".SO_REUSEADDR = 0x4
const @"".SO_REUSEPORT = 0x200
const @"".SO_REUSESHAREUID = 0x1025
const @"".SO_SNDBUF = 0x1001
const @"".SO_SNDLOWAT = 0x1003
const @"".SO_SNDTIMEO = 0x1005
const @"".SO_TIMESTAMP = 0x400
const @"".SO_TIMESTAMP_MONOTONIC = 0x800
const @"".SO_TYPE = 0x1008
const @"".SO_UPCALLCLOSEWAIT = 0x1027
const @"".SO_USELOOPBACK = 0x40
const @"".SO_WANTMORE = 0x4000
const @"".SO_WANTOOBFLAG = 0x8000
const @"".SYS_ACCEPT = 0x1e
const @"".SYS_ACCEPT_NOCANCEL = 0x194
const @"".SYS_ACCESS = 0x21
const @"".SYS_ACCESS_EXTENDED = 0x11c
const @"".SYS_ACCT = 0x33
const @"".SYS_ADD_PROFIL = 0xb0
const @"".SYS_ADJTIME = 0x8c
const @"".SYS_AIO_CANCEL = 0x13c
const @"".SYS_AIO_ERROR = 0x13d
const @"".SYS_AIO_FSYNC = 0x139
const @"".SYS_AIO_READ = 0x13e
const @"".SYS_AIO_RETURN = 0x13a
const @"".SYS_AIO_SUSPEND = 0x13b
const @"".SYS_AIO_SUSPEND_NOCANCEL = 0x1a5
const @"".SYS_AIO_WRITE = 0x13f
const @"".SYS_ATGETMSG = 0xcf
const @"".SYS_ATPGETREQ = 0xd3
const @"".SYS_ATPGETRSP = 0xd4
const @"".SYS_ATPSNDREQ = 0xd1
const @"".SYS_ATPSNDRSP = 0xd2
const @"".SYS_ATPUTMSG = 0xd0
const @"".SYS_ATSOCKET = 0xce
const @"".SYS_AUDIT = 0x15e
const @"".SYS_AUDITCTL = 0x167
const @"".SYS_AUDITON = 0x15f
const @"".SYS_AUDIT_SESSION_JOIN = 0x1ad
const @"".SYS_AUDIT_SESSION_PORT = 0x1b0
const @"".SYS_AUDIT_SESSION_SELF = 0x1ac
const @"".SYS_BIND = 0x68
const @"".SYS_BSDTHREAD_CREATE = 0x168
const @"".SYS_BSDTHREAD_REGISTER = 0x16e
const @"".SYS_BSDTHREAD_TERMINATE = 0x169
const @"".SYS_CHDIR = 0xc
const @"".SYS_CHFLAGS = 0x22
const @"".SYS_CHMOD = 0xf
const @"".SYS_CHMOD_EXTENDED = 0x11a
const @"".SYS_CHOWN = 0x10
const @"".SYS_CHROOT = 0x3d
const @"".SYS_CHUD = 0xb9
const @"".SYS_CLOSE = 0x6
const @"".SYS_CLOSE_NOCANCEL = 0x18f
const @"".SYS_CONNECT = 0x62
const @"".SYS_CONNECT_NOCANCEL = 0x199
const @"".SYS_COPYFILE = 0xe3
const @"".SYS_CSOPS = 0xa9
const @"".SYS_DELETE = 0xe2
const @"".SYS_DUP = 0x29
const @"".SYS_DUP2 = 0x5a
const @"".SYS_EXCHANGEDATA = 0xdf
const @"".SYS_EXECVE = 0x3b
const @"".SYS_EXIT = 0x1
const @"".SYS_FCHDIR = 0xd
const @"".SYS_FCHFLAGS = 0x23
const @"".SYS_FCHMOD = 0x7c
const @"".SYS_FCHMOD_EXTENDED = 0x11b
const @"".SYS_FCHOWN = 0x7b
const @"".SYS_FCNTL = 0x5c
const @"".SYS_FCNTL_NOCANCEL = 0x196
const @"".SYS_FDATASYNC = 0xbb
const @"".SYS_FFSCTL = 0xf5
const @"".SYS_FGETATTRLIST = 0xe4
const @"".SYS_FGETXATTR = 0xeb
const @"".SYS_FHOPEN = 0xf8
const @"".SYS_FILEPORT_MAKEFD = 0x1af
const @"".SYS_FILEPORT_MAKEPORT = 0x1ae
const @"".SYS_FLISTXATTR = 0xf1
const @"".SYS_FLOCK = 0x83
const @"".SYS_FORK = 0x2
const @"".SYS_FPATHCONF = 0xc0
const @"".SYS_FREMOVEXATTR = 0xef
const @"".SYS_FSCTL = 0xf2
const @"".SYS_FSETATTRLIST = 0xe5
const @"".SYS_FSETXATTR = 0xed
const @"".SYS_FSGETPATH = 0x1ab
const @"".SYS_FSTAT = 0xbd
const @"".SYS_FSTAT64 = 0x153
const @"".SYS_FSTAT64_EXTENDED = 0x157
const @"".SYS_FSTATFS = 0x9e
const @"".SYS_FSTATFS64 = 0x15a
const @"".SYS_FSTATV = 0xdb
const @"".SYS_FSTAT_EXTENDED = 0x119
const @"".SYS_FSYNC = 0x5f
const @"".SYS_FSYNC_NOCANCEL = 0x198
const @"".SYS_FTRUNCATE = 0xc9
const @"".SYS_FUTIMES = 0x8b
const @"".SYS_GETATTRLIST = 0xdc
const @"".SYS_GETAUDIT = 0x163
const @"".SYS_GETAUDIT_ADDR = 0x165
const @"".SYS_GETAUID = 0x161
const @"".SYS_GETDIRENTRIES = 0xc4
const @"".SYS_GETDIRENTRIES64 = 0x158
const @"".SYS_GETDIRENTRIESATTR = 0xde
const @"".SYS_GETDTABLESIZE = 0x59
const @"".SYS_GETEGID = 0x2b
const @"".SYS_GETEUID = 0x19
const @"".SYS_GETFH = 0xa1
const @"".SYS_GETFSSTAT = 0x12
const @"".SYS_GETFSSTAT64 = 0x15b
const @"".SYS_GETGID = 0x2f
const @"".SYS_GETGROUPS = 0x4f
const @"".SYS_GETHOSTUUID = 0x8e
const @"".SYS_GETITIMER = 0x56
const @"".SYS_GETLCID = 0x18b
const @"".SYS_GETLOGIN = 0x31
const @"".SYS_GETPEERNAME = 0x1f
const @"".SYS_GETPGID = 0x97
const @"".SYS_GETPGRP = 0x51
const @"".SYS_GETPID = 0x14
const @"".SYS_GETPPID = 0x27
const @"".SYS_GETPRIORITY = 0x64
const @"".SYS_GETRLIMIT = 0xc2
const @"".SYS_GETRUSAGE = 0x75
const @"".SYS_GETSGROUPS = 0x120
const @"".SYS_GETSID = 0x136
const @"".SYS_GETSOCKNAME = 0x20
const @"".SYS_GETSOCKOPT = 0x76
const @"".SYS_GETTID = 0x11e
const @"".SYS_GETTIMEOFDAY = 0x74
const @"".SYS_GETUID = 0x18
const @"".SYS_GETWGROUPS = 0x122
const @"".SYS_GETXATTR = 0xea
const @"".SYS_IDENTITYSVC = 0x125
const @"".SYS_INITGROUPS = 0xf3
const @"".SYS_IOCTL = 0x36
const @"".SYS_IOPOLICYSYS = 0x142
const @"".SYS_ISSETUGID = 0x147
const @"".SYS_KDEBUG_TRACE = 0xb4
const @"".SYS_KEVENT = 0x16b
const @"".SYS_KEVENT64 = 0x171
const @"".SYS_KILL = 0x25
const @"".SYS_KQUEUE = 0x16a
const @"".SYS_LCHOWN = 0x16c
const @"".SYS_LINK = 0x9
const @"".SYS_LIO_LISTIO = 0x140
const @"".SYS_LISTEN = 0x6a
const @"".SYS_LISTXATTR = 0xf0
const @"".SYS_LSEEK = 0xc7
const @"".SYS_LSTAT = 0xbe
const @"".SYS_LSTAT64 = 0x154
const @"".SYS_LSTAT64_EXTENDED = 0x156
const @"".SYS_LSTATV = 0xda
const @"".SYS_LSTAT_EXTENDED = 0x118
const @"".SYS_MADVISE = 0x4b
const @"".SYS_MAXSYSCALL = 0x1b7
const @"".SYS_MINCORE = 0x4e
const @"".SYS_MINHERIT = 0xfa
const @"".SYS_MKCOMPLEX = 0xd8
const @"".SYS_MKDIR = 0x88
const @"".SYS_MKDIR_EXTENDED = 0x124
const @"".SYS_MKFIFO = 0x84
const @"".SYS_MKFIFO_EXTENDED = 0x123
const @"".SYS_MKNOD = 0xe
const @"".SYS_MLOCK = 0xcb
const @"".SYS_MLOCKALL = 0x144
const @"".SYS_MMAP = 0xc5
const @"".SYS_MODWATCH = 0xe9
const @"".SYS_MOUNT = 0xa7
const @"".SYS_MPROTECT = 0x4a
const @"".SYS_MSGCTL = 0x102
const @"".SYS_MSGGET = 0x103
const @"".SYS_MSGRCV = 0x105
const @"".SYS_MSGRCV_NOCANCEL = 0x1a3
const @"".SYS_MSGSND = 0x104
const @"".SYS_MSGSND_NOCANCEL = 0x1a2
const @"".SYS_MSGSYS = 0xfc
const @"".SYS_MSYNC = 0x41
const @"".SYS_MSYNC_NOCANCEL = 0x195
const @"".SYS_MUNLOCK = 0xcc
const @"".SYS_MUNLOCKALL = 0x145
const @"".SYS_MUNMAP = 0x49
const @"".SYS_NFSCLNT = 0xf7
const @"".SYS_NFSSVC = 0x9b
const @"".SYS_OPEN = 0x5
const @"".SYS_OPEN_EXTENDED = 0x115
const @"".SYS_OPEN_NOCANCEL = 0x18e
const @"".SYS_PATHCONF = 0xbf
const @"".SYS_PID_HIBERNATE = 0x1b3
const @"".SYS_PID_RESUME = 0x1b2
const @"".SYS_PID_SHUTDOWN_SOCKETS = 0x1b4
const @"".SYS_PID_SUSPEND = 0x1b1
const @"".SYS_PIPE = 0x2a
const @"".SYS_POLL = 0xe6
const @"".SYS_POLL_NOCANCEL = 0x1a1
const @"".SYS_POSIX_SPAWN = 0xf4
const @"".SYS_PREAD = 0x99
const @"".SYS_PREAD_NOCANCEL = 0x19e
const @"".SYS_PROCESS_POLICY = 0x143
const @"".SYS_PROC_INFO = 0x150
const @"".SYS_PROFIL = 0x2c
const @"".SYS_PSYNCH_CVBROAD = 0x12f
const @"".SYS_PSYNCH_CVCLRPREPOST = 0x138
const @"".SYS_PSYNCH_CVSIGNAL = 0x130
const @"".SYS_PSYNCH_CVWAIT = 0x131
const @"".SYS_PSYNCH_MUTEXDROP = 0x12e
const @"".SYS_PSYNCH_MUTEXWAIT = 0x12d
const @"".SYS_PSYNCH_RW_DOWNGRADE = 0x12b
const @"".SYS_PSYNCH_RW_LONGRDLOCK = 0x129
const @"".SYS_PSYNCH_RW_RDLOCK = 0x132
const @"".SYS_PSYNCH_RW_UNLOCK = 0x134
const @"".SYS_PSYNCH_RW_UNLOCK2 = 0x135
const @"".SYS_PSYNCH_RW_UPGRADE = 0x12c
const @"".SYS_PSYNCH_RW_WRLOCK = 0x133
const @"".SYS_PSYNCH_RW_YIELDWRLOCK = 0x12a
const @"".SYS_PTRACE = 0x1a
const @"".SYS_PWRITE = 0x9a
const @"".SYS_PWRITE_NOCANCEL = 0x19f
const @"".SYS_QUOTACTL = 0xa5
const @"".SYS_READ = 0x3
const @"".SYS_READLINK = 0x3a
const @"".SYS_READV = 0x78
const @"".SYS_READV_NOCANCEL = 0x19b
const @"".SYS_READ_NOCANCEL = 0x18c
const @"".SYS_REBOOT = 0x37
const @"".SYS_RECVFROM = 0x1d
const @"".SYS_RECVFROM_NOCANCEL = 0x193
const @"".SYS_RECVMSG = 0x1b
const @"".SYS_RECVMSG_NOCANCEL = 0x191
const @"".SYS_REMOVEXATTR = 0xee
const @"".SYS_RENAME = 0x80
const @"".SYS_REVOKE = 0x38
const @"".SYS_RMDIR = 0x89
const @"".SYS_SEARCHFS = 0xe1
const @"".SYS_SELECT = 0x5d
const @"".SYS_SELECT_NOCANCEL = 0x197
const @"".SYS_SEMCTL = 0xfe
const @"".SYS_SEMGET = 0xff
const @"".SYS_SEMOP = 0x100
const @"".SYS_SEMSYS = 0xfb
const @"".SYS_SEM_CLOSE = 0x10d
const @"".SYS_SEM_DESTROY = 0x114
const @"".SYS_SEM_GETVALUE = 0x112
const @"".SYS_SEM_INIT = 0x113
const @"".SYS_SEM_OPEN = 0x10c
const @"".SYS_SEM_POST = 0x111
const @"".SYS_SEM_TRYWAIT = 0x110
const @"".SYS_SEM_UNLINK = 0x10e
const @"".SYS_SEM_WAIT = 0x10f
const @"".SYS_SEM_WAIT_NOCANCEL = 0x1a4
const @"".SYS_SENDFILE = 0x151
const @"".SYS_SENDMSG = 0x1c
const @"".SYS_SENDMSG_NOCANCEL = 0x192
const @"".SYS_SENDTO = 0x85
const @"".SYS_SENDTO_NOCANCEL = 0x19d
const @"".SYS_SETATTRLIST = 0xdd
const @"".SYS_SETAUDIT = 0x164
const @"".SYS_SETAUDIT_ADDR = 0x166
const @"".SYS_SETAUID = 0x162
const @"".SYS_SETEGID = 0xb6
const @"".SYS_SETEUID = 0xb7
const @"".SYS_SETGID = 0xb5
const @"".SYS_SETGROUPS = 0x50
const @"".SYS_SETITIMER = 0x53
const @"".SYS_SETLCID = 0x18a
const @"".SYS_SETLOGIN = 0x32
const @"".SYS_SETPGID = 0x52
const @"".SYS_SETPRIORITY = 0x60
const @"".SYS_SETPRIVEXEC = 0x98
const @"".SYS_SETREGID = 0x7f
const @"".SYS_SETREUID = 0x7e
const @"".SYS_SETRLIMIT = 0xc3
const @"".SYS_SETSGROUPS = 0x11f
const @"".SYS_SETSID = 0x93
const @"".SYS_SETSOCKOPT = 0x69
const @"".SYS_SETTID = 0x11d
const @"".SYS_SETTID_WITH_PID = 0x137
const @"".SYS_SETTIMEOFDAY = 0x7a
const @"".SYS_SETUID = 0x17
const @"".SYS_SETWGROUPS = 0x121
const @"".SYS_SETXATTR = 0xec
const @"".SYS_SHARED_REGION_CHECK_NP = 0x126
const @"".SYS_SHARED_REGION_MAP_AND_SLIDE_NP = 0x1b6
const @"".SYS_SHMAT = 0x106
const @"".SYS_SHMCTL = 0x107
const @"".SYS_SHMDT = 0x108
const @"".SYS_SHMGET = 0x109
const @"".SYS_SHMSYS = 0xfd
const @"".SYS_SHM_OPEN = 0x10a
const @"".SYS_SHM_UNLINK = 0x10b
const @"".SYS_SHUTDOWN = 0x86
const @"".SYS_SIGACTION = 0x2e
const @"".SYS_SIGALTSTACK = 0x35
const @"".SYS_SIGPENDING = 0x34
const @"".SYS_SIGPROCMASK = 0x30
const @"".SYS_SIGRETURN = 0xb8
const @"".SYS_SIGSUSPEND = 0x6f
const @"".SYS_SIGSUSPEND_NOCANCEL = 0x19a
const @"".SYS_SOCKET = 0x61
const @"".SYS_SOCKETPAIR = 0x87
const @"".SYS_STACK_SNAPSHOT = 0x16d
const @"".SYS_STAT = 0xbc
const @"".SYS_STAT64 = 0x152
const @"".SYS_STAT64_EXTENDED = 0x155
const @"".SYS_STATFS = 0x9d
const @"".SYS_STATFS64 = 0x159
const @"".SYS_STATV = 0xd9
const @"".SYS_STAT_EXTENDED = 0x117
const @"".SYS_SWAPON = 0x55
const @"".SYS_SYMLINK = 0x39
const @"".SYS_SYNC = 0x24
const @"".SYS_SYSCALL = 0x0
const @"".SYS_THREAD_SELFID = 0x174
const @"".SYS_TRUNCATE = 0xc8
const @"".SYS_UMASK = 0x3c
const @"".SYS_UMASK_EXTENDED = 0x116
const @"".SYS_UNDELETE = 0xcd
const @"".SYS_UNLINK = 0xa
const @"".SYS_UNMOUNT = 0x9f
const @"".SYS_UTIMES = 0x8a
const @"".SYS_VFORK = 0x42
const @"".SYS_VM_PRESSURE_MONITOR = 0x128
const @"".SYS_WAIT4 = 0x7
const @"".SYS_WAIT4_NOCANCEL = 0x190
const @"".SYS_WAITEVENT = 0xe8
const @"".SYS_WAITID = 0xad
const @"".SYS_WAITID_NOCANCEL = 0x1a0
const @"".SYS_WATCHEVENT = 0xe7
const @"".SYS_WORKQ_KERNRETURN = 0x170
const @"".SYS_WORKQ_OPEN = 0x16f
const @"".SYS_WRITE = 0x4
const @"".SYS_WRITEV = 0x79
const @"".SYS_WRITEV_NOCANCEL = 0x19c
const @"".SYS_WRITE_NOCANCEL = 0x18d
const @"".SYS___DISABLE_THREADSIGNAL = 0x14b
const @"".SYS___MAC_EXECVE = 0x17c
const @"".SYS___MAC_GETFSSTAT = 0x1aa
const @"".SYS___MAC_GET_FD = 0x184
const @"".SYS___MAC_GET_FILE = 0x17e
const @"".SYS___MAC_GET_LCID = 0x187
const @"".SYS___MAC_GET_LCTX = 0x188
const @"".SYS___MAC_GET_LINK = 0x180
const @"".SYS___MAC_GET_MOUNT = 0x1a9
const @"".SYS___MAC_GET_PID = 0x186
const @"".SYS___MAC_GET_PROC = 0x182
const @"".SYS___MAC_MOUNT = 0x1a8
const @"".SYS___MAC_SET_FD = 0x185
const @"".SYS___MAC_SET_FILE = 0x17f
const @"".SYS___MAC_SET_LCTX = 0x189
const @"".SYS___MAC_SET_LINK = 0x181
const @"".SYS___MAC_SET_PROC = 0x183
const @"".SYS___MAC_SYSCALL = 0x17d
const @"".SYS___OLD_SEMWAIT_SIGNAL = 0x172
const @"".SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL = 0x173
const @"".SYS___PTHREAD_CANCELED = 0x14d
const @"".SYS___PTHREAD_CHDIR = 0x15c
const @"".SYS___PTHREAD_FCHDIR = 0x15d
const @"".SYS___PTHREAD_KILL = 0x148
const @"".SYS___PTHREAD_MARKCANCEL = 0x14c
const @"".SYS___PTHREAD_SIGMASK = 0x149
const @"".SYS___SEMWAIT_SIGNAL = 0x14e
const @"".SYS___SEMWAIT_SIGNAL_NOCANCEL = 0x1a7
const @"".SYS___SIGWAIT = 0x14a
const @"".SYS___SIGWAIT_NOCANCEL = 0x1a6
const @"".SYS___SYSCTL = 0xca
const @"".S_IEXEC = 0x40
const @"".S_IFBLK = 0x6000
const @"".S_IFCHR = 0x2000
const @"".S_IFDIR = 0x4000
const @"".S_IFIFO = 0x1000
const @"".S_IFLNK = 0xa000
const @"".S_IFMT = 0xf000
const @"".S_IFREG = 0x8000
const @"".S_IFSOCK = 0xc000
const @"".S_IFWHT = 0xe000
const @"".S_IREAD = 0x100
const @"".S_IRGRP = 0x20
const @"".S_IROTH = 0x4
const @"".S_IRUSR = 0x100
const @"".S_IRWXG = 0x38
const @"".S_IRWXO = 0x7
const @"".S_IRWXU = 0x1c0
const @"".S_ISGID = 0x400
const @"".S_ISTXT = 0x200
const @"".S_ISUID = 0x800
const @"".S_ISVTX = 0x200
const @"".S_IWGRP = 0x10
const @"".S_IWOTH = 0x2
const @"".S_IWRITE = 0x80
const @"".S_IWUSR = 0x80
const @"".S_IXGRP = 0x8
const @"".S_IXOTH = 0x1
const @"".S_IXUSR = 0x40
func @"".Seek(@"".fd int, @"".offset int64, @"".whence int) (@"".newoffset int64, @"".err error)
func @"".Select(@"".n int, @"".r *@"".FdSet, @"".w *@"".FdSet, @"".e *@"".FdSet, @"".timeout *@"".Timeval) (@"".err error)
func @"".Sendfile(@"".outfd int, @"".infd int, @"".offset *int64, @"".count int) (@"".written int, @"".err error)
func @"".Sendmsg(@"".fd int, @"".p []byte, @"".oob []byte, @"".to @"".Sockaddr, @"".flags int) (@"".err error)
func @"".Sendto(@"".fd int, @"".p []byte, @"".flags int, @"".to @"".Sockaddr) (@"".err error)
func @"".SetBpf(@"".fd int, @"".i []@"".BpfInsn) (? error)
func @"".SetBpfBuflen(@"".fd int, @"".l int) (? int, ? error)
func @"".SetBpfDatalink(@"".fd int, @"".t int) (? int, ? error)
func @"".SetBpfHeadercmpl(@"".fd int, @"".f int) (? error)
func @"".SetBpfImmediate(@"".fd int, @"".m int) (? error)
func @"".SetBpfInterface(@"".fd int, @"".name string) (? error)
func @"".SetBpfPromisc(@"".fd int, @"".m int) (? error)
func @"".SetBpfTimeout(@"".fd int, @"".tv *@"".Timeval) (? error)
func @"".SetKevent(@"".k *@"".Kevent_t, @"".fd int, @"".mode int, @"".flags int) ()
func @"".SetNonblock(@"".fd int, @"".nonblocking bool) (@"".err error)
func @"".Setegid(@"".egid int) (@"".err error)
func @"".Setenv(@"".key string, @"".value string) (? error)
func @"".Seteuid(@"".euid int) (@"".err error)
func @"".Setgid(@"".gid int) (@"".err error)
func @"".Setgroups(@"".gids []int) (@"".err error)
func @"".Setlogin(@"".name string) (@"".err error)
func @"".Setpgid(@"".pid int, @"".pgid int) (@"".err error)
func @"".Setpriority(@"".which int, @"".who int, @"".prio int) (@"".err error)
func @"".Setprivexec(@"".flag int) (@"".err error)
func @"".Setregid(@"".rgid int, @"".egid int) (@"".err error)
func @"".Setreuid(@"".ruid int, @"".euid int) (@"".err error)
func @"".Setrlimit(@"".which int, @"".lim *@"".Rlimit) (@"".err error)
func @"".Setsid() (@"".pid int, @"".err error)
func @"".SetsockoptByte(@"".fd int, @"".level int, @"".opt int, @"".value byte) (@"".err error)
func @"".SetsockoptICMPv6Filter(@"".fd int, @"".level int, @"".opt int, @"".filter *@"".ICMPv6Filter) (? error)
func @"".SetsockoptIPMreq(@"".fd int, @"".level int, @"".opt int, @"".mreq *@"".IPMreq) (@"".err error)
func @"".SetsockoptIPv6Mreq(@"".fd int, @"".level int, @"".opt int, @"".mreq *@"".IPv6Mreq) (@"".err error)
func @"".SetsockoptInet4Addr(@"".fd int, @"".level int, @"".opt int, @"".value [4]byte) (@"".err error)
func @"".SetsockoptInt(@"".fd int, @"".level int, @"".opt int, @"".value int) (@"".err error)
func @"".SetsockoptLinger(@"".fd int, @"".level int, @"".opt int, @"".l *@"".Linger) (@"".err error)
func @"".SetsockoptString(@"".fd int, @"".level int, @"".opt int, @"".s string) (@"".err error)
func @"".SetsockoptTimeval(@"".fd int, @"".level int, @"".opt int, @"".tv *@"".Timeval) (@"".err error)
func @"".Settimeofday(@"".tp *@"".Timeval) (@"".err error)
func @"".Setuid(@"".uid int) (@"".err error)
func @"".Shutdown(@"".s int, @"".how int) (@"".err error)
type @"".Signal int
func (? @"".Signal) @"".Signal() ()
func (? @"".Signal) @"".String() (? string)
func (? *@"".Signal) @"".Signal() ()
func (? *@"".Signal) @"".String() (? string)
const @"".SizeofBpfHdr = 0x14
const @"".SizeofBpfInsn = 0x8
const @"".SizeofBpfProgram = 0x10
const @"".SizeofBpfStat = 0x8
const @"".SizeofBpfVersion = 0x4
const @"".SizeofCmsghdr = 0xc
const @"".SizeofICMPv6Filter = 0x20
const @"".SizeofIPMreq = 0x8
const @"".SizeofIPv6MTUInfo = 0x20
const @"".SizeofIPv6Mreq = 0x14
const @"".SizeofIfData = 0x60
const @"".SizeofIfMsghdr = 0x70
const @"".SizeofIfaMsghdr = 0x14
const @"".SizeofIfmaMsghdr = 0x10
const @"".SizeofIfmaMsghdr2 = 0x14
const @"".SizeofInet4Pktinfo = 0xc
const @"".SizeofInet6Pktinfo = 0x14
const @"".SizeofLinger = 0x8
const @"".SizeofMsghdr = 0x30
const @"".SizeofRtMetrics = 0x38
const @"".SizeofRtMsghdr = 0x5c
const @"".SizeofSockaddrAny = 0x6c
const @"".SizeofSockaddrDatalink = 0x14
const @"".SizeofSockaddrInet4 = 0x10
const @"".SizeofSockaddrInet6 = 0x1c
const @"".SizeofSockaddrUnix = 0x6a
func @"".SlicePtrFromStrings(@"".ss []string) (? []*byte, ? error)
type @"".Sockaddr interface { @"".sockaddr() (@"".ptr uintptr, @"".len @""._Socklen, @"".err error) }
type @"".SockaddrDatalink struct { @"".Len uint8; @"".Family uint8; @"".Index uint16; @"".Type uint8; @"".Nlen uint8; @"".Alen uint8; @"".Slen uint8; @"".Data [12]int8; @"".raw @"".RawSockaddrDatalink }
func (? *@"".SockaddrDatalink) @"".sockaddr() (? uintptr, ? @""._Socklen, ? error)
type @"".SockaddrInet4 struct { @"".Port int; @"".Addr [4]byte; @"".raw @"".RawSockaddrInet4 }
func (? *@"".SockaddrInet4) @"".sockaddr() (? uintptr, ? @""._Socklen, ? error)
type @"".SockaddrInet6 struct { @"".Port int; @"".ZoneId uint32; @"".Addr [16]byte; @"".raw @"".RawSockaddrInet6 }
func (? *@"".SockaddrInet6) @"".sockaddr() (? uintptr, ? @""._Socklen, ? error)
type @"".SockaddrUnix struct { @"".Name string; @"".raw @"".RawSockaddrUnix }
func (? *@"".SockaddrUnix) @"".sockaddr() (? uintptr, ? @""._Socklen, ? error)
func @"".Socket(@"".domain int, @"".typ int, @"".proto int) (@"".fd int, @"".err error)
type @"".SocketControlMessage struct { @"".Header @"".Cmsghdr; @"".Data []byte }
var @"".SocketDisableIPv6 bool
func @"".Socketpair(@"".domain int, @"".typ int, @"".proto int) (@"".fd [2]int, @"".err error)
func @"".StartProcess(@"".argv0 string, @"".argv []string, @"".attr *@"".ProcAttr) (@"".pid int, @"".handle uintptr, @"".err error)
func @"".Stat(@"".path string, @"".stat *@"".Stat_t) (@"".err error)
type @"".Stat_t struct { @"".Dev int32; @"".Mode uint16; @"".Nlink uint16; @"".Ino uint64; @"".Uid uint32; @"".Gid uint32; @"".Rdev int32; @"".Pad_cgo_0 [4]byte; @"".Atimespec @"".Timespec; @"".Mtimespec @"".Timespec; @"".Ctimespec @"".Timespec; @"".Birthtimespec @"".Timespec; @"".Size int64; @"".Blocks int64; @"".Blksize int32; @"".Flags uint32; @"".Gen uint32; @"".Lspare int32; @"".Qspare [2]int64 }
func @"".Statfs(@"".path string, @"".stat *@"".Statfs_t) (@"".err error)
type @"".Statfs_t struct { @"".Bsize uint32; @"".Iosize int32; @"".Blocks uint64; @"".Bfree uint64; @"".Bavail uint64; @"".Files uint64; @"".Ffree uint64; @"".Fsid @"".Fsid; @"".Owner uint32; @"".Type uint32; @"".Flags uint32; @"".Fssubtype uint32; @"".Fstypename [16]int8; @"".Mntonname [1024]int8; @"".Mntfromname [1024]int8; @"".Reserved [8]uint32 }
var @"".Stderr int
var @"".Stdin int
var @"".Stdout int
func @"".StringBytePtr(@"".s string) (? *byte)
func @"".StringByteSlice(@"".s string) (? []byte)
func @"".StringSlicePtr(@"".ss []string) (? []*byte)
func @"".Symlink(@"".path string, @"".link string) (@"".err error)
func @"".Sync() (@"".err error)
type @"".SysProcAttr struct { @"".Chroot string; @"".Credential *@"".Credential; @"".Ptrace bool; @"".Setsid bool; @"".Setpgid bool; @"".Setctty bool; @"".Noctty bool }
func @"".Syscall(@"".trap uintptr, @"".a1 uintptr, @"".a2 uintptr, @"".a3 uintptr) (@"".r1 uintptr, @"".r2 uintptr, @"".err @"".Errno)
func @"".Syscall6(@"".trap uintptr, @"".a1 uintptr, @"".a2 uintptr, @"".a3 uintptr, @"".a4 uintptr, @"".a5 uintptr, @"".a6 uintptr) (@"".r1 uintptr, @"".r2 uintptr, @"".err @"".Errno)
func @"".Syscall9(@"".num uintptr, @"".a1 uintptr, @"".a2 uintptr, @"".a3 uintptr, @"".a4 uintptr, @"".a5 uintptr, @"".a6 uintptr, @"".a7 uintptr, @"".a8 uintptr, @"".a9 uintptr) (@"".r1 uintptr, @"".r2 uintptr, @"".err @"".Errno)
func @"".Sysctl(@"".name string) (@"".value string, @"".err error)
func @"".SysctlUint32(@"".name string) (@"".value uint32, @"".err error)
const @"".TCIFLUSH = 0x1
const @"".TCIOFLUSH = 0x3
const @"".TCOFLUSH = 0x2
const @"".TCP_CONNECTIONTIMEOUT = 0x20
const @"".TCP_KEEPALIVE = 0x10
const @"".TCP_MAXHLEN = 0x3c
const @"".TCP_MAXOLEN = 0x28
const @"".TCP_MAXSEG = 0x2
const @"".TCP_MAXWIN = 0xffff
const @"".TCP_MAX_SACK = 0x3
const @"".TCP_MAX_WINSHIFT = 0xe
const @"".TCP_MINMSS = 0xd8
const @"".TCP_MINMSSOVERLOAD = 0x3e8
const @"".TCP_MSS = 0x200
const @"".TCP_NODELAY = 0x1
const @"".TCP_NOOPT = 0x8
const @"".TCP_NOPUSH = 0x4
const @"".TCP_RXT_CONNDROPTIME = 0x80
const @"".TCP_RXT_FINDROP = 0x100
const @"".TCSAFLUSH = 0x2
const @"".TIOCCBRK = 0x2000747a
const @"".TIOCCDTR = 0x20007478
const @"".TIOCCONS = 0x80047462
const @"".TIOCDCDTIMESTAMP = 0x40107458
const @"".TIOCDRAIN = 0x2000745e
const @"".TIOCDSIMICROCODE = 0x20007455
const @"".TIOCEXCL = 0x2000740d
const @"".TIOCEXT = 0x80047460
const @"".TIOCFLUSH = 0x80047410
const @"".TIOCGDRAINWAIT = 0x40047456
const @"".TIOCGETA = 0x40487413
const @"".TIOCGETD = 0x4004741a
const @"".TIOCGPGRP = 0x40047477
const @"".TIOCGWINSZ = 0x40087468
const @"".TIOCIXOFF = 0x20007480
const @"".TIOCIXON = 0x20007481
const @"".TIOCMBIC = 0x8004746b
const @"".TIOCMBIS = 0x8004746c
const @"".TIOCMGDTRWAIT = 0x4004745a
const @"".TIOCMGET = 0x4004746a
const @"".TIOCMODG = 0x40047403
const @"".TIOCMODS = 0x80047404
const @"".TIOCMSDTRWAIT = 0x8004745b
const @"".TIOCMSET = 0x8004746d
const @"".TIOCM_CAR = 0x40
const @"".TIOCM_CD = 0x40
const @"".TIOCM_CTS = 0x20
const @"".TIOCM_DSR = 0x100
const @"".TIOCM_DTR = 0x2
const @"".TIOCM_LE = 0x1
const @"".TIOCM_RI = 0x80
const @"".TIOCM_RNG = 0x80
const @"".TIOCM_RTS = 0x4
const @"".TIOCM_SR = 0x10
const @"".TIOCM_ST = 0x8
const @"".TIOCNOTTY = 0x20007471
const @"".TIOCNXCL = 0x2000740e
const @"".TIOCOUTQ = 0x40047473
const @"".TIOCPKT = 0x80047470
const @"".TIOCPKT_DATA = 0x0
const @"".TIOCPKT_DOSTOP = 0x20
const @"".TIOCPKT_FLUSHREAD = 0x1
const @"".TIOCPKT_FLUSHWRITE = 0x2
const @"".TIOCPKT_IOCTL = 0x40
const @"".TIOCPKT_NOSTOP = 0x10
const @"".TIOCPKT_START = 0x8
const @"".TIOCPKT_STOP = 0x4
const @"".TIOCPTYGNAME = 0x40807453
const @"".TIOCPTYGRANT = 0x20007454
const @"".TIOCPTYUNLK = 0x20007452
const @"".TIOCREMOTE = 0x80047469
const @"".TIOCSBRK = 0x2000747b
const @"".TIOCSCONS = 0x20007463
const @"".TIOCSCTTY = 0x20007461
const @"".TIOCSDRAINWAIT = 0x80047457
const @"".TIOCSDTR = 0x20007479
const @"".TIOCSETA = 0x80487414
const @"".TIOCSETAF = 0x80487416
const @"".TIOCSETAW = 0x80487415
const @"".TIOCSETD = 0x8004741b
const @"".TIOCSIG = 0x2000745f
const @"".TIOCSPGRP = 0x80047476
const @"".TIOCSTART = 0x2000746e
const @"".TIOCSTAT = 0x20007465
const @"".TIOCSTI = 0x80017472
const @"".TIOCSTOP = 0x2000746f
const @"".TIOCSWINSZ = 0x80087467
const @"".TIOCTIMESTAMP = 0x40107459
const @"".TIOCUCNTL = 0x80047466
const @"".TOSTOP = 0x400000
type @"".Termios struct { @"".Iflag uint64; @"".Oflag uint64; @"".Cflag uint64; @"".Lflag uint64; @"".Cc [20]uint8; @"".Pad_cgo_0 [4]byte; @"".Ispeed uint64; @"".Ospeed uint64 }
type @"".Timespec struct { @"".Sec int64; @"".Nsec int64 }
func (? *@"".Timespec) @"".Nano() (? int64)
func (? *@"".Timespec) @"".Unix() (@"".sec int64, @"".nsec int64)
func @"".TimespecToNsec(@"".ts @"".Timespec) (? int64)
type @"".Timeval struct { @"".Sec int64; @"".Usec int32; @"".Pad_cgo_0 [4]byte }
func (? *@"".Timeval) @"".Nano() (? int64)
func (? *@"".Timeval) @"".Unix() (@"".sec int64, @"".nsec int64)
type @"".Timeval32 struct { @"".Sec int32; @"".Usec int32 }
func @"".TimevalToNsec(@"".tv @"".Timeval) (? int64)
func @"".Truncate(@"".path string, @"".length int64) (@"".err error)
func @"".Umask(@"".newmask int) (@"".oldmask int)
func @"".Undelete(@"".path string) (@"".err error)
func @"".UnixRights(@"".fds ...int) (? []byte)
func @"".Unlink(@"".path string) (@"".err error)
func @"".Unmount(@"".path string, @"".flags int) (@"".err error)
func @"".Utimes(@"".path string, @"".tv []@"".Timeval) (@"".err error)
func @"".UtimesNano(@"".path string, @"".ts []@"".Timespec) (? error)
const @"".VDISCARD = 0xf
const @"".VDSUSP = 0xb
const @"".VEOF = 0x0
const @"".VEOL = 0x1
const @"".VEOL2 = 0x2
const @"".VERASE = 0x3
const @"".VINTR = 0x8
const @"".VKILL = 0x5
const @"".VLNEXT = 0xe
const @"".VMIN = 0x10
const @"".VQUIT = 0x9
const @"".VREPRINT = 0x6
const @"".VSTART = 0xc
const @"".VSTATUS = 0x12
const @"".VSTOP = 0xd
const @"".VSUSP = 0xa
const @"".VT0 = 0x0
const @"".VT1 = 0x10000
const @"".VTDLY = 0x10000
const @"".VTIME = 0x11
const @"".VWERASE = 0x4
const @"".WCONTINUED = 0x10
const @"".WCOREFLAG = 0x80
const @"".WEXITED = 0x4
const @"".WNOHANG = 0x1
const @"".WNOWAIT = 0x20
const @"".WORDSIZE = 0x40
const @"".WSTOPPED = 0x8
const @"".WUNTRACED = 0x2
func @"".Wait4(@"".pid int, @"".wstatus *@"".WaitStatus, @"".options int, @"".rusage *@"".Rusage) (@"".wpid int, @"".err error)
type @"".WaitStatus uint32
func (? @"".WaitStatus) @"".Continued() (? bool)
func (? @"".WaitStatus) @"".CoreDump() (? bool)
func (? @"".WaitStatus) @"".ExitStatus() (? int)
func (? @"".WaitStatus) @"".Exited() (? bool)
func (? @"".WaitStatus) @"".Signal() (? @"".Signal)
func (? @"".WaitStatus) @"".Signaled() (? bool)
func (? @"".WaitStatus) @"".StopSignal() (? @"".Signal)
func (? @"".WaitStatus) @"".Stopped() (? bool)
func (? @"".WaitStatus) @"".TrapCause() (? int)
func (? *@"".WaitStatus) @"".Continued() (? bool)
func (? *@"".WaitStatus) @"".CoreDump() (? bool)
func (? *@"".WaitStatus) @"".ExitStatus() (? int)
func (? *@"".WaitStatus) @"".Exited() (? bool)
func (? *@"".WaitStatus) @"".Signal() (? @"".Signal)
func (? *@"".WaitStatus) @"".Signaled() (? bool)
func (? *@"".WaitStatus) @"".StopSignal() (? @"".Signal)
func (? *@"".WaitStatus) @"".Stopped() (? bool)
func (? *@"".WaitStatus) @"".TrapCause() (? int)
func @"".Write(@"".fd int, @"".p []byte) (@"".n int, @"".err error)
type @""._C_int int32
type @""._C_long int64
type @""._C_long_long int64
type @""._C_short int16
type @""._Gid_t uint32
type @""._Socklen uint32
type @"".anyMessage struct { @"".Msglen uint16; @"".Version uint8; @"".Type uint8 }
func (? *@"".anyMessage) @"".toRoutingMessage(@"".b []byte) (? @"".RoutingMessage)
type @"".attrList struct { @"".bitmapCount uint16; _ uint16; @"".CommonAttr uint32; @"".VolAttr uint32; @"".DirAttr uint32; @"".FileAttr uint32; @"".Forkattr uint32 }
type @"".ivalue struct { @"".name [16]byte; @"".value int16 }
type @"".mmapper struct { ? @"sync".Mutex; @"".active map[*byte][]byte; @"".mmap func (@"".addr uintptr, @"".length uintptr, @"".prot int, @"".flags int, @"".fd int, @"".offset int64) (? uintptr, ? error); @"".munmap func (@"".addr uintptr, @"".length uintptr) (? error) }
func (? *@"".mmapper) @"".Mmap(@"".fd int, @"".offset int64, @"".length int, @"".prot int, @"".flags int) (@"".data []byte, @"".err error)
func (? *@"".mmapper) @"".Munmap(@"".data []byte) (@"".err error)
type @"sync".RWMutex struct { @"sync".w @"sync".Mutex; @"sync".writerSem uint32; @"sync".readerSem uint32; @"sync".readerCount int32; @"sync".readerWait int32 }
func (? *@"sync".RWMutex) @"sync".Lock() ()
func (? *@"sync".RWMutex) @"sync".RLock() ()
func (? *@"sync".RWMutex) @"sync".RLocker() (? @"sync".Locker)
func (? *@"sync".RWMutex) @"sync".RUnlock() ()
func (? *@"sync".RWMutex) @"sync".Unlock() ()
type @"sync".Mutex struct { @"sync".state int32; @"sync".sema uint32 }
func (? *@"sync".Mutex) @"sync".Lock() ()
func (? *@"sync".Mutex) @"sync".Unlock() ()
type @"sync".Locker interface { @"sync".Lock() (); @"sync".Unlock() () }
$$
0-runtimeerrorssync/atomicsyncsyscallƒüj	var sync = go$packages["sync"];
	var runtime = go$packages["runtime"];
	var errors$1 = go$packages["errors"];
	var ivalue;
	ivalue = go$newType(0, "Struct", "syscall.ivalue", "ivalue", "syscall", function(name_, value_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : go$makeNativeArray("Uint8", 16, function() { return 0; });
		this.value = value_ !== undefined ? value_ : 0;
	});
	go$pkg.ivalue = ivalue;
	var SysProcAttr;
	SysProcAttr = go$newType(0, "Struct", "syscall.SysProcAttr", "SysProcAttr", "syscall", function(Chroot_, Credential_, Ptrace_, Setsid_, Setpgid_, Setctty_, Noctty_) {
		this.go$val = this;
		this.Chroot = Chroot_ !== undefined ? Chroot_ : "";
		this.Credential = Credential_ !== undefined ? Credential_ : (go$ptrType(Credential)).nil;
		this.Ptrace = Ptrace_ !== undefined ? Ptrace_ : false;
		this.Setsid = Setsid_ !== undefined ? Setsid_ : false;
		this.Setpgid = Setpgid_ !== undefined ? Setpgid_ : false;
		this.Setctty = Setctty_ !== undefined ? Setctty_ : false;
		this.Noctty = Noctty_ !== undefined ? Noctty_ : false;
	});
	go$pkg.SysProcAttr = SysProcAttr;
	var Credential;
	Credential = go$newType(0, "Struct", "syscall.Credential", "Credential", "syscall", function(Uid_, Gid_, Groups_) {
		this.go$val = this;
		this.Uid = Uid_ !== undefined ? Uid_ : 0;
		this.Gid = Gid_ !== undefined ? Gid_ : 0;
		this.Groups = Groups_ !== undefined ? Groups_ : (go$sliceType(Go$Uint32)).nil;
	});
	go$pkg.Credential = Credential;
	var ProcAttr;
	ProcAttr = go$newType(0, "Struct", "syscall.ProcAttr", "ProcAttr", "syscall", function(Dir_, Env_, Files_, Sys_) {
		this.go$val = this;
		this.Dir = Dir_ !== undefined ? Dir_ : "";
		this.Env = Env_ !== undefined ? Env_ : (go$sliceType(Go$String)).nil;
		this.Files = Files_ !== undefined ? Files_ : (go$sliceType(Go$Uintptr)).nil;
		this.Sys = Sys_ !== undefined ? Sys_ : (go$ptrType(SysProcAttr)).nil;
	});
	go$pkg.ProcAttr = ProcAttr;
	var RoutingMessage;
	RoutingMessage = go$newType(0, "Interface", "syscall.RoutingMessage", "RoutingMessage", "syscall", null);
	go$pkg.RoutingMessage = RoutingMessage;
	var anyMessage;
	anyMessage = go$newType(0, "Struct", "syscall.anyMessage", "anyMessage", "syscall", function(Msglen_, Version_, Type_) {
		this.go$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
	});
	go$pkg.anyMessage = anyMessage;
	var RouteMessage;
	RouteMessage = go$newType(0, "Struct", "syscall.RouteMessage", "RouteMessage", "syscall", function(Header_, Data_) {
		this.go$val = this;
		this.Header = Header_ !== undefined ? Header_ : new RtMsghdr.Ptr();
		this.Data = Data_ !== undefined ? Data_ : (go$sliceType(Go$Uint8)).nil;
	});
	go$pkg.RouteMessage = RouteMessage;
	var InterfaceMessage;
	InterfaceMessage = go$newType(0, "Struct", "syscall.InterfaceMessage", "InterfaceMessage", "syscall", function(Header_, Data_) {
		this.go$val = this;
		this.Header = Header_ !== undefined ? Header_ : new IfMsghdr.Ptr();
		this.Data = Data_ !== undefined ? Data_ : (go$sliceType(Go$Uint8)).nil;
	});
	go$pkg.InterfaceMessage = InterfaceMessage;
	var InterfaceAddrMessage;
	InterfaceAddrMessage = go$newType(0, "Struct", "syscall.InterfaceAddrMessage", "InterfaceAddrMessage", "syscall", function(Header_, Data_) {
		this.go$val = this;
		this.Header = Header_ !== undefined ? Header_ : new IfaMsghdr.Ptr();
		this.Data = Data_ !== undefined ? Data_ : (go$sliceType(Go$Uint8)).nil;
	});
	go$pkg.InterfaceAddrMessage = InterfaceAddrMessage;
	var InterfaceMulticastAddrMessage;
	InterfaceMulticastAddrMessage = go$newType(0, "Struct", "syscall.InterfaceMulticastAddrMessage", "InterfaceMulticastAddrMessage", "syscall", function(Header_, Data_) {
		this.go$val = this;
		this.Header = Header_ !== undefined ? Header_ : new IfmaMsghdr2.Ptr();
		this.Data = Data_ !== undefined ? Data_ : (go$sliceType(Go$Uint8)).nil;
	});
	go$pkg.InterfaceMulticastAddrMessage = InterfaceMulticastAddrMessage;
	var SocketControlMessage;
	SocketControlMessage = go$newType(0, "Struct", "syscall.SocketControlMessage", "SocketControlMessage", "syscall", function(Header_, Data_) {
		this.go$val = this;
		this.Header = Header_ !== undefined ? Header_ : new Cmsghdr.Ptr();
		this.Data = Data_ !== undefined ? Data_ : (go$sliceType(Go$Uint8)).nil;
	});
	go$pkg.SocketControlMessage = SocketControlMessage;
	var WaitStatus;
	WaitStatus = go$newType(4, "Uint32", "syscall.WaitStatus", "WaitStatus", "syscall", null);
	go$pkg.WaitStatus = WaitStatus;
	var SockaddrDatalink;
	SockaddrDatalink = go$newType(0, "Struct", "syscall.SockaddrDatalink", "SockaddrDatalink", "syscall", function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_, raw_) {
		this.go$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Nlen = Nlen_ !== undefined ? Nlen_ : 0;
		this.Alen = Alen_ !== undefined ? Alen_ : 0;
		this.Slen = Slen_ !== undefined ? Slen_ : 0;
		this.Data = Data_ !== undefined ? Data_ : go$makeNativeArray("Int8", 12, function() { return 0; });
		this.raw = raw_ !== undefined ? raw_ : new RawSockaddrDatalink.Ptr();
	});
	go$pkg.SockaddrDatalink = SockaddrDatalink;
	var attrList;
	attrList = go$newType(0, "Struct", "syscall.attrList", "attrList", "syscall", function(bitmapCount_, _$1_, CommonAttr_, VolAttr_, DirAttr_, FileAttr_, Forkattr_) {
		this.go$val = this;
		this.bitmapCount = bitmapCount_ !== undefined ? bitmapCount_ : 0;
		this._$1 = _$1_ !== undefined ? _$1_ : 0;
		this.CommonAttr = CommonAttr_ !== undefined ? CommonAttr_ : 0;
		this.VolAttr = VolAttr_ !== undefined ? VolAttr_ : 0;
		this.DirAttr = DirAttr_ !== undefined ? DirAttr_ : 0;
		this.FileAttr = FileAttr_ !== undefined ? FileAttr_ : 0;
		this.Forkattr = Forkattr_ !== undefined ? Forkattr_ : 0;
	});
	go$pkg.attrList = attrList;
	var mmapper;
	mmapper = go$newType(0, "Struct", "syscall.mmapper", "mmapper", "syscall", function(Mutex_, active_, mmap_, munmap_) {
		this.go$val = this;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new sync.Mutex.Ptr();
		this.active = active_ !== undefined ? active_ : false;
		this.mmap = mmap_ !== undefined ? mmap_ : go$throwNilPointerError;
		this.munmap = munmap_ !== undefined ? munmap_ : go$throwNilPointerError;
	});
	mmapper.prototype.Lock = function() { return this.go$val.Lock(); };
	mmapper.Ptr.prototype.Lock = function() { return this.Mutex.Lock(); };
	mmapper.prototype.Unlock = function() { return this.go$val.Unlock(); };
	mmapper.Ptr.prototype.Unlock = function() { return this.Mutex.Unlock(); };
	go$pkg.mmapper = mmapper;
	var Errno;
	Errno = go$newType(4, "Uintptr", "syscall.Errno", "Errno", "syscall", null);
	go$pkg.Errno = Errno;
	var Signal;
	Signal = go$newType(4, "Int", "syscall.Signal", "Signal", "syscall", null);
	go$pkg.Signal = Signal;
	var Sockaddr;
	Sockaddr = go$newType(0, "Interface", "syscall.Sockaddr", "Sockaddr", "syscall", null);
	go$pkg.Sockaddr = Sockaddr;
	var SockaddrInet4;
	SockaddrInet4 = go$newType(0, "Struct", "syscall.SockaddrInet4", "SockaddrInet4", "syscall", function(Port_, Addr_, raw_) {
		this.go$val = this;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.Addr = Addr_ !== undefined ? Addr_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.raw = raw_ !== undefined ? raw_ : new RawSockaddrInet4.Ptr();
	});
	go$pkg.SockaddrInet4 = SockaddrInet4;
	var SockaddrInet6;
	SockaddrInet6 = go$newType(0, "Struct", "syscall.SockaddrInet6", "SockaddrInet6", "syscall", function(Port_, ZoneId_, Addr_, raw_) {
		this.go$val = this;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.ZoneId = ZoneId_ !== undefined ? ZoneId_ : 0;
		this.Addr = Addr_ !== undefined ? Addr_ : go$makeNativeArray("Uint8", 16, function() { return 0; });
		this.raw = raw_ !== undefined ? raw_ : new RawSockaddrInet6.Ptr();
	});
	go$pkg.SockaddrInet6 = SockaddrInet6;
	var SockaddrUnix;
	SockaddrUnix = go$newType(0, "Struct", "syscall.SockaddrUnix", "SockaddrUnix", "syscall", function(Name_, raw_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.raw = raw_ !== undefined ? raw_ : new RawSockaddrUnix.Ptr();
	});
	go$pkg.SockaddrUnix = SockaddrUnix;
	var _C_short;
	_C_short = go$newType(2, "Int16", "syscall._C_short", "_C_short", "syscall", null);
	go$pkg._C_short = _C_short;
	var _C_int;
	_C_int = go$newType(4, "Int32", "syscall._C_int", "_C_int", "syscall", null);
	go$pkg._C_int = _C_int;
	var _C_long;
	_C_long = go$newType(8, "Int64", "syscall._C_long", "_C_long", "syscall", null);
	go$pkg._C_long = _C_long;
	var _C_long_long;
	_C_long_long = go$newType(8, "Int64", "syscall._C_long_long", "_C_long_long", "syscall", null);
	go$pkg._C_long_long = _C_long_long;
	var Timespec;
	Timespec = go$newType(0, "Struct", "syscall.Timespec", "Timespec", "syscall", function(Sec_, Nsec_) {
		this.go$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : new Go$Int64(0, 0);
		this.Nsec = Nsec_ !== undefined ? Nsec_ : new Go$Int64(0, 0);
	});
	go$pkg.Timespec = Timespec;
	var Timeval;
	Timeval = go$newType(0, "Struct", "syscall.Timeval", "Timeval", "syscall", function(Sec_, Usec_, Pad_cgo_0_) {
		this.go$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : new Go$Int64(0, 0);
		this.Usec = Usec_ !== undefined ? Usec_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
	});
	go$pkg.Timeval = Timeval;
	var Timeval32;
	Timeval32 = go$newType(0, "Struct", "syscall.Timeval32", "Timeval32", "syscall", function(Sec_, Usec_) {
		this.go$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : 0;
		this.Usec = Usec_ !== undefined ? Usec_ : 0;
	});
	go$pkg.Timeval32 = Timeval32;
	var Rusage;
	Rusage = go$newType(0, "Struct", "syscall.Rusage", "Rusage", "syscall", function(Utime_, Stime_, Maxrss_, Ixrss_, Idrss_, Isrss_, Minflt_, Majflt_, Nswap_, Inblock_, Oublock_, Msgsnd_, Msgrcv_, Nsignals_, Nvcsw_, Nivcsw_) {
		this.go$val = this;
		this.Utime = Utime_ !== undefined ? Utime_ : new Timeval.Ptr();
		this.Stime = Stime_ !== undefined ? Stime_ : new Timeval.Ptr();
		this.Maxrss = Maxrss_ !== undefined ? Maxrss_ : new Go$Int64(0, 0);
		this.Ixrss = Ixrss_ !== undefined ? Ixrss_ : new Go$Int64(0, 0);
		this.Idrss = Idrss_ !== undefined ? Idrss_ : new Go$Int64(0, 0);
		this.Isrss = Isrss_ !== undefined ? Isrss_ : new Go$Int64(0, 0);
		this.Minflt = Minflt_ !== undefined ? Minflt_ : new Go$Int64(0, 0);
		this.Majflt = Majflt_ !== undefined ? Majflt_ : new Go$Int64(0, 0);
		this.Nswap = Nswap_ !== undefined ? Nswap_ : new Go$Int64(0, 0);
		this.Inblock = Inblock_ !== undefined ? Inblock_ : new Go$Int64(0, 0);
		this.Oublock = Oublock_ !== undefined ? Oublock_ : new Go$Int64(0, 0);
		this.Msgsnd = Msgsnd_ !== undefined ? Msgsnd_ : new Go$Int64(0, 0);
		this.Msgrcv = Msgrcv_ !== undefined ? Msgrcv_ : new Go$Int64(0, 0);
		this.Nsignals = Nsignals_ !== undefined ? Nsignals_ : new Go$Int64(0, 0);
		this.Nvcsw = Nvcsw_ !== undefined ? Nvcsw_ : new Go$Int64(0, 0);
		this.Nivcsw = Nivcsw_ !== undefined ? Nivcsw_ : new Go$Int64(0, 0);
	});
	go$pkg.Rusage = Rusage;
	var Rlimit;
	Rlimit = go$newType(0, "Struct", "syscall.Rlimit", "Rlimit", "syscall", function(Cur_, Max_) {
		this.go$val = this;
		this.Cur = Cur_ !== undefined ? Cur_ : new Go$Uint64(0, 0);
		this.Max = Max_ !== undefined ? Max_ : new Go$Uint64(0, 0);
	});
	go$pkg.Rlimit = Rlimit;
	var _Gid_t;
	_Gid_t = go$newType(4, "Uint32", "syscall._Gid_t", "_Gid_t", "syscall", null);
	go$pkg._Gid_t = _Gid_t;
	var Stat_t;
	Stat_t = go$newType(0, "Struct", "syscall.Stat_t", "Stat_t", "syscall", function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.go$val = this;
		this.Dev = Dev_ !== undefined ? Dev_ : 0;
		this.Mode = Mode_ !== undefined ? Mode_ : 0;
		this.Nlink = Nlink_ !== undefined ? Nlink_ : 0;
		this.Ino = Ino_ !== undefined ? Ino_ : new Go$Uint64(0, 0);
		this.Uid = Uid_ !== undefined ? Uid_ : 0;
		this.Gid = Gid_ !== undefined ? Gid_ : 0;
		this.Rdev = Rdev_ !== undefined ? Rdev_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.Atimespec = Atimespec_ !== undefined ? Atimespec_ : new Timespec.Ptr();
		this.Mtimespec = Mtimespec_ !== undefined ? Mtimespec_ : new Timespec.Ptr();
		this.Ctimespec = Ctimespec_ !== undefined ? Ctimespec_ : new Timespec.Ptr();
		this.Birthtimespec = Birthtimespec_ !== undefined ? Birthtimespec_ : new Timespec.Ptr();
		this.Size = Size_ !== undefined ? Size_ : new Go$Int64(0, 0);
		this.Blocks = Blocks_ !== undefined ? Blocks_ : new Go$Int64(0, 0);
		this.Blksize = Blksize_ !== undefined ? Blksize_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Gen = Gen_ !== undefined ? Gen_ : 0;
		this.Lspare = Lspare_ !== undefined ? Lspare_ : 0;
		this.Qspare = Qspare_ !== undefined ? Qspare_ : go$makeNativeArray("Int64", 2, function() { return new Go$Int64(0, 0); });
	});
	go$pkg.Stat_t = Stat_t;
	var Statfs_t;
	Statfs_t = go$newType(0, "Struct", "syscall.Statfs_t", "Statfs_t", "syscall", function(Bsize_, Iosize_, Blocks_, Bfree_, Bavail_, Files_, Ffree_, Fsid_, Owner_, Type_, Flags_, Fssubtype_, Fstypename_, Mntonname_, Mntfromname_, Reserved_) {
		this.go$val = this;
		this.Bsize = Bsize_ !== undefined ? Bsize_ : 0;
		this.Iosize = Iosize_ !== undefined ? Iosize_ : 0;
		this.Blocks = Blocks_ !== undefined ? Blocks_ : new Go$Uint64(0, 0);
		this.Bfree = Bfree_ !== undefined ? Bfree_ : new Go$Uint64(0, 0);
		this.Bavail = Bavail_ !== undefined ? Bavail_ : new Go$Uint64(0, 0);
		this.Files = Files_ !== undefined ? Files_ : new Go$Uint64(0, 0);
		this.Ffree = Ffree_ !== undefined ? Ffree_ : new Go$Uint64(0, 0);
		this.Fsid = Fsid_ !== undefined ? Fsid_ : new Fsid.Ptr();
		this.Owner = Owner_ !== undefined ? Owner_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Fssubtype = Fssubtype_ !== undefined ? Fssubtype_ : 0;
		this.Fstypename = Fstypename_ !== undefined ? Fstypename_ : go$makeNativeArray("Int8", 16, function() { return 0; });
		this.Mntonname = Mntonname_ !== undefined ? Mntonname_ : go$makeNativeArray("Int8", 1024, function() { return 0; });
		this.Mntfromname = Mntfromname_ !== undefined ? Mntfromname_ : go$makeNativeArray("Int8", 1024, function() { return 0; });
		this.Reserved = Reserved_ !== undefined ? Reserved_ : go$makeNativeArray("Uint32", 8, function() { return 0; });
	});
	go$pkg.Statfs_t = Statfs_t;
	var Flock_t;
	Flock_t = go$newType(0, "Struct", "syscall.Flock_t", "Flock_t", "syscall", function(Start_, Len_, Pid_, Type_, Whence_) {
		this.go$val = this;
		this.Start = Start_ !== undefined ? Start_ : new Go$Int64(0, 0);
		this.Len = Len_ !== undefined ? Len_ : new Go$Int64(0, 0);
		this.Pid = Pid_ !== undefined ? Pid_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Whence = Whence_ !== undefined ? Whence_ : 0;
	});
	go$pkg.Flock_t = Flock_t;
	var Fstore_t;
	Fstore_t = go$newType(0, "Struct", "syscall.Fstore_t", "Fstore_t", "syscall", function(Flags_, Posmode_, Offset_, Length_, Bytesalloc_) {
		this.go$val = this;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Posmode = Posmode_ !== undefined ? Posmode_ : 0;
		this.Offset = Offset_ !== undefined ? Offset_ : new Go$Int64(0, 0);
		this.Length = Length_ !== undefined ? Length_ : new Go$Int64(0, 0);
		this.Bytesalloc = Bytesalloc_ !== undefined ? Bytesalloc_ : new Go$Int64(0, 0);
	});
	go$pkg.Fstore_t = Fstore_t;
	var Radvisory_t;
	Radvisory_t = go$newType(0, "Struct", "syscall.Radvisory_t", "Radvisory_t", "syscall", function(Offset_, Count_, Pad_cgo_0_) {
		this.go$val = this;
		this.Offset = Offset_ !== undefined ? Offset_ : new Go$Int64(0, 0);
		this.Count = Count_ !== undefined ? Count_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
	});
	go$pkg.Radvisory_t = Radvisory_t;
	var Fbootstraptransfer_t;
	Fbootstraptransfer_t = go$newType(0, "Struct", "syscall.Fbootstraptransfer_t", "Fbootstraptransfer_t", "syscall", function(Offset_, Length_, Buffer_) {
		this.go$val = this;
		this.Offset = Offset_ !== undefined ? Offset_ : new Go$Int64(0, 0);
		this.Length = Length_ !== undefined ? Length_ : new Go$Uint64(0, 0);
		this.Buffer = Buffer_ !== undefined ? Buffer_ : (go$ptrType(Go$Uint8)).nil;
	});
	go$pkg.Fbootstraptransfer_t = Fbootstraptransfer_t;
	var Log2phys_t;
	Log2phys_t = go$newType(0, "Struct", "syscall.Log2phys_t", "Log2phys_t", "syscall", function(Flags_, Contigbytes_, Devoffset_) {
		this.go$val = this;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Contigbytes = Contigbytes_ !== undefined ? Contigbytes_ : new Go$Int64(0, 0);
		this.Devoffset = Devoffset_ !== undefined ? Devoffset_ : new Go$Int64(0, 0);
	});
	go$pkg.Log2phys_t = Log2phys_t;
	var Fsid;
	Fsid = go$newType(0, "Struct", "syscall.Fsid", "Fsid", "syscall", function(Val_) {
		this.go$val = this;
		this.Val = Val_ !== undefined ? Val_ : go$makeNativeArray("Int32", 2, function() { return 0; });
	});
	go$pkg.Fsid = Fsid;
	var Dirent;
	Dirent = go$newType(0, "Struct", "syscall.Dirent", "Dirent", "syscall", function(Ino_, Seekoff_, Reclen_, Namlen_, Type_, Name_, Pad_cgo_0_) {
		this.go$val = this;
		this.Ino = Ino_ !== undefined ? Ino_ : new Go$Uint64(0, 0);
		this.Seekoff = Seekoff_ !== undefined ? Seekoff_ : new Go$Uint64(0, 0);
		this.Reclen = Reclen_ !== undefined ? Reclen_ : 0;
		this.Namlen = Namlen_ !== undefined ? Namlen_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Name = Name_ !== undefined ? Name_ : go$makeNativeArray("Int8", 1024, function() { return 0; });
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 3, function() { return 0; });
	});
	go$pkg.Dirent = Dirent;
	var RawSockaddrInet4;
	RawSockaddrInet4 = go$newType(0, "Struct", "syscall.RawSockaddrInet4", "RawSockaddrInet4", "syscall", function(Len_, Family_, Port_, Addr_, Zero_) {
		this.go$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.Addr = Addr_ !== undefined ? Addr_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.Zero = Zero_ !== undefined ? Zero_ : go$makeNativeArray("Int8", 8, function() { return 0; });
	});
	go$pkg.RawSockaddrInet4 = RawSockaddrInet4;
	var RawSockaddrInet6;
	RawSockaddrInet6 = go$newType(0, "Struct", "syscall.RawSockaddrInet6", "RawSockaddrInet6", "syscall", function(Len_, Family_, Port_, Flowinfo_, Addr_, Scope_id_) {
		this.go$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.Flowinfo = Flowinfo_ !== undefined ? Flowinfo_ : 0;
		this.Addr = Addr_ !== undefined ? Addr_ : go$makeNativeArray("Uint8", 16, function() { return 0; });
		this.Scope_id = Scope_id_ !== undefined ? Scope_id_ : 0;
	});
	go$pkg.RawSockaddrInet6 = RawSockaddrInet6;
	var RawSockaddrUnix;
	RawSockaddrUnix = go$newType(0, "Struct", "syscall.RawSockaddrUnix", "RawSockaddrUnix", "syscall", function(Len_, Family_, Path_) {
		this.go$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Path = Path_ !== undefined ? Path_ : go$makeNativeArray("Int8", 104, function() { return 0; });
	});
	go$pkg.RawSockaddrUnix = RawSockaddrUnix;
	var RawSockaddrDatalink;
	RawSockaddrDatalink = go$newType(0, "Struct", "syscall.RawSockaddrDatalink", "RawSockaddrDatalink", "syscall", function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_) {
		this.go$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Nlen = Nlen_ !== undefined ? Nlen_ : 0;
		this.Alen = Alen_ !== undefined ? Alen_ : 0;
		this.Slen = Slen_ !== undefined ? Slen_ : 0;
		this.Data = Data_ !== undefined ? Data_ : go$makeNativeArray("Int8", 12, function() { return 0; });
	});
	go$pkg.RawSockaddrDatalink = RawSockaddrDatalink;
	var RawSockaddr;
	RawSockaddr = go$newType(0, "Struct", "syscall.RawSockaddr", "RawSockaddr", "syscall", function(Len_, Family_, Data_) {
		this.go$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Data = Data_ !== undefined ? Data_ : go$makeNativeArray("Int8", 14, function() { return 0; });
	});
	go$pkg.RawSockaddr = RawSockaddr;
	var RawSockaddrAny;
	RawSockaddrAny = go$newType(0, "Struct", "syscall.RawSockaddrAny", "RawSockaddrAny", "syscall", function(Addr_, Pad_) {
		this.go$val = this;
		this.Addr = Addr_ !== undefined ? Addr_ : new RawSockaddr.Ptr();
		this.Pad = Pad_ !== undefined ? Pad_ : go$makeNativeArray("Int8", 92, function() { return 0; });
	});
	go$pkg.RawSockaddrAny = RawSockaddrAny;
	var _Socklen;
	_Socklen = go$newType(4, "Uint32", "syscall._Socklen", "_Socklen", "syscall", null);
	go$pkg._Socklen = _Socklen;
	var Linger;
	Linger = go$newType(0, "Struct", "syscall.Linger", "Linger", "syscall", function(Onoff_, Linger_) {
		this.go$val = this;
		this.Onoff = Onoff_ !== undefined ? Onoff_ : 0;
		this.Linger = Linger_ !== undefined ? Linger_ : 0;
	});
	go$pkg.Linger = Linger;
	var Iovec;
	Iovec = go$newType(0, "Struct", "syscall.Iovec", "Iovec", "syscall", function(Base_, Len_) {
		this.go$val = this;
		this.Base = Base_ !== undefined ? Base_ : (go$ptrType(Go$Uint8)).nil;
		this.Len = Len_ !== undefined ? Len_ : new Go$Uint64(0, 0);
	});
	go$pkg.Iovec = Iovec;
	var IPMreq;
	IPMreq = go$newType(0, "Struct", "syscall.IPMreq", "IPMreq", "syscall", function(Multiaddr_, Interface_) {
		this.go$val = this;
		this.Multiaddr = Multiaddr_ !== undefined ? Multiaddr_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.Interface = Interface_ !== undefined ? Interface_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
	});
	go$pkg.IPMreq = IPMreq;
	var IPv6Mreq;
	IPv6Mreq = go$newType(0, "Struct", "syscall.IPv6Mreq", "IPv6Mreq", "syscall", function(Multiaddr_, Interface_) {
		this.go$val = this;
		this.Multiaddr = Multiaddr_ !== undefined ? Multiaddr_ : go$makeNativeArray("Uint8", 16, function() { return 0; });
		this.Interface = Interface_ !== undefined ? Interface_ : 0;
	});
	go$pkg.IPv6Mreq = IPv6Mreq;
	var Msghdr;
	Msghdr = go$newType(0, "Struct", "syscall.Msghdr", "Msghdr", "syscall", function(Name_, Namelen_, Pad_cgo_0_, Iov_, Iovlen_, Pad_cgo_1_, Control_, Controllen_, Flags_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : (go$ptrType(Go$Uint8)).nil;
		this.Namelen = Namelen_ !== undefined ? Namelen_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.Iov = Iov_ !== undefined ? Iov_ : (go$ptrType(Iovec)).nil;
		this.Iovlen = Iovlen_ !== undefined ? Iovlen_ : 0;
		this.Pad_cgo_1 = Pad_cgo_1_ !== undefined ? Pad_cgo_1_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.Control = Control_ !== undefined ? Control_ : (go$ptrType(Go$Uint8)).nil;
		this.Controllen = Controllen_ !== undefined ? Controllen_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
	});
	go$pkg.Msghdr = Msghdr;
	var Cmsghdr;
	Cmsghdr = go$newType(0, "Struct", "syscall.Cmsghdr", "Cmsghdr", "syscall", function(Len_, Level_, Type_) {
		this.go$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Level = Level_ !== undefined ? Level_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
	});
	go$pkg.Cmsghdr = Cmsghdr;
	var Inet4Pktinfo;
	Inet4Pktinfo = go$newType(0, "Struct", "syscall.Inet4Pktinfo", "Inet4Pktinfo", "syscall", function(Ifindex_, Spec_dst_, Addr_) {
		this.go$val = this;
		this.Ifindex = Ifindex_ !== undefined ? Ifindex_ : 0;
		this.Spec_dst = Spec_dst_ !== undefined ? Spec_dst_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.Addr = Addr_ !== undefined ? Addr_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
	});
	go$pkg.Inet4Pktinfo = Inet4Pktinfo;
	var Inet6Pktinfo;
	Inet6Pktinfo = go$newType(0, "Struct", "syscall.Inet6Pktinfo", "Inet6Pktinfo", "syscall", function(Addr_, Ifindex_) {
		this.go$val = this;
		this.Addr = Addr_ !== undefined ? Addr_ : go$makeNativeArray("Uint8", 16, function() { return 0; });
		this.Ifindex = Ifindex_ !== undefined ? Ifindex_ : 0;
	});
	go$pkg.Inet6Pktinfo = Inet6Pktinfo;
	var IPv6MTUInfo;
	IPv6MTUInfo = go$newType(0, "Struct", "syscall.IPv6MTUInfo", "IPv6MTUInfo", "syscall", function(Addr_, Mtu_) {
		this.go$val = this;
		this.Addr = Addr_ !== undefined ? Addr_ : new RawSockaddrInet6.Ptr();
		this.Mtu = Mtu_ !== undefined ? Mtu_ : 0;
	});
	go$pkg.IPv6MTUInfo = IPv6MTUInfo;
	var ICMPv6Filter;
	ICMPv6Filter = go$newType(0, "Struct", "syscall.ICMPv6Filter", "ICMPv6Filter", "syscall", function(Filt_) {
		this.go$val = this;
		this.Filt = Filt_ !== undefined ? Filt_ : go$makeNativeArray("Uint32", 8, function() { return 0; });
	});
	go$pkg.ICMPv6Filter = ICMPv6Filter;
	var Kevent_t;
	Kevent_t = go$newType(0, "Struct", "syscall.Kevent_t", "Kevent_t", "syscall", function(Ident_, Filter_, Flags_, Fflags_, Data_, Udata_) {
		this.go$val = this;
		this.Ident = Ident_ !== undefined ? Ident_ : new Go$Uint64(0, 0);
		this.Filter = Filter_ !== undefined ? Filter_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Fflags = Fflags_ !== undefined ? Fflags_ : 0;
		this.Data = Data_ !== undefined ? Data_ : new Go$Int64(0, 0);
		this.Udata = Udata_ !== undefined ? Udata_ : (go$ptrType(Go$Uint8)).nil;
	});
	go$pkg.Kevent_t = Kevent_t;
	var FdSet;
	FdSet = go$newType(0, "Struct", "syscall.FdSet", "FdSet", "syscall", function(Bits_) {
		this.go$val = this;
		this.Bits = Bits_ !== undefined ? Bits_ : go$makeNativeArray("Int32", 32, function() { return 0; });
	});
	go$pkg.FdSet = FdSet;
	var IfMsghdr;
	IfMsghdr = go$newType(0, "Struct", "syscall.IfMsghdr", "IfMsghdr", "syscall", function(Msglen_, Version_, Type_, Addrs_, Flags_, Index_, Pad_cgo_0_, Data_) {
		this.go$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Addrs = Addrs_ !== undefined ? Addrs_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 2, function() { return 0; });
		this.Data = Data_ !== undefined ? Data_ : new IfData.Ptr();
	});
	go$pkg.IfMsghdr = IfMsghdr;
	var IfData;
	IfData = go$newType(0, "Struct", "syscall.IfData", "IfData", "syscall", function(Type_, Typelen_, Physical_, Addrlen_, Hdrlen_, Recvquota_, Xmitquota_, Unused1_, Mtu_, Metric_, Baudrate_, Ipackets_, Ierrors_, Opackets_, Oerrors_, Collisions_, Ibytes_, Obytes_, Imcasts_, Omcasts_, Iqdrops_, Noproto_, Recvtiming_, Xmittiming_, Lastchange_, Unused2_, Hwassist_, Reserved1_, Reserved2_) {
		this.go$val = this;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Typelen = Typelen_ !== undefined ? Typelen_ : 0;
		this.Physical = Physical_ !== undefined ? Physical_ : 0;
		this.Addrlen = Addrlen_ !== undefined ? Addrlen_ : 0;
		this.Hdrlen = Hdrlen_ !== undefined ? Hdrlen_ : 0;
		this.Recvquota = Recvquota_ !== undefined ? Recvquota_ : 0;
		this.Xmitquota = Xmitquota_ !== undefined ? Xmitquota_ : 0;
		this.Unused1 = Unused1_ !== undefined ? Unused1_ : 0;
		this.Mtu = Mtu_ !== undefined ? Mtu_ : 0;
		this.Metric = Metric_ !== undefined ? Metric_ : 0;
		this.Baudrate = Baudrate_ !== undefined ? Baudrate_ : 0;
		this.Ipackets = Ipackets_ !== undefined ? Ipackets_ : 0;
		this.Ierrors = Ierrors_ !== undefined ? Ierrors_ : 0;
		this.Opackets = Opackets_ !== undefined ? Opackets_ : 0;
		this.Oerrors = Oerrors_ !== undefined ? Oerrors_ : 0;
		this.Collisions = Collisions_ !== undefined ? Collisions_ : 0;
		this.Ibytes = Ibytes_ !== undefined ? Ibytes_ : 0;
		this.Obytes = Obytes_ !== undefined ? Obytes_ : 0;
		this.Imcasts = Imcasts_ !== undefined ? Imcasts_ : 0;
		this.Omcasts = Omcasts_ !== undefined ? Omcasts_ : 0;
		this.Iqdrops = Iqdrops_ !== undefined ? Iqdrops_ : 0;
		this.Noproto = Noproto_ !== undefined ? Noproto_ : 0;
		this.Recvtiming = Recvtiming_ !== undefined ? Recvtiming_ : 0;
		this.Xmittiming = Xmittiming_ !== undefined ? Xmittiming_ : 0;
		this.Lastchange = Lastchange_ !== undefined ? Lastchange_ : new Timeval32.Ptr();
		this.Unused2 = Unused2_ !== undefined ? Unused2_ : 0;
		this.Hwassist = Hwassist_ !== undefined ? Hwassist_ : 0;
		this.Reserved1 = Reserved1_ !== undefined ? Reserved1_ : 0;
		this.Reserved2 = Reserved2_ !== undefined ? Reserved2_ : 0;
	});
	go$pkg.IfData = IfData;
	var IfaMsghdr;
	IfaMsghdr = go$newType(0, "Struct", "syscall.IfaMsghdr", "IfaMsghdr", "syscall", function(Msglen_, Version_, Type_, Addrs_, Flags_, Index_, Pad_cgo_0_, Metric_) {
		this.go$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Addrs = Addrs_ !== undefined ? Addrs_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 2, function() { return 0; });
		this.Metric = Metric_ !== undefined ? Metric_ : 0;
	});
	go$pkg.IfaMsghdr = IfaMsghdr;
	var IfmaMsghdr;
	IfmaMsghdr = go$newType(0, "Struct", "syscall.IfmaMsghdr", "IfmaMsghdr", "syscall", function(Msglen_, Version_, Type_, Addrs_, Flags_, Index_, Pad_cgo_0_) {
		this.go$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Addrs = Addrs_ !== undefined ? Addrs_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 2, function() { return 0; });
	});
	go$pkg.IfmaMsghdr = IfmaMsghdr;
	var IfmaMsghdr2;
	IfmaMsghdr2 = go$newType(0, "Struct", "syscall.IfmaMsghdr2", "IfmaMsghdr2", "syscall", function(Msglen_, Version_, Type_, Addrs_, Flags_, Index_, Pad_cgo_0_, Refcount_) {
		this.go$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Addrs = Addrs_ !== undefined ? Addrs_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 2, function() { return 0; });
		this.Refcount = Refcount_ !== undefined ? Refcount_ : 0;
	});
	go$pkg.IfmaMsghdr2 = IfmaMsghdr2;
	var RtMsghdr;
	RtMsghdr = go$newType(0, "Struct", "syscall.RtMsghdr", "RtMsghdr", "syscall", function(Msglen_, Version_, Type_, Index_, Pad_cgo_0_, Flags_, Addrs_, Pid_, Seq_, Errno_, Use_, Inits_, Rmx_) {
		this.go$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 2, function() { return 0; });
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Addrs = Addrs_ !== undefined ? Addrs_ : 0;
		this.Pid = Pid_ !== undefined ? Pid_ : 0;
		this.Seq = Seq_ !== undefined ? Seq_ : 0;
		this.Errno = Errno_ !== undefined ? Errno_ : 0;
		this.Use = Use_ !== undefined ? Use_ : 0;
		this.Inits = Inits_ !== undefined ? Inits_ : 0;
		this.Rmx = Rmx_ !== undefined ? Rmx_ : new RtMetrics.Ptr();
	});
	go$pkg.RtMsghdr = RtMsghdr;
	var RtMetrics;
	RtMetrics = go$newType(0, "Struct", "syscall.RtMetrics", "RtMetrics", "syscall", function(Locks_, Mtu_, Hopcount_, Expire_, Recvpipe_, Sendpipe_, Ssthresh_, Rtt_, Rttvar_, Pksent_, Filler_) {
		this.go$val = this;
		this.Locks = Locks_ !== undefined ? Locks_ : 0;
		this.Mtu = Mtu_ !== undefined ? Mtu_ : 0;
		this.Hopcount = Hopcount_ !== undefined ? Hopcount_ : 0;
		this.Expire = Expire_ !== undefined ? Expire_ : 0;
		this.Recvpipe = Recvpipe_ !== undefined ? Recvpipe_ : 0;
		this.Sendpipe = Sendpipe_ !== undefined ? Sendpipe_ : 0;
		this.Ssthresh = Ssthresh_ !== undefined ? Ssthresh_ : 0;
		this.Rtt = Rtt_ !== undefined ? Rtt_ : 0;
		this.Rttvar = Rttvar_ !== undefined ? Rttvar_ : 0;
		this.Pksent = Pksent_ !== undefined ? Pksent_ : 0;
		this.Filler = Filler_ !== undefined ? Filler_ : go$makeNativeArray("Uint32", 4, function() { return 0; });
	});
	go$pkg.RtMetrics = RtMetrics;
	var BpfVersion;
	BpfVersion = go$newType(0, "Struct", "syscall.BpfVersion", "BpfVersion", "syscall", function(Major_, Minor_) {
		this.go$val = this;
		this.Major = Major_ !== undefined ? Major_ : 0;
		this.Minor = Minor_ !== undefined ? Minor_ : 0;
	});
	go$pkg.BpfVersion = BpfVersion;
	var BpfStat;
	BpfStat = go$newType(0, "Struct", "syscall.BpfStat", "BpfStat", "syscall", function(Recv_, Drop_) {
		this.go$val = this;
		this.Recv = Recv_ !== undefined ? Recv_ : 0;
		this.Drop = Drop_ !== undefined ? Drop_ : 0;
	});
	go$pkg.BpfStat = BpfStat;
	var BpfProgram;
	BpfProgram = go$newType(0, "Struct", "syscall.BpfProgram", "BpfProgram", "syscall", function(Len_, Pad_cgo_0_, Insns_) {
		this.go$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.Insns = Insns_ !== undefined ? Insns_ : (go$ptrType(BpfInsn)).nil;
	});
	go$pkg.BpfProgram = BpfProgram;
	var BpfInsn;
	BpfInsn = go$newType(0, "Struct", "syscall.BpfInsn", "BpfInsn", "syscall", function(Code_, Jt_, Jf_, K_) {
		this.go$val = this;
		this.Code = Code_ !== undefined ? Code_ : 0;
		this.Jt = Jt_ !== undefined ? Jt_ : 0;
		this.Jf = Jf_ !== undefined ? Jf_ : 0;
		this.K = K_ !== undefined ? K_ : 0;
	});
	go$pkg.BpfInsn = BpfInsn;
	var BpfHdr;
	BpfHdr = go$newType(0, "Struct", "syscall.BpfHdr", "BpfHdr", "syscall", function(Tstamp_, Caplen_, Datalen_, Hdrlen_, Pad_cgo_0_) {
		this.go$val = this;
		this.Tstamp = Tstamp_ !== undefined ? Tstamp_ : new Timeval32.Ptr();
		this.Caplen = Caplen_ !== undefined ? Caplen_ : 0;
		this.Datalen = Datalen_ !== undefined ? Datalen_ : 0;
		this.Hdrlen = Hdrlen_ !== undefined ? Hdrlen_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 2, function() { return 0; });
	});
	go$pkg.BpfHdr = BpfHdr;
	var Termios;
	Termios = go$newType(0, "Struct", "syscall.Termios", "Termios", "syscall", function(Iflag_, Oflag_, Cflag_, Lflag_, Cc_, Pad_cgo_0_, Ispeed_, Ospeed_) {
		this.go$val = this;
		this.Iflag = Iflag_ !== undefined ? Iflag_ : new Go$Uint64(0, 0);
		this.Oflag = Oflag_ !== undefined ? Oflag_ : new Go$Uint64(0, 0);
		this.Cflag = Cflag_ !== undefined ? Cflag_ : new Go$Uint64(0, 0);
		this.Lflag = Lflag_ !== undefined ? Lflag_ : new Go$Uint64(0, 0);
		this.Cc = Cc_ !== undefined ? Cc_ : go$makeNativeArray("Uint8", 20, function() { return 0; });
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.Ispeed = Ispeed_ !== undefined ? Ispeed_ : new Go$Uint64(0, 0);
		this.Ospeed = Ospeed_ !== undefined ? Ospeed_ : new Go$Uint64(0, 0);
	});
	go$pkg.Termios = Termios;
	ivalue.init([["name", "syscall", (go$arrayType(Go$Uint8, 16)), ""], ["value", "syscall", Go$Int16, ""]]);
	SysProcAttr.init([["Chroot", "", Go$String, ""], ["Credential", "", (go$ptrType(Credential)), ""], ["Ptrace", "", Go$Bool, ""], ["Setsid", "", Go$Bool, ""], ["Setpgid", "", Go$Bool, ""], ["Setctty", "", Go$Bool, ""], ["Noctty", "", Go$Bool, ""]]);
	Credential.init([["Uid", "", Go$Uint32, ""], ["Gid", "", Go$Uint32, ""], ["Groups", "", (go$sliceType(Go$Uint32)), ""]]);
	ProcAttr.init([["Dir", "", Go$String, ""], ["Env", "", (go$sliceType(Go$String)), ""], ["Files", "", (go$sliceType(Go$Uintptr)), ""], ["Sys", "", (go$ptrType(SysProcAttr)), ""]]);
	RoutingMessage.init([["sockaddr", "syscall", (go$funcType([], [(go$sliceType(Sockaddr))], false))]]);
	anyMessage.init([["Msglen", "", Go$Uint16, ""], ["Version", "", Go$Uint8, ""], ["Type", "", Go$Uint8, ""]]);
	(go$ptrType(anyMessage)).methods = [["toRoutingMessage", "syscall", [(go$sliceType(Go$Uint8))], [RoutingMessage], false]];
	RouteMessage.init([["Header", "", RtMsghdr, ""], ["Data", "", (go$sliceType(Go$Uint8)), ""]]);
	(go$ptrType(RouteMessage)).methods = [["sockaddr", "syscall", [], [(go$sliceType(Sockaddr))], false]];
	InterfaceMessage.init([["Header", "", IfMsghdr, ""], ["Data", "", (go$sliceType(Go$Uint8)), ""]]);
	(go$ptrType(InterfaceMessage)).methods = [["sockaddr", "syscall", [], [(go$sliceType(Sockaddr))], false]];
	InterfaceAddrMessage.init([["Header", "", IfaMsghdr, ""], ["Data", "", (go$sliceType(Go$Uint8)), ""]]);
	(go$ptrType(InterfaceAddrMessage)).methods = [["sockaddr", "syscall", [], [(go$sliceType(Sockaddr))], false]];
	InterfaceMulticastAddrMessage.init([["Header", "", IfmaMsghdr2, ""], ["Data", "", (go$sliceType(Go$Uint8)), ""]]);
	(go$ptrType(InterfaceMulticastAddrMessage)).methods = [["sockaddr", "syscall", [], [(go$sliceType(Sockaddr))], false]];
	SocketControlMessage.init([["Header", "", Cmsghdr, ""], ["Data", "", (go$sliceType(Go$Uint8)), ""]]);
	WaitStatus.methods = [["Continued", "", [], [Go$Bool], false], ["CoreDump", "", [], [Go$Bool], false], ["ExitStatus", "", [], [Go$Int], false], ["Exited", "", [], [Go$Bool], false], ["Signal", "", [], [Signal], false], ["Signaled", "", [], [Go$Bool], false], ["StopSignal", "", [], [Signal], false], ["Stopped", "", [], [Go$Bool], false], ["TrapCause", "", [], [Go$Int], false]];
	(go$ptrType(WaitStatus)).methods = [["Continued", "", [], [Go$Bool], false], ["CoreDump", "", [], [Go$Bool], false], ["ExitStatus", "", [], [Go$Int], false], ["Exited", "", [], [Go$Bool], false], ["Signal", "", [], [Signal], false], ["Signaled", "", [], [Go$Bool], false], ["StopSignal", "", [], [Signal], false], ["Stopped", "", [], [Go$Bool], false], ["TrapCause", "", [], [Go$Int], false]];
	SockaddrDatalink.init([["Len", "", Go$Uint8, ""], ["Family", "", Go$Uint8, ""], ["Index", "", Go$Uint16, ""], ["Type", "", Go$Uint8, ""], ["Nlen", "", Go$Uint8, ""], ["Alen", "", Go$Uint8, ""], ["Slen", "", Go$Uint8, ""], ["Data", "", (go$arrayType(Go$Int8, 12)), ""], ["raw", "syscall", RawSockaddrDatalink, ""]]);
	(go$ptrType(SockaddrDatalink)).methods = [["sockaddr", "syscall", [], [Go$Uintptr, _Socklen, go$error], false]];
	attrList.init([["bitmapCount", "syscall", Go$Uint16, ""], ["_", "syscall", Go$Uint16, ""], ["CommonAttr", "", Go$Uint32, ""], ["VolAttr", "", Go$Uint32, ""], ["DirAttr", "", Go$Uint32, ""], ["FileAttr", "", Go$Uint32, ""], ["Forkattr", "", Go$Uint32, ""]]);
	mmapper.init([["", "", sync.Mutex, ""], ["active", "syscall", (go$mapType((go$ptrType(Go$Uint8)), (go$sliceType(Go$Uint8)))), ""], ["mmap", "syscall", (go$funcType([Go$Uintptr, Go$Uintptr, Go$Int, Go$Int, Go$Int, Go$Int64], [Go$Uintptr, go$error], false)), ""], ["munmap", "syscall", (go$funcType([Go$Uintptr, Go$Uintptr], [go$error], false)), ""]]);
	(go$ptrType(mmapper)).methods = [["Lock", "", [], [], false], ["Mmap", "", [Go$Int, Go$Int64, Go$Int, Go$Int, Go$Int], [(go$sliceType(Go$Uint8)), go$error], false], ["Munmap", "", [(go$sliceType(Go$Uint8))], [go$error], false], ["Unlock", "", [], [], false]];
	Errno.methods = [["Error", "", [], [Go$String], false], ["Temporary", "", [], [Go$Bool], false], ["Timeout", "", [], [Go$Bool], false]];
	(go$ptrType(Errno)).methods = [["Error", "", [], [Go$String], false], ["Temporary", "", [], [Go$Bool], false], ["Timeout", "", [], [Go$Bool], false]];
	Signal.methods = [["Signal", "", [], [], false], ["String", "", [], [Go$String], false]];
	(go$ptrType(Signal)).methods = [["Signal", "", [], [], false], ["String", "", [], [Go$String], false]];
	Sockaddr.init([["sockaddr", "syscall", (go$funcType([], [Go$Uintptr, _Socklen, go$error], false))]]);
	SockaddrInet4.init([["Port", "", Go$Int, ""], ["Addr", "", (go$arrayType(Go$Uint8, 4)), ""], ["raw", "syscall", RawSockaddrInet4, ""]]);
	(go$ptrType(SockaddrInet4)).methods = [["sockaddr", "syscall", [], [Go$Uintptr, _Socklen, go$error], false]];
	SockaddrInet6.init([["Port", "", Go$Int, ""], ["ZoneId", "", Go$Uint32, ""], ["Addr", "", (go$arrayType(Go$Uint8, 16)), ""], ["raw", "syscall", RawSockaddrInet6, ""]]);
	(go$ptrType(SockaddrInet6)).methods = [["sockaddr", "syscall", [], [Go$Uintptr, _Socklen, go$error], false]];
	SockaddrUnix.init([["Name", "", Go$String, ""], ["raw", "syscall", RawSockaddrUnix, ""]]);
	(go$ptrType(SockaddrUnix)).methods = [["sockaddr", "syscall", [], [Go$Uintptr, _Socklen, go$error], false]];
	Timespec.init([["Sec", "", Go$Int64, ""], ["Nsec", "", Go$Int64, ""]]);
	(go$ptrType(Timespec)).methods = [["Nano", "", [], [Go$Int64], false], ["Unix", "", [], [Go$Int64, Go$Int64], false]];
	Timeval.init([["Sec", "", Go$Int64, ""], ["Usec", "", Go$Int32, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 4)), ""]]);
	(go$ptrType(Timeval)).methods = [["Nano", "", [], [Go$Int64], false], ["Unix", "", [], [Go$Int64, Go$Int64], false]];
	Timeval32.init([["Sec", "", Go$Int32, ""], ["Usec", "", Go$Int32, ""]]);
	Rusage.init([["Utime", "", Timeval, ""], ["Stime", "", Timeval, ""], ["Maxrss", "", Go$Int64, ""], ["Ixrss", "", Go$Int64, ""], ["Idrss", "", Go$Int64, ""], ["Isrss", "", Go$Int64, ""], ["Minflt", "", Go$Int64, ""], ["Majflt", "", Go$Int64, ""], ["Nswap", "", Go$Int64, ""], ["Inblock", "", Go$Int64, ""], ["Oublock", "", Go$Int64, ""], ["Msgsnd", "", Go$Int64, ""], ["Msgrcv", "", Go$Int64, ""], ["Nsignals", "", Go$Int64, ""], ["Nvcsw", "", Go$Int64, ""], ["Nivcsw", "", Go$Int64, ""]]);
	Rlimit.init([["Cur", "", Go$Uint64, ""], ["Max", "", Go$Uint64, ""]]);
	Stat_t.init([["Dev", "", Go$Int32, ""], ["Mode", "", Go$Uint16, ""], ["Nlink", "", Go$Uint16, ""], ["Ino", "", Go$Uint64, ""], ["Uid", "", Go$Uint32, ""], ["Gid", "", Go$Uint32, ""], ["Rdev", "", Go$Int32, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 4)), ""], ["Atimespec", "", Timespec, ""], ["Mtimespec", "", Timespec, ""], ["Ctimespec", "", Timespec, ""], ["Birthtimespec", "", Timespec, ""], ["Size", "", Go$Int64, ""], ["Blocks", "", Go$Int64, ""], ["Blksize", "", Go$Int32, ""], ["Flags", "", Go$Uint32, ""], ["Gen", "", Go$Uint32, ""], ["Lspare", "", Go$Int32, ""], ["Qspare", "", (go$arrayType(Go$Int64, 2)), ""]]);
	Statfs_t.init([["Bsize", "", Go$Uint32, ""], ["Iosize", "", Go$Int32, ""], ["Blocks", "", Go$Uint64, ""], ["Bfree", "", Go$Uint64, ""], ["Bavail", "", Go$Uint64, ""], ["Files", "", Go$Uint64, ""], ["Ffree", "", Go$Uint64, ""], ["Fsid", "", Fsid, ""], ["Owner", "", Go$Uint32, ""], ["Type", "", Go$Uint32, ""], ["Flags", "", Go$Uint32, ""], ["Fssubtype", "", Go$Uint32, ""], ["Fstypename", "", (go$arrayType(Go$Int8, 16)), ""], ["Mntonname", "", (go$arrayType(Go$Int8, 1024)), ""], ["Mntfromname", "", (go$arrayType(Go$Int8, 1024)), ""], ["Reserved", "", (go$arrayType(Go$Uint32, 8)), ""]]);
	Flock_t.init([["Start", "", Go$Int64, ""], ["Len", "", Go$Int64, ""], ["Pid", "", Go$Int32, ""], ["Type", "", Go$Int16, ""], ["Whence", "", Go$Int16, ""]]);
	Fstore_t.init([["Flags", "", Go$Uint32, ""], ["Posmode", "", Go$Int32, ""], ["Offset", "", Go$Int64, ""], ["Length", "", Go$Int64, ""], ["Bytesalloc", "", Go$Int64, ""]]);
	Radvisory_t.init([["Offset", "", Go$Int64, ""], ["Count", "", Go$Int32, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 4)), ""]]);
	Fbootstraptransfer_t.init([["Offset", "", Go$Int64, ""], ["Length", "", Go$Uint64, ""], ["Buffer", "", (go$ptrType(Go$Uint8)), ""]]);
	Log2phys_t.init([["Flags", "", Go$Uint32, ""], ["Contigbytes", "", Go$Int64, ""], ["Devoffset", "", Go$Int64, ""]]);
	Fsid.init([["Val", "", (go$arrayType(Go$Int32, 2)), ""]]);
	Dirent.init([["Ino", "", Go$Uint64, ""], ["Seekoff", "", Go$Uint64, ""], ["Reclen", "", Go$Uint16, ""], ["Namlen", "", Go$Uint16, ""], ["Type", "", Go$Uint8, ""], ["Name", "", (go$arrayType(Go$Int8, 1024)), ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 3)), ""]]);
	RawSockaddrInet4.init([["Len", "", Go$Uint8, ""], ["Family", "", Go$Uint8, ""], ["Port", "", Go$Uint16, ""], ["Addr", "", (go$arrayType(Go$Uint8, 4)), ""], ["Zero", "", (go$arrayType(Go$Int8, 8)), ""]]);
	RawSockaddrInet6.init([["Len", "", Go$Uint8, ""], ["Family", "", Go$Uint8, ""], ["Port", "", Go$Uint16, ""], ["Flowinfo", "", Go$Uint32, ""], ["Addr", "", (go$arrayType(Go$Uint8, 16)), ""], ["Scope_id", "", Go$Uint32, ""]]);
	RawSockaddrUnix.init([["Len", "", Go$Uint8, ""], ["Family", "", Go$Uint8, ""], ["Path", "", (go$arrayType(Go$Int8, 104)), ""]]);
	RawSockaddrDatalink.init([["Len", "", Go$Uint8, ""], ["Family", "", Go$Uint8, ""], ["Index", "", Go$Uint16, ""], ["Type", "", Go$Uint8, ""], ["Nlen", "", Go$Uint8, ""], ["Alen", "", Go$Uint8, ""], ["Slen", "", Go$Uint8, ""], ["Data", "", (go$arrayType(Go$Int8, 12)), ""]]);
	RawSockaddr.init([["Len", "", Go$Uint8, ""], ["Family", "", Go$Uint8, ""], ["Data", "", (go$arrayType(Go$Int8, 14)), ""]]);
	RawSockaddrAny.init([["Addr", "", RawSockaddr, ""], ["Pad", "", (go$arrayType(Go$Int8, 92)), ""]]);
	Linger.init([["Onoff", "", Go$Int32, ""], ["Linger", "", Go$Int32, ""]]);
	Iovec.init([["Base", "", (go$ptrType(Go$Uint8)), ""], ["Len", "", Go$Uint64, ""]]);
	(go$ptrType(Iovec)).methods = [["SetLen", "", [Go$Int], [], false]];
	IPMreq.init([["Multiaddr", "", (go$arrayType(Go$Uint8, 4)), ""], ["Interface", "", (go$arrayType(Go$Uint8, 4)), ""]]);
	IPv6Mreq.init([["Multiaddr", "", (go$arrayType(Go$Uint8, 16)), ""], ["Interface", "", Go$Uint32, ""]]);
	Msghdr.init([["Name", "", (go$ptrType(Go$Uint8)), ""], ["Namelen", "", Go$Uint32, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 4)), ""], ["Iov", "", (go$ptrType(Iovec)), ""], ["Iovlen", "", Go$Int32, ""], ["Pad_cgo_1", "", (go$arrayType(Go$Uint8, 4)), ""], ["Control", "", (go$ptrType(Go$Uint8)), ""], ["Controllen", "", Go$Uint32, ""], ["Flags", "", Go$Int32, ""]]);
	(go$ptrType(Msghdr)).methods = [["SetControllen", "", [Go$Int], [], false]];
	Cmsghdr.init([["Len", "", Go$Uint32, ""], ["Level", "", Go$Int32, ""], ["Type", "", Go$Int32, ""]]);
	(go$ptrType(Cmsghdr)).methods = [["SetLen", "", [Go$Int], [], false]];
	Inet4Pktinfo.init([["Ifindex", "", Go$Uint32, ""], ["Spec_dst", "", (go$arrayType(Go$Uint8, 4)), ""], ["Addr", "", (go$arrayType(Go$Uint8, 4)), ""]]);
	Inet6Pktinfo.init([["Addr", "", (go$arrayType(Go$Uint8, 16)), ""], ["Ifindex", "", Go$Uint32, ""]]);
	IPv6MTUInfo.init([["Addr", "", RawSockaddrInet6, ""], ["Mtu", "", Go$Uint32, ""]]);
	ICMPv6Filter.init([["Filt", "", (go$arrayType(Go$Uint32, 8)), ""]]);
	Kevent_t.init([["Ident", "", Go$Uint64, ""], ["Filter", "", Go$Int16, ""], ["Flags", "", Go$Uint16, ""], ["Fflags", "", Go$Uint32, ""], ["Data", "", Go$Int64, ""], ["Udata", "", (go$ptrType(Go$Uint8)), ""]]);
	FdSet.init([["Bits", "", (go$arrayType(Go$Int32, 32)), ""]]);
	IfMsghdr.init([["Msglen", "", Go$Uint16, ""], ["Version", "", Go$Uint8, ""], ["Type", "", Go$Uint8, ""], ["Addrs", "", Go$Int32, ""], ["Flags", "", Go$Int32, ""], ["Index", "", Go$Uint16, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 2)), ""], ["Data", "", IfData, ""]]);
	IfData.init([["Type", "", Go$Uint8, ""], ["Typelen", "", Go$Uint8, ""], ["Physical", "", Go$Uint8, ""], ["Addrlen", "", Go$Uint8, ""], ["Hdrlen", "", Go$Uint8, ""], ["Recvquota", "", Go$Uint8, ""], ["Xmitquota", "", Go$Uint8, ""], ["Unused1", "", Go$Uint8, ""], ["Mtu", "", Go$Uint32, ""], ["Metric", "", Go$Uint32, ""], ["Baudrate", "", Go$Uint32, ""], ["Ipackets", "", Go$Uint32, ""], ["Ierrors", "", Go$Uint32, ""], ["Opackets", "", Go$Uint32, ""], ["Oerrors", "", Go$Uint32, ""], ["Collisions", "", Go$Uint32, ""], ["Ibytes", "", Go$Uint32, ""], ["Obytes", "", Go$Uint32, ""], ["Imcasts", "", Go$Uint32, ""], ["Omcasts", "", Go$Uint32, ""], ["Iqdrops", "", Go$Uint32, ""], ["Noproto", "", Go$Uint32, ""], ["Recvtiming", "", Go$Uint32, ""], ["Xmittiming", "", Go$Uint32, ""], ["Lastchange", "", Timeval32, ""], ["Unused2", "", Go$Uint32, ""], ["Hwassist", "", Go$Uint32, ""], ["Reserved1", "", Go$Uint32, ""], ["Reserved2", "", Go$Uint32, ""]]);
	IfaMsghdr.init([["Msglen", "", Go$Uint16, ""], ["Version", "", Go$Uint8, ""], ["Type", "", Go$Uint8, ""], ["Addrs", "", Go$Int32, ""], ["Flags", "", Go$Int32, ""], ["Index", "", Go$Uint16, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 2)), ""], ["Metric", "", Go$Int32, ""]]);
	IfmaMsghdr.init([["Msglen", "", Go$Uint16, ""], ["Version", "", Go$Uint8, ""], ["Type", "", Go$Uint8, ""], ["Addrs", "", Go$Int32, ""], ["Flags", "", Go$Int32, ""], ["Index", "", Go$Uint16, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 2)), ""]]);
	IfmaMsghdr2.init([["Msglen", "", Go$Uint16, ""], ["Version", "", Go$Uint8, ""], ["Type", "", Go$Uint8, ""], ["Addrs", "", Go$Int32, ""], ["Flags", "", Go$Int32, ""], ["Index", "", Go$Uint16, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 2)), ""], ["Refcount", "", Go$Int32, ""]]);
	RtMsghdr.init([["Msglen", "", Go$Uint16, ""], ["Version", "", Go$Uint8, ""], ["Type", "", Go$Uint8, ""], ["Index", "", Go$Uint16, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 2)), ""], ["Flags", "", Go$Int32, ""], ["Addrs", "", Go$Int32, ""], ["Pid", "", Go$Int32, ""], ["Seq", "", Go$Int32, ""], ["Errno", "", Go$Int32, ""], ["Use", "", Go$Int32, ""], ["Inits", "", Go$Uint32, ""], ["Rmx", "", RtMetrics, ""]]);
	RtMetrics.init([["Locks", "", Go$Uint32, ""], ["Mtu", "", Go$Uint32, ""], ["Hopcount", "", Go$Uint32, ""], ["Expire", "", Go$Int32, ""], ["Recvpipe", "", Go$Uint32, ""], ["Sendpipe", "", Go$Uint32, ""], ["Ssthresh", "", Go$Uint32, ""], ["Rtt", "", Go$Uint32, ""], ["Rttvar", "", Go$Uint32, ""], ["Pksent", "", Go$Uint32, ""], ["Filler", "", (go$arrayType(Go$Uint32, 4)), ""]]);
	BpfVersion.init([["Major", "", Go$Uint16, ""], ["Minor", "", Go$Uint16, ""]]);
	BpfStat.init([["Recv", "", Go$Uint32, ""], ["Drop", "", Go$Uint32, ""]]);
	BpfProgram.init([["Len", "", Go$Uint32, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 4)), ""], ["Insns", "", (go$ptrType(BpfInsn)), ""]]);
	BpfInsn.init([["Code", "", Go$Uint16, ""], ["Jt", "", Go$Uint8, ""], ["Jf", "", Go$Uint8, ""], ["K", "", Go$Uint32, ""]]);
	BpfHdr.init([["Tstamp", "", Timeval32, ""], ["Caplen", "", Go$Uint32, ""], ["Datalen", "", Go$Uint32, ""], ["Hdrlen", "", Go$Uint16, ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 2)), ""]]);
	Termios.init([["Iflag", "", Go$Uint64, ""], ["Oflag", "", Go$Uint64, ""], ["Cflag", "", Go$Uint64, ""], ["Lflag", "", Go$Uint64, ""], ["Cc", "", (go$arrayType(Go$Uint8, 20)), ""], ["Pad_cgo_0", "", (go$arrayType(Go$Uint8, 4)), ""], ["Ispeed", "", Go$Uint64, ""], ["Ospeed", "", Go$Uint64, ""]]);
	var BpfStmt = go$pkg.BpfStmt = function(code, k) {
		return new BpfInsn.Ptr((code << 16 >>> 16), 0, 0, (k >>> 0));
	};
	var BpfJump = go$pkg.BpfJump = function(code, k, jt, jf) {
		return new BpfInsn.Ptr((code << 16 >>> 16), (jt << 24 >>> 24), (jf << 24 >>> 24), (k >>> 0));
	};
	var BpfBuflen = go$pkg.BpfBuflen = function(fd) {
		var l, _tuple, v, err;
		l = 0;
		_tuple = Syscall(54, (fd >>> 0), 1074020966, new (go$ptrType(Go$Int))(function() { return l; }, function(v) { l = v; })), err = _tuple[2];
		if (!((err === 0))) {
			return [0, new Errno(err)];
		}
		return [l, null];
	};
	var SetBpfBuflen = go$pkg.SetBpfBuflen = function(fd, l) {
		var _tuple, v, err;
		_tuple = Syscall(54, (fd >>> 0), 3221504614, new (go$ptrType(Go$Int))(function() { return l; }, function(v) { l = v; })), err = _tuple[2];
		if (!((err === 0))) {
			return [0, new Errno(err)];
		}
		return [l, null];
	};
	var BpfDatalink = go$pkg.BpfDatalink = function(fd) {
		var t, _tuple, v, err;
		t = 0;
		_tuple = Syscall(54, (fd >>> 0), 1074020970, new (go$ptrType(Go$Int))(function() { return t; }, function(v) { t = v; })), err = _tuple[2];
		if (!((err === 0))) {
			return [0, new Errno(err)];
		}
		return [t, null];
	};
	var SetBpfDatalink = go$pkg.SetBpfDatalink = function(fd, t) {
		var _tuple, v, err;
		_tuple = Syscall(54, (fd >>> 0), 2147762808, new (go$ptrType(Go$Int))(function() { return t; }, function(v) { t = v; })), err = _tuple[2];
		if (!((err === 0))) {
			return [0, new Errno(err)];
		}
		return [t, null];
	};
	var SetBpfPromisc = go$pkg.SetBpfPromisc = function(fd, m) {
		var _tuple, v, err;
		_tuple = Syscall(54, (fd >>> 0), 536887913, new (go$ptrType(Go$Int))(function() { return m; }, function(v) { m = v; })), err = _tuple[2];
		if (!((err === 0))) {
			return new Errno(err);
		}
		return null;
	};
	var FlushBpf = go$pkg.FlushBpf = function(fd) {
		var _tuple, err;
		_tuple = Syscall(54, (fd >>> 0), 536887912, 0), err = _tuple[2];
		if (!((err === 0))) {
			return new Errno(err);
		}
		return null;
	};
	var BpfInterface = go$pkg.BpfInterface = function(fd, name) {
		var iv, _tuple, _array, _struct, _view, err;
		iv = new ivalue.Ptr();
		_array = new Uint8Array(18);
		_tuple = Syscall(54, (fd >>> 0), 1075855979, _array), err = _tuple[2];
		_struct = iv, _view = new DataView(_array.buffer, _array.byteOffset), _struct.name = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.value = _view.getInt16(16, true);
		if (!((err === 0))) {
			return ["", new Errno(err)];
		}
		return [name, null];
	};
	var SetBpfInterface = go$pkg.SetBpfInterface = function(fd, name) {
		var iv, _tuple, _array, _struct, _view, err;
		iv = new ivalue.Ptr();
		go$copySlice(new (go$sliceType(Go$Uint8))(iv.name), new (go$sliceType(Go$Uint8))(go$stringToBytes(name)));
		_array = new Uint8Array(18);
		_tuple = Syscall(54, (fd >>> 0), 2149597804, _array), err = _tuple[2];
		_struct = iv, _view = new DataView(_array.buffer, _array.byteOffset), _struct.name = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.value = _view.getInt16(16, true);
		if (!((err === 0))) {
			return new Errno(err);
		}
		return null;
	};
	var BpfTimeout = go$pkg.BpfTimeout = function(fd) {
		var tv, _tuple, _array, _struct, _view, err;
		tv = new Timeval.Ptr();
		_array = new Uint8Array(16);
		_tuple = Syscall(54, (fd >>> 0), 1074807406, _array), err = _tuple[2];
		_struct = tv, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Sec = new Go$Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Usec = _view.getInt32(8, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 12, _array.buffer.byteLength));
		if (!((err === 0))) {
			return [(go$ptrType(Timeval)).nil, new Errno(err)];
		}
		return [tv, null];
	};
	var SetBpfTimeout = go$pkg.SetBpfTimeout = function(fd, tv) {
		var _tuple, _array, _struct, _view, err;
		_array = new Uint8Array(16);
		_tuple = Syscall(54, (fd >>> 0), 2148549229, _array), err = _tuple[2];
		_struct = tv, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Sec = new Go$Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Usec = _view.getInt32(8, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 12, _array.buffer.byteLength));
		if (!((err === 0))) {
			return new Errno(err);
		}
		return null;
	};
	var BpfStats = go$pkg.BpfStats = function(fd) {
		var s, _tuple, _array, _struct, _view, err;
		s = new BpfStat.Ptr();
		_array = new Uint8Array(8);
		_tuple = Syscall(54, (fd >>> 0), 1074283119, _array), err = _tuple[2];
		_struct = s, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Recv = _view.getUint32(0, true), _struct.Drop = _view.getUint32(4, true);
		if (!((err === 0))) {
			return [(go$ptrType(BpfStat)).nil, new Errno(err)];
		}
		return [s, null];
	};
	var SetBpfImmediate = go$pkg.SetBpfImmediate = function(fd, m) {
		var _tuple, v, err;
		_tuple = Syscall(54, (fd >>> 0), 2147762800, new (go$ptrType(Go$Int))(function() { return m; }, function(v) { m = v; })), err = _tuple[2];
		if (!((err === 0))) {
			return new Errno(err);
		}
		return null;
	};
	var SetBpf = go$pkg.SetBpf = function(fd, i) {
		var p, _array, _struct, _view, _tuple, _array$1, _struct$1, _view$1, err;
		p = new BpfProgram.Ptr();
		p.Len = (i.length >>> 0);
		p.Insns = (_array = go$sliceToArray(i), _struct = new BpfInsn.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Code = _view.getUint16(0, true), _struct.Jt = _view.getUint8(2, true), _struct.Jf = _view.getUint8(3, true), _struct.K = _view.getUint32(4, true), _struct);
		_array$1 = new Uint8Array(12);
		_tuple = Syscall(54, (fd >>> 0), 2148549223, _array$1), err = _tuple[2];
		_struct$1 = p, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Len = _view$1.getUint32(0, true), _struct$1.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array$1.buffer, go$min(_array$1.byteOffset + 4, _array$1.buffer.byteLength));
		if (!((err === 0))) {
			return new Errno(err);
		}
		return null;
	};
	var CheckBpfVersion = go$pkg.CheckBpfVersion = function(fd) {
		var v, _tuple, _array, _struct, _view, err;
		v = new BpfVersion.Ptr();
		_array = new Uint8Array(4);
		_tuple = Syscall(54, (fd >>> 0), 1074020977, _array), err = _tuple[2];
		_struct = v, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Major = _view.getUint16(0, true), _struct.Minor = _view.getUint16(2, true);
		if (!((err === 0))) {
			return new Errno(err);
		}
		if (!((v.Major === 1)) || !((v.Minor === 1))) {
			return new Errno(22);
		}
		return null;
	};
	var BpfHeadercmpl = go$pkg.BpfHeadercmpl = function(fd) {
		var f, _tuple, v, err;
		f = 0;
		_tuple = Syscall(54, (fd >>> 0), 1074020980, new (go$ptrType(Go$Int))(function() { return f; }, function(v) { f = v; })), err = _tuple[2];
		if (!((err === 0))) {
			return [0, new Errno(err)];
		}
		return [f, null];
	};
	var SetBpfHeadercmpl = go$pkg.SetBpfHeadercmpl = function(fd, f) {
		var _tuple, v, err;
		_tuple = Syscall(54, (fd >>> 0), 2147762805, new (go$ptrType(Go$Int))(function() { return f; }, function(v) { f = v; })), err = _tuple[2];
		if (!((err === 0))) {
			return new Errno(err);
		}
		return null;
	};
	var setenv_c = function(k, v) {
		throw go$panic("Native function not implemented: setenv_c");
	};
	var copyenv = function() {
		var _ref, _i, _slice, _index, s, i, j, key, ok, _tuple, _entry, _key;
		env = new Go$Map();
		_ref = envs;
		_i = 0;
		for (; _i < _ref.length; _i += 1) {
			s = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			j = 0;
			while (j < s.length) {
				if (s.charCodeAt(j) === 61) {
					key = s.substring(0, j);
					if (_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]), ok = _tuple[1], !ok) {
						_key = key, (env || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: i };
					}
					break;
				}
				j = j + 1 >> 0;
			}
		}
	};
	var Getenv = go$pkg.Getenv = function(key) {
		var value, found, _tuple, _tuple$1, _entry, i, ok, _tuple$2, _slice, _index, s, i$1, _tuple$3, _tuple$4;
		value = "";
		found = false;
		var go$deferred = [];
		try {
			envOnce.Do(copyenv);
			if (key.length === 0) {
				_tuple = ["", false], value = _tuple[0], found = _tuple[1];
				return [value, found];
			}
			envLock.RLock();
			go$deferred.push({ recv: envLock, method: "RUnlock", args: [] });
			_tuple$1 = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]), i = _tuple$1[0], ok = _tuple$1[1];
			if (!ok) {
				_tuple$2 = ["", false], value = _tuple$2[0], found = _tuple$2[1];
				return [value, found];
			}
			s = (_slice = envs, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i$1 = 0;
			while (i$1 < s.length) {
				if (s.charCodeAt(i$1) === 61) {
					_tuple$3 = [s.substring((i$1 + 1 >> 0)), true], value = _tuple$3[0], found = _tuple$3[1];
					return [value, found];
				}
				i$1 = i$1 + 1 >> 0;
			}
			_tuple$4 = ["", false], value = _tuple$4[0], found = _tuple$4[1];
			return [value, found];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [value, found];
		}
	};
	var Setenv = go$pkg.Setenv = function(key, value) {
		var i, i$1, _tuple, _entry, i$2, ok, kv, _slice, _index, _key;
		var go$deferred = [];
		try {
			envOnce.Do(copyenv);
			if (key.length === 0) {
				return new Errno(22);
			}
			i = 0;
			while (i < key.length) {
				if ((key.charCodeAt(i) === 61) || (key.charCodeAt(i) === 0)) {
					return new Errno(22);
				}
				i = i + 1 >> 0;
			}
			i$1 = 0;
			while (i$1 < value.length) {
				if (value.charCodeAt(i$1) === 0) {
					return new Errno(22);
				}
				i$1 = i$1 + 1 >> 0;
			}
			envLock.Lock();
			go$deferred.push({ recv: envLock, method: "Unlock", args: [] });
			_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]), i$2 = _tuple[0], ok = _tuple[1];
			kv = key + "=" + value;
			if (ok) {
				_slice = envs, _index = i$2, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = kv) : go$throwRuntimeError("index out of range");
			} else {
				i$2 = envs.length;
				envs = go$append(envs, kv);
			}
			_key = key, (env || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: i$2 };
			setenv_c(key, value);
			return null;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	var Clearenv = go$pkg.Clearenv = function() {
		var go$deferred = [];
		try {
			envOnce.Do(copyenv);
			envLock.Lock();
			go$deferred.push({ recv: envLock, method: "Unlock", args: [] });
			env = new Go$Map();
			envs = new (go$sliceType(Go$String))([]);
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	var Environ = go$pkg.Environ = function() {
		var a;
		var go$deferred = [];
		try {
			envOnce.Do(copyenv);
			envLock.RLock();
			go$deferred.push({ recv: envLock, method: "RUnlock", args: [] });
			a = (go$sliceType(Go$String)).make(envs.length, 0, function() { return ""; });
			go$copySlice(a, envs);
			return a;
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$sliceType(Go$String)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	var runtime_BeforeFork = function() {
		throw go$panic("Native function not implemented: runtime_BeforeFork");
	};
	var runtime_AfterFork = function() {
		throw go$panic("Native function not implemented: runtime_AfterFork");
	};
	var forkAndExecInChild = function(argv0, argv, envv, chroot, dir, attr, sys, pipe$1) {
		var pid, err, _tuple, r1, r2, err1, nextfd, i, fd, _ref, _i, _slice, _index, ufd, i$1, _slice$1, _index$1, darwin, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, cred, ngroups, groups, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _slice$2, _index$2, _slice$3, _index$3, _tuple$13, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _tuple$14, _slice$8, _index$8, _tuple$15, _slice$9, _index$9, _tuple$16, _tuple$17, _tuple$18, v;
		pid = 0;
		err = 0;
		_tuple = [0, 0], r1 = _tuple[0], r2 = _tuple[1], err1 = 0, nextfd = 0, i = 0;
		fd = (go$sliceType(Go$Int)).make(attr.Files.length, 0, function() { return 0; });
		nextfd = attr.Files.length;
		_ref = attr.Files;
		_i = 0;
		for (; _i < _ref.length; _i += 1) {
			ufd = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i$1 = _i;
			if (nextfd < (ufd >> 0)) {
				nextfd = (ufd >> 0);
			}
			_slice$1 = fd, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (ufd >> 0)) : go$throwRuntimeError("index out of range");
		}
		nextfd = nextfd + 1 >> 0;
		darwin = true;
		runtime_BeforeFork();
		_tuple$1 = RawSyscall(2, 0, 0, 0), r1 = _tuple$1[0], r2 = _tuple$1[1], err1 = _tuple$1[2];
		if (!((err1 === 0))) {
			runtime_AfterFork();
			_tuple$2 = [0, err1], pid = _tuple$2[0], err = _tuple$2[1];
			return [pid, err];
		}
		if (darwin && (r2 === 1)) {
			r1 = 0;
		}
		if (!((r1 === 0))) {
			runtime_AfterFork();
			_tuple$3 = [(r1 >> 0), 0], pid = _tuple$3[0], err = _tuple$3[1];
			return [pid, err];
		}
		if (sys.Ptrace) {
			_tuple$4 = RawSyscall(26, 0, 0, 0), err1 = _tuple$4[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
		}
		if (sys.Setsid) {
			_tuple$5 = RawSyscall(147, 0, 0, 0), err1 = _tuple$5[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
		}
		if (sys.Setpgid) {
			_tuple$6 = RawSyscall(82, 0, 0, 0), err1 = _tuple$6[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
		}
		if (!(go$pointerIsEqual(chroot, (go$ptrType(Go$Uint8)).nil))) {
			_tuple$7 = RawSyscall(61, chroot, 0, 0), err1 = _tuple$7[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
		}
		if (cred = sys.Credential, !(cred === (go$ptrType(Credential)).nil)) {
			ngroups = (cred.Groups.length >>> 0);
			groups = 0;
			if (ngroups > 0) {
				groups = go$sliceToArray(cred.Groups);
			}
			_tuple$8 = RawSyscall(80, ngroups, groups, 0), err1 = _tuple$8[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
			_tuple$9 = RawSyscall(181, (cred.Gid >>> 0), 0, 0), err1 = _tuple$9[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
			_tuple$10 = RawSyscall(23, (cred.Uid >>> 0), 0, 0), err1 = _tuple$10[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
		}
		if (!(go$pointerIsEqual(dir, (go$ptrType(Go$Uint8)).nil))) {
			_tuple$11 = RawSyscall(12, dir, 0, 0), err1 = _tuple$11[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
		}
		if (pipe$1 < nextfd) {
			_tuple$12 = RawSyscall(90, (pipe$1 >>> 0), (nextfd >>> 0), 0), err1 = _tuple$12[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
			RawSyscall(92, (nextfd >>> 0), 2, 1);
			pipe$1 = nextfd;
			nextfd = nextfd + 1 >> 0;
		}
		i = 0;
		while (i < fd.length) {
			if ((_slice$2 = fd, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) >= 0 && (_slice$3 = fd, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) < i) {
				_tuple$13 = RawSyscall(90, ((_slice$4 = fd, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) >>> 0), (nextfd >>> 0), 0), err1 = _tuple$13[2];
				if (!((err1 === 0))) {
					go$notSupported("goto");
				}
				RawSyscall(92, (nextfd >>> 0), 2, 1);
				_slice$5 = fd, _index$5 = i, (_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = nextfd) : go$throwRuntimeError("index out of range");
				nextfd = nextfd + 1 >> 0;
				if (nextfd === pipe$1) {
					nextfd = nextfd + 1 >> 0;
				}
			}
			i = i + 1 >> 0;
		}
		i = 0;
		while (i < fd.length) {
			if ((_slice$6 = fd, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")) === -1) {
				RawSyscall(6, (i >>> 0), 0, 0);
				i = i + 1 >> 0;
				continue;
			}
			if ((_slice$7 = fd, _index$7 = i, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")) === i) {
				_tuple$14 = RawSyscall(92, ((_slice$8 = fd, _index$8 = i, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")) >>> 0), 2, 0), err1 = _tuple$14[2];
				if (!((err1 === 0))) {
					go$notSupported("goto");
				}
				i = i + 1 >> 0;
				continue;
			}
			_tuple$15 = RawSyscall(90, ((_slice$9 = fd, _index$9 = i, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")) >>> 0), (i >>> 0), 0), err1 = _tuple$15[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
			i = i + 1 >> 0;
		}
		i = fd.length;
		while (i < 3) {
			RawSyscall(6, (i >>> 0), 0, 0);
			i = i + 1 >> 0;
		}
		if (sys.Noctty) {
			_tuple$16 = RawSyscall(54, 0, 536900721, 0), err1 = _tuple$16[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
		}
		if (sys.Setctty) {
			_tuple$17 = RawSyscall(54, 0, 536900705, 0), err1 = _tuple$17[2];
			if (!((err1 === 0))) {
				go$notSupported("goto");
			}
		}
		_tuple$18 = RawSyscall(59, argv0, go$sliceToArray(argv), go$sliceToArray(envv)), err1 = _tuple$18[2];
		childerror: RawSyscall(4, (pipe$1 >>> 0), new (go$ptrType(Errno))(function() { return err1; }, function(v) { err1 = v; }), 4);
		while (true) {
			RawSyscall(1, 253, 0, 0);
		}
	};
	var forkExecPipe = function(p) {
		var err, _tuple, _slice, _index, _tuple$1, _slice$1, _index$1;
		err = Pipe(p);
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple = fcntl((_slice = p, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), 2, 1), err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = fcntl((_slice$1 = p, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), 2, 1), err = _tuple$1[1];
		return err;
	};
	var StringSlicePtr = go$pkg.StringSlicePtr = function(ss) {
		var bb, i, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		bb = (go$sliceType((go$ptrType(Go$Uint8)))).make(ss.length + 1 >> 0, 0, function() { return (go$ptrType(Go$Uint8)).nil; });
		i = 0;
		while (i < ss.length) {
			_slice$1 = bb, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = StringBytePtr((_slice = ss, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")))) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		_slice$2 = bb, _index$2 = ss.length, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (go$ptrType(Go$Uint8)).nil) : go$throwRuntimeError("index out of range");
		return bb;
	};
	var SlicePtrFromStrings = go$pkg.SlicePtrFromStrings = function(ss) {
		var err, bb, i, _tuple, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		err = null;
		bb = (go$sliceType((go$ptrType(Go$Uint8)))).make(ss.length + 1 >> 0, 0, function() { return (go$ptrType(Go$Uint8)).nil; });
		i = 0;
		while (i < ss.length) {
			_tuple = BytePtrFromString((_slice = ss, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))), _slice$1 = bb, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = _tuple[0]) : go$throwRuntimeError("index out of range"), err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$sliceType((go$ptrType(Go$Uint8)))).nil, err];
			}
			i = i + 1 >> 0;
		}
		_slice$2 = bb, _index$2 = ss.length, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (go$ptrType(Go$Uint8)).nil) : go$throwRuntimeError("index out of range");
		return [bb, null];
	};
	var CloseOnExec = go$pkg.CloseOnExec = function(fd) {
		fcntl(fd, 2, 1);
	};
	var SetNonblock = go$pkg.SetNonblock = function(fd, nonblocking) {
		var err, _tuple, flag, _tuple$1;
		err = null;
		_tuple = fcntl(fd, 3, 0), flag = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			err = err;
			return err;
		}
		if (nonblocking) {
			flag = flag | 4;
		} else {
			flag = flag & -5;
		}
		_tuple$1 = fcntl(fd, 4, flag), err = _tuple$1[1];
		err = err;
		return err;
	};
	var forkExec = function(argv0, argv, attr) {
		var pid, err, p, n, err1, wstatus, sys, _tuple, argv0p, _tuple$1, _tuple$2, argvp, _tuple$3, _tuple$4, envvp, _tuple$5, _slice, _index, chroot, _tuple$6, _tuple$7, dir, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, v, _tuple$14, v$1, err1$1, _tuple$15, v$2, _tuple$16, _tuple$17;
		pid = 0;
		err = null;
		p = go$makeNativeArray("Int", 2, function() { return 0; });
		n = 0;
		err1 = 0;
		wstatus = 0;
		if (attr === (go$ptrType(ProcAttr)).nil) {
			attr = zeroProcAttr;
		}
		sys = attr.Sys;
		if (sys === (go$ptrType(SysProcAttr)).nil) {
			sys = zeroSysProcAttr;
		}
		p[0] = -1;
		p[1] = -1;
		_tuple = BytePtrFromString(argv0), argv0p = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [0, err], pid = _tuple$1[0], err = _tuple$1[1];
			return [pid, err];
		}
		_tuple$2 = SlicePtrFromStrings(argv), argvp = _tuple$2[0], err = _tuple$2[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$3 = [0, err], pid = _tuple$3[0], err = _tuple$3[1];
			return [pid, err];
		}
		_tuple$4 = SlicePtrFromStrings(attr.Env), envvp = _tuple$4[0], err = _tuple$4[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$5 = [0, err], pid = _tuple$5[0], err = _tuple$5[1];
			return [pid, err];
		}
		chroot = (go$ptrType(Go$Uint8)).nil;
		if (!(sys.Chroot === "")) {
			_tuple$6 = BytePtrFromString(sys.Chroot), chroot = _tuple$6[0], err = _tuple$6[1];
			if (!(go$interfaceIsEqual(err, null))) {
				_tuple$7 = [0, err], pid = _tuple$7[0], err = _tuple$7[1];
				return [pid, err];
			}
		}
		dir = (go$ptrType(Go$Uint8)).nil;
		if (!(attr.Dir === "")) {
			_tuple$8 = BytePtrFromString(attr.Dir), dir = _tuple$8[0], err = _tuple$8[1];
			if (!(go$interfaceIsEqual(err, null))) {
				_tuple$9 = [0, err], pid = _tuple$9[0], err = _tuple$9[1];
				return [pid, err];
			}
		}
		go$pkg.ForkLock.Lock();
		if (err = forkExecPipe(new (go$sliceType(Go$Int))(p)), !(go$interfaceIsEqual(err, null))) {
			if (p[0] >= 0) {
				Close(p[0]);
				Close(p[1]);
			}
			go$pkg.ForkLock.Unlock();
			_tuple$10 = [0, err], pid = _tuple$10[0], err = _tuple$10[1];
			return [pid, err];
		}
		_tuple$11 = forkAndExecInChild(argv0p, argvp, envvp, chroot, dir, attr, sys, p[1]), pid = _tuple$11[0], err1 = _tuple$11[1];
		if (!((err1 === 0))) {
			err = new Errno(err1);
			if (p[0] >= 0) {
				Close(p[0]);
				Close(p[1]);
			}
			go$pkg.ForkLock.Unlock();
			_tuple$12 = [0, err], pid = _tuple$12[0], err = _tuple$12[1];
			return [pid, err];
		}
		go$pkg.ForkLock.Unlock();
		Close(p[1]);
		_tuple$13 = readlen(p[0], new (go$ptrType(Errno))(function() { return err1; }, function(v) { err1 = v; }), 4), n = _tuple$13[0], err = _tuple$13[1];
		Close(p[0]);
		if (!(go$interfaceIsEqual(err, null)) || !((n === 0))) {
			if (n === 4) {
				err = new Errno(err1);
			}
			if (go$interfaceIsEqual(err, null)) {
				err = new Errno(32);
			}
			_tuple$14 = Wait4(pid, new (go$ptrType(WaitStatus))(function() { return wstatus; }, function(v$1) { wstatus = v$1; }), 0, (go$ptrType(Rusage)).nil), err1$1 = _tuple$14[1];
			while (go$interfaceIsEqual(err1$1, new Errno(4))) {
				_tuple$15 = Wait4(pid, new (go$ptrType(WaitStatus))(function() { return wstatus; }, function(v$2) { wstatus = v$2; }), 0, (go$ptrType(Rusage)).nil), err1$1 = _tuple$15[1];
			}
			_tuple$16 = [0, err], pid = _tuple$16[0], err = _tuple$16[1];
			return [pid, err];
		}
		_tuple$17 = [pid, null], pid = _tuple$17[0], err = _tuple$17[1];
		return [pid, err];
	};
	var ForkExec = go$pkg.ForkExec = function(argv0, argv, attr) {
		var pid, err, _tuple;
		pid = 0;
		err = null;
		_tuple = forkExec(argv0, argv, attr), pid = _tuple[0], err = _tuple[1];
		return [pid, err];
	};
	var StartProcess = go$pkg.StartProcess = function(argv0, argv, attr) {
		var pid, handle, err, _tuple, _tuple$1;
		pid = 0;
		handle = 0;
		err = null;
		_tuple = forkExec(argv0, argv, attr), pid = _tuple[0], err = _tuple[1];
		_tuple$1 = [pid, 0, err], pid = _tuple$1[0], handle = _tuple$1[1], err = _tuple$1[2];
		return [pid, handle, err];
	};
	var Exec = go$pkg.Exec = function(argv0, argv, envv) {
		var err, _tuple, argv0p, _tuple$1, argvp, _tuple$2, envvp, _tuple$3, err1;
		err = null;
		_tuple = BytePtrFromString(argv0), argv0p = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			err = err;
			return err;
		}
		_tuple$1 = SlicePtrFromStrings(argv), argvp = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			err = err;
			return err;
		}
		_tuple$2 = SlicePtrFromStrings(envv), envvp = _tuple$2[0], err = _tuple$2[1];
		if (!(go$interfaceIsEqual(err, null))) {
			err = err;
			return err;
		}
		_tuple$3 = RawSyscall(59, argv0p, go$sliceToArray(argvp), go$sliceToArray(envvp)), err1 = _tuple$3[2];
		err = new Errno(err1);
		return err;
	};
	var raceAcquire = function(addr) {
	};
	var raceReleaseMerge = function(addr) {
	};
	var raceReadRange = function(addr, len) {
	};
	var raceWriteRange = function(addr, len) {
	};
	var rsaAlignOf = function(salen) {
		var salign;
		salign = 8;
		salign = 4;
		if (salen === 0) {
			return salign;
		}
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	var RouteRIB = go$pkg.RouteRIB = function(facility, param) {
		var mib, n, err, v, tab, err$1, v$1, _slice, _index, _slice$1, _index$1, v$2;
		mib = new (go$sliceType(_C_int))([4, 17, 0, 0, (facility >> 0), (param >> 0)]);
		n = 0;
		if (err = sysctl(mib, (go$ptrType(Go$Uint8)).nil, new (go$ptrType(Go$Uintptr))(function() { return n; }, function(v) { n = v; }), (go$ptrType(Go$Uint8)).nil, 0), !(go$interfaceIsEqual(err, null))) {
			return [(go$sliceType(Go$Uint8)).nil, err];
		}
		if (n === 0) {
			return [(go$sliceType(Go$Uint8)).nil, null];
		}
		tab = (go$sliceType(Go$Uint8)).make(n, 0, function() { return 0; });
		if (err$1 = sysctl(mib, new (go$ptrType(Go$Uint8))(function() { return (_slice = tab, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v$1) { _slice$1 = tab, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v$1) : go$throwRuntimeError("index out of range"); }), new (go$ptrType(Go$Uintptr))(function() { return n; }, function(v$2) { n = v$2; }), (go$ptrType(Go$Uint8)).nil, 0), !(go$interfaceIsEqual(err$1, null))) {
			return [(go$sliceType(Go$Uint8)).nil, err$1];
		}
		return [go$subslice(tab, 0, n), null];
	};
	RouteMessage.Ptr.prototype.sockaddr = function() {
		var m, af, sas, b, i, y, _array, _struct, _view, rsa, _ref, _tuple, _array$1, _struct$1, _array$2, _struct$2, _view$1, _view$2, sa, err, _ref$1, _array$3, _struct$3, _view$3, rsa4, sa$1, j, _array$4, _struct$4, _view$4, rsa6, sa$2, j$1;
		m = this;
		af = 0, sas = go$makeNativeArray("Interface", 4, function() { return null; });
		b = m.Data;
		i = 0;
		while (i < 8) {
			if (((m.Header.Addrs & 15) & (((y = i, y < 32 ? (1 << y) : 0) >> 0))) === 0) {
				i = i + 1 >>> 0;
				continue;
			}
			rsa = (_array = go$sliceToArray(b), _struct = new RawSockaddr.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct);
			_ref = i;
			if (_ref === 0 || _ref === 1) {
				_array$2 = new Uint8Array(16);
				_tuple = anyToSockaddr((_array$1 = _array$2, _struct$1 = new RawSockaddrAny.Ptr(), _view$2 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$2.getUint8(0, true), _struct$1.Addr.Family = _view$2.getUint8(1, true), _struct$1.Addr.Data = new (go$nativeArray("Int8"))(_array$1.buffer, go$min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new (go$nativeArray("Int8"))(_array$1.buffer, go$min(_array$1.byteOffset + 16, _array$1.buffer.byteLength)), _struct$1)), sa = _tuple[0], err = _tuple[1];
				_struct$2 = rsa, _view$1 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$1.getUint8(0, true), _struct$2.Family = _view$1.getUint8(1, true), _struct$2.Data = new (go$nativeArray("Int8"))(_array$2.buffer, go$min(_array$2.byteOffset + 2, _array$2.buffer.byteLength));
				if (!(go$interfaceIsEqual(err, null))) {
					return (go$sliceType(Sockaddr)).nil;
				}
				if (i === 0) {
					af = (rsa.Family >> 0);
				}
				sas[i] = sa;
			} else if (_ref === 2 || _ref === 3) {
				_ref$1 = af;
				if (_ref$1 === 2) {
					rsa4 = (_array$3 = go$sliceToArray(b), _struct$3 = new RawSockaddrInet4.Ptr(), _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Len = _view$3.getUint8(0, true), _struct$3.Family = _view$3.getUint8(1, true), _struct$3.Port = _view$3.getUint16(2, true), _struct$3.Addr = new (go$nativeArray("Uint8"))(_array$3.buffer, go$min(_array$3.byteOffset + 4, _array$3.buffer.byteLength)), _struct$3.Zero = new (go$nativeArray("Int8"))(_array$3.buffer, go$min(_array$3.byteOffset + 8, _array$3.buffer.byteLength)), _struct$3);
					sa$1 = new SockaddrInet4.Ptr();
					j = 0;
					while (rsa4.Len > 0 && j < ((rsa4.Len >> 0) - 4 >> 0)) {
						sa$1.Addr[j] = rsa4.Addr[j];
						j = j + 1 >> 0;
					}
					sas[i] = sa$1;
				} else if (_ref$1 === 30) {
					rsa6 = (_array$4 = go$sliceToArray(b), _struct$4 = new RawSockaddrInet6.Ptr(), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$4.getUint8(0, true), _struct$4.Family = _view$4.getUint8(1, true), _struct$4.Port = _view$4.getUint16(2, true), _struct$4.Flowinfo = _view$4.getUint32(4, true), _struct$4.Addr = new (go$nativeArray("Uint8"))(_array$4.buffer, go$min(_array$4.byteOffset + 8, _array$4.buffer.byteLength)), _struct$4.Scope_id = _view$4.getUint32(24, true), _struct$4);
					sa$2 = new SockaddrInet6.Ptr();
					j$1 = 0;
					while (rsa6.Len > 0 && j$1 < ((rsa6.Len >> 0) - 8 >> 0)) {
						sa$2.Addr[j$1] = rsa6.Addr[j$1];
						j$1 = j$1 + 1 >> 0;
					}
					sas[i] = sa$2;
				}
			}
			b = go$subslice(b, rsaAlignOf((rsa.Len >> 0)));
			i = i + 1 >>> 0;
		}
		return new (go$sliceType(Sockaddr))(sas);
	};
	RouteMessage.prototype.sockaddr = function() { return this.go$val.sockaddr(); };
	InterfaceMessage.Ptr.prototype.sockaddr = function() {
		var sas, m, _tuple, _array, _struct, _view, sa, err;
		sas = (go$sliceType(Sockaddr)).nil;
		m = this;
		if ((m.Header.Addrs & 16) === 0) {
			sas = (go$sliceType(Sockaddr)).nil;
			return sas;
		}
		_tuple = anyToSockaddr((_array = go$sliceToArray(m.Data), _struct = new RawSockaddrAny.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 16, _array.buffer.byteLength)), _struct)), sa = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			sas = (go$sliceType(Sockaddr)).nil;
			return sas;
		}
		sas = go$append(sas, sa);
		return sas;
	};
	InterfaceMessage.prototype.sockaddr = function() { return this.go$val.sockaddr(); };
	InterfaceAddrMessage.Ptr.prototype.sockaddr = function() {
		var sas, m, b, preferredFamily, i, y, _array, _struct, _view, rsa, _ref, _tuple, _array$1, _struct$1, _array$2, _struct$2, _view$1, _view$2, sa, err, _ref$1, _ref$2, _tuple$1, _array$3, _struct$3, _array$4, _struct$4, _view$3, _view$4, sa$1, err$1;
		sas = (go$sliceType(Sockaddr)).nil;
		m = this;
		if ((m.Header.Addrs & 164) === 0) {
			sas = (go$sliceType(Sockaddr)).nil;
			return sas;
		}
		b = m.Data;
		preferredFamily = 0;
		i = 0;
		while (i < 8) {
			if (((m.Header.Addrs & 164) & (((y = i, y < 32 ? (1 << y) : 0) >> 0))) === 0) {
				i = i + 1 >>> 0;
				continue;
			}
			rsa = (_array = go$sliceToArray(b), _struct = new RawSockaddr.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct);
			_ref = i;
			if (_ref === 5) {
				if (rsa.Family === 0) {
					rsa.Family = preferredFamily;
				}
				_array$2 = new Uint8Array(16);
				_tuple = anyToSockaddr((_array$1 = _array$2, _struct$1 = new RawSockaddrAny.Ptr(), _view$2 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$2.getUint8(0, true), _struct$1.Addr.Family = _view$2.getUint8(1, true), _struct$1.Addr.Data = new (go$nativeArray("Int8"))(_array$1.buffer, go$min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new (go$nativeArray("Int8"))(_array$1.buffer, go$min(_array$1.byteOffset + 16, _array$1.buffer.byteLength)), _struct$1)), sa = _tuple[0], err = _tuple[1];
				_struct$2 = rsa, _view$1 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$1.getUint8(0, true), _struct$2.Family = _view$1.getUint8(1, true), _struct$2.Data = new (go$nativeArray("Int8"))(_array$2.buffer, go$min(_array$2.byteOffset + 2, _array$2.buffer.byteLength));
				if (!(go$interfaceIsEqual(err, null))) {
					sas = (go$sliceType(Sockaddr)).nil;
					return sas;
				}
				sas = go$append(sas, sa);
			} else if (_ref === 2) {
				_ref$1 = rsa.Family;
				if (_ref$1 === 0) {
					_ref$2 = rsa.Len;
					if (_ref$2 === 16) {
						rsa.Family = 2;
					} else if (_ref$2 === 28) {
						rsa.Family = 30;
					} else {
						rsa.Family = 2;
					}
				} else if (_ref$1 === 2 || _ref$1 === 30) {
					preferredFamily = rsa.Family;
				} else {
					sas = (go$sliceType(Sockaddr)).nil;
					return sas;
				}
				_array$4 = new Uint8Array(16);
				_tuple$1 = anyToSockaddr((_array$3 = _array$4, _struct$3 = new RawSockaddrAny.Ptr(), _view$4 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Len = _view$4.getUint8(0, true), _struct$3.Addr.Family = _view$4.getUint8(1, true), _struct$3.Addr.Data = new (go$nativeArray("Int8"))(_array$3.buffer, go$min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new (go$nativeArray("Int8"))(_array$3.buffer, go$min(_array$3.byteOffset + 16, _array$3.buffer.byteLength)), _struct$3)), sa$1 = _tuple$1[0], err$1 = _tuple$1[1];
				_struct$4 = rsa, _view$3 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$3.getUint8(0, true), _struct$4.Family = _view$3.getUint8(1, true), _struct$4.Data = new (go$nativeArray("Int8"))(_array$4.buffer, go$min(_array$4.byteOffset + 2, _array$4.buffer.byteLength));
				if (!(go$interfaceIsEqual(err$1, null))) {
					sas = (go$sliceType(Sockaddr)).nil;
					return sas;
				}
				sas = go$append(sas, sa$1);
			}
			b = go$subslice(b, rsaAlignOf((rsa.Len >> 0)));
			i = i + 1 >>> 0;
		}
		sas = sas;
		return sas;
	};
	InterfaceAddrMessage.prototype.sockaddr = function() { return this.go$val.sockaddr(); };
	var ParseRoutingMessage = go$pkg.ParseRoutingMessage = function(b) {
		var msgs, err, _array, _struct, _view, any, _tuple, _tuple$1;
		msgs = (go$sliceType(RoutingMessage)).nil;
		err = null;
		while (b.length >= 4) {
			any = (_array = go$sliceToArray(b), _struct = new anyMessage.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Msglen = _view.getUint16(0, true), _struct.Version = _view.getUint8(2, true), _struct.Type = _view.getUint8(3, true), _struct);
			if (!((any.Version === 5))) {
				_tuple = [(go$sliceType(RoutingMessage)).nil, new Errno(22)], msgs = _tuple[0], err = _tuple[1];
				return [msgs, err];
			}
			msgs = go$append(msgs, any.toRoutingMessage(b));
			b = go$subslice(b, any.Msglen);
		}
		_tuple$1 = [msgs, null], msgs = _tuple$1[0], err = _tuple$1[1];
		return [msgs, err];
	};
	var ParseRoutingSockaddr = go$pkg.ParseRoutingSockaddr = function(msg) {
		var sas, err, _tuple;
		sas = (go$sliceType(Sockaddr)).nil;
		err = null;
		_tuple = [go$appendSlice(sas, msg.sockaddr()), null], sas = _tuple[0], err = _tuple[1];
		return [sas, err];
	};
	anyMessage.Ptr.prototype.toRoutingMessage = function(b) {
		var any, _ref, _array, _struct, _array$1, _struct$1, _view, _view$1, p, _struct$2, _struct$3, _array$2, _struct$4, _array$3, _struct$5, _view$2, _view$3, p$1, _struct$6, _struct$7, _struct$8, _array$4, _struct$9, _array$5, _struct$10, _view$4, _view$5, p$2, _struct$11, _array$6, _struct$12, _array$7, _struct$13, _view$6, _view$7, p$3, _struct$14;
		any = this;
		_ref = any.Type;
		if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 7 || _ref === 8 || _ref === 11) {
			_array$1 = new Uint8Array(4);
			p = (_array = _array$1, _struct = new RouteMessage.Ptr(), _view$1 = new DataView(_array.buffer, _array.byteOffset), _struct.Header.Msglen = _view$1.getUint16(0, true), _struct.Header.Version = _view$1.getUint8(2, true), _struct.Header.Type = _view$1.getUint8(3, true), _struct.Header.Index = _view$1.getUint16(4, true), _struct.Header.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 6, _array.buffer.byteLength)), _struct.Header.Flags = _view$1.getInt32(8, true), _struct.Header.Addrs = _view$1.getInt32(12, true), _struct.Header.Pid = _view$1.getInt32(16, true), _struct.Header.Seq = _view$1.getInt32(20, true), _struct.Header.Errno = _view$1.getInt32(24, true), _struct.Header.Use = _view$1.getInt32(28, true), _struct.Header.Inits = _view$1.getUint32(32, true), _struct.Header.Rmx.Locks = _view$1.getUint32(36, true), _struct.Header.Rmx.Mtu = _view$1.getUint32(40, true), _struct.Header.Rmx.Hopcount = _view$1.getUint32(44, true), _struct.Header.Rmx.Expire = _view$1.getInt32(48, true), _struct.Header.Rmx.Recvpipe = _view$1.getUint32(52, true), _struct.Header.Rmx.Sendpipe = _view$1.getUint32(56, true), _struct.Header.Rmx.Ssthresh = _view$1.getUint32(60, true), _struct.Header.Rmx.Rtt = _view$1.getUint32(64, true), _struct.Header.Rmx.Rttvar = _view$1.getUint32(68, true), _struct.Header.Rmx.Pksent = _view$1.getUint32(72, true), _struct.Header.Rmx.Filler = new (go$nativeArray("Uint32"))(_array.buffer, go$min(_array.byteOffset + 76, _array.buffer.byteLength)), _struct);
			_struct$1 = any, _view = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Msglen = _view.getUint16(0, true), _struct$1.Version = _view.getUint8(2, true), _struct$1.Type = _view.getUint8(3, true);
			return new RouteMessage.Ptr((_struct$2 = p.Header, new RtMsghdr.Ptr(_struct$2.Msglen, _struct$2.Version, _struct$2.Type, _struct$2.Index, go$mapArray(_struct$2.Pad_cgo_0, function(entry) { return entry; }), _struct$2.Flags, _struct$2.Addrs, _struct$2.Pid, _struct$2.Seq, _struct$2.Errno, _struct$2.Use, _struct$2.Inits, (_struct$3 = _struct$2.Rmx, new RtMetrics.Ptr(_struct$3.Locks, _struct$3.Mtu, _struct$3.Hopcount, _struct$3.Expire, _struct$3.Recvpipe, _struct$3.Sendpipe, _struct$3.Ssthresh, _struct$3.Rtt, _struct$3.Rttvar, _struct$3.Pksent, go$mapArray(_struct$3.Filler, function(entry) { return entry; }))))), go$subslice(b, 92, any.Msglen));
		} else if (_ref === 14) {
			_array$3 = new Uint8Array(4);
			p$1 = (_array$2 = _array$3, _struct$4 = new InterfaceMessage.Ptr(), _view$3 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$4.Header.Msglen = _view$3.getUint16(0, true), _struct$4.Header.Version = _view$3.getUint8(2, true), _struct$4.Header.Type = _view$3.getUint8(3, true), _struct$4.Header.Addrs = _view$3.getInt32(4, true), _struct$4.Header.Flags = _view$3.getInt32(8, true), _struct$4.Header.Index = _view$3.getUint16(12, true), _struct$4.Header.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array$2.buffer, go$min(_array$2.byteOffset + 14, _array$2.buffer.byteLength)), _struct$4.Header.Data.Type = _view$3.getUint8(16, true), _struct$4.Header.Data.Typelen = _view$3.getUint8(17, true), _struct$4.Header.Data.Physical = _view$3.getUint8(18, true), _struct$4.Header.Data.Addrlen = _view$3.getUint8(19, true), _struct$4.Header.Data.Hdrlen = _view$3.getUint8(20, true), _struct$4.Header.Data.Recvquota = _view$3.getUint8(21, true), _struct$4.Header.Data.Xmitquota = _view$3.getUint8(22, true), _struct$4.Header.Data.Unused1 = _view$3.getUint8(23, true), _struct$4.Header.Data.Mtu = _view$3.getUint32(24, true), _struct$4.Header.Data.Metric = _view$3.getUint32(28, true), _struct$4.Header.Data.Baudrate = _view$3.getUint32(32, true), _struct$4.Header.Data.Ipackets = _view$3.getUint32(36, true), _struct$4.Header.Data.Ierrors = _view$3.getUint32(40, true), _struct$4.Header.Data.Opackets = _view$3.getUint32(44, true), _struct$4.Header.Data.Oerrors = _view$3.getUint32(48, true), _struct$4.Header.Data.Collisions = _view$3.getUint32(52, true), _struct$4.Header.Data.Ibytes = _view$3.getUint32(56, true), _struct$4.Header.Data.Obytes = _view$3.getUint32(60, true), _struct$4.Header.Data.Imcasts = _view$3.getUint32(64, true), _struct$4.Header.Data.Omcasts = _view$3.getUint32(68, true), _struct$4.Header.Data.Iqdrops = _view$3.getUint32(72, true), _struct$4.Header.Data.Noproto = _view$3.getUint32(76, true), _struct$4.Header.Data.Recvtiming = _view$3.getUint32(80, true), _struct$4.Header.Data.Xmittiming = _view$3.getUint32(84, true), _struct$4.Header.Data.Lastchange.Sec = _view$3.getInt32(88, true), _struct$4.Header.Data.Lastchange.Usec = _view$3.getInt32(92, true), _struct$4.Header.Data.Unused2 = _view$3.getUint32(96, true), _struct$4.Header.Data.Hwassist = _view$3.getUint32(100, true), _struct$4.Header.Data.Reserved1 = _view$3.getUint32(104, true), _struct$4.Header.Data.Reserved2 = _view$3.getUint32(108, true), _struct$4);
			_struct$5 = any, _view$2 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$5.Msglen = _view$2.getUint16(0, true), _struct$5.Version = _view$2.getUint8(2, true), _struct$5.Type = _view$2.getUint8(3, true);
			return new InterfaceMessage.Ptr((_struct$6 = p$1.Header, new IfMsghdr.Ptr(_struct$6.Msglen, _struct$6.Version, _struct$6.Type, _struct$6.Addrs, _struct$6.Flags, _struct$6.Index, go$mapArray(_struct$6.Pad_cgo_0, function(entry) { return entry; }), (_struct$7 = _struct$6.Data, new IfData.Ptr(_struct$7.Type, _struct$7.Typelen, _struct$7.Physical, _struct$7.Addrlen, _struct$7.Hdrlen, _struct$7.Recvquota, _struct$7.Xmitquota, _struct$7.Unused1, _struct$7.Mtu, _struct$7.Metric, _struct$7.Baudrate, _struct$7.Ipackets, _struct$7.Ierrors, _struct$7.Opackets, _struct$7.Oerrors, _struct$7.Collisions, _struct$7.Ibytes, _struct$7.Obytes, _struct$7.Imcasts, _struct$7.Omcasts, _struct$7.Iqdrops, _struct$7.Noproto, _struct$7.Recvtiming, _struct$7.Xmittiming, (_struct$8 = _struct$7.Lastchange, new Timeval32.Ptr(_struct$8.Sec, _struct$8.Usec)), _struct$7.Unused2, _struct$7.Hwassist, _struct$7.Reserved1, _struct$7.Reserved2)))), go$subslice(b, 112, any.Msglen));
		} else if (_ref === 12 || _ref === 13) {
			_array$5 = new Uint8Array(4);
			p$2 = (_array$4 = _array$5, _struct$9 = new InterfaceAddrMessage.Ptr(), _view$5 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$9.Header.Msglen = _view$5.getUint16(0, true), _struct$9.Header.Version = _view$5.getUint8(2, true), _struct$9.Header.Type = _view$5.getUint8(3, true), _struct$9.Header.Addrs = _view$5.getInt32(4, true), _struct$9.Header.Flags = _view$5.getInt32(8, true), _struct$9.Header.Index = _view$5.getUint16(12, true), _struct$9.Header.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array$4.buffer, go$min(_array$4.byteOffset + 14, _array$4.buffer.byteLength)), _struct$9.Header.Metric = _view$5.getInt32(16, true), _struct$9);
			_struct$10 = any, _view$4 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$10.Msglen = _view$4.getUint16(0, true), _struct$10.Version = _view$4.getUint8(2, true), _struct$10.Type = _view$4.getUint8(3, true);
			return new InterfaceAddrMessage.Ptr((_struct$11 = p$2.Header, new IfaMsghdr.Ptr(_struct$11.Msglen, _struct$11.Version, _struct$11.Type, _struct$11.Addrs, _struct$11.Flags, _struct$11.Index, go$mapArray(_struct$11.Pad_cgo_0, function(entry) { return entry; }), _struct$11.Metric)), go$subslice(b, 20, any.Msglen));
		} else if (_ref === 19 || _ref === 16) {
			_array$7 = new Uint8Array(4);
			p$3 = (_array$6 = _array$7, _struct$12 = new InterfaceMulticastAddrMessage.Ptr(), _view$7 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$12.Header.Msglen = _view$7.getUint16(0, true), _struct$12.Header.Version = _view$7.getUint8(2, true), _struct$12.Header.Type = _view$7.getUint8(3, true), _struct$12.Header.Addrs = _view$7.getInt32(4, true), _struct$12.Header.Flags = _view$7.getInt32(8, true), _struct$12.Header.Index = _view$7.getUint16(12, true), _struct$12.Header.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array$6.buffer, go$min(_array$6.byteOffset + 14, _array$6.buffer.byteLength)), _struct$12.Header.Refcount = _view$7.getInt32(16, true), _struct$12);
			_struct$13 = any, _view$6 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$13.Msglen = _view$6.getUint16(0, true), _struct$13.Version = _view$6.getUint8(2, true), _struct$13.Type = _view$6.getUint8(3, true);
			return new InterfaceMulticastAddrMessage.Ptr((_struct$14 = p$3.Header, new IfmaMsghdr2.Ptr(_struct$14.Msglen, _struct$14.Version, _struct$14.Type, _struct$14.Addrs, _struct$14.Flags, _struct$14.Index, go$mapArray(_struct$14.Pad_cgo_0, function(entry) { return entry; }), _struct$14.Refcount)), go$subslice(b, 20, any.Msglen));
		}
		return null;
	};
	anyMessage.prototype.toRoutingMessage = function(b) { return this.go$val.toRoutingMessage(b); };
	InterfaceMulticastAddrMessage.Ptr.prototype.sockaddr = function() {
		var sas, m, b, i, y, _array, _struct, _view, rsa, _ref, _tuple, _array$1, _struct$1, _array$2, _struct$2, _view$1, _view$2, sa, e;
		sas = (go$sliceType(Sockaddr)).nil;
		m = this;
		if ((m.Header.Addrs & 50) === 0) {
			sas = (go$sliceType(Sockaddr)).nil;
			return sas;
		}
		b = m.Data;
		i = 0;
		while (i < 8) {
			if (((m.Header.Addrs & 50) & (((y = i, y < 32 ? (1 << y) : 0) >> 0))) === 0) {
				i = i + 1 >>> 0;
				continue;
			}
			rsa = (_array = go$sliceToArray(b), _struct = new RawSockaddr.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct);
			_ref = i;
			if (_ref === 5) {
				_array$2 = new Uint8Array(16);
				_tuple = anyToSockaddr((_array$1 = _array$2, _struct$1 = new RawSockaddrAny.Ptr(), _view$2 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$2.getUint8(0, true), _struct$1.Addr.Family = _view$2.getUint8(1, true), _struct$1.Addr.Data = new (go$nativeArray("Int8"))(_array$1.buffer, go$min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new (go$nativeArray("Int8"))(_array$1.buffer, go$min(_array$1.byteOffset + 16, _array$1.buffer.byteLength)), _struct$1)), sa = _tuple[0], e = _tuple[1];
				_struct$2 = rsa, _view$1 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$1.getUint8(0, true), _struct$2.Family = _view$1.getUint8(1, true), _struct$2.Data = new (go$nativeArray("Int8"))(_array$2.buffer, go$min(_array$2.byteOffset + 2, _array$2.buffer.byteLength));
				if (!(go$interfaceIsEqual(e, null))) {
					sas = (go$sliceType(Sockaddr)).nil;
					return sas;
				}
				sas = go$append(sas, sa);
			}
			b = go$subslice(b, rsaAlignOf((rsa.Len >> 0)));
			i = i + 1 >>> 0;
		}
		sas = sas;
		return sas;
	};
	InterfaceMulticastAddrMessage.prototype.sockaddr = function() { return this.go$val.sockaddr(); };
	var cmsgAlignOf = function(salen) {
		var salign;
		salign = 8;
		salign = 4;
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	var CmsgLen = go$pkg.CmsgLen = function(datalen) {
		return cmsgAlignOf(12) + datalen >> 0;
	};
	var CmsgSpace = go$pkg.CmsgSpace = function(datalen) {
		return cmsgAlignOf(12) + cmsgAlignOf(datalen) >> 0;
	};
	var cmsgData = function(h) {
		var _array, _struct, _view;
		_array = new Uint8Array(12);
		return (_array + (cmsgAlignOf(12) >>> 0) >>> 0);
	};
	var ParseSocketControlMessage = go$pkg.ParseSocketControlMessage = function(b) {
		var msgs, i, _tuple, h, dbuf, err, _struct, m, _struct$1, _struct$2;
		msgs = (go$sliceType(SocketControlMessage)).nil;
		i = 0;
		while ((i + CmsgLen(0) >> 0) <= b.length) {
			_tuple = socketControlMessageHeaderAndData(go$subslice(b, i)), h = _tuple[0], dbuf = _tuple[1], err = _tuple[2];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$sliceType(SocketControlMessage)).nil, err];
			}
			m = new SocketControlMessage.Ptr((_struct = h, new Cmsghdr.Ptr(_struct.Len, _struct.Level, _struct.Type)), dbuf);
			msgs = go$append(msgs, (_struct$1 = m, new SocketControlMessage.Ptr((_struct$2 = _struct$1.Header, new Cmsghdr.Ptr(_struct$2.Len, _struct$2.Level, _struct$2.Type)), _struct$1.Data)));
			i = i + (cmsgAlignOf((h.Len >> 0))) >> 0;
		}
		return [msgs, null];
	};
	var socketControlMessageHeaderAndData = function(b) {
		var _array, _struct, _view, h;
		h = (_array = go$sliceToArray(b), _struct = new Cmsghdr.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint32(0, true), _struct.Level = _view.getInt32(4, true), _struct.Type = _view.getInt32(8, true), _struct);
		if (h.Len < 12 || (h.Len >> 0) > b.length) {
			return [(go$ptrType(Cmsghdr)).nil, (go$sliceType(Go$Uint8)).nil, new Errno(22)];
		}
		return [h, go$subslice(b, cmsgAlignOf(12), h.Len), null];
	};
	var UnixRights = go$pkg.UnixRights = function(fds) {
		var x, x$1, datalen, b, _array, _struct, _view, h, data, _ref, _i, _slice, _index, fd;
		datalen = (x = fds.length, x$1 = 4, (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		b = (go$sliceType(Go$Uint8)).make(CmsgSpace(datalen), 0, function() { return 0; });
		h = (_array = go$sliceToArray(b), _struct = new Cmsghdr.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint32(0, true), _struct.Level = _view.getInt32(4, true), _struct.Type = _view.getInt32(8, true), _struct);
		h.Level = 65535;
		h.Type = 1;
		h.SetLen(CmsgLen(datalen));
		data = cmsgData(h);
		_ref = fds;
		_i = 0;
		for (; _i < _ref.length; _i += 1) {
			fd = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			data.go$set((fd >> 0));
			data = data + 4 >>> 0;
		}
		return b;
	};
	var ParseUnixRights = go$pkg.ParseUnixRights = function(m) {
		var fds, _tuple, i, j, _slice, _index, _slice$1, _index$1;
		if (!((m.Header.Level === 65535))) {
			return [(go$sliceType(Go$Int)).nil, new Errno(22)];
		}
		if (!((m.Header.Type === 1))) {
			return [(go$sliceType(Go$Int)).nil, new Errno(22)];
		}
		fds = (go$sliceType(Go$Int)).make(m.Data.length >> 2 >> 0, 0, function() { return 0; });
		_tuple = [0, 0], i = _tuple[0], j = _tuple[1];
		while (i < m.Data.length) {
			_slice$1 = fds, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = ((_slice = m.Data, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0)) : go$throwRuntimeError("index out of range");
			j = j + 1 >> 0;
			i = i + 4 >> 0;
		}
		return [fds, null];
	};
	var itoa = function(val) {
		var buf, i, _r, _q;
		if (val < 0) {
			return "-" + itoa(-val);
		}
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		i = 31;
		while (val >= 10) {
			buf[i] = (((_r = val % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			i = i - 1 >> 0;
			val = (_q = val / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		buf[i] = ((val + 48 >> 0) << 24 >>> 24);
		return go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(buf), i));
	};
	var StringByteSlice = go$pkg.StringByteSlice = function(s) {
		var _tuple, a, err;
		_tuple = ByteSliceFromString(s), a = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			throw go$panic(new Go$String("syscall: string with NUL passed to StringByteSlice"));
		}
		return a;
	};
	var ByteSliceFromString = go$pkg.ByteSliceFromString = function(s) {
		var i, a;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === 0) {
				return [(go$sliceType(Go$Uint8)).nil, new Errno(22)];
			}
			i = i + 1 >> 0;
		}
		a = (go$sliceType(Go$Uint8)).make(s.length + 1 >> 0, 0, function() { return 0; });
		go$copyString(a, s);
		return [a, null];
	};
	var StringBytePtr = go$pkg.StringBytePtr = function(s) {
		var v, _slice, _index, _slice$1, _index$1;
		return new (go$ptrType(Go$Uint8))(function() { return (_slice = StringByteSlice(s), _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = StringByteSlice(s), _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); });
	};
	var BytePtrFromString = go$pkg.BytePtrFromString = function(s) {
		var _tuple, a, err, v, _slice, _index, _slice$1, _index$1;
		_tuple = ByteSliceFromString(s), a = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Go$Uint8)).nil, err];
		}
		return [new (go$ptrType(Go$Uint8))(function() { return (_slice = a, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = a, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); }), null];
	};
	Timespec.Ptr.prototype.Unix = function() {
		var sec, nsec, ts, _tuple;
		sec = new Go$Int64(0, 0);
		nsec = new Go$Int64(0, 0);
		ts = this;
		_tuple = [ts.Sec, ts.Nsec], sec = _tuple[0], nsec = _tuple[1];
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.go$val.Unix(); };
	Timeval.Ptr.prototype.Unix = function() {
		var sec, nsec, tv, _tuple;
		sec = new Go$Int64(0, 0);
		nsec = new Go$Int64(0, 0);
		tv = this;
		_tuple = [tv.Sec, go$mul64(new Go$Int64(0, tv.Usec), new Go$Int64(0, 1000))], sec = _tuple[0], nsec = _tuple[1];
		return [sec, nsec];
	};
	Timeval.prototype.Unix = function() { return this.go$val.Unix(); };
	Timespec.Ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = go$mul64(ts.Sec, new Go$Int64(0, 1000000000)), x$1 = ts.Nsec, new Go$Int64(x.high + x$1.high, x.low + x$1.low));
	};
	Timespec.prototype.Nano = function() { return this.go$val.Nano(); };
	Timeval.Ptr.prototype.Nano = function() {
		var tv, x, x$1;
		tv = this;
		return (x = go$mul64(tv.Sec, new Go$Int64(0, 1000000000)), x$1 = go$mul64(new Go$Int64(0, tv.Usec), new Go$Int64(0, 1000)), new Go$Int64(x.high + x$1.high, x.low + x$1.low));
	};
	Timeval.prototype.Nano = function() { return this.go$val.Nano(); };
	var Getgroups = go$pkg.Getgroups = function() {
		var gids, err, _tuple, n, _tuple$1, _tuple$2, _tuple$3, a, _tuple$4, v, _slice, _index, _slice$1, _index$1, _tuple$5, _ref, _i, _slice$2, _index$2, v$1, i, _slice$3, _index$3;
		gids = (go$sliceType(Go$Int)).nil;
		err = null;
		_tuple = getgroups(0, (go$ptrType(_Gid_t)).nil), n = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [(go$sliceType(Go$Int)).nil, err], gids = _tuple$1[0], err = _tuple$1[1];
			return [gids, err];
		}
		if (n === 0) {
			_tuple$2 = [(go$sliceType(Go$Int)).nil, null], gids = _tuple$2[0], err = _tuple$2[1];
			return [gids, err];
		}
		if (n < 0 || n > 1000) {
			_tuple$3 = [(go$sliceType(Go$Int)).nil, new Errno(22)], gids = _tuple$3[0], err = _tuple$3[1];
			return [gids, err];
		}
		a = (go$sliceType(_Gid_t)).make(n, 0, function() { return 0; });
		_tuple$4 = getgroups(n, new (go$ptrType(_Gid_t))(function() { return (_slice = a, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = a, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); })), n = _tuple$4[0], err = _tuple$4[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$5 = [(go$sliceType(Go$Int)).nil, err], gids = _tuple$5[0], err = _tuple$5[1];
			return [gids, err];
		}
		gids = (go$sliceType(Go$Int)).make(n, 0, function() { return 0; });
		_ref = go$subslice(a, 0, n);
		_i = 0;
		for (; _i < _ref.length; _i += 1) {
			v$1 = (_slice$2 = _ref, _index$2 = _i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$3 = gids, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (v$1 >> 0)) : go$throwRuntimeError("index out of range");
		}
		return [gids, err];
	};
	var Setgroups = go$pkg.Setgroups = function(gids) {
		var err, a, _ref, _i, _slice, _index, v, i, _slice$1, _index$1, v$1, _slice$2, _index$2, _slice$3, _index$3;
		err = null;
		if (gids.length === 0) {
			err = setgroups(0, (go$ptrType(_Gid_t)).nil);
			return err;
		}
		a = (go$sliceType(_Gid_t)).make(gids.length, 0, function() { return 0; });
		_ref = gids;
		_i = 0;
		for (; _i < _ref.length; _i += 1) {
			v = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$1 = a, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (v >>> 0)) : go$throwRuntimeError("index out of range");
		}
		err = setgroups(a.length, new (go$ptrType(_Gid_t))(function() { return (_slice$2 = a, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")); }, function(v$1) { _slice$3 = a, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = v$1) : go$throwRuntimeError("index out of range"); }));
		return err;
	};
	var ReadDirent = go$pkg.ReadDirent = function(fd, buf) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = Getdirentries(fd, buf, new Uint8Array(8)), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	WaitStatus.prototype.Exited = function() {
		var w;
		w = this.go$val;
		return ((w & 127) >>> 0) === 0;
	};
	go$ptrType(WaitStatus).prototype.Exited = function() { return new WaitStatus(this.go$get()).Exited(); };
	WaitStatus.prototype.ExitStatus = function() {
		var w;
		w = this.go$val;
		if (!((((w & 127) >>> 0) === 0))) {
			return -1;
		}
		return ((w >>> 8 >>> 0) >> 0);
	};
	go$ptrType(WaitStatus).prototype.ExitStatus = function() { return new WaitStatus(this.go$get()).ExitStatus(); };
	WaitStatus.prototype.Signaled = function() {
		var w;
		w = this.go$val;
		return !((((w & 127) >>> 0) === 127)) && !((((w & 127) >>> 0) === 0));
	};
	go$ptrType(WaitStatus).prototype.Signaled = function() { return new WaitStatus(this.go$get()).Signaled(); };
	WaitStatus.prototype.Signal = function() {
		var w, sig;
		w = this.go$val;
		sig = (((w & 127) >>> 0) >> 0);
		if ((sig === 127) || (sig === 0)) {
			return -1;
		}
		return sig;
	};
	go$ptrType(WaitStatus).prototype.Signal = function() { return new WaitStatus(this.go$get()).Signal(); };
	WaitStatus.prototype.CoreDump = function() {
		var w;
		w = this.go$val;
		return (new WaitStatus(w)).Signaled() && !((((w & 128) >>> 0) === 0));
	};
	go$ptrType(WaitStatus).prototype.CoreDump = function() { return new WaitStatus(this.go$get()).CoreDump(); };
	WaitStatus.prototype.Stopped = function() {
		var w;
		w = this.go$val;
		return (((w & 127) >>> 0) === 127) && !((((w >>> 8 >>> 0) >> 0) === 17));
	};
	go$ptrType(WaitStatus).prototype.Stopped = function() { return new WaitStatus(this.go$get()).Stopped(); };
	WaitStatus.prototype.Continued = function() {
		var w;
		w = this.go$val;
		return (((w & 127) >>> 0) === 127) && (((w >>> 8 >>> 0) >> 0) === 17);
	};
	go$ptrType(WaitStatus).prototype.Continued = function() { return new WaitStatus(this.go$get()).Continued(); };
	WaitStatus.prototype.StopSignal = function() {
		var w;
		w = this.go$val;
		if (!(new WaitStatus(w)).Stopped()) {
			return -1;
		}
		return ((w >>> 8 >>> 0) >> 0) & 255;
	};
	go$ptrType(WaitStatus).prototype.StopSignal = function() { return new WaitStatus(this.go$get()).StopSignal(); };
	WaitStatus.prototype.TrapCause = function() {
		var w;
		w = this.go$val;
		return -1;
	};
	go$ptrType(WaitStatus).prototype.TrapCause = function() { return new WaitStatus(this.go$get()).TrapCause(); };
	var Wait4 = go$pkg.Wait4 = function(pid, wstatus, options, rusage) {
		var wpid, err, status, _tuple, v;
		wpid = 0;
		err = null;
		status = 0;
		_tuple = wait4(pid, new (go$ptrType(_C_int))(function() { return status; }, function(v) { status = v; }), options, rusage), wpid = _tuple[0], err = _tuple[1];
		if (!(go$pointerIsEqual(wstatus, (go$ptrType(WaitStatus)).nil))) {
			wstatus.go$set((status >>> 0));
		}
		return [wpid, err];
	};
	SockaddrInet4.Ptr.prototype.sockaddr = function() {
		var sa, v, p, i, _array, _struct, _view;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 16;
		sa.raw.Family = 2;
		p = new (go$ptrType(Go$Uint16))(function() { return sa.raw.Port; }, function(v) { sa.raw.Port = v; });
		p[0] = ((sa.Port >> 8 >> 0) << 24 >>> 24);
		p[1] = (sa.Port << 24 >>> 24);
		i = 0;
		while (i < 4) {
			sa.raw.Addr[i] = sa.Addr[i];
			i = i + 1 >> 0;
		}
		_array = new Uint8Array(16);
		return [_array, (sa.raw.Len >>> 0), null];
	};
	SockaddrInet4.prototype.sockaddr = function() { return this.go$val.sockaddr(); };
	SockaddrInet6.Ptr.prototype.sockaddr = function() {
		var sa, v, p, i, _array, _struct, _view;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 28;
		sa.raw.Family = 30;
		p = new (go$ptrType(Go$Uint16))(function() { return sa.raw.Port; }, function(v) { sa.raw.Port = v; });
		p[0] = ((sa.Port >> 8 >> 0) << 24 >>> 24);
		p[1] = (sa.Port << 24 >>> 24);
		sa.raw.Scope_id = sa.ZoneId;
		i = 0;
		while (i < 16) {
			sa.raw.Addr[i] = sa.Addr[i];
			i = i + 1 >> 0;
		}
		_array = new Uint8Array(28);
		return [_array, (sa.raw.Len >>> 0), null];
	};
	SockaddrInet6.prototype.sockaddr = function() { return this.go$val.sockaddr(); };
	SockaddrUnix.Ptr.prototype.sockaddr = function() {
		var sa, name, n, i, _array, _struct, _view;
		sa = this;
		name = sa.Name;
		n = name.length;
		if (n >= 104 || (n === 0)) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = ((3 + n >> 0) << 24 >>> 24);
		sa.raw.Family = 1;
		i = 0;
		while (i < n) {
			sa.raw.Path[i] = (name.charCodeAt(i) << 24 >> 24);
			i = i + 1 >> 0;
		}
		_array = new Uint8Array(106);
		return [_array, (sa.raw.Len >>> 0), null];
	};
	SockaddrUnix.prototype.sockaddr = function() { return this.go$val.sockaddr(); };
	SockaddrDatalink.Ptr.prototype.sockaddr = function() {
		var sa, i, _array, _struct, _view;
		sa = this;
		if (sa.Index === 0) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = sa.Len;
		sa.raw.Family = 18;
		sa.raw.Index = sa.Index;
		sa.raw.Type = sa.Type;
		sa.raw.Nlen = sa.Nlen;
		sa.raw.Alen = sa.Alen;
		sa.raw.Slen = sa.Slen;
		i = 0;
		while (i < 12) {
			sa.raw.Data[i] = sa.Data[i];
			i = i + 1 >> 0;
		}
		_array = new Uint8Array(20);
		return [_array, 20, null];
	};
	SockaddrDatalink.prototype.sockaddr = function() { return this.go$val.sockaddr(); };
	var anyToSockaddr = function(rsa) {
		var _ref, _array, _struct, _array$1, _struct$1, _view, _view$1, pp, sa, i, _array$2, _struct$2, _array$3, _struct$3, _view$2, _view$3, pp$1, sa$1, n, i$1, bytes, _array$4, _struct$4, _array$5, _struct$5, _view$4, _view$5, pp$2, sa$2, v, p, i$2, _array$6, _struct$6, _array$7, _struct$7, _view$6, _view$7, pp$3, sa$3, v$1, p$1, i$3;
		_ref = rsa.Addr.Family;
		if (_ref === 18) {
			_array$1 = new Uint8Array(108);
			pp = (_array = _array$1, _struct = new RawSockaddrDatalink.Ptr(), _view$1 = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view$1.getUint8(0, true), _struct.Family = _view$1.getUint8(1, true), _struct.Index = _view$1.getUint16(2, true), _struct.Type = _view$1.getUint8(4, true), _struct.Nlen = _view$1.getUint8(5, true), _struct.Alen = _view$1.getUint8(6, true), _struct.Slen = _view$1.getUint8(7, true), _struct.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct);
			_struct$1 = rsa, _view = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view.getUint8(0, true), _struct$1.Addr.Family = _view.getUint8(1, true), _struct$1.Addr.Data = new (go$nativeArray("Int8"))(_array$1.buffer, go$min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new (go$nativeArray("Int8"))(_array$1.buffer, go$min(_array$1.byteOffset + 16, _array$1.buffer.byteLength));
			sa = new SockaddrDatalink.Ptr();
			sa.Len = pp.Len;
			sa.Family = pp.Family;
			sa.Index = pp.Index;
			sa.Type = pp.Type;
			sa.Nlen = pp.Nlen;
			sa.Alen = pp.Alen;
			sa.Slen = pp.Slen;
			i = 0;
			while (i < 12) {
				sa.Data[i] = pp.Data[i];
				i = i + 1 >> 0;
			}
			return [sa, null];
		} else if (_ref === 1) {
			_array$3 = new Uint8Array(108);
			pp$1 = (_array$2 = _array$3, _struct$2 = new RawSockaddrUnix.Ptr(), _view$3 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$3.getUint8(0, true), _struct$2.Family = _view$3.getUint8(1, true), _struct$2.Path = new (go$nativeArray("Int8"))(_array$2.buffer, go$min(_array$2.byteOffset + 2, _array$2.buffer.byteLength)), _struct$2);
			_struct$3 = rsa, _view$2 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Len = _view$2.getUint8(0, true), _struct$3.Addr.Family = _view$2.getUint8(1, true), _struct$3.Addr.Data = new (go$nativeArray("Int8"))(_array$3.buffer, go$min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new (go$nativeArray("Int8"))(_array$3.buffer, go$min(_array$3.byteOffset + 16, _array$3.buffer.byteLength));
			if (pp$1.Len < 3 || pp$1.Len > 106) {
				return [null, new Errno(22)];
			}
			sa$1 = new SockaddrUnix.Ptr();
			n = (pp$1.Len >> 0) - 3 >> 0;
			i$1 = 0;
			while (i$1 < n) {
				if (pp$1.Path[i$1] === 0) {
					n = i$1;
					break;
				}
				i$1 = i$1 + 1 >> 0;
			}
			bytes = go$subslice(new (go$sliceType(Go$Uint8))(go$sliceToArray(new (go$sliceType(Go$Uint8))(pp$1.Path))), 0, n);
			sa$1.Name = go$bytesToString(bytes);
			return [sa$1, null];
		} else if (_ref === 2) {
			_array$5 = new Uint8Array(108);
			pp$2 = (_array$4 = _array$5, _struct$4 = new RawSockaddrInet4.Ptr(), _view$5 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$5.getUint8(0, true), _struct$4.Family = _view$5.getUint8(1, true), _struct$4.Port = _view$5.getUint16(2, true), _struct$4.Addr = new (go$nativeArray("Uint8"))(_array$4.buffer, go$min(_array$4.byteOffset + 4, _array$4.buffer.byteLength)), _struct$4.Zero = new (go$nativeArray("Int8"))(_array$4.buffer, go$min(_array$4.byteOffset + 8, _array$4.buffer.byteLength)), _struct$4);
			_struct$5 = rsa, _view$4 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$5.Addr.Len = _view$4.getUint8(0, true), _struct$5.Addr.Family = _view$4.getUint8(1, true), _struct$5.Addr.Data = new (go$nativeArray("Int8"))(_array$5.buffer, go$min(_array$5.byteOffset + 2, _array$5.buffer.byteLength)), _struct$5.Pad = new (go$nativeArray("Int8"))(_array$5.buffer, go$min(_array$5.byteOffset + 16, _array$5.buffer.byteLength));
			sa$2 = new SockaddrInet4.Ptr();
			p = new (go$ptrType(Go$Uint16))(function() { return pp$2.Port; }, function(v) { pp$2.Port = v; });
			sa$2.Port = ((p[0] >> 0) << 8 >> 0) + (p[1] >> 0) >> 0;
			i$2 = 0;
			while (i$2 < 4) {
				sa$2.Addr[i$2] = pp$2.Addr[i$2];
				i$2 = i$2 + 1 >> 0;
			}
			return [sa$2, null];
		} else if (_ref === 30) {
			_array$7 = new Uint8Array(108);
			pp$3 = (_array$6 = _array$7, _struct$6 = new RawSockaddrInet6.Ptr(), _view$7 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$6.Len = _view$7.getUint8(0, true), _struct$6.Family = _view$7.getUint8(1, true), _struct$6.Port = _view$7.getUint16(2, true), _struct$6.Flowinfo = _view$7.getUint32(4, true), _struct$6.Addr = new (go$nativeArray("Uint8"))(_array$6.buffer, go$min(_array$6.byteOffset + 8, _array$6.buffer.byteLength)), _struct$6.Scope_id = _view$7.getUint32(24, true), _struct$6);
			_struct$7 = rsa, _view$6 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$7.Addr.Len = _view$6.getUint8(0, true), _struct$7.Addr.Family = _view$6.getUint8(1, true), _struct$7.Addr.Data = new (go$nativeArray("Int8"))(_array$7.buffer, go$min(_array$7.byteOffset + 2, _array$7.buffer.byteLength)), _struct$7.Pad = new (go$nativeArray("Int8"))(_array$7.buffer, go$min(_array$7.byteOffset + 16, _array$7.buffer.byteLength));
			sa$3 = new SockaddrInet6.Ptr();
			p$1 = new (go$ptrType(Go$Uint16))(function() { return pp$3.Port; }, function(v$1) { pp$3.Port = v$1; });
			sa$3.Port = ((p$1[0] >> 0) << 8 >> 0) + (p$1[1] >> 0) >> 0;
			sa$3.ZoneId = pp$3.Scope_id;
			i$3 = 0;
			while (i$3 < 16) {
				sa$3.Addr[i$3] = pp$3.Addr[i$3];
				i$3 = i$3 + 1 >> 0;
			}
			return [sa$3, null];
		}
		return [null, new Errno(47)];
	};
	var Accept = go$pkg.Accept = function(fd) {
		var nfd, sa, err, rsa, len, _tuple, v, _tuple$1, _tuple$2;
		nfd = 0;
		sa = null;
		err = null;
		rsa = new RawSockaddrAny.Ptr();
		len = 108;
		_tuple = accept(fd, rsa, new (go$ptrType(_Socklen))(function() { return len; }, function(v) { len = v; })), nfd = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [nfd, sa, err];
		}
		if (true && (len === 0)) {
			Close(nfd);
			_tuple$1 = [0, null, new Errno(53)], nfd = _tuple$1[0], sa = _tuple$1[1], err = _tuple$1[2];
			return [nfd, sa, err];
		}
		_tuple$2 = anyToSockaddr(rsa), sa = _tuple$2[0], err = _tuple$2[1];
		if (!(go$interfaceIsEqual(err, null))) {
			Close(nfd);
			nfd = 0;
		}
		return [nfd, sa, err];
	};
	var Getsockname = go$pkg.Getsockname = function(fd) {
		var sa, err, rsa, len, v, _tuple;
		sa = null;
		err = null;
		rsa = new RawSockaddrAny.Ptr();
		len = 108;
		if (err = getsockname(fd, rsa, new (go$ptrType(_Socklen))(function() { return len; }, function(v) { len = v; })), !(go$interfaceIsEqual(err, null))) {
			return [sa, err];
		}
		_tuple = anyToSockaddr(rsa), sa = _tuple[0], err = _tuple[1];
		return [sa, err];
	};
	var GetsockoptByte = go$pkg.GetsockoptByte = function(fd, level, opt) {
		var value, err, n, vallen, v, v$1, _tuple;
		value = 0;
		err = null;
		n = 0;
		vallen = 1;
		err = getsockopt(fd, level, opt, new (go$ptrType(Go$Uint8))(function() { return n; }, function(v) { n = v; }), new (go$ptrType(_Socklen))(function() { return vallen; }, function(v$1) { vallen = v$1; }));
		_tuple = [n, err], value = _tuple[0], err = _tuple[1];
		return [value, err];
	};
	var GetsockoptInet4Addr = go$pkg.GetsockoptInet4Addr = function(fd, level, opt) {
		var value, err, vallen, v, _tuple;
		value = go$makeNativeArray("Uint8", 4, function() { return 0; });
		err = null;
		vallen = 4;
		err = getsockopt(fd, level, opt, go$sliceToArray(new (go$sliceType(Go$Uint8))(value)), new (go$ptrType(_Socklen))(function() { return vallen; }, function(v) { vallen = v; }));
		_tuple = [go$mapArray(value, function(entry) { return entry; }), err], value = _tuple[0], err = _tuple[1];
		return [go$mapArray(value, function(entry) { return entry; }), err];
	};
	var GetsockoptIPMreq = go$pkg.GetsockoptIPMreq = function(fd, level, opt) {
		var value, vallen, _array, _struct, _view, v, err;
		value = new IPMreq.Ptr();
		vallen = 8;
		_array = new Uint8Array(8);
		err = getsockopt(fd, level, opt, _array, new (go$ptrType(_Socklen))(function() { return vallen; }, function(v) { vallen = v; }));
		_struct = value, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 4, _array.buffer.byteLength));
		return [value, err];
	};
	var GetsockoptIPv6Mreq = go$pkg.GetsockoptIPv6Mreq = function(fd, level, opt) {
		var value, vallen, _array, _struct, _view, v, err;
		value = new IPv6Mreq.Ptr();
		vallen = 20;
		_array = new Uint8Array(20);
		err = getsockopt(fd, level, opt, _array, new (go$ptrType(_Socklen))(function() { return vallen; }, function(v) { vallen = v; }));
		_struct = value, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = _view.getUint32(16, true);
		return [value, err];
	};
	var GetsockoptIPv6MTUInfo = go$pkg.GetsockoptIPv6MTUInfo = function(fd, level, opt) {
		var value, vallen, _array, _struct, _view, v, err;
		value = new IPv6MTUInfo.Ptr();
		vallen = 32;
		_array = new Uint8Array(32);
		err = getsockopt(fd, level, opt, _array, new (go$ptrType(_Socklen))(function() { return vallen; }, function(v) { vallen = v; }));
		_struct = value, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Port = _view.getUint16(2, true), _struct.Addr.Flowinfo = _view.getUint32(4, true), _struct.Addr.Addr = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Addr.Scope_id = _view.getUint32(24, true), _struct.Mtu = _view.getUint32(28, true);
		return [value, err];
	};
	var GetsockoptICMPv6Filter = go$pkg.GetsockoptICMPv6Filter = function(fd, level, opt) {
		var value, vallen, _array, _struct, _view, v, err;
		value = new ICMPv6Filter.Ptr();
		vallen = 32;
		_array = new Uint8Array(32);
		err = getsockopt(fd, level, opt, _array, new (go$ptrType(_Socklen))(function() { return vallen; }, function(v) { vallen = v; }));
		_struct = value, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Filt = new (go$nativeArray("Uint32"))(_array.buffer, go$min(_array.byteOffset + 0, _array.buffer.byteLength));
		return [value, err];
	};
	var Recvmsg = go$pkg.Recvmsg = function(fd, p, oob, flags) {
		var n, oobn, recvflags, from, err, msg, rsa, _array, _struct, _view, iov, dummy, v, _tuple, _tuple$1;
		n = 0;
		oobn = 0;
		recvflags = 0;
		from = null;
		err = null;
		msg = new Msghdr.Ptr();
		rsa = new RawSockaddrAny.Ptr();
		_array = new Uint8Array(108);
		msg.Name = _array;
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 16, _array.buffer.byteLength));
		msg.Namelen = 108;
		iov = new Iovec.Ptr();
		if (p.length > 0) {
			iov.Base = go$sliceToArray(p);
			iov.SetLen(p.length);
		}
		dummy = 0;
		if (oob.length > 0) {
			if (p.length === 0) {
				iov.Base = new (go$ptrType(Go$Uint8))(function() { return dummy; }, function(v) { dummy = v; });
				iov.SetLen(1);
			}
			msg.Control = go$sliceToArray(oob);
			msg.SetControllen(oob.length);
		}
		msg.Iov = iov;
		msg.Iovlen = 1;
		if (_tuple = recvmsg(fd, msg, flags), n = _tuple[0], err = _tuple[1], !(go$interfaceIsEqual(err, null))) {
			return [n, oobn, recvflags, from, err];
		}
		oobn = (msg.Controllen >> 0);
		recvflags = (msg.Flags >> 0);
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa), from = _tuple$1[0], err = _tuple$1[1];
		}
		return [n, oobn, recvflags, from, err];
	};
	var Sendmsg = go$pkg.Sendmsg = function(fd, p, oob, to, flags) {
		var err, ptr, salen, _tuple, msg, iov, dummy, v;
		err = null;
		ptr = 0;
		salen = 0;
		if (!(go$interfaceIsEqual(to, null))) {
			_tuple = to.sockaddr(), ptr = _tuple[0], salen = _tuple[1], err = _tuple[2];
			if (!(go$interfaceIsEqual(err, null))) {
				return err;
			}
		}
		msg = new Msghdr.Ptr();
		msg.Name = ptr;
		msg.Namelen = (salen >>> 0);
		iov = new Iovec.Ptr();
		if (p.length > 0) {
			iov.Base = go$sliceToArray(p);
			iov.SetLen(p.length);
		}
		dummy = 0;
		if (oob.length > 0) {
			if (p.length === 0) {
				iov.Base = new (go$ptrType(Go$Uint8))(function() { return dummy; }, function(v) { dummy = v; });
				iov.SetLen(1);
			}
			msg.Control = go$sliceToArray(oob);
			msg.SetControllen(oob.length);
		}
		msg.Iov = iov;
		msg.Iovlen = 1;
		if (err = sendmsg(fd, msg, flags), !(go$interfaceIsEqual(err, null))) {
			return err;
		}
		return err;
	};
	var Kevent = go$pkg.Kevent = function(kq, changes, events, timeout) {
		var n, err, _tuple, change, event, _tuple$1;
		n = 0;
		err = null;
		_tuple = [0, 0], change = _tuple[0], event = _tuple[1];
		if (changes.length > 0) {
			change = go$sliceToArray(changes);
		}
		if (events.length > 0) {
			event = go$sliceToArray(events);
		}
		_tuple$1 = kevent(kq, change, changes.length, event, events.length, timeout), n = _tuple$1[0], err = _tuple$1[1];
		return [n, err];
	};
	var Sysctl = go$pkg.Sysctl = function(name) {
		var value, err, _tuple, mib, _tuple$1, n, v, _tuple$2, _tuple$3, buf, v$1, _slice, _index, _slice$1, _index$1, v$2, _tuple$4, _slice$2, _index$2, _tuple$5;
		value = "";
		err = null;
		_tuple = nametomib(name), mib = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = ["", err], value = _tuple$1[0], err = _tuple$1[1];
			return [value, err];
		}
		n = 0;
		if (err = sysctl(mib, (go$ptrType(Go$Uint8)).nil, new (go$ptrType(Go$Uintptr))(function() { return n; }, function(v) { n = v; }), (go$ptrType(Go$Uint8)).nil, 0), !(go$interfaceIsEqual(err, null))) {
			_tuple$2 = ["", err], value = _tuple$2[0], err = _tuple$2[1];
			return [value, err];
		}
		if (n === 0) {
			_tuple$3 = ["", null], value = _tuple$3[0], err = _tuple$3[1];
			return [value, err];
		}
		buf = (go$sliceType(Go$Uint8)).make(n, 0, function() { return 0; });
		if (err = sysctl(mib, new (go$ptrType(Go$Uint8))(function() { return (_slice = buf, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v$1) { _slice$1 = buf, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v$1) : go$throwRuntimeError("index out of range"); }), new (go$ptrType(Go$Uintptr))(function() { return n; }, function(v$2) { n = v$2; }), (go$ptrType(Go$Uint8)).nil, 0), !(go$interfaceIsEqual(err, null))) {
			_tuple$4 = ["", err], value = _tuple$4[0], err = _tuple$4[1];
			return [value, err];
		}
		if (n > 0 && ((_slice$2 = buf, _index$2 = (n - 1 >>> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 0)) {
			n = n - 1 >>> 0;
		}
		_tuple$5 = [go$bytesToString(go$subslice(buf, 0, n)), null], value = _tuple$5[0], err = _tuple$5[1];
		return [value, err];
	};
	var SysctlUint32 = go$pkg.SysctlUint32 = function(name) {
		var value, err, _tuple, mib, _tuple$1, n, buf, v, _slice, _index, _slice$1, _index$1, v$1, _tuple$2, _tuple$3, _slice$2, _index$2, _tuple$4;
		value = 0;
		err = null;
		_tuple = nametomib(name), mib = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [0, err], value = _tuple$1[0], err = _tuple$1[1];
			return [value, err];
		}
		n = 4;
		buf = (go$sliceType(Go$Uint8)).make(4, 0, function() { return 0; });
		if (err = sysctl(mib, new (go$ptrType(Go$Uint8))(function() { return (_slice = buf, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = buf, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); }), new (go$ptrType(Go$Uintptr))(function() { return n; }, function(v$1) { n = v$1; }), (go$ptrType(Go$Uint8)).nil, 0), !(go$interfaceIsEqual(err, null))) {
			_tuple$2 = [0, err], value = _tuple$2[0], err = _tuple$2[1];
			return [value, err];
		}
		if (!((n === 4))) {
			_tuple$3 = [0, new Errno(5)], value = _tuple$3[0], err = _tuple$3[1];
			return [value, err];
		}
		_tuple$4 = [(_slice$2 = buf, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), null], value = _tuple$4[0], err = _tuple$4[1];
		return [value, err];
	};
	var Utimes = go$pkg.Utimes = function(path, tv) {
		var err;
		err = null;
		if (!((tv.length === 2))) {
			err = new Errno(22);
			return err;
		}
		err = utimes(path, go$sliceToArray(tv));
		return err;
	};
	var UtimesNano = go$pkg.UtimesNano = function(path, ts) {
		var _slice, _index, _struct, _struct$1, _slice$1, _index$1, _struct$2, _struct$3, tv;
		if (!((ts.length === 2))) {
			return new Errno(22);
		}
		tv = go$toNativeArray("Struct", [(_struct$1 = NsecToTimeval(TimespecToNsec((_struct = (_slice = ts, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new Timespec.Ptr(_struct.Sec, _struct.Nsec)))), new Timeval.Ptr(_struct$1.Sec, _struct$1.Usec, go$mapArray(_struct$1.Pad_cgo_0, function(entry) { return entry; }))), (_struct$3 = NsecToTimeval(TimespecToNsec((_struct$2 = (_slice$1 = ts, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new Timespec.Ptr(_struct$2.Sec, _struct$2.Nsec)))), new Timeval.Ptr(_struct$3.Sec, _struct$3.Usec, go$mapArray(_struct$3.Pad_cgo_0, function(entry) { return entry; })))]);
		return utimes(path, go$sliceToArray(new (go$sliceType(Go$Uint8))(tv)));
	};
	var Futimes = go$pkg.Futimes = function(fd, tv) {
		var err;
		err = null;
		if (!((tv.length === 2))) {
			err = new Errno(22);
			return err;
		}
		err = futimes(fd, go$sliceToArray(tv));
		return err;
	};
	var Mmap = go$pkg.Mmap = function(fd, offset, length, prot, flags) {
		var data, err, _tuple;
		data = (go$sliceType(Go$Uint8)).nil;
		err = null;
		_tuple = mapper.Mmap(fd, offset, length, prot, flags), data = _tuple[0], err = _tuple[1];
		return [data, err];
	};
	var Munmap = go$pkg.Munmap = function(b) {
		var err;
		err = null;
		err = mapper.Munmap(b);
		return err;
	};
	var Getwd = go$pkg.Getwd = function() {
		var buf, _tuple, attrs, err, _slice, _index, _slice$1, _index$1, wd;
		buf = (go$sliceType(Go$Uint8)).make(2048, 0, function() { return 0; });
		_tuple = getAttrList(".", new attrList.Ptr(0, 0, 134217728, 0, 0, 0, 0), buf, 0), attrs = _tuple[0], err = _tuple[1];
		if (go$interfaceIsEqual(err, null) && (attrs.length === 1) && (_slice = attrs, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).length >= 2) {
			wd = go$bytesToString((_slice$1 = attrs, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
			if ((wd.charCodeAt(0) === 47) && (wd.charCodeAt((wd.length - 1 >> 0)) === 0)) {
				return [wd.substring(0, (wd.length - 1 >> 0)), null];
			}
		}
		return ["", new Errno(45)];
	};
	var nametomib = function(name) {
		var mib, err, buf, n, p, _tuple, bytes, _tuple$1, v, v$1, _slice, _index, _slice$1, _index$1, _tuple$2, _q, _tuple$3;
		mib = (go$sliceType(_C_int)).nil;
		err = null;
		buf = go$makeNativeArray("Int32", 14, function() { return 0; });
		n = 48;
		p = go$sliceToArray(new (go$sliceType(Go$Uint8))(buf));
		_tuple = ByteSliceFromString(name), bytes = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [(go$sliceType(_C_int)).nil, err], mib = _tuple$1[0], err = _tuple$1[1];
			return [mib, err];
		}
		if (err = sysctl(new (go$sliceType(_C_int))([0, 3]), p, new (go$ptrType(Go$Uintptr))(function() { return n; }, function(v) { n = v; }), new (go$ptrType(Go$Uint8))(function() { return (_slice = bytes, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v$1) { _slice$1 = bytes, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v$1) : go$throwRuntimeError("index out of range"); }), (name.length >>> 0)), !(go$interfaceIsEqual(err, null))) {
			_tuple$2 = [(go$sliceType(_C_int)).nil, err], mib = _tuple$2[0], err = _tuple$2[1];
			return [mib, err];
		}
		_tuple$3 = [go$subslice(new (go$sliceType(_C_int))(buf), 0, (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"))), null], mib = _tuple$3[0], err = _tuple$3[1];
		return [mib, err];
	};
	var ParseDirent = go$pkg.ParseDirent = function(buf, max, names) {
		var consumed, count, newnames, origlen, dirent, _array, _struct, _view, x, bytes, name, _tuple;
		consumed = 0;
		count = 0;
		newnames = (go$sliceType(Go$String)).nil;
		origlen = buf.length;
		while (!((max === 0)) && buf.length > 0) {
			dirent = [undefined];
			dirent[0] = (_array = go$sliceToArray(buf), _struct = new Dirent.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new Go$Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Seekoff = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Namlen = _view.getUint16(18, true), _struct.Type = _view.getUint8(20, true), _struct.Name = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 21, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 1045, _array.buffer.byteLength)), _struct);
			if (dirent[0].Reclen === 0) {
				buf = (go$sliceType(Go$Uint8)).nil;
				break;
			}
			buf = go$subslice(buf, dirent[0].Reclen);
			if ((x = dirent[0].Ino, (x.high === 0 && x.low === 0))) {
				continue;
			}
			bytes = go$sliceToArray(new (go$sliceType(Go$Uint8))(dirent[0].Name));
			name = go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(bytes), 0, dirent[0].Namlen));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - 1 >> 0;
			count = count + 1 >> 0;
			names = go$append(names, name);
		}
		_tuple = [origlen - buf.length >> 0, count, names], consumed = _tuple[0], count = _tuple[1], newnames = _tuple[2];
		return [consumed, count, newnames];
	};
	var PtraceAttach = go$pkg.PtraceAttach = function(pid) {
		var err;
		err = null;
		err = ptrace(10, pid, 0, 0);
		return err;
	};
	var PtraceDetach = go$pkg.PtraceDetach = function(pid) {
		var err;
		err = null;
		err = ptrace(11, pid, 0, 0);
		return err;
	};
	var getAttrList = function(path, attrList$1, attrBuf, options) {
		var attrs, err, _tuple, _p0, _tuple$1, _tuple$2, _tuple$3, _array, _struct, _view, e1, _tuple$4, _slice, _index, size, dat, i, header, _tuple$5, _slice$1, _index$1, datOff, _slice$2, _index$2, attrLen, _tuple$6, end, r, _r;
		attrs = (go$sliceType((go$sliceType(Go$Uint8)))).nil;
		err = null;
		if (attrBuf.length < 4) {
			_tuple = [(go$sliceType((go$sliceType(Go$Uint8)))).nil, errors$1.New("attrBuf too small")], attrs = _tuple[0], err = _tuple[1];
			return [attrs, err];
		}
		attrList$1.bitmapCount = 5;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple$1 = BytePtrFromString(path), _p0 = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$2 = [(go$sliceType((go$sliceType(Go$Uint8)))).nil, err], attrs = _tuple$2[0], err = _tuple$2[1];
			return [attrs, err];
		}
		_array = new Uint8Array(24);
		_tuple$3 = Syscall6(220, _p0, _array, go$sliceToArray(attrBuf), (attrBuf.length >>> 0), (options >>> 0), 0), e1 = _tuple$3[2];
		_struct = attrList$1, _view = new DataView(_array.buffer, _array.byteOffset), _struct.bitmapCount = _view.getUint16(0, true), _struct._$1 = _view.getUint16(2, true), _struct.CommonAttr = _view.getUint32(4, true), _struct.VolAttr = _view.getUint32(8, true), _struct.DirAttr = _view.getUint32(12, true), _struct.FileAttr = _view.getUint32(16, true), _struct.Forkattr = _view.getUint32(20, true);
		if (!((e1 === 0))) {
			_tuple$4 = [(go$sliceType((go$sliceType(Go$Uint8)))).nil, new Errno(e1)], attrs = _tuple$4[0], err = _tuple$4[1];
			return [attrs, err];
		}
		size = (_slice = attrBuf, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		dat = attrBuf;
		if ((size >> 0) < attrBuf.length) {
			dat = go$subslice(dat, 0, size);
		}
		dat = go$subslice(dat, 4);
		i = 0;
		while ((i >> 0) < dat.length) {
			header = [undefined];
			header[0] = go$subslice(dat, i);
			if (header[0].length < 8) {
				_tuple$5 = [attrs, errors$1.New("truncated attribute header")], attrs = _tuple$5[0], err = _tuple$5[1];
				return [attrs, err];
			}
			datOff = (_slice$1 = header[0], _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			attrLen = (_slice$2 = header[0], _index$2 = 4, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			if (datOff < 0 || ((datOff >>> 0) + attrLen >>> 0) > (dat.length >>> 0)) {
				_tuple$6 = [attrs, errors$1.New("truncated results; attrBuf too small")], attrs = _tuple$6[0], err = _tuple$6[1];
				return [attrs, err];
			}
			end = (datOff >>> 0) + attrLen >>> 0;
			attrs = go$append(attrs, go$subslice(dat, datOff, end));
			i = end;
			if (r = (_r = i % 4, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")), !((r === 0))) {
				i = i + (((4 - r >>> 0))) >>> 0;
			}
		}
		return [attrs, err];
	};
	var Pipe = go$pkg.Pipe = function(p) {
		var err, _tuple, _slice, _index, _slice$1, _index$1;
		err = null;
		if (!((p.length === 2))) {
			err = new Errno(22);
			return err;
		}
		_tuple = pipe(), _slice = p, _index = 0, (_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = _tuple[0]) : go$throwRuntimeError("index out of range"), _slice$1 = p, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = _tuple[1]) : go$throwRuntimeError("index out of range"), err = _tuple[2];
		return err;
	};
	var Kill = go$pkg.Kill = function(pid, signum) {
		var err;
		err = null;
		err = kill(pid, (signum >> 0), 1);
		return err;
	};
	var Getpagesize = go$pkg.Getpagesize = function() {
		return 4096;
	};
	var TimespecToNsec = go$pkg.TimespecToNsec = function(ts) {
		var x, x$1;
		return (x = go$mul64(ts.Sec, new Go$Int64(0, 1000000000)), x$1 = ts.Nsec, new Go$Int64(x.high + x$1.high, x.low + x$1.low));
	};
	var NsecToTimespec = go$pkg.NsecToTimespec = function(nsec) {
		var ts, _struct;
		ts = new Timespec.Ptr();
		ts.Sec = go$div64(nsec, new Go$Int64(0, 1000000000), false);
		ts.Nsec = go$div64(nsec, new Go$Int64(0, 1000000000), true);
		return (_struct = ts, new Timespec.Ptr(_struct.Sec, _struct.Nsec));
	};
	var TimevalToNsec = go$pkg.TimevalToNsec = function(tv) {
		var x, x$1;
		return (x = go$mul64(tv.Sec, new Go$Int64(0, 1000000000)), x$1 = go$mul64(new Go$Int64(0, tv.Usec), new Go$Int64(0, 1000)), new Go$Int64(x.high + x$1.high, x.low + x$1.low));
	};
	var NsecToTimeval = go$pkg.NsecToTimeval = function(nsec) {
		var tv, x, _struct;
		tv = new Timeval.Ptr();
		nsec = new Go$Int64(nsec.high + 0, nsec.low + 999);
		tv.Usec = ((x = go$div64(go$div64(nsec, new Go$Int64(0, 1000000000), true), new Go$Int64(0, 1000), false), x.low + ((x.high >> 31) * 4294967296)) >> 0);
		tv.Sec = go$div64(nsec, new Go$Int64(0, 1000000000), false);
		return (_struct = tv, new Timeval.Ptr(_struct.Sec, _struct.Usec, go$mapArray(_struct.Pad_cgo_0, function(entry) { return entry; })));
	};
	var Gettimeofday = go$pkg.Gettimeofday = function(tv) {
		var err, _tuple, sec, usec;
		err = null;
		_tuple = gettimeofday(tv), sec = _tuple[0], usec = _tuple[1], err = _tuple[2];
		tv.Sec = sec;
		tv.Usec = usec;
		err = err;
		return err;
	};
	var SetKevent = go$pkg.SetKevent = function(k, fd, mode, flags) {
		k.Ident = new Go$Uint64(0, fd);
		k.Filter = (mode << 16 >> 16);
		k.Flags = (flags << 16 >>> 16);
	};
	Iovec.Ptr.prototype.SetLen = function(length) {
		var iov;
		iov = this;
		iov.Len = new Go$Uint64(0, length);
	};
	Iovec.prototype.SetLen = function(length) { return this.go$val.SetLen(length); };
	Msghdr.Ptr.prototype.SetControllen = function(length) {
		var msghdr;
		msghdr = this;
		msghdr.Controllen = (length >>> 0);
	};
	Msghdr.prototype.SetControllen = function(length) { return this.go$val.SetControllen(length); };
	Cmsghdr.Ptr.prototype.SetLen = function(length) {
		var cmsg;
		cmsg = this;
		cmsg.Len = (length >>> 0);
	};
	Cmsghdr.prototype.SetLen = function(length) { return this.go$val.SetLen(length); };
	var sendfile = function(outfd, infd, offset, count) {
		var written, err, length, _tuple, v, e1;
		written = 0;
		err = null;
		length = new Go$Uint64(0, count);
		_tuple = Syscall6(337, (infd >>> 0), (outfd >>> 0), (offset.go$get().low >>> 0), new (go$ptrType(Go$Uint64))(function() { return length; }, function(v) { length = v; }), 0, 0), e1 = _tuple[2];
		written = (length.low >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [written, err];
	};
	var Syscall9 = go$pkg.Syscall9 = function(num, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
		throw go$panic("Native function not implemented: Syscall9");
	};
	var Syscall = go$pkg.Syscall = function(trap, a1, a2, a3) {
		throw go$panic("Native function not implemented: Syscall");
	};
	var Syscall6 = go$pkg.Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		throw go$panic("Native function not implemented: Syscall6");
	};
	var RawSyscall = go$pkg.RawSyscall = function(trap, a1, a2, a3) {
		throw go$panic("Native function not implemented: RawSyscall");
	};
	var RawSyscall6 = go$pkg.RawSyscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		throw go$panic("Native function not implemented: RawSyscall6");
	};
	mmapper.Ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var data, err, m, _tuple, _tuple$1, addr, errno, _tuple$2, sl, b, v, _slice, _index, _slice$1, _index$1, p, _key, _tuple$3;
		data = (go$sliceType(Go$Uint8)).nil;
		err = null;
		var go$deferred = [];
		try {
			m = this;
			if (length <= 0) {
				_tuple = [(go$sliceType(Go$Uint8)).nil, new Errno(22)], data = _tuple[0], err = _tuple[1];
				return [data, err];
			}
			_tuple$1 = m.mmap(0, (length >>> 0), prot, flags, fd, offset), addr = _tuple$1[0], errno = _tuple$1[1];
			if (!(go$interfaceIsEqual(errno, null))) {
				_tuple$2 = [(go$sliceType(Go$Uint8)).nil, errno], data = _tuple$2[0], err = _tuple$2[1];
				return [data, err];
			}
			sl = new (go$structType([["addr", "syscall", Go$Uintptr, ""], ["len", "syscall", Go$Int, ""], ["cap", "syscall", Go$Int, ""]])).Ptr(addr, length, length);
			b = sl;
			p = new (go$ptrType(Go$Uint8))(function() { return (_slice = b, _index = (b.capacity - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = b, _index$1 = b.capacity - 1 >> 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); });
			m.Mutex.Lock();
			go$deferred.push({ recv: m, method: "Unlock", args: [] });
			_key = p, (m.active || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: b };
			_tuple$3 = [b, null], data = _tuple$3[0], err = _tuple$3[1];
			return [data, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [data, err];
		}
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.go$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.Ptr.prototype.Munmap = function(data) {
		var err, m, v, _slice, _index, _slice$1, _index$1, p, _entry, b, errno;
		err = null;
		var go$deferred = [];
		try {
			m = this;
			if ((data.length === 0) || !((data.length === data.capacity))) {
				err = new Errno(22);
				return err;
			}
			p = new (go$ptrType(Go$Uint8))(function() { return (_slice = data, _index = (data.capacity - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")); }, function(v) { _slice$1 = data, _index$1 = data.capacity - 1 >> 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = v) : go$throwRuntimeError("index out of range"); });
			m.Mutex.Lock();
			go$deferred.push({ recv: m, method: "Unlock", args: [] });
			b = (_entry = m.active[p.go$key()], _entry !== undefined ? _entry.v : (go$sliceType(Go$Uint8)).nil);
			if (b === (go$sliceType(Go$Uint8)).nil || !(go$sliceIsEqual(b, 0, data, 0))) {
				err = new Errno(22);
				return err;
			}
			if (errno = m.munmap(go$sliceToArray(b), (b.length >>> 0)), !(go$interfaceIsEqual(errno, null))) {
				err = errno;
				return err;
			}
			delete m.active[p.go$key()];
			err = null;
			return err;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return err;
		}
	};
	mmapper.prototype.Munmap = function(data) { return this.go$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.go$val;
		if (0 <= (e >> 0) && (e >> 0) < 106) {
			s = errors[e];
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	go$ptrType(Errno).prototype.Error = function() { return new Errno(this.go$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.go$val;
		return (e === 4) || (e === 24) || (new Errno(e)).Timeout();
	};
	go$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.go$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.go$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	go$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.go$get()).Timeout(); };
	Signal.prototype.Signal = function() {
		var s;
		s = this.go$val;
	};
	go$ptrType(Signal).prototype.Signal = function() { return new Signal(this.go$get()).Signal(); };
	Signal.prototype.String = function() {
		var s, str;
		s = this.go$val;
		if (0 <= s && (s >> 0) < 32) {
			str = signals[s];
			if (!(str === "")) {
				return str;
			}
		}
		return "signal " + itoa((s >> 0));
	};
	go$ptrType(Signal).prototype.String = function() { return new Signal(this.go$get()).String(); };
	var Read = go$pkg.Read = function(fd, p) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = read(fd, p), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	var Write = go$pkg.Write = function(fd, p) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = write(fd, p), n = _tuple[0], err = _tuple[1];
		return [n, err];
	};
	var Bind = go$pkg.Bind = function(fd, sa) {
		var err, _tuple, ptr, n;
		err = null;
		_tuple = sa.sockaddr(), ptr = _tuple[0], n = _tuple[1], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			err = err;
			return err;
		}
		err = bind(fd, ptr, n);
		return err;
	};
	var Connect = go$pkg.Connect = function(fd, sa) {
		var err, _tuple, ptr, n;
		err = null;
		_tuple = sa.sockaddr(), ptr = _tuple[0], n = _tuple[1], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			err = err;
			return err;
		}
		err = connect(fd, ptr, n);
		return err;
	};
	var Getpeername = go$pkg.Getpeername = function(fd) {
		var sa, err, rsa, len, v, _tuple;
		sa = null;
		err = null;
		rsa = new RawSockaddrAny.Ptr();
		len = 108;
		if (err = getpeername(fd, rsa, new (go$ptrType(_Socklen))(function() { return len; }, function(v) { len = v; })), !(go$interfaceIsEqual(err, null))) {
			return [sa, err];
		}
		_tuple = anyToSockaddr(rsa), sa = _tuple[0], err = _tuple[1];
		return [sa, err];
	};
	var GetsockoptInt = go$pkg.GetsockoptInt = function(fd, level, opt) {
		var value, err, n, vallen, v, v$1, _tuple;
		value = 0;
		err = null;
		n = 0;
		vallen = 4;
		err = getsockopt(fd, level, opt, new (go$ptrType(Go$Int32))(function() { return n; }, function(v) { n = v; }), new (go$ptrType(_Socklen))(function() { return vallen; }, function(v$1) { vallen = v$1; }));
		_tuple = [(n >> 0), err], value = _tuple[0], err = _tuple[1];
		return [value, err];
	};
	var Recvfrom = go$pkg.Recvfrom = function(fd, p, flags) {
		var n, from, err, rsa, len, _tuple, v, _tuple$1;
		n = 0;
		from = null;
		err = null;
		rsa = new RawSockaddrAny.Ptr();
		len = 108;
		if (_tuple = recvfrom(fd, p, flags, rsa, new (go$ptrType(_Socklen))(function() { return len; }, function(v) { len = v; })), n = _tuple[0], err = _tuple[1], !(go$interfaceIsEqual(err, null))) {
			return [n, from, err];
		}
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa), from = _tuple$1[0], err = _tuple$1[1];
		}
		return [n, from, err];
	};
	var Sendto = go$pkg.Sendto = function(fd, p, flags, to) {
		var err, _tuple, ptr, n;
		err = null;
		_tuple = to.sockaddr(), ptr = _tuple[0], n = _tuple[1], err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			err = err;
			return err;
		}
		err = sendto(fd, p, flags, ptr, n);
		return err;
	};
	var SetsockoptByte = go$pkg.SetsockoptByte = function(fd, level, opt, value) {
		var err, v;
		err = null;
		err = setsockopt(fd, level, opt, new (go$ptrType(Go$Uint8))(function() { return value; }, function(v) { value = v; }), 1);
		return err;
	};
	var SetsockoptInt = go$pkg.SetsockoptInt = function(fd, level, opt, value) {
		var err, n, v;
		err = null;
		n = (value >> 0);
		err = setsockopt(fd, level, opt, new (go$ptrType(Go$Int32))(function() { return n; }, function(v) { n = v; }), 4);
		return err;
	};
	var SetsockoptInet4Addr = go$pkg.SetsockoptInet4Addr = function(fd, level, opt, value) {
		var err;
		err = null;
		err = setsockopt(fd, level, opt, go$sliceToArray(new (go$sliceType(Go$Uint8))(value)), 4);
		return err;
	};
	var SetsockoptIPMreq = go$pkg.SetsockoptIPMreq = function(fd, level, opt, mreq) {
		var err, _array, _struct, _view;
		err = null;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, _array, 8);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 4, _array.buffer.byteLength));
		return err;
	};
	var SetsockoptIPv6Mreq = go$pkg.SetsockoptIPv6Mreq = function(fd, level, opt, mreq) {
		var err, _array, _struct, _view;
		err = null;
		_array = new Uint8Array(20);
		err = setsockopt(fd, level, opt, _array, 20);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = _view.getUint32(16, true);
		return err;
	};
	var SetsockoptICMPv6Filter = go$pkg.SetsockoptICMPv6Filter = function(fd, level, opt, filter) {
		var _array, _struct, _view;
		_array = new Uint8Array(32);
		return setsockopt(fd, level, opt, _array, 32);
	};
	var SetsockoptLinger = go$pkg.SetsockoptLinger = function(fd, level, opt, l) {
		var err, _array, _struct, _view;
		err = null;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, _array, 8);
		_struct = l, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Onoff = _view.getInt32(0, true), _struct.Linger = _view.getInt32(4, true);
		return err;
	};
	var SetsockoptString = go$pkg.SetsockoptString = function(fd, level, opt, s) {
		var err;
		err = null;
		err = setsockopt(fd, level, opt, go$sliceToArray(new (go$sliceType(Go$Uint8))(go$stringToBytes(s))), (s.length >>> 0));
		return err;
	};
	var SetsockoptTimeval = go$pkg.SetsockoptTimeval = function(fd, level, opt, tv) {
		var err, _array, _struct, _view;
		err = null;
		_array = new Uint8Array(16);
		err = setsockopt(fd, level, opt, _array, 16);
		_struct = tv, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Sec = new Go$Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Usec = _view.getInt32(8, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 12, _array.buffer.byteLength));
		return err;
	};
	var Socket = go$pkg.Socket = function(domain, typ, proto) {
		var fd, err, _tuple, _tuple$1;
		fd = 0;
		err = null;
		if ((domain === 30) && go$pkg.SocketDisableIPv6) {
			_tuple = [-1, new Errno(47)], fd = _tuple[0], err = _tuple[1];
			return [fd, err];
		}
		_tuple$1 = socket(domain, typ, proto), fd = _tuple$1[0], err = _tuple$1[1];
		return [fd, err];
	};
	var Socketpair = go$pkg.Socketpair = function(domain, typ, proto) {
		var fd, err, fdx;
		fd = go$makeNativeArray("Int", 2, function() { return 0; });
		err = null;
		fdx = go$makeNativeArray("Int32", 2, function() { return 0; });
		err = socketpair(domain, typ, proto, fdx);
		if (go$interfaceIsEqual(err, null)) {
			fd[0] = (fdx[0] >> 0);
			fd[1] = (fdx[1] >> 0);
		}
		return [go$mapArray(fd, function(entry) { return entry; }), err];
	};
	var Sendfile = go$pkg.Sendfile = function(outfd, infd, offset, count) {
		var written, err, _tuple;
		written = 0;
		err = null;
		_tuple = sendfile(outfd, infd, offset, count), written = _tuple[0], err = _tuple[1];
		return [written, err];
	};
	var getgroups = function(ngid, gid) {
		var n, err, _tuple, r0, e1;
		n = 0;
		err = null;
		_tuple = RawSyscall(79, (ngid >>> 0), gid, 0), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var setgroups = function(ngid, gid) {
		var err, _tuple, e1;
		err = null;
		_tuple = RawSyscall(80, (ngid >>> 0), gid, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var wait4 = function(pid, wstatus, options, rusage) {
		var wpid, err, _tuple, _array, _struct, _view, r0, e1;
		wpid = 0;
		err = null;
		_array = new Uint8Array(144);
		_tuple = Syscall6(7, (pid >>> 0), wstatus, (options >>> 0), _array, 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		_struct = rusage, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Utime.Sec = new Go$Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Utime.Usec = _view.getInt32(8, true), _struct.Utime.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 12, _array.buffer.byteLength)), _struct.Stime.Sec = new Go$Int64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Stime.Usec = _view.getInt32(24, true), _struct.Stime.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Maxrss = new Go$Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Ixrss = new Go$Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Idrss = new Go$Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Isrss = new Go$Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Minflt = new Go$Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Majflt = new Go$Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Nswap = new Go$Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Inblock = new Go$Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Oublock = new Go$Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Msgsnd = new Go$Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Msgrcv = new Go$Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.Nsignals = new Go$Int64(_view.getUint32(124, true), _view.getUint32(120, true)), _struct.Nvcsw = new Go$Int64(_view.getUint32(132, true), _view.getUint32(128, true)), _struct.Nivcsw = new Go$Int64(_view.getUint32(140, true), _view.getUint32(136, true));
		wpid = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [wpid, err];
	};
	var accept = function(s, rsa, addrlen) {
		var fd, err, _tuple, _array, _struct, _view, r0, e1;
		fd = 0;
		err = null;
		_array = new Uint8Array(108);
		_tuple = Syscall(30, (s >>> 0), _array, addrlen), r0 = _tuple[0], e1 = _tuple[2];
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 16, _array.buffer.byteLength));
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	var bind = function(s, addr, addrlen) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(104, (s >>> 0), addr, (addrlen >>> 0)), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var connect = function(s, addr, addrlen) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(98, (s >>> 0), addr, (addrlen >>> 0)), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var socket = function(domain, typ, proto) {
		var fd, err, _tuple, r0, e1;
		fd = 0;
		err = null;
		_tuple = RawSyscall(97, (domain >>> 0), (typ >>> 0), (proto >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	var getsockopt = function(s, level, name, val, vallen) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall6(118, (s >>> 0), (level >>> 0), (name >>> 0), val, vallen, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var setsockopt = function(s, level, name, val, vallen) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall6(105, (s >>> 0), (level >>> 0), (name >>> 0), val, vallen, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var getpeername = function(fd, rsa, addrlen) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(108);
		_tuple = RawSyscall(31, (fd >>> 0), _array, addrlen), e1 = _tuple[2];
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 16, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var getsockname = function(fd, rsa, addrlen) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(108);
		_tuple = RawSyscall(32, (fd >>> 0), _array, addrlen), e1 = _tuple[2];
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 16, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Shutdown = go$pkg.Shutdown = function(s, how) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(134, (s >>> 0), (how >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var socketpair = function(domain, typ, proto, fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = RawSyscall6(135, (domain >>> 0), (typ >>> 0), (proto >>> 0), fd, 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var recvfrom = function(fd, p, flags, from, fromlen) {
		var n, err, _p0, _tuple, _array, _struct, _view, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = go$sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_array = new Uint8Array(108);
		_tuple = Syscall6(29, (fd >>> 0), _p0, (p.length >>> 0), (flags >>> 0), _array, fromlen), r0 = _tuple[0], e1 = _tuple[2];
		_struct = from, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 16, _array.buffer.byteLength));
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var sendto = function(s, buf, flags, to, addrlen) {
		var err, _p0, _tuple, e1;
		err = null;
		_p0 = 0;
		if (buf.length > 0) {
			_p0 = go$sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(133, (s >>> 0), _p0, (buf.length >>> 0), (flags >>> 0), to, (addrlen >>> 0)), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var recvmsg = function(s, msg, flags) {
		var n, err, _tuple, _array, _struct, _view, r0, e1;
		n = 0;
		err = null;
		_array = new Uint8Array(36);
		_tuple = Syscall(27, (s >>> 0), _array, (flags >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getInt32(16, true), _struct.Pad_cgo_1 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var sendmsg = function(s, msg, flags) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(36);
		_tuple = Syscall(28, (s >>> 0), _array, (flags >>> 0)), e1 = _tuple[2];
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getInt32(16, true), _struct.Pad_cgo_1 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var kevent = function(kq, change, nchange, event, nevent, timeout) {
		var n, err, _tuple, _array, _struct, _view, r0, e1;
		n = 0;
		err = null;
		_array = new Uint8Array(16);
		_tuple = Syscall6(363, (kq >>> 0), change, (nchange >>> 0), event, (nevent >>> 0), _array), r0 = _tuple[0], e1 = _tuple[2];
		_struct = timeout, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Sec = new Go$Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Nsec = new Go$Int64(_view.getUint32(12, true), _view.getUint32(8, true));
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var sysctl = function(mib, old, oldlen, new$1, newlen) {
		var err, _p0, _tuple, e1;
		err = null;
		_p0 = 0;
		if (mib.length > 0) {
			_p0 = go$sliceToArray(mib);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(202, _p0, (mib.length >>> 0), old, oldlen, new$1, newlen), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var utimes = function(path, timeval) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(138, _p0, timeval, 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var futimes = function(fd, timeval) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(139, (fd >>> 0), timeval, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var fcntl = function(fd, cmd, arg) {
		var val, err, _tuple, r0, e1;
		val = 0;
		err = null;
		_tuple = Syscall(92, (fd >>> 0), (cmd >>> 0), (arg >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [val, err];
	};
	var ptrace = function(request, pid, addr, data) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall6(26, (request >>> 0), (pid >>> 0), addr, data, 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var pipe = function() {
		var r, w, err, _tuple, r0, r1, e1;
		r = 0;
		w = 0;
		err = null;
		_tuple = RawSyscall(42, 0, 0, 0), r0 = _tuple[0], r1 = _tuple[1], e1 = _tuple[2];
		r = (r0 >> 0);
		w = (r1 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [r, w, err];
	};
	var kill = function(pid, signum, posix) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(37, (pid >>> 0), (signum >>> 0), (posix >>> 0)), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Access = go$pkg.Access = function(path, mode) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(33, _p0, (mode >>> 0), 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Adjtime = go$pkg.Adjtime = function(delta, olddelta) {
		var err, _tuple, _array, _struct, _view, _array$1, _struct$1, _view$1, e1;
		err = null;
		_array = new Uint8Array(16);
		_array$1 = new Uint8Array(16);
		_struct = delta, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Sec = new Go$Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Usec = _view.getInt32(8, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 12, _array.buffer.byteLength));
		_tuple = Syscall(140, _array, _array$1, 0), e1 = _tuple[2];
		_struct$1 = olddelta, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Sec = new Go$Int64(_view$1.getUint32(4, true), _view$1.getUint32(0, true)), _struct$1.Usec = _view$1.getInt32(8, true), _struct$1.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array$1.buffer, go$min(_array$1.byteOffset + 12, _array$1.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Chdir = go$pkg.Chdir = function(path) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(12, _p0, 0, 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Chflags = go$pkg.Chflags = function(path, flags) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(34, _p0, (flags >>> 0), 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Chmod = go$pkg.Chmod = function(path, mode) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(15, _p0, (mode >>> 0), 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Chown = go$pkg.Chown = function(path, uid, gid) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(16, _p0, (uid >>> 0), (gid >>> 0)), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Chroot = go$pkg.Chroot = function(path) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(61, _p0, 0, 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Close = go$pkg.Close = function(fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(6, (fd >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Dup = go$pkg.Dup = function(fd) {
		var nfd, err, _tuple, r0, e1;
		nfd = 0;
		err = null;
		_tuple = RawSyscall(41, (fd >>> 0), 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		nfd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [nfd, err];
	};
	var Dup2 = go$pkg.Dup2 = function(from, to) {
		var err, _tuple, e1;
		err = null;
		_tuple = RawSyscall(90, (from >>> 0), (to >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Exchangedata = go$pkg.Exchangedata = function(path1, path2, options) {
		var err, _p0, _tuple, _p1, _tuple$1, _tuple$2, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path1), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_p1 = (go$ptrType(Go$Uint8)).nil;
		_tuple$1 = BytePtrFromString(path2), _p1 = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$2 = Syscall(223, _p0, _p1, (options >>> 0)), e1 = _tuple$2[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Exit = go$pkg.Exit = function(code) {
		Syscall(1, (code >>> 0), 0, 0);
		return;
	};
	var Fchdir = go$pkg.Fchdir = function(fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(13, (fd >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Fchflags = go$pkg.Fchflags = function(fd, flags) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(35, (fd >>> 0), (flags >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Fchmod = go$pkg.Fchmod = function(fd, mode) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(124, (fd >>> 0), (mode >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Fchown = go$pkg.Fchown = function(fd, uid, gid) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(123, (fd >>> 0), (uid >>> 0), (gid >>> 0)), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Flock = go$pkg.Flock = function(fd, how) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(131, (fd >>> 0), (how >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Fpathconf = go$pkg.Fpathconf = function(fd, name) {
		var val, err, _tuple, r0, e1;
		val = 0;
		err = null;
		_tuple = Syscall(192, (fd >>> 0), (name >>> 0), 0), r0 = _tuple[0], e1 = _tuple[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [val, err];
	};
	var Fstat = go$pkg.Fstat = function(fd, stat) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, (fd >>> 0), _array, 0), e1 = _tuple[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new Go$Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new Go$Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new Go$Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new Go$Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new Go$Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new Go$Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new Go$Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new Go$Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new Go$Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new Go$Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new (go$nativeArray("Int64"))(_array.buffer, go$min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Fstatfs = go$pkg.Fstatfs = function(fd, stat) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(2168);
		_tuple = Syscall(346, (fd >>> 0), _array, 0), e1 = _tuple[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Bsize = _view.getUint32(0, true), _struct.Iosize = _view.getInt32(4, true), _struct.Blocks = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Bfree = new Go$Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Bavail = new Go$Uint64(_view.getUint32(28, true), _view.getUint32(24, true)), _struct.Files = new Go$Uint64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Ffree = new Go$Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Fsid.Val = new (go$nativeArray("Int32"))(_array.buffer, go$min(_array.byteOffset + 48, _array.buffer.byteLength)), _struct.Owner = _view.getUint32(56, true), _struct.Type = _view.getUint32(60, true), _struct.Flags = _view.getUint32(64, true), _struct.Fssubtype = _view.getUint32(68, true), _struct.Fstypename = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 72, _array.buffer.byteLength)), _struct.Mntonname = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 88, _array.buffer.byteLength)), _struct.Mntfromname = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 1112, _array.buffer.byteLength)), _struct.Reserved = new (go$nativeArray("Uint32"))(_array.buffer, go$min(_array.byteOffset + 2136, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Fsync = go$pkg.Fsync = function(fd) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(95, (fd >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Ftruncate = go$pkg.Ftruncate = function(fd, length) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(201, (fd >>> 0), (length.low >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Getdirentries = go$pkg.Getdirentries = function(fd, buf, basep) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (buf.length > 0) {
			_p0 = go$sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(344, (fd >>> 0), _p0, (buf.length >>> 0), basep, 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var Getdtablesize = go$pkg.Getdtablesize = function() {
		var size, _tuple, r0;
		size = 0;
		_tuple = Syscall(89, 0, 0, 0), r0 = _tuple[0];
		size = (r0 >> 0);
		return size;
	};
	var Getegid = go$pkg.Getegid = function() {
		var egid, _tuple, r0;
		egid = 0;
		_tuple = RawSyscall(43, 0, 0, 0), r0 = _tuple[0];
		egid = (r0 >> 0);
		return egid;
	};
	var Geteuid = go$pkg.Geteuid = function() {
		var uid, _tuple, r0;
		uid = 0;
		_tuple = RawSyscall(25, 0, 0, 0), r0 = _tuple[0];
		uid = (r0 >> 0);
		return uid;
	};
	var Getfsstat = go$pkg.Getfsstat = function(buf, flags) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (buf.length > 0) {
			_p0 = go$sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(347, _p0, (buf.length >>> 0), (flags >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var Getgid = go$pkg.Getgid = function() {
		var gid, _tuple, r0;
		gid = 0;
		_tuple = RawSyscall(47, 0, 0, 0), r0 = _tuple[0];
		gid = (r0 >> 0);
		return gid;
	};
	var Getpgid = go$pkg.Getpgid = function(pid) {
		var pgid, err, _tuple, r0, e1;
		pgid = 0;
		err = null;
		_tuple = RawSyscall(151, (pid >>> 0), 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		pgid = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [pgid, err];
	};
	var Getpgrp = go$pkg.Getpgrp = function() {
		var pgrp, _tuple, r0;
		pgrp = 0;
		_tuple = RawSyscall(81, 0, 0, 0), r0 = _tuple[0];
		pgrp = (r0 >> 0);
		return pgrp;
	};
	var Getpid = go$pkg.Getpid = function() {
		var pid, _tuple, r0;
		pid = 0;
		_tuple = RawSyscall(20, 0, 0, 0), r0 = _tuple[0];
		pid = (r0 >> 0);
		return pid;
	};
	var Getppid = go$pkg.Getppid = function() {
		var ppid, _tuple, r0;
		ppid = 0;
		_tuple = RawSyscall(39, 0, 0, 0), r0 = _tuple[0];
		ppid = (r0 >> 0);
		return ppid;
	};
	var Getpriority = go$pkg.Getpriority = function(which, who) {
		var prio, err, _tuple, r0, e1;
		prio = 0;
		err = null;
		_tuple = Syscall(100, (which >>> 0), (who >>> 0), 0), r0 = _tuple[0], e1 = _tuple[2];
		prio = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [prio, err];
	};
	var Getrlimit = go$pkg.Getrlimit = function(which, lim) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(16);
		_tuple = RawSyscall(194, (which >>> 0), _array, 0), e1 = _tuple[2];
		_struct = lim, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Cur = new Go$Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Max = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Getrusage = go$pkg.Getrusage = function(who, rusage) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(144);
		_tuple = RawSyscall(117, (who >>> 0), _array, 0), e1 = _tuple[2];
		_struct = rusage, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Utime.Sec = new Go$Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Utime.Usec = _view.getInt32(8, true), _struct.Utime.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 12, _array.buffer.byteLength)), _struct.Stime.Sec = new Go$Int64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Stime.Usec = _view.getInt32(24, true), _struct.Stime.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Maxrss = new Go$Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Ixrss = new Go$Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Idrss = new Go$Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Isrss = new Go$Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Minflt = new Go$Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Majflt = new Go$Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Nswap = new Go$Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Inblock = new Go$Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Oublock = new Go$Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Msgsnd = new Go$Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Msgrcv = new Go$Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.Nsignals = new Go$Int64(_view.getUint32(124, true), _view.getUint32(120, true)), _struct.Nvcsw = new Go$Int64(_view.getUint32(132, true), _view.getUint32(128, true)), _struct.Nivcsw = new Go$Int64(_view.getUint32(140, true), _view.getUint32(136, true));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Getsid = go$pkg.Getsid = function(pid) {
		var sid, err, _tuple, r0, e1;
		sid = 0;
		err = null;
		_tuple = RawSyscall(310, (pid >>> 0), 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		sid = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [sid, err];
	};
	var Getuid = go$pkg.Getuid = function() {
		var uid, _tuple, r0;
		uid = 0;
		_tuple = RawSyscall(24, 0, 0, 0), r0 = _tuple[0];
		uid = (r0 >> 0);
		return uid;
	};
	var Issetugid = go$pkg.Issetugid = function() {
		var tainted, _tuple, r0;
		tainted = false;
		_tuple = RawSyscall(327, 0, 0, 0), r0 = _tuple[0];
		tainted = !((r0 === 0));
		return tainted;
	};
	var Kqueue = go$pkg.Kqueue = function() {
		var fd, err, _tuple, r0, e1;
		fd = 0;
		err = null;
		_tuple = Syscall(362, 0, 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	var Lchown = go$pkg.Lchown = function(path, uid, gid) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(364, _p0, (uid >>> 0), (gid >>> 0)), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Link = go$pkg.Link = function(path, link) {
		var err, _p0, _tuple, _p1, _tuple$1, _tuple$2, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_p1 = (go$ptrType(Go$Uint8)).nil;
		_tuple$1 = BytePtrFromString(link), _p1 = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$2 = Syscall(9, _p0, _p1, 0), e1 = _tuple$2[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Listen = go$pkg.Listen = function(s, backlog) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(106, (s >>> 0), (backlog >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Lstat = go$pkg.Lstat = function(path, stat) {
		var err, _p0, _tuple, _tuple$1, _array, _struct, _view, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, _p0, _array, 0), e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new Go$Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new Go$Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new Go$Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new Go$Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new Go$Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new Go$Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new Go$Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new Go$Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new Go$Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new Go$Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new (go$nativeArray("Int64"))(_array.buffer, go$min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Mkdir = go$pkg.Mkdir = function(path, mode) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(136, _p0, (mode >>> 0), 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Mkfifo = go$pkg.Mkfifo = function(path, mode) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(132, _p0, (mode >>> 0), 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Mknod = go$pkg.Mknod = function(path, mode, dev) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(14, _p0, (mode >>> 0), (dev >>> 0)), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Open = go$pkg.Open = function(path, mode, perm) {
		var fd, err, _p0, _tuple, _tuple$1, r0, e1;
		fd = 0;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [fd, err];
		}
		_tuple$1 = Syscall(5, _p0, (mode >>> 0), (perm >>> 0)), r0 = _tuple$1[0], e1 = _tuple$1[2];
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	var Pathconf = go$pkg.Pathconf = function(path, name) {
		var val, err, _p0, _tuple, _tuple$1, r0, e1;
		val = 0;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [val, err];
		}
		_tuple$1 = Syscall(191, _p0, (name >>> 0), 0), r0 = _tuple$1[0], e1 = _tuple$1[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [val, err];
	};
	var Pread = go$pkg.Pread = function(fd, p, offset) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = go$sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(153, (fd >>> 0), _p0, (p.length >>> 0), (offset.low >>> 0), 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var Pwrite = go$pkg.Pwrite = function(fd, p, offset) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = go$sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(154, (fd >>> 0), _p0, (p.length >>> 0), (offset.low >>> 0), 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var read = function(fd, p) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = go$sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(3, (fd >>> 0), _p0, (p.length >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var Readlink = go$pkg.Readlink = function(path, buf) {
		var n, err, _p0, _tuple, _p1, _tuple$1, r0, e1;
		n = 0;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [n, err];
		}
		_p1 = 0;
		if (buf.length > 0) {
			_p1 = go$sliceToArray(buf);
		} else {
			_p1 = new Uint8Array(0);
		}
		_tuple$1 = Syscall(58, _p0, _p1, (buf.length >>> 0)), r0 = _tuple$1[0], e1 = _tuple$1[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var Rename = go$pkg.Rename = function(from, to) {
		var err, _p0, _tuple, _p1, _tuple$1, _tuple$2, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(from), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_p1 = (go$ptrType(Go$Uint8)).nil;
		_tuple$1 = BytePtrFromString(to), _p1 = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$2 = Syscall(128, _p0, _p1, 0), e1 = _tuple$2[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Revoke = go$pkg.Revoke = function(path) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(56, _p0, 0, 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Rmdir = go$pkg.Rmdir = function(path) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(137, _p0, 0, 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Seek = go$pkg.Seek = function(fd, offset, whence) {
		var newoffset, err, _tuple, r0, e1;
		newoffset = new Go$Int64(0, 0);
		err = null;
		_tuple = Syscall(199, (fd >>> 0), (offset.low >>> 0), (whence >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		newoffset = new Go$Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [newoffset, err];
	};
	var Select = go$pkg.Select = function(n, r, w, e, timeout) {
		var err, _tuple, _array, _struct, _view, _array$1, _struct$1, _view$1, _array$2, _struct$2, _view$2, _array$3, _struct$3, _view$3, e1;
		err = null;
		_array = new Uint8Array(128);
		_array$1 = new Uint8Array(128);
		_struct = r, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Bits = new (go$nativeArray("Int32"))(_array.buffer, go$min(_array.byteOffset + 0, _array.buffer.byteLength));
		_array$2 = new Uint8Array(128);
		_struct$1 = w, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Bits = new (go$nativeArray("Int32"))(_array$1.buffer, go$min(_array$1.byteOffset + 0, _array$1.buffer.byteLength));
		_array$3 = new Uint8Array(16);
		_struct$2 = e, _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Bits = new (go$nativeArray("Int32"))(_array$2.buffer, go$min(_array$2.byteOffset + 0, _array$2.buffer.byteLength));
		_tuple = Syscall6(93, (n >>> 0), _array, _array$1, _array$2, _array$3, 0), e1 = _tuple[2];
		_struct$3 = timeout, _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Sec = new Go$Int64(_view$3.getUint32(4, true), _view$3.getUint32(0, true)), _struct$3.Usec = _view$3.getInt32(8, true), _struct$3.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array$3.buffer, go$min(_array$3.byteOffset + 12, _array$3.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setegid = go$pkg.Setegid = function(egid) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(182, (egid >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Seteuid = go$pkg.Seteuid = function(euid) {
		var err, _tuple, e1;
		err = null;
		_tuple = RawSyscall(183, (euid >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setgid = go$pkg.Setgid = function(gid) {
		var err, _tuple, e1;
		err = null;
		_tuple = RawSyscall(181, (gid >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setlogin = go$pkg.Setlogin = function(name) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(name), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(50, _p0, 0, 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setpgid = go$pkg.Setpgid = function(pid, pgid) {
		var err, _tuple, e1;
		err = null;
		_tuple = RawSyscall(82, (pid >>> 0), (pgid >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setpriority = go$pkg.Setpriority = function(which, who, prio) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(96, (which >>> 0), (who >>> 0), (prio >>> 0)), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setprivexec = go$pkg.Setprivexec = function(flag) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(152, (flag >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setregid = go$pkg.Setregid = function(rgid, egid) {
		var err, _tuple, e1;
		err = null;
		_tuple = RawSyscall(127, (rgid >>> 0), (egid >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setreuid = go$pkg.Setreuid = function(ruid, euid) {
		var err, _tuple, e1;
		err = null;
		_tuple = RawSyscall(126, (ruid >>> 0), (euid >>> 0), 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setrlimit = go$pkg.Setrlimit = function(which, lim) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(16);
		_tuple = RawSyscall(195, (which >>> 0), _array, 0), e1 = _tuple[2];
		_struct = lim, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Cur = new Go$Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Max = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setsid = go$pkg.Setsid = function() {
		var pid, err, _tuple, r0, e1;
		pid = 0;
		err = null;
		_tuple = RawSyscall(147, 0, 0, 0), r0 = _tuple[0], e1 = _tuple[2];
		pid = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [pid, err];
	};
	var Settimeofday = go$pkg.Settimeofday = function(tp) {
		var err, _tuple, _array, _struct, _view, e1;
		err = null;
		_array = new Uint8Array(16);
		_tuple = RawSyscall(122, _array, 0, 0), e1 = _tuple[2];
		_struct = tp, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Sec = new Go$Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Usec = _view.getInt32(8, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 12, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Setuid = go$pkg.Setuid = function(uid) {
		var err, _tuple, e1;
		err = null;
		_tuple = RawSyscall(23, (uid >>> 0), 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Stat = go$pkg.Stat = function(path, stat) {
		var err, _p0, _tuple, _tuple$1, _array, _struct, _view, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(338, _p0, _array, 0), e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new Go$Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new Go$Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new Go$Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new Go$Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new Go$Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new Go$Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new Go$Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new Go$Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new Go$Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new Go$Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new (go$nativeArray("Int64"))(_array.buffer, go$min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Statfs = go$pkg.Statfs = function(path, stat) {
		var err, _p0, _tuple, _tuple$1, _array, _struct, _view, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_array = new Uint8Array(2168);
		_tuple$1 = Syscall(345, _p0, _array, 0), e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Bsize = _view.getUint32(0, true), _struct.Iosize = _view.getInt32(4, true), _struct.Blocks = new Go$Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Bfree = new Go$Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Bavail = new Go$Uint64(_view.getUint32(28, true), _view.getUint32(24, true)), _struct.Files = new Go$Uint64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Ffree = new Go$Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Fsid.Val = new (go$nativeArray("Int32"))(_array.buffer, go$min(_array.byteOffset + 48, _array.buffer.byteLength)), _struct.Owner = _view.getUint32(56, true), _struct.Type = _view.getUint32(60, true), _struct.Flags = _view.getUint32(64, true), _struct.Fssubtype = _view.getUint32(68, true), _struct.Fstypename = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 72, _array.buffer.byteLength)), _struct.Mntonname = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 88, _array.buffer.byteLength)), _struct.Mntfromname = new (go$nativeArray("Int8"))(_array.buffer, go$min(_array.byteOffset + 1112, _array.buffer.byteLength)), _struct.Reserved = new (go$nativeArray("Uint32"))(_array.buffer, go$min(_array.byteOffset + 2136, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Symlink = go$pkg.Symlink = function(path, link) {
		var err, _p0, _tuple, _p1, _tuple$1, _tuple$2, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_p1 = (go$ptrType(Go$Uint8)).nil;
		_tuple$1 = BytePtrFromString(link), _p1 = _tuple$1[0], err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$2 = Syscall(57, _p0, _p1, 0), e1 = _tuple$2[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Sync = go$pkg.Sync = function() {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(36, 0, 0, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Truncate = go$pkg.Truncate = function(path, length) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(200, _p0, (length.low >>> 0), 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Umask = go$pkg.Umask = function(newmask) {
		var oldmask, _tuple, r0;
		oldmask = 0;
		_tuple = Syscall(60, (newmask >>> 0), 0, 0), r0 = _tuple[0];
		oldmask = (r0 >> 0);
		return oldmask;
	};
	var Undelete = go$pkg.Undelete = function(path) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(205, _p0, 0, 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Unlink = go$pkg.Unlink = function(path) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(10, _p0, 0, 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var Unmount = go$pkg.Unmount = function(path, flags) {
		var err, _p0, _tuple, _tuple$1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		_tuple = BytePtrFromString(path), _p0 = _tuple[0], err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		_tuple$1 = Syscall(159, _p0, (flags >>> 0), 0), e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var write = function(fd, p) {
		var n, err, _p0, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = 0;
		if (p.length > 0) {
			_p0 = go$sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(4, (fd >>> 0), _p0, (p.length >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var mmap = function(addr, length, prot, flag, fd, pos) {
		var ret, err, _tuple, r0, e1;
		ret = 0;
		err = null;
		_tuple = Syscall6(197, addr, length, (prot >>> 0), (flag >>> 0), (fd >>> 0), (pos.low >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		ret = r0;
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [ret, err];
	};
	var munmap = function(addr, length) {
		var err, _tuple, e1;
		err = null;
		_tuple = Syscall(73, addr, length, 0), e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	var readlen = function(fd, buf, nbuf) {
		var n, err, _tuple, r0, e1;
		n = 0;
		err = null;
		_tuple = Syscall(3, (fd >>> 0), buf, (nbuf >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var writelen = function(fd, buf, nbuf) {
		var n, err, _tuple, r0, e1;
		n = 0;
		err = null;
		_tuple = Syscall(4, (fd >>> 0), buf, (nbuf >>> 0)), r0 = _tuple[0], e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	var gettimeofday = function(tp) {
		var sec, usec, err, _tuple, _array, _struct, _view, r0, r1, e1;
		sec = new Go$Int64(0, 0);
		usec = 0;
		err = null;
		_array = new Uint8Array(16);
		_tuple = RawSyscall(116, _array, 0, 0), r0 = _tuple[0], r1 = _tuple[1], e1 = _tuple[2];
		_struct = tp, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Sec = new Go$Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Usec = _view.getInt32(8, true), _struct.Pad_cgo_0 = new (go$nativeArray("Uint8"))(_array.buffer, go$min(_array.byteOffset + 12, _array.buffer.byteLength));
		sec = new Go$Int64(0, r0.constructor === Number ? r0 : 1);
		usec = (r1 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [sec, usec, err];
	};
	var raceenabled = false;
	var anyMessageLen = 4;
	var rtaRtMask = 15;
	var rtaIfaMask = 164;
	var rtaIfmaMask = 50;
	var mask = 127;
	var core = 128;
	var shift = 8;
	var exited = 0;
	var stopped = 127;
	go$pkg.ImplementsGetwd = true;
	var attrBitMapCount = 5;
	var attrCmnFullpath = 134217728;
	var darwin64Bit = true;
	var netbsd32Bit = false;
	go$pkg.AF_APPLETALK = 16;
	go$pkg.AF_CCITT = 10;
	go$pkg.AF_CHAOS = 5;
	go$pkg.AF_CNT = 21;
	go$pkg.AF_COIP = 20;
	go$pkg.AF_DATAKIT = 9;
	go$pkg.AF_DECnet = 12;
	go$pkg.AF_DLI = 13;
	go$pkg.AF_E164 = 28;
	go$pkg.AF_ECMA = 8;
	go$pkg.AF_HYLINK = 15;
	go$pkg.AF_IEEE80211 = 37;
	go$pkg.AF_IMPLINK = 3;
	go$pkg.AF_INET = 2;
	go$pkg.AF_INET6 = 30;
	go$pkg.AF_IPX = 23;
	go$pkg.AF_ISDN = 28;
	go$pkg.AF_ISO = 7;
	go$pkg.AF_LAT = 14;
	go$pkg.AF_LINK = 18;
	go$pkg.AF_LOCAL = 1;
	go$pkg.AF_MAX = 38;
	go$pkg.AF_NATM = 31;
	go$pkg.AF_NDRV = 27;
	go$pkg.AF_NETBIOS = 33;
	go$pkg.AF_NS = 6;
	go$pkg.AF_OSI = 7;
	go$pkg.AF_PPP = 34;
	go$pkg.AF_PUP = 4;
	go$pkg.AF_RESERVED_36 = 36;
	go$pkg.AF_ROUTE = 17;
	go$pkg.AF_SIP = 24;
	go$pkg.AF_SNA = 11;
	go$pkg.AF_SYSTEM = 32;
	go$pkg.AF_UNIX = 1;
	go$pkg.AF_UNSPEC = 0;
	go$pkg.B0 = 0;
	go$pkg.B110 = 110;
	go$pkg.B115200 = 115200;
	go$pkg.B1200 = 1200;
	go$pkg.B134 = 134;
	go$pkg.B14400 = 14400;
	go$pkg.B150 = 150;
	go$pkg.B1800 = 1800;
	go$pkg.B19200 = 19200;
	go$pkg.B200 = 200;
	go$pkg.B230400 = 230400;
	go$pkg.B2400 = 2400;
	go$pkg.B28800 = 28800;
	go$pkg.B300 = 300;
	go$pkg.B38400 = 38400;
	go$pkg.B4800 = 4800;
	go$pkg.B50 = 50;
	go$pkg.B57600 = 57600;
	go$pkg.B600 = 600;
	go$pkg.B7200 = 7200;
	go$pkg.B75 = 75;
	go$pkg.B76800 = 76800;
	go$pkg.B9600 = 9600;
	go$pkg.BIOCFLUSH = 536887912;
	go$pkg.BIOCGBLEN = 1074020966;
	go$pkg.BIOCGDLT = 1074020970;
	go$pkg.BIOCGDLTLIST = 3222028921;
	go$pkg.BIOCGETIF = 1075855979;
	go$pkg.BIOCGHDRCMPLT = 1074020980;
	go$pkg.BIOCGRSIG = 1074020978;
	go$pkg.BIOCGRTIMEOUT = 1074807406;
	go$pkg.BIOCGSEESENT = 1074020982;
	go$pkg.BIOCGSTATS = 1074283119;
	go$pkg.BIOCIMMEDIATE = 2147762800;
	go$pkg.BIOCPROMISC = 536887913;
	go$pkg.BIOCSBLEN = 3221504614;
	go$pkg.BIOCSDLT = 2147762808;
	go$pkg.BIOCSETF = 2148549223;
	go$pkg.BIOCSETIF = 2149597804;
	go$pkg.BIOCSHDRCMPLT = 2147762805;
	go$pkg.BIOCSRSIG = 2147762803;
	go$pkg.BIOCSRTIMEOUT = 2148549229;
	go$pkg.BIOCSSEESENT = 2147762807;
	go$pkg.BIOCVERSION = 1074020977;
	go$pkg.BPF_A = 16;
	go$pkg.BPF_ABS = 32;
	go$pkg.BPF_ADD = 0;
	go$pkg.BPF_ALIGNMENT = 4;
	go$pkg.BPF_ALU = 4;
	go$pkg.BPF_AND = 80;
	go$pkg.BPF_B = 16;
	go$pkg.BPF_DIV = 48;
	go$pkg.BPF_H = 8;
	go$pkg.BPF_IMM = 0;
	go$pkg.BPF_IND = 64;
	go$pkg.BPF_JA = 0;
	go$pkg.BPF_JEQ = 16;
	go$pkg.BPF_JGE = 48;
	go$pkg.BPF_JGT = 32;
	go$pkg.BPF_JMP = 5;
	go$pkg.BPF_JSET = 64;
	go$pkg.BPF_K = 0;
	go$pkg.BPF_LD = 0;
	go$pkg.BPF_LDX = 1;
	go$pkg.BPF_LEN = 128;
	go$pkg.BPF_LSH = 96;
	go$pkg.BPF_MAJOR_VERSION = 1;
	go$pkg.BPF_MAXBUFSIZE = 524288;
	go$pkg.BPF_MAXINSNS = 512;
	go$pkg.BPF_MEM = 96;
	go$pkg.BPF_MEMWORDS = 16;
	go$pkg.BPF_MINBUFSIZE = 32;
	go$pkg.BPF_MINOR_VERSION = 1;
	go$pkg.BPF_MISC = 7;
	go$pkg.BPF_MSH = 160;
	go$pkg.BPF_MUL = 32;
	go$pkg.BPF_NEG = 128;
	go$pkg.BPF_OR = 64;
	go$pkg.BPF_RELEASE = 199606;
	go$pkg.BPF_RET = 6;
	go$pkg.BPF_RSH = 112;
	go$pkg.BPF_ST = 2;
	go$pkg.BPF_STX = 3;
	go$pkg.BPF_SUB = 16;
	go$pkg.BPF_TAX = 0;
	go$pkg.BPF_TXA = 128;
	go$pkg.BPF_W = 0;
	go$pkg.BPF_X = 8;
	go$pkg.BRKINT = 2;
	go$pkg.CFLUSH = 15;
	go$pkg.CLOCAL = 32768;
	go$pkg.CREAD = 2048;
	go$pkg.CS5 = 0;
	go$pkg.CS6 = 256;
	go$pkg.CS7 = 512;
	go$pkg.CS8 = 768;
	go$pkg.CSIZE = 768;
	go$pkg.CSTART = 17;
	go$pkg.CSTATUS = 20;
	go$pkg.CSTOP = 19;
	go$pkg.CSTOPB = 1024;
	go$pkg.CSUSP = 26;
	go$pkg.CTL_MAXNAME = 12;
	go$pkg.CTL_NET = 4;
	go$pkg.DLT_APPLE_IP_OVER_IEEE1394 = 138;
	go$pkg.DLT_ARCNET = 7;
	go$pkg.DLT_ATM_CLIP = 19;
	go$pkg.DLT_ATM_RFC1483 = 11;
	go$pkg.DLT_AX25 = 3;
	go$pkg.DLT_CHAOS = 5;
	go$pkg.DLT_CHDLC = 104;
	go$pkg.DLT_C_HDLC = 104;
	go$pkg.DLT_EN10MB = 1;
	go$pkg.DLT_EN3MB = 2;
	go$pkg.DLT_FDDI = 10;
	go$pkg.DLT_IEEE802 = 6;
	go$pkg.DLT_IEEE802_11 = 105;
	go$pkg.DLT_IEEE802_11_RADIO = 127;
	go$pkg.DLT_IEEE802_11_RADIO_AVS = 163;
	go$pkg.DLT_LINUX_SLL = 113;
	go$pkg.DLT_LOOP = 108;
	go$pkg.DLT_NULL = 0;
	go$pkg.DLT_PFLOG = 117;
	go$pkg.DLT_PFSYNC = 18;
	go$pkg.DLT_PPP = 9;
	go$pkg.DLT_PPP_BSDOS = 16;
	go$pkg.DLT_PPP_SERIAL = 50;
	go$pkg.DLT_PRONET = 4;
	go$pkg.DLT_RAW = 12;
	go$pkg.DLT_SLIP = 8;
	go$pkg.DLT_SLIP_BSDOS = 15;
	go$pkg.DT_BLK = 6;
	go$pkg.DT_CHR = 2;
	go$pkg.DT_DIR = 4;
	go$pkg.DT_FIFO = 1;
	go$pkg.DT_LNK = 10;
	go$pkg.DT_REG = 8;
	go$pkg.DT_SOCK = 12;
	go$pkg.DT_UNKNOWN = 0;
	go$pkg.DT_WHT = 14;
	go$pkg.ECHO = 8;
	go$pkg.ECHOCTL = 64;
	go$pkg.ECHOE = 2;
	go$pkg.ECHOK = 4;
	go$pkg.ECHOKE = 1;
	go$pkg.ECHONL = 16;
	go$pkg.ECHOPRT = 32;
	go$pkg.EVFILT_AIO = -3;
	go$pkg.EVFILT_FS = -9;
	go$pkg.EVFILT_MACHPORT = -8;
	go$pkg.EVFILT_PROC = -5;
	go$pkg.EVFILT_READ = -1;
	go$pkg.EVFILT_SIGNAL = -6;
	go$pkg.EVFILT_SYSCOUNT = 12;
	go$pkg.EVFILT_THREADMARKER = 12;
	go$pkg.EVFILT_TIMER = -7;
	go$pkg.EVFILT_USER = -10;
	go$pkg.EVFILT_VM = -12;
	go$pkg.EVFILT_VNODE = -4;
	go$pkg.EVFILT_WRITE = -2;
	go$pkg.EV_ADD = 1;
	go$pkg.EV_CLEAR = 32;
	go$pkg.EV_DELETE = 2;
	go$pkg.EV_DISABLE = 8;
	go$pkg.EV_DISPATCH = 128;
	go$pkg.EV_ENABLE = 4;
	go$pkg.EV_EOF = 32768;
	go$pkg.EV_ERROR = 16384;
	go$pkg.EV_FLAG0 = 4096;
	go$pkg.EV_FLAG1 = 8192;
	go$pkg.EV_ONESHOT = 16;
	go$pkg.EV_OOBAND = 8192;
	go$pkg.EV_POLL = 4096;
	go$pkg.EV_RECEIPT = 64;
	go$pkg.EV_SYSFLAGS = 61440;
	go$pkg.EXTA = 19200;
	go$pkg.EXTB = 38400;
	go$pkg.EXTPROC = 2048;
	go$pkg.FD_CLOEXEC = 1;
	go$pkg.FD_SETSIZE = 1024;
	go$pkg.FLUSHO = 8388608;
	go$pkg.F_ADDFILESIGS = 61;
	go$pkg.F_ADDSIGS = 59;
	go$pkg.F_ALLOCATEALL = 4;
	go$pkg.F_ALLOCATECONTIG = 2;
	go$pkg.F_CHKCLEAN = 41;
	go$pkg.F_DUPFD = 0;
	go$pkg.F_DUPFD_CLOEXEC = 67;
	go$pkg.F_FLUSH_DATA = 40;
	go$pkg.F_FREEZE_FS = 53;
	go$pkg.F_FULLFSYNC = 51;
	go$pkg.F_GETFD = 1;
	go$pkg.F_GETFL = 3;
	go$pkg.F_GETLK = 7;
	go$pkg.F_GETLKPID = 66;
	go$pkg.F_GETNOSIGPIPE = 74;
	go$pkg.F_GETOWN = 5;
	go$pkg.F_GETPATH = 50;
	go$pkg.F_GETPATH_MTMINFO = 71;
	go$pkg.F_GETPROTECTIONCLASS = 63;
	go$pkg.F_GLOBAL_NOCACHE = 55;
	go$pkg.F_LOG2PHYS = 49;
	go$pkg.F_LOG2PHYS_EXT = 65;
	go$pkg.F_MARKDEPENDENCY = 60;
	go$pkg.F_NOCACHE = 48;
	go$pkg.F_NODIRECT = 62;
	go$pkg.F_OK = 0;
	go$pkg.F_PATHPKG_CHECK = 52;
	go$pkg.F_PEOFPOSMODE = 3;
	go$pkg.F_PREALLOCATE = 42;
	go$pkg.F_RDADVISE = 44;
	go$pkg.F_RDAHEAD = 45;
	go$pkg.F_RDLCK = 1;
	go$pkg.F_READBOOTSTRAP = 46;
	go$pkg.F_SETBACKINGSTORE = 70;
	go$pkg.F_SETFD = 2;
	go$pkg.F_SETFL = 4;
	go$pkg.F_SETLK = 8;
	go$pkg.F_SETLKW = 9;
	go$pkg.F_SETNOSIGPIPE = 73;
	go$pkg.F_SETOWN = 6;
	go$pkg.F_SETPROTECTIONCLASS = 64;
	go$pkg.F_SETSIZE = 43;
	go$pkg.F_THAW_FS = 54;
	go$pkg.F_UNLCK = 2;
	go$pkg.F_VOLPOSMODE = 4;
	go$pkg.F_WRITEBOOTSTRAP = 47;
	go$pkg.F_WRLCK = 3;
	go$pkg.HUPCL = 16384;
	go$pkg.ICANON = 256;
	go$pkg.ICMP6_FILTER = 18;
	go$pkg.ICRNL = 256;
	go$pkg.IEXTEN = 1024;
	go$pkg.IFF_ALLMULTI = 512;
	go$pkg.IFF_ALTPHYS = 16384;
	go$pkg.IFF_BROADCAST = 2;
	go$pkg.IFF_DEBUG = 4;
	go$pkg.IFF_LINK0 = 4096;
	go$pkg.IFF_LINK1 = 8192;
	go$pkg.IFF_LINK2 = 16384;
	go$pkg.IFF_LOOPBACK = 8;
	go$pkg.IFF_MULTICAST = 32768;
	go$pkg.IFF_NOARP = 128;
	go$pkg.IFF_NOTRAILERS = 32;
	go$pkg.IFF_OACTIVE = 1024;
	go$pkg.IFF_POINTOPOINT = 16;
	go$pkg.IFF_PROMISC = 256;
	go$pkg.IFF_RUNNING = 64;
	go$pkg.IFF_SIMPLEX = 2048;
	go$pkg.IFF_UP = 1;
	go$pkg.IFNAMSIZ = 16;
	go$pkg.IFT_1822 = 2;
	go$pkg.IFT_AAL5 = 49;
	go$pkg.IFT_ARCNET = 35;
	go$pkg.IFT_ARCNETPLUS = 36;
	go$pkg.IFT_ATM = 37;
	go$pkg.IFT_BRIDGE = 209;
	go$pkg.IFT_CARP = 248;
	go$pkg.IFT_CELLULAR = 255;
	go$pkg.IFT_CEPT = 19;
	go$pkg.IFT_DS3 = 30;
	go$pkg.IFT_ENC = 244;
	go$pkg.IFT_EON = 25;
	go$pkg.IFT_ETHER = 6;
	go$pkg.IFT_FAITH = 56;
	go$pkg.IFT_FDDI = 15;
	go$pkg.IFT_FRELAY = 32;
	go$pkg.IFT_FRELAYDCE = 44;
	go$pkg.IFT_GIF = 55;
	go$pkg.IFT_HDH1822 = 3;
	go$pkg.IFT_HIPPI = 47;
	go$pkg.IFT_HSSI = 46;
	go$pkg.IFT_HY = 14;
	go$pkg.IFT_IEEE1394 = 144;
	go$pkg.IFT_IEEE8023ADLAG = 136;
	go$pkg.IFT_ISDNBASIC = 20;
	go$pkg.IFT_ISDNPRIMARY = 21;
	go$pkg.IFT_ISO88022LLC = 41;
	go$pkg.IFT_ISO88023 = 7;
	go$pkg.IFT_ISO88024 = 8;
	go$pkg.IFT_ISO88025 = 9;
	go$pkg.IFT_ISO88026 = 10;
	go$pkg.IFT_L2VLAN = 135;
	go$pkg.IFT_LAPB = 16;
	go$pkg.IFT_LOCALTALK = 42;
	go$pkg.IFT_LOOP = 24;
	go$pkg.IFT_MIOX25 = 38;
	go$pkg.IFT_MODEM = 48;
	go$pkg.IFT_NSIP = 27;
	go$pkg.IFT_OTHER = 1;
	go$pkg.IFT_P10 = 12;
	go$pkg.IFT_P80 = 13;
	go$pkg.IFT_PARA = 34;
	go$pkg.IFT_PDP = 255;
	go$pkg.IFT_PFLOG = 245;
	go$pkg.IFT_PFSYNC = 246;
	go$pkg.IFT_PPP = 23;
	go$pkg.IFT_PROPMUX = 54;
	go$pkg.IFT_PROPVIRTUAL = 53;
	go$pkg.IFT_PTPSERIAL = 22;
	go$pkg.IFT_RS232 = 33;
	go$pkg.IFT_SDLC = 17;
	go$pkg.IFT_SIP = 31;
	go$pkg.IFT_SLIP = 28;
	go$pkg.IFT_SMDSDXI = 43;
	go$pkg.IFT_SMDSICIP = 52;
	go$pkg.IFT_SONET = 39;
	go$pkg.IFT_SONETPATH = 50;
	go$pkg.IFT_SONETVT = 51;
	go$pkg.IFT_STARLAN = 11;
	go$pkg.IFT_STF = 57;
	go$pkg.IFT_T1 = 18;
	go$pkg.IFT_ULTRA = 29;
	go$pkg.IFT_V35 = 45;
	go$pkg.IFT_X25 = 5;
	go$pkg.IFT_X25DDN = 4;
	go$pkg.IFT_X25PLE = 40;
	go$pkg.IFT_XETHER = 26;
	go$pkg.IGNBRK = 1;
	go$pkg.IGNCR = 128;
	go$pkg.IGNPAR = 4;
	go$pkg.IMAXBEL = 8192;
	go$pkg.INLCR = 64;
	go$pkg.INPCK = 16;
	go$pkg.IN_CLASSA_HOST = 16777215;
	go$pkg.IN_CLASSA_MAX = 128;
	go$pkg.IN_CLASSA_NET = 4278190080;
	go$pkg.IN_CLASSA_NSHIFT = 24;
	go$pkg.IN_CLASSB_HOST = 65535;
	go$pkg.IN_CLASSB_MAX = 65536;
	go$pkg.IN_CLASSB_NET = 4294901760;
	go$pkg.IN_CLASSB_NSHIFT = 16;
	go$pkg.IN_CLASSC_HOST = 255;
	go$pkg.IN_CLASSC_NET = 4294967040;
	go$pkg.IN_CLASSC_NSHIFT = 8;
	go$pkg.IN_CLASSD_HOST = 268435455;
	go$pkg.IN_CLASSD_NET = 4026531840;
	go$pkg.IN_CLASSD_NSHIFT = 28;
	go$pkg.IN_LINKLOCALNETNUM = 2851995648;
	go$pkg.IN_LOOPBACKNET = 127;
	go$pkg.IPPROTO_3PC = 34;
	go$pkg.IPPROTO_ADFS = 68;
	go$pkg.IPPROTO_AH = 51;
	go$pkg.IPPROTO_AHIP = 61;
	go$pkg.IPPROTO_APES = 99;
	go$pkg.IPPROTO_ARGUS = 13;
	go$pkg.IPPROTO_AX25 = 93;
	go$pkg.IPPROTO_BHA = 49;
	go$pkg.IPPROTO_BLT = 30;
	go$pkg.IPPROTO_BRSATMON = 76;
	go$pkg.IPPROTO_CFTP = 62;
	go$pkg.IPPROTO_CHAOS = 16;
	go$pkg.IPPROTO_CMTP = 38;
	go$pkg.IPPROTO_CPHB = 73;
	go$pkg.IPPROTO_CPNX = 72;
	go$pkg.IPPROTO_DDP = 37;
	go$pkg.IPPROTO_DGP = 86;
	go$pkg.IPPROTO_DIVERT = 254;
	go$pkg.IPPROTO_DONE = 257;
	go$pkg.IPPROTO_DSTOPTS = 60;
	go$pkg.IPPROTO_EGP = 8;
	go$pkg.IPPROTO_EMCON = 14;
	go$pkg.IPPROTO_ENCAP = 98;
	go$pkg.IPPROTO_EON = 80;
	go$pkg.IPPROTO_ESP = 50;
	go$pkg.IPPROTO_ETHERIP = 97;
	go$pkg.IPPROTO_FRAGMENT = 44;
	go$pkg.IPPROTO_GGP = 3;
	go$pkg.IPPROTO_GMTP = 100;
	go$pkg.IPPROTO_GRE = 47;
	go$pkg.IPPROTO_HELLO = 63;
	go$pkg.IPPROTO_HMP = 20;
	go$pkg.IPPROTO_HOPOPTS = 0;
	go$pkg.IPPROTO_ICMP = 1;
	go$pkg.IPPROTO_ICMPV6 = 58;
	go$pkg.IPPROTO_IDP = 22;
	go$pkg.IPPROTO_IDPR = 35;
	go$pkg.IPPROTO_IDRP = 45;
	go$pkg.IPPROTO_IGMP = 2;
	go$pkg.IPPROTO_IGP = 85;
	go$pkg.IPPROTO_IGRP = 88;
	go$pkg.IPPROTO_IL = 40;
	go$pkg.IPPROTO_INLSP = 52;
	go$pkg.IPPROTO_INP = 32;
	go$pkg.IPPROTO_IP = 0;
	go$pkg.IPPROTO_IPCOMP = 108;
	go$pkg.IPPROTO_IPCV = 71;
	go$pkg.IPPROTO_IPEIP = 94;
	go$pkg.IPPROTO_IPIP = 4;
	go$pkg.IPPROTO_IPPC = 67;
	go$pkg.IPPROTO_IPV4 = 4;
	go$pkg.IPPROTO_IPV6 = 41;
	go$pkg.IPPROTO_IRTP = 28;
	go$pkg.IPPROTO_KRYPTOLAN = 65;
	go$pkg.IPPROTO_LARP = 91;
	go$pkg.IPPROTO_LEAF1 = 25;
	go$pkg.IPPROTO_LEAF2 = 26;
	go$pkg.IPPROTO_MAX = 256;
	go$pkg.IPPROTO_MAXID = 52;
	go$pkg.IPPROTO_MEAS = 19;
	go$pkg.IPPROTO_MHRP = 48;
	go$pkg.IPPROTO_MICP = 95;
	go$pkg.IPPROTO_MTP = 92;
	go$pkg.IPPROTO_MUX = 18;
	go$pkg.IPPROTO_ND = 77;
	go$pkg.IPPROTO_NHRP = 54;
	go$pkg.IPPROTO_NONE = 59;
	go$pkg.IPPROTO_NSP = 31;
	go$pkg.IPPROTO_NVPII = 11;
	go$pkg.IPPROTO_OSPFIGP = 89;
	go$pkg.IPPROTO_PGM = 113;
	go$pkg.IPPROTO_PIGP = 9;
	go$pkg.IPPROTO_PIM = 103;
	go$pkg.IPPROTO_PRM = 21;
	go$pkg.IPPROTO_PUP = 12;
	go$pkg.IPPROTO_PVP = 75;
	go$pkg.IPPROTO_RAW = 255;
	go$pkg.IPPROTO_RCCMON = 10;
	go$pkg.IPPROTO_RDP = 27;
	go$pkg.IPPROTO_ROUTING = 43;
	go$pkg.IPPROTO_RSVP = 46;
	go$pkg.IPPROTO_RVD = 66;
	go$pkg.IPPROTO_SATEXPAK = 64;
	go$pkg.IPPROTO_SATMON = 69;
	go$pkg.IPPROTO_SCCSP = 96;
	go$pkg.IPPROTO_SCTP = 132;
	go$pkg.IPPROTO_SDRP = 42;
	go$pkg.IPPROTO_SEP = 33;
	go$pkg.IPPROTO_SRPC = 90;
	go$pkg.IPPROTO_ST = 7;
	go$pkg.IPPROTO_SVMTP = 82;
	go$pkg.IPPROTO_SWIPE = 53;
	go$pkg.IPPROTO_TCF = 87;
	go$pkg.IPPROTO_TCP = 6;
	go$pkg.IPPROTO_TP = 29;
	go$pkg.IPPROTO_TPXX = 39;
	go$pkg.IPPROTO_TRUNK1 = 23;
	go$pkg.IPPROTO_TRUNK2 = 24;
	go$pkg.IPPROTO_TTP = 84;
	go$pkg.IPPROTO_UDP = 17;
	go$pkg.IPPROTO_VINES = 83;
	go$pkg.IPPROTO_VISA = 70;
	go$pkg.IPPROTO_VMTP = 81;
	go$pkg.IPPROTO_WBEXPAK = 79;
	go$pkg.IPPROTO_WBMON = 78;
	go$pkg.IPPROTO_WSN = 74;
	go$pkg.IPPROTO_XNET = 15;
	go$pkg.IPPROTO_XTP = 36;
	go$pkg.IPV6_2292DSTOPTS = 23;
	go$pkg.IPV6_2292HOPLIMIT = 20;
	go$pkg.IPV6_2292HOPOPTS = 22;
	go$pkg.IPV6_2292NEXTHOP = 21;
	go$pkg.IPV6_2292PKTINFO = 19;
	go$pkg.IPV6_2292PKTOPTIONS = 25;
	go$pkg.IPV6_2292RTHDR = 24;
	go$pkg.IPV6_BINDV6ONLY = 27;
	go$pkg.IPV6_BOUND_IF = 125;
	go$pkg.IPV6_CHECKSUM = 26;
	go$pkg.IPV6_DEFAULT_MULTICAST_HOPS = 1;
	go$pkg.IPV6_DEFAULT_MULTICAST_LOOP = 1;
	go$pkg.IPV6_DEFHLIM = 64;
	go$pkg.IPV6_FAITH = 29;
	go$pkg.IPV6_FLOWINFO_MASK = 4294967055;
	go$pkg.IPV6_FLOWLABEL_MASK = 4294905600;
	go$pkg.IPV6_FRAGTTL = 120;
	go$pkg.IPV6_FW_ADD = 30;
	go$pkg.IPV6_FW_DEL = 31;
	go$pkg.IPV6_FW_FLUSH = 32;
	go$pkg.IPV6_FW_GET = 34;
	go$pkg.IPV6_FW_ZERO = 33;
	go$pkg.IPV6_HLIMDEC = 1;
	go$pkg.IPV6_IPSEC_POLICY = 28;
	go$pkg.IPV6_JOIN_GROUP = 12;
	go$pkg.IPV6_LEAVE_GROUP = 13;
	go$pkg.IPV6_MAXHLIM = 255;
	go$pkg.IPV6_MAXOPTHDR = 2048;
	go$pkg.IPV6_MAXPACKET = 65535;
	go$pkg.IPV6_MAX_GROUP_SRC_FILTER = 512;
	go$pkg.IPV6_MAX_MEMBERSHIPS = 4095;
	go$pkg.IPV6_MAX_SOCK_SRC_FILTER = 128;
	go$pkg.IPV6_MIN_MEMBERSHIPS = 31;
	go$pkg.IPV6_MMTU = 1280;
	go$pkg.IPV6_MULTICAST_HOPS = 10;
	go$pkg.IPV6_MULTICAST_IF = 9;
	go$pkg.IPV6_MULTICAST_LOOP = 11;
	go$pkg.IPV6_PORTRANGE = 14;
	go$pkg.IPV6_PORTRANGE_DEFAULT = 0;
	go$pkg.IPV6_PORTRANGE_HIGH = 1;
	go$pkg.IPV6_PORTRANGE_LOW = 2;
	go$pkg.IPV6_RECVTCLASS = 35;
	go$pkg.IPV6_RTHDR_LOOSE = 0;
	go$pkg.IPV6_RTHDR_STRICT = 1;
	go$pkg.IPV6_RTHDR_TYPE_0 = 0;
	go$pkg.IPV6_SOCKOPT_RESERVED1 = 3;
	go$pkg.IPV6_TCLASS = 36;
	go$pkg.IPV6_UNICAST_HOPS = 4;
	go$pkg.IPV6_V6ONLY = 27;
	go$pkg.IPV6_VERSION = 96;
	go$pkg.IPV6_VERSION_MASK = 240;
	go$pkg.IP_ADD_MEMBERSHIP = 12;
	go$pkg.IP_ADD_SOURCE_MEMBERSHIP = 70;
	go$pkg.IP_BLOCK_SOURCE = 72;
	go$pkg.IP_BOUND_IF = 25;
	go$pkg.IP_DEFAULT_MULTICAST_LOOP = 1;
	go$pkg.IP_DEFAULT_MULTICAST_TTL = 1;
	go$pkg.IP_DF = 16384;
	go$pkg.IP_DROP_MEMBERSHIP = 13;
	go$pkg.IP_DROP_SOURCE_MEMBERSHIP = 71;
	go$pkg.IP_DUMMYNET_CONFIGURE = 60;
	go$pkg.IP_DUMMYNET_DEL = 61;
	go$pkg.IP_DUMMYNET_FLUSH = 62;
	go$pkg.IP_DUMMYNET_GET = 64;
	go$pkg.IP_FAITH = 22;
	go$pkg.IP_FW_ADD = 40;
	go$pkg.IP_FW_DEL = 41;
	go$pkg.IP_FW_FLUSH = 42;
	go$pkg.IP_FW_GET = 44;
	go$pkg.IP_FW_RESETLOG = 45;
	go$pkg.IP_FW_ZERO = 43;
	go$pkg.IP_HDRINCL = 2;
	go$pkg.IP_IPSEC_POLICY = 21;
	go$pkg.IP_MAXPACKET = 65535;
	go$pkg.IP_MAX_GROUP_SRC_FILTER = 512;
	go$pkg.IP_MAX_MEMBERSHIPS = 4095;
	go$pkg.IP_MAX_SOCK_MUTE_FILTER = 128;
	go$pkg.IP_MAX_SOCK_SRC_FILTER = 128;
	go$pkg.IP_MF = 8192;
	go$pkg.IP_MIN_MEMBERSHIPS = 31;
	go$pkg.IP_MSFILTER = 74;
	go$pkg.IP_MSS = 576;
	go$pkg.IP_MULTICAST_IF = 9;
	go$pkg.IP_MULTICAST_IFINDEX = 66;
	go$pkg.IP_MULTICAST_LOOP = 11;
	go$pkg.IP_MULTICAST_TTL = 10;
	go$pkg.IP_MULTICAST_VIF = 14;
	go$pkg.IP_NAT__XXX = 55;
	go$pkg.IP_OFFMASK = 8191;
	go$pkg.IP_OLD_FW_ADD = 50;
	go$pkg.IP_OLD_FW_DEL = 51;
	go$pkg.IP_OLD_FW_FLUSH = 52;
	go$pkg.IP_OLD_FW_GET = 54;
	go$pkg.IP_OLD_FW_RESETLOG = 56;
	go$pkg.IP_OLD_FW_ZERO = 53;
	go$pkg.IP_OPTIONS = 1;
	go$pkg.IP_PKTINFO = 26;
	go$pkg.IP_PORTRANGE = 19;
	go$pkg.IP_PORTRANGE_DEFAULT = 0;
	go$pkg.IP_PORTRANGE_HIGH = 1;
	go$pkg.IP_PORTRANGE_LOW = 2;
	go$pkg.IP_RECVDSTADDR = 7;
	go$pkg.IP_RECVIF = 20;
	go$pkg.IP_RECVOPTS = 5;
	go$pkg.IP_RECVPKTINFO = 26;
	go$pkg.IP_RECVRETOPTS = 6;
	go$pkg.IP_RECVTTL = 24;
	go$pkg.IP_RETOPTS = 8;
	go$pkg.IP_RF = 32768;
	go$pkg.IP_RSVP_OFF = 16;
	go$pkg.IP_RSVP_ON = 15;
	go$pkg.IP_RSVP_VIF_OFF = 18;
	go$pkg.IP_RSVP_VIF_ON = 17;
	go$pkg.IP_STRIPHDR = 23;
	go$pkg.IP_TOS = 3;
	go$pkg.IP_TRAFFIC_MGT_BACKGROUND = 65;
	go$pkg.IP_TTL = 4;
	go$pkg.IP_UNBLOCK_SOURCE = 73;
	go$pkg.ISIG = 128;
	go$pkg.ISTRIP = 32;
	go$pkg.IUTF8 = 16384;
	go$pkg.IXANY = 2048;
	go$pkg.IXOFF = 1024;
	go$pkg.IXON = 512;
	go$pkg.LOCK_EX = 2;
	go$pkg.LOCK_NB = 4;
	go$pkg.LOCK_SH = 1;
	go$pkg.LOCK_UN = 8;
	go$pkg.MADV_CAN_REUSE = 9;
	go$pkg.MADV_DONTNEED = 4;
	go$pkg.MADV_FREE = 5;
	go$pkg.MADV_FREE_REUSABLE = 7;
	go$pkg.MADV_FREE_REUSE = 8;
	go$pkg.MADV_NORMAL = 0;
	go$pkg.MADV_RANDOM = 1;
	go$pkg.MADV_SEQUENTIAL = 2;
	go$pkg.MADV_WILLNEED = 3;
	go$pkg.MADV_ZERO_WIRED_PAGES = 6;
	go$pkg.MAP_ANON = 4096;
	go$pkg.MAP_COPY = 2;
	go$pkg.MAP_FILE = 0;
	go$pkg.MAP_FIXED = 16;
	go$pkg.MAP_HASSEMAPHORE = 512;
	go$pkg.MAP_JIT = 2048;
	go$pkg.MAP_NOCACHE = 1024;
	go$pkg.MAP_NOEXTEND = 256;
	go$pkg.MAP_NORESERVE = 64;
	go$pkg.MAP_PRIVATE = 2;
	go$pkg.MAP_RENAME = 32;
	go$pkg.MAP_RESERVED0080 = 128;
	go$pkg.MAP_SHARED = 1;
	go$pkg.MCL_CURRENT = 1;
	go$pkg.MCL_FUTURE = 2;
	go$pkg.MSG_CTRUNC = 32;
	go$pkg.MSG_DONTROUTE = 4;
	go$pkg.MSG_DONTWAIT = 128;
	go$pkg.MSG_EOF = 256;
	go$pkg.MSG_EOR = 8;
	go$pkg.MSG_FLUSH = 1024;
	go$pkg.MSG_HAVEMORE = 8192;
	go$pkg.MSG_HOLD = 2048;
	go$pkg.MSG_NEEDSA = 65536;
	go$pkg.MSG_OOB = 1;
	go$pkg.MSG_PEEK = 2;
	go$pkg.MSG_RCVMORE = 16384;
	go$pkg.MSG_SEND = 4096;
	go$pkg.MSG_TRUNC = 16;
	go$pkg.MSG_WAITALL = 64;
	go$pkg.MSG_WAITSTREAM = 512;
	go$pkg.MS_ASYNC = 1;
	go$pkg.MS_DEACTIVATE = 8;
	go$pkg.MS_INVALIDATE = 2;
	go$pkg.MS_KILLPAGES = 4;
	go$pkg.MS_SYNC = 16;
	go$pkg.NAME_MAX = 255;
	go$pkg.NET_RT_DUMP = 1;
	go$pkg.NET_RT_DUMP2 = 7;
	go$pkg.NET_RT_FLAGS = 2;
	go$pkg.NET_RT_IFLIST = 3;
	go$pkg.NET_RT_IFLIST2 = 6;
	go$pkg.NET_RT_MAXID = 10;
	go$pkg.NET_RT_STAT = 4;
	go$pkg.NET_RT_TRASH = 5;
	go$pkg.NOFLSH = 2147483648;
	go$pkg.NOTE_ABSOLUTE = 8;
	go$pkg.NOTE_ATTRIB = 8;
	go$pkg.NOTE_CHILD = 4;
	go$pkg.NOTE_DELETE = 1;
	go$pkg.NOTE_EXEC = 536870912;
	go$pkg.NOTE_EXIT = 2147483648;
	go$pkg.NOTE_EXITSTATUS = 67108864;
	go$pkg.NOTE_EXTEND = 4;
	go$pkg.NOTE_FFAND = 1073741824;
	go$pkg.NOTE_FFCOPY = 3221225472;
	go$pkg.NOTE_FFCTRLMASK = 3221225472;
	go$pkg.NOTE_FFLAGSMASK = 16777215;
	go$pkg.NOTE_FFNOP = 0;
	go$pkg.NOTE_FFOR = 2147483648;
	go$pkg.NOTE_FORK = 1073741824;
	go$pkg.NOTE_LINK = 16;
	go$pkg.NOTE_LOWAT = 1;
	go$pkg.NOTE_NONE = 128;
	go$pkg.NOTE_NSECONDS = 4;
	go$pkg.NOTE_PCTRLMASK = -1048576;
	go$pkg.NOTE_PDATAMASK = 1048575;
	go$pkg.NOTE_REAP = 268435456;
	go$pkg.NOTE_RENAME = 32;
	go$pkg.NOTE_RESOURCEEND = 33554432;
	go$pkg.NOTE_REVOKE = 64;
	go$pkg.NOTE_SECONDS = 1;
	go$pkg.NOTE_SIGNAL = 134217728;
	go$pkg.NOTE_TRACK = 1;
	go$pkg.NOTE_TRACKERR = 2;
	go$pkg.NOTE_TRIGGER = 16777216;
	go$pkg.NOTE_USECONDS = 2;
	go$pkg.NOTE_VM_ERROR = 268435456;
	go$pkg.NOTE_VM_PRESSURE = 2147483648;
	go$pkg.NOTE_VM_PRESSURE_SUDDEN_TERMINATE = 536870912;
	go$pkg.NOTE_VM_PRESSURE_TERMINATE = 1073741824;
	go$pkg.NOTE_WRITE = 2;
	go$pkg.OCRNL = 16;
	go$pkg.OFDEL = 131072;
	go$pkg.OFILL = 128;
	go$pkg.ONLCR = 2;
	go$pkg.ONLRET = 64;
	go$pkg.ONOCR = 32;
	go$pkg.ONOEOT = 8;
	go$pkg.OPOST = 1;
	go$pkg.O_ACCMODE = 3;
	go$pkg.O_ALERT = 536870912;
	go$pkg.O_APPEND = 8;
	go$pkg.O_ASYNC = 64;
	go$pkg.O_CLOEXEC = 16777216;
	go$pkg.O_CREAT = 512;
	go$pkg.O_DIRECTORY = 1048576;
	go$pkg.O_DSYNC = 4194304;
	go$pkg.O_EVTONLY = 32768;
	go$pkg.O_EXCL = 2048;
	go$pkg.O_EXLOCK = 32;
	go$pkg.O_FSYNC = 128;
	go$pkg.O_NDELAY = 4;
	go$pkg.O_NOCTTY = 131072;
	go$pkg.O_NOFOLLOW = 256;
	go$pkg.O_NONBLOCK = 4;
	go$pkg.O_POPUP = 2147483648;
	go$pkg.O_RDONLY = 0;
	go$pkg.O_RDWR = 2;
	go$pkg.O_SHLOCK = 16;
	go$pkg.O_SYMLINK = 2097152;
	go$pkg.O_SYNC = 128;
	go$pkg.O_TRUNC = 1024;
	go$pkg.O_WRONLY = 1;
	go$pkg.PARENB = 4096;
	go$pkg.PARMRK = 8;
	go$pkg.PARODD = 8192;
	go$pkg.PENDIN = 536870912;
	go$pkg.PRIO_PGRP = 1;
	go$pkg.PRIO_PROCESS = 0;
	go$pkg.PRIO_USER = 2;
	go$pkg.PROT_EXEC = 4;
	go$pkg.PROT_NONE = 0;
	go$pkg.PROT_READ = 1;
	go$pkg.PROT_WRITE = 2;
	go$pkg.PT_ATTACH = 10;
	go$pkg.PT_ATTACHEXC = 14;
	go$pkg.PT_CONTINUE = 7;
	go$pkg.PT_DENY_ATTACH = 31;
	go$pkg.PT_DETACH = 11;
	go$pkg.PT_FIRSTMACH = 32;
	go$pkg.PT_FORCEQUOTA = 30;
	go$pkg.PT_KILL = 8;
	go$pkg.PT_READ_D = 2;
	go$pkg.PT_READ_I = 1;
	go$pkg.PT_READ_U = 3;
	go$pkg.PT_SIGEXC = 12;
	go$pkg.PT_STEP = 9;
	go$pkg.PT_THUPDATE = 13;
	go$pkg.PT_TRACE_ME = 0;
	go$pkg.PT_WRITE_D = 5;
	go$pkg.PT_WRITE_I = 4;
	go$pkg.PT_WRITE_U = 6;
	go$pkg.RLIMIT_AS = 5;
	go$pkg.RLIMIT_CORE = 4;
	go$pkg.RLIMIT_CPU = 0;
	go$pkg.RLIMIT_DATA = 2;
	go$pkg.RLIMIT_FSIZE = 1;
	go$pkg.RLIMIT_NOFILE = 8;
	go$pkg.RLIMIT_STACK = 3;
	go$pkg.RLIM_INFINITY = 9223372036854775807;
	go$pkg.RTAX_AUTHOR = 6;
	go$pkg.RTAX_BRD = 7;
	go$pkg.RTAX_DST = 0;
	go$pkg.RTAX_GATEWAY = 1;
	go$pkg.RTAX_GENMASK = 3;
	go$pkg.RTAX_IFA = 5;
	go$pkg.RTAX_IFP = 4;
	go$pkg.RTAX_MAX = 8;
	go$pkg.RTAX_NETMASK = 2;
	go$pkg.RTA_AUTHOR = 64;
	go$pkg.RTA_BRD = 128;
	go$pkg.RTA_DST = 1;
	go$pkg.RTA_GATEWAY = 2;
	go$pkg.RTA_GENMASK = 8;
	go$pkg.RTA_IFA = 32;
	go$pkg.RTA_IFP = 16;
	go$pkg.RTA_NETMASK = 4;
	go$pkg.RTF_BLACKHOLE = 4096;
	go$pkg.RTF_BROADCAST = 4194304;
	go$pkg.RTF_CLONING = 256;
	go$pkg.RTF_CONDEMNED = 33554432;
	go$pkg.RTF_DELCLONE = 128;
	go$pkg.RTF_DONE = 64;
	go$pkg.RTF_DYNAMIC = 16;
	go$pkg.RTF_GATEWAY = 2;
	go$pkg.RTF_HOST = 4;
	go$pkg.RTF_IFREF = 67108864;
	go$pkg.RTF_IFSCOPE = 16777216;
	go$pkg.RTF_LLINFO = 1024;
	go$pkg.RTF_LOCAL = 2097152;
	go$pkg.RTF_MODIFIED = 32;
	go$pkg.RTF_MULTICAST = 8388608;
	go$pkg.RTF_PINNED = 1048576;
	go$pkg.RTF_PRCLONING = 65536;
	go$pkg.RTF_PROTO1 = 32768;
	go$pkg.RTF_PROTO2 = 16384;
	go$pkg.RTF_PROTO3 = 262144;
	go$pkg.RTF_REJECT = 8;
	go$pkg.RTF_STATIC = 2048;
	go$pkg.RTF_UP = 1;
	go$pkg.RTF_WASCLONED = 131072;
	go$pkg.RTF_XRESOLVE = 512;
	go$pkg.RTM_ADD = 1;
	go$pkg.RTM_CHANGE = 3;
	go$pkg.RTM_DELADDR = 13;
	go$pkg.RTM_DELETE = 2;
	go$pkg.RTM_DELMADDR = 16;
	go$pkg.RTM_GET = 4;
	go$pkg.RTM_GET2 = 20;
	go$pkg.RTM_IFINFO = 14;
	go$pkg.RTM_IFINFO2 = 18;
	go$pkg.RTM_LOCK = 8;
	go$pkg.RTM_LOSING = 5;
	go$pkg.RTM_MISS = 7;
	go$pkg.RTM_NEWADDR = 12;
	go$pkg.RTM_NEWMADDR = 15;
	go$pkg.RTM_NEWMADDR2 = 19;
	go$pkg.RTM_OLDADD = 9;
	go$pkg.RTM_OLDDEL = 10;
	go$pkg.RTM_REDIRECT = 6;
	go$pkg.RTM_RESOLVE = 11;
	go$pkg.RTM_RTTUNIT = 1000000;
	go$pkg.RTM_VERSION = 5;
	go$pkg.RTV_EXPIRE = 4;
	go$pkg.RTV_HOPCOUNT = 2;
	go$pkg.RTV_MTU = 1;
	go$pkg.RTV_RPIPE = 8;
	go$pkg.RTV_RTT = 64;
	go$pkg.RTV_RTTVAR = 128;
	go$pkg.RTV_SPIPE = 16;
	go$pkg.RTV_SSTHRESH = 32;
	go$pkg.RUSAGE_CHILDREN = -1;
	go$pkg.RUSAGE_SELF = 0;
	go$pkg.SCM_CREDS = 3;
	go$pkg.SCM_RIGHTS = 1;
	go$pkg.SCM_TIMESTAMP = 2;
	go$pkg.SCM_TIMESTAMP_MONOTONIC = 4;
	go$pkg.SHUT_RD = 0;
	go$pkg.SHUT_RDWR = 2;
	go$pkg.SHUT_WR = 1;
	go$pkg.SIOCADDMULTI = 2149607729;
	go$pkg.SIOCAIFADDR = 2151704858;
	go$pkg.SIOCALIFADDR = 2165860637;
	go$pkg.SIOCARPIPLL = 3223349544;
	go$pkg.SIOCATMARK = 1074033415;
	go$pkg.SIOCAUTOADDR = 3223349542;
	go$pkg.SIOCAUTONETMASK = 2149607719;
	go$pkg.SIOCDELMULTI = 2149607730;
	go$pkg.SIOCDIFADDR = 2149607705;
	go$pkg.SIOCDIFPHYADDR = 2149607745;
	go$pkg.SIOCDLIFADDR = 2165860639;
	go$pkg.SIOCGDRVSPEC = 3223873915;
	go$pkg.SIOCGETSGCNT = 3222565404;
	go$pkg.SIOCGETVIFCNT = 3222565403;
	go$pkg.SIOCGETVLAN = 3223349631;
	go$pkg.SIOCGHIWAT = 1074033409;
	go$pkg.SIOCGIFADDR = 3223349537;
	go$pkg.SIOCGIFALTMTU = 3223349576;
	go$pkg.SIOCGIFASYNCMAP = 3223349628;
	go$pkg.SIOCGIFBOND = 3223349575;
	go$pkg.SIOCGIFBRDADDR = 3223349539;
	go$pkg.SIOCGIFCAP = 3223349595;
	go$pkg.SIOCGIFCONF = 3222038820;
	go$pkg.SIOCGIFDEVMTU = 3223349572;
	go$pkg.SIOCGIFDSTADDR = 3223349538;
	go$pkg.SIOCGIFFLAGS = 3223349521;
	go$pkg.SIOCGIFGENERIC = 3223349562;
	go$pkg.SIOCGIFKPI = 3223349639;
	go$pkg.SIOCGIFMAC = 3223349634;
	go$pkg.SIOCGIFMEDIA = 3224135992;
	go$pkg.SIOCGIFMETRIC = 3223349527;
	go$pkg.SIOCGIFMTU = 3223349555;
	go$pkg.SIOCGIFNETMASK = 3223349541;
	go$pkg.SIOCGIFPDSTADDR = 3223349568;
	go$pkg.SIOCGIFPHYS = 3223349557;
	go$pkg.SIOCGIFPSRCADDR = 3223349567;
	go$pkg.SIOCGIFSTATUS = 3274795325;
	go$pkg.SIOCGIFVLAN = 3223349631;
	go$pkg.SIOCGIFWAKEFLAGS = 3223349640;
	go$pkg.SIOCGLIFADDR = 3239602462;
	go$pkg.SIOCGLIFPHYADDR = 3239602499;
	go$pkg.SIOCGLOWAT = 1074033411;
	go$pkg.SIOCGPGRP = 1074033417;
	go$pkg.SIOCIFCREATE = 3223349624;
	go$pkg.SIOCIFCREATE2 = 3223349626;
	go$pkg.SIOCIFDESTROY = 2149607801;
	go$pkg.SIOCRSLVMULTI = 3222300987;
	go$pkg.SIOCSDRVSPEC = 2150132091;
	go$pkg.SIOCSETVLAN = 2149607806;
	go$pkg.SIOCSHIWAT = 2147775232;
	go$pkg.SIOCSIFADDR = 2149607692;
	go$pkg.SIOCSIFALTMTU = 2149607749;
	go$pkg.SIOCSIFASYNCMAP = 2149607805;
	go$pkg.SIOCSIFBOND = 2149607750;
	go$pkg.SIOCSIFBRDADDR = 2149607699;
	go$pkg.SIOCSIFCAP = 2149607770;
	go$pkg.SIOCSIFDSTADDR = 2149607694;
	go$pkg.SIOCSIFFLAGS = 2149607696;
	go$pkg.SIOCSIFGENERIC = 2149607737;
	go$pkg.SIOCSIFKPI = 2149607814;
	go$pkg.SIOCSIFLLADDR = 2149607740;
	go$pkg.SIOCSIFMAC = 2149607811;
	go$pkg.SIOCSIFMEDIA = 3223349559;
	go$pkg.SIOCSIFMETRIC = 2149607704;
	go$pkg.SIOCSIFMTU = 2149607732;
	go$pkg.SIOCSIFNETMASK = 2149607702;
	go$pkg.SIOCSIFPHYADDR = 2151704894;
	go$pkg.SIOCSIFPHYS = 2149607734;
	go$pkg.SIOCSIFVLAN = 2149607806;
	go$pkg.SIOCSLIFPHYADDR = 2165860674;
	go$pkg.SIOCSLOWAT = 2147775234;
	go$pkg.SIOCSPGRP = 2147775240;
	go$pkg.SOCK_DGRAM = 2;
	go$pkg.SOCK_MAXADDRLEN = 255;
	go$pkg.SOCK_RAW = 3;
	go$pkg.SOCK_RDM = 4;
	go$pkg.SOCK_SEQPACKET = 5;
	go$pkg.SOCK_STREAM = 1;
	go$pkg.SOL_SOCKET = 65535;
	go$pkg.SOMAXCONN = 128;
	go$pkg.SO_ACCEPTCONN = 2;
	go$pkg.SO_BROADCAST = 32;
	go$pkg.SO_DEBUG = 1;
	go$pkg.SO_DONTROUTE = 16;
	go$pkg.SO_DONTTRUNC = 8192;
	go$pkg.SO_ERROR = 4103;
	go$pkg.SO_KEEPALIVE = 8;
	go$pkg.SO_LABEL = 4112;
	go$pkg.SO_LINGER = 128;
	go$pkg.SO_LINGER_SEC = 4224;
	go$pkg.SO_NKE = 4129;
	go$pkg.SO_NOADDRERR = 4131;
	go$pkg.SO_NOSIGPIPE = 4130;
	go$pkg.SO_NOTIFYCONFLICT = 4134;
	go$pkg.SO_NP_EXTENSIONS = 4227;
	go$pkg.SO_NREAD = 4128;
	go$pkg.SO_NWRITE = 4132;
	go$pkg.SO_OOBINLINE = 256;
	go$pkg.SO_PEERLABEL = 4113;
	go$pkg.SO_RANDOMPORT = 4226;
	go$pkg.SO_RCVBUF = 4098;
	go$pkg.SO_RCVLOWAT = 4100;
	go$pkg.SO_RCVTIMEO = 4102;
	go$pkg.SO_RESTRICTIONS = 4225;
	go$pkg.SO_RESTRICT_DENYIN = 1;
	go$pkg.SO_RESTRICT_DENYOUT = 2;
	go$pkg.SO_RESTRICT_DENYSET = 2147483648;
	go$pkg.SO_REUSEADDR = 4;
	go$pkg.SO_REUSEPORT = 512;
	go$pkg.SO_REUSESHAREUID = 4133;
	go$pkg.SO_SNDBUF = 4097;
	go$pkg.SO_SNDLOWAT = 4099;
	go$pkg.SO_SNDTIMEO = 4101;
	go$pkg.SO_TIMESTAMP = 1024;
	go$pkg.SO_TIMESTAMP_MONOTONIC = 2048;
	go$pkg.SO_TYPE = 4104;
	go$pkg.SO_UPCALLCLOSEWAIT = 4135;
	go$pkg.SO_USELOOPBACK = 64;
	go$pkg.SO_WANTMORE = 16384;
	go$pkg.SO_WANTOOBFLAG = 32768;
	go$pkg.S_IEXEC = 64;
	go$pkg.S_IFBLK = 24576;
	go$pkg.S_IFCHR = 8192;
	go$pkg.S_IFDIR = 16384;
	go$pkg.S_IFIFO = 4096;
	go$pkg.S_IFLNK = 40960;
	go$pkg.S_IFMT = 61440;
	go$pkg.S_IFREG = 32768;
	go$pkg.S_IFSOCK = 49152;
	go$pkg.S_IFWHT = 57344;
	go$pkg.S_IREAD = 256;
	go$pkg.S_IRGRP = 32;
	go$pkg.S_IROTH = 4;
	go$pkg.S_IRUSR = 256;
	go$pkg.S_IRWXG = 56;
	go$pkg.S_IRWXO = 7;
	go$pkg.S_IRWXU = 448;
	go$pkg.S_ISGID = 1024;
	go$pkg.S_ISTXT = 512;
	go$pkg.S_ISUID = 2048;
	go$pkg.S_ISVTX = 512;
	go$pkg.S_IWGRP = 16;
	go$pkg.S_IWOTH = 2;
	go$pkg.S_IWRITE = 128;
	go$pkg.S_IWUSR = 128;
	go$pkg.S_IXGRP = 8;
	go$pkg.S_IXOTH = 1;
	go$pkg.S_IXUSR = 64;
	go$pkg.TCIFLUSH = 1;
	go$pkg.TCIOFLUSH = 3;
	go$pkg.TCOFLUSH = 2;
	go$pkg.TCP_CONNECTIONTIMEOUT = 32;
	go$pkg.TCP_KEEPALIVE = 16;
	go$pkg.TCP_MAXHLEN = 60;
	go$pkg.TCP_MAXOLEN = 40;
	go$pkg.TCP_MAXSEG = 2;
	go$pkg.TCP_MAXWIN = 65535;
	go$pkg.TCP_MAX_SACK = 3;
	go$pkg.TCP_MAX_WINSHIFT = 14;
	go$pkg.TCP_MINMSS = 216;
	go$pkg.TCP_MINMSSOVERLOAD = 1000;
	go$pkg.TCP_MSS = 512;
	go$pkg.TCP_NODELAY = 1;
	go$pkg.TCP_NOOPT = 8;
	go$pkg.TCP_NOPUSH = 4;
	go$pkg.TCP_RXT_CONNDROPTIME = 128;
	go$pkg.TCP_RXT_FINDROP = 256;
	go$pkg.TCSAFLUSH = 2;
	go$pkg.TIOCCBRK = 536900730;
	go$pkg.TIOCCDTR = 536900728;
	go$pkg.TIOCCONS = 2147775586;
	go$pkg.TIOCDCDTIMESTAMP = 1074820184;
	go$pkg.TIOCDRAIN = 536900702;
	go$pkg.TIOCDSIMICROCODE = 536900693;
	go$pkg.TIOCEXCL = 536900621;
	go$pkg.TIOCEXT = 2147775584;
	go$pkg.TIOCFLUSH = 2147775504;
	go$pkg.TIOCGDRAINWAIT = 1074033750;
	go$pkg.TIOCGETA = 1078490131;
	go$pkg.TIOCGETD = 1074033690;
	go$pkg.TIOCGPGRP = 1074033783;
	go$pkg.TIOCGWINSZ = 1074295912;
	go$pkg.TIOCIXOFF = 536900736;
	go$pkg.TIOCIXON = 536900737;
	go$pkg.TIOCMBIC = 2147775595;
	go$pkg.TIOCMBIS = 2147775596;
	go$pkg.TIOCMGDTRWAIT = 1074033754;
	go$pkg.TIOCMGET = 1074033770;
	go$pkg.TIOCMODG = 1074033667;
	go$pkg.TIOCMODS = 2147775492;
	go$pkg.TIOCMSDTRWAIT = 2147775579;
	go$pkg.TIOCMSET = 2147775597;
	go$pkg.TIOCM_CAR = 64;
	go$pkg.TIOCM_CD = 64;
	go$pkg.TIOCM_CTS = 32;
	go$pkg.TIOCM_DSR = 256;
	go$pkg.TIOCM_DTR = 2;
	go$pkg.TIOCM_LE = 1;
	go$pkg.TIOCM_RI = 128;
	go$pkg.TIOCM_RNG = 128;
	go$pkg.TIOCM_RTS = 4;
	go$pkg.TIOCM_SR = 16;
	go$pkg.TIOCM_ST = 8;
	go$pkg.TIOCNOTTY = 536900721;
	go$pkg.TIOCNXCL = 536900622;
	go$pkg.TIOCOUTQ = 1074033779;
	go$pkg.TIOCPKT = 2147775600;
	go$pkg.TIOCPKT_DATA = 0;
	go$pkg.TIOCPKT_DOSTOP = 32;
	go$pkg.TIOCPKT_FLUSHREAD = 1;
	go$pkg.TIOCPKT_FLUSHWRITE = 2;
	go$pkg.TIOCPKT_IOCTL = 64;
	go$pkg.TIOCPKT_NOSTOP = 16;
	go$pkg.TIOCPKT_START = 8;
	go$pkg.TIOCPKT_STOP = 4;
	go$pkg.TIOCPTYGNAME = 1082160211;
	go$pkg.TIOCPTYGRANT = 536900692;
	go$pkg.TIOCPTYUNLK = 536900690;
	go$pkg.TIOCREMOTE = 2147775593;
	go$pkg.TIOCSBRK = 536900731;
	go$pkg.TIOCSCONS = 536900707;
	go$pkg.TIOCSCTTY = 536900705;
	go$pkg.TIOCSDRAINWAIT = 2147775575;
	go$pkg.TIOCSDTR = 536900729;
	go$pkg.TIOCSETA = 2152231956;
	go$pkg.TIOCSETAF = 2152231958;
	go$pkg.TIOCSETAW = 2152231957;
	go$pkg.TIOCSETD = 2147775515;
	go$pkg.TIOCSIG = 536900703;
	go$pkg.TIOCSPGRP = 2147775606;
	go$pkg.TIOCSTART = 536900718;
	go$pkg.TIOCSTAT = 536900709;
	go$pkg.TIOCSTI = 2147578994;
	go$pkg.TIOCSTOP = 536900719;
	go$pkg.TIOCSWINSZ = 2148037735;
	go$pkg.TIOCTIMESTAMP = 1074820185;
	go$pkg.TIOCUCNTL = 2147775590;
	go$pkg.TOSTOP = 4194304;
	go$pkg.VDISCARD = 15;
	go$pkg.VDSUSP = 11;
	go$pkg.VEOF = 0;
	go$pkg.VEOL = 1;
	go$pkg.VEOL2 = 2;
	go$pkg.VERASE = 3;
	go$pkg.VINTR = 8;
	go$pkg.VKILL = 5;
	go$pkg.VLNEXT = 14;
	go$pkg.VMIN = 16;
	go$pkg.VQUIT = 9;
	go$pkg.VREPRINT = 6;
	go$pkg.VSTART = 12;
	go$pkg.VSTATUS = 18;
	go$pkg.VSTOP = 13;
	go$pkg.VSUSP = 10;
	go$pkg.VT0 = 0;
	go$pkg.VT1 = 65536;
	go$pkg.VTDLY = 65536;
	go$pkg.VTIME = 17;
	go$pkg.VWERASE = 4;
	go$pkg.WCONTINUED = 16;
	go$pkg.WCOREFLAG = 128;
	go$pkg.WEXITED = 4;
	go$pkg.WNOHANG = 1;
	go$pkg.WNOWAIT = 32;
	go$pkg.WORDSIZE = 64;
	go$pkg.WSTOPPED = 8;
	go$pkg.WUNTRACED = 2;
	go$pkg.E2BIG = 7;
	go$pkg.EACCES = 13;
	go$pkg.EADDRINUSE = 48;
	go$pkg.EADDRNOTAVAIL = 49;
	go$pkg.EAFNOSUPPORT = 47;
	go$pkg.EAGAIN = 35;
	go$pkg.EALREADY = 37;
	go$pkg.EAUTH = 80;
	go$pkg.EBADARCH = 86;
	go$pkg.EBADEXEC = 85;
	go$pkg.EBADF = 9;
	go$pkg.EBADMACHO = 88;
	go$pkg.EBADMSG = 94;
	go$pkg.EBADRPC = 72;
	go$pkg.EBUSY = 16;
	go$pkg.ECANCELED = 89;
	go$pkg.ECHILD = 10;
	go$pkg.ECONNABORTED = 53;
	go$pkg.ECONNREFUSED = 61;
	go$pkg.ECONNRESET = 54;
	go$pkg.EDEADLK = 11;
	go$pkg.EDESTADDRREQ = 39;
	go$pkg.EDEVERR = 83;
	go$pkg.EDOM = 33;
	go$pkg.EDQUOT = 69;
	go$pkg.EEXIST = 17;
	go$pkg.EFAULT = 14;
	go$pkg.EFBIG = 27;
	go$pkg.EFTYPE = 79;
	go$pkg.EHOSTDOWN = 64;
	go$pkg.EHOSTUNREACH = 65;
	go$pkg.EIDRM = 90;
	go$pkg.EILSEQ = 92;
	go$pkg.EINPROGRESS = 36;
	go$pkg.EINTR = 4;
	go$pkg.EINVAL = 22;
	go$pkg.EIO = 5;
	go$pkg.EISCONN = 56;
	go$pkg.EISDIR = 21;
	go$pkg.ELAST = 105;
	go$pkg.ELOOP = 62;
	go$pkg.EMFILE = 24;
	go$pkg.EMLINK = 31;
	go$pkg.EMSGSIZE = 40;
	go$pkg.EMULTIHOP = 95;
	go$pkg.ENAMETOOLONG = 63;
	go$pkg.ENEEDAUTH = 81;
	go$pkg.ENETDOWN = 50;
	go$pkg.ENETRESET = 52;
	go$pkg.ENETUNREACH = 51;
	go$pkg.ENFILE = 23;
	go$pkg.ENOATTR = 93;
	go$pkg.ENOBUFS = 55;
	go$pkg.ENODATA = 96;
	go$pkg.ENODEV = 19;
	go$pkg.ENOENT = 2;
	go$pkg.ENOEXEC = 8;
	go$pkg.ENOLCK = 77;
	go$pkg.ENOLINK = 97;
	go$pkg.ENOMEM = 12;
	go$pkg.ENOMSG = 91;
	go$pkg.ENOPOLICY = 103;
	go$pkg.ENOPROTOOPT = 42;
	go$pkg.ENOSPC = 28;
	go$pkg.ENOSR = 98;
	go$pkg.ENOSTR = 99;
	go$pkg.ENOSYS = 78;
	go$pkg.ENOTBLK = 15;
	go$pkg.ENOTCONN = 57;
	go$pkg.ENOTDIR = 20;
	go$pkg.ENOTEMPTY = 66;
	go$pkg.ENOTRECOVERABLE = 104;
	go$pkg.ENOTSOCK = 38;
	go$pkg.ENOTSUP = 45;
	go$pkg.ENOTTY = 25;
	go$pkg.ENXIO = 6;
	go$pkg.EOPNOTSUPP = 102;
	go$pkg.EOVERFLOW = 84;
	go$pkg.EOWNERDEAD = 105;
	go$pkg.EPERM = 1;
	go$pkg.EPFNOSUPPORT = 46;
	go$pkg.EPIPE = 32;
	go$pkg.EPROCLIM = 67;
	go$pkg.EPROCUNAVAIL = 76;
	go$pkg.EPROGMISMATCH = 75;
	go$pkg.EPROGUNAVAIL = 74;
	go$pkg.EPROTO = 100;
	go$pkg.EPROTONOSUPPORT = 43;
	go$pkg.EPROTOTYPE = 41;
	go$pkg.EPWROFF = 82;
	go$pkg.ERANGE = 34;
	go$pkg.EREMOTE = 71;
	go$pkg.EROFS = 30;
	go$pkg.ERPCMISMATCH = 73;
	go$pkg.ESHLIBVERS = 87;
	go$pkg.ESHUTDOWN = 58;
	go$pkg.ESOCKTNOSUPPORT = 44;
	go$pkg.ESPIPE = 29;
	go$pkg.ESRCH = 3;
	go$pkg.ESTALE = 70;
	go$pkg.ETIME = 101;
	go$pkg.ETIMEDOUT = 60;
	go$pkg.ETOOMANYREFS = 59;
	go$pkg.ETXTBSY = 26;
	go$pkg.EUSERS = 68;
	go$pkg.EWOULDBLOCK = 35;
	go$pkg.EXDEV = 18;
	go$pkg.SIGABRT = 6;
	go$pkg.SIGALRM = 14;
	go$pkg.SIGBUS = 10;
	go$pkg.SIGCHLD = 20;
	go$pkg.SIGCONT = 19;
	go$pkg.SIGEMT = 7;
	go$pkg.SIGFPE = 8;
	go$pkg.SIGHUP = 1;
	go$pkg.SIGILL = 4;
	go$pkg.SIGINFO = 29;
	go$pkg.SIGINT = 2;
	go$pkg.SIGIO = 23;
	go$pkg.SIGIOT = 6;
	go$pkg.SIGKILL = 9;
	go$pkg.SIGPIPE = 13;
	go$pkg.SIGPROF = 27;
	go$pkg.SIGQUIT = 3;
	go$pkg.SIGSEGV = 11;
	go$pkg.SIGSTOP = 17;
	go$pkg.SIGSYS = 12;
	go$pkg.SIGTERM = 15;
	go$pkg.SIGTRAP = 5;
	go$pkg.SIGTSTP = 18;
	go$pkg.SIGTTIN = 21;
	go$pkg.SIGTTOU = 22;
	go$pkg.SIGURG = 16;
	go$pkg.SIGUSR1 = 30;
	go$pkg.SIGUSR2 = 31;
	go$pkg.SIGVTALRM = 26;
	go$pkg.SIGWINCH = 28;
	go$pkg.SIGXCPU = 24;
	go$pkg.SIGXFSZ = 25;
	go$pkg.SYS_SYSCALL = 0;
	go$pkg.SYS_EXIT = 1;
	go$pkg.SYS_FORK = 2;
	go$pkg.SYS_READ = 3;
	go$pkg.SYS_WRITE = 4;
	go$pkg.SYS_OPEN = 5;
	go$pkg.SYS_CLOSE = 6;
	go$pkg.SYS_WAIT4 = 7;
	go$pkg.SYS_LINK = 9;
	go$pkg.SYS_UNLINK = 10;
	go$pkg.SYS_CHDIR = 12;
	go$pkg.SYS_FCHDIR = 13;
	go$pkg.SYS_MKNOD = 14;
	go$pkg.SYS_CHMOD = 15;
	go$pkg.SYS_CHOWN = 16;
	go$pkg.SYS_GETFSSTAT = 18;
	go$pkg.SYS_GETPID = 20;
	go$pkg.SYS_SETUID = 23;
	go$pkg.SYS_GETUID = 24;
	go$pkg.SYS_GETEUID = 25;
	go$pkg.SYS_PTRACE = 26;
	go$pkg.SYS_RECVMSG = 27;
	go$pkg.SYS_SENDMSG = 28;
	go$pkg.SYS_RECVFROM = 29;
	go$pkg.SYS_ACCEPT = 30;
	go$pkg.SYS_GETPEERNAME = 31;
	go$pkg.SYS_GETSOCKNAME = 32;
	go$pkg.SYS_ACCESS = 33;
	go$pkg.SYS_CHFLAGS = 34;
	go$pkg.SYS_FCHFLAGS = 35;
	go$pkg.SYS_SYNC = 36;
	go$pkg.SYS_KILL = 37;
	go$pkg.SYS_GETPPID = 39;
	go$pkg.SYS_DUP = 41;
	go$pkg.SYS_PIPE = 42;
	go$pkg.SYS_GETEGID = 43;
	go$pkg.SYS_PROFIL = 44;
	go$pkg.SYS_SIGACTION = 46;
	go$pkg.SYS_GETGID = 47;
	go$pkg.SYS_SIGPROCMASK = 48;
	go$pkg.SYS_GETLOGIN = 49;
	go$pkg.SYS_SETLOGIN = 50;
	go$pkg.SYS_ACCT = 51;
	go$pkg.SYS_SIGPENDING = 52;
	go$pkg.SYS_SIGALTSTACK = 53;
	go$pkg.SYS_IOCTL = 54;
	go$pkg.SYS_REBOOT = 55;
	go$pkg.SYS_REVOKE = 56;
	go$pkg.SYS_SYMLINK = 57;
	go$pkg.SYS_READLINK = 58;
	go$pkg.SYS_EXECVE = 59;
	go$pkg.SYS_UMASK = 60;
	go$pkg.SYS_CHROOT = 61;
	go$pkg.SYS_MSYNC = 65;
	go$pkg.SYS_VFORK = 66;
	go$pkg.SYS_MUNMAP = 73;
	go$pkg.SYS_MPROTECT = 74;
	go$pkg.SYS_MADVISE = 75;
	go$pkg.SYS_MINCORE = 78;
	go$pkg.SYS_GETGROUPS = 79;
	go$pkg.SYS_SETGROUPS = 80;
	go$pkg.SYS_GETPGRP = 81;
	go$pkg.SYS_SETPGID = 82;
	go$pkg.SYS_SETITIMER = 83;
	go$pkg.SYS_SWAPON = 85;
	go$pkg.SYS_GETITIMER = 86;
	go$pkg.SYS_GETDTABLESIZE = 89;
	go$pkg.SYS_DUP2 = 90;
	go$pkg.SYS_FCNTL = 92;
	go$pkg.SYS_SELECT = 93;
	go$pkg.SYS_FSYNC = 95;
	go$pkg.SYS_SETPRIORITY = 96;
	go$pkg.SYS_SOCKET = 97;
	go$pkg.SYS_CONNECT = 98;
	go$pkg.SYS_GETPRIORITY = 100;
	go$pkg.SYS_BIND = 104;
	go$pkg.SYS_SETSOCKOPT = 105;
	go$pkg.SYS_LISTEN = 106;
	go$pkg.SYS_SIGSUSPEND = 111;
	go$pkg.SYS_GETTIMEOFDAY = 116;
	go$pkg.SYS_GETRUSAGE = 117;
	go$pkg.SYS_GETSOCKOPT = 118;
	go$pkg.SYS_READV = 120;
	go$pkg.SYS_WRITEV = 121;
	go$pkg.SYS_SETTIMEOFDAY = 122;
	go$pkg.SYS_FCHOWN = 123;
	go$pkg.SYS_FCHMOD = 124;
	go$pkg.SYS_SETREUID = 126;
	go$pkg.SYS_SETREGID = 127;
	go$pkg.SYS_RENAME = 128;
	go$pkg.SYS_FLOCK = 131;
	go$pkg.SYS_MKFIFO = 132;
	go$pkg.SYS_SENDTO = 133;
	go$pkg.SYS_SHUTDOWN = 134;
	go$pkg.SYS_SOCKETPAIR = 135;
	go$pkg.SYS_MKDIR = 136;
	go$pkg.SYS_RMDIR = 137;
	go$pkg.SYS_UTIMES = 138;
	go$pkg.SYS_FUTIMES = 139;
	go$pkg.SYS_ADJTIME = 140;
	go$pkg.SYS_GETHOSTUUID = 142;
	go$pkg.SYS_SETSID = 147;
	go$pkg.SYS_GETPGID = 151;
	go$pkg.SYS_SETPRIVEXEC = 152;
	go$pkg.SYS_PREAD = 153;
	go$pkg.SYS_PWRITE = 154;
	go$pkg.SYS_NFSSVC = 155;
	go$pkg.SYS_STATFS = 157;
	go$pkg.SYS_FSTATFS = 158;
	go$pkg.SYS_UNMOUNT = 159;
	go$pkg.SYS_GETFH = 161;
	go$pkg.SYS_QUOTACTL = 165;
	go$pkg.SYS_MOUNT = 167;
	go$pkg.SYS_CSOPS = 169;
	go$pkg.SYS_WAITID = 173;
	go$pkg.SYS_ADD_PROFIL = 176;
	go$pkg.SYS_KDEBUG_TRACE = 180;
	go$pkg.SYS_SETGID = 181;
	go$pkg.SYS_SETEGID = 182;
	go$pkg.SYS_SETEUID = 183;
	go$pkg.SYS_SIGRETURN = 184;
	go$pkg.SYS_CHUD = 185;
	go$pkg.SYS_FDATASYNC = 187;
	go$pkg.SYS_STAT = 188;
	go$pkg.SYS_FSTAT = 189;
	go$pkg.SYS_LSTAT = 190;
	go$pkg.SYS_PATHCONF = 191;
	go$pkg.SYS_FPATHCONF = 192;
	go$pkg.SYS_GETRLIMIT = 194;
	go$pkg.SYS_SETRLIMIT = 195;
	go$pkg.SYS_GETDIRENTRIES = 196;
	go$pkg.SYS_MMAP = 197;
	go$pkg.SYS_LSEEK = 199;
	go$pkg.SYS_TRUNCATE = 200;
	go$pkg.SYS_FTRUNCATE = 201;
	go$pkg.SYS___SYSCTL = 202;
	go$pkg.SYS_MLOCK = 203;
	go$pkg.SYS_MUNLOCK = 204;
	go$pkg.SYS_UNDELETE = 205;
	go$pkg.SYS_ATSOCKET = 206;
	go$pkg.SYS_ATGETMSG = 207;
	go$pkg.SYS_ATPUTMSG = 208;
	go$pkg.SYS_ATPSNDREQ = 209;
	go$pkg.SYS_ATPSNDRSP = 210;
	go$pkg.SYS_ATPGETREQ = 211;
	go$pkg.SYS_ATPGETRSP = 212;
	go$pkg.SYS_MKCOMPLEX = 216;
	go$pkg.SYS_STATV = 217;
	go$pkg.SYS_LSTATV = 218;
	go$pkg.SYS_FSTATV = 219;
	go$pkg.SYS_GETATTRLIST = 220;
	go$pkg.SYS_SETATTRLIST = 221;
	go$pkg.SYS_GETDIRENTRIESATTR = 222;
	go$pkg.SYS_EXCHANGEDATA = 223;
	go$pkg.SYS_SEARCHFS = 225;
	go$pkg.SYS_DELETE = 226;
	go$pkg.SYS_COPYFILE = 227;
	go$pkg.SYS_FGETATTRLIST = 228;
	go$pkg.SYS_FSETATTRLIST = 229;
	go$pkg.SYS_POLL = 230;
	go$pkg.SYS_WATCHEVENT = 231;
	go$pkg.SYS_WAITEVENT = 232;
	go$pkg.SYS_MODWATCH = 233;
	go$pkg.SYS_GETXATTR = 234;
	go$pkg.SYS_FGETXATTR = 235;
	go$pkg.SYS_SETXATTR = 236;
	go$pkg.SYS_FSETXATTR = 237;
	go$pkg.SYS_REMOVEXATTR = 238;
	go$pkg.SYS_FREMOVEXATTR = 239;
	go$pkg.SYS_LISTXATTR = 240;
	go$pkg.SYS_FLISTXATTR = 241;
	go$pkg.SYS_FSCTL = 242;
	go$pkg.SYS_INITGROUPS = 243;
	go$pkg.SYS_POSIX_SPAWN = 244;
	go$pkg.SYS_FFSCTL = 245;
	go$pkg.SYS_NFSCLNT = 247;
	go$pkg.SYS_FHOPEN = 248;
	go$pkg.SYS_MINHERIT = 250;
	go$pkg.SYS_SEMSYS = 251;
	go$pkg.SYS_MSGSYS = 252;
	go$pkg.SYS_SHMSYS = 253;
	go$pkg.SYS_SEMCTL = 254;
	go$pkg.SYS_SEMGET = 255;
	go$pkg.SYS_SEMOP = 256;
	go$pkg.SYS_MSGCTL = 258;
	go$pkg.SYS_MSGGET = 259;
	go$pkg.SYS_MSGSND = 260;
	go$pkg.SYS_MSGRCV = 261;
	go$pkg.SYS_SHMAT = 262;
	go$pkg.SYS_SHMCTL = 263;
	go$pkg.SYS_SHMDT = 264;
	go$pkg.SYS_SHMGET = 265;
	go$pkg.SYS_SHM_OPEN = 266;
	go$pkg.SYS_SHM_UNLINK = 267;
	go$pkg.SYS_SEM_OPEN = 268;
	go$pkg.SYS_SEM_CLOSE = 269;
	go$pkg.SYS_SEM_UNLINK = 270;
	go$pkg.SYS_SEM_WAIT = 271;
	go$pkg.SYS_SEM_TRYWAIT = 272;
	go$pkg.SYS_SEM_POST = 273;
	go$pkg.SYS_SEM_GETVALUE = 274;
	go$pkg.SYS_SEM_INIT = 275;
	go$pkg.SYS_SEM_DESTROY = 276;
	go$pkg.SYS_OPEN_EXTENDED = 277;
	go$pkg.SYS_UMASK_EXTENDED = 278;
	go$pkg.SYS_STAT_EXTENDED = 279;
	go$pkg.SYS_LSTAT_EXTENDED = 280;
	go$pkg.SYS_FSTAT_EXTENDED = 281;
	go$pkg.SYS_CHMOD_EXTENDED = 282;
	go$pkg.SYS_FCHMOD_EXTENDED = 283;
	go$pkg.SYS_ACCESS_EXTENDED = 284;
	go$pkg.SYS_SETTID = 285;
	go$pkg.SYS_GETTID = 286;
	go$pkg.SYS_SETSGROUPS = 287;
	go$pkg.SYS_GETSGROUPS = 288;
	go$pkg.SYS_SETWGROUPS = 289;
	go$pkg.SYS_GETWGROUPS = 290;
	go$pkg.SYS_MKFIFO_EXTENDED = 291;
	go$pkg.SYS_MKDIR_EXTENDED = 292;
	go$pkg.SYS_IDENTITYSVC = 293;
	go$pkg.SYS_SHARED_REGION_CHECK_NP = 294;
	go$pkg.SYS_VM_PRESSURE_MONITOR = 296;
	go$pkg.SYS_PSYNCH_RW_LONGRDLOCK = 297;
	go$pkg.SYS_PSYNCH_RW_YIELDWRLOCK = 298;
	go$pkg.SYS_PSYNCH_RW_DOWNGRADE = 299;
	go$pkg.SYS_PSYNCH_RW_UPGRADE = 300;
	go$pkg.SYS_PSYNCH_MUTEXWAIT = 301;
	go$pkg.SYS_PSYNCH_MUTEXDROP = 302;
	go$pkg.SYS_PSYNCH_CVBROAD = 303;
	go$pkg.SYS_PSYNCH_CVSIGNAL = 304;
	go$pkg.SYS_PSYNCH_CVWAIT = 305;
	go$pkg.SYS_PSYNCH_RW_RDLOCK = 306;
	go$pkg.SYS_PSYNCH_RW_WRLOCK = 307;
	go$pkg.SYS_PSYNCH_RW_UNLOCK = 308;
	go$pkg.SYS_PSYNCH_RW_UNLOCK2 = 309;
	go$pkg.SYS_GETSID = 310;
	go$pkg.SYS_SETTID_WITH_PID = 311;
	go$pkg.SYS_PSYNCH_CVCLRPREPOST = 312;
	go$pkg.SYS_AIO_FSYNC = 313;
	go$pkg.SYS_AIO_RETURN = 314;
	go$pkg.SYS_AIO_SUSPEND = 315;
	go$pkg.SYS_AIO_CANCEL = 316;
	go$pkg.SYS_AIO_ERROR = 317;
	go$pkg.SYS_AIO_READ = 318;
	go$pkg.SYS_AIO_WRITE = 319;
	go$pkg.SYS_LIO_LISTIO = 320;
	go$pkg.SYS_IOPOLICYSYS = 322;
	go$pkg.SYS_PROCESS_POLICY = 323;
	go$pkg.SYS_MLOCKALL = 324;
	go$pkg.SYS_MUNLOCKALL = 325;
	go$pkg.SYS_ISSETUGID = 327;
	go$pkg.SYS___PTHREAD_KILL = 328;
	go$pkg.SYS___PTHREAD_SIGMASK = 329;
	go$pkg.SYS___SIGWAIT = 330;
	go$pkg.SYS___DISABLE_THREADSIGNAL = 331;
	go$pkg.SYS___PTHREAD_MARKCANCEL = 332;
	go$pkg.SYS___PTHREAD_CANCELED = 333;
	go$pkg.SYS___SEMWAIT_SIGNAL = 334;
	go$pkg.SYS_PROC_INFO = 336;
	go$pkg.SYS_SENDFILE = 337;
	go$pkg.SYS_STAT64 = 338;
	go$pkg.SYS_FSTAT64 = 339;
	go$pkg.SYS_LSTAT64 = 340;
	go$pkg.SYS_STAT64_EXTENDED = 341;
	go$pkg.SYS_LSTAT64_EXTENDED = 342;
	go$pkg.SYS_FSTAT64_EXTENDED = 343;
	go$pkg.SYS_GETDIRENTRIES64 = 344;
	go$pkg.SYS_STATFS64 = 345;
	go$pkg.SYS_FSTATFS64 = 346;
	go$pkg.SYS_GETFSSTAT64 = 347;
	go$pkg.SYS___PTHREAD_CHDIR = 348;
	go$pkg.SYS___PTHREAD_FCHDIR = 349;
	go$pkg.SYS_AUDIT = 350;
	go$pkg.SYS_AUDITON = 351;
	go$pkg.SYS_GETAUID = 353;
	go$pkg.SYS_SETAUID = 354;
	go$pkg.SYS_GETAUDIT = 355;
	go$pkg.SYS_SETAUDIT = 356;
	go$pkg.SYS_GETAUDIT_ADDR = 357;
	go$pkg.SYS_SETAUDIT_ADDR = 358;
	go$pkg.SYS_AUDITCTL = 359;
	go$pkg.SYS_BSDTHREAD_CREATE = 360;
	go$pkg.SYS_BSDTHREAD_TERMINATE = 361;
	go$pkg.SYS_KQUEUE = 362;
	go$pkg.SYS_KEVENT = 363;
	go$pkg.SYS_LCHOWN = 364;
	go$pkg.SYS_STACK_SNAPSHOT = 365;
	go$pkg.SYS_BSDTHREAD_REGISTER = 366;
	go$pkg.SYS_WORKQ_OPEN = 367;
	go$pkg.SYS_WORKQ_KERNRETURN = 368;
	go$pkg.SYS_KEVENT64 = 369;
	go$pkg.SYS___OLD_SEMWAIT_SIGNAL = 370;
	go$pkg.SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL = 371;
	go$pkg.SYS_THREAD_SELFID = 372;
	go$pkg.SYS___MAC_EXECVE = 380;
	go$pkg.SYS___MAC_SYSCALL = 381;
	go$pkg.SYS___MAC_GET_FILE = 382;
	go$pkg.SYS___MAC_SET_FILE = 383;
	go$pkg.SYS___MAC_GET_LINK = 384;
	go$pkg.SYS___MAC_SET_LINK = 385;
	go$pkg.SYS___MAC_GET_PROC = 386;
	go$pkg.SYS___MAC_SET_PROC = 387;
	go$pkg.SYS___MAC_GET_FD = 388;
	go$pkg.SYS___MAC_SET_FD = 389;
	go$pkg.SYS___MAC_GET_PID = 390;
	go$pkg.SYS___MAC_GET_LCID = 391;
	go$pkg.SYS___MAC_GET_LCTX = 392;
	go$pkg.SYS___MAC_SET_LCTX = 393;
	go$pkg.SYS_SETLCID = 394;
	go$pkg.SYS_GETLCID = 395;
	go$pkg.SYS_READ_NOCANCEL = 396;
	go$pkg.SYS_WRITE_NOCANCEL = 397;
	go$pkg.SYS_OPEN_NOCANCEL = 398;
	go$pkg.SYS_CLOSE_NOCANCEL = 399;
	go$pkg.SYS_WAIT4_NOCANCEL = 400;
	go$pkg.SYS_RECVMSG_NOCANCEL = 401;
	go$pkg.SYS_SENDMSG_NOCANCEL = 402;
	go$pkg.SYS_RECVFROM_NOCANCEL = 403;
	go$pkg.SYS_ACCEPT_NOCANCEL = 404;
	go$pkg.SYS_MSYNC_NOCANCEL = 405;
	go$pkg.SYS_FCNTL_NOCANCEL = 406;
	go$pkg.SYS_SELECT_NOCANCEL = 407;
	go$pkg.SYS_FSYNC_NOCANCEL = 408;
	go$pkg.SYS_CONNECT_NOCANCEL = 409;
	go$pkg.SYS_SIGSUSPEND_NOCANCEL = 410;
	go$pkg.SYS_READV_NOCANCEL = 411;
	go$pkg.SYS_WRITEV_NOCANCEL = 412;
	go$pkg.SYS_SENDTO_NOCANCEL = 413;
	go$pkg.SYS_PREAD_NOCANCEL = 414;
	go$pkg.SYS_PWRITE_NOCANCEL = 415;
	go$pkg.SYS_WAITID_NOCANCEL = 416;
	go$pkg.SYS_POLL_NOCANCEL = 417;
	go$pkg.SYS_MSGSND_NOCANCEL = 418;
	go$pkg.SYS_MSGRCV_NOCANCEL = 419;
	go$pkg.SYS_SEM_WAIT_NOCANCEL = 420;
	go$pkg.SYS_AIO_SUSPEND_NOCANCEL = 421;
	go$pkg.SYS___SIGWAIT_NOCANCEL = 422;
	go$pkg.SYS___SEMWAIT_SIGNAL_NOCANCEL = 423;
	go$pkg.SYS___MAC_MOUNT = 424;
	go$pkg.SYS___MAC_GET_MOUNT = 425;
	go$pkg.SYS___MAC_GETFSSTAT = 426;
	go$pkg.SYS_FSGETPATH = 427;
	go$pkg.SYS_AUDIT_SESSION_SELF = 428;
	go$pkg.SYS_AUDIT_SESSION_JOIN = 429;
	go$pkg.SYS_FILEPORT_MAKEPORT = 430;
	go$pkg.SYS_FILEPORT_MAKEFD = 431;
	go$pkg.SYS_AUDIT_SESSION_PORT = 432;
	go$pkg.SYS_PID_SUSPEND = 433;
	go$pkg.SYS_PID_RESUME = 434;
	go$pkg.SYS_PID_HIBERNATE = 435;
	go$pkg.SYS_PID_SHUTDOWN_SOCKETS = 436;
	go$pkg.SYS_SHARED_REGION_MAP_AND_SLIDE_NP = 438;
	go$pkg.SYS_MAXSYSCALL = 439;
	var sizeofPtr = 8;
	var sizeofShort = 2;
	var sizeofInt = 4;
	var sizeofLong = 8;
	var sizeofLongLong = 8;
	go$pkg.SizeofSockaddrInet4 = 16;
	go$pkg.SizeofSockaddrInet6 = 28;
	go$pkg.SizeofSockaddrAny = 108;
	go$pkg.SizeofSockaddrUnix = 106;
	go$pkg.SizeofSockaddrDatalink = 20;
	go$pkg.SizeofLinger = 8;
	go$pkg.SizeofIPMreq = 8;
	go$pkg.SizeofIPv6Mreq = 20;
	go$pkg.SizeofMsghdr = 48;
	go$pkg.SizeofCmsghdr = 12;
	go$pkg.SizeofInet4Pktinfo = 12;
	go$pkg.SizeofInet6Pktinfo = 20;
	go$pkg.SizeofIPv6MTUInfo = 32;
	go$pkg.SizeofICMPv6Filter = 32;
	go$pkg.PTRACE_TRACEME = 0;
	go$pkg.PTRACE_CONT = 7;
	go$pkg.PTRACE_KILL = 8;
	go$pkg.SizeofIfMsghdr = 112;
	go$pkg.SizeofIfData = 96;
	go$pkg.SizeofIfaMsghdr = 20;
	go$pkg.SizeofIfmaMsghdr = 16;
	go$pkg.SizeofIfmaMsghdr2 = 20;
	go$pkg.SizeofRtMsghdr = 92;
	go$pkg.SizeofRtMetrics = 56;
	go$pkg.SizeofBpfVersion = 4;
	go$pkg.SizeofBpfStat = 8;
	go$pkg.SizeofBpfProgram = 16;
	go$pkg.SizeofBpfInsn = 8;
	go$pkg.SizeofBpfHdr = 20;
	var envOnce = new sync.Once.Ptr();
	var envLock = new sync.RWMutex.Ptr();
	var env = false;
	var envs = (go$sliceType(Go$String)).nil;
	go$pkg.ForkLock = new sync.RWMutex.Ptr();
	var zeroProcAttr = new ProcAttr.Ptr();
	var zeroSysProcAttr = new SysProcAttr.Ptr();
	var _zero = 0;
	var mapper = (go$ptrType(mmapper)).nil;
	go$pkg.Stdin = 0;
	go$pkg.Stdout = 0;
	go$pkg.Stderr = 0;
	go$pkg.SocketDisableIPv6 = false;
	var ioSync = new Go$Int64(0, 0);
	var errors = go$makeNativeArray("String", 106, function() { return ""; });
	var signals = go$makeNativeArray("String", 32, function() { return ""; });

			if (go$packages["runtime"].GOOS === "windows") {
				Syscall = Syscall6 = Syscall9 = Syscall12 = Syscall15 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.Syscall9 = go$pkg.Syscall12 = go$pkg.Syscall15 = loadlibrary = getprocaddress = function() { throw "Syscalls not available." };
				getStdHandle = GetCommandLine = go$pkg.GetCommandLine = function() {};
				CommandLineToArgv = go$pkg.CommandLineToArgv = function() { return [null, {}]; };
				Getenv = go$pkg.Getenv = function(key) { return ["", false]; };
				GetTimeZoneInformation = go$pkg.GetTimeZoneInformation = function() { return [undefined, true]; };
			} else if (typeof process === "undefined") {
				go$pkg.go$setSyscall = function(f) {
					Syscall = Syscall6 = RawSyscall = RawSyscall6 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.RawSyscall = go$pkg.RawSyscall6 = f;
				}
				go$pkg.go$setSyscall(function() { throw "Syscalls not available." });
				envs = new (go$sliceType(Go$String))(new Array(0));
			} else {
				var syscall = require("syscall");
				Syscall = go$pkg.Syscall = syscall.Syscall;
				Syscall6 = go$pkg.Syscall6 = syscall.Syscall6;
				RawSyscall = go$pkg.RawSyscall = syscall.Syscall;
				RawSyscall6 = go$pkg.RawSyscall6 = syscall.Syscall6;
				BytePtrFromString = go$pkg.BytePtrFromString = function(s) { return [go$stringToBytes(s, true), null]; };

				var envkeys = Object.keys(process.env);
				envs = new (go$sliceType(Go$String))(new Array(envkeys.length));
				var i;
				for(i = 0; i < envkeys.length; i += 1) {
					envs.array[i] = envkeys[i] + "=" + process.env[envkeys[i]];
				}
			}
			go$pkg.init = function() {
		mapper = new mmapper.Ptr(new sync.Mutex.Ptr(), new Go$Map(), mmap, munmap);
		go$pkg.Stdin = 0;
		go$pkg.Stdout = 1;
		go$pkg.Stderr = 2;
		errors = go$toNativeArray("String", ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		signals = go$toNativeArray("String", ["", "hangup", "interrupt", "quit", "illegal instruction", "trace/BPT trap", "abort trap", "EMT trap", "floating point exception", "killed", "bus error", "segmentation fault", "bad system call", "broken pipe", "alarm clock", "terminated", "urgent I/O condition", "suspended (signal)", "suspended", "continued", "child exited", "stopped (tty input)", "stopped (tty output)", "I/O possible", "cputime limit exceeded", "filesize limit exceeded", "virtual timer expired", "profiling timer expired", "window size changes", "information request", "user defined signal 1", "user defined signal 2"]);
	};
