0Ç
⁄Çêpackage subtle
func @"".ConstantTimeByteEq(@"".x uint8, @"".y uint8) (? int)
func @"".ConstantTimeCompare(@"".x []byte, @"".y []byte) (? int)
func @"".ConstantTimeCopy(@"".v int, @"".x []byte, @"".y []byte) ()
func @"".ConstantTimeEq(@"".x int32, @"".y int32) (? int)
func @"".ConstantTimeLessOrEq(@"".x int, @"".y int) (? int)
func @"".ConstantTimeSelect(@"".v int, @"".x int, @"".y int) (? int)
$$
0runtimecrypto/subtleÇ	(	var ConstantTimeCompare = go$pkg.ConstantTimeCompare = function(x, y) {
		var v, i, _slice, _index, _slice$1, _index$1;
		v = 0;
		i = 0;
		while (i < x.length) {
			v = (v | ((((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) ^ (_slice$1 = y, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) << 24 >>> 24))) >>> 0;
			i = i + 1 >> 0;
		}
		return ConstantTimeByteEq(v, 0);
	};
	var ConstantTimeSelect = go$pkg.ConstantTimeSelect = function(v, x, y) {
		return ((~((v - 1 >> 0)) >> 0) & x) | (((v - 1 >> 0)) & y);
	};
	var ConstantTimeByteEq = go$pkg.ConstantTimeByteEq = function(x, y) {
		var z;
		z = ~(((x ^ y) << 24 >>> 24)) << 24 >>> 24;
		z = (z & ((z >>> 4 << 24 >>> 24))) >>> 0;
		z = (z & ((z >>> 2 << 24 >>> 24))) >>> 0;
		z = (z & ((z >>> 1 << 24 >>> 24))) >>> 0;
		return (z >> 0);
	};
	var ConstantTimeEq = go$pkg.ConstantTimeEq = function(x, y) {
		var z;
		z = ~(((x ^ y) >> 0)) >> 0;
		z = z & ((z >> 16 >> 0));
		z = z & ((z >> 8 >> 0));
		z = z & ((z >> 4 >> 0));
		z = z & ((z >> 2 >> 0));
		z = z & ((z >> 1 >> 0));
		return ((z & 1) >> 0);
	};
	var ConstantTimeCopy = go$pkg.ConstantTimeCopy = function(v, x, y) {
		var xmask, ymask, i, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		xmask = ((v - 1 >> 0) << 24 >>> 24);
		ymask = ((~((v - 1 >> 0)) >> 0) << 24 >>> 24);
		i = 0;
		while (i < x.length) {
			_slice$2 = x, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = ((((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) & xmask) >>> 0) | (((_slice$1 = y, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) & ymask) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		return;
	};
	var ConstantTimeLessOrEq = go$pkg.ConstantTimeLessOrEq = function(x, y) {
		var x32, y32;
		x32 = (x >> 0);
		y32 = (y >> 0);
		return (((((((x32 - y32 >> 0) - 1 >> 0)) >> 31 >> 0)) & 1) >> 0);
	};
	go$pkg.init = function() {
	};
